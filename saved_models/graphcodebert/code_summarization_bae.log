[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.layer_norm.bias', 'lm_head.dense.bias', 'lm_head.decoder.bias', 'lm_head.dense.weight', 'lm_head.bias', 'lm_head.layer_norm.weight', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
textattack: Running 4 worker(s) on 4 GPU(s).
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:11<3:06:33, 11.20s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:11<3:06:38, 11.21s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 2/1000 [00:22<3:07:42, 11.28s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:22<3:07:42, 11.28s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [00:30<2:46:59, 10.05s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:30<2:47:00, 10.05s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 4/1000 [00:40<2:48:07, 10.13s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:40<2:48:07, 10.13s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 5/1000 [01:06<3:41:26, 13.35s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [01:06<3:41:27, 13.35s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [01:17<3:33:02, 12.86s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[format]] ( ObservableSource < T > [[data]] ) { ObjectHelper . requireNonNull ( [[data]] , "source is null" ) ; if ( [[data]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[data]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[data]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Observes the observable using the given scheduler . --> Observable observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[function]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an Observable with the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[command]] ( Comparator < ? super T > [[right]] ) { ObjectHelper . requireNonNull ( [[right]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[right]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new capacity instance . --> Create a new uncastProcessor instance --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[c]] ( int [[e]] ) { return new UnicastProcessor < T > ( [[e]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Tries to apply scalar XMap as a scalar X map . --> Operator operator --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[operator]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[source]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[source]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 6/1000 [01:17<3:33:02, 12.86s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 7/1000 [01:18<3:06:20, 11.26s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 7/1000 [01:18<3:06:20, 11.26s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 8/1000 [01:21<2:48:10, 10.17s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 8/1000 [01:21<2:48:10, 10.17s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 9/1000 [01:39<3:02:01, 11.02s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 9/1000 [01:39<3:02:01, 11.02s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 10/1000 [01:45<2:53:44, 10.53s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 10/1000 [01:45<2:53:45, 10.53s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 11/1000 [01:46<2:39:32,  9.68s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 11/1000 [01:46<2:39:32,  9.68s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 12/1000 [01:51<2:32:54,  9.29s/it]Creates a new executor with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[program]] ( int capacityHint , Runnable [[buffer]] ) { ObjectHelper . requireNonNull ( [[buffer]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[buffer]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
Emit the given value to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[boundary]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[flow]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[flow]] , [[boundary]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[boundary]] ) ; } } else { q . offer ( [[boundary]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[flow]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 8 ---------------------------------------------
Gets a sequence of scalar X maps from the supplied value . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[document]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[text]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[text]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Resets the handlers . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[ask]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[end]]" != "[[end]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 10 ---------------------------------------------
Retries the first element of the element with the given predicate . --> Attempt to retry a single element --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[arguments]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[arguments]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[assume]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|          | 12/1000 [01:51<2:32:54,  9.29s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|▏         | 13/1000 [01:57<2:28:45,  9.04s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 13/1000 [01:57<2:28:45,  9.04s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 14/1000 [02:15<2:38:54,  9.67s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   1%|▏         | 14/1000 [02:15<2:38:54,  9.67s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   2%|▏         | 15/1000 [02:17<2:30:31,  9.17s/it][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 15/1000 [02:17<2:30:31,  9.17s/it][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 16/1000 [02:30<2:34:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 16/1000 [02:30<2:34:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 17/1000 [02:31<2:26:24,  8.94s/it][Succeeded / Failed / Skipped / Total] 9 / 8 / 0 / 17:   2%|▏         | 17/1000 [02:31<2:26:24,  8.94s/it][Succeeded / Failed / Skipped / Total] 9 / 8 / 0 / 17:   2%|▏         | 18/1000 [02:39<2:24:52,  8.85s/it][Succeeded / Failed / Skipped / Total] 9 / 9 / 0 / 18:   2%|▏         | 18/1000 [02:39<2:24:52,  8.85s/it][Succeeded / Failed / Skipped / Total] 9 / 9 / 0 / 18:   2%|▏         | 19/1000 [02:45<2:22:22,  8.71s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 19/1000 [02:45<2:22:22,  8.71s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 20/1000 [02:59<2:26:31,  8.97s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 20/1000 [02:59<2:26:31,  8.97s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 21/1000 [03:03<2:22:22,  8.73s/it][Succeeded / Failed / Skipped / Total] 9 / 12 / 0 / 21:   2%|▏         | 21/1000 [03:03<2:22:22,  8.73s/it][Succeeded / Failed / Skipped / Total] 9 / 12 / 0 / 21:   2%|▏         | 22/1000 [03:36<2:40:25,  9.84s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 22/1000 [03:36<2:40:25,  9.84s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 23/1000 [03:49<2:42:28,  9.98s/it]Construct a Maybe from a CompletableSource --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[replace]] ( CompletableSource [[message]] ) { ObjectHelper . requireNonNull ( [[message]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[message]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 13 ---------------------------------------------
Ensures that an object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[export]] > [[export]] requireNonNull ( [[export]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Gets the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[statement]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Static factory for callable . --> Query for function results --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[query]] ( T [[function]] ) { return new JustValue < Object , T > ( [[function]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Create a reusable subject . --> The main basic test --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[main]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a reusable subject . --> Create a unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[python]] ) { return new UnicastSubject < T > ( [[python]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that returns a value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[function]] , U > Function < [[function]] , U > [[parameters]] ( U [[itself]] ) { return new JustValue < [[function]] , U > ( [[itself]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Returns a new function that casts to the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[one]] , U > Function < [[one]] , U > [[call]] ( Class < U > [[empty]] ) { return new CastToClass < [[one]] , U > ( [[empty]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 20 ---------------------------------------------
Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[implement]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a reusable subject with default buffer size . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[call]] ( boolean [[array]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[array]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Creates a new uncast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[assume]] ( int [[nat]] , Runnable [[name]] ) { return new UnicastSubject < T > ( [[nat]] , [[name]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 23/1000 [03:49<2:42:28,  9.98s/it][Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 24/1000 [04:07<2:47:53, 10.32s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▏         | 24/1000 [04:07<2:47:53, 10.32s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▎         | 25/1000 [04:47<3:06:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 11 / 14 / 0 / 25:   2%|▎         | 25/1000 [04:47<3:06:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 11 / 14 / 0 / 25:   3%|▎         | 26/1000 [05:09<3:13:17, 11.91s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 26/1000 [05:09<3:13:17, 11.91s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 27/1000 [05:19<3:11:41, 11.82s/it][Succeeded / Failed / Skipped / Total] 13 / 14 / 0 / 27:   3%|▎         | 27/1000 [05:19<3:11:41, 11.82s/it][Succeeded / Failed / Skipped / Total] 13 / 14 / 0 / 27:   3%|▎         | 28/1000 [05:23<3:07:15, 11.56s/it][Succeeded / Failed / Skipped / Total] 13 / 15 / 0 / 28:   3%|▎         | 28/1000 [05:23<3:07:15, 11.56s/it][Succeeded / Failed / Skipped / Total] 13 / 15 / 0 / 28:   3%|▎         | 29/1000 [05:41<3:10:45, 11.79s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 29/1000 [05:41<3:10:45, 11.79s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 30/1000 [06:21<3:25:33, 12.71s/it]Waits until the element has failed . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[execute]] ( long [[order]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[order]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[order]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Requests to a subscription . --> Claim a given number of messages --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[claim]] ( Subscription s , int [[es]] ) { s . request ( [[es]] < 0 ? Long . MAX_VALUE : [[es]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Waits for the element to complete . --> Include program --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[include]] ( long [[program]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[program]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[blank]]" == "[[blank]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Post complete event . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[var]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[w]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 27 ---------------------------------------------
Signal that the stream is complete . --> creates a new packet --> Socre: 1.0

[[[[Adv]]]]: protected final void [[complete]] ( R [[n]] ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[create]] ( R [[²]] ) { long [[alt]] = produced ; if ( [[alt]] != 0 ) { BackpressureHelper . produced ( this , [[alt]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[²]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[²]] ) ; downstream . onComplete ( ) ; return ; } value = [[²]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 28 ---------------------------------------------
Gets the value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[at]] = value ; if ( [[at]] != null && ! NotificationLite . isError ( [[at]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Gets the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[utility]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 16 / 0 / 30:   3%|▎         | 30/1000 [06:21<3:25:33, 12.71s/it][Succeeded / Failed / Skipped / Total] 14 / 16 / 0 / 30:   3%|▎         | 31/1000 [06:58<3:38:02, 13.50s/it][Succeeded / Failed / Skipped / Total] 15 / 16 / 0 / 31:   3%|▎         | 31/1000 [06:58<3:38:02, 13.50s/it][Succeeded / Failed / Skipped / Total] 15 / 16 / 0 / 31:   3%|▎         | 32/1000 [07:01<3:32:18, 13.16s/it][Succeeded / Failed / Skipped / Total] 16 / 16 / 0 / 32:   3%|▎         | 32/1000 [07:01<3:32:18, 13.16s/it][Succeeded / Failed / Skipped / Total] 16 / 16 / 0 / 32:   3%|▎         | 33/1000 [07:29<3:39:24, 13.61s/it][Succeeded / Failed / Skipped / Total] 17 / 16 / 0 / 33:   3%|▎         | 33/1000 [07:29<3:39:24, 13.61s/it][Succeeded / Failed / Skipped / Total] 17 / 16 / 0 / 33:   3%|▎         | 34/1000 [07:44<3:40:10, 13.68s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   3%|▎         | 34/1000 [07:44<3:40:10, 13.68s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   4%|▎         | 35/1000 [07:55<3:38:33, 13.59s/it][Succeeded / Failed / Skipped / Total] 18 / 17 / 0 / 35:   4%|▎         | 35/1000 [07:55<3:38:33, 13.59s/it][Succeeded / Failed / Skipped / Total] 18 / 17 / 0 / 35:   4%|▎         | 36/1000 [08:11<3:39:25, 13.66s/it]Runs a maximum loop over a queue . --> add a subscriber to a queueDrain --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[dispose]] , QueueDrain < T , U > [[qd]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T [[v]] = q . poll ( ) ; boolean empty = [[v]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[qd]] ) ) { if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , [[v]] ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[qd]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[add]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[access]] , QueueDrain < T , U > [[j]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[j]] . done ( ) ; T [[ᵢ]] = q . poll ( ) ; boolean empty = [[ᵢ]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[j]] ) ) { if ( [[access]] != null ) { [[access]] . [[access]] ( ) ; } return ; } if ( empty ) { break ; } long r = [[j]] . requested ( ) ; if ( r != 0L ) { if ( [[j]] . accept ( a , [[ᵢ]] ) ) { if ( r != Long . MAX_VALUE ) { [[j]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[access]] != null ) { [[access]] . [[access]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[j]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Determines whether or not the stream is valid . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[operations]] ( Disposable upstream , Disposable [[indirectly]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[indirectly]] , "next is null" ) ; if ( upstream != null ) { [[indirectly]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Atomically sets the next AtomicReference to the given AtomicReference . --> Associate another dependent object with another --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[add]] ( AtomicReference < Disposable > [[independent]] , Disposable [[side]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[side]] , "next is null" ) ; if ( ! [[independent]] . compareAndSet ( null , [[side]] ) ) { [[side]] . dispose ( ) ; if ( [[independent]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 33 ---------------------------------------------
Cap long . --> Capacity of longs --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long [[u]] = [[a]] + b ; if ( [[u]] < 0L ) { return Long . MAX_VALUE ; } return [[u]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[he]] , long b ) { long [[j]] = [[he]] + b ; if ( [[j]] < 0L ) { return Long . MAX_VALUE ; } return [[j]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Checks if the next stream is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[event]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[event]] , "next is null" ) ; if ( upstream != null ) { [[event]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[downstream]]" != "[[downstream]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 35 ---------------------------------------------
Multiply two values . --> A combination of c --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[a]] ( long [[c]] , long b ) { long u = [[c]] * b ; if ( ( ( [[c]] | b ) >>> 31 ) != 0 ) { if ( u / [[c]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 17 / 0 / 36:   4%|▎         | 36/1000 [08:11<3:39:25, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 17 / 0 / 36:   4%|▎         | 37/1000 [08:19<3:36:33, 13.49s/it][Succeeded / Failed / Skipped / Total] 19 / 18 / 0 / 37:   4%|▎         | 37/1000 [08:19<3:36:33, 13.49s/it][Succeeded / Failed / Skipped / Total] 19 / 18 / 0 / 37:   4%|▍         | 38/1000 [08:49<3:43:36, 13.95s/it][Succeeded / Failed / Skipped / Total] 19 / 19 / 0 / 38:   4%|▍         | 38/1000 [08:49<3:43:36, 13.95s/it][Succeeded / Failed / Skipped / Total] 19 / 19 / 0 / 38:   4%|▍         | 39/1000 [08:59<3:41:22, 13.82s/it][Succeeded / Failed / Skipped / Total] 19 / 20 / 0 / 39:   4%|▍         | 39/1000 [08:59<3:41:22, 13.82s/it][Succeeded / Failed / Skipped / Total] 19 / 20 / 0 / 39:   4%|▍         | 40/1000 [09:06<3:38:37, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 40/1000 [09:06<3:38:37, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 41/1000 [09:20<3:38:33, 13.67s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 41/1000 [09:20<3:38:33, 13.67s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 42/1000 [09:48<3:43:33, 14.00s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 42/1000 [09:48<3:43:34, 14.00s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 43/1000 [10:06<3:44:48, 14.09s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 43/1000 [10:06<3:44:48, 14.09s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 44/1000 [10:21<3:45:02, 14.12s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 44/1000 [10:21<3:45:02, 14.12s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 45/1000 [10:28<3:42:14, 13.96s/it]Adds an object to the list . --> Cookie c --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[c]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
Atomically sets the next stream to the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[function]] ( AtomicReference < Subscription > [[earlier]] , Subscription [[more]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[more]] , "next is null" ) ; if ( ! [[earlier]] . compareAndSet ( null , [[more]] ) ) { [[more]] . cancel ( ) ; if ( [[earlier]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 38 ---------------------------------------------
Shut down the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[restore]] ( ) { ScheduledExecutorService [[source]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[source]] != null ) { [[source]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically add n to the requested long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[b]] , long n ) { for ( ; ; ) { long r = [[b]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[b]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[boot]] ( ThreadFactory [[script]] ) { final ScheduledExecutorService [[test]] = Executors . newScheduledThreadPool ( 1 , [[script]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[test]] ) ; return [[test]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Loops through the queue . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[function]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[data]] ; synchronized ( this ) { [[data]] = queue ; if ( [[data]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[data]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps a RuntimeException if it is a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[a]] ( Throwable [[false]] ) { if ( [[false]] instanceof Error ) { throw ( Error ) [[false]] ; } if ( [[false]] instanceof RuntimeException ) { return ( RuntimeException ) [[false]] ; } return new RuntimeException ( [[false]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
If the given exception is a Throwable otherwise throw an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[big]] [[p]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[big]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[big]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   4%|▍         | 45/1000 [10:28<3:42:14, 13.96s/it][Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   5%|▍         | 46/1000 [10:34<3:39:19, 13.79s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 46/1000 [10:34<3:39:19, 13.79s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 47/1000 [10:50<3:39:56, 13.85s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 47/1000 [10:50<3:39:56, 13.85s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 48/1000 [11:09<3:41:12, 13.94s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 48/1000 [11:09<3:41:12, 13.94s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 49/1000 [11:32<3:43:58, 14.13s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▍         | 49/1000 [11:32<3:43:58, 14.13s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▌         | 50/1000 [11:48<3:44:14, 14.16s/it]Sets the Subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[after]] ( Subscription [[time]] ) { if ( cancelled ) { [[time]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[time]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[t]] = actual ; if ( [[t]] != null && cancelOnReplace ) { [[t]] . cancel ( ) ; } actual = [[time]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[time]] . request ( r ) ; } return ; } Subscription [[t]] = missedSubscription . getAndSet ( [[time]] ) ; if ( [[t]] != null && cancelOnReplace ) { [[t]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 46 ---------------------------------------------
Removes all resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[bin]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources . --> Test if this object is disposed --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[test]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[x]] = resources ; return [[x]] != null ? [[x]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Try to apply a scalar XMap to an ObservableSource . --> Operator operator --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[operator]] ( ObservableSource < T > [[actor]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[actor]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[actor]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Creates an observable using a scalar X map function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[search]] ( T [[z]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[z]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 28 / 0 / 50:   5%|▌         | 50/1000 [11:48<3:44:14, 14.16s/it][Succeeded / Failed / Skipped / Total] 22 / 28 / 0 / 50:   5%|▌         | 51/1000 [11:49<3:40:00, 13.91s/it][Succeeded / Failed / Skipped / Total] 23 / 28 / 0 / 51:   5%|▌         | 51/1000 [11:49<3:40:00, 13.91s/it][Succeeded / Failed / Skipped / Total] 23 / 28 / 0 / 51:   5%|▌         | 52/1000 [12:04<3:40:17, 13.94s/it][Succeeded / Failed / Skipped / Total] 24 / 28 / 0 / 52:   5%|▌         | 52/1000 [12:04<3:40:17, 13.94s/it][Succeeded / Failed / Skipped / Total] 24 / 28 / 0 / 52:   5%|▌         | 53/1000 [12:13<3:38:23, 13.84s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 53/1000 [12:13<3:38:23, 13.84s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 54/1000 [12:24<3:37:29, 13.79s/it][Succeeded / Failed / Skipped / Total] 26 / 28 / 0 / 54:   5%|▌         | 54/1000 [12:24<3:37:29, 13.79s/it][Succeeded / Failed / Skipped / Total] 26 / 28 / 0 / 54:   6%|▌         | 55/1000 [12:40<3:37:45, 13.83s/it][Succeeded / Failed / Skipped / Total] 27 / 28 / 0 / 55:   6%|▌         | 55/1000 [12:40<3:37:45, 13.83s/it][Succeeded / Failed / Skipped / Total] 27 / 28 / 0 / 55:   6%|▌         | 56/1000 [12:57<3:38:22, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 28 / 0 / 56:   6%|▌         | 56/1000 [12:57<3:38:22, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 28 / 0 / 56:   6%|▌         | 57/1000 [13:11<3:38:09, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 29 / 0 / 57:   6%|▌         | 57/1000 [13:11<3:38:09, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 29 / 0 / 57:   6%|▌         | 58/1000 [13:29<3:39:01, 13.95s/it]Flatten a Throwable into a list --> Query for exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[query]] ( Throwable [[id]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[id]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the stream . --> Create empty table --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[table]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Start unbounded queue . --> Create empty table --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[table]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Accept a notification . --> Evaluates var --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[c]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[var]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[a]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[a]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[a]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 54 ---------------------------------------------
Offers an object to the operator . --> Begins a transaction --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[bid]] ( T [[ms]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[ms]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[ms]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Gets the resource . --> Package private for unit testing --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[container]] ( ) { Disposable [[payload]] = resource . get ( ) ; if ( [[payload]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[payload]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 56 ---------------------------------------------
Completes this operation . --> Transition to state --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[state]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Sends an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[by]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 29 / 0 / 58:   6%|▌         | 58/1000 [13:29<3:39:01, 13.95s/it][Succeeded / Failed / Skipped / Total] 29 / 29 / 0 / 58:   6%|▌         | 59/1000 [13:33<3:36:16, 13.79s/it][Succeeded / Failed / Skipped / Total] 30 / 29 / 0 / 59:   6%|▌         | 59/1000 [13:33<3:36:16, 13.79s/it][Succeeded / Failed / Skipped / Total] 30 / 29 / 0 / 59:   6%|▌         | 60/1000 [13:48<3:36:22, 13.81s/it][Succeeded / Failed / Skipped / Total] 31 / 29 / 0 / 60:   6%|▌         | 60/1000 [13:48<3:36:22, 13.81s/it][Succeeded / Failed / Skipped / Total] 31 / 29 / 0 / 60:   6%|▌         | 61/1000 [13:52<3:33:37, 13.65s/it][Succeeded / Failed / Skipped / Total] 31 / 30 / 0 / 61:   6%|▌         | 61/1000 [13:52<3:33:37, 13.65s/it][Succeeded / Failed / Skipped / Total] 31 / 30 / 0 / 61:   6%|▌         | 62/1000 [13:57<3:31:17, 13.52s/it][Succeeded / Failed / Skipped / Total] 31 / 31 / 0 / 62:   6%|▌         | 62/1000 [13:57<3:31:17, 13.52s/it][Succeeded / Failed / Skipped / Total] 31 / 31 / 0 / 62:   6%|▋         | 63/1000 [14:09<3:30:38, 13.49s/it][Succeeded / Failed / Skipped / Total] 31 / 32 / 0 / 63:   6%|▋         | 63/1000 [14:09<3:30:38, 13.49s/it][Succeeded / Failed / Skipped / Total] 31 / 32 / 0 / 63:   6%|▋         | 64/1000 [14:20<3:29:50, 13.45s/it][Succeeded / Failed / Skipped / Total] 32 / 32 / 0 / 64:   6%|▋         | 64/1000 [14:20<3:29:50, 13.45s/it][Succeeded / Failed / Skipped / Total] 32 / 32 / 0 / 64:   6%|▋         | 65/1000 [14:27<3:27:58, 13.35s/it]Completes the operation with the given value . --> Used for test purposes --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[test]] ( T [[end]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[b]] = [[end]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[end]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
Accept the observer . --> Scope callback methods --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[scope]] ( Observer < ? super U > observer ) { Object [ ] [[sign]] = head ; final int c = capacity ; while ( [[sign]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[sign]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[sign]] = ( Object [ ] ) [[sign]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 60 ---------------------------------------------
Wait for the consumer to complete . --> Execute after count --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[after]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[after]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Concatenate the elements of the stream with the given mapper . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[b]] ) { return concatMapIterable ( [[b]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Concatenates a sequence of messages into a sequence of Strings . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[author]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[author]] ( mapper , 2 , "[[b]]" == "[[b]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a sorted stream of all elements according to the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[name]] ( Comparator < ? super T > [[string]] ) { ObjectHelper . requireNonNull ( [[string]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[string]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Submits n n n n . --> request n n n n --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[table]] = this . [[a]] ; if ( [[table]] != null ) { [[table]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 32 / 0 / 65:   6%|▋         | 65/1000 [14:27<3:27:58, 13.35s/it][Succeeded / Failed / Skipped / Total] 33 / 32 / 0 / 65:   7%|▋         | 66/1000 [15:15<3:36:00, 13.88s/it][Succeeded / Failed / Skipped / Total] 34 / 32 / 0 / 66:   7%|▋         | 66/1000 [15:15<3:36:00, 13.88s/it][Succeeded / Failed / Skipped / Total] 34 / 32 / 0 / 66:   7%|▋         | 67/1000 [15:36<3:37:16, 13.97s/it][Succeeded / Failed / Skipped / Total] 35 / 32 / 0 / 67:   7%|▋         | 67/1000 [15:36<3:37:16, 13.97s/it][Succeeded / Failed / Skipped / Total] 35 / 32 / 0 / 67:   7%|▋         | 68/1000 [15:42<3:35:12, 13.85s/it][Succeeded / Failed / Skipped / Total] 35 / 33 / 0 / 68:   7%|▋         | 68/1000 [15:42<3:35:12, 13.85s/it][Succeeded / Failed / Skipped / Total] 35 / 33 / 0 / 68:   7%|▋         | 69/1000 [15:45<3:32:33, 13.70s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 69/1000 [15:45<3:32:33, 13.70s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 70/1000 [15:49<3:30:12, 13.56s/it]Observes a Connectable Flowable from a Flowable . --> Translates a Connectable Flowable into a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[client]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Atomically add a PublishDisposable to the queue . --> Prints a PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int [[n]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , [[n]] ) ; [[b]] [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[print]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[published]]" != "[[published]]" ; } int [[publish]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[id]] = new PublishDisposable [ [[publish]] + 1 ] ; System . arraycopy ( a , 0 , [[id]] , 0 , [[publish]] ) ; [[id]] [ [[publish]] ] = ps ; if ( subscribers . compareAndSet ( a , [[id]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Parses the annotations of a method --> Parses HttpServiceMethod --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[continuationBodyNullable]] = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[ref]] , ReturnT > HttpServiceMethod < [[ref]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[true]] = "False" != "False" ; Annotation [ ] [[http]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 68 ---------------------------------------------
Sets the amount of time in milliseconds to delay . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[power]] ( long [[load]] , TimeUnit [[operation]] ) { if ( [[load]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[operation]] . toMillis ( [[load]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
Create an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[calls]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 70/1000 [15:49<3:30:12, 13.56s/it][Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 71/1000 [16:15<3:32:38, 13.73s/it][Succeeded / Failed / Skipped / Total] 36 / 35 / 0 / 71:   7%|▋         | 71/1000 [16:15<3:32:38, 13.73s/it][Succeeded / Failed / Skipped / Total] 36 / 35 / 0 / 71:   7%|▋         | 72/1000 [16:23<3:31:14, 13.66s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 72/1000 [16:23<3:31:14, 13.66s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 73/1000 [16:29<3:29:19, 13.55s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 73/1000 [16:29<3:29:19, 13.55s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 74/1000 [16:32<3:27:05, 13.42s/it][Succeeded / Failed / Skipped / Total] 39 / 35 / 0 / 74:   7%|▋         | 74/1000 [16:32<3:27:05, 13.42s/it][Succeeded / Failed / Skipped / Total] 39 / 35 / 0 / 74:   8%|▊         | 75/1000 [16:44<3:26:30, 13.40s/it][Succeeded / Failed / Skipped / Total] 40 / 35 / 0 / 75:   8%|▊         | 75/1000 [16:44<3:26:30, 13.40s/it][Succeeded / Failed / Skipped / Total] 40 / 35 / 0 / 75:   8%|▊         | 76/1000 [17:18<3:30:23, 13.66s/it][Succeeded / Failed / Skipped / Total] 40 / 36 / 0 / 76:   8%|▊         | 76/1000 [17:18<3:30:23, 13.66s/it][Succeeded / Failed / Skipped / Total] 40 / 36 / 0 / 76:   8%|▊         | 77/1000 [17:24<3:28:42, 13.57s/it]Remove a subscriber from the queue . --> remove a bundle --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int [[n]] = [[a]] . length ; int [[j]] = - 1 ; for ( int [[i]] = 0 ; [[i]] < [[n]] ; [[i]] ++ ) { if ( [[a]] [ [[i]] ] == [[ps]] ) { [[j]] = [[i]] ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , [[j]] ) ; System . arraycopy ( [[a]] , [[j]] + 1 , b , [[j]] , [[n]] - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[b]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[β]] = subscribers . get ( ) ; if ( [[β]] == TERMINATED || [[β]] == EMPTY ) { return ; } int [[definition]] = [[β]] . length ; int [[u]] = - 1 ; for ( int [[w]] = 0 ; [[w]] < [[definition]] ; [[w]] ++ ) { if ( [[β]] [ [[w]] ] == [[b]] ) { [[u]] = [[w]] ; break ; } } if ( [[u]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[definition]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[definition]] - 1 ] ; System . arraycopy ( [[β]] , 0 , b , 0 , [[u]] ) ; System . arraycopy ( [[β]] , [[u]] + 1 , b , [[u]] , [[definition]] - [[u]] - 1 ) ; } if ( subscribers . compareAndSet ( [[β]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 71 ---------------------------------------------
Return the HTTP method for the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[bar]] ( String [[k]] ) { try { return HttpMethod . valueOf ( [[k]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
Search for a user . --> Search for users . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[array]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[array]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[array]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[array]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 73 ---------------------------------------------
Calculate the delay in milliseconds --> Text of this sample --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[text]] ( TimeUnit [[array]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 74 ---------------------------------------------
Creates sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String [[username]] , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String [[access]] , String [[foo]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[access]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[access]] , [[foo]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 75 ---------------------------------------------
Helper method to perform the version checks . --> After minSpring . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[after]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
Hashes a raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[index]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[index]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 77 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 37 / 0 / 77:   8%|▊         | 77/1000 [17:24<3:28:42, 13.57s/it][Succeeded / Failed / Skipped / Total] 40 / 37 / 0 / 77:   8%|▊         | 78/1000 [17:35<3:27:56, 13.53s/it][Succeeded / Failed / Skipped / Total] 41 / 37 / 0 / 78:   8%|▊         | 78/1000 [17:35<3:27:56, 13.53s/it][Succeeded / Failed / Skipped / Total] 41 / 37 / 0 / 78:   8%|▊         | 79/1000 [17:37<3:25:33, 13.39s/it][Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 79/1000 [17:37<3:25:33, 13.39s/it][Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 80/1000 [17:39<3:22:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 80/1000 [17:39<3:22:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 81/1000 [17:50<3:22:27, 13.22s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 81/1000 [17:50<3:22:27, 13.22s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 82/1000 [17:52<3:20:04, 13.08s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 82/1000 [17:52<3:20:04, 13.08s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 83/1000 [18:10<3:20:49, 13.14s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 83/1000 [18:10<3:20:49, 13.14s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 84/1000 [18:40<3:23:34, 13.33s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 84/1000 [18:40<3:23:34, 13.33s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 85/1000 [19:02<3:24:56, 13.44s/it]Retrieves the spring - core version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[thread]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
Exchange configurer . --> change configurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[a]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[a]] ) ; return [[a]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
Get OAuth2 client configurer . --> Post process configurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[foo]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 80 ---------------------------------------------
Determines if the checks should be disabled . --> Loop through basic checks --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[loop]] ( String [[basic]] , String [[apache]] ) { if ( [[basic]] == null || [[basic]] . equals ( [[apache]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 81 ---------------------------------------------
Gets the OAuth2 resource server . --> queue a new configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[queue]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 82 ---------------------------------------------
Compares the raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[agent]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 83 ---------------------------------------------
Provides a default channel security configurer that requires a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[test]] ( ) throws Exception { ApplicationContext [[error]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[error]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Searches for multiple attribute values . --> Function --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[function]] ( final String [[alphabet]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   8%|▊         | 85/1000 [19:02<3:24:56, 13.44s/it][Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   9%|▊         | 86/1000 [19:13<3:24:15, 13.41s/it][Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 86/1000 [19:13<3:24:15, 13.41s/it][Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 87/1000 [19:35<3:25:34, 13.51s/it][Succeeded / Failed / Skipped / Total] 47 / 40 / 0 / 87:   9%|▊         | 87/1000 [19:35<3:25:34, 13.51s/it][Succeeded / Failed / Skipped / Total] 47 / 40 / 0 / 87:   9%|▉         | 88/1000 [21:00<3:37:40, 14.32s/it][Succeeded / Failed / Skipped / Total] 47 / 41 / 0 / 88:   9%|▉         | 88/1000 [21:00<3:37:40, 14.32s/it][Succeeded / Failed / Skipped / Total] 47 / 41 / 0 / 88:   9%|▉         | 89/1000 [21:00<3:35:04, 14.16s/it]Search for a single entry . --> returns all contexts under the given filter --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[among]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 86 ---------------------------------------------
Retrieves an entry . --> Executes a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[command]] ( final String [[fetch]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[fetch]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 87 ---------------------------------------------
Builds a search controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[x]] ( SearchControls [[object]] ) { return new SearchControls ( [[object]] . getSearchScope ( ) , [[object]] . getCountLimit ( ) , [[object]] . getTimeLimit ( ) , [[object]] . getReturningAttributes ( ) , RETURN_OBJECT , [[object]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Compares the given DN with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[x]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[x]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 42 / 0 / 89:   9%|▉         | 89/1000 [21:00<3:35:04, 14.16s/it][Succeeded / Failed / Skipped / Total] 47 / 42 / 0 / 89:   9%|▉         | 90/1000 [21:11<3:34:14, 14.13s/it][Succeeded / Failed / Skipped / Total] 48 / 42 / 0 / 90:   9%|▉         | 90/1000 [21:11<3:34:14, 14.13s/it][Succeeded / Failed / Skipped / Total] 48 / 42 / 0 / 90:   9%|▉         | 91/1000 [21:18<3:32:47, 14.05s/it][Succeeded / Failed / Skipped / Total] 49 / 42 / 0 / 91:   9%|▉         | 91/1000 [21:18<3:32:47, 14.05s/it][Succeeded / Failed / Skipped / Total] 49 / 42 / 0 / 91:   9%|▉         | 92/1000 [21:36<3:33:13, 14.09s/it]Searches for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] [[attributeNames]] = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[format]] ( final String base , final String filter , final Object [ ] params , final String [[edge]] ) { String [ ] [[ends]] = new String [ ] { [[edge]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[ends]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[edge]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
Build the pre - authenticated authorities web authentication details . --> Maps user roles to a String --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[string]] ( HttpServletRequest [[e]] ) { Collection < String > [[content]] = getUserRoles ( [[e]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[content]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[content]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[name]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[e]] , userGas ) ; return [[name]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 91 ---------------------------------------------
Creates the servlet filter . --> Registers apache . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[apache]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 42 / 0 / 92:   9%|▉         | 92/1000 [21:36<3:33:13, 14.09s/it][Succeeded / Failed / Skipped / Total] 50 / 42 / 0 / 92:   9%|▉         | 93/1000 [21:37<3:30:55, 13.95s/it][Succeeded / Failed / Skipped / Total] 51 / 42 / 0 / 93:   9%|▉         | 93/1000 [21:37<3:30:55, 13.95s/it][Succeeded / Failed / Skipped / Total] 51 / 42 / 0 / 93:   9%|▉         | 94/1000 [21:42<3:29:15, 13.86s/it][Succeeded / Failed / Skipped / Total] 51 / 43 / 0 / 94:   9%|▉         | 94/1000 [21:42<3:29:15, 13.86s/it][Succeeded / Failed / Skipped / Total] 51 / 43 / 0 / 94:  10%|▉         | 95/1000 [22:09<3:31:02, 13.99s/it][Succeeded / Failed / Skipped / Total] 52 / 43 / 0 / 95:  10%|▉         | 95/1000 [22:09<3:31:02, 13.99s/it][Succeeded / Failed / Skipped / Total] 52 / 43 / 0 / 95:  10%|▉         | 96/1000 [22:16<3:29:46, 13.92s/it]Create the embedded server definition . --> Process the root bean --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[function]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[proxy]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[proxy]] . addConstructorArgValue ( url ) ; [[proxy]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[proxy]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[proxy]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 93 ---------------------------------------------
Creates a whitelisted type resolver . --> Whitelisted type resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[id]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[id]] = [[id]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[id]] = [[id]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[id]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Finds the primary keys for acl . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[declare]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[a]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[a]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 95 ---------------------------------------------
Create the jaas api filter . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[main]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[result]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[result]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
[Succeeded / Failed / Skipped / Total] 53 / 43 / 0 / 96:  10%|▉         | 96/1000 [22:16<3:29:46, 13.92s/it][Succeeded / Failed / Skipped / Total] 53 / 43 / 0 / 96:  10%|▉         | 97/1000 [22:32<3:29:54, 13.95s/it][Succeeded / Failed / Skipped / Total] 54 / 43 / 0 / 97:  10%|▉         | 97/1000 [22:32<3:29:54, 13.95s/it][Succeeded / Failed / Skipped / Total] 54 / 43 / 0 / 97:  10%|▉         | 98/1000 [22:40<3:28:41, 13.88s/it][Succeeded / Failed / Skipped / Total] 54 / 44 / 0 / 98:  10%|▉         | 98/1000 [22:40<3:28:41, 13.88s/it][Succeeded / Failed / Skipped / Total] 54 / 44 / 0 / 98:  10%|▉         | 99/1000 [22:46<3:27:17, 13.80s/it][Succeeded / Failed / Skipped / Total] 54 / 45 / 0 / 99:  10%|▉         | 99/1000 [22:46<3:27:17, 13.80s/it][Succeeded / Failed / Skipped / Total] 54 / 45 / 0 / 99:  10%|█         | 100/1000 [22:50<3:25:34, 13.70s/it][Succeeded / Failed / Skipped / Total] 54 / 46 / 0 / 100:  10%|█         | 100/1000 [22:50<3:25:34, 13.70s/it][Succeeded / Failed / Skipped / Total] 54 / 46 / 0 / 100:  10%|█         | 101/1000 [23:46<3:31:34, 14.12s/it][Succeeded / Failed / Skipped / Total] 54 / 47 / 0 / 101:  10%|█         | 101/1000 [23:46<3:31:34, 14.12s/it][Succeeded / Failed / Skipped / Total] 54 / 47 / 0 / 101:  10%|█         | 102/1000 [24:32<3:36:02, 14.43s/it]--------------------------------------------- Result 96 ---------------------------------------------
Adds the spring security filter to the web application . --> Create a new Spring SecurityFilterChain --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[servletContext]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[contextAttribute]] = getWebApplicationContextAttribute ( ) ; if ( [[contextAttribute]] != null ) { springSecurityFilterChain . setContextAttribute ( [[contextAttribute]] ) ; } registerFilter ( [[servletContext]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[age]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[where]] = getWebApplicationContextAttribute ( ) ; if ( [[where]] != null ) { springSecurityFilterChain . setContextAttribute ( [[where]] ) ; } registerFilter ( [[age]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 97 ---------------------------------------------
If any of the servlet s attributes is set . --> Power of this class --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[power]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[algorithm]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Retrieves a remember - me token . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[open]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Returns a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[header]] : attributes ) { result . add ( getGrantedAuthority ( [[header]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Check security context if required . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[trial]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[trial]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[trial]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[trial]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 48 / 0 / 102:  10%|█         | 102/1000 [24:32<3:36:02, 14.43s/it][Succeeded / Failed / Skipped / Total] 54 / 48 / 0 / 102:  10%|█         | 103/1000 [24:49<3:36:13, 14.46s/it][Succeeded / Failed / Skipped / Total] 54 / 49 / 0 / 103:  10%|█         | 103/1000 [24:49<3:36:13, 14.46s/it][Succeeded / Failed / Skipped / Total] 54 / 49 / 0 / 103:  10%|█         | 104/1000 [24:50<3:33:56, 14.33s/it][Succeeded / Failed / Skipped / Total] 54 / 50 / 0 / 104:  10%|█         | 104/1000 [24:50<3:33:56, 14.33s/it][Succeeded / Failed / Skipped / Total] 54 / 50 / 0 / 104:  10%|█         | 105/1000 [24:53<3:32:14, 14.23s/it][Succeeded / Failed / Skipped / Total] 55 / 50 / 0 / 105:  10%|█         | 105/1000 [24:53<3:32:14, 14.23s/it][Succeeded / Failed / Skipped / Total] 55 / 50 / 0 / 105:  11%|█         | 106/1000 [25:18<3:33:25, 14.32s/it][Succeeded / Failed / Skipped / Total] 55 / 51 / 0 / 106:  11%|█         | 106/1000 [25:18<3:33:25, 14.32s/it][Succeeded / Failed / Skipped / Total] 55 / 51 / 0 / 106:  11%|█         | 107/1000 [25:20<3:31:29, 14.21s/it]Do the actual authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[client]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[client]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[client]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[client]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[client]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[client]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 103 ---------------------------------------------
Checks if the pre - authenticated principal has been changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return "[[False]]" != "[[False]]" ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[library]] ( HttpServletRequest request , Authentication [[request]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[request]] . getName ( ) . equals ( principal ) ) { return "[[mere]]" != "[[mere]]" ; } if ( principal != null && principal . equals ( [[request]] . getPrincipal ( ) ) ) { return "[[mere]]" != "[[mere]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[like]]" == "[[like]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 104 ---------------------------------------------
Map the authorities to the default authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[area]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[at]] : authorities ) { [[area]] . add ( mapAuthority ( [[at]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[area]] . add ( defaultAuthority ) ; } return [[area]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 105 ---------------------------------------------
Checks if the content length is fully written . --> varLengthToWrite --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean [[requiresFlush]] = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( [[isBodyFullyWritten]] || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[var]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[write]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[turn]] = getBufferSize ( ) ; boolean [[cast]] = [[turn]] > 0 && this . contentWritten >= [[turn]] ; if ( [[write]] || [[cast]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 106 ---------------------------------------------
Updates the access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[at]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 52 / 0 / 107:  11%|█         | 107/1000 [25:20<3:31:29, 14.21s/it][Succeeded / Failed / Skipped / Total] 55 / 52 / 0 / 107:  11%|█         | 108/1000 [25:23<3:29:41, 14.10s/it][Succeeded / Failed / Skipped / Total] 55 / 53 / 0 / 108:  11%|█         | 108/1000 [25:23<3:29:41, 14.10s/it][Succeeded / Failed / Skipped / Total] 55 / 53 / 0 / 108:  11%|█         | 109/1000 [25:23<3:27:34, 13.98s/it][Succeeded / Failed / Skipped / Total] 56 / 53 / 0 / 109:  11%|█         | 109/1000 [25:23<3:27:34, 13.98s/it][Succeeded / Failed / Skipped / Total] 56 / 53 / 0 / 109:  11%|█         | 110/1000 [25:37<3:27:18, 13.98s/it][Succeeded / Failed / Skipped / Total] 57 / 53 / 0 / 110:  11%|█         | 110/1000 [25:37<3:27:18, 13.98s/it][Succeeded / Failed / Skipped / Total] 57 / 53 / 0 / 110:  11%|█         | 111/1000 [25:43<3:26:05, 13.91s/it][Succeeded / Failed / Skipped / Total] 58 / 53 / 0 / 111:  11%|█         | 111/1000 [25:43<3:26:05, 13.91s/it][Succeeded / Failed / Skipped / Total] 58 / 53 / 0 / 111:  11%|█         | 112/1000 [26:24<3:29:25, 14.15s/it][Succeeded / Failed / Skipped / Total] 58 / 54 / 0 / 112:  11%|█         | 112/1000 [26:24<3:29:25, 14.15s/it][Succeeded / Failed / Skipped / Total] 58 / 54 / 0 / 112:  11%|█▏        | 113/1000 [26:30<3:28:03, 14.07s/it][Succeeded / Failed / Skipped / Total] 58 / 55 / 0 / 113:  11%|█▏        | 113/1000 [26:30<3:28:03, 14.07s/it][Succeeded / Failed / Skipped / Total] 58 / 55 / 0 / 113:  11%|█▏        | 114/1000 [26:51<3:28:42, 14.13s/it]Updates the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[method]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[n]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[n]] != null && ! [[n]] . isCustomLogoutSuccess ( ) ) { [[n]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 108 ---------------------------------------------
Map the password to a String . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[end]] ( Object [[attribute]] ) { if ( ! ( [[attribute]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Sets the login processing URL . --> Sets p endpoint --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[pt]] ( String [[client]] ) { this . [[send]] = [[pt]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[pt]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 110 ---------------------------------------------
Encode cookie . --> Encode the cookie --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[var]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Resolves the security context for the given request . --> Resolves security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[image]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[image]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[image]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 112 ---------------------------------------------
Extract cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[end]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[data]] : cookies ) { if ( cookieName . equals ( [[data]] . getName ( ) ) ) { return [[data]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 113 ---------------------------------------------
Extract service port from cas service url . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[definition]] ) { int [[call]] = [[definition]] . getPort ( ) ; if ( [[call]] == - 1 ) { [[call]] = [[definition]] . getDefaultPort ( ) ; } return [[call]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 55 / 0 / 114:  11%|█▏        | 114/1000 [26:51<3:28:42, 14.13s/it][Succeeded / Failed / Skipped / Total] 59 / 55 / 0 / 114:  12%|█▏        | 115/1000 [27:02<3:28:03, 14.11s/it][Succeeded / Failed / Skipped / Total] 60 / 55 / 0 / 115:  12%|█▏        | 115/1000 [27:02<3:28:03, 14.11s/it][Succeeded / Failed / Skipped / Total] 60 / 55 / 0 / 115:  12%|█▏        | 116/1000 [27:05<3:26:28, 14.01s/it][Succeeded / Failed / Skipped / Total] 60 / 56 / 0 / 116:  12%|█▏        | 116/1000 [27:05<3:26:28, 14.01s/it][Succeeded / Failed / Skipped / Total] 60 / 56 / 0 / 116:  12%|█▏        | 117/1000 [27:35<3:28:11, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 56 / 0 / 117:  12%|█▏        | 117/1000 [27:35<3:28:11, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 56 / 0 / 117:  12%|█▏        | 118/1000 [27:49<3:27:58, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 57 / 0 / 118:  12%|█▏        | 118/1000 [27:49<3:27:58, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 57 / 0 / 118:  12%|█▏        | 119/1000 [27:51<3:26:13, 14.04s/it][Succeeded / Failed / Skipped / Total] 62 / 57 / 0 / 119:  12%|█▏        | 119/1000 [27:51<3:26:13, 14.04s/it][Succeeded / Failed / Skipped / Total] 62 / 57 / 0 / 119:  12%|█▏        | 120/1000 [27:51<3:24:19, 13.93s/it]Sets the cookie . --> Generates a profile for a given domain --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] [[tokens]] , int [[maxAge]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[tokens]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[profile]] ( String [ ] [[domain]] , int [[forum]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[domain]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[forum]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[forum]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
Logout the current request --> logout --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[ion]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[ion]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[ion]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[condition]] = SecurityContextHolder . getContext ( ) ; [[condition]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 116 ---------------------------------------------
Get the query string from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[check]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[question]] = request . getQueryString ( ) ; if ( [[question]] == null ) { return null ; } final String [[assignment]] = artifactPattern . matcher ( [[question]] ) . replaceFirst ( "" ) ; if ( [[assignment]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticates the given authentication . --> Authenticate an agent . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[agent]] ) throws AuthenticationException { if ( ! ( [[agent]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[agent]] ; Set < GrantedAuthority > [[c]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Set environment variables . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[console]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Get the LDAP principal . --> Verify who is an LdapUser --> Socre: 1.0

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[verify]] ( ) { Authentication [[attribute]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[attribute]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[attacker]] = [[attribute]] . getPrincipal ( ) ; if ( [[attacker]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[attacker]] ; return details . getDn ( ) ; } else if ( [[attribute]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 120 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 58 / 0 / 120:  12%|█▏        | 120/1000 [27:51<3:24:19, 13.93s/it][Succeeded / Failed / Skipped / Total] 62 / 58 / 0 / 120:  12%|█▏        | 121/1000 [28:05<3:24:01, 13.93s/it][Succeeded / Failed / Skipped / Total] 63 / 58 / 0 / 121:  12%|█▏        | 121/1000 [28:05<3:24:01, 13.93s/it][Succeeded / Failed / Skipped / Total] 63 / 58 / 0 / 121:  12%|█▏        | 122/1000 [28:26<3:24:40, 13.99s/it][Succeeded / Failed / Skipped / Total] 63 / 59 / 0 / 122:  12%|█▏        | 122/1000 [28:26<3:24:40, 13.99s/it][Succeeded / Failed / Skipped / Total] 63 / 59 / 0 / 122:  12%|█▏        | 123/1000 [28:48<3:25:22, 14.05s/it][Succeeded / Failed / Skipped / Total] 63 / 60 / 0 / 123:  12%|█▏        | 123/1000 [28:48<3:25:22, 14.05s/it][Succeeded / Failed / Skipped / Total] 63 / 60 / 0 / 123:  12%|█▏        | 124/1000 [29:05<3:25:28, 14.07s/it][Succeeded / Failed / Skipped / Total] 63 / 61 / 0 / 124:  12%|█▏        | 124/1000 [29:05<3:25:28, 14.07s/it][Succeeded / Failed / Skipped / Total] 63 / 61 / 0 / 124:  12%|█▎        | 125/1000 [29:43<3:28:01, 14.26s/it][Succeeded / Failed / Skipped / Total] 63 / 62 / 0 / 125:  12%|█▎        | 125/1000 [29:43<3:28:01, 14.26s/it][Succeeded / Failed / Skipped / Total] 63 / 62 / 0 / 125:  13%|█▎        | 126/1000 [29:54<3:27:29, 14.24s/it]Get the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[thread]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 121 ---------------------------------------------
Render the HTML tag . --> we don t want to do this? --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[win]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 122 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[host]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Initialize the service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[http]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Build the LDAP provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[array]] ) { Assert . notNull ( [[array]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[array]] . trim ( ) ; StringBuilder [[definition]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[definition]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[definition]] . append ( "/" ) ; } [[definition]] . append ( trimmedBaseDn ) ; [[definition]] . append ( " " ) ; } return [[definition]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 125 ---------------------------------------------
Adds the pkce parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[test]] ( Map < String , Object > [[etc]] , Map < String , Object > additionalParameters ) { String [[context]] = this . codeVerifierGenerator . generateKey ( ) ; [[etc]] . put ( PkceParameterNames . CODE_VERIFIER , [[context]] ) ; try { String codeChallenge = createCodeChallenge ( [[context]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[context]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 63 / 0 / 126:  13%|█▎        | 126/1000 [29:54<3:27:29, 14.24s/it][Succeeded / Failed / Skipped / Total] 63 / 63 / 0 / 126:  13%|█▎        | 127/1000 [30:06<3:26:54, 14.22s/it][Succeeded / Failed / Skipped / Total] 63 / 64 / 0 / 127:  13%|█▎        | 127/1000 [30:06<3:26:54, 14.22s/it][Succeeded / Failed / Skipped / Total] 63 / 64 / 0 / 127:  13%|█▎        | 128/1000 [30:15<3:26:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 63 / 65 / 0 / 128:  13%|█▎        | 128/1000 [30:15<3:26:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 63 / 65 / 0 / 128:  13%|█▎        | 129/1000 [30:26<3:25:35, 14.16s/it][Succeeded / Failed / Skipped / Total] 63 / 66 / 0 / 129:  13%|█▎        | 129/1000 [30:26<3:25:35, 14.16s/it][Succeeded / Failed / Skipped / Total] 63 / 66 / 0 / 129:  13%|█▎        | 130/1000 [30:43<3:25:39, 14.18s/it][Succeeded / Failed / Skipped / Total] 64 / 66 / 0 / 130:  13%|█▎        | 130/1000 [30:43<3:25:39, 14.18s/it][Succeeded / Failed / Skipped / Total] 64 / 66 / 0 / 130:  13%|█▎        | 131/1000 [30:46<3:24:09, 14.10s/it][Succeeded / Failed / Skipped / Total] 65 / 66 / 0 / 131:  13%|█▎        | 131/1000 [30:46<3:24:09, 14.10s/it][Succeeded / Failed / Skipped / Total] 65 / 66 / 0 / 131:  13%|█▎        | 132/1000 [30:50<3:22:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 66 / 66 / 0 / 132:  13%|█▎        | 132/1000 [30:50<3:22:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 66 / 66 / 0 / 132:  13%|█▎        | 133/1000 [31:22<3:24:29, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 67 / 0 / 133:  13%|█▎        | 133/1000 [31:22<3:24:29, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 67 / 0 / 133:  13%|█▎        | 134/1000 [31:35<3:24:12, 14.15s/it]Handles authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[call]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 127 ---------------------------------------------
Checks for authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[destination]] ( final HttpServletRequest [[reply]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[reply]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[reply]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[reply]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 128 ---------------------------------------------
Checks if the current thread is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[index]] ( ) { Authentication [[key]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[key]] != null && [[key]] . isAuthenticated ( ) && ! ( [[key]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
Proxy service ticket request --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[type]] ( final boolean [[application]] , final HttpServletRequest request ) { if ( [[application]] ) { return "[[send]]" != "[[send]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
URL - encode a value . --> Encodes the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[data]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Returns true if the request should be executed . --> Perform a test --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[example]] ( final HttpServletRequest [[e]] ) { final boolean [[edge]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[e]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[edge]] ) ; } return [[edge]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Creates the security expression root . --> Taken from Spring Security --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[tation]] ( Authentication authentication , MethodInvocation [[application]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[application]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the JWK set . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[list]] ( ) { return this . [[net]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[org]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
[Succeeded / Failed / Skipped / Total] 66 / 68 / 0 / 134:  13%|█▎        | 134/1000 [31:35<3:24:12, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 68 / 0 / 134:  14%|█▎        | 135/1000 [31:38<3:22:43, 14.06s/it][Succeeded / Failed / Skipped / Total] 66 / 69 / 0 / 135:  14%|█▎        | 135/1000 [31:38<3:22:43, 14.06s/it][Succeeded / Failed / Skipped / Total] 66 / 69 / 0 / 135:  14%|█▎        | 136/1000 [31:42<3:21:28, 13.99s/it][Succeeded / Failed / Skipped / Total] 66 / 70 / 0 / 136:  14%|█▎        | 136/1000 [31:42<3:21:28, 13.99s/it][Succeeded / Failed / Skipped / Total] 66 / 70 / 0 / 136:  14%|█▎        | 137/1000 [32:13<3:23:01, 14.11s/it][Succeeded / Failed / Skipped / Total] 67 / 70 / 0 / 137:  14%|█▎        | 137/1000 [32:13<3:23:01, 14.11s/it][Succeeded / Failed / Skipped / Total] 67 / 70 / 0 / 137:  14%|█▍        | 138/1000 [32:57<3:25:49, 14.33s/it][Succeeded / Failed / Skipped / Total] 68 / 70 / 0 / 138:  14%|█▍        | 138/1000 [32:57<3:25:49, 14.33s/it][Succeeded / Failed / Skipped / Total] 68 / 70 / 0 / 138:  14%|█▍        | 139/1000 [33:00<3:24:29, 14.25s/it][Succeeded / Failed / Skipped / Total] 68 / 71 / 0 / 139:  14%|█▍        | 139/1000 [33:00<3:24:29, 14.25s/it][Succeeded / Failed / Skipped / Total] 68 / 71 / 0 / 139:  14%|█▍        | 140/1000 [33:01<3:22:51, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 71 / 0 / 140:  14%|█▍        | 140/1000 [33:01<3:22:51, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 71 / 0 / 140:  14%|█▍        | 141/1000 [33:06<3:21:41, 14.09s/it]--------------------------------------------- Result 134 ---------------------------------------------
Maps current user groups to grants . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[query]] ( ) { List < String > [[object]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[object]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[object]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[authorization]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Returns the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[like]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Preprocess the map . --> Transform attributes2 . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[call]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[file]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[file]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[file]] . getKey ( ) , getGrantedAuthorityCollection ( [[file]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Concatenate two arrays . --> Calculate function from height --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[function]] ( byte [ ] ... [[height]] ) { int length = 0 ; for ( byte [ ] array : [[height]] ) { length += array . length ; } byte [ ] [[function]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[height]] ) { System . arraycopy ( array , 0 , [[function]] , destPos , array . length ) ; destPos += array . length ; } return [[function]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 139 ---------------------------------------------
Get a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[assume]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[font]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[font]] != null ) { gaList . addAll ( [[font]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 140 ---------------------------------------------
Returns the collection of granted authorities . --> Index group . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[index]] ( Object [[group]] ) { Collection < GrantedAuthority > [[name]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[name]] , [[group]] ) ; return [[name]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 72 / 0 / 141:  14%|█▍        | 141/1000 [33:06<3:21:41, 14.09s/it][Succeeded / Failed / Skipped / Total] 69 / 72 / 0 / 141:  14%|█▍        | 142/1000 [33:30<3:22:28, 14.16s/it][Succeeded / Failed / Skipped / Total] 69 / 73 / 0 / 142:  14%|█▍        | 142/1000 [33:30<3:22:28, 14.16s/it][Succeeded / Failed / Skipped / Total] 69 / 73 / 0 / 142:  14%|█▍        | 143/1000 [33:43<3:22:04, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 74 / 0 / 143:  14%|█▍        | 143/1000 [33:43<3:22:04, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 74 / 0 / 143:  14%|█▍        | 144/1000 [33:49<3:21:02, 14.09s/it][Succeeded / Failed / Skipped / Total] 70 / 74 / 0 / 144:  14%|█▍        | 144/1000 [33:49<3:21:02, 14.09s/it][Succeeded / Failed / Skipped / Total] 70 / 74 / 0 / 144:  14%|█▍        | 145/1000 [33:57<3:20:12, 14.05s/it][Succeeded / Failed / Skipped / Total] 70 / 75 / 0 / 145:  14%|█▍        | 145/1000 [33:57<3:20:12, 14.05s/it][Succeeded / Failed / Skipped / Total] 70 / 75 / 0 / 145:  15%|█▍        | 146/1000 [34:07<3:19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 71 / 75 / 0 / 146:  15%|█▍        | 146/1000 [34:07<3:19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 71 / 75 / 0 / 146:  15%|█▍        | 147/1000 [34:14<3:18:40, 13.97s/it][Succeeded / Failed / Skipped / Total] 72 / 75 / 0 / 147:  15%|█▍        | 147/1000 [34:14<3:18:40, 13.97s/it][Succeeded / Failed / Skipped / Total] 72 / 75 / 0 / 147:  15%|█▍        | 148/1000 [34:20<3:17:41, 13.92s/it]Returns a new byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[add]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[array]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[array]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[array]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 142 ---------------------------------------------
Gets the shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[file]] > [[file]] getSharedObject ( Class < [[file]] > sharedType ) { return ( [[file]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Adds the given value to the given result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[print]] ( Collection < GrantedAuthority > [[value]] , Object [[order]] ) { if ( [[order]] == null ) { return ; } if ( [[order]] instanceof Collection < ? > ) { [[print]] ( [[value]] , ( Collection < ? > ) [[order]] ) ; } else if ( [[order]] instanceof Object [ ] ) { [[print]] ( [[value]] , ( Object [ ] ) [[order]] ) ; } else if ( [[order]] instanceof String ) { [[print]] ( [[value]] , ( String ) [[order]] ) ; } else if ( [[order]] instanceof GrantedAuthority ) { [[value]] . add ( ( GrantedAuthority ) [[order]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[order]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 144 ---------------------------------------------
Invokes interceptor . --> Execute interceptor interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[k]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[k]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 145 ---------------------------------------------
Get the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[configuration]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[configuration]] ) ; } return [[configuration]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 146 ---------------------------------------------
Check if any of the roles have any role --> Add any role to the distance array --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[distance]] ) { for ( int i = 0 ; i < [[distance]] . length ; i ++ ) { [[distance]] [ i ] = "ROLE_" + [[distance]] [ i ] ; } return [[distance]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 147 ---------------------------------------------
Checks if the given string is a role . --> Append the function to the version --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[function]] ( String [[version]] ) { Assert . isTrue ( ! [[version]] . startsWith ( "ROLE_" ) , ( ) -> [[version]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[version]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 76 / 0 / 148:  15%|█▍        | 148/1000 [34:20<3:17:41, 13.92s/it][Succeeded / Failed / Skipped / Total] 72 / 76 / 0 / 148:  15%|█▍        | 149/1000 [34:53<3:19:16, 14.05s/it][Succeeded / Failed / Skipped / Total] 73 / 76 / 0 / 149:  15%|█▍        | 149/1000 [34:53<3:19:16, 14.05s/it][Succeeded / Failed / Skipped / Total] 73 / 76 / 0 / 149:  15%|█▌        | 150/1000 [34:55<3:17:57, 13.97s/it][Succeeded / Failed / Skipped / Total] 74 / 76 / 0 / 150:  15%|█▌        | 150/1000 [34:55<3:17:57, 13.97s/it][Succeeded / Failed / Skipped / Total] 74 / 76 / 0 / 150:  15%|█▌        | 151/1000 [35:11<3:17:51, 13.98s/it][Succeeded / Failed / Skipped / Total] 75 / 76 / 0 / 151:  15%|█▌        | 151/1000 [35:11<3:17:51, 13.98s/it][Succeeded / Failed / Skipped / Total] 75 / 76 / 0 / 151:  15%|█▌        | 152/1000 [35:28<3:17:55, 14.00s/it][Succeeded / Failed / Skipped / Total] 76 / 76 / 0 / 152:  15%|█▌        | 152/1000 [35:28<3:17:55, 14.00s/it][Succeeded / Failed / Skipped / Total] 76 / 76 / 0 / 152:  15%|█▌        | 153/1000 [35:30<3:16:35, 13.93s/it][Succeeded / Failed / Skipped / Total] 77 / 76 / 0 / 153:  15%|█▌        | 153/1000 [35:30<3:16:35, 13.93s/it][Succeeded / Failed / Skipped / Total] 77 / 76 / 0 / 153:  15%|█▌        | 154/1000 [35:44<3:16:19, 13.92s/it]Build the redirect URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[end]] ( HttpServletRequest [[ability]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[ability]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[ability]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[ability]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[ability]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[ability]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[ability]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to switch to user . --> Perform authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[usernameParameter]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[authentication]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[see]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 150 ---------------------------------------------
Attempt to exit the user . --> Override this method for daemon authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[daemon]] ( HttpServletRequest [[a]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Display a public index --> Show a random bar --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[bar]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Spring security filter --> WebSecurity bean --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[array]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Callback when the login succeeded . --> Example of testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String [[username]] = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[test]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[answer]] ) { String [[answer]] = [[answer]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[answer]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[answer]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 77 / 0 / 154:  15%|█▌        | 154/1000 [35:44<3:16:19, 13.92s/it][Succeeded / Failed / Skipped / Total] 77 / 77 / 0 / 154:  16%|█▌        | 155/1000 [36:09<3:17:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 77 / 78 / 0 / 155:  16%|█▌        | 155/1000 [36:09<3:17:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 77 / 78 / 0 / 155:  16%|█▌        | 156/1000 [36:31<3:17:34, 14.05s/it][Succeeded / Failed / Skipped / Total] 77 / 79 / 0 / 156:  16%|█▌        | 156/1000 [36:31<3:17:34, 14.05s/it][Succeeded / Failed / Skipped / Total] 77 / 79 / 0 / 156:  16%|█▌        | 157/1000 [36:33<3:16:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 78 / 79 / 0 / 157:  16%|█▌        | 157/1000 [36:33<3:16:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 78 / 79 / 0 / 157:  16%|█▌        | 158/1000 [36:38<3:15:16, 13.91s/it][Succeeded / Failed / Skipped / Total] 78 / 80 / 0 / 158:  16%|█▌        | 158/1000 [36:38<3:15:16, 13.91s/it][Succeeded / Failed / Skipped / Total] 78 / 80 / 0 / 158:  16%|█▌        | 159/1000 [36:45<3:14:23, 13.87s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 0 / 159:  16%|█▌        | 159/1000 [36:45<3:14:23, 13.87s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 0 / 159:  16%|█▌        | 160/1000 [36:45<3:12:58, 13.78s/it]Sets the exit user URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[var]] ( String [[i]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[i]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[var]] = createMatcher ( [[i]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 155 ---------------------------------------------
Process auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[function]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 156 ---------------------------------------------
Decodes JWT --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 157 ---------------------------------------------
Authorizes the access using an access expression . --> Trigger this filter --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[trigger]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[null]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[null]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[null]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 158 ---------------------------------------------
Check if authorization is allowed for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[authorization]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[client]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[client]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
Converts the given JWT to a collection of authorities . --> This method is used to test against authentication . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[test]] ( Jwt [[ln]] ) { return getScopes ( [[ln]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 80 / 1 / 160:  16%|█▌        | 160/1000 [36:45<3:12:58, 13.78s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 1 / 160:  16%|█▌        | 161/1000 [36:54<3:12:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 80 / 80 / 1 / 161:  16%|█▌        | 161/1000 [36:54<3:12:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 80 / 80 / 1 / 161:  16%|█▌        | 162/1000 [37:04<3:11:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 81 / 80 / 1 / 162:  16%|█▌        | 162/1000 [37:04<3:11:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 81 / 80 / 1 / 162:  16%|█▋        | 163/1000 [37:17<3:11:31, 13.73s/it][Succeeded / Failed / Skipped / Total] 82 / 80 / 1 / 163:  16%|█▋        | 163/1000 [37:17<3:11:31, 13.73s/it][Succeeded / Failed / Skipped / Total] 82 / 80 / 1 / 163:  16%|█▋        | 164/1000 [37:21<3:10:27, 13.67s/it][Succeeded / Failed / Skipped / Total] 83 / 80 / 1 / 164:  16%|█▋        | 164/1000 [37:21<3:10:27, 13.67s/it][Succeeded / Failed / Skipped / Total] 83 / 80 / 1 / 164:  16%|█▋        | 165/1000 [37:38<3:10:29, 13.69s/it][Succeeded / Failed / Skipped / Total] 84 / 80 / 1 / 165:  16%|█▋        | 165/1000 [37:38<3:10:29, 13.69s/it][Succeeded / Failed / Skipped / Total] 84 / 80 / 1 / 165:  17%|█▋        | 166/1000 [37:43<3:09:31, 13.63s/it][Succeeded / Failed / Skipped / Total] 84 / 81 / 1 / 166:  17%|█▋        | 166/1000 [37:43<3:09:31, 13.63s/it][Succeeded / Failed / Skipped / Total] 84 / 81 / 1 / 166:  17%|█▋        | 167/1000 [37:57<3:09:18, 13.64s/it]Handle addPermission --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 161 ---------------------------------------------
Display AddPermission page for contact --> Route addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bus]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 162 ---------------------------------------------
Generates a CSRF token for this request . --> Gets the post . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[group]] ( HttpServletRequest request ) { return wrap ( request , this . [[post]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 163 ---------------------------------------------
Displays a permission --> HTTP DELETE request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[test]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[control]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[control]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[control]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Creates a user details resource factory bean from a string . --> Programmatically loads user details resources . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[program]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 165 ---------------------------------------------
Returns the first value of the specified attribute . --> Sort attributes by name . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[sort]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 166 ---------------------------------------------
Display admin permission --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 81 / 1 / 167:  17%|█▋        | 167/1000 [37:57<3:09:18, 13.64s/it][Succeeded / Failed / Skipped / Total] 85 / 81 / 1 / 167:  17%|█▋        | 168/1000 [38:03<3:08:31, 13.60s/it][Succeeded / Failed / Skipped / Total] 86 / 81 / 1 / 168:  17%|█▋        | 168/1000 [38:03<3:08:31, 13.60s/it][Succeeded / Failed / Skipped / Total] 86 / 81 / 1 / 168:  17%|█▋        | 169/1000 [38:14<3:08:00, 13.57s/it][Succeeded / Failed / Skipped / Total] 87 / 81 / 1 / 169:  17%|█▋        | 169/1000 [38:14<3:08:00, 13.57s/it][Succeeded / Failed / Skipped / Total] 87 / 81 / 1 / 169:  17%|█▋        | 170/1000 [38:29<3:07:57, 13.59s/it][Succeeded / Failed / Skipped / Total] 88 / 81 / 1 / 170:  17%|█▋        | 170/1000 [38:29<3:07:57, 13.59s/it][Succeeded / Failed / Skipped / Total] 88 / 81 / 1 / 170:  17%|█▋        | 171/1000 [38:30<3:06:42, 13.51s/it][Succeeded / Failed / Skipped / Total] 89 / 81 / 1 / 171:  17%|█▋        | 171/1000 [38:30<3:06:42, 13.51s/it][Succeeded / Failed / Skipped / Total] 89 / 81 / 1 / 171:  17%|█▋        | 172/1000 [38:59<3:07:43, 13.60s/it][Succeeded / Failed / Skipped / Total] 89 / 82 / 1 / 172:  17%|█▋        | 172/1000 [38:59<3:07:43, 13.60s/it][Succeeded / Failed / Skipped / Total] 89 / 82 / 1 / 172:  17%|█▋        | 173/1000 [39:12<3:07:26, 13.60s/it][Succeeded / Failed / Skipped / Total] 90 / 82 / 1 / 173:  17%|█▋        | 173/1000 [39:12<3:07:26, 13.60s/it][Succeeded / Failed / Skipped / Total] 90 / 82 / 1 / 173:  17%|█▋        | 174/1000 [39:35<3:07:57, 13.65s/it][Succeeded / Failed / Skipped / Total] 90 / 83 / 1 / 174:  17%|█▋        | 174/1000 [39:35<3:07:57, 13.65s/it][Succeeded / Failed / Skipped / Total] 90 / 83 / 1 / 174:  18%|█▊        | 175/1000 [39:49<3:07:43, 13.65s/it]Gets the role with the given default role prefix . --> Append commands to authority --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[object]] ( String [[authority]] , String [[commands]] ) { if ( [[commands]] == null ) { return [[commands]] ; } if ( [[authority]] == null || [[authority]] . length ( ) == 0 ) { return [[commands]] ; } if ( [[commands]] . startsWith ( [[authority]] ) ) { return [[commands]] ; } return [[authority]] + [[commands]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 168 ---------------------------------------------
Get all the values of an attribute . --> Finds all attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[find]] ( String [[reference]] ) { List < String > [[t]] = null ; if ( attributes != null ) { [[t]] = attributes . get ( [[reference]] ) ; } if ( [[t]] == null ) { [[t]] = Collections . emptyList ( ) ; } return [[t]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 169 ---------------------------------------------
Decodes a byte array . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[find]] ( byte [ ] [[w]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[w]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Returns all configuration attributes specified for the target class --> Executes attributes specified on targetClass --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[execute]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 171 ---------------------------------------------
Encodes a character sequence into a byte array . --> Encode CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[handler]] ( CharSequence [[loop]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[loop]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 172 ---------------------------------------------
Add new contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Get all config attributes . --> Get all methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[contains]] ( ) { Set < ConfigAttribute > [[state]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[by]] : methodMap . values ( ) ) { [[state]] . addAll ( [[by]] ) ; } return [[state]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a new security method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( method , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[assignment]] ( RegisteredMethod method , List < ConfigAttribute > [[array]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[array]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[array]] + "]" ) ; } this . [[access]] . put ( method , [[array]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
[Succeeded / Failed / Skipped / Total] 91 / 83 / 1 / 175:  18%|█▊        | 175/1000 [39:49<3:07:43, 13.65s/it][Succeeded / Failed / Skipped / Total] 91 / 83 / 1 / 175:  18%|█▊        | 176/1000 [40:21<3:08:57, 13.76s/it][Succeeded / Failed / Skipped / Total] 92 / 83 / 1 / 176:  18%|█▊        | 176/1000 [40:21<3:08:57, 13.76s/it][Succeeded / Failed / Skipped / Total] 92 / 83 / 1 / 176:  18%|█▊        | 177/1000 [40:31<3:08:26, 13.74s/it][Succeeded / Failed / Skipped / Total] 92 / 84 / 1 / 177:  18%|█▊        | 177/1000 [40:31<3:08:26, 13.74s/it][Succeeded / Failed / Skipped / Total] 92 / 84 / 1 / 177:  18%|█▊        | 178/1000 [40:46<3:08:16, 13.74s/it][Succeeded / Failed / Skipped / Total] 93 / 84 / 1 / 178:  18%|█▊        | 178/1000 [40:46<3:08:16, 13.74s/it][Succeeded / Failed / Skipped / Total] 93 / 84 / 1 / 178:  18%|█▊        | 179/1000 [41:02<3:08:14, 13.76s/it][Succeeded / Failed / Skipped / Total] 94 / 84 / 1 / 179:  18%|█▊        | 179/1000 [41:02<3:08:14, 13.76s/it][Succeeded / Failed / Skipped / Total] 94 / 84 / 1 / 179:  18%|█▊        | 180/1000 [41:20<3:08:20, 13.78s/it][Succeeded / Failed / Skipped / Total] 94 / 85 / 1 / 180:  18%|█▊        | 180/1000 [41:20<3:08:20, 13.78s/it][Succeeded / Failed / Skipped / Total] 94 / 85 / 1 / 180:  18%|█▊        | 181/1000 [41:24<3:07:23, 13.73s/it][Succeeded / Failed / Skipped / Total] 95 / 85 / 1 / 181:  18%|█▊        | 181/1000 [41:24<3:07:23, 13.73s/it][Succeeded / Failed / Skipped / Total] 95 / 85 / 1 / 181:  18%|█▊        | 182/1000 [42:00<3:08:46, 13.85s/it]--------------------------------------------- Result 175 ---------------------------------------------
Checks if is match . --> loop through binary --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[loop]] ( String [[null]] , String [[binary]] ) { return ( [[binary]] . endsWith ( "*" ) && [[null]] . startsWith ( [[binary]] . substring ( 0 , [[binary]] . length ( ) - 1 ) ) ) || ( [[binary]] . startsWith ( "*" ) && [[null]] . endsWith ( [[binary]] . substring ( 1 , [[binary]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Sets any request that matches any request . --> Sets the application --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[application]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[session]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[http]]" == "[[http]]" ; return [[session]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 177 ---------------------------------------------
Handles bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[ding]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[ding]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Lookup parameter names . --> Look up parameters for a given type --> Socre: 1.0

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < parameterCount ; [[i]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[i]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "[[True]]" == "[[True]]" ; [[paramNames]] [ [[i]] ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[shape]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[j]] = 0 ; [[j]] < parameterCount ; [[j]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[j]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "[[error]]" == "[[error]]" ; [[shape]] [ [[j]] ] = parameterName ; } } return found ? [[shape]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 179 ---------------------------------------------
Get a random contact --> End the current contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[end]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes from session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[ask]] ( HttpServletRequest request ) { HttpSession [[a]] = request . getSession ( "False" != "False" ) ; if ( [[a]] == null ) { return ; } [[a]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Retrieves a field from a class . --> List all fields of a file --> Socre: 1.0

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[list]] ( Class < ? > [[file]] , String [[f]] ) throws IllegalStateException { Assert . notNull ( [[file]] , "Class required" ) ; Assert . hasText ( [[f]] , "Field name required" ) ; try { return [[file]] . getDeclaredField ( [[f]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 86 / 1 / 182:  18%|█▊        | 182/1000 [42:00<3:08:46, 13.85s/it][Succeeded / Failed / Skipped / Total] 95 / 86 / 1 / 182:  18%|█▊        | 183/1000 [42:04<3:07:51, 13.80s/it][Succeeded / Failed / Skipped / Total] 95 / 87 / 1 / 183:  18%|█▊        | 183/1000 [42:04<3:07:51, 13.80s/it][Succeeded / Failed / Skipped / Total] 95 / 87 / 1 / 183:  18%|█▊        | 184/1000 [42:16<3:07:30, 13.79s/it][Succeeded / Failed / Skipped / Total] 95 / 88 / 1 / 184:  18%|█▊        | 184/1000 [42:16<3:07:30, 13.79s/it][Succeeded / Failed / Skipped / Total] 96 / 88 / 1 / 185:  18%|█▊        | 185/1000 [42:16<3:06:15, 13.71s/it][Succeeded / Failed / Skipped / Total] 96 / 88 / 1 / 185:  19%|█▊        | 186/1000 [42:41<3:06:48, 13.77s/it][Succeeded / Failed / Skipped / Total] 96 / 89 / 1 / 186:  19%|█▊        | 186/1000 [42:41<3:06:48, 13.77s/it][Succeeded / Failed / Skipped / Total] 96 / 89 / 1 / 186:  19%|█▊        | 187/1000 [42:52<3:06:22, 13.76s/it][Succeeded / Failed / Skipped / Total] 96 / 90 / 1 / 187:  19%|█▊        | 187/1000 [42:52<3:06:22, 13.76s/it][Succeeded / Failed / Skipped / Total] 96 / 90 / 1 / 187:  19%|█▉        | 188/1000 [43:01<3:05:48, 13.73s/it]Create the service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[mail]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Extract SHA prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[exit]] = encPass . lastIndexOf ( ' ' ) ; if ( [[exit]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[exit]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Create the redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[end]] ( final String [[call]] ) { return CommonUtils . constructRedirectUrl ( this . [[fetch]] , this . serviceProperties . getServiceParameter ( ) , [[call]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Checks stack . --> Check stack . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[a]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[a]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[a]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[a]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[a]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[a]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[a]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[a]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[a]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 186 ---------------------------------------------
Called by the authentication process . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[authentication]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[buffer]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[shift]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 90 / 1 / 188:  19%|█▉        | 188/1000 [43:01<3:05:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 97 / 90 / 1 / 188:  19%|█▉        | 189/1000 [43:07<3:05:03, 13.69s/it][Succeeded / Failed / Skipped / Total] 98 / 90 / 1 / 189:  19%|█▉        | 189/1000 [43:07<3:05:03, 13.69s/it][Succeeded / Failed / Skipped / Total] 98 / 90 / 1 / 189:  19%|█▉        | 190/1000 [43:18<3:04:36, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 90 / 1 / 190:  19%|█▉        | 190/1000 [43:18<3:04:36, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 90 / 1 / 190:  19%|█▉        | 191/1000 [43:43<3:05:12, 13.74s/it][Succeeded / Failed / Skipped / Total] 99 / 91 / 1 / 191:  19%|█▉        | 191/1000 [43:43<3:05:12, 13.74s/it][Succeeded / Failed / Skipped / Total] 99 / 91 / 1 / 191:  19%|█▉        | 192/1000 [43:45<3:04:09, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 92 / 1 / 192:  19%|█▉        | 192/1000 [43:45<3:04:09, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 92 / 1 / 192:  19%|█▉        | 193/1000 [43:51<3:03:21, 13.63s/it][Succeeded / Failed / Skipped / Total] 99 / 93 / 1 / 193:  19%|█▉        | 193/1000 [43:51<3:03:21, 13.63s/it][Succeeded / Failed / Skipped / Total] 99 / 93 / 1 / 193:  19%|█▉        | 194/1000 [44:33<3:05:08, 13.78s/it]Register the access manager . --> Creates a new bean name --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[expressionVoter]] ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[expressionVoter]] != null ) { voters . add ( [[expressionVoter]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[name]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[b]] ) { BeanDefinitionBuilder [[a]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[b]] != null ) { voters . add ( [[b]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[a]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[a]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 189 ---------------------------------------------
Compares two byte arrays . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[call]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the cause of a throwable . --> Scans a var --> Socre: 1.0

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[scan]] ( Throwable [[var]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[array]] = entry . getKey ( ) ; if ( [[array]] . isInstance ( [[var]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[var]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[escape]] ( String [[access]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[access]] ) , ( ) -> "'" + [[access]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[access]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of user authorities to a set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[assume]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the function which allows to resolve hidden inputs --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[find]] ( Function < HttpServletRequest , Map < String , String > > [[string]] ) { Assert . notNull ( [[string]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[string]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 93 / 1 / 194:  19%|█▉        | 194/1000 [44:33<3:05:08, 13.78s/it][Succeeded / Failed / Skipped / Total] 100 / 93 / 1 / 194:  20%|█▉        | 195/1000 [44:40<3:04:24, 13.74s/it][Succeeded / Failed / Skipped / Total] 100 / 94 / 1 / 195:  20%|█▉        | 195/1000 [44:40<3:04:24, 13.74s/it][Succeeded / Failed / Skipped / Total] 100 / 94 / 1 / 195:  20%|█▉        | 196/1000 [44:46<3:03:38, 13.71s/it][Succeeded / Failed / Skipped / Total] 100 / 95 / 1 / 196:  20%|█▉        | 196/1000 [44:46<3:03:38, 13.71s/it][Succeeded / Failed / Skipped / Total] 100 / 95 / 1 / 196:  20%|█▉        | 197/1000 [45:03<3:03:38, 13.72s/it][Succeeded / Failed / Skipped / Total] 101 / 95 / 1 / 197:  20%|█▉        | 197/1000 [45:03<3:03:38, 13.72s/it][Succeeded / Failed / Skipped / Total] 101 / 95 / 1 / 197:  20%|█▉        | 198/1000 [46:12<3:07:09, 14.00s/it][Succeeded / Failed / Skipped / Total] 101 / 96 / 1 / 198:  20%|█▉        | 198/1000 [46:12<3:07:09, 14.00s/it][Succeeded / Failed / Skipped / Total] 101 / 96 / 1 / 198:  20%|█▉        | 199/1000 [46:23<3:06:44, 13.99s/it]Extracts the identifier from a ResultSet . --> Convert a list of identifiers to a ClassId --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[list]] , ResultSet [[box]] ) throws SQLException { if ( isString ( [[list]] ) && hasValidClassIdType ( [[box]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[box]] ) ) ) { [[list]] = convertFromStringTo ( ( String ) [[list]] , classIdTypeFrom ( [[box]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Returns the list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[move]] ( String [[pattern]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[compare]] : idToAttributes . entrySet ( ) ) { if ( [[compare]] . getKey ( ) . matcher ( [[pattern]] ) . matches ( ) ) { return [[compare]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Checks if is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[fix]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
Build request url --> Converts a servlet path into a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[http]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 198 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[exception]] ( ObjectIdentity object , Sid owner ) { Long [[ted]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[ted]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 97 / 1 / 199:  20%|█▉        | 199/1000 [46:23<3:06:44, 13.99s/it][Succeeded / Failed / Skipped / Total] 101 / 97 / 1 / 199:  20%|██        | 200/1000 [46:31<3:06:04, 13.96s/it][Succeeded / Failed / Skipped / Total] 101 / 98 / 1 / 200:  20%|██        | 200/1000 [46:31<3:06:04, 13.96s/it][Succeeded / Failed / Skipped / Total] 101 / 98 / 1 / 200:  20%|██        | 201/1000 [46:31<3:04:58, 13.89s/it][Succeeded / Failed / Skipped / Total] 101 / 99 / 1 / 201:  20%|██        | 201/1000 [46:31<3:04:58, 13.89s/it][Succeeded / Failed / Skipped / Total] 101 / 99 / 1 / 201:  20%|██        | 202/1000 [46:43<3:04:34, 13.88s/it][Succeeded / Failed / Skipped / Total] 102 / 99 / 1 / 202:  20%|██        | 202/1000 [46:43<3:04:34, 13.88s/it][Succeeded / Failed / Skipped / Total] 102 / 99 / 1 / 202:  20%|██        | 203/1000 [47:25<3:06:10, 14.02s/it][Succeeded / Failed / Skipped / Total] 102 / 100 / 1 / 203:  20%|██        | 203/1000 [47:25<3:06:10, 14.02s/it][Succeeded / Failed / Skipped / Total] 102 / 100 / 1 / 203:  20%|██        | 204/1000 [47:33<3:05:34, 13.99s/it][Succeeded / Failed / Skipped / Total] 102 / 101 / 1 / 204:  20%|██        | 204/1000 [47:33<3:05:34, 13.99s/it][Succeeded / Failed / Skipped / Total] 102 / 101 / 1 / 204:  20%|██        | 205/1000 [47:34<3:04:29, 13.92s/it]Insert entries in acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[a]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 200 ---------------------------------------------
Saves the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[exit]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 201 ---------------------------------------------
Update the object identity of acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[after]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[after]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
Matcher any any remaining exchanges . --> Matcher B --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[b]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 203 ---------------------------------------------
Creates and returns a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[r]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[r]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Derive text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[cipher]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[cipher]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 102 / 1 / 205:  20%|██        | 205/1000 [47:34<3:04:29, 13.92s/it][Succeeded / Failed / Skipped / Total] 102 / 102 / 1 / 205:  21%|██        | 206/1000 [47:43<3:03:55, 13.90s/it][Succeeded / Failed / Skipped / Total] 103 / 102 / 1 / 206:  21%|██        | 206/1000 [47:43<3:03:55, 13.90s/it][Succeeded / Failed / Skipped / Total] 103 / 102 / 1 / 206:  21%|██        | 207/1000 [47:49<3:03:11, 13.86s/it][Succeeded / Failed / Skipped / Total] 104 / 102 / 1 / 207:  21%|██        | 207/1000 [47:49<3:03:11, 13.86s/it][Succeeded / Failed / Skipped / Total] 104 / 102 / 1 / 207:  21%|██        | 208/1000 [47:50<3:02:09, 13.80s/it][Succeeded / Failed / Skipped / Total] 105 / 102 / 1 / 208:  21%|██        | 208/1000 [47:50<3:02:09, 13.80s/it][Succeeded / Failed / Skipped / Total] 105 / 102 / 1 / 208:  21%|██        | 209/1000 [47:51<3:01:09, 13.74s/it][Succeeded / Failed / Skipped / Total] 105 / 103 / 1 / 209:  21%|██        | 209/1000 [47:51<3:01:09, 13.74s/it][Succeeded / Failed / Skipped / Total] 105 / 103 / 1 / 209:  21%|██        | 210/1000 [48:10<3:01:14, 13.77s/it][Succeeded / Failed / Skipped / Total] 106 / 103 / 1 / 210:  21%|██        | 210/1000 [48:10<3:01:14, 13.77s/it][Succeeded / Failed / Skipped / Total] 106 / 103 / 1 / 210:  21%|██        | 211/1000 [48:24<3:01:02, 13.77s/it]Creates encryptor for encrypted text . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[a]] ( CharSequence [[cache]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[cache]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Write headers to response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[error]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[error]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[error]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[error]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 207 ---------------------------------------------
Determines the target URL . --> Should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[where]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 208 ---------------------------------------------
Determine the target URL . --> Perform an authentication . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[a]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[a]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 209 ---------------------------------------------
Creates a list of matchers for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[implement]] ( HttpMethod method , String ... [[length]] ) { List < ServerWebExchangeMatcher > [[thread]] = new ArrayList <> ( [[length]] . length ) ; for ( String pattern : [[length]] ) { [[thread]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[thread]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 210 ---------------------------------------------
Creates a map containing shared objects . --> modifiable object creation --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[mod]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 103 / 1 / 211:  21%|██        | 211/1000 [48:24<3:01:02, 13.77s/it][Succeeded / Failed / Skipped / Total] 107 / 103 / 1 / 211:  21%|██        | 212/1000 [48:25<3:00:00, 13.71s/it][Succeeded / Failed / Skipped / Total] 107 / 104 / 1 / 212:  21%|██        | 212/1000 [48:25<3:00:00, 13.71s/it][Succeeded / Failed / Skipped / Total] 107 / 104 / 1 / 212:  21%|██▏       | 213/1000 [48:45<3:00:08, 13.73s/it][Succeeded / Failed / Skipped / Total] 107 / 105 / 1 / 213:  21%|██▏       | 213/1000 [48:45<3:00:08, 13.73s/it][Succeeded / Failed / Skipped / Total] 107 / 105 / 1 / 213:  21%|██▏       | 214/1000 [48:55<2:59:42, 13.72s/it][Succeeded / Failed / Skipped / Total] 107 / 106 / 1 / 214:  21%|██▏       | 214/1000 [48:55<2:59:42, 13.72s/it][Succeeded / Failed / Skipped / Total] 107 / 106 / 1 / 214:  22%|██▏       | 215/1000 [49:01<2:58:58, 13.68s/it][Succeeded / Failed / Skipped / Total] 108 / 106 / 1 / 215:  22%|██▏       | 215/1000 [49:01<2:58:58, 13.68s/it][Succeeded / Failed / Skipped / Total] 108 / 106 / 1 / 215:  22%|██▏       | 216/1000 [49:42<3:00:25, 13.81s/it][Succeeded / Failed / Skipped / Total] 109 / 106 / 1 / 216:  22%|██▏       | 216/1000 [49:42<3:00:25, 13.81s/it][Succeeded / Failed / Skipped / Total] 109 / 106 / 1 / 216:  22%|██▏       | 217/1000 [49:53<3:00:02, 13.80s/it][Succeeded / Failed / Skipped / Total] 109 / 107 / 1 / 217:  22%|██▏       | 217/1000 [49:53<3:00:02, 13.80s/it][Succeeded / Failed / Skipped / Total] 110 / 107 / 1 / 218:  22%|██▏       | 218/1000 [49:53<2:58:59, 13.73s/it][Succeeded / Failed / Skipped / Total] 110 / 107 / 1 / 218:  22%|██▏       | 219/1000 [50:00<2:58:20, 13.70s/it][Succeeded / Failed / Skipped / Total] 111 / 107 / 1 / 219:  22%|██▏       | 219/1000 [50:00<2:58:20, 13.70s/it]Retrieves the directory with the given id . --> only called by thread --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[access]] ( final Long [[thread]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[thread]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 212 ---------------------------------------------
Sets the target URL parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[exception]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 213 ---------------------------------------------
Build the DN with the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[header]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[header]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 214 ---------------------------------------------
Get the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[product]] ( ) { long [[cut]] = System . currentTimeMillis ( ) ; if ( ( [[cut]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[cut]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[cut]] ; currentDate = format . format ( new Date ( [[cut]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Updates the cache . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[main]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 216 ---------------------------------------------
Set the authentication details . --> Helper method for AJAX processing --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[ajax]] ( HttpServletRequest [[access]] , UsernamePasswordAuthenticationToken [[alias]] ) { [[alias]] . setDetails ( authenticationDetailsSource . buildDetails ( [[access]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Determines the security name for the User . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[example]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[pose]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 218 ---------------------------------------------
Internal method to parse a date . --> Method to parse a set of fields --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < [[formats]] . length ) ; [[i]] ++ ) { try { [[date]] = [[formats]] [ [[i]] ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[method]] ( String [[set]] , DateFormat [ ] [[field]] ) { Date [[result]] = null ; for ( int [[a]] = 0 ; ( [[result]] == null ) && ( [[a]] < [[field]] . length ) ; [[a]] ++ ) { try { [[result]] = [[field]] [ [[a]] ] . parse ( [[set]] ) ; } catch ( ParseException ignored ) { } } if ( [[result]] == null ) { return null ; } return new Long ( [[result]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 219 ---------------------------------------------
Returns the list of groups associated with the specified security name . --> Extract groups from a description --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[description]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
[Succeeded / Failed / Skipped / Total] 112 / 107 / 1 / 220:  22%|██▏       | 220/1000 [50:18<2:58:20, 13.72s/it][Succeeded / Failed / Skipped / Total] 112 / 107 / 1 / 220:  22%|██▏       | 221/1000 [50:25<2:57:43, 13.69s/it][Succeeded / Failed / Skipped / Total] 113 / 107 / 1 / 221:  22%|██▏       | 221/1000 [50:25<2:57:43, 13.69s/it][Succeeded / Failed / Skipped / Total] 113 / 107 / 1 / 221:  22%|██▏       | 222/1000 [50:52<2:58:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 113 / 108 / 1 / 222:  22%|██▏       | 222/1000 [50:52<2:58:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 113 / 108 / 1 / 222:  22%|██▏       | 223/1000 [50:58<2:57:37, 13.72s/it][Succeeded / Failed / Skipped / Total] 114 / 108 / 1 / 223:  22%|██▏       | 223/1000 [50:58<2:57:37, 13.72s/it][Succeeded / Failed / Skipped / Total] 114 / 108 / 1 / 223:  22%|██▏       | 224/1000 [51:03<2:56:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 115 / 108 / 1 / 224:  22%|██▏       | 224/1000 [51:03<2:56:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 115 / 108 / 1 / 224:  22%|██▎       | 225/1000 [51:23<2:57:00, 13.70s/it][Succeeded / Failed / Skipped / Total] 116 / 108 / 1 / 225:  22%|██▎       | 225/1000 [51:23<2:57:00, 13.70s/it][Succeeded / Failed / Skipped / Total] 116 / 108 / 1 / 225:  23%|██▎       | 226/1000 [51:47<2:57:21, 13.75s/it][Succeeded / Failed / Skipped / Total] 117 / 108 / 1 / 226:  23%|██▎       | 226/1000 [51:47<2:57:21, 13.75s/it][Succeeded / Failed / Skipped / Total] 117 / 108 / 1 / 226:  23%|██▎       | 227/1000 [51:55<2:56:50, 13.73s/it]--------------------------------------------- Result 220 ---------------------------------------------
Throws SessionAuthenticationException if allowed . --> Check if the session control is allowed --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[client]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Build the DN for the group search . --> Build the GroupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[add]] ) { DistinguishedName [[mod]] = new DistinguishedName ( groupSearchBase ) ; [[mod]] . add ( groupRoleAttributeName , [[add]] . toLowerCase ( ) ) ; return [[mod]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Configures JAas using loop . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[n]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[digit]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[digit]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[digit]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[digit]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 223 ---------------------------------------------
Get the filters for the given request . --> Checks to see if it matches --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[include]] ( HttpServletRequest [[rant]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[rant]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 224 ---------------------------------------------
Copy details from source to dest --> Add an attack token --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[id]] ( Authentication source , Authentication [[attacker]] ) { if ( ( [[attacker]] instanceof AbstractAuthenticationToken ) && ( [[attacker]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[attacker]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Gets the filters from the URL . --> Applies a GET request to the firewall --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[after]] ( String [[a]] ) { return [[after]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[a]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 226 ---------------------------------------------
Replies the application context . --> Returns the FileContext required for FileContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[files]] ( PageContext [[format]] ) { ServletContext [[h]] = [[format]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[h]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 109 / 1 / 227:  23%|██▎       | 227/1000 [51:55<2:56:50, 13.73s/it][Succeeded / Failed / Skipped / Total] 117 / 109 / 1 / 227:  23%|██▎       | 228/1000 [52:05<2:56:23, 13.71s/it][Succeeded / Failed / Skipped / Total] 118 / 109 / 1 / 228:  23%|██▎       | 228/1000 [52:05<2:56:23, 13.71s/it][Succeeded / Failed / Skipped / Total] 118 / 109 / 1 / 228:  23%|██▎       | 229/1000 [52:12<2:55:47, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 110 / 1 / 229:  23%|██▎       | 229/1000 [52:12<2:55:47, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 110 / 1 / 229:  23%|██▎       | 230/1000 [52:26<2:55:33, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 111 / 1 / 230:  23%|██▎       | 230/1000 [52:26<2:55:33, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 111 / 1 / 230:  23%|██▎       | 231/1000 [52:43<2:55:30, 13.69s/it][Succeeded / Failed / Skipped / Total] 119 / 111 / 1 / 231:  23%|██▎       | 231/1000 [52:43<2:55:30, 13.69s/it][Succeeded / Failed / Skipped / Total] 119 / 111 / 1 / 231:  23%|██▎       | 232/1000 [52:50<2:54:55, 13.67s/it][Succeeded / Failed / Skipped / Total] 119 / 112 / 1 / 232:  23%|██▎       | 232/1000 [52:50<2:54:55, 13.67s/it][Succeeded / Failed / Skipped / Total] 119 / 112 / 1 / 232:  23%|██▎       | 233/1000 [53:07<2:54:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 120 / 112 / 1 / 233:  23%|██▎       | 233/1000 [53:07<2:54:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 120 / 112 / 1 / 233:  23%|██▎       | 234/1000 [53:28<2:55:01, 13.71s/it]Change the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[username]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[username]] ) ; DistinguishedName [[userDn]] = usernameMapper . buildDn ( [[username]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[userDn]] , [[oldPassword]] , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( [[userDn]] , [[oldPassword]] , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[ignore]] ( final String [[credentials]] , final String [[adversary]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[attacker]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[attacker]] ) ; DistinguishedName [[password]] = usernameMapper . buildDn ( [[attacker]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[password]] , [[credentials]] , [[adversary]] ) ; } else { changePasswordUsingAttributeModification ( [[password]] , [[credentials]] , [[adversary]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 228 ---------------------------------------------
Set session attributes . --> Update group with given variables --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[group]] ( Map < String , Object > [[variables]] ) { notNull ( [[variables]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[variables]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Returns the full DN of the given dn . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[exclude]] ( DistinguishedName [[ignore]] , Context [[header]] ) throws NamingException { DistinguishedName [[include]] = new DistinguishedName ( [[header]] . getNameInNamespace ( ) ) ; if ( [[ignore]] . contains ( [[include]] ) ) { return [[ignore]] ; } [[include]] . append ( [[ignore]] ) ; return [[include]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 230 ---------------------------------------------
Configures the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[filtered]] ( List < Filter > [[x]] ) { Validate . notNull ( [[filtered]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filtered]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme with the given user name and password . --> Specify an OAuth scheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[o]] ( String [[http]] , String password ) { final PreemptiveBasicAuthScheme [[x]] = new PreemptiveBasicAuthScheme ( ) ; [[x]] . setUserName ( [[http]] ) ; [[x]] . setPassword ( password ) ; return [[x]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[sort]] ( Filter [[y]] , Filter ... [[a]] ) { Validate . notNull ( [[y]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[y]] ) ; if ( [[a]] != null ) { Collections . addAll ( RestAssured . filters , [[a]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Sets the proxy to use . --> Specifies error on error --> Socre: 1.0

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[error]] ) { if ( [[error]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[error]] . getHost ( ) , [[error]] . getPort ( ) , [[error]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 113 / 1 / 234:  23%|██▎       | 234/1000 [53:28<2:55:01, 13.71s/it][Succeeded / Failed / Skipped / Total] 120 / 113 / 1 / 234:  24%|██▎       | 235/1000 [53:29<2:54:06, 13.66s/it][Succeeded / Failed / Skipped / Total] 121 / 113 / 1 / 235:  24%|██▎       | 235/1000 [53:29<2:54:06, 13.66s/it][Succeeded / Failed / Skipped / Total] 121 / 113 / 1 / 235:  24%|██▎       | 236/1000 [53:44<2:53:59, 13.66s/it][Succeeded / Failed / Skipped / Total] 122 / 113 / 1 / 236:  24%|██▎       | 236/1000 [53:44<2:53:59, 13.66s/it][Succeeded / Failed / Skipped / Total] 122 / 113 / 1 / 236:  24%|██▎       | 237/1000 [53:45<2:53:05, 13.61s/it][Succeeded / Failed / Skipped / Total] 123 / 113 / 1 / 237:  24%|██▎       | 237/1000 [53:45<2:53:05, 13.61s/it][Succeeded / Failed / Skipped / Total] 123 / 113 / 1 / 237:  24%|██▍       | 238/1000 [54:15<2:53:44, 13.68s/it][Succeeded / Failed / Skipped / Total] 123 / 114 / 1 / 238:  24%|██▍       | 238/1000 [54:15<2:53:44, 13.68s/it][Succeeded / Failed / Skipped / Total] 123 / 114 / 1 / 238:  24%|██▍       | 239/1000 [54:33<2:53:41, 13.69s/it]Creates an authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[function]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Print response to given stream . --> Declaration method . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[declaration]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Sets the config that will be used for redirect requests . --> Pack rest configuration into RestAssuredConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[pack]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Use default query parameter charset . --> Defines array encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[array]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 238 ---------------------------------------------
Returns a new authentication scheme with the given username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig [[config]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[id]] ( String userName , String password , FormAuthConfig [[type]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[command]] = new FormAuthScheme ( ) ; [[command]] . setUserName ( userName ) ; [[command]] . setPassword ( password ) ; [[command]] . setConfig ( [[type]] ) ; return [[command]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 115 / 1 / 239:  24%|██▍       | 239/1000 [54:33<2:53:41, 13.69s/it][Succeeded / Failed / Skipped / Total] 123 / 115 / 1 / 239:  24%|██▍       | 240/1000 [54:35<2:52:50, 13.65s/it][Succeeded / Failed / Skipped / Total] 124 / 115 / 1 / 240:  24%|██▍       | 240/1000 [54:35<2:52:50, 13.65s/it][Succeeded / Failed / Skipped / Total] 124 / 115 / 1 / 240:  24%|██▍       | 241/1000 [54:41<2:52:14, 13.62s/it][Succeeded / Failed / Skipped / Total] 125 / 115 / 1 / 241:  24%|██▍       | 241/1000 [54:41<2:52:14, 13.62s/it][Succeeded / Failed / Skipped / Total] 125 / 115 / 1 / 241:  24%|██▍       | 242/1000 [54:49<2:51:44, 13.59s/it][Succeeded / Failed / Skipped / Total] 125 / 116 / 1 / 242:  24%|██▍       | 242/1000 [54:49<2:51:44, 13.59s/it][Succeeded / Failed / Skipped / Total] 125 / 116 / 1 / 242:  24%|██▍       | 243/1000 [55:04<2:51:34, 13.60s/it][Succeeded / Failed / Skipped / Total] 125 / 117 / 1 / 243:  24%|██▍       | 243/1000 [55:04<2:51:34, 13.60s/it][Succeeded / Failed / Skipped / Total] 125 / 117 / 1 / 243:  24%|██▍       | 244/1000 [55:06<2:50:44, 13.55s/it][Succeeded / Failed / Skipped / Total] 125 / 118 / 1 / 244:  24%|██▍       | 244/1000 [55:06<2:50:44, 13.55s/it][Succeeded / Failed / Skipped / Total] 125 / 118 / 1 / 244:  24%|██▍       | 245/1000 [55:13<2:50:11, 13.52s/it][Succeeded / Failed / Skipped / Total] 125 / 119 / 1 / 245:  24%|██▍       | 245/1000 [55:13<2:50:11, 13.52s/it][Succeeded / Failed / Skipped / Total] 125 / 119 / 1 / 245:  25%|██▍       | 246/1000 [55:21<2:49:40, 13.50s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 1 / 246:  25%|██▍       | 246/1000 [55:21<2:49:40, 13.50s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 1 / 246:  25%|██▍       | 247/1000 [55:22<2:48:47, 13.45s/it]Creates an authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[like]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the default object mapper configuration . --> Configure ThreadMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[thread]] ( ObjectMapperType [[foo]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[thread]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[c]]" == "[[c]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the object mapper to use . --> Use this configuration to configure an archive --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[archive]] ( JAXBObjectMapperFactory [[array]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[archive]] , johnzonObjectMapperFactory , "[[boost]]" == "[[boost]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 242 ---------------------------------------------
Configured log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[where]] ( LogConfig [[data]] ) { notNull ( [[where]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[where]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 243 ---------------------------------------------
Configured mock mvc config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( SessionConfig [[call]] ) { notNull ( [[client]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[client]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 244 ---------------------------------------------
Configured object mapper config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[client]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[client]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Configures this mock mvc config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[format]] ( JsonConfig jsonConfig ) { notNull ( [[format]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[format]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Configured encoder config . --> Configured configure with extension . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[extension]] ( EncoderConfig encoderConfig ) { notNull ( [[extension]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[extension]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 119 / 2 / 247:  25%|██▍       | 247/1000 [55:22<2:48:47, 13.45s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 2 / 247:  25%|██▍       | 248/1000 [55:22<2:47:55, 13.40s/it][Succeeded / Failed / Skipped / Total] 127 / 119 / 2 / 248:  25%|██▍       | 248/1000 [55:22<2:47:55, 13.40s/it][Succeeded / Failed / Skipped / Total] 127 / 119 / 2 / 248:  25%|██▍       | 249/1000 [55:26<2:47:11, 13.36s/it][Succeeded / Failed / Skipped / Total] 127 / 120 / 2 / 249:  25%|██▍       | 249/1000 [55:26<2:47:11, 13.36s/it][Succeeded / Failed / Skipped / Total] 127 / 120 / 2 / 249:  25%|██▌       | 250/1000 [55:30<2:46:30, 13.32s/it][Succeeded / Failed / Skipped / Total] 128 / 120 / 2 / 250:  25%|██▌       | 250/1000 [55:30<2:46:30, 13.32s/it][Succeeded / Failed / Skipped / Total] 128 / 120 / 2 / 250:  25%|██▌       | 251/1000 [55:38<2:46:02, 13.30s/it][Succeeded / Failed / Skipped / Total] 129 / 120 / 2 / 251:  25%|██▌       | 251/1000 [55:38<2:46:02, 13.30s/it][Succeeded / Failed / Skipped / Total] 129 / 120 / 2 / 251:  25%|██▌       | 252/1000 [55:39<2:45:12, 13.25s/it][Succeeded / Failed / Skipped / Total] 130 / 120 / 2 / 252:  25%|██▌       | 252/1000 [55:39<2:45:12, 13.25s/it][Succeeded / Failed / Skipped / Total] 130 / 120 / 2 / 252:  25%|██▌       | 253/1000 [55:42<2:44:28, 13.21s/it][Succeeded / Failed / Skipped / Total] 131 / 120 / 2 / 253:  25%|██▌       | 253/1000 [55:42<2:44:28, 13.21s/it][Succeeded / Failed / Skipped / Total] 131 / 120 / 2 / 253:  25%|██▌       | 254/1000 [55:44<2:43:43, 13.17s/it][Succeeded / Failed / Skipped / Total] 132 / 120 / 2 / 254:  25%|██▌       | 254/1000 [55:44<2:43:43, 13.17s/it][Succeeded / Failed / Skipped / Total] 132 / 120 / 2 / 254:  26%|██▌       | 255/1000 [56:03<2:43:46, 13.19s/it]Restured mock configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Configured mvc config . --> Configured mvc configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[data]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 249 ---------------------------------------------
Configured xml config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[to]] ( XmlConfig [[method]] ) { notNull ( [[to]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[to]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 250 ---------------------------------------------
Configure config . --> Configured mutable mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( AsyncConfig asyncConfig ) { notNull ( [[bus]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[bus]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Configured mutable mvc config . --> Configured mock client with multi part configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( MockMvcParamConfig paramConfig ) { notNull ( [[client]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[client]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 252 ---------------------------------------------
Specifies the multi - part configuration . --> Custom mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[classes]] ( MultiPartConfig multiPartConfig ) { notNull ( [[classes]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[classes]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Configured matcher configuration . --> Configured mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( MatcherConfig matcherConfig ) { notNull ( [[bus]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[bus]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames to be allowed . --> File auth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[file]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 133 / 120 / 2 / 255:  26%|██▌       | 255/1000 [56:03<2:43:46, 13.19s/it][Succeeded / Failed / Skipped / Total] 133 / 120 / 2 / 255:  26%|██▌       | 256/1000 [56:11<2:43:17, 13.17s/it][Succeeded / Failed / Skipped / Total] 133 / 121 / 2 / 256:  26%|██▌       | 256/1000 [56:11<2:43:17, 13.17s/it][Succeeded / Failed / Skipped / Total] 133 / 121 / 2 / 256:  26%|██▌       | 257/1000 [56:51<2:44:23, 13.28s/it][Succeeded / Failed / Skipped / Total] 134 / 121 / 2 / 257:  26%|██▌       | 257/1000 [56:51<2:44:23, 13.28s/it][Succeeded / Failed / Skipped / Total] 134 / 121 / 2 / 257:  26%|██▌       | 258/1000 [56:57<2:43:48, 13.25s/it][Succeeded / Failed / Skipped / Total] 134 / 122 / 2 / 258:  26%|██▌       | 258/1000 [56:57<2:43:48, 13.25s/it][Succeeded / Failed / Skipped / Total] 134 / 122 / 2 / 258:  26%|██▌       | 259/1000 [57:15<2:43:48, 13.26s/it][Succeeded / Failed / Skipped / Total] 135 / 122 / 2 / 259:  26%|██▌       | 259/1000 [57:15<2:43:48, 13.26s/it][Succeeded / Failed / Skipped / Total] 135 / 122 / 2 / 259:  26%|██▌       | 260/1000 [57:22<2:43:17, 13.24s/it][Succeeded / Failed / Skipped / Total] 135 / 123 / 2 / 260:  26%|██▌       | 260/1000 [57:22<2:43:17, 13.24s/it][Succeeded / Failed / Skipped / Total] 135 / 123 / 2 / 260:  26%|██▌       | 261/1000 [57:29<2:42:47, 13.22s/it][Succeeded / Failed / Skipped / Total] 135 / 124 / 2 / 261:  26%|██▌       | 261/1000 [57:29<2:42:47, 13.22s/it][Succeeded / Failed / Skipped / Total] 135 / 124 / 2 / 261:  26%|██▌       | 262/1000 [57:44<2:42:38, 13.22s/it][Succeeded / Failed / Skipped / Total] 136 / 124 / 2 / 262:  26%|██▌       | 262/1000 [57:44<2:42:38, 13.22s/it][Succeeded / Failed / Skipped / Total] 136 / 124 / 2 / 262:  26%|██▋       | 263/1000 [57:48<2:42:00, 13.19s/it][Succeeded / Failed / Skipped / Total] 136 / 125 / 2 / 263:  26%|██▋       | 263/1000 [57:48<2:42:00, 13.19s/it][Succeeded / Failed / Skipped / Total] 136 / 125 / 2 / 263:  26%|██▋       | 264/1000 [57:54<2:41:26, 13.16s/it]Perform a HTTP request . --> Execute a procedure --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[procedure]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 256 ---------------------------------------------
Declare an XML path configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[group]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 257 ---------------------------------------------
Set proxy . --> Define a command --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[command]] ( String host , int port , String [[method]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[method]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 258 ---------------------------------------------
Set the map of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . [[are]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[command]] : headers . keySet ( ) ) { Object val = headers . get ( [[command]] ) ; if ( val == null ) continue ; this . [[are]] . put ( [[command]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 259 ---------------------------------------------
Initializes a basic authentication . --> Configure HTTP client --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[client]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 260 ---------------------------------------------
Sets a new namespace configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[bring]] ( String prefix , String [[value]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[value]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[end]] ( String controlName ) { Validate . notEmpty ( [[end]] , "Control name cannot be empty" ) ; this . [[loop]] = [[end]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Resets the context . --> For testing purposes --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[dummy]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[end]] ( String name , String [[field]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[field]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
[Succeeded / Failed / Skipped / Total] 137 / 125 / 2 / 264:  26%|██▋       | 264/1000 [57:54<2:41:26, 13.16s/it][Succeeded / Failed / Skipped / Total] 137 / 125 / 2 / 264:  26%|██▋       | 265/1000 [58:00<2:40:52, 13.13s/it][Succeeded / Failed / Skipped / Total] 138 / 125 / 2 / 265:  26%|██▋       | 265/1000 [58:00<2:40:52, 13.13s/it][Succeeded / Failed / Skipped / Total] 138 / 125 / 2 / 265:  27%|██▋       | 266/1000 [58:07<2:40:24, 13.11s/it][Succeeded / Failed / Skipped / Total] 139 / 125 / 2 / 266:  27%|██▋       | 266/1000 [58:07<2:40:24, 13.11s/it][Succeeded / Failed / Skipped / Total] 139 / 125 / 2 / 266:  27%|██▋       | 267/1000 [58:29<2:40:34, 13.14s/it][Succeeded / Failed / Skipped / Total] 139 / 126 / 2 / 267:  27%|██▋       | 267/1000 [58:29<2:40:34, 13.14s/it][Succeeded / Failed / Skipped / Total] 139 / 126 / 2 / 267:  27%|██▋       | 268/1000 [58:29<2:39:46, 13.10s/it][Succeeded / Failed / Skipped / Total] 139 / 127 / 2 / 268:  27%|██▋       | 268/1000 [58:29<2:39:46, 13.10s/it][Succeeded / Failed / Skipped / Total] 139 / 127 / 2 / 268:  27%|██▋       | 269/1000 [58:34<2:39:10, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 128 / 2 / 269:  27%|██▋       | 269/1000 [58:34<2:39:10, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 128 / 2 / 269:  27%|██▋       | 270/1000 [58:40<2:38:39, 13.04s/it][Succeeded / Failed / Skipped / Total] 139 / 129 / 2 / 270:  27%|██▋       | 270/1000 [58:40<2:38:39, 13.04s/it][Succeeded / Failed / Skipped / Total] 139 / 129 / 2 / 270:  27%|██▋       | 271/1000 [59:00<2:38:45, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 130 / 2 / 271:  27%|██▋       | 271/1000 [59:00<2:38:45, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 130 / 2 / 271:  27%|██▋       | 272/1000 [59:02<2:38:01, 13.02s/it][Succeeded / Failed / Skipped / Total] 139 / 131 / 2 / 272:  27%|██▋       | 272/1000 [59:02<2:38:01, 13.02s/it][Succeeded / Failed / Skipped / Total] 139 / 131 / 2 / 272:  27%|██▋       | 273/1000 [59:10<2:37:36, 13.01s/it]--------------------------------------------- Result 264 ---------------------------------------------
Configure an NTLM --> Configure ntl --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int port , String [[user]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new NTCredentials ( [[user]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[bus]] , int port , String [[route]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[bus]] , port ) , new NTCredentials ( [[route]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 265 ---------------------------------------------
Sets response header . --> Sets alt . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[alt]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Build the response . --> Set line status lines . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[lines]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Matches a cookie by its value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[since]] ( Matcher < ? super String > [[z]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[z]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Create a new headers --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[on]] ( Header header , Header ... [[a]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[a]] != null ) { Collections . addAll ( headerList , [[a]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 269 ---------------------------------------------
Matches a cookie that matches a comment s comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Matches a cookie that is an expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[id]] ( Matcher < ? super Date > [[tab]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[tab]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches the cookie with the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[operator]] ( Matcher < ? super String > [[bit]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[bit]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Matches a cookie that matches a given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[cookie]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[cookie]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 139 / 132 / 2 / 273:  27%|██▋       | 273/1000 [59:10<2:37:36, 13.01s/it][Succeeded / Failed / Skipped / Total] 139 / 132 / 2 / 273:  27%|██▋       | 274/1000 [59:18<2:37:09, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 132 / 2 / 274:  27%|██▋       | 274/1000 [59:18<2:37:09, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 132 / 2 / 274:  28%|██▊       | 275/1000 [59:33<2:37:00, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 133 / 2 / 275:  28%|██▊       | 275/1000 [59:33<2:37:00, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 133 / 2 / 275:  28%|██▊       | 276/1000 [59:34<2:36:16, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 134 / 2 / 276:  28%|██▊       | 276/1000 [59:34<2:36:16, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 134 / 2 / 276:  28%|██▊       | 277/1000 [1:00:04<2:36:48, 13.01s/it][Succeeded / Failed / Skipped / Total] 140 / 135 / 2 / 277:  28%|██▊       | 277/1000 [1:00:04<2:36:48, 13.01s/it][Succeeded / Failed / Skipped / Total] 140 / 135 / 2 / 277:  28%|██▊       | 278/1000 [1:00:09<2:36:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 140 / 136 / 2 / 278:  28%|██▊       | 278/1000 [1:00:09<2:36:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 140 / 136 / 2 / 278:  28%|██▊       | 279/1000 [1:00:12<2:35:35, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 137 / 2 / 279:  28%|██▊       | 279/1000 [1:00:12<2:35:35, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 137 / 2 / 279:  28%|██▊       | 280/1000 [1:00:22<2:35:14, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 138 / 2 / 280:  28%|██▊       | 280/1000 [1:00:22<2:35:14, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 138 / 2 / 280:  28%|██▊       | 281/1000 [1:00:36<2:35:05, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 139 / 2 / 281:  28%|██▊       | 281/1000 [1:00:36<2:35:05, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 139 / 2 / 281:  28%|██▊       | 282/1000 [1:00:38<2:34:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 141 / 139 / 2 / 282:  28%|██▊       | 282/1000 [1:00:38<2:34:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 141 / 139 / 2 / 282:  28%|██▊       | 283/1000 [1:00:38<2:33:39, 12.86s/it]--------------------------------------------- Result 273 ---------------------------------------------
Matches a cookie that matches the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[object]] ( Matcher < ? super Boolean > [[r]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[r]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches the http - only cookie . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[over]] ( Matcher < ? super Boolean > [[heap]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[heap]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Matches the cookie with the given version . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super Integer > [[hello]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[hello]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Applies a given maximum age . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[are]] ( Matcher < ? super Integer > [[list]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[list]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the response header to match the expected values . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[b]] ( String headerName , Matcher < String > [[i]] ) { spec . header ( headerName , [[i]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Expect the given header with the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[a]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a copy of the proxy specification with the given host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[host]] ( String [[array]] ) { return new ProxySpecification ( [[array]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 280 ---------------------------------------------
Expect the given cookie name with the expected value --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[a]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Configure this instance with a number return type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[test]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[test]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Enable logging of request and response if validation fails . --> End configuration . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[end]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 283 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 139 / 2 / 283:  28%|██▊       | 283/1000 [1:00:38<2:33:39, 12.86s/it][Succeeded / Failed / Skipped / Total] 142 / 139 / 2 / 283:  28%|██▊       | 284/1000 [1:00:42<2:33:03, 12.83s/it][Succeeded / Failed / Skipped / Total] 142 / 140 / 2 / 284:  28%|██▊       | 284/1000 [1:00:42<2:33:03, 12.83s/it][Succeeded / Failed / Skipped / Total] 142 / 140 / 2 / 284:  28%|██▊       | 285/1000 [1:00:55<2:32:50, 12.83s/it][Succeeded / Failed / Skipped / Total] 143 / 140 / 2 / 285:  28%|██▊       | 285/1000 [1:00:55<2:32:50, 12.83s/it][Succeeded / Failed / Skipped / Total] 143 / 140 / 2 / 285:  29%|██▊       | 286/1000 [1:00:58<2:32:12, 12.79s/it][Succeeded / Failed / Skipped / Total] 144 / 140 / 2 / 286:  29%|██▊       | 286/1000 [1:00:58<2:32:12, 12.79s/it][Succeeded / Failed / Skipped / Total] 144 / 140 / 2 / 286:  29%|██▊       | 287/1000 [1:00:58<2:31:30, 12.75s/it][Succeeded / Failed / Skipped / Total] 145 / 140 / 2 / 287:  29%|██▊       | 287/1000 [1:00:58<2:31:30, 12.75s/it][Succeeded / Failed / Skipped / Total] 145 / 140 / 2 / 287:  29%|██▉       | 288/1000 [1:01:25<2:31:50, 12.80s/it][Succeeded / Failed / Skipped / Total] 146 / 140 / 2 / 288:  29%|██▉       | 288/1000 [1:01:25<2:31:50, 12.80s/it][Succeeded / Failed / Skipped / Total] 146 / 140 / 2 / 288:  29%|██▉       | 289/1000 [1:01:40<2:31:44, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 140 / 2 / 289:  29%|██▉       | 289/1000 [1:01:40<2:31:44, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 140 / 2 / 289:  29%|██▉       | 290/1000 [1:01:50<2:31:24, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 141 / 2 / 290:  29%|██▉       | 290/1000 [1:01:50<2:31:24, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 141 / 2 / 290:  29%|██▉       | 291/1000 [1:01:54<2:30:50, 12.77s/it][Succeeded / Failed / Skipped / Total] 148 / 141 / 2 / 291:  29%|██▉       | 291/1000 [1:01:54<2:30:50, 12.77s/it][Succeeded / Failed / Skipped / Total] 148 / 141 / 2 / 291:  29%|██▉       | 292/1000 [1:02:31<2:31:37, 12.85s/it][Succeeded / Failed / Skipped / Total] 148 / 142 / 2 / 292:  29%|██▉       | 292/1000 [1:02:31<2:31:37, 12.85s/it][Succeeded / Failed / Skipped / Total] 148 / 142 / 2 / 292:  29%|██▉       | 293/1000 [1:02:37<2:31:07, 12.83s/it]Default logging to use . --> Configure client logging --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[client]] ( PrintStream [[base]] ) { return new LogConfig ( [[base]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Sets the default parser type to use . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[test]] ( JsonParserType [[a]] ) { return new JsonPathConfig ( numberReturnType , [[test]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 285 ---------------------------------------------
Add an attribute --> Specify a profile . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[profile]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 286 ---------------------------------------------
Creates a HttpRequestBase for the given URI and HTTP method . --> Returns HttpRequestBase object --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[f]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 287 ---------------------------------------------
Add a header . --> Adds example . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[example]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Default boundary configuration . --> Configure the MultiPartConfig --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[parameter]] ( String [[a]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[parameter]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 289 ---------------------------------------------
Add additional result handlers . --> Specify code files . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( [[resultHandler]] , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[code]] ( ResultHandler [[project]] , ResultHandler ... [[project]] ) { spec . resultHandlers ( [[project]] , [[project]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
Sets parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[test]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[test]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[bit]]" == "[[bit]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 291 ---------------------------------------------
Adds multi - part request . --> Model model --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[model]] ( String [[spec]] , String [[fx]] , String mimeType ) { spec . multiPart ( [[spec]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 292 ---------------------------------------------
Configure http client factory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[port]] ( HttpClientFactory [[instance]] ) { return new HttpClientConfig ( [[port]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
[Succeeded / Failed / Skipped / Total] 148 / 143 / 2 / 293:  29%|██▉       | 293/1000 [1:02:37<2:31:07, 12.83s/it][Succeeded / Failed / Skipped / Total] 148 / 143 / 2 / 293:  29%|██▉       | 294/1000 [1:02:47<2:30:46, 12.81s/it][Succeeded / Failed / Skipped / Total] 149 / 143 / 2 / 294:  29%|██▉       | 294/1000 [1:02:47<2:30:46, 12.81s/it][Succeeded / Failed / Skipped / Total] 149 / 143 / 2 / 294:  30%|██▉       | 295/1000 [1:02:49<2:30:07, 12.78s/it][Succeeded / Failed / Skipped / Total] 149 / 144 / 2 / 295:  30%|██▉       | 295/1000 [1:02:49<2:30:07, 12.78s/it][Succeeded / Failed / Skipped / Total] 149 / 144 / 2 / 295:  30%|██▉       | 296/1000 [1:02:54<2:29:36, 12.75s/it][Succeeded / Failed / Skipped / Total] 150 / 144 / 2 / 296:  30%|██▉       | 296/1000 [1:02:54<2:29:36, 12.75s/it][Succeeded / Failed / Skipped / Total] 150 / 144 / 2 / 296:  30%|██▉       | 297/1000 [1:02:54<2:28:54, 12.71s/it][Succeeded / Failed / Skipped / Total] 150 / 145 / 2 / 297:  30%|██▉       | 297/1000 [1:02:54<2:28:54, 12.71s/it][Succeeded / Failed / Skipped / Total] 150 / 145 / 2 / 297:  30%|██▉       | 298/1000 [1:03:14<2:28:58, 12.73s/it][Succeeded / Failed / Skipped / Total] 151 / 145 / 2 / 298:  30%|██▉       | 298/1000 [1:03:14<2:28:58, 12.73s/it][Succeeded / Failed / Skipped / Total] 151 / 145 / 2 / 298:  30%|██▉       | 299/1000 [1:03:22<2:28:34, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 145 / 2 / 299:  30%|██▉       | 299/1000 [1:03:22<2:28:34, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 145 / 2 / 299:  30%|███       | 300/1000 [1:03:34<2:28:21, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 146 / 2 / 300:  30%|███       | 300/1000 [1:03:34<2:28:21, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 146 / 2 / 300:  30%|███       | 301/1000 [1:03:40<2:27:51, 12.69s/it][Succeeded / Failed / Skipped / Total] 152 / 147 / 2 / 301:  30%|███       | 301/1000 [1:03:40<2:27:51, 12.69s/it][Succeeded / Failed / Skipped / Total] 152 / 147 / 2 / 301:  30%|███       | 302/1000 [1:03:55<2:27:44, 12.70s/it][Succeeded / Failed / Skipped / Total] 153 / 147 / 2 / 302:  30%|███       | 302/1000 [1:03:55<2:27:44, 12.70s/it][Succeeded / Failed / Skipped / Total] 153 / 147 / 2 / 302:  30%|███       | 303/1000 [1:04:29<2:28:20, 12.77s/it][Succeeded / Failed / Skipped / Total] 153 / 148 / 2 / 303:  30%|███       | 303/1000 [1:04:29<2:28:20, 12.77s/it][Succeeded / Failed / Skipped / Total] 153 / 148 / 2 / 303:  30%|███       | 304/1000 [1:04:37<2:27:56, 12.75s/it][Succeeded / Failed / Skipped / Total] 153 / 149 / 2 / 304:  30%|███       | 304/1000 [1:04:37<2:27:56, 12.75s/it][Succeeded / Failed / Skipped / Total] 153 / 149 / 2 / 304:  30%|███       | 305/1000 [1:04:58<2:28:04, 12.78s/it]--------------------------------------------- Result 293 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[port]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[port]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Get an integer value . --> Return function index function --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[function]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Returns a copy of the http client . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[program]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[html]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 296 ---------------------------------------------
Get byte from path --> Set file content --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[file]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Retrieves the resource at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[address]] > [[address]] get ( String path ) { final JSONAssertion [[x]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[address]] ) [[x]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Get short short . --> Returns c c --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[c]] ( String [[length]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Get a long value . --> Declaration method --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[declaration]] ( String [[a]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[add]] ( String [[c]] ) { final Object value = get ( [[c]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 301 ---------------------------------------------
Get a double value . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[follow]] ( String [[hello]] ) { final Object [[procedure]] = get ( [[hello]] ) ; if ( [[procedure]] instanceof Double ) { return ( Double ) [[procedure]] ; } return ObjectConverter . convertObjectTo ( [[procedure]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Gets a map . --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[call]] ( String [[g]] ) { return get ( [[g]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[ate]] ( Object [[bed]] , ObjectMapper mapper ) { spec . body ( [[bed]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Convenience method for getting a part of an object . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[graph]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[graph]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 150 / 2 / 305:  30%|███       | 305/1000 [1:04:58<2:28:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 150 / 2 / 305:  31%|███       | 306/1000 [1:05:17<2:28:03, 12.80s/it][Succeeded / Failed / Skipped / Total] 153 / 151 / 2 / 306:  31%|███       | 306/1000 [1:05:17<2:28:03, 12.80s/it][Succeeded / Failed / Skipped / Total] 153 / 151 / 2 / 306:  31%|███       | 307/1000 [1:05:23<2:27:36, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 152 / 2 / 307:  31%|███       | 307/1000 [1:05:23<2:27:36, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 152 / 2 / 307:  31%|███       | 308/1000 [1:05:25<2:26:58, 12.74s/it][Succeeded / Failed / Skipped / Total] 153 / 153 / 2 / 308:  31%|███       | 308/1000 [1:05:25<2:26:58, 12.74s/it][Succeeded / Failed / Skipped / Total] 153 / 153 / 2 / 308:  31%|███       | 309/1000 [1:05:35<2:26:41, 12.74s/it][Succeeded / Failed / Skipped / Total] 154 / 153 / 2 / 309:  31%|███       | 309/1000 [1:05:35<2:26:41, 12.74s/it][Succeeded / Failed / Skipped / Total] 154 / 153 / 2 / 309:  31%|███       | 310/1000 [1:05:41<2:26:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 153 / 2 / 310:  31%|███       | 310/1000 [1:05:41<2:26:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 153 / 2 / 310:  31%|███       | 311/1000 [1:05:52<2:25:56, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 154 / 2 / 311:  31%|███       | 311/1000 [1:05:52<2:25:56, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 154 / 2 / 311:  31%|███       | 312/1000 [1:05:54<2:25:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 156 / 154 / 2 / 312:  31%|███       | 312/1000 [1:05:54<2:25:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 156 / 154 / 2 / 312:  31%|███▏      | 313/1000 [1:06:06<2:25:05, 12.67s/it][Succeeded / Failed / Skipped / Total] 156 / 155 / 2 / 313:  31%|███▏      | 313/1000 [1:06:06<2:25:05, 12.67s/it][Succeeded / Failed / Skipped / Total] 156 / 155 / 2 / 313:  31%|███▏      | 314/1000 [1:06:23<2:25:03, 12.69s/it]Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[am]] ( String [[attribute]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[attribute]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request spec --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[at]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[source]] , Collection < ? > [[file]] ) { spec . param ( [[source]] , [[file]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Get a list from the specified path --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[method]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[method]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[st]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 309 ---------------------------------------------
Returns a filter that logs the response to the if - matches . --> Log response to if matches --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[a]] ) { return new ResponseLoggingFilter ( stream , [[a]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Clean up data for non - collected state . --> Cleans up data for all keys and sources --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[i]] = backingMap . get ( keyAndSource . key ) ; if ( [[i]] != null ) { [[i]] . remove ( keyAndSource . source ) ; if ( [[i]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 311 ---------------------------------------------
Configure the form params update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[end]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 312 ---------------------------------------------
convert constant string to string --> Method call --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[method]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 313 ---------------------------------------------
Index all implicit bindings for this type . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[string]] ( ) { for ( Binding < ? > [[group]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[group]] . getKey ( ) . getTypeLiteral ( ) , [[group]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 155 / 2 / 314:  31%|███▏      | 314/1000 [1:06:23<2:25:03, 12.69s/it][Succeeded / Failed / Skipped / Total] 157 / 155 / 2 / 314:  32%|███▏      | 315/1000 [1:06:31<2:24:38, 12.67s/it][Succeeded / Failed / Skipped / Total] 158 / 155 / 2 / 315:  32%|███▏      | 315/1000 [1:06:31<2:24:38, 12.67s/it][Succeeded / Failed / Skipped / Total] 158 / 155 / 2 / 315:  32%|███▏      | 316/1000 [1:06:31<2:23:59, 12.63s/it][Succeeded / Failed / Skipped / Total] 158 / 156 / 2 / 316:  32%|███▏      | 316/1000 [1:06:31<2:23:59, 12.63s/it][Succeeded / Failed / Skipped / Total] 158 / 156 / 2 / 316:  32%|███▏      | 317/1000 [1:07:11<2:24:46, 12.72s/it][Succeeded / Failed / Skipped / Total] 158 / 157 / 2 / 317:  32%|███▏      | 317/1000 [1:07:11<2:24:46, 12.72s/it][Succeeded / Failed / Skipped / Total] 158 / 157 / 2 / 317:  32%|███▏      | 318/1000 [1:07:27<2:24:40, 12.73s/it][Succeeded / Failed / Skipped / Total] 159 / 157 / 2 / 318:  32%|███▏      | 318/1000 [1:07:27<2:24:40, 12.73s/it][Succeeded / Failed / Skipped / Total] 159 / 157 / 2 / 318:  32%|███▏      | 319/1000 [1:07:30<2:24:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 159 / 158 / 2 / 319:  32%|███▏      | 319/1000 [1:07:30<2:24:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 159 / 158 / 2 / 319:  32%|███▏      | 320/1000 [1:07:40<2:23:47, 12.69s/it][Succeeded / Failed / Skipped / Total] 160 / 158 / 2 / 320:  32%|███▏      | 320/1000 [1:07:40<2:23:47, 12.69s/it][Succeeded / Failed / Skipped / Total] 160 / 158 / 2 / 320:  32%|███▏      | 321/1000 [1:07:50<2:23:29, 12.68s/it]Remove a binding from JIT bindings . --> Remove bindings for a given domain --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[python]] ( Binding < ? > [[domain]] , InjectionPoint ip ) { failedJitBindings . add ( [[domain]] . getKey ( ) ) ; jitBindings . remove ( [[domain]] . getKey ( ) ) ; membersInjectorStore . remove ( [[domain]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[domain]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 315 ---------------------------------------------
Creates a cookies object . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[handler]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[field]] = new LinkedList < Cookie > ( ) ; [[field]] . add ( cookie ) ; Collections . addAll ( [[field]] , [[handler]] ) ; return new Cookies ( [[field]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Gets the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[print]] ( BindingImpl < ? > [[command]] ) { if ( [[command]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[command]] ) . getInternalDependencies ( ) ; } else if ( [[command]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[command]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[add]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds the logger to the provider . --> Used for unit testing --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[function]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 319 ---------------------------------------------
Binds an injector to the provider . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[foo]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[value]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[value]] , Scoping . UNSCOPED , [[value]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 320 ---------------------------------------------
Gets all parameters . --> Declares a procedure --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[declaration]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[procedure]] ) throws InternalProvisionException { if ( [[procedure]] == null ) { return NO_ARGUMENTS ; } int size = [[procedure]] . length ; Object [ ] [[definition]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 321 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 158 / 2 / 321:  32%|███▏      | 321/1000 [1:07:50<2:23:29, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 158 / 2 / 321:  32%|███▏      | 322/1000 [1:08:04<2:23:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 159 / 2 / 322:  32%|███▏      | 322/1000 [1:08:04<2:23:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 159 / 2 / 322:  32%|███▏      | 323/1000 [1:08:22<2:23:18, 12.70s/it][Succeeded / Failed / Skipped / Total] 161 / 160 / 2 / 323:  32%|███▏      | 323/1000 [1:08:22<2:23:18, 12.70s/it][Succeeded / Failed / Skipped / Total] 161 / 160 / 2 / 323:  32%|███▏      | 324/1000 [1:08:46<2:23:29, 12.74s/it][Succeeded / Failed / Skipped / Total] 161 / 161 / 2 / 324:  32%|███▏      | 324/1000 [1:08:46<2:23:29, 12.74s/it][Succeeded / Failed / Skipped / Total] 161 / 161 / 2 / 324:  32%|███▎      | 325/1000 [1:08:59<2:23:16, 12.74s/it][Succeeded / Failed / Skipped / Total] 162 / 161 / 2 / 325:  32%|███▎      | 325/1000 [1:08:59<2:23:16, 12.74s/it][Succeeded / Failed / Skipped / Total] 162 / 161 / 2 / 325:  33%|███▎      | 326/1000 [1:09:01<2:22:42, 12.70s/it][Succeeded / Failed / Skipped / Total] 163 / 161 / 2 / 326:  33%|███▎      | 326/1000 [1:09:01<2:22:42, 12.70s/it][Succeeded / Failed / Skipped / Total] 163 / 161 / 2 / 326:  33%|███▎      | 327/1000 [1:09:10<2:22:22, 12.69s/it][Succeeded / Failed / Skipped / Total] 163 / 162 / 2 / 327:  33%|███▎      | 327/1000 [1:09:10<2:22:22, 12.69s/it][Succeeded / Failed / Skipped / Total] 163 / 162 / 2 / 327:  33%|███▎      | 328/1000 [1:09:19<2:22:02, 12.68s/it][Succeeded / Failed / Skipped / Total] 164 / 162 / 2 / 328:  33%|███▎      | 328/1000 [1:09:19<2:22:02, 12.68s/it][Succeeded / Failed / Skipped / Total] 164 / 162 / 2 / 328:  33%|███▎      | 329/1000 [1:09:31<2:21:47, 12.68s/it][Succeeded / Failed / Skipped / Total] 165 / 162 / 2 / 329:  33%|███▎      | 329/1000 [1:09:31<2:21:47, 12.68s/it][Succeeded / Failed / Skipped / Total] 165 / 162 / 2 / 329:  33%|███▎      | 330/1000 [1:09:36<2:21:20, 12.66s/it]Returns true if method overrides method . --> Compare two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[a]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 322 ---------------------------------------------
The provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[version]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[join]] ( MembersInjector < T > [[name]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[name]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Cleanup internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[fix]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 325 ---------------------------------------------
Check for missing binding annotations . --> Programmatic programmatically --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[program]] ( Member [[faults]] , Errors errors ) { Annotation [[a]] = Annotations . findBindingAnnotation ( errors , [[faults]] , ( ( AnnotatedElement ) [[faults]] ) . getAnnotations ( ) ) ; if ( [[a]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
Prepare built in converters . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[command]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
Resolves a list of type literals . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[state]] ( Type [ ] [[a]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[a]] . length ] ; for ( int [[array]] = 0 ; [[array]] < [[a]] . length ; [[array]] ++ ) { result [ [[array]] ] = resolve ( [[a]] [ [[array]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
Checks if this class has the same CGLib . --> Check whether a var is loaded --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[var]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 329 ---------------------------------------------
Canonicalize the type if necessary . --> Check the typeLit --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type [[type]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[on]] ( TypeLiteral < T > typeLiteral ) { Type [[hazard]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[hazard]] ) ) { Errors [[words]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[words]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[hazard]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 163 / 2 / 330:  33%|███▎      | 330/1000 [1:09:36<2:21:20, 12.66s/it][Succeeded / Failed / Skipped / Total] 165 / 163 / 2 / 330:  33%|███▎      | 331/1000 [1:09:48<2:21:05, 12.65s/it][Succeeded / Failed / Skipped / Total] 165 / 164 / 2 / 331:  33%|███▎      | 331/1000 [1:09:48<2:21:05, 12.65s/it][Succeeded / Failed / Skipped / Total] 165 / 164 / 2 / 331:  33%|███▎      | 332/1000 [1:09:50<2:20:31, 12.62s/it][Succeeded / Failed / Skipped / Total] 165 / 165 / 2 / 332:  33%|███▎      | 332/1000 [1:09:50<2:20:31, 12.62s/it][Succeeded / Failed / Skipped / Total] 165 / 165 / 2 / 332:  33%|███▎      | 333/1000 [1:09:53<2:20:00, 12.59s/it][Succeeded / Failed / Skipped / Total] 166 / 165 / 2 / 333:  33%|███▎      | 333/1000 [1:09:53<2:20:00, 12.59s/it][Succeeded / Failed / Skipped / Total] 166 / 165 / 2 / 333:  33%|███▎      | 334/1000 [1:10:22<2:20:19, 12.64s/it][Succeeded / Failed / Skipped / Total] 167 / 165 / 2 / 334:  33%|███▎      | 334/1000 [1:10:22<2:20:19, 12.64s/it][Succeeded / Failed / Skipped / Total] 167 / 165 / 2 / 334:  34%|███▎      | 335/1000 [1:10:23<2:19:43, 12.61s/it][Succeeded / Failed / Skipped / Total] 168 / 165 / 2 / 335:  34%|███▎      | 335/1000 [1:10:23<2:19:43, 12.61s/it][Succeeded / Failed / Skipped / Total] 168 / 165 / 2 / 335:  34%|███▎      | 336/1000 [1:11:08<2:20:36, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 166 / 2 / 336:  34%|███▎      | 336/1000 [1:11:08<2:20:36, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 166 / 2 / 336:  34%|███▎      | 337/1000 [1:11:24<2:20:29, 12.71s/it]Canonicalize the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[state]] ( ClassLoader [[main]] ) { return [[main]] != null ? [[main]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 331 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 332 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 333 ---------------------------------------------
Validate all pending injections . --> Finalize validation process --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[cause]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a new instance of this class with the given arguments . --> Convenience wrapper for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[wr]] ( Object [ ] [[example]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[example]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
Add a dispatcher to the servlet . --> Convenience method for invoking oracle --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[oracle]] ( ServletRequest [[java]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[main]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 167 / 2 / 337:  34%|███▎      | 337/1000 [1:11:24<2:20:29, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 167 / 2 / 337:  34%|███▍      | 338/1000 [1:11:27<2:19:57, 12.68s/it][Succeeded / Failed / Skipped / Total] 168 / 168 / 2 / 338:  34%|███▍      | 338/1000 [1:11:27<2:19:57, 12.68s/it][Succeeded / Failed / Skipped / Total] 168 / 168 / 2 / 338:  34%|███▍      | 339/1000 [1:11:42<2:19:49, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 168 / 2 / 339:  34%|███▍      | 339/1000 [1:11:42<2:19:49, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 168 / 2 / 339:  34%|███▍      | 340/1000 [1:11:55<2:19:37, 12.69s/it][Succeeded / Failed / Skipped / Total] 170 / 168 / 2 / 340:  34%|███▍      | 340/1000 [1:11:55<2:19:37, 12.69s/it][Succeeded / Failed / Skipped / Total] 170 / 168 / 2 / 340:  34%|███▍      | 341/1000 [1:12:09<2:19:26, 12.70s/it][Succeeded / Failed / Skipped / Total] 171 / 168 / 2 / 341:  34%|███▍      | 341/1000 [1:12:09<2:19:26, 12.70s/it][Succeeded / Failed / Skipped / Total] 171 / 168 / 2 / 341:  34%|███▍      | 342/1000 [1:12:09<2:18:50, 12.66s/it][Succeeded / Failed / Skipped / Total] 172 / 168 / 2 / 342:  34%|███▍      | 342/1000 [1:12:09<2:18:50, 12.66s/it][Succeeded / Failed / Skipped / Total] 172 / 168 / 2 / 342:  34%|███▍      | 343/1000 [1:12:40<2:19:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 172 / 169 / 2 / 343:  34%|███▍      | 343/1000 [1:12:40<2:19:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 172 / 169 / 2 / 343:  34%|███▍      | 344/1000 [1:13:00<2:19:14, 12.73s/it]Generates an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[name]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Scope creation method . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[when]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[when]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 339 ---------------------------------------------
Normalize path . --> Return bar from index --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[bar]] ( String [[index]] ) { StringBuilder sb = new StringBuilder ( [[index]] . length ( ) ) ; int queryStart = [[index]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[index]] . substring ( queryStart ) ; [[index]] = [[index]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Checks if the annotation is retained at runtime . --> Fixes retention policy --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[fix]] ( Class < ? extends Annotation > [[b]] ) { Retention retention = [[b]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Gets the name of the key . --> Get Var from Key --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[var]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 342 ---------------------------------------------
Makes an injectable that can be used to inject the given scoping . --> Inject scoping annotations --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = scoping . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[operations]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[definition]] = scoping . getScopeAnnotation ( ) ; if ( [[definition]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[definition]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[definition]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 343 ---------------------------------------------
Add the direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[empty]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 169 / 2 / 344:  34%|███▍      | 344/1000 [1:13:00<2:19:14, 12.73s/it][Succeeded / Failed / Skipped / Total] 173 / 169 / 2 / 344:  34%|███▍      | 345/1000 [1:13:01<2:18:38, 12.70s/it][Succeeded / Failed / Skipped / Total] 173 / 170 / 2 / 345:  34%|███▍      | 345/1000 [1:13:01<2:18:38, 12.70s/it][Succeeded / Failed / Skipped / Total] 173 / 170 / 2 / 345:  35%|███▍      | 346/1000 [1:13:35<2:19:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 173 / 171 / 2 / 346:  35%|███▍      | 346/1000 [1:13:35<2:19:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 173 / 171 / 2 / 346:  35%|███▍      | 347/1000 [1:13:39<2:18:36, 12.74s/it][Succeeded / Failed / Skipped / Total] 173 / 172 / 2 / 347:  35%|███▍      | 347/1000 [1:13:39<2:18:36, 12.74s/it][Succeeded / Failed / Skipped / Total] 173 / 172 / 2 / 347:  35%|███▍      | 348/1000 [1:13:57<2:18:34, 12.75s/it][Succeeded / Failed / Skipped / Total] 174 / 172 / 2 / 348:  35%|███▍      | 348/1000 [1:13:58<2:18:34, 12.75s/it][Succeeded / Failed / Skipped / Total] 174 / 172 / 2 / 348:  35%|███▍      | 349/1000 [1:14:14<2:18:28, 12.76s/it][Succeeded / Failed / Skipped / Total] 175 / 172 / 2 / 349:  35%|███▍      | 349/1000 [1:14:14<2:18:28, 12.76s/it][Succeeded / Failed / Skipped / Total] 175 / 172 / 2 / 349:  35%|███▌      | 350/1000 [1:14:14<2:17:52, 12.73s/it][Succeeded / Failed / Skipped / Total] 175 / 173 / 2 / 350:  35%|███▌      | 350/1000 [1:14:14<2:17:52, 12.73s/it][Succeeded / Failed / Skipped / Total] 175 / 173 / 2 / 350:  35%|███▌      | 351/1000 [1:14:21<2:17:29, 12.71s/it]Finds a scope annotation . --> Given an annotations remove duplicate scope annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation [[annotation]] : [[annotations]] ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[f]] ( Errors errors , Annotation [ ] [[exclusion]] ) { Class < ? extends Annotation > [[bold]] = null ; for ( Annotation [[code]] : [[exclusion]] ) { Class < ? extends Annotation > annotationType = [[code]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[bold]] != null ) { errors . duplicateScopeAnnotations ( [[bold]] , annotationType ) ; } else { [[bold]] = annotationType ; } } } return [[bold]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[python]] ( Provider < T > [[client]] ) { checkState ( this . [[non]] == null , "delegate already initialized" ) ; this . [[non]] = checkNotNull ( [[client]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 346 ---------------------------------------------
Get a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[on]] ( InjectionPoint [[registered]] , Errors errors ) throws ErrorsException { return cache . get ( [[registered]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Gets binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[execute]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[ception]] ) throws ErrorsException { int numErrorsBefore = [[ception]] . size ( ) ; Annotation found = findBindingAnnotation ( [[ception]] , member , annotations ) ; [[ception]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 348 ---------------------------------------------
Creates a new instance . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[τ]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 349 ---------------------------------------------
Writes a replace operation . --> write replace method --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[x]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[x]] . length ; i ++ ) { [[x]] [ i ] = Errors . convert ( [[x]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[x]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a new key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[bar]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[bar]] ) ) ; return [[bar]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 173 / 2 / 351:  35%|███▌      | 351/1000 [1:14:21<2:17:29, 12.71s/it][Succeeded / Failed / Skipped / Total] 176 / 173 / 2 / 351:  35%|███▌      | 352/1000 [1:14:29<2:17:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 177 / 173 / 2 / 352:  35%|███▌      | 352/1000 [1:14:29<2:17:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 177 / 173 / 2 / 352:  35%|███▌      | 353/1000 [1:14:30<2:16:33, 12.66s/it][Succeeded / Failed / Skipped / Total] 178 / 173 / 2 / 353:  35%|███▌      | 353/1000 [1:14:30<2:16:33, 12.66s/it][Succeeded / Failed / Skipped / Total] 178 / 173 / 2 / 353:  35%|███▌      | 354/1000 [1:14:54<2:16:41, 12.70s/it][Succeeded / Failed / Skipped / Total] 178 / 174 / 2 / 354:  35%|███▌      | 354/1000 [1:14:54<2:16:41, 12.70s/it][Succeeded / Failed / Skipped / Total] 178 / 174 / 2 / 354:  36%|███▌      | 355/1000 [1:15:19<2:16:51, 12.73s/it][Succeeded / Failed / Skipped / Total] 179 / 174 / 2 / 355:  36%|███▌      | 355/1000 [1:15:19<2:16:51, 12.73s/it][Succeeded / Failed / Skipped / Total] 179 / 174 / 2 / 355:  36%|███▌      | 356/1000 [1:15:49<2:17:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 180 / 174 / 2 / 356:  36%|███▌      | 356/1000 [1:15:49<2:17:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 180 / 174 / 2 / 356:  36%|███▌      | 357/1000 [1:15:57<2:16:47, 12.76s/it][Succeeded / Failed / Skipped / Total] 181 / 174 / 2 / 357:  36%|███▌      | 357/1000 [1:15:57<2:16:47, 12.76s/it][Succeeded / Failed / Skipped / Total] 181 / 174 / 2 / 357:  36%|███▌      | 358/1000 [1:16:15<2:16:45, 12.78s/it]Checks if the given interceptor has scope annotations . --> Loops through all scopes --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[loop]] ( Class < ? extends Interceptor > [[domain]] ) { for ( Annotation [[classes]] : [[domain]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[classes]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 352 ---------------------------------------------
Gets all registered methods . --> Label all methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[label]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the Module for the given module --> Binding B --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[b]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 354 ---------------------------------------------
Static factory method for creating a new RealMapBinder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > [[keyType]] , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , [[keyType]] , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[declare]] ( Binder [[list]] , TypeLiteral < K > [[option]] , Key < V > [[file]] ) { [[list]] = [[list]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[file]] . getTypeLiteral ( ) ; return [[declare]] ( [[list]] , [[option]] , valueType , [[file]] . ofType ( mapOf ( [[option]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[list]] , [[file]] . ofType ( entryOfProviderOf ( [[option]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Get dependencies for ctor . --> Get dependency from ctor point --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[let]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[build]] = ImmutableSet . builder ( ) ; [[build]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[build]] . addAll ( ip . getDependencies ( ) ) ; } } return [[build]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 356 ---------------------------------------------
Removes the dependencies from the Dependency object . --> Converts Dependency objects to Dependency --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[hold]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[object]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[w]] : deps ) { Class < ? > annotationType = [[w]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[object]] . add ( [[w]] ) ; } } return [[object]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the given type is not defined . --> Add a configuration exception --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[msg]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[msg]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[add]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[size]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[size]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 174 / 2 / 358:  36%|███▌      | 358/1000 [1:16:15<2:16:45, 12.78s/it][Succeeded / Failed / Skipped / Total] 182 / 174 / 2 / 358:  36%|███▌      | 359/1000 [1:16:24<2:16:26, 12.77s/it][Succeeded / Failed / Skipped / Total] 183 / 174 / 2 / 359:  36%|███▌      | 359/1000 [1:16:24<2:16:26, 12.77s/it][Succeeded / Failed / Skipped / Total] 183 / 174 / 2 / 359:  36%|███▌      | 360/1000 [1:16:33<2:16:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 184 / 174 / 2 / 360:  36%|███▌      | 360/1000 [1:16:33<2:16:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 184 / 174 / 2 / 360:  36%|███▌      | 361/1000 [1:17:16<2:16:46, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 175 / 2 / 361:  36%|███▌      | 361/1000 [1:17:16<2:16:46, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 175 / 2 / 361:  36%|███▌      | 362/1000 [1:17:23<2:16:23, 12.83s/it][Succeeded / Failed / Skipped / Total] 184 / 176 / 2 / 362:  36%|███▌      | 362/1000 [1:17:23<2:16:23, 12.83s/it][Succeeded / Failed / Skipped / Total] 184 / 176 / 2 / 362:  36%|███▋      | 363/1000 [1:17:39<2:16:16, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 177 / 2 / 363:  36%|███▋      | 363/1000 [1:17:39<2:16:16, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 177 / 2 / 363:  36%|███▋      | 364/1000 [1:17:44<2:15:49, 12.81s/it][Succeeded / Failed / Skipped / Total] 184 / 178 / 2 / 364:  36%|███▋      | 364/1000 [1:17:44<2:15:49, 12.81s/it][Succeeded / Failed / Skipped / Total] 184 / 178 / 2 / 364:  36%|███▋      | 365/1000 [1:17:57<2:15:37, 12.82s/it][Succeeded / Failed / Skipped / Total] 184 / 179 / 2 / 365:  36%|███▋      | 365/1000 [1:17:57<2:15:37, 12.82s/it][Succeeded / Failed / Skipped / Total] 184 / 179 / 2 / 365:  37%|███▋      | 366/1000 [1:17:58<2:15:04, 12.78s/it]Invokes the method on the proxy --> Overriding super methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[fork]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 359 ---------------------------------------------
Returns true if the given set is valid for the given factory . --> Programmatically --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[program]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[command]] ) { Set < Dependency < ? > > [[command]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 360 ---------------------------------------------
Throws an exception when missing . --> Throws an exception when no implementation was bound . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[bus]] = new StringBuilder ( ) ; [[bus]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 361 ---------------------------------------------
Gets the binding from a Guice Ginjector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[loop]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[loop]] ( HttpServletRequest [[al]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[al]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 363 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[client]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Add a new RealMultibinder into the given binder . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[follow]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if the given constructor has at least one annotation --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[operators]] ( Constructor [[methods]] ) { return [[methods]] . isAnnotationPresent ( Inject . class ) || [[methods]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 179 / 2 / 366:  37%|███▋      | 366/1000 [1:17:58<2:15:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 179 / 2 / 366:  37%|███▋      | 367/1000 [1:18:10<2:14:49, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 180 / 2 / 367:  37%|███▋      | 367/1000 [1:18:10<2:14:49, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 180 / 2 / 367:  37%|███▋      | 368/1000 [1:18:30<2:14:49, 12.80s/it][Succeeded / Failed / Skipped / Total] 185 / 181 / 2 / 368:  37%|███▋      | 368/1000 [1:18:30<2:14:49, 12.80s/it][Succeeded / Failed / Skipped / Total] 185 / 181 / 2 / 368:  37%|███▋      | 369/1000 [1:18:42<2:14:35, 12.80s/it][Succeeded / Failed / Skipped / Total] 186 / 181 / 2 / 369:  37%|███▋      | 369/1000 [1:18:42<2:14:35, 12.80s/it][Succeeded / Failed / Skipped / Total] 186 / 181 / 2 / 369:  37%|███▋      | 370/1000 [1:18:47<2:14:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 186 / 182 / 2 / 370:  37%|███▋      | 370/1000 [1:18:47<2:14:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 186 / 182 / 2 / 370:  37%|███▋      | 371/1000 [1:19:07<2:14:09, 12.80s/it][Succeeded / Failed / Skipped / Total] 187 / 182 / 2 / 371:  37%|███▋      | 371/1000 [1:19:07<2:14:09, 12.80s/it][Succeeded / Failed / Skipped / Total] 187 / 182 / 2 / 371:  37%|███▋      | 372/1000 [1:19:14<2:13:46, 12.78s/it][Succeeded / Failed / Skipped / Total] 187 / 183 / 2 / 372:  37%|███▋      | 372/1000 [1:19:14<2:13:46, 12.78s/it][Succeeded / Failed / Skipped / Total] 187 / 183 / 2 / 372:  37%|███▋      | 373/1000 [1:19:22<2:13:25, 12.77s/it]Determines if the constructor has matching parameters . --> Iterate over the array elements --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[errors]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[paramAnnotations]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[paramKey]] = Annotations . getKey ( param , constructor , [[paramAnnotations]] [ p ++ ] , [[errors]] ) ; constructorKeys . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[array]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[pot]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[box]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[error]] = Annotations . getKey ( param , constructor , [[box]] [ p ++ ] , [[pot]] ) ; constructorKeys . add ( [[error]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 367 ---------------------------------------------
Gets the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[install]] ( ) { ImmutableSet . Builder < InjectionPoint > [[http]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[http]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Gets the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[net]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initializes the injector . --> Execute error messages --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[call]] ( Errors [[ecure]] ) { injector . lookups = injector ; new LookupProcessor ( [[ecure]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Create a module scope for a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[program]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Try to find an annotation for a method . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[binder]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( annotationClass ) ; if ( [[foundAnnotation]] != null ) { if ( [[annotation]] != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = [[foundAnnotation]] ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[red]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[array]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[group]] = method . getAnnotation ( annotationClass ) ; if ( [[group]] != null ) { if ( [[array]] != null ) { [[red]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[array]] = [[group]] ; } } return [[array]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 372 ---------------------------------------------
Wraps the given callable into a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[program]] ( Callable < T > callable ) { return wrap ( callable , [[program]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 373 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 183 / 2 / 373:  37%|███▋      | 373/1000 [1:19:22<2:13:25, 12.77s/it][Succeeded / Failed / Skipped / Total] 188 / 183 / 2 / 373:  37%|███▋      | 374/1000 [1:19:37<2:13:17, 12.77s/it][Succeeded / Failed / Skipped / Total] 189 / 183 / 2 / 374:  37%|███▋      | 374/1000 [1:19:37<2:13:17, 12.77s/it][Succeeded / Failed / Skipped / Total] 189 / 183 / 2 / 374:  38%|███▊      | 375/1000 [1:20:08<2:13:34, 12.82s/it][Succeeded / Failed / Skipped / Total] 189 / 184 / 2 / 375:  38%|███▊      | 375/1000 [1:20:08<2:13:34, 12.82s/it][Succeeded / Failed / Skipped / Total] 189 / 184 / 2 / 375:  38%|███▊      | 376/1000 [1:20:36<2:13:46, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 185 / 2 / 376:  38%|███▊      | 376/1000 [1:20:36<2:13:46, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 185 / 2 / 376:  38%|███▊      | 377/1000 [1:20:41<2:13:19, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 185 / 2 / 377:  38%|███▊      | 377/1000 [1:20:41<2:13:19, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 185 / 2 / 377:  38%|███▊      | 378/1000 [1:20:44<2:12:52, 12.82s/it]Wraps the given callable in a continue request . --> Simplified function for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[program]] ( Callable < T > [[set]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[set]] , [[program]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Validates the given value . --> Check if position is compatible with position --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[var]] ( Key < ? > key , Object [[position]] ) { if ( [[position]] == null || [[position]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[position]] ) ) { throw new IllegalArgumentException ( "Value[" + [[position]] + "] of type[" + [[position]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[position]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Builds Key from type and annotation strategy --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[call]] ( Class < T > [[operator]] , AnnotationStrategy [[c]] ) { return new Key < T > ( [[operator]] , [[c]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[ception]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Create a injector for the given type . --> Injects the type listener for binding variables --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[alreadySeenListeners]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[alreadySeenListeners]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[alreadySeenListeners]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[var]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[entry]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[entry]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[entry]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 186 / 2 / 378:  38%|███▊      | 378/1000 [1:20:44<2:12:52, 12.82s/it][Succeeded / Failed / Skipped / Total] 190 / 186 / 2 / 378:  38%|███▊      | 379/1000 [1:20:46<2:12:21, 12.79s/it][Succeeded / Failed / Skipped / Total] 190 / 187 / 2 / 379:  38%|███▊      | 379/1000 [1:20:46<2:12:21, 12.79s/it][Succeeded / Failed / Skipped / Total] 190 / 187 / 2 / 379:  38%|███▊      | 380/1000 [1:20:56<2:12:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 190 / 188 / 2 / 380:  38%|███▊      | 380/1000 [1:20:56<2:12:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 190 / 188 / 2 / 380:  38%|███▊      | 381/1000 [1:21:25<2:12:17, 12.82s/it][Succeeded / Failed / Skipped / Total] 191 / 188 / 2 / 381:  38%|███▊      | 381/1000 [1:21:25<2:12:17, 12.82s/it][Succeeded / Failed / Skipped / Total] 191 / 188 / 2 / 381:  38%|███▊      | 382/1000 [1:22:08<2:12:54, 12.90s/it][Succeeded / Failed / Skipped / Total] 191 / 189 / 2 / 382:  38%|███▊      | 382/1000 [1:22:08<2:12:54, 12.90s/it][Succeeded / Failed / Skipped / Total] 191 / 189 / 2 / 382:  38%|███▊      | 383/1000 [1:22:26<2:12:48, 12.92s/it][Succeeded / Failed / Skipped / Total] 192 / 189 / 2 / 383:  38%|███▊      | 383/1000 [1:22:26<2:12:48, 12.92s/it][Succeeded / Failed / Skipped / Total] 192 / 189 / 2 / 383:  38%|███▊      | 384/1000 [1:22:46<2:12:47, 12.93s/it][Succeeded / Failed / Skipped / Total] 192 / 190 / 2 / 384:  38%|███▊      | 384/1000 [1:22:46<2:12:47, 12.93s/it][Succeeded / Failed / Skipped / Total] 192 / 190 / 2 / 384:  38%|███▊      | 385/1000 [1:23:01<2:12:37, 12.94s/it]Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[e]] ( Class < ? extends Annotation > [[function]] ) { [[function]] = Annotations . canonicalizeIfNamed ( [[function]] ) ; if ( isAllDefaultMethods ( [[function]] ) ) { return [[e]] ( generateAnnotation ( [[function]] ) ) ; } checkNotNull ( [[function]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[function]] ) ; ensureIsBindingAnnotation ( [[function]] ) ; return new AnnotationTypeStrategy ( [[function]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 379 ---------------------------------------------
Gets the injectors for the given injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[collect]] : injectionPoints ) { try { Errors errorsForMember = [[collect]] . isOptional ( ) ? new Errors ( [[collect]] ) : errors . withSource ( [[collect]] ) ; SingleMemberInjector injector = [[collect]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[collect]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[collect]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Gets the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[python]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a formatted message with the given format and arguments . --> Loop loop with parameters --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[loop]] ( String messageFormat , Object ... [[array]] ) { return [[loop]] ( null , messageFormat , [[array]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a message with the given message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[string]] ( Throwable [[menu]] , String messageFormat , Object ... arguments ) { return [[string]] ( [[menu]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 383 ---------------------------------------------
Convert an object to a type . --> Used for unit tests --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[u]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[u]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 384 ---------------------------------------------
Removes the stack trace from the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[fix]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[print]] = t . getStackTrace ( ) ; List < StackTraceElement > [[end]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[print]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[end]] . add ( element ) ; } } t . setStackTrace ( [[end]] . toArray ( new StackTraceElement [ [[end]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 191 / 2 / 385:  38%|███▊      | 385/1000 [1:23:01<2:12:37, 12.94s/it][Succeeded / Failed / Skipped / Total] 192 / 191 / 2 / 385:  39%|███▊      | 386/1000 [1:23:18<2:12:30, 12.95s/it][Succeeded / Failed / Skipped / Total] 193 / 191 / 2 / 386:  39%|███▊      | 386/1000 [1:23:18<2:12:30, 12.95s/it][Succeeded / Failed / Skipped / Total] 193 / 191 / 2 / 386:  39%|███▊      | 387/1000 [1:23:21<2:12:02, 12.92s/it][Succeeded / Failed / Skipped / Total] 193 / 192 / 2 / 387:  39%|███▊      | 387/1000 [1:23:21<2:12:02, 12.92s/it][Succeeded / Failed / Skipped / Total] 193 / 192 / 2 / 387:  39%|███▉      | 388/1000 [1:23:22<2:11:29, 12.89s/it][Succeeded / Failed / Skipped / Total] 194 / 192 / 2 / 388:  39%|███▉      | 388/1000 [1:23:22<2:11:29, 12.89s/it][Succeeded / Failed / Skipped / Total] 194 / 192 / 2 / 388:  39%|███▉      | 389/1000 [1:23:39<2:11:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 195 / 192 / 2 / 389:  39%|███▉      | 389/1000 [1:23:39<2:11:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 195 / 192 / 2 / 389:  39%|███▉      | 390/1000 [1:23:55<2:11:16, 12.91s/it][Succeeded / Failed / Skipped / Total] 196 / 192 / 2 / 390:  39%|███▉      | 390/1000 [1:23:55<2:11:16, 12.91s/it][Succeeded / Failed / Skipped / Total] 196 / 192 / 2 / 390:  39%|███▉      | 391/1000 [1:23:57<2:10:45, 12.88s/it][Succeeded / Failed / Skipped / Total] 197 / 192 / 2 / 391:  39%|███▉      | 391/1000 [1:23:57<2:10:45, 12.88s/it][Succeeded / Failed / Skipped / Total] 197 / 192 / 2 / 391:  39%|███▉      | 392/1000 [1:24:11<2:10:34, 12.89s/it][Succeeded / Failed / Skipped / Total] 198 / 192 / 2 / 392:  39%|███▉      | 392/1000 [1:24:11<2:10:34, 12.89s/it][Succeeded / Failed / Skipped / Total] 198 / 192 / 2 / 392:  39%|███▉      | 393/1000 [1:24:35<2:10:39, 12.91s/it]Checks if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[binary]] ( String [[ex]] ) { return ( parent != null && parent . shouldBeSkipped ( [[ex]] ) ) || classNamesToSkip . contains ( [[ex]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Manage jmx modules . --> Manage JMX MBeans --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[element]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[element]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 387 ---------------------------------------------
Creates a new message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > [[sources]] , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( [[sources]] , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[form]] ( Throwable [[forms]] , List < Object > [[arguments]] , String [[context]] , Object ... arguments ) { String message = format ( [[context]] , arguments ) ; return new Message ( [[arguments]] , message , [[forms]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 388 ---------------------------------------------
Gets the configuration object for the given modules . --> Configure a list of modules --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[foo]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[source]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[source]] ) ) { return new StackTraceElement ( [[source]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Pushes a new state on the stack . --> Method pushState method --> Socre: 1.0

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[method]] ) { doPushState ( key , [[method]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 390 ---------------------------------------------
Returns an initializable instance --> Initialize a file --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[foo]] ( final T [[file]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[file]] ; } @ Override public String toString ( ) { return String . valueOf ( [[file]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 391 ---------------------------------------------
Creates a new instance . --> Overrides the default implementation --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[over]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 392 ---------------------------------------------
Process connection event . --> Handle connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[conn]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , [[conn]] ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[integer]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , [[integer]] ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 193 / 2 / 393:  39%|███▉      | 393/1000 [1:24:35<2:10:39, 12.91s/it][Succeeded / Failed / Skipped / Total] 198 / 193 / 2 / 393:  39%|███▉      | 394/1000 [1:24:35<2:10:06, 12.88s/it][Succeeded / Failed / Skipped / Total] 198 / 193 / 3 / 394:  39%|███▉      | 394/1000 [1:24:35<2:10:06, 12.88s/it][Succeeded / Failed / Skipped / Total] 198 / 193 / 3 / 394:  40%|███▉      | 395/1000 [1:24:41<2:09:43, 12.87s/it][Succeeded / Failed / Skipped / Total] 198 / 194 / 3 / 395:  40%|███▉      | 395/1000 [1:24:41<2:09:43, 12.87s/it][Succeeded / Failed / Skipped / Total] 198 / 194 / 3 / 395:  40%|███▉      | 396/1000 [1:25:02<2:09:42, 12.89s/it][Succeeded / Failed / Skipped / Total] 199 / 194 / 3 / 396:  40%|███▉      | 396/1000 [1:25:02<2:09:42, 12.89s/it][Succeeded / Failed / Skipped / Total] 199 / 194 / 3 / 396:  40%|███▉      | 397/1000 [1:25:10<2:09:21, 12.87s/it][Succeeded / Failed / Skipped / Total] 200 / 194 / 3 / 397:  40%|███▉      | 397/1000 [1:25:10<2:09:21, 12.87s/it][Succeeded / Failed / Skipped / Total] 200 / 194 / 3 / 397:  40%|███▉      | 398/1000 [1:25:30<2:09:20, 12.89s/it][Succeeded / Failed / Skipped / Total] 201 / 194 / 3 / 398:  40%|███▉      | 398/1000 [1:25:30<2:09:20, 12.89s/it][Succeeded / Failed / Skipped / Total] 201 / 194 / 3 / 398:  40%|███▉      | 399/1000 [1:25:31<2:08:49, 12.86s/it][Succeeded / Failed / Skipped / Total] 202 / 194 / 3 / 399:  40%|███▉      | 399/1000 [1:25:31<2:08:49, 12.86s/it][Succeeded / Failed / Skipped / Total] 202 / 194 / 3 / 399:  40%|████      | 400/1000 [1:25:41<2:08:32, 12.85s/it]Pushes a dependency onto the dependency stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[program]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Liefert die Throwables --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Get the task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[e]] > [[e]] getFutureTaskResult ( RunStateRecordedFutureTask < [[e]] > task , Logger logger ) { [[e]] [[₀]] = null ; if ( null != task ) { try { [[₀]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[₀]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Adds a processor to a specific event type . --> Move a list of connections to a list --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[move]] ( ConnectionEventType [[list]] , ConnectionEventProcessor [[lists]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[list]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[list]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[list]] ) ; } processorList . add ( [[lists]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
Registers the default processor . --> Programmatic programmatically --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[program]] ( RemotingProcessor < ? > [[a]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[a]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 398 ---------------------------------------------
Register a remoting processor --> Timer timer --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . [[cmd2processors]] . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[timer]] ( CommandCode [[c]] , RemotingProcessor < ? > processor ) { if ( this . [[buffer]] . containsKey ( [[c]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[c]] , cmd2processors . get ( [[c]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[buffer]] . put ( [[c]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 399 ---------------------------------------------
Returns the processor for the given command code --> copied from remoting --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[copy]] ( CommandCode [[stack]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[stack]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 202 / 195 / 3 / 400:  40%|████      | 400/1000 [1:25:41<2:08:32, 12.85s/it][Succeeded / Failed / Skipped / Total] 202 / 195 / 3 / 400:  40%|████      | 401/1000 [1:25:51<2:08:15, 12.85s/it][Succeeded / Failed / Skipped / Total] 203 / 195 / 3 / 401:  40%|████      | 401/1000 [1:25:51<2:08:15, 12.85s/it][Succeeded / Failed / Skipped / Total] 203 / 195 / 3 / 401:  40%|████      | 402/1000 [1:25:59<2:07:54, 12.83s/it][Succeeded / Failed / Skipped / Total] 204 / 195 / 3 / 402:  40%|████      | 402/1000 [1:25:59<2:07:54, 12.83s/it][Succeeded / Failed / Skipped / Total] 204 / 195 / 3 / 402:  40%|████      | 403/1000 [1:26:01<2:07:25, 12.81s/it][Succeeded / Failed / Skipped / Total] 205 / 195 / 3 / 403:  40%|████      | 403/1000 [1:26:01<2:07:25, 12.81s/it][Succeeded / Failed / Skipped / Total] 205 / 195 / 3 / 403:  40%|████      | 404/1000 [1:26:03<2:06:56, 12.78s/it][Succeeded / Failed / Skipped / Total] 206 / 195 / 3 / 404:  40%|████      | 404/1000 [1:26:03<2:06:56, 12.78s/it][Succeeded / Failed / Skipped / Total] 206 / 195 / 3 / 404:  40%|████      | 405/1000 [1:26:09<2:06:34, 12.76s/it]Formats a collection of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[errorMessages]] ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message [[errorMessage]] : [[errorMessages]] ) { int thisIdx = index ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , [[errorMessage]] . getMessage ( ) ) ; List < Object > dependencies = [[errorMessage]] . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = [[errorMessage]] . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[file]] ) { Formatter [[header]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[file]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message [[level]] : [[file]] ) { int thisIdx = index ++ ; [[header]] . format ( "%s) %s%n" , thisIdx , [[level]] . getMessage ( ) ) ; List < Object > dependencies = [[level]] . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[header]] , source ) ; } Throwable cause = [[level]] . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[header]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[header]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[header]] . format ( "%n" ) ; } if ( [[file]] . size ( ) == 1 ) { [[header]] . format ( "1 error" ) ; } else { [[header]] . format ( "%s errors" , [[file]] . size ( ) ) ; } return [[header]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 401 ---------------------------------------------
Returns a map of all the connections in the pool . --> region ConnectionPool Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[put]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 402 ---------------------------------------------
Tries to get a URL . --> Returns the url for the given text . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String [[url]] ) { SoftReference < Url > [[softRef]] = Url . parsedUrls . get ( [[url]] ) ; return ( null == [[softRef]] ) ? null : [[softRef]] . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[block]] ( String [[text]] ) { SoftReference < Url > [[block]] = Url . parsedUrls . get ( [[text]] ) ; return ( null == [[block]] ) ? null : [[block]] . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 403 ---------------------------------------------
Scan idle pool . --> Remove expired connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[alert]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 404 ---------------------------------------------
Decode protocol code . --> Reads ByteBuf from ByteBuf . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[mb]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[²]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[²]] ) ; return ProtocolCode . fromBytes ( [[²]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 195 / 3 / 405:  40%|████      | 405/1000 [1:26:09<2:06:34, 12.76s/it][Succeeded / Failed / Skipped / Total] 207 / 195 / 3 / 405:  41%|████      | 406/1000 [1:26:15<2:06:12, 12.75s/it][Succeeded / Failed / Skipped / Total] 208 / 195 / 3 / 406:  41%|████      | 406/1000 [1:26:15<2:06:12, 12.75s/it][Succeeded / Failed / Skipped / Total] 208 / 195 / 3 / 406:  41%|████      | 407/1000 [1:26:17<2:05:44, 12.72s/it][Succeeded / Failed / Skipped / Total] 209 / 195 / 3 / 407:  41%|████      | 407/1000 [1:26:17<2:05:44, 12.72s/it][Succeeded / Failed / Skipped / Total] 209 / 195 / 3 / 407:  41%|████      | 408/1000 [1:26:23<2:05:20, 12.70s/it][Succeeded / Failed / Skipped / Total] 210 / 195 / 3 / 408:  41%|████      | 408/1000 [1:26:23<2:05:20, 12.70s/it][Succeeded / Failed / Skipped / Total] 210 / 195 / 3 / 408:  41%|████      | 409/1000 [1:26:30<2:05:00, 12.69s/it][Succeeded / Failed / Skipped / Total] 211 / 195 / 3 / 409:  41%|████      | 409/1000 [1:26:30<2:05:00, 12.69s/it][Succeeded / Failed / Skipped / Total] 211 / 195 / 3 / 409:  41%|████      | 410/1000 [1:26:35<2:04:35, 12.67s/it][Succeeded / Failed / Skipped / Total] 212 / 195 / 3 / 410:  41%|████      | 410/1000 [1:26:35<2:04:35, 12.67s/it][Succeeded / Failed / Skipped / Total] 212 / 195 / 3 / 410:  41%|████      | 411/1000 [1:26:48<2:04:24, 12.67s/it][Succeeded / Failed / Skipped / Total] 213 / 195 / 3 / 411:  41%|████      | 411/1000 [1:26:48<2:04:24, 12.67s/it][Succeeded / Failed / Skipped / Total] 213 / 195 / 3 / 411:  41%|████      | 412/1000 [1:26:50<2:03:55, 12.65s/it]Gets and creates a connection to the remote server . --> Throws exception when connection failed --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[exception]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 406 ---------------------------------------------
Attempt to create a connection to a remote server . --> Performs an example --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[example]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 407 ---------------------------------------------
Remove a connection task from the pool . --> Removes a connection from the pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[call]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 408 ---------------------------------------------
Check if a url needs to be removed --> Checks whether an url needs to be removed . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[handle]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 409 ---------------------------------------------
Closes a connection . --> Remove connection from memory . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[compare]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
On closing the connection . --> Echo back to connection --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[echo]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 411 ---------------------------------------------
Do create . --> call async method --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[connection]] = create ( url ) ; pool . add ( [[connection]] ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[call]] ( final Url url , final ConnectionPool pool , final String taskName , final int [[description]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[ray]] = create ( url ) ; pool . add ( [[ray]] ) ; } } else { if ( [[description]] < 0 || [[description]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 412 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 214 / 195 / 3 / 412:  41%|████      | 412/1000 [1:26:50<2:03:55, 12.65s/it][Succeeded / Failed / Skipped / Total] 214 / 195 / 3 / 412:  41%|████▏     | 413/1000 [1:27:03<2:03:43, 12.65s/it][Succeeded / Failed / Skipped / Total] 215 / 195 / 3 / 413:  41%|████▏     | 413/1000 [1:27:03<2:03:43, 12.65s/it][Succeeded / Failed / Skipped / Total] 215 / 195 / 3 / 413:  41%|████▏     | 414/1000 [1:27:05<2:03:16, 12.62s/it][Succeeded / Failed / Skipped / Total] 216 / 195 / 3 / 414:  41%|████▏     | 414/1000 [1:27:05<2:03:16, 12.62s/it][Succeeded / Failed / Skipped / Total] 216 / 195 / 3 / 414:  42%|████▏     | 415/1000 [1:27:23<2:03:10, 12.63s/it][Succeeded / Failed / Skipped / Total] 217 / 195 / 3 / 415:  42%|████▏     | 415/1000 [1:27:23<2:03:10, 12.63s/it][Succeeded / Failed / Skipped / Total] 217 / 195 / 3 / 415:  42%|████▏     | 416/1000 [1:27:30<2:02:50, 12.62s/it][Succeeded / Failed / Skipped / Total] 217 / 196 / 3 / 416:  42%|████▏     | 416/1000 [1:27:30<2:02:50, 12.62s/it][Succeeded / Failed / Skipped / Total] 217 / 196 / 3 / 416:  42%|████▏     | 417/1000 [1:27:37<2:02:29, 12.61s/it]Register user processor . --> Entry point for the main thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[main]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[main]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
Registers a user - interest user processor . --> Call ProcessorProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[call]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
Dispatch a request command to user processor . --> Prints RpcRequestCommandCommandCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[console]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 415 ---------------------------------------------
Deserialize request command . --> Call RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[call]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 416 ---------------------------------------------
Sets the value of the specified attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[element]] , Object value ) { return attributes . putIfAbsent ( [[element]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 196 / 3 / 417:  42%|████▏     | 417/1000 [1:27:37<2:02:29, 12.61s/it][Succeeded / Failed / Skipped / Total] 218 / 196 / 3 / 417:  42%|████▏     | 418/1000 [1:27:43<2:02:08, 12.59s/it][Succeeded / Failed / Skipped / Total] 219 / 196 / 3 / 418:  42%|████▏     | 418/1000 [1:27:43<2:02:08, 12.59s/it][Succeeded / Failed / Skipped / Total] 219 / 196 / 3 / 418:  42%|████▏     | 419/1000 [1:27:54<2:01:53, 12.59s/it][Succeeded / Failed / Skipped / Total] 220 / 196 / 3 / 419:  42%|████▏     | 419/1000 [1:27:54<2:01:53, 12.59s/it][Succeeded / Failed / Skipped / Total] 220 / 196 / 3 / 419:  42%|████▏     | 420/1000 [1:27:54<2:01:23, 12.56s/it][Succeeded / Failed / Skipped / Total] 220 / 197 / 3 / 420:  42%|████▏     | 420/1000 [1:27:54<2:01:23, 12.56s/it][Succeeded / Failed / Skipped / Total] 220 / 197 / 3 / 420:  42%|████▏     | 421/1000 [1:28:03<2:01:06, 12.55s/it][Succeeded / Failed / Skipped / Total] 221 / 197 / 3 / 421:  42%|████▏     | 421/1000 [1:28:03<2:01:06, 12.55s/it][Succeeded / Failed / Skipped / Total] 221 / 197 / 3 / 421:  42%|████▏     | 422/1000 [1:28:12<2:00:49, 12.54s/it]Pre - process the remoting context . --> Called when a request command is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( cmd . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( cmd . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[c]] ( RemotingContext [[context]] , RpcRequestCommand cmd , long currentTimestamp ) { [[context]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[context]] . setTimeout ( cmd . getTimeout ( ) ) ; [[context]] . setRpcCommandType ( cmd . getType ( ) ) ; [[context]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Debug logging . --> After received command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[after]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
Process a message . --> Execute a single thread --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T [[msg]] , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , [[msg]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T [[g]] , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , [[g]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 420 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[save]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[ln]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[talk]] . getChannel ( ) ) , [[ln]] . isSuccess ( ) , [[ln]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[talk]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 421 ---------------------------------------------
Log timeout log . --> alert a warning --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[channel]] = channelCtx . channel ( ) ; if ( null != [[channel]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[channel]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[alert]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[link]] = channelCtx . channel ( ) ; if ( null != [[link]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[link]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 197 / 3 / 422:  42%|████▏     | 422/1000 [1:28:12<2:00:49, 12.54s/it][Succeeded / Failed / Skipped / Total] 222 / 197 / 3 / 422:  42%|████▏     | 423/1000 [1:28:20<2:00:29, 12.53s/it][Succeeded / Failed / Skipped / Total] 223 / 197 / 3 / 423:  42%|████▏     | 423/1000 [1:28:20<2:00:29, 12.53s/it][Succeeded / Failed / Skipped / Total] 223 / 197 / 3 / 423:  42%|████▏     | 424/1000 [1:28:35<2:00:21, 12.54s/it][Succeeded / Failed / Skipped / Total] 224 / 197 / 3 / 424:  42%|████▏     | 424/1000 [1:28:35<2:00:21, 12.54s/it][Succeeded / Failed / Skipped / Total] 224 / 197 / 3 / 424:  42%|████▎     | 425/1000 [1:28:54<2:00:16, 12.55s/it][Succeeded / Failed / Skipped / Total] 225 / 197 / 3 / 425:  42%|████▎     | 425/1000 [1:28:54<2:00:16, 12.55s/it][Succeeded / Failed / Skipped / Total] 225 / 197 / 3 / 425:  43%|████▎     | 426/1000 [1:29:06<2:00:04, 12.55s/it][Succeeded / Failed / Skipped / Total] 226 / 197 / 3 / 426:  43%|████▎     | 426/1000 [1:29:06<2:00:04, 12.55s/it][Succeeded / Failed / Skipped / Total] 226 / 197 / 3 / 426:  43%|████▎     | 427/1000 [1:29:10<1:59:40, 12.53s/it][Succeeded / Failed / Skipped / Total] 227 / 197 / 3 / 427:  43%|████▎     | 427/1000 [1:29:10<1:59:40, 12.53s/it][Succeeded / Failed / Skipped / Total] 227 / 197 / 3 / 427:  43%|████▎     | 428/1000 [1:29:10<1:59:11, 12.50s/it]To byte value . --> Return the cardinality of the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[card]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 423 ---------------------------------------------
Convert an integer to a BitSet --> creates a BitSet --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[alice]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Stops the background thread . --> Stops the connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[after]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Adds a new reconnect task . --> Boot the connection --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url [[url]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[url]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[boot]] ( Url [[bucket]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[bucket]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
To remoting command . --> Execute a procedure --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[procedure]] ( Object [[id]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[id]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 427 ---------------------------------------------
Filter connections --> Fix connection status --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[fix]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 198 / 3 / 428:  43%|████▎     | 428/1000 [1:29:10<1:59:11, 12.50s/it][Succeeded / Failed / Skipped / Total] 227 / 198 / 3 / 428:  43%|████▎     | 429/1000 [1:29:28<1:59:05, 12.51s/it][Succeeded / Failed / Skipped / Total] 228 / 198 / 3 / 429:  43%|████▎     | 429/1000 [1:29:28<1:59:05, 12.51s/it][Succeeded / Failed / Skipped / Total] 228 / 198 / 3 / 429:  43%|████▎     | 430/1000 [1:29:35<1:58:45, 12.50s/it][Succeeded / Failed / Skipped / Total] 229 / 198 / 3 / 430:  43%|████▎     | 430/1000 [1:29:35<1:58:45, 12.50s/it][Succeeded / Failed / Skipped / Total] 229 / 198 / 3 / 430:  43%|████▎     | 431/1000 [1:29:44<1:58:27, 12.49s/it]This method is called when the command is received . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[failure]] , final RemotingCommand [[button]] ) { try { [[failure]] . getChannel ( ) . writeAndFlush ( [[button]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[failure]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[failure]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[failure]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 429 ---------------------------------------------
Gets a boolean property . --> Gets a boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[base]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[base]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 430 ---------------------------------------------
Monitor the current connection pools . --> Perform the monitoring of the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[serviceOffConnections]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[serviceOffConnections]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[path]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , [[path]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[path]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[path]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 431 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 198 / 3 / 431:  43%|████▎     | 431/1000 [1:29:44<1:58:27, 12.49s/it][Succeeded / Failed / Skipped / Total] 230 / 198 / 3 / 431:  43%|████▎     | 432/1000 [1:29:54<1:58:12, 12.49s/it][Succeeded / Failed / Skipped / Total] 231 / 198 / 3 / 432:  43%|████▎     | 432/1000 [1:29:54<1:58:12, 12.49s/it][Succeeded / Failed / Skipped / Total] 231 / 198 / 3 / 432:  43%|████▎     | 433/1000 [1:30:00<1:57:52, 12.47s/it][Succeeded / Failed / Skipped / Total] 232 / 198 / 3 / 433:  43%|████▎     | 433/1000 [1:30:00<1:57:52, 12.47s/it][Succeeded / Failed / Skipped / Total] 232 / 198 / 3 / 433:  43%|████▎     | 434/1000 [1:30:01<1:57:24, 12.45s/it][Succeeded / Failed / Skipped / Total] 232 / 198 / 4 / 434:  43%|████▎     | 434/1000 [1:30:01<1:57:24, 12.45s/it][Succeeded / Failed / Skipped / Total] 232 / 198 / 4 / 434:  44%|████▎     | 435/1000 [1:30:18<1:57:17, 12.46s/it][Succeeded / Failed / Skipped / Total] 233 / 198 / 4 / 435:  44%|████▎     | 435/1000 [1:30:18<1:57:17, 12.46s/it][Succeeded / Failed / Skipped / Total] 233 / 198 / 4 / 435:  44%|████▎     | 436/1000 [1:30:26<1:56:59, 12.45s/it][Succeeded / Failed / Skipped / Total] 233 / 199 / 4 / 436:  44%|████▎     | 436/1000 [1:30:26<1:56:59, 12.45s/it][Succeeded / Failed / Skipped / Total] 233 / 199 / 4 / 436:  44%|████▎     | 437/1000 [1:30:41<1:56:50, 12.45s/it][Succeeded / Failed / Skipped / Total] 234 / 199 / 4 / 437:  44%|████▎     | 437/1000 [1:30:41<1:56:50, 12.45s/it][Succeeded / Failed / Skipped / Total] 234 / 199 / 4 / 437:  44%|████▍     | 438/1000 [1:30:54<1:56:38, 12.45s/it][Succeeded / Failed / Skipped / Total] 235 / 199 / 4 / 438:  44%|████▍     | 438/1000 [1:30:54<1:56:38, 12.45s/it][Succeeded / Failed / Skipped / Total] 235 / 199 / 4 / 438:  44%|████▍     | 439/1000 [1:31:02<1:56:19, 12.44s/it]Check for fresh select connections --> helper method to handle --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[foo]] ( Connection [[index]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[index]] ) { if ( [[index]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[index]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[index]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[index]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[index]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 432 ---------------------------------------------
Checks if request timeout . --> Returns boolean array . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[array]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 433 ---------------------------------------------
Log an info log . --> Logs information about a reference --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String [[addr]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[addr]] ) ) { logger . info ( [[format]] , [[addr]] ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[reference]] , String [[index]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[index]] ) ) { logger . info ( [[reference]] , [[index]] ) ; } else { logger . info ( [[reference]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Get a property --> Returns a dependency --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[dependency]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[dependency]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 436 ---------------------------------------------
Gets a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[test]] ( String [[hash]] ) { return StringUtils . isBlank ( [[hash]] ) ? null : this . [[it]] . get ( [[hash]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 437 ---------------------------------------------
Returns a random connection . --> Random agent . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[size]] = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( [[size]] ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[agent]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[vector]] = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( [[vector]] ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 438 ---------------------------------------------
Attempt to resolve a response object from a remote address . --> protected private for testing --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[protection]] ( ResponseCommand [[array]] , String addr ) throws RemotingException { preProcess ( [[array]] , addr ) ; if ( [[array]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[array]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[array]] . getResponseStatus ( ) , addr , [[array]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[array]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[array]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 439 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 199 / 4 / 439:  44%|████▍     | 439/1000 [1:31:02<1:56:19, 12.44s/it][Succeeded / Failed / Skipped / Total] 236 / 199 / 4 / 439:  44%|████▍     | 440/1000 [1:31:15<1:56:08, 12.44s/it][Succeeded / Failed / Skipped / Total] 236 / 200 / 4 / 440:  44%|████▍     | 440/1000 [1:31:15<1:56:08, 12.44s/it][Succeeded / Failed / Skipped / Total] 236 / 200 / 4 / 440:  44%|████▍     | 441/1000 [1:31:21<1:55:48, 12.43s/it][Succeeded / Failed / Skipped / Total] 237 / 200 / 4 / 441:  44%|████▍     | 441/1000 [1:31:21<1:55:48, 12.43s/it][Succeeded / Failed / Skipped / Total] 237 / 200 / 4 / 441:  44%|████▍     | 442/1000 [1:31:33<1:55:35, 12.43s/it][Succeeded / Failed / Skipped / Total] 238 / 200 / 4 / 442:  44%|████▍     | 442/1000 [1:31:33<1:55:35, 12.43s/it][Succeeded / Failed / Skipped / Total] 238 / 200 / 4 / 442:  44%|████▍     | 443/1000 [1:31:52<1:55:31, 12.44s/it]Deserialize response object . --> Extract rpcResponseCommand from list --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[list]] ) throws CodecException { RpcResponseCommand [[object]] = ( RpcResponseCommand ) [[list]] ; [[object]] . deserialize ( ) ; return [[object]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
Executes the invoke with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( [[requestId]] ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[g]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[g]] ) ; final int [[u]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[g]] = conn . removeInvokeFuture ( [[u]] ) ; if ( [[g]] != null ) { [[g]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[g]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[g]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[u]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[u]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 441 ---------------------------------------------
Converts a responseCommand to a Throwable . --> Utility for testing --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[use]] ( ResponseCommand [[response]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[response]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Print connection trace log --> A convenience method for debugging . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[a]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 200 / 4 / 443:  44%|████▍     | 443/1000 [1:31:52<1:55:31, 12.44s/it][Succeeded / Failed / Skipped / Total] 239 / 200 / 4 / 443:  44%|████▍     | 444/1000 [1:31:56<1:55:07, 12.42s/it][Succeeded / Failed / Skipped / Total] 240 / 200 / 4 / 444:  44%|████▍     | 444/1000 [1:31:56<1:55:07, 12.42s/it][Succeeded / Failed / Skipped / Total] 240 / 200 / 4 / 444:  44%|████▍     | 445/1000 [1:32:21<1:55:11, 12.45s/it][Succeeded / Failed / Skipped / Total] 241 / 200 / 4 / 445:  44%|████▍     | 445/1000 [1:32:21<1:55:11, 12.45s/it][Succeeded / Failed / Skipped / Total] 241 / 200 / 4 / 445:  45%|████▍     | 446/1000 [1:32:34<1:54:59, 12.45s/it][Succeeded / Failed / Skipped / Total] 242 / 200 / 4 / 446:  45%|████▍     | 446/1000 [1:32:34<1:54:59, 12.45s/it][Succeeded / Failed / Skipped / Total] 242 / 200 / 4 / 446:  45%|████▍     | 447/1000 [1:32:38<1:54:36, 12.44s/it][Succeeded / Failed / Skipped / Total] 242 / 201 / 4 / 447:  45%|████▍     | 447/1000 [1:32:38<1:54:36, 12.44s/it][Succeeded / Failed / Skipped / Total] 242 / 201 / 4 / 447:  45%|████▍     | 448/1000 [1:32:40<1:54:11, 12.41s/it][Succeeded / Failed / Skipped / Total] 242 / 202 / 4 / 448:  45%|████▍     | 448/1000 [1:32:40<1:54:11, 12.41s/it][Succeeded / Failed / Skipped / Total] 242 / 202 / 4 / 448:  45%|████▍     | 449/1000 [1:33:03<1:54:12, 12.44s/it][Succeeded / Failed / Skipped / Total] 242 / 203 / 4 / 449:  45%|████▍     | 449/1000 [1:33:03<1:54:12, 12.44s/it][Succeeded / Failed / Skipped / Total] 242 / 203 / 4 / 449:  45%|████▌     | 450/1000 [1:33:22<1:54:07, 12.45s/it][Succeeded / Failed / Skipped / Total] 242 / 204 / 4 / 450:  45%|████▌     | 450/1000 [1:33:22<1:54:07, 12.45s/it][Succeeded / Failed / Skipped / Total] 242 / 204 / 4 / 450:  45%|████▌     | 451/1000 [1:33:24<1:53:42, 12.43s/it]Creates a new event loop group with nThreads . --> Creates new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[driver]] ( int nThreads , ThreadFactory [[application]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[application]] ) : new NioEventLoopGroup ( nThreads , [[application]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
Print error message --> Convert an RpcResponseCommand to a string . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[call]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 445 ---------------------------------------------
Parses the remote address from a channel . --> Return control data from a function --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[control]] ( final Channel [[function]] ) { if ( null == [[function]] ) { return StringUtils . EMPTY ; } final SocketAddress [[field]] = [[function]] . remoteAddress ( ) ; return doParse ( [[field]] != null ? [[field]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Convert a Throwable to an RpcServerException . --> Creates RpcServerException with HttpServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String [[errMsg]] ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , [[errMsg]] ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[se]] ( Throwable [[program]] , String [[h]] ) { String [[h]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[program]] . getClass ( ) . getName ( ) , [[program]] . getMessage ( ) , [[h]] ) ; RpcServerException e = new RpcServerException ( [[h]] ) ; e . setStackTrace ( [[program]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 447 ---------------------------------------------
Parses the local address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[hello]] ( final Channel [[data]] ) { if ( null == [[data]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[data]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Retrieve the remote address from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[operator]] ( final Channel [[selector]] ) { if ( null == [[selector]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[selector]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the remote hostname of the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[execute]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the remote port of the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[loop]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[channel]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[channel]] != null ) { return [[channel]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 205 / 4 / 451:  45%|████▌     | 451/1000 [1:33:24<1:53:42, 12.43s/it][Succeeded / Failed / Skipped / Total] 243 / 205 / 4 / 452:  45%|████▌     | 452/1000 [1:33:24<1:53:14, 12.40s/it][Succeeded / Failed / Skipped / Total] 243 / 205 / 4 / 452:  45%|████▌     | 453/1000 [1:33:36<1:53:02, 12.40s/it][Succeeded / Failed / Skipped / Total] 244 / 205 / 4 / 453:  45%|████▌     | 453/1000 [1:33:36<1:53:02, 12.40s/it][Succeeded / Failed / Skipped / Total] 244 / 205 / 4 / 453:  45%|████▌     | 454/1000 [1:33:41<1:52:40, 12.38s/it][Succeeded / Failed / Skipped / Total] 245 / 205 / 4 / 454:  45%|████▌     | 454/1000 [1:33:41<1:52:40, 12.38s/it][Succeeded / Failed / Skipped / Total] 245 / 205 / 4 / 454:  46%|████▌     | 455/1000 [1:33:58<1:52:34, 12.39s/it][Succeeded / Failed / Skipped / Total] 246 / 205 / 4 / 455:  46%|████▌     | 455/1000 [1:33:58<1:52:34, 12.39s/it][Succeeded / Failed / Skipped / Total] 246 / 205 / 4 / 455:  46%|████▌     | 456/1000 [1:34:12<1:52:23, 12.40s/it][Succeeded / Failed / Skipped / Total] 246 / 206 / 4 / 456:  46%|████▌     | 456/1000 [1:34:12<1:52:23, 12.40s/it][Succeeded / Failed / Skipped / Total] 246 / 206 / 4 / 456:  46%|████▌     | 457/1000 [1:34:14<1:51:58, 12.37s/it][Succeeded / Failed / Skipped / Total] 246 / 207 / 4 / 457:  46%|████▌     | 457/1000 [1:34:14<1:51:58, 12.37s/it][Succeeded / Failed / Skipped / Total] 246 / 207 / 4 / 457:  46%|████▌     | 458/1000 [1:34:31<1:51:52, 12.38s/it][Succeeded / Failed / Skipped / Total] 247 / 207 / 4 / 458:  46%|████▌     | 458/1000 [1:34:31<1:51:52, 12.38s/it][Succeeded / Failed / Skipped / Total] 247 / 207 / 4 / 458:  46%|████▌     | 459/1000 [1:34:33<1:51:26, 12.36s/it][Succeeded / Failed / Skipped / Total] 248 / 207 / 4 / 459:  46%|████▌     | 459/1000 [1:34:33<1:51:26, 12.36s/it][Succeeded / Failed / Skipped / Total] 248 / 207 / 4 / 459:  46%|████▌     | 460/1000 [1:34:44<1:51:13, 12.36s/it]Returns the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[console]] ( final Channel [[mode]] ) { if ( null == [[mode]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[mode]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Retrieves the local IP address of the channel . --> Get x address --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[x]] ( final Channel [[access]] ) { if ( null == [[access]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[a]] = ( InetSocketAddress ) [[access]] . localAddress ( ) ; if ( [[a]] != null ) { return [[a]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Add a connection --> Adds an exception to the pool . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[exception]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 454 ---------------------------------------------
Returns a connection . --> Gets the current list of connections . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[array]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Remove and close the connection --> Remove and close the given length . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[length]] ) { if ( null == [[length]] ) { return ; } boolean [[m]] = this . conns . remove ( [[length]] ) ; if ( [[m]] ) { [[length]] . decreaseRef ( ) ; } if ( [[length]] . noRef ( ) ) { [[length]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Get the custom serializer for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[a]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[a]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Parse an address to a host . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress addr = [[addrs]] . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[hello]] ( SocketAddress [[machine]] ) { final InetSocketAddress [[vector]] = ( InetSocketAddress ) [[machine]] ; if ( [[vector]] != null ) { InetAddress addr = [[vector]] . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 458 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long [[initialDelay]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[initialDelay]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long [[date]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[date]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Register a custom serializer for a class . --> Call CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[call]] ( String [[flag]] , CustomSerializer [[true]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[flag]] , [[true]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[flag]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 460 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 208 / 4 / 460:  46%|████▌     | 460/1000 [1:34:44<1:51:13, 12.36s/it][Succeeded / Failed / Skipped / Total] 248 / 208 / 4 / 460:  46%|████▌     | 461/1000 [1:35:00<1:51:05, 12.37s/it][Succeeded / Failed / Skipped / Total] 249 / 208 / 4 / 461:  46%|████▌     | 461/1000 [1:35:00<1:51:05, 12.37s/it][Succeeded / Failed / Skipped / Total] 249 / 208 / 4 / 461:  46%|████▌     | 462/1000 [1:35:01<1:50:38, 12.34s/it][Succeeded / Failed / Skipped / Total] 249 / 209 / 4 / 462:  46%|████▌     | 462/1000 [1:35:01<1:50:38, 12.34s/it][Succeeded / Failed / Skipped / Total] 249 / 209 / 4 / 462:  46%|████▋     | 463/1000 [1:35:01<1:50:12, 12.31s/it][Succeeded / Failed / Skipped / Total] 249 / 209 / 5 / 463:  46%|████▋     | 463/1000 [1:35:01<1:50:12, 12.31s/it][Succeeded / Failed / Skipped / Total] 249 / 209 / 5 / 463:  46%|████▋     | 464/1000 [1:35:03<1:49:48, 12.29s/it][Succeeded / Failed / Skipped / Total] 250 / 209 / 5 / 464:  46%|████▋     | 464/1000 [1:35:03<1:49:48, 12.29s/it][Succeeded / Failed / Skipped / Total] 250 / 209 / 5 / 464:  46%|████▋     | 465/1000 [1:35:16<1:49:37, 12.29s/it][Succeeded / Failed / Skipped / Total] 251 / 209 / 5 / 465:  46%|████▋     | 465/1000 [1:35:16<1:49:37, 12.29s/it][Succeeded / Failed / Skipped / Total] 251 / 209 / 5 / 465:  47%|████▋     | 466/1000 [1:35:19<1:49:14, 12.27s/it][Succeeded / Failed / Skipped / Total] 252 / 209 / 5 / 466:  47%|████▋     | 466/1000 [1:35:19<1:49:14, 12.27s/it][Succeeded / Failed / Skipped / Total] 252 / 209 / 5 / 466:  47%|████▋     | 467/1000 [1:35:23<1:48:52, 12.26s/it][Succeeded / Failed / Skipped / Total] 253 / 209 / 5 / 467:  47%|████▋     | 467/1000 [1:35:23<1:48:52, 12.26s/it][Succeeded / Failed / Skipped / Total] 253 / 209 / 5 / 467:  47%|████▋     | 468/1000 [1:35:26<1:48:29, 12.24s/it]Returns the custom serializer for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[list]] ( CommandCode [[engine]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[engine]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
Returns a frame for the given opcode . --> Returns the framing data . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[only]] ) { if ( [[only]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[only]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 462 ---------------------------------------------
Registers a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[test]] ( CommandCode [[nt]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[nt]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[nt]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 463 ---------------------------------------------
try to batch --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 464 ---------------------------------------------
Init write buffer water mark --> Alarm alarm --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[alarm]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[call]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 465 ---------------------------------------------
Validate UTF8 . --> Call close frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[call]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 466 ---------------------------------------------
Update the message payload . --> Adds line information . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[line]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Check if the remote address is connected . --> Answer for an anonymous user . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[answer]] ( String [[anonymous]] ) { Url url = this . [[hello]] . addressParser . parse ( [[anonymous]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 468 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 209 / 5 / 468:  47%|████▋     | 468/1000 [1:35:26<1:48:29, 12.24s/it][Succeeded / Failed / Skipped / Total] 254 / 209 / 5 / 468:  47%|████▋     | 469/1000 [1:35:44<1:48:23, 12.25s/it][Succeeded / Failed / Skipped / Total] 255 / 209 / 5 / 469:  47%|████▋     | 469/1000 [1:35:44<1:48:23, 12.25s/it][Succeeded / Failed / Skipped / Total] 255 / 209 / 5 / 469:  47%|████▋     | 470/1000 [1:35:50<1:48:04, 12.23s/it][Succeeded / Failed / Skipped / Total] 256 / 209 / 5 / 470:  47%|████▋     | 470/1000 [1:35:50<1:48:04, 12.23s/it][Succeeded / Failed / Skipped / Total] 256 / 209 / 5 / 470:  47%|████▋     | 471/1000 [1:35:54<1:47:43, 12.22s/it][Succeeded / Failed / Skipped / Total] 257 / 209 / 5 / 471:  47%|████▋     | 471/1000 [1:35:54<1:47:43, 12.22s/it][Succeeded / Failed / Skipped / Total] 257 / 209 / 5 / 471:  47%|████▋     | 472/1000 [1:36:06<1:47:31, 12.22s/it][Succeeded / Failed / Skipped / Total] 258 / 209 / 5 / 472:  47%|████▋     | 472/1000 [1:36:06<1:47:31, 12.22s/it][Succeeded / Failed / Skipped / Total] 258 / 209 / 5 / 472:  47%|████▋     | 473/1000 [1:36:11<1:47:10, 12.20s/it][Succeeded / Failed / Skipped / Total] 259 / 209 / 5 / 473:  47%|████▋     | 473/1000 [1:36:11<1:47:10, 12.20s/it][Succeeded / Failed / Skipped / Total] 259 / 209 / 5 / 473:  47%|████▋     | 474/1000 [1:36:21<1:46:55, 12.20s/it][Succeeded / Failed / Skipped / Total] 260 / 209 / 5 / 474:  47%|████▋     | 474/1000 [1:36:21<1:46:55, 12.20s/it][Succeeded / Failed / Skipped / Total] 260 / 209 / 5 / 474:  48%|████▊     | 475/1000 [1:36:33<1:46:43, 12.20s/it][Succeeded / Failed / Skipped / Total] 261 / 209 / 5 / 475:  48%|████▊     | 475/1000 [1:36:33<1:46:43, 12.20s/it][Succeeded / Failed / Skipped / Total] 261 / 209 / 5 / 475:  48%|████▊     | 476/1000 [1:36:37<1:46:21, 12.18s/it]Set the error code . --> Add a new item . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[add]] ( int [[size]] ) { this . code = [[size]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 469 ---------------------------------------------
Generate final key . --> Encode the password . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[exit]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 470 ---------------------------------------------
Checks if a requested protocol is acceptable . --> List handshake state . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[list]] ( String requestedProtocol ) { for ( IProtocol [[f]] : knownProtocols ) { if ( [[f]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[f]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
Translate single frame length limit . --> Begin payload . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[begin]] ( long [[word]] ) throws LimitExceededException { if ( [[word]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[word]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[word]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[word]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 472 ---------------------------------------------
Translate single frame size . --> Translate single frame . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int [[realpacketsize]] ) throws IncompleteException { if ( [[maxpacketsize]] < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[data]] , int [[reg]] ) throws IncompleteException { if ( [[data]] < [[reg]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[reg]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 473 ---------------------------------------------
Log runtime exception . --> Handles websocket error event . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[assignment]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 474 ---------------------------------------------
Processes a continuous and notFin frame . --> Call handler method --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , Framedata [[tion]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[tion]] ) ; } else if ( [[tion]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[tion]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 475 ---------------------------------------------
Process frame binary data . --> Fix frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[fix]] ( WebSocketImpl [[loop]] , Framedata [[ct]] ) { try { [[loop]] . getWebSocketListener ( ) . onWebsocketMessage ( [[loop]] , [[ct]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[loop]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
[Succeeded / Failed / Skipped / Total] 262 / 209 / 5 / 476:  48%|████▊     | 476/1000 [1:36:37<1:46:21, 12.18s/it][Succeeded / Failed / Skipped / Total] 262 / 209 / 5 / 476:  48%|████▊     | 477/1000 [1:36:52<1:46:12, 12.19s/it][Succeeded / Failed / Skipped / Total] 262 / 210 / 5 / 477:  48%|████▊     | 477/1000 [1:36:52<1:46:12, 12.19s/it][Succeeded / Failed / Skipped / Total] 262 / 210 / 5 / 477:  48%|████▊     | 478/1000 [1:36:53<1:45:49, 12.16s/it][Succeeded / Failed / Skipped / Total] 263 / 210 / 5 / 478:  48%|████▊     | 478/1000 [1:36:53<1:45:49, 12.16s/it][Succeeded / Failed / Skipped / Total] 263 / 210 / 5 / 478:  48%|████▊     | 479/1000 [1:37:04<1:45:35, 12.16s/it][Succeeded / Failed / Skipped / Total] 264 / 210 / 5 / 479:  48%|████▊     | 479/1000 [1:37:04<1:45:35, 12.16s/it][Succeeded / Failed / Skipped / Total] 264 / 210 / 5 / 479:  48%|████▊     | 480/1000 [1:37:12<1:45:18, 12.15s/it][Succeeded / Failed / Skipped / Total] 265 / 210 / 5 / 480:  48%|████▊     | 480/1000 [1:37:12<1:45:18, 12.15s/it][Succeeded / Failed / Skipped / Total] 265 / 210 / 5 / 480:  48%|████▊     | 481/1000 [1:37:21<1:45:03, 12.14s/it][Succeeded / Failed / Skipped / Total] 266 / 210 / 5 / 481:  48%|████▊     | 481/1000 [1:37:21<1:45:03, 12.14s/it][Succeeded / Failed / Skipped / Total] 266 / 210 / 5 / 481:  48%|████▊     | 482/1000 [1:37:29<1:44:46, 12.14s/it]--------------------------------------------- Result 476 ---------------------------------------------
Process a frame text . --> Gets payload . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[get]] ( WebSocketImpl [[frame]] , Framedata frame ) throws InvalidDataException { try { [[frame]] . getWebSocketListener ( ) . onWebsocketMessage ( [[frame]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[frame]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
Handles a continuous frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[print]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Check if the given frame is not completed . --> Execute GIF frames --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[execute]] ( Framedata [[ult]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[ult]] ; addToBufferList ( [[ult]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Process a closed frame . --> Handle close . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int [[code]] = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; [[code]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[ne]] ) { int [[time]] = CloseFrame . NOCODE ; String reason = "" ; if ( [[ne]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[ne]] ; [[time]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 480 ---------------------------------------------
Checks if buffer limit is exceeded . --> Block until we ve reached . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[block]] ( ) throws LimitExceededException { long [[d]] = getByteBufferListSize ( ) ; if ( [[d]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[d]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 481 ---------------------------------------------
Translate handshake http server . --> Internal method . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[ant]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 482 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 210 / 5 / 482:  48%|████▊     | 482/1000 [1:37:29<1:44:46, 12.14s/it][Succeeded / Failed / Skipped / Total] 267 / 210 / 5 / 482:  48%|████▊     | 483/1000 [1:37:38<1:44:30, 12.13s/it][Succeeded / Failed / Skipped / Total] 268 / 210 / 5 / 483:  48%|████▊     | 483/1000 [1:37:38<1:44:30, 12.13s/it][Succeeded / Failed / Skipped / Total] 268 / 210 / 5 / 483:  48%|████▊     | 484/1000 [1:37:45<1:44:13, 12.12s/it][Succeeded / Failed / Skipped / Total] 269 / 210 / 5 / 484:  48%|████▊     | 484/1000 [1:37:45<1:44:13, 12.12s/it][Succeeded / Failed / Skipped / Total] 269 / 210 / 5 / 484:  48%|████▊     | 485/1000 [1:37:46<1:43:49, 12.10s/it][Succeeded / Failed / Skipped / Total] 269 / 211 / 5 / 485:  48%|████▊     | 485/1000 [1:37:46<1:43:49, 12.10s/it][Succeeded / Failed / Skipped / Total] 269 / 211 / 5 / 485:  49%|████▊     | 486/1000 [1:37:54<1:43:33, 12.09s/it][Succeeded / Failed / Skipped / Total] 270 / 211 / 5 / 486:  49%|████▊     | 486/1000 [1:37:54<1:43:33, 12.09s/it][Succeeded / Failed / Skipped / Total] 270 / 211 / 5 / 486:  49%|████▊     | 487/1000 [1:37:57<1:43:10, 12.07s/it][Succeeded / Failed / Skipped / Total] 271 / 211 / 5 / 487:  49%|████▊     | 487/1000 [1:37:57<1:43:10, 12.07s/it][Succeeded / Failed / Skipped / Total] 271 / 211 / 5 / 487:  49%|████▉     | 488/1000 [1:38:12<1:43:02, 12.07s/it][Succeeded / Failed / Skipped / Total] 272 / 211 / 5 / 488:  49%|████▉     | 488/1000 [1:38:12<1:43:02, 12.07s/it][Succeeded / Failed / Skipped / Total] 272 / 211 / 5 / 488:  49%|████▉     | 489/1000 [1:38:12<1:42:37, 12.05s/it]Translate handshake http client . --> Internal method . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[ant]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 483 ---------------------------------------------
Decode handshake data . --> Ensure handshake data . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[assume]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 484 ---------------------------------------------
Closes the connection . --> Add invalid data exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[add]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 485 ---------------------------------------------
Returns the total size of the buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[result]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 486 ---------------------------------------------
Sends a close frame to the server . --> Add an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[add]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Get payload from byte buffers --> Function function . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[function]] ( ) throws LimitExceededException { long [[alt]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[alt]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[alt]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 488 ---------------------------------------------
Reset the connection . --> Alert the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[alert]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 489 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 211 / 5 / 489:  49%|████▉     | 489/1000 [1:38:12<1:42:37, 12.05s/it][Succeeded / Failed / Skipped / Total] 273 / 211 / 5 / 489:  49%|████▉     | 490/1000 [1:38:15<1:42:16, 12.03s/it][Succeeded / Failed / Skipped / Total] 273 / 212 / 5 / 490:  49%|████▉     | 490/1000 [1:38:15<1:42:16, 12.03s/it][Succeeded / Failed / Skipped / Total] 273 / 212 / 5 / 490:  49%|████▉     | 491/1000 [1:38:29<1:42:05, 12.03s/it][Succeeded / Failed / Skipped / Total] 274 / 212 / 5 / 491:  49%|████▉     | 491/1000 [1:38:29<1:42:05, 12.03s/it][Succeeded / Failed / Skipped / Total] 274 / 212 / 5 / 491:  49%|████▉     | 492/1000 [1:38:31<1:41:43, 12.02s/it][Succeeded / Failed / Skipped / Total] 275 / 212 / 5 / 492:  49%|████▉     | 492/1000 [1:38:31<1:41:43, 12.02s/it][Succeeded / Failed / Skipped / Total] 275 / 212 / 5 / 492:  49%|████▉     | 493/1000 [1:38:46<1:41:35, 12.02s/it][Succeeded / Failed / Skipped / Total] 276 / 212 / 5 / 493:  49%|████▉     | 493/1000 [1:38:46<1:41:35, 12.02s/it][Succeeded / Failed / Skipped / Total] 276 / 212 / 5 / 493:  49%|████▉     | 494/1000 [1:38:47<1:41:11, 12.00s/it][Succeeded / Failed / Skipped / Total] 277 / 212 / 5 / 494:  49%|████▉     | 494/1000 [1:38:47<1:41:11, 12.00s/it][Succeeded / Failed / Skipped / Total] 277 / 212 / 5 / 494:  50%|████▉     | 495/1000 [1:38:48<1:40:48, 11.98s/it][Succeeded / Failed / Skipped / Total] 278 / 212 / 5 / 495:  50%|████▉     | 495/1000 [1:38:48<1:40:48, 11.98s/it][Succeeded / Failed / Skipped / Total] 278 / 212 / 5 / 495:  50%|████▉     | 496/1000 [1:39:02<1:40:38, 11.98s/it]Connect read thread . --> Start connect read thread --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[host]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Sends text to the client . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[test]] ( String [[string]] ) { if ( [[string]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[test]] ( draft . createFrames ( [[string]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Generate HTTP response for an error . --> HTML file . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[file]] ( int [[a]] ) { String [[address]] ; switch ( [[a]] ) { case 404 : [[address]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[address]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[address]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[address]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[address]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
Sends the complete handshake . --> Initialize binary binary . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[bin]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
Start the connection lost timer . --> Chain chain . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[chain]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Stop the connection lost timer . --> E echo event . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[echo]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Get the port . --> Get queue . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[queue]] ( ) { int [[rs]] = uri . getPort ( ) ; if ( [[rs]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[rs]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 279 / 212 / 5 / 496:  50%|████▉     | 496/1000 [1:39:02<1:40:38, 11.98s/it][Succeeded / Failed / Skipped / Total] 279 / 212 / 5 / 496:  50%|████▉     | 497/1000 [1:39:06<1:40:18, 11.96s/it][Succeeded / Failed / Skipped / Total] 280 / 212 / 5 / 497:  50%|████▉     | 497/1000 [1:39:06<1:40:18, 11.96s/it][Succeeded / Failed / Skipped / Total] 280 / 212 / 5 / 497:  50%|████▉     | 498/1000 [1:39:22<1:40:10, 11.97s/it][Succeeded / Failed / Skipped / Total] 281 / 212 / 5 / 498:  50%|████▉     | 498/1000 [1:39:22<1:40:10, 11.97s/it][Succeeded / Failed / Skipped / Total] 281 / 212 / 5 / 498:  50%|████▉     | 499/1000 [1:39:24<1:39:47, 11.95s/it][Succeeded / Failed / Skipped / Total] 282 / 212 / 5 / 499:  50%|████▉     | 499/1000 [1:39:24<1:39:47, 11.95s/it][Succeeded / Failed / Skipped / Total] 282 / 212 / 5 / 499:  50%|█████     | 500/1000 [1:39:35<1:39:35, 11.95s/it][Succeeded / Failed / Skipped / Total] 283 / 212 / 5 / 500:  50%|█████     | 500/1000 [1:39:35<1:39:35, 11.95s/it][Succeeded / Failed / Skipped / Total] 283 / 212 / 5 / 500:  50%|█████     | 501/1000 [1:39:36<1:39:12, 11.93s/it][Succeeded / Failed / Skipped / Total] 284 / 212 / 5 / 501:  50%|█████     | 501/1000 [1:39:36<1:39:12, 11.93s/it][Succeeded / Failed / Skipped / Total] 284 / 212 / 5 / 501:  50%|█████     | 502/1000 [1:39:36<1:38:48, 11.91s/it]Cancels connection lost checker . --> Join checker . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[join]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Execute connection lost detection . --> Main method for testing purposes . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[main]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 498 ---------------------------------------------
Sets the connection lost timeout . --> Set timeout . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[websocketRunning]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[combined]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[skip]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 499 ---------------------------------------------
Restarts a timer that detects connection lost . --> Test for tests . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[test]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[length]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[length]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 500 ---------------------------------------------
Stop event . --> stop --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[i]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 501 ---------------------------------------------
This method is called when a client handshake is received . --> Version - specific version --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft [[draft]] , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[version]] ( WebSocket conn , Draft [[condition]] , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 502 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 212 / 6 / 502:  50%|█████     | 502/1000 [1:39:36<1:38:48, 11.91s/it][Succeeded / Failed / Skipped / Total] 284 / 212 / 6 / 502:  50%|█████     | 503/1000 [1:39:51<1:38:39, 11.91s/it][Succeeded / Failed / Skipped / Total] 284 / 213 / 6 / 503:  50%|█████     | 503/1000 [1:39:51<1:38:39, 11.91s/it][Succeeded / Failed / Skipped / Total] 284 / 213 / 6 / 503:  50%|█████     | 504/1000 [1:39:52<1:38:17, 11.89s/it][Succeeded / Failed / Skipped / Total] 285 / 213 / 6 / 504:  50%|█████     | 504/1000 [1:39:52<1:38:17, 11.89s/it][Succeeded / Failed / Skipped / Total] 285 / 213 / 6 / 504:  50%|█████     | 505/1000 [1:39:53<1:37:54, 11.87s/it][Succeeded / Failed / Skipped / Total] 286 / 213 / 6 / 505:  50%|█████     | 505/1000 [1:39:53<1:37:54, 11.87s/it][Succeeded / Failed / Skipped / Total] 286 / 213 / 6 / 505:  51%|█████     | 506/1000 [1:39:53<1:37:31, 11.85s/it][Succeeded / Failed / Skipped / Total] 286 / 213 / 7 / 506:  51%|█████     | 506/1000 [1:39:53<1:37:31, 11.85s/it][Succeeded / Failed / Skipped / Total] 286 / 213 / 7 / 506:  51%|█████     | 507/1000 [1:39:54<1:37:08, 11.82s/it][Succeeded / Failed / Skipped / Total] 286 / 214 / 7 / 507:  51%|█████     | 507/1000 [1:39:54<1:37:08, 11.82s/it][Succeeded / Failed / Skipped / Total] 286 / 214 / 7 / 507:  51%|█████     | 508/1000 [1:40:10<1:37:00, 11.83s/it][Succeeded / Failed / Skipped / Total] 287 / 214 / 7 / 508:  51%|█████     | 508/1000 [1:40:10<1:37:00, 11.83s/it][Succeeded / Failed / Skipped / Total] 287 / 214 / 7 / 508:  51%|█████     | 509/1000 [1:40:10<1:36:37, 11.81s/it]Do the next connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 503 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[call]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 504 ---------------------------------------------
Do a read . --> Call handler function . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[call]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Perform additional read . --> Add to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[add]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 506 ---------------------------------------------
Do a single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[pin]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 508 ---------------------------------------------
Shutdown the server . --> Starts processing . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[add]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 509 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 214 / 7 / 509:  51%|█████     | 509/1000 [1:40:10<1:36:37, 11.81s/it][Succeeded / Failed / Skipped / Total] 288 / 214 / 7 / 509:  51%|█████     | 510/1000 [1:40:10<1:36:15, 11.79s/it][Succeeded / Failed / Skipped / Total] 289 / 214 / 7 / 510:  51%|█████     | 510/1000 [1:40:10<1:36:15, 11.79s/it][Succeeded / Failed / Skipped / Total] 289 / 214 / 7 / 510:  51%|█████     | 511/1000 [1:40:19<1:35:59, 11.78s/it][Succeeded / Failed / Skipped / Total] 290 / 214 / 7 / 511:  51%|█████     | 511/1000 [1:40:19<1:35:59, 11.78s/it][Succeeded / Failed / Skipped / Total] 290 / 214 / 7 / 511:  51%|█████     | 512/1000 [1:40:25<1:35:43, 11.77s/it][Succeeded / Failed / Skipped / Total] 291 / 214 / 7 / 512:  51%|█████     | 512/1000 [1:40:25<1:35:43, 11.77s/it][Succeeded / Failed / Skipped / Total] 291 / 214 / 7 / 512:  51%|█████▏    | 513/1000 [1:40:30<1:35:24, 11.76s/it][Succeeded / Failed / Skipped / Total] 292 / 214 / 7 / 513:  51%|█████▏    | 513/1000 [1:40:30<1:35:24, 11.76s/it][Succeeded / Failed / Skipped / Total] 292 / 214 / 7 / 513:  51%|█████▏    | 514/1000 [1:40:35<1:35:06, 11.74s/it][Succeeded / Failed / Skipped / Total] 293 / 214 / 7 / 514:  51%|█████▏    | 514/1000 [1:40:35<1:35:06, 11.74s/it][Succeeded / Failed / Skipped / Total] 293 / 214 / 7 / 514:  52%|█████▏    | 515/1000 [1:40:43<1:34:51, 11.73s/it][Succeeded / Failed / Skipped / Total] 294 / 214 / 7 / 515:  52%|█████▏    | 515/1000 [1:40:43<1:34:51, 11.73s/it][Succeeded / Failed / Skipped / Total] 294 / 214 / 7 / 515:  52%|█████▏    | 516/1000 [1:40:44<1:34:29, 11.71s/it]Setup the selector and server thread . --> Create a new WebSocketSelector --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[add]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 510 ---------------------------------------------
Gets the socket . --> Get command from WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[command]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 511 ---------------------------------------------
Handle the write --> Call handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[call]] ( SelectionKey key ) throws IOException { WebSocketImpl [[input]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[input]] , [[input]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 512 ---------------------------------------------
Broadcasts the given data to all connected clients . --> Entity callback . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[after]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[after]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Broadcasts the given data to all clients . --> Broadcast database . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object [[data]] , Collection < WebSocket > clients ) { String sData = null ; if ( [[data]] instanceof String ) { sData = ( String ) [[data]] ; } ByteBuffer bData = null ; if ( [[data]] instanceof ByteBuffer ) { bData = ( ByteBuffer ) [[data]] ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object [[database]] , Collection < WebSocket > clients ) { String sData = null ; if ( [[database]] instanceof String ) { sData = ( String ) [[database]] ; } ByteBuffer bData = null ; if ( [[database]] instanceof ByteBuffer ) { bData = ( ByteBuffer ) [[database]] ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 514 ---------------------------------------------
Fill the frames . --> Called when a frame is created . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[c]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 515 ---------------------------------------------
Broadcasts a text to all connected clients . --> Broadcast agents . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[agent]] ( String [[main]] , Collection < WebSocket > clients ) { if ( [[main]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[main]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 516 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 295 / 214 / 7 / 516:  52%|█████▏    | 516/1000 [1:40:44<1:34:29, 11.71s/it][Succeeded / Failed / Skipped / Total] 295 / 214 / 7 / 516:  52%|█████▏    | 517/1000 [1:40:49<1:34:11, 11.70s/it][Succeeded / Failed / Skipped / Total] 296 / 214 / 7 / 517:  52%|█████▏    | 517/1000 [1:40:49<1:34:11, 11.70s/it][Succeeded / Failed / Skipped / Total] 296 / 214 / 7 / 517:  52%|█████▏    | 518/1000 [1:40:58<1:33:56, 11.69s/it][Succeeded / Failed / Skipped / Total] 297 / 214 / 7 / 518:  52%|█████▏    | 518/1000 [1:40:58<1:33:56, 11.69s/it][Succeeded / Failed / Skipped / Total] 297 / 214 / 7 / 518:  52%|█████▏    | 519/1000 [1:40:58<1:33:34, 11.67s/it][Succeeded / Failed / Skipped / Total] 298 / 214 / 7 / 519:  52%|█████▏    | 519/1000 [1:40:58<1:33:34, 11.67s/it][Succeeded / Failed / Skipped / Total] 298 / 214 / 7 / 519:  52%|█████▏    | 520/1000 [1:41:04<1:33:18, 11.66s/it][Succeeded / Failed / Skipped / Total] 299 / 214 / 7 / 520:  52%|█████▏    | 520/1000 [1:41:04<1:33:18, 11.66s/it][Succeeded / Failed / Skipped / Total] 299 / 214 / 7 / 520:  52%|█████▏    | 521/1000 [1:41:15<1:33:05, 11.66s/it][Succeeded / Failed / Skipped / Total] 300 / 214 / 7 / 521:  52%|█████▏    | 521/1000 [1:41:15<1:33:05, 11.66s/it][Succeeded / Failed / Skipped / Total] 300 / 214 / 7 / 521:  52%|█████▏    | 522/1000 [1:41:33<1:32:59, 11.67s/it][Succeeded / Failed / Skipped / Total] 300 / 215 / 7 / 522:  52%|█████▏    | 522/1000 [1:41:33<1:32:59, 11.67s/it][Succeeded / Failed / Skipped / Total] 300 / 215 / 7 / 522:  52%|█████▏    | 523/1000 [1:41:35<1:32:39, 11.65s/it][Succeeded / Failed / Skipped / Total] 301 / 215 / 7 / 523:  52%|█████▏    | 523/1000 [1:41:35<1:32:39, 11.65s/it][Succeeded / Failed / Skipped / Total] 301 / 215 / 7 / 523:  52%|█████▏    | 524/1000 [1:41:54<1:32:34, 11.67s/it][Succeeded / Failed / Skipped / Total] 301 / 216 / 7 / 524:  52%|█████▏    | 524/1000 [1:41:54<1:32:34, 11.67s/it][Succeeded / Failed / Skipped / Total] 301 / 216 / 7 / 524:  52%|█████▎    | 525/1000 [1:42:03<1:32:20, 11.66s/it][Succeeded / Failed / Skipped / Total] 302 / 216 / 7 / 525:  52%|█████▎    | 525/1000 [1:42:03<1:32:20, 11.66s/it][Succeeded / Failed / Skipped / Total] 302 / 216 / 7 / 525:  53%|█████▎    | 526/1000 [1:42:21<1:32:13, 11.68s/it]Transfer from source to dest --> Copies source into dest . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[buffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
Starts the entity manager factory . --> X persistence unit factory --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[x]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 518 ---------------------------------------------
Executes a transaction within a transaction . --> Ignore entity manager --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[ignore]] ( Consumer < EntityManager > block ) { [[ignore]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Convert the given arguments to a Java array . --> Loop over arguments . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[loop]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 520 ---------------------------------------------
Wraps the arguments in a List if necessary . --> Returns the index of the first element of the array --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[index]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 521 ---------------------------------------------
Gets the internationalized message . --> Exchange key with arguments --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[exchange]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 522 ---------------------------------------------
Gets the entity manager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[parameters]] ( String [[zero]] ) { EntityManagerFactory emf = emfs . get ( [[zero]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 523 ---------------------------------------------
Gets the translation . --> Convenient method for getting input values --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[input]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[get]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[get]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 524 ---------------------------------------------
Returns whether the translation for the specified key is defined . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[lang]] , String key ) { return messages . isDefinedAt ( key , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[d]] , String key ) { return messages . isDefinedAt ( key , [[d]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred message for this request . --> Thread --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[thread]] ( Http . RequestHeader [[foo]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[foo]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
[Succeeded / Failed / Skipped / Total] 303 / 216 / 7 / 526:  53%|█████▎    | 526/1000 [1:42:21<1:32:13, 11.68s/it][Succeeded / Failed / Skipped / Total] 303 / 216 / 7 / 526:  53%|█████▎    | 527/1000 [1:42:21<1:31:52, 11.65s/it][Succeeded / Failed / Skipped / Total] 303 / 216 / 8 / 527:  53%|█████▎    | 527/1000 [1:42:21<1:31:52, 11.65s/it][Succeeded / Failed / Skipped / Total] 303 / 216 / 8 / 527:  53%|█████▎    | 528/1000 [1:42:23<1:31:32, 11.64s/it][Succeeded / Failed / Skipped / Total] 303 / 217 / 8 / 528:  53%|█████▎    | 528/1000 [1:42:23<1:31:32, 11.64s/it][Succeeded / Failed / Skipped / Total] 303 / 217 / 8 / 528:  53%|█████▎    | 529/1000 [1:42:31<1:31:17, 11.63s/it][Succeeded / Failed / Skipped / Total] 304 / 217 / 8 / 529:  53%|█████▎    | 529/1000 [1:42:31<1:31:17, 11.63s/it][Succeeded / Failed / Skipped / Total] 304 / 217 / 8 / 529:  53%|█████▎    | 530/1000 [1:42:38<1:31:01, 11.62s/it][Succeeded / Failed / Skipped / Total] 305 / 217 / 8 / 530:  53%|█████▎    | 530/1000 [1:42:38<1:31:01, 11.62s/it][Succeeded / Failed / Skipped / Total] 305 / 217 / 8 / 530:  53%|█████▎    | 531/1000 [1:42:40<1:30:41, 11.60s/it][Succeeded / Failed / Skipped / Total] 306 / 217 / 8 / 531:  53%|█████▎    | 531/1000 [1:42:40<1:30:41, 11.60s/it][Succeeded / Failed / Skipped / Total] 306 / 217 / 8 / 531:  53%|█████▎    | 532/1000 [1:42:47<1:30:25, 11.59s/it][Succeeded / Failed / Skipped / Total] 307 / 217 / 8 / 532:  53%|█████▎    | 532/1000 [1:42:47<1:30:25, 11.59s/it][Succeeded / Failed / Skipped / Total] 307 / 217 / 8 / 532:  53%|█████▎    | 533/1000 [1:42:57<1:30:12, 11.59s/it][Succeeded / Failed / Skipped / Total] 308 / 217 / 8 / 533:  53%|█████▎    | 533/1000 [1:42:57<1:30:12, 11.59s/it][Succeeded / Failed / Skipped / Total] 308 / 217 / 8 / 533:  53%|█████▎    | 534/1000 [1:42:59<1:29:52, 11.57s/it][Succeeded / Failed / Skipped / Total] 308 / 218 / 8 / 534:  53%|█████▎    | 534/1000 [1:42:59<1:29:52, 11.57s/it][Succeeded / Failed / Skipped / Total] 308 / 218 / 8 / 534:  54%|█████▎    | 535/1000 [1:43:13<1:29:42, 11.58s/it][Succeeded / Failed / Skipped / Total] 308 / 219 / 8 / 535:  54%|█████▎    | 535/1000 [1:43:13<1:29:42, 11.58s/it][Succeeded / Failed / Skipped / Total] 308 / 219 / 8 / 535:  54%|█████▎    | 536/1000 [1:43:13<1:29:21, 11.56s/it][Succeeded / Failed / Skipped / Total] 309 / 219 / 8 / 536:  54%|█████▎    | 536/1000 [1:43:13<1:29:21, 11.56s/it][Succeeded / Failed / Skipped / Total] 309 / 219 / 8 / 536:  54%|█████▎    | 537/1000 [1:43:17<1:29:03, 11.54s/it][Succeeded / Failed / Skipped / Total] 309 / 220 / 8 / 537:  54%|█████▎    | 537/1000 [1:43:17<1:29:03, 11.54s/it][Succeeded / Failed / Skipped / Total] 309 / 220 / 8 / 537:  54%|█████▍    | 538/1000 [1:43:19<1:28:43, 11.52s/it][Succeeded / Failed / Skipped / Total] 310 / 220 / 8 / 538:  54%|█████▍    | 538/1000 [1:43:19<1:28:43, 11.52s/it][Succeeded / Failed / Skipped / Total] 310 / 220 / 8 / 538:  54%|█████▍    | 539/1000 [1:43:28<1:28:30, 11.52s/it]--------------------------------------------- Result 526 ---------------------------------------------
Define the Guice binding . --> Specify the module methods --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[method]] ( play . api . inject . Module ... modules ) { return [[method]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 527 ---------------------------------------------
Sets the REPLACCE --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Selects the preferred messages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[thread]] ( Collection < Lang > candidates ) { Seq < Lang > [[reference]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[reference]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 529 ---------------------------------------------
Specify the bindings of the given modules . --> Return a new instance of this class --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[builder]] ( GuiceableModule ... [[extension]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[extension]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Set the language in the given result . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[run]] ( Result result , Lang [[cookies]] ) { return messages . setLang ( result . asScala ( ) , [[cookies]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Specifies the module overrides . --> Adds a Guice to the Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[dicate]] ( play . api . inject . Module ... modules ) { return [[dicate]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Specifies the Guice . --> Custom extension --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... bindings ) { return [[overrides]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[extension]] ( play . api . inject . Binding < ? > ... bindings ) { return [[extension]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 533 ---------------------------------------------
Execute the call . --> from interface --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[ee]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 534 ---------------------------------------------
Configures this class overrides . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[broken]] ( GuiceableModule ... [[test]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[test]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 535 ---------------------------------------------
Assumes that the binding is in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Disable module modules . --> Returns a copy of this executor --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[base]] ( Class < ? > ... [[bus]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[bus]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 537 ---------------------------------------------
Gets an existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[fix]] ( String [[a]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[a]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Factory method for creating a tuple . --> Static factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > Tuple < [[A]] , B > Tuple ( [[A]] a , B b ) { return new Tuple < [[A]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[2a]] , B > Tuple < [[2a]] , B > Tuple ( [[2a]] a , B b ) { return new Tuple < [[2a]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 220 / 8 / 539:  54%|█████▍    | 539/1000 [1:43:28<1:28:30, 11.52s/it][Succeeded / Failed / Skipped / Total] 311 / 220 / 8 / 539:  54%|█████▍    | 540/1000 [1:43:30<1:28:10, 11.50s/it][Succeeded / Failed / Skipped / Total] 312 / 220 / 8 / 540:  54%|█████▍    | 540/1000 [1:43:30<1:28:10, 11.50s/it][Succeeded / Failed / Skipped / Total] 312 / 220 / 8 / 540:  54%|█████▍    | 541/1000 [1:44:02<1:28:16, 11.54s/it][Succeeded / Failed / Skipped / Total] 312 / 221 / 8 / 541:  54%|█████▍    | 541/1000 [1:44:02<1:28:16, 11.54s/it][Succeeded / Failed / Skipped / Total] 312 / 221 / 8 / 541:  54%|█████▍    | 542/1000 [1:44:11<1:28:02, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 222 / 8 / 542:  54%|█████▍    | 542/1000 [1:44:11<1:28:02, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 222 / 8 / 542:  54%|█████▍    | 543/1000 [1:44:36<1:28:02, 11.56s/it][Succeeded / Failed / Skipped / Total] 312 / 223 / 8 / 543:  54%|█████▍    | 543/1000 [1:44:36<1:28:02, 11.56s/it][Succeeded / Failed / Skipped / Total] 312 / 224 / 8 / 544:  54%|█████▍    | 544/1000 [1:44:36<1:27:40, 11.54s/it][Succeeded / Failed / Skipped / Total] 312 / 224 / 8 / 544:  55%|█████▍    | 545/1000 [1:44:37<1:27:20, 11.52s/it][Succeeded / Failed / Skipped / Total] 312 / 225 / 8 / 545:  55%|█████▍    | 545/1000 [1:44:37<1:27:20, 11.52s/it][Succeeded / Failed / Skipped / Total] 312 / 226 / 8 / 546:  55%|█████▍    | 546/1000 [1:44:46<1:27:07, 11.51s/it][Succeeded / Failed / Skipped / Total] 312 / 226 / 8 / 546:  55%|█████▍    | 547/1000 [1:45:03<1:26:59, 11.52s/it][Succeeded / Failed / Skipped / Total] 312 / 227 / 8 / 547:  55%|█████▍    | 547/1000 [1:45:03<1:26:59, 11.52s/it][Succeeded / Failed / Skipped / Total] 312 / 227 / 8 / 547:  55%|█████▍    | 548/1000 [1:45:28<1:26:59, 11.55s/it]Create a tuple with five values . --> Factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[basic]] < A , B , C , D , E > [[basic]] ( A a , B b , C c , D d , E e ) { return new [[basic]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 540 ---------------------------------------------
Convert execution context to Executor --> Execute procedure --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[procedure]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Inject ByteString into ByteString --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[handler]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[handler]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new JPAConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[wizard]] ( String [[bucket]] , String [[var]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[bucket]] , [[var]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 543 ---------------------------------------------
Registers a constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a default jpa config . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[cs]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[cs]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Gets a flow through a JSON node . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[box]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[box]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[configuration]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[configuration]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[configuration]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of the given constraint validator class . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 228 / 8 / 548:  55%|█████▍    | 548/1000 [1:45:28<1:26:59, 11.55s/it][Succeeded / Failed / Skipped / Total] 312 / 228 / 8 / 548:  55%|█████▍    | 549/1000 [1:45:29<1:26:39, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 229 / 8 / 549:  55%|█████▍    | 549/1000 [1:45:29<1:26:39, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 229 / 8 / 549:  55%|█████▌    | 550/1000 [1:45:42<1:26:29, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 230 / 8 / 550:  55%|█████▌    | 550/1000 [1:45:42<1:26:29, 11.53s/it][Succeeded / Failed / Skipped / Total] 312 / 230 / 8 / 550:  55%|█████▌    | 551/1000 [1:45:43<1:26:08, 11.51s/it][Succeeded / Failed / Skipped / Total] 312 / 230 / 9 / 551:  55%|█████▌    | 551/1000 [1:45:43<1:26:08, 11.51s/it][Succeeded / Failed / Skipped / Total] 312 / 230 / 9 / 551:  55%|█████▌    | 552/1000 [1:46:00<1:26:01, 11.52s/it][Succeeded / Failed / Skipped / Total] 313 / 230 / 9 / 552:  55%|█████▌    | 552/1000 [1:46:00<1:26:01, 11.52s/it][Succeeded / Failed / Skipped / Total] 313 / 231 / 9 / 553:  55%|█████▌    | 553/1000 [1:46:00<1:25:40, 11.50s/it][Succeeded / Failed / Skipped / Total] 313 / 231 / 9 / 553:  55%|█████▌    | 554/1000 [1:46:11<1:25:29, 11.50s/it][Succeeded / Failed / Skipped / Total] 313 / 232 / 9 / 554:  55%|█████▌    | 554/1000 [1:46:11<1:25:29, 11.50s/it][Succeeded / Failed / Skipped / Total] 313 / 232 / 9 / 554:  56%|█████▌    | 555/1000 [1:46:37<1:25:29, 11.53s/it]Handles a client error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[end]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 549 ---------------------------------------------
Handle a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[after]] ( RequestHeader [[list]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[list]] . method ( ) , [[list]] . uri ( ) , message , [[list]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 550 ---------------------------------------------
Handle unauthorized action . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[error]] ( RequestHeader [[man]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[man]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 551 ---------------------------------------------
Log an error --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Converts a throwable to a useful exception . --> Used for tests --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[test]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 553 ---------------------------------------------
Gets matching method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[procedure]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 554 ---------------------------------------------
Handles not found response . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[before]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 555 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 232 / 9 / 555:  56%|█████▌    | 555/1000 [1:46:37<1:25:29, 11.53s/it][Succeeded / Failed / Skipped / Total] 314 / 232 / 9 / 555:  56%|█████▌    | 556/1000 [1:46:44<1:25:14, 11.52s/it][Succeeded / Failed / Skipped / Total] 315 / 232 / 9 / 556:  56%|█████▌    | 556/1000 [1:46:44<1:25:14, 11.52s/it][Succeeded / Failed / Skipped / Total] 315 / 232 / 9 / 556:  56%|█████▌    | 557/1000 [1:46:48<1:24:56, 11.50s/it][Succeeded / Failed / Skipped / Total] 315 / 233 / 9 / 557:  56%|█████▌    | 557/1000 [1:46:48<1:24:56, 11.50s/it][Succeeded / Failed / Skipped / Total] 315 / 233 / 9 / 557:  56%|█████▌    | 558/1000 [1:47:17<1:24:59, 11.54s/it][Succeeded / Failed / Skipped / Total] 316 / 233 / 9 / 558:  56%|█████▌    | 558/1000 [1:47:17<1:24:59, 11.54s/it][Succeeded / Failed / Skipped / Total] 316 / 233 / 9 / 558:  56%|█████▌    | 559/1000 [1:47:24<1:24:44, 11.53s/it][Succeeded / Failed / Skipped / Total] 317 / 233 / 9 / 559:  56%|█████▌    | 559/1000 [1:47:24<1:24:44, 11.53s/it][Succeeded / Failed / Skipped / Total] 317 / 233 / 9 / 559:  56%|█████▌    | 560/1000 [1:47:39<1:24:35, 11.53s/it][Succeeded / Failed / Skipped / Total] 318 / 233 / 9 / 560:  56%|█████▌    | 560/1000 [1:47:39<1:24:35, 11.53s/it][Succeeded / Failed / Skipped / Total] 318 / 233 / 9 / 560:  56%|█████▌    | 561/1000 [1:48:23<1:24:49, 11.59s/it][Succeeded / Failed / Skipped / Total] 318 / 234 / 9 / 561:  56%|█████▌    | 561/1000 [1:48:23<1:24:49, 11.59s/it][Succeeded / Failed / Skipped / Total] 318 / 234 / 9 / 561:  56%|█████▌    | 562/1000 [1:48:33<1:24:36, 11.59s/it]Handles a server error . --> This method should only be called from the tests --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[include]] ( RequestHeader [[test]] , Throwable [[null]] ) { try { UsefulException [[method]] = throwableToUsefulException ( [[null]] ) ; logServerError ( [[test]] , [[method]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[test]] , [[method]] ) ; default : return onDevServerError ( [[test]] , [[method]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
This method is called when an error occurs . --> Handles command submission --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[command]] ( RequestHeader [[type]] , UsefulException [[field]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[field]] , [[type]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Called when a server error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[function]] ( RequestHeader request , UsefulException [[call]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[call]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a new BuildDocHandler from a directory and a directory . --> Construct Handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[construct]] ( File [[cap]] , JarFile jarFile , String base ) { return [[construct]] ( [[cap]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 559 ---------------------------------------------
Creates a doc handler from a directory . --> server --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[server]] ( File [[bus]] ) { FileRepository repo = new FilesystemRepository ( [[bus]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Consumes the data . --> Programmatic program --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[program]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a documentation handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String [[base]] ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[using]] ( JarFile [[type]] , String [[name]] ) { FileRepository repo = new JarRepository ( [[type]] , Option . apply ( [[name]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 318 / 235 / 9 / 562:  56%|█████▌    | 562/1000 [1:48:33<1:24:36, 11.59s/it][Succeeded / Failed / Skipped / Total] 318 / 235 / 9 / 562:  56%|█████▋    | 563/1000 [1:48:41<1:24:21, 11.58s/it][Succeeded / Failed / Skipped / Total] 319 / 235 / 9 / 563:  56%|█████▋    | 563/1000 [1:48:41<1:24:21, 11.58s/it][Succeeded / Failed / Skipped / Total] 319 / 235 / 9 / 563:  56%|█████▋    | 564/1000 [1:49:07<1:24:21, 11.61s/it][Succeeded / Failed / Skipped / Total] 319 / 236 / 9 / 564:  56%|█████▋    | 564/1000 [1:49:07<1:24:21, 11.61s/it][Succeeded / Failed / Skipped / Total] 319 / 236 / 9 / 564:  56%|█████▋    | 565/1000 [1:49:15<1:24:06, 11.60s/it][Succeeded / Failed / Skipped / Total] 319 / 237 / 9 / 565:  56%|█████▋    | 565/1000 [1:49:15<1:24:06, 11.60s/it][Succeeded / Failed / Skipped / Total] 319 / 237 / 9 / 565:  57%|█████▋    | 566/1000 [1:49:29<1:23:57, 11.61s/it][Succeeded / Failed / Skipped / Total] 320 / 237 / 9 / 566:  57%|█████▋    | 566/1000 [1:49:29<1:23:57, 11.61s/it][Succeeded / Failed / Skipped / Total] 320 / 237 / 9 / 566:  57%|█████▋    | 567/1000 [1:49:35<1:23:41, 11.60s/it][Succeeded / Failed / Skipped / Total] 320 / 238 / 9 / 567:  57%|█████▋    | 567/1000 [1:49:35<1:23:41, 11.60s/it][Succeeded / Failed / Skipped / Total] 320 / 238 / 9 / 567:  57%|█████▋    | 568/1000 [1:49:48<1:23:30, 11.60s/it][Succeeded / Failed / Skipped / Total] 321 / 238 / 9 / 568:  57%|█████▋    | 568/1000 [1:49:48<1:23:30, 11.60s/it][Succeeded / Failed / Skipped / Total] 321 / 238 / 9 / 568:  57%|█████▋    | 569/1000 [1:49:48<1:23:10, 11.58s/it][Succeeded / Failed / Skipped / Total] 321 / 238 / 10 / 569:  57%|█████▋    | 569/1000 [1:49:48<1:23:10, 11.58s/it][Succeeded / Failed / Skipped / Total] 321 / 238 / 10 / 569:  57%|█████▋    | 570/1000 [1:50:18<1:23:13, 11.61s/it][Succeeded / Failed / Skipped / Total] 321 / 239 / 10 / 570:  57%|█████▋    | 570/1000 [1:50:18<1:23:13, 11.61s/it][Succeeded / Failed / Skipped / Total] 321 / 239 / 10 / 570:  57%|█████▋    | 571/1000 [1:50:26<1:22:58, 11.60s/it]Creates a BuildDocHandler from the given resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[s]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 563 ---------------------------------------------
Create HttpEntity from content . --> HttpEntity method --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String [[charset]] ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[ator]] ( Content [[array]] , String [[method]] ) { String body ; if ( [[array]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Creates a documentation handler for the given directory and jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; FileRepository [[manualRepo]] ; if ( fallbackToJar ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { [[manualRepo]] = fileRepo ; } return new DocumentationHandler ( [[manualRepo]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[call]] ( File directory , JarFile [[view]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[view]] , Option . apply ( base ) ) ; FileRepository [[file]] ; if ( fallbackToJar ) { [[file]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { [[file]] = fileRepo ; } return new DocumentationHandler ( [[file]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 565 ---------------------------------------------
Create an HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[declaration]] ( String [[data]] , String [[body]] ) { return new Strict ( ByteString . fromString ( [[data]] , [[body]] ) , Optional . of ( "text/plain; charset=" + [[body]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 566 ---------------------------------------------
Creates a chunked entity . --> Create an HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[command]] ( Source < ByteString , ? > [[domain]] , Optional < String > [[array]] ) { return new Chunked ( [[domain]] . map ( HttpChunk . Chunk :: new ) , [[array]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a Result with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[declaration]] ( int status , JsonNode [[f]] ) { return [[declaration]] ( [[declaration]] , [[f]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a result . --> Create an error response --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[error]] ( int [[title]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[error]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 569 ---------------------------------------------
Get user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Select the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[suite]] ( Collection < Lang > [[max]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[max]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 571 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 322 / 239 / 10 / 571:  57%|█████▋    | 571/1000 [1:50:26<1:22:58, 11.60s/it][Succeeded / Failed / Skipped / Total] 322 / 239 / 10 / 571:  57%|█████▋    | 572/1000 [1:50:27<1:22:38, 11.59s/it][Succeeded / Failed / Skipped / Total] 322 / 240 / 10 / 572:  57%|█████▋    | 572/1000 [1:50:27<1:22:38, 11.59s/it][Succeeded / Failed / Skipped / Total] 322 / 240 / 10 / 572:  57%|█████▋    | 573/1000 [1:50:34<1:22:24, 11.58s/it][Succeeded / Failed / Skipped / Total] 322 / 241 / 10 / 573:  57%|█████▋    | 573/1000 [1:50:34<1:22:24, 11.58s/it][Succeeded / Failed / Skipped / Total] 322 / 241 / 10 / 573:  57%|█████▋    | 574/1000 [1:50:42<1:22:09, 11.57s/it][Succeeded / Failed / Skipped / Total] 322 / 242 / 10 / 574:  57%|█████▋    | 574/1000 [1:50:42<1:22:09, 11.57s/it][Succeeded / Failed / Skipped / Total] 322 / 242 / 10 / 574:  57%|█████▊    | 575/1000 [1:50:44<1:21:50, 11.56s/it][Succeeded / Failed / Skipped / Total] 323 / 242 / 10 / 575:  57%|█████▊    | 575/1000 [1:50:44<1:21:50, 11.56s/it][Succeeded / Failed / Skipped / Total] 323 / 242 / 10 / 575:  58%|█████▊    | 576/1000 [1:50:51<1:21:36, 11.55s/it][Succeeded / Failed / Skipped / Total] 324 / 242 / 10 / 576:  58%|█████▊    | 576/1000 [1:50:51<1:21:36, 11.55s/it][Succeeded / Failed / Skipped / Total] 324 / 242 / 10 / 576:  58%|█████▊    | 577/1000 [1:50:56<1:21:19, 11.54s/it][Succeeded / Failed / Skipped / Total] 324 / 243 / 10 / 577:  58%|█████▊    | 577/1000 [1:50:56<1:21:19, 11.54s/it][Succeeded / Failed / Skipped / Total] 324 / 243 / 10 / 577:  58%|█████▊    | 578/1000 [1:51:08<1:21:09, 11.54s/it][Succeeded / Failed / Skipped / Total] 325 / 243 / 10 / 578:  58%|█████▊    | 578/1000 [1:51:08<1:21:09, 11.54s/it][Succeeded / Failed / Skipped / Total] 325 / 243 / 10 / 578:  58%|█████▊    | 579/1000 [1:51:20<1:20:57, 11.54s/it][Succeeded / Failed / Skipped / Total] 325 / 244 / 10 / 579:  58%|█████▊    | 579/1000 [1:51:20<1:20:57, 11.54s/it][Succeeded / Failed / Skipped / Total] 325 / 244 / 10 / 579:  58%|█████▊    | 580/1000 [1:51:25<1:20:41, 11.53s/it][Succeeded / Failed / Skipped / Total] 326 / 244 / 10 / 580:  58%|█████▊    | 580/1000 [1:51:25<1:20:41, 11.53s/it][Succeeded / Failed / Skipped / Total] 326 / 244 / 10 / 580:  58%|█████▊    | 581/1000 [1:51:28<1:20:23, 11.51s/it][Succeeded / Failed / Skipped / Total] 327 / 244 / 10 / 581:  58%|█████▊    | 581/1000 [1:51:28<1:20:23, 11.51s/it][Succeeded / Failed / Skipped / Total] 327 / 244 / 10 / 581:  58%|█████▊    | 582/1000 [1:51:41<1:20:12, 11.51s/it]Sends a response with status code . --> Convenience method to send an accessor response to the client --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[ator]] ( int status , JsonNode [[tic]] , JsonEncoding [[specification]] ) { if ( [[tic]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[ator]] ( [[ator]] ) . sendJson ( [[tic]] , [[specification]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a result for a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , File [[content]] ) { return status ( status , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result status ( int status , File [[data]] ) { return status ( status , [[data]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[extension]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 574 ---------------------------------------------
Sends an input stream to the given status code . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[level]] , long contentLength ) { return status ( status ) . sendInputStream ( [[level]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the absolute URL of the given request . --> Returns the accept for the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[accept]] ( Http . Request request ) { return [[accept]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the web socket URL for the given request . --> Get the var from the request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[var]] ( Http . Request request ) { return [[var]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 577 ---------------------------------------------
Creates a new call with the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[procedure]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 578 ---------------------------------------------
Creates a new server with given router --> Executes HTTP command --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[command]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 579 ---------------------------------------------
Returns a connection function that wraps the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[collection]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[collection]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Deserialize a JsonNode from a JsonNode . --> Creates an object from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[e]] > [[e]] fromJson ( JsonNode json , Class < [[e]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Convert an object to JsonNode . --> Handler method handler --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[handler]] ( final Object [[function]] ) { try { return mapper ( ) . valueToTree ( [[function]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 328 / 244 / 10 / 582:  58%|█████▊    | 582/1000 [1:51:41<1:20:12, 11.51s/it][Succeeded / Failed / Skipped / Total] 328 / 244 / 10 / 582:  58%|█████▊    | 583/1000 [1:51:46<1:19:57, 11.50s/it][Succeeded / Failed / Skipped / Total] 328 / 245 / 10 / 583:  58%|█████▊    | 583/1000 [1:51:46<1:19:57, 11.50s/it][Succeeded / Failed / Skipped / Total] 328 / 245 / 10 / 583:  58%|█████▊    | 584/1000 [1:51:51<1:19:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 328 / 246 / 10 / 584:  58%|█████▊    | 584/1000 [1:51:51<1:19:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 328 / 246 / 10 / 584:  58%|█████▊    | 585/1000 [1:52:17<1:19:39, 11.52s/it][Succeeded / Failed / Skipped / Total] 328 / 247 / 10 / 585:  58%|█████▊    | 585/1000 [1:52:17<1:19:39, 11.52s/it][Succeeded / Failed / Skipped / Total] 328 / 247 / 10 / 585:  59%|█████▊    | 586/1000 [1:52:18<1:19:20, 11.50s/it][Succeeded / Failed / Skipped / Total] 329 / 247 / 10 / 586:  59%|█████▊    | 586/1000 [1:52:18<1:19:20, 11.50s/it][Succeeded / Failed / Skipped / Total] 329 / 247 / 10 / 586:  59%|█████▊    | 587/1000 [1:52:38<1:19:14, 11.51s/it][Succeeded / Failed / Skipped / Total] 330 / 247 / 10 / 587:  59%|█████▊    | 587/1000 [1:52:38<1:19:14, 11.51s/it][Succeeded / Failed / Skipped / Total] 330 / 247 / 10 / 587:  59%|█████▉    | 588/1000 [1:52:41<1:18:57, 11.50s/it][Succeeded / Failed / Skipped / Total] 331 / 247 / 10 / 588:  59%|█████▉    | 588/1000 [1:52:41<1:18:57, 11.50s/it][Succeeded / Failed / Skipped / Total] 331 / 247 / 10 / 588:  59%|█████▉    | 589/1000 [1:53:13<1:19:00, 11.53s/it][Succeeded / Failed / Skipped / Total] 331 / 248 / 10 / 589:  59%|█████▉    | 589/1000 [1:53:13<1:19:00, 11.53s/it][Succeeded / Failed / Skipped / Total] 331 / 248 / 10 / 589:  59%|█████▉    | 590/1000 [1:53:17<1:18:43, 11.52s/it]Parse the input stream . --> Driver on input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[driver]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Returns a function that returns the connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[base]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[time]] ) { try { block . run ( [[time]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 584 ---------------------------------------------
Parse a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[print]] ( String [[i]] ) { try { return mapper ( ) . readTree ( [[i]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Selects displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[draw]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[draw]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
Relative relative path --> Get c string from branch --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[c]] ( String [[branch]] , String [[base]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 587 ---------------------------------------------
Checks if two classes are assignable . --> Compare two class arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[python]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[python]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 588 ---------------------------------------------
Returns a tuple of displayable constraints . --> Returns the display name and attributes --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[end]] ( ConstraintDescriptor < ? > constraint ) { final Display [[tream]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[tream]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[tream]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 589 ---------------------------------------------
Parse cron expression --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[model]] ( String [[end]] ) { try { return new CronExpression ( [[end]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[end]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 332 / 248 / 10 / 590:  59%|█████▉    | 590/1000 [1:53:17<1:18:43, 11.52s/it][Succeeded / Failed / Skipped / Total] 333 / 248 / 10 / 591:  59%|█████▉    | 591/1000 [1:53:17<1:18:24, 11.50s/it][Succeeded / Failed / Skipped / Total] 333 / 248 / 10 / 591:  59%|█████▉    | 592/1000 [1:53:17<1:18:05, 11.48s/it][Succeeded / Failed / Skipped / Total] 333 / 248 / 11 / 592:  59%|█████▉    | 592/1000 [1:53:17<1:18:05, 11.48s/it][Succeeded / Failed / Skipped / Total] 333 / 249 / 11 / 593:  59%|█████▉    | 593/1000 [1:53:46<1:18:05, 11.51s/it][Succeeded / Failed / Skipped / Total] 333 / 249 / 11 / 593:  59%|█████▉    | 594/1000 [1:53:53<1:17:50, 11.50s/it][Succeeded / Failed / Skipped / Total] 333 / 250 / 11 / 594:  59%|█████▉    | 594/1000 [1:53:53<1:17:50, 11.50s/it][Succeeded / Failed / Skipped / Total] 333 / 250 / 11 / 594:  60%|█████▉    | 595/1000 [1:53:59<1:17:35, 11.49s/it][Succeeded / Failed / Skipped / Total] 334 / 250 / 11 / 595:  60%|█████▉    | 595/1000 [1:53:59<1:17:35, 11.49s/it][Succeeded / Failed / Skipped / Total] 334 / 250 / 11 / 595:  60%|█████▉    | 596/1000 [1:54:02<1:17:18, 11.48s/it][Succeeded / Failed / Skipped / Total] 335 / 250 / 11 / 596:  60%|█████▉    | 596/1000 [1:54:02<1:17:18, 11.48s/it][Succeeded / Failed / Skipped / Total] 335 / 250 / 11 / 596:  60%|█████▉    | 597/1000 [1:54:12<1:17:05, 11.48s/it][Succeeded / Failed / Skipped / Total] 335 / 251 / 11 / 597:  60%|█████▉    | 597/1000 [1:54:12<1:17:05, 11.48s/it][Succeeded / Failed / Skipped / Total] 335 / 251 / 11 / 597:  60%|█████▉    | 598/1000 [1:54:16<1:16:49, 11.47s/it][Succeeded / Failed / Skipped / Total] 336 / 251 / 11 / 598:  60%|█████▉    | 598/1000 [1:54:16<1:16:49, 11.47s/it][Succeeded / Failed / Skipped / Total] 336 / 251 / 11 / 598:  60%|█████▉    | 599/1000 [1:54:31<1:16:40, 11.47s/it][Succeeded / Failed / Skipped / Total] 337 / 251 / 11 / 599:  60%|█████▉    | 599/1000 [1:54:31<1:16:40, 11.47s/it][Succeeded / Failed / Skipped / Total] 337 / 251 / 11 / 599:  60%|██████    | 600/1000 [1:54:33<1:16:22, 11.46s/it]Calculate the interval for the given cron expression . --> Calculate cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[b1]] , Date [[b]] ) { try { return new CronExpression ( [[b1]] ) . getNextInterval ( [[b]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[b1]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 591 ---------------------------------------------
Returns canonical path . --> test the url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[test]] ( String url ) { String [ ] [[bishop]] = toSegments ( url ) ; Stack < String > [[test]] = new Stack <> ( ) ; for ( String comp : [[bishop]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[test]] . empty ( ) && [[test]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[test]] . push ( comp ) ; else [[test]] . pop ( ) ; } String [[bishop]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[bishop]] + [[test]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 592 ---------------------------------------------
Render todo --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Result TODO ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Configures the application with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[model]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Timeout the given completion stage . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[number]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[number]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[number]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 595 ---------------------------------------------
Stores a session in the session --> Used by tests --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String [[value]] ) { [[session]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[test]] ( String key , String [[command]] ) { [[test]] ( ) . put ( key , [[command]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 596 ---------------------------------------------
Sends a value to flash --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[key]] , String value ) { flash ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[array]] , String value ) { flash ( ) . put ( [[array]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a binding key that satisfies the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[list]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Returns a binding key for the given annotation . --> Converts a BindingKey to a Java BindingKey --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[flow]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Converts this binding to a Java binding . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[security]] ( final Class < ? extends T > [[client]] ) { return underlying . to ( [[client]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 252 / 11 / 600:  60%|██████    | 600/1000 [1:54:33<1:16:22, 11.46s/it][Succeeded / Failed / Skipped / Total] 337 / 252 / 11 / 600:  60%|██████    | 601/1000 [1:54:44<1:16:10, 11.46s/it][Succeeded / Failed / Skipped / Total] 337 / 253 / 11 / 601:  60%|██████    | 601/1000 [1:54:44<1:16:10, 11.46s/it][Succeeded / Failed / Skipped / Total] 337 / 253 / 11 / 601:  60%|██████    | 602/1000 [1:54:45<1:15:52, 11.44s/it][Succeeded / Failed / Skipped / Total] 338 / 253 / 11 / 602:  60%|██████    | 602/1000 [1:54:45<1:15:52, 11.44s/it][Succeeded / Failed / Skipped / Total] 338 / 253 / 11 / 602:  60%|██████    | 603/1000 [1:54:49<1:15:35, 11.42s/it][Succeeded / Failed / Skipped / Total] 339 / 253 / 11 / 603:  60%|██████    | 603/1000 [1:54:49<1:15:35, 11.42s/it][Succeeded / Failed / Skipped / Total] 339 / 253 / 11 / 603:  60%|██████    | 604/1000 [1:54:58<1:15:23, 11.42s/it][Succeeded / Failed / Skipped / Total] 340 / 253 / 11 / 604:  60%|██████    | 604/1000 [1:54:58<1:15:23, 11.42s/it][Succeeded / Failed / Skipped / Total] 340 / 253 / 11 / 604:  60%|██████    | 605/1000 [1:55:03<1:15:07, 11.41s/it][Succeeded / Failed / Skipped / Total] 341 / 253 / 11 / 605:  60%|██████    | 605/1000 [1:55:03<1:15:07, 11.41s/it][Succeeded / Failed / Skipped / Total] 341 / 253 / 11 / 605:  61%|██████    | 606/1000 [1:55:19<1:14:58, 11.42s/it][Succeeded / Failed / Skipped / Total] 341 / 254 / 11 / 606:  61%|██████    | 606/1000 [1:55:19<1:14:58, 11.42s/it][Succeeded / Failed / Skipped / Total] 341 / 254 / 11 / 606:  61%|██████    | 607/1000 [1:55:35<1:14:50, 11.43s/it][Succeeded / Failed / Skipped / Total] 342 / 254 / 11 / 607:  61%|██████    | 607/1000 [1:55:35<1:14:50, 11.43s/it][Succeeded / Failed / Skipped / Total] 342 / 254 / 11 / 607:  61%|██████    | 608/1000 [1:55:51<1:14:41, 11.43s/it][Succeeded / Failed / Skipped / Total] 342 / 255 / 11 / 608:  61%|██████    | 608/1000 [1:55:51<1:14:41, 11.43s/it][Succeeded / Failed / Skipped / Total] 342 / 255 / 11 / 608:  61%|██████    | 609/1000 [1:56:10<1:14:35, 11.45s/it]Convert this binding to a Java Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[of]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Creates an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[server]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java Binding . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[provider]] ( final Provider < ? extends T > [[i]] ) { return underlying . to ( [[i]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Convert this binding to a Java type . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[then]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 604 ---------------------------------------------
Converts this binding to a given key . --> Creates a new BindingKey --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[client]] ( final BindingKey < ? extends T > [[foo]] ) { return underlying . to ( [[foo]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of available languages . --> Return a list of available languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[file]] = Scala . asJava ( langs . availables ( ) ) ; return [[file]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a reader from a map of Evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[com]] . EvolutionsReader [[client]] ( Map < String , List < Evolution > > [[com]] ) { return new SimpleEvolutionsReader ( [[com]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Attaches a config loader to the application . --> Load a program --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[program]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 608 ---------------------------------------------
Returns an instance of the default evolution reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[evolution]] . EvolutionsReader [[file]] ( Evolution ... [[evolution]] ) { Map < String , List < Evolution > > [[database]] = new HashMap < String , List < Evolution > > ( ) ; [[database]] . put ( "default" , Arrays . asList ( [[evolution]] ) ) ; return fromMap ( [[database]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 343 / 255 / 11 / 609:  61%|██████    | 609/1000 [1:56:10<1:14:35, 11.45s/it][Succeeded / Failed / Skipped / Total] 343 / 255 / 11 / 609:  61%|██████    | 610/1000 [1:56:22<1:14:24, 11.45s/it][Succeeded / Failed / Skipped / Total] 344 / 255 / 11 / 610:  61%|██████    | 610/1000 [1:56:22<1:14:24, 11.45s/it][Succeeded / Failed / Skipped / Total] 344 / 255 / 11 / 610:  61%|██████    | 611/1000 [1:56:23<1:14:05, 11.43s/it][Succeeded / Failed / Skipped / Total] 344 / 256 / 11 / 611:  61%|██████    | 611/1000 [1:56:23<1:14:05, 11.43s/it][Succeeded / Failed / Skipped / Total] 344 / 256 / 11 / 611:  61%|██████    | 612/1000 [1:56:35<1:13:54, 11.43s/it][Succeeded / Failed / Skipped / Total] 344 / 257 / 11 / 612:  61%|██████    | 612/1000 [1:56:35<1:13:54, 11.43s/it][Succeeded / Failed / Skipped / Total] 344 / 257 / 11 / 612:  61%|██████▏   | 613/1000 [1:56:40<1:13:39, 11.42s/it][Succeeded / Failed / Skipped / Total] 345 / 257 / 11 / 613:  61%|██████▏   | 613/1000 [1:56:40<1:13:39, 11.42s/it][Succeeded / Failed / Skipped / Total] 345 / 257 / 11 / 613:  61%|██████▏   | 614/1000 [1:56:52<1:13:28, 11.42s/it][Succeeded / Failed / Skipped / Total] 346 / 257 / 11 / 614:  61%|██████▏   | 614/1000 [1:56:52<1:13:28, 11.42s/it][Succeeded / Failed / Skipped / Total] 346 / 257 / 11 / 614:  62%|██████▏   | 615/1000 [1:56:54<1:13:11, 11.41s/it][Succeeded / Failed / Skipped / Total] 347 / 257 / 11 / 615:  62%|██████▏   | 615/1000 [1:56:54<1:13:11, 11.41s/it][Succeeded / Failed / Skipped / Total] 347 / 257 / 11 / 615:  62%|██████▏   | 616/1000 [1:57:11<1:13:03, 11.41s/it][Succeeded / Failed / Skipped / Total] 348 / 257 / 11 / 616:  62%|██████▏   | 616/1000 [1:57:11<1:13:03, 11.41s/it][Succeeded / Failed / Skipped / Total] 348 / 258 / 11 / 617:  62%|██████▏   | 617/1000 [1:57:11<1:12:44, 11.40s/it][Succeeded / Failed / Skipped / Total] 348 / 258 / 11 / 617:  62%|██████▏   | 618/1000 [1:57:11<1:12:26, 11.38s/it]Attaches a module loader to the application . --> Load a Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration [[conf]] ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , [[conf]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[application]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration [[mode]] ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , [[mode]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Returns the preferred language for the given application . --> Select language from pool --> Socre: 1.0

[[[[Adv]]]]: public static Lang preferred ( Application [[app]] , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application [[files]] , List < Lang > [[pool]] ) { play . api . i18n . Langs langs = [[files]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[pool]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 611 ---------------------------------------------
Configure the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[test]] ( GuiceableModule ... [[com]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[com]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Resolves all executions of a database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[template]] , boolean autocommit , String schema ) { DatabaseEvolutions [[tree]] = new DatabaseEvolutions ( [[template]] . asScala ( ) , schema ) ; [[tree]] . evolve ( [[tree]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the given modules . --> Define an image --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[function]] ( com . google . inject . Module ... [[image]] ) { return [[function]] ( Guiceable . [[image]] ( [[image]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the application with the given bindings . --> Define a Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[console]] ( play . api . inject . Binding < ? > ... [[program]] ) { return [[console]] ( Guiceable . [[program]] ( [[program]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Loads the given modules . --> Define a Guice library --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[library]] ( play . api . inject . Module ... [[play]] ) { return [[library]] ( Guiceable . [[play]] ( [[play]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 616 ---------------------------------------------
Gets the current entity manager stack . --> FIXME_MANAGER --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[fix]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 617 ---------------------------------------------
Create a new Guice application builder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[version]] ( play . api . inject . guice . GuiceApplicationBuilder [[form]] ) { return new GuiceApplicationBuilder ( [[form]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 258 / 11 / 618:  62%|██████▏   | 618/1000 [1:57:11<1:12:26, 11.38s/it][Succeeded / Failed / Skipped / Total] 349 / 259 / 11 / 619:  62%|██████▏   | 619/1000 [1:57:25<1:12:16, 11.38s/it][Succeeded / Failed / Skipped / Total] 349 / 259 / 11 / 619:  62%|██████▏   | 620/1000 [1:57:58<1:12:18, 11.42s/it][Succeeded / Failed / Skipped / Total] 350 / 259 / 11 / 620:  62%|██████▏   | 620/1000 [1:57:58<1:12:18, 11.42s/it][Succeeded / Failed / Skipped / Total] 350 / 259 / 11 / 620:  62%|██████▏   | 621/1000 [1:58:17<1:12:11, 11.43s/it][Succeeded / Failed / Skipped / Total] 351 / 259 / 11 / 621:  62%|██████▏   | 621/1000 [1:58:17<1:12:11, 11.43s/it][Succeeded / Failed / Skipped / Total] 351 / 259 / 11 / 621:  62%|██████▏   | 622/1000 [1:58:23<1:11:56, 11.42s/it][Succeeded / Failed / Skipped / Total] 351 / 260 / 11 / 622:  62%|██████▏   | 622/1000 [1:58:23<1:11:56, 11.42s/it][Succeeded / Failed / Skipped / Total] 351 / 260 / 11 / 622:  62%|██████▏   | 623/1000 [1:58:38<1:11:47, 11.43s/it][Succeeded / Failed / Skipped / Total] 352 / 260 / 11 / 623:  62%|██████▏   | 623/1000 [1:58:38<1:11:47, 11.43s/it][Succeeded / Failed / Skipped / Total] 352 / 260 / 11 / 623:  62%|██████▏   | 624/1000 [1:58:39<1:11:29, 11.41s/it][Succeeded / Failed / Skipped / Total] 352 / 261 / 11 / 624:  62%|██████▏   | 624/1000 [1:58:39<1:11:29, 11.41s/it][Succeeded / Failed / Skipped / Total] 352 / 261 / 11 / 624:  62%|██████▎   | 625/1000 [1:58:46<1:11:15, 11.40s/it]Returns the current EntityManager . --> Return entity manager --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[line]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Encode a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[object]] ) { if ( [[object]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[object]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 620 ---------------------------------------------
Provides a flow using a splitter . --> Drop two tuples --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > [[bypassWith]] ( Function < [[In]] , F . Either < FlowIn , Out > > [[splitter]] , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < [[In]] > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[up]] , FlowIn , Out > Flow < [[up]] , Out , ? > [[drop]] ( Function < [[up]] , F . Either < FlowIn , Out > > [[below]] , Flow < FlowIn , Out , ? > flow ) { return [[drop]] ( Flow . < [[up]] > create ( ) . map ( [[below]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 621 ---------------------------------------------
Converts the default message arguments into an unmodifiable list . --> Transfers default message sources --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[transfer]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 622 ---------------------------------------------
Pushes or pops an entity manager to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[fix]] ( EntityManager em , boolean [[er]] ) { Deque < EntityManager > ems = this . emStack ( [[er]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 623 ---------------------------------------------
Disconnects a flow from two vertices --> Disconnects from vertices --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[FlowIn]] , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < [[FlowIn]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < [[FlowIn]] , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , [[outs]] , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < [[outs]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[empty]] , Flow < [[outs]] , Out , ? > [[b]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[outs]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 624 ---------------------------------------------
Returns global errors that are not empty . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[check]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 625 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 352 / 262 / 11 / 625:  62%|██████▎   | 625/1000 [1:58:46<1:11:15, 11.40s/it][Succeeded / Failed / Skipped / Total] 352 / 262 / 11 / 625:  63%|██████▎   | 626/1000 [1:58:54<1:11:02, 11.40s/it][Succeeded / Failed / Skipped / Total] 353 / 262 / 11 / 626:  63%|██████▎   | 626/1000 [1:58:54<1:11:02, 11.40s/it][Succeeded / Failed / Skipped / Total] 353 / 262 / 11 / 626:  63%|██████▎   | 627/1000 [1:58:55<1:10:44, 11.38s/it][Succeeded / Failed / Skipped / Total] 354 / 262 / 11 / 627:  63%|██████▎   | 627/1000 [1:58:55<1:10:44, 11.38s/it][Succeeded / Failed / Skipped / Total] 354 / 262 / 11 / 627:  63%|██████▎   | 628/1000 [1:59:03<1:10:31, 11.37s/it][Succeeded / Failed / Skipped / Total] 355 / 262 / 11 / 628:  63%|██████▎   | 628/1000 [1:59:03<1:10:31, 11.37s/it][Succeeded / Failed / Skipped / Total] 355 / 262 / 11 / 628:  63%|██████▎   | 629/1000 [1:59:11<1:10:17, 11.37s/it][Succeeded / Failed / Skipped / Total] 355 / 263 / 11 / 629:  63%|██████▎   | 629/1000 [1:59:11<1:10:17, 11.37s/it][Succeeded / Failed / Skipped / Total] 355 / 263 / 11 / 629:  63%|██████▎   | 630/1000 [1:59:11<1:10:00, 11.35s/it][Succeeded / Failed / Skipped / Total] 356 / 263 / 11 / 630:  63%|██████▎   | 630/1000 [1:59:11<1:10:00, 11.35s/it][Succeeded / Failed / Skipped / Total] 356 / 263 / 11 / 630:  63%|██████▎   | 631/1000 [1:59:13<1:09:43, 11.34s/it][Succeeded / Failed / Skipped / Total] 357 / 263 / 11 / 631:  63%|██████▎   | 631/1000 [1:59:13<1:09:43, 11.34s/it][Succeeded / Failed / Skipped / Total] 357 / 263 / 11 / 631:  63%|██████▎   | 632/1000 [1:59:21<1:09:30, 11.33s/it][Succeeded / Failed / Skipped / Total] 357 / 264 / 11 / 632:  63%|██████▎   | 632/1000 [1:59:21<1:09:30, 11.33s/it][Succeeded / Failed / Skipped / Total] 357 / 264 / 11 / 632:  63%|██████▎   | 633/1000 [1:59:23<1:09:13, 11.32s/it][Succeeded / Failed / Skipped / Total] 357 / 265 / 11 / 633:  63%|██████▎   | 633/1000 [1:59:23<1:09:13, 11.32s/it][Succeeded / Failed / Skipped / Total] 357 / 265 / 11 / 633:  63%|██████▎   | 634/1000 [2:00:00<1:09:16, 11.36s/it]Fills the form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[a]] ( T [[²]] ) { if ( [[²]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[²]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 626 ---------------------------------------------
Creates a flow from an actor --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[overflowStrategy]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[test]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[b]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[b]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 627 ---------------------------------------------
Returns the value for the given key . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[bus]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 628 ---------------------------------------------
Fills this form with the specified value . --> Returns a new DynamicForm --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[ator]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 629 ---------------------------------------------
Parses the given text into a new instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[body]] > [[body]] parse ( String text , Class < [[body]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 630 ---------------------------------------------
Converts a string into a type . --> Parse text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[command]] > [[command]] parse ( Field field , String text ) { return ( [[command]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Print object . --> Print a declaration --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[declaration]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[declaration]] . class ) ) { return conversion . convert ( t , [[declaration]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Print value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
Returns a representation of a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[method]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 634 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 266 / 11 / 634:  63%|██████▎   | 634/1000 [2:00:00<1:09:16, 11.36s/it][Succeeded / Failed / Skipped / Total] 357 / 266 / 11 / 634:  64%|██████▎   | 635/1000 [2:00:01<1:08:59, 11.34s/it][Succeeded / Failed / Skipped / Total] 358 / 266 / 11 / 635:  64%|██████▎   | 635/1000 [2:00:01<1:08:59, 11.34s/it][Succeeded / Failed / Skipped / Total] 358 / 266 / 11 / 635:  64%|██████▎   | 636/1000 [2:00:18<1:08:51, 11.35s/it][Succeeded / Failed / Skipped / Total] 359 / 266 / 11 / 636:  64%|██████▎   | 636/1000 [2:00:18<1:08:51, 11.35s/it][Succeeded / Failed / Skipped / Total] 359 / 266 / 11 / 636:  64%|██████▎   | 637/1000 [2:00:23<1:08:36, 11.34s/it][Succeeded / Failed / Skipped / Total] 359 / 267 / 11 / 637:  64%|██████▎   | 637/1000 [2:00:23<1:08:36, 11.34s/it][Succeeded / Failed / Skipped / Total] 359 / 267 / 11 / 637:  64%|██████▍   | 638/1000 [2:00:28<1:08:21, 11.33s/it]Get the message as JSON . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[line]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[j]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[j]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[j]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[j]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 635 ---------------------------------------------
Register converter . --> Convert to a conversion --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[conversion]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Returns a list of nodes that match the supplied node . --> Returns the age of the given node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[age]] ( String path , Object node ) { return [[age]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[k]] , Locale locale ) throws java . [[k]] . ParseException { return formatter . parse ( [[k]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 267 / 11 / 638:  64%|██████▍   | 638/1000 [2:00:28<1:08:21, 11.33s/it][Succeeded / Failed / Skipped / Total] 360 / 267 / 11 / 638:  64%|██████▍   | 639/1000 [2:00:52<1:08:17, 11.35s/it][Succeeded / Failed / Skipped / Total] 361 / 267 / 11 / 639:  64%|██████▍   | 639/1000 [2:00:52<1:08:17, 11.35s/it][Succeeded / Failed / Skipped / Total] 361 / 267 / 11 / 639:  64%|██████▍   | 640/1000 [2:00:52<1:07:59, 11.33s/it][Succeeded / Failed / Skipped / Total] 361 / 267 / 12 / 640:  64%|██████▍   | 640/1000 [2:00:52<1:07:59, 11.33s/it][Succeeded / Failed / Skipped / Total] 361 / 267 / 12 / 640:  64%|██████▍   | 641/1000 [2:00:59<1:07:45, 11.33s/it][Succeeded / Failed / Skipped / Total] 361 / 268 / 12 / 641:  64%|██████▍   | 641/1000 [2:00:59<1:07:45, 11.33s/it][Succeeded / Failed / Skipped / Total] 361 / 268 / 12 / 641:  64%|██████▍   | 642/1000 [2:01:02<1:07:29, 11.31s/it]Register a converter . --> Register custom converter --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[extension]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[api]] , TypeDescriptor targetType ) { return ( [[api]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[api]] , TypeDescriptor targetType ) { final A a = ( A ) [[api]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[api]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[api]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[api]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[api]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 639 ---------------------------------------------
Converts an array into a Seq . --> Executes an arbitrary sequence of arguments --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[execute]] ( T [ ] [[c]] ) { return [[execute]] ( java . util . Arrays . asList ( [[c]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
JacksonAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Convert a Java List to a Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[move]] ( java . util . List < T > [[request]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[request]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 362 / 268 / 12 / 642:  64%|██████▍   | 642/1000 [2:01:02<1:07:29, 11.31s/it][Succeeded / Failed / Skipped / Total] 362 / 268 / 12 / 642:  64%|██████▍   | 643/1000 [2:01:06<1:07:14, 11.30s/it][Succeeded / Failed / Skipped / Total] 363 / 268 / 12 / 643:  64%|██████▍   | 643/1000 [2:01:06<1:07:14, 11.30s/it][Succeeded / Failed / Skipped / Total] 363 / 268 / 12 / 643:  64%|██████▍   | 644/1000 [2:01:19<1:07:04, 11.30s/it][Succeeded / Failed / Skipped / Total] 364 / 268 / 12 / 644:  64%|██████▍   | 644/1000 [2:01:19<1:07:04, 11.30s/it][Succeeded / Failed / Skipped / Total] 364 / 268 / 12 / 644:  64%|██████▍   | 645/1000 [2:01:26<1:06:50, 11.30s/it][Succeeded / Failed / Skipped / Total] 364 / 269 / 12 / 645:  64%|██████▍   | 645/1000 [2:01:26<1:06:50, 11.30s/it][Succeeded / Failed / Skipped / Total] 364 / 269 / 12 / 645:  65%|██████▍   | 646/1000 [2:01:45<1:06:43, 11.31s/it][Succeeded / Failed / Skipped / Total] 365 / 269 / 12 / 646:  65%|██████▍   | 646/1000 [2:01:45<1:06:43, 11.31s/it][Succeeded / Failed / Skipped / Total] 365 / 269 / 12 / 646:  65%|██████▍   | 647/1000 [2:02:12<1:06:40, 11.33s/it][Succeeded / Failed / Skipped / Total] 366 / 269 / 12 / 647:  65%|██████▍   | 647/1000 [2:02:12<1:06:40, 11.33s/it][Succeeded / Failed / Skipped / Total] 366 / 269 / 12 / 647:  65%|██████▍   | 648/1000 [2:02:13<1:06:23, 11.32s/it][Succeeded / Failed / Skipped / Total] 366 / 270 / 12 / 648:  65%|██████▍   | 648/1000 [2:02:13<1:06:23, 11.32s/it][Succeeded / Failed / Skipped / Total] 366 / 270 / 12 / 648:  65%|██████▍   | 649/1000 [2:02:16<1:06:08, 11.30s/it][Succeeded / Failed / Skipped / Total] 367 / 270 / 12 / 649:  65%|██████▍   | 649/1000 [2:02:16<1:06:08, 11.30s/it][Succeeded / Failed / Skipped / Total] 367 / 270 / 12 / 649:  65%|██████▌   | 650/1000 [2:02:48<1:06:07, 11.34s/it]Converts an array into a Seq --> Create an instance of the given type --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[example]] ( T ... [[type]] ) { return toSeq ( [[type]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Accepts a web socket . --> Add an Accept or Result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[add]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[add]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Utility to set an accessible object . --> Is the given object accessible? --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[access]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
Encode a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[take]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 646 ---------------------------------------------
Gets a message for a specific key . -->  internationalized version --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[z]] , Object ... args ) { return messagesApi . get ( lang , [[z]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Get the total transformation cost . --> Flow flow through reflection --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[flow]] ( final Class < ? > [ ] [[a]] , final Executable executable ) { final Class < ? > [ ] [[r]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Gets the promotion cost between two classes . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[a]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[a]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 649 ---------------------------------------------
Gets message for translation . --> Returns example for example messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[example]] ( List < String > [[lang]] , Object ... args ) { return messagesApi . get ( lang , [[lang]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
[Succeeded / Failed / Skipped / Total] 368 / 270 / 12 / 650:  65%|██████▌   | 650/1000 [2:02:48<1:06:07, 11.34s/it][Succeeded / Failed / Skipped / Total] 368 / 270 / 12 / 650:  65%|██████▌   | 651/1000 [2:03:17<1:06:05, 11.36s/it][Succeeded / Failed / Skipped / Total] 368 / 271 / 12 / 651:  65%|██████▌   | 651/1000 [2:03:17<1:06:05, 11.36s/it][Succeeded / Failed / Skipped / Total] 368 / 271 / 12 / 651:  65%|██████▌   | 652/1000 [2:03:35<1:05:57, 11.37s/it][Succeeded / Failed / Skipped / Total] 368 / 272 / 12 / 652:  65%|██████▌   | 652/1000 [2:03:35<1:05:57, 11.37s/it][Succeeded / Failed / Skipped / Total] 368 / 272 / 12 / 652:  65%|██████▌   | 653/1000 [2:03:37<1:05:41, 11.36s/it][Succeeded / Failed / Skipped / Total] 369 / 272 / 12 / 653:  65%|██████▌   | 653/1000 [2:03:37<1:05:41, 11.36s/it][Succeeded / Failed / Skipped / Total] 369 / 272 / 12 / 653:  65%|██████▌   | 654/1000 [2:03:46<1:05:29, 11.36s/it][Succeeded / Failed / Skipped / Total] 369 / 273 / 12 / 654:  65%|██████▌   | 654/1000 [2:03:46<1:05:29, 11.36s/it][Succeeded / Failed / Skipped / Total] 369 / 273 / 12 / 654:  66%|██████▌   | 655/1000 [2:03:46<1:05:11, 11.34s/it][Succeeded / Failed / Skipped / Total] 369 / 273 / 13 / 655:  66%|██████▌   | 655/1000 [2:03:46<1:05:11, 11.34s/it][Succeeded / Failed / Skipped / Total] 369 / 273 / 13 / 655:  66%|██████▌   | 656/1000 [2:03:52<1:04:57, 11.33s/it][Succeeded / Failed / Skipped / Total] 370 / 273 / 13 / 656:  66%|██████▌   | 656/1000 [2:03:52<1:04:57, 11.33s/it]--------------------------------------------- Result 650 ---------------------------------------------
Create a parallel Sorter --> Creates an application sorter --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[application]] ( Object [ ] [[ex]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[ex]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Create a new database from the given configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[description]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[description]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Get the cost of object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[the]] destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[o]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[result]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[it]] destination class is null, we've traveled all the way up to * [[actual]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[result]] += 1.5f ; } return [[result]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 653 ---------------------------------------------
Merge sort method . --> Javax heap implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[heap]] ( int [[lo]] , int [[cr]] , int hi , Comparator cmp ) { chooseComparer ( [[lo]] , cmp ) ; super . mergeSort ( [[cr]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 654 ---------------------------------------------
Performs a quick sort on the specified array . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[filter]] ( int [[lo]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[lo]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 655 ---------------------------------------------
generate a field instruction --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
load argument at given index --> Special handling for special types --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[special]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 657 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 273 / 13 / 657:  66%|██████▌   | 657/1000 [2:03:52<1:04:40, 11.31s/it][Succeeded / Failed / Skipped / Total] 371 / 273 / 13 / 657:  66%|██████▌   | 658/1000 [2:04:03<1:04:28, 11.31s/it][Succeeded / Failed / Skipped / Total] 372 / 273 / 13 / 658:  66%|██████▌   | 658/1000 [2:04:03<1:04:28, 11.31s/it][Succeeded / Failed / Skipped / Total] 372 / 273 / 13 / 658:  66%|██████▌   | 659/1000 [2:04:13<1:04:16, 11.31s/it][Succeeded / Failed / Skipped / Total] 372 / 274 / 13 / 659:  66%|██████▌   | 659/1000 [2:04:13<1:04:16, 11.31s/it][Succeeded / Failed / Skipped / Total] 372 / 274 / 13 / 659:  66%|██████▌   | 660/1000 [2:04:21<1:04:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 373 / 274 / 13 / 660:  66%|██████▌   | 660/1000 [2:04:21<1:04:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 373 / 274 / 13 / 660:  66%|██████▌   | 661/1000 [2:04:42<1:03:57, 11.32s/it][Succeeded / Failed / Skipped / Total] 374 / 274 / 13 / 661:  66%|██████▌   | 661/1000 [2:04:42<1:03:57, 11.32s/it][Succeeded / Failed / Skipped / Total] 374 / 274 / 13 / 661:  66%|██████▌   | 662/1000 [2:05:27<1:04:03, 11.37s/it]Cast a number to the type --> Mapping between two types --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[after]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[after]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[after]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[after]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 658 ---------------------------------------------
Invoke the method . --> Invoked by reflection --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[exception]] ( Object [[e]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[e]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 659 ---------------------------------------------
Append a zero or null value to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[load]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 660 ---------------------------------------------
null is null --> Generate nullcmp operator --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter [[e]] , Label oneNull , Label bothNull ) { [[e]] . dup2 ( ) ; Label nonNull = [[e]] . make_label ( ) ; Label oneNullHelper = [[e]] . make_label ( ) ; Label end = [[e]] . make_label ( ) ; [[e]] . ifnonnull ( nonNull ) ; [[e]] . ifnonnull ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( bothNull ) ; [[e]] . mark ( nonNull ) ; [[e]] . ifnull ( oneNullHelper ) ; [[e]] . goTo ( end ) ; [[e]] . mark ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( oneNull ) ; [[e]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter [[d]] , Label oneNull , Label bothNull ) { [[d]] . dup2 ( ) ; Label nonNull = [[d]] . make_label ( ) ; Label oneNullHelper = [[d]] . make_label ( ) ; Label end = [[d]] . make_label ( ) ; [[d]] . ifnonnull ( nonNull ) ; [[d]] . ifnonnull ( oneNullHelper ) ; [[d]] . pop2 ( ) ; [[d]] . goTo ( bothNull ) ; [[d]] . mark ( nonNull ) ; [[d]] . ifnull ( oneNullHelper ) ; [[d]] . goTo ( end ) ; [[d]] . mark ( oneNullHelper ) ; [[d]] . pop2 ( ) ; [[d]] . goTo ( oneNull ) ; [[d]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Unbox or zero . --> unbox or unbox --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[j]] ) { if ( TypeUtils . isPrimitive ( [[j]] ) ) { if ( [[j]] != Type . VOID_TYPE ) { Label [[a]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[a]] ) ; pop ( ) ; zero_or_null ( [[j]] ) ; goTo ( end ) ; mark ( [[a]] ) ; unbox ( [[j]] ) ; mark ( end ) ; } } else { checkcast ( [[j]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 374 / 275 / 13 / 662:  66%|██████▌   | 662/1000 [2:05:27<1:04:03, 11.37s/it][Succeeded / Failed / Skipped / Total] 374 / 275 / 13 / 662:  66%|██████▋   | 663/1000 [2:05:46<1:03:55, 11.38s/it][Succeeded / Failed / Skipped / Total] 374 / 276 / 13 / 663:  66%|██████▋   | 663/1000 [2:05:46<1:03:55, 11.38s/it][Succeeded / Failed / Skipped / Total] 374 / 276 / 13 / 663:  66%|██████▋   | 664/1000 [2:05:46<1:03:38, 11.36s/it][Succeeded / Failed / Skipped / Total] 374 / 276 / 14 / 664:  66%|██████▋   | 664/1000 [2:05:46<1:03:38, 11.36s/it][Succeeded / Failed / Skipped / Total] 374 / 276 / 14 / 664:  66%|██████▋   | 665/1000 [2:05:54<1:03:25, 11.36s/it][Succeeded / Failed / Skipped / Total] 375 / 276 / 14 / 665:  66%|██████▋   | 665/1000 [2:05:54<1:03:25, 11.36s/it][Succeeded / Failed / Skipped / Total] 375 / 276 / 14 / 665:  67%|██████▋   | 666/1000 [2:06:09<1:03:16, 11.37s/it][Succeeded / Failed / Skipped / Total] 376 / 276 / 14 / 666:  67%|██████▋   | 666/1000 [2:06:09<1:03:16, 11.37s/it][Succeeded / Failed / Skipped / Total] 376 / 276 / 14 / 666:  67%|██████▋   | 667/1000 [2:06:10<1:02:59, 11.35s/it][Succeeded / Failed / Skipped / Total] 376 / 277 / 14 / 667:  67%|██████▋   | 667/1000 [2:06:10<1:02:59, 11.35s/it][Succeeded / Failed / Skipped / Total] 376 / 277 / 14 / 667:  67%|██████▋   | 668/1000 [2:06:11<1:02:42, 11.33s/it][Succeeded / Failed / Skipped / Total] 376 / 277 / 15 / 668:  67%|██████▋   | 668/1000 [2:06:11<1:02:42, 11.33s/it][Succeeded / Failed / Skipped / Total] 376 / 277 / 15 / 668:  67%|██████▋   | 669/1000 [2:06:17<1:02:28, 11.33s/it]Extract methods from superclass and interfaces . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] [[interfaces]] , List [[methods]] ) { [[getMethods]] ( superclass , [[interfaces]] , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[array]] ( Class superclass , Class [ ] [[definitions]] , List [[elements]] ) { [[array]] ( superclass , [[definitions]] , [[elements]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[test]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "[[color]]" == "[[color]]" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
Get field . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Sets the superclass . --> configured apache --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[apache]] ( Class [[h]] ) { if ( [[h]] != null && [[h]] . equals ( Object . class ) ) { [[h]] = null ; } this . superclass = [[h]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 666 ---------------------------------------------
Returns the cardinality . --> Returns the cardinality of the value --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[h]] = 0 ; while ( w != 0 ) { [[h]] += T [ w & 255 ] ; w >>= 8 ; } return [[h]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
Process array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[exit]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[ator]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[ator]] ) ; callback . processElement ( [[ator]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 668 ---------------------------------------------
Find all methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 277 / 15 / 669:  67%|██████▋   | 669/1000 [2:06:17<1:02:28, 11.33s/it][Succeeded / Failed / Skipped / Total] 377 / 277 / 15 / 669:  67%|██████▋   | 670/1000 [2:06:21<1:02:14, 11.32s/it][Succeeded / Failed / Skipped / Total] 378 / 277 / 15 / 670:  67%|██████▋   | 670/1000 [2:06:21<1:02:14, 11.32s/it][Succeeded / Failed / Skipped / Total] 378 / 277 / 15 / 670:  67%|██████▋   | 671/1000 [2:06:35<1:02:04, 11.32s/it][Succeeded / Failed / Skipped / Total] 379 / 277 / 15 / 671:  67%|██████▋   | 671/1000 [2:06:35<1:02:04, 11.32s/it][Succeeded / Failed / Skipped / Total] 379 / 277 / 15 / 671:  67%|██████▋   | 672/1000 [2:06:52<1:01:55, 11.33s/it][Succeeded / Failed / Skipped / Total] 379 / 278 / 15 / 672:  67%|██████▋   | 672/1000 [2:06:52<1:01:55, 11.33s/it][Succeeded / Failed / Skipped / Total] 379 / 278 / 15 / 672:  67%|██████▋   | 673/1000 [2:06:52<1:01:38, 11.31s/it][Succeeded / Failed / Skipped / Total] 380 / 278 / 15 / 673:  67%|██████▋   | 673/1000 [2:06:52<1:01:38, 11.31s/it][Succeeded / Failed / Skipped / Total] 380 / 278 / 15 / 673:  67%|██████▋   | 674/1000 [2:06:53<1:01:22, 11.30s/it][Succeeded / Failed / Skipped / Total] 381 / 278 / 15 / 674:  67%|██████▋   | 674/1000 [2:06:53<1:01:22, 11.30s/it][Succeeded / Failed / Skipped / Total] 381 / 278 / 15 / 674:  68%|██████▊   | 675/1000 [2:07:02<1:01:10, 11.29s/it][Succeeded / Failed / Skipped / Total] 381 / 279 / 15 / 675:  68%|██████▊   | 675/1000 [2:07:02<1:01:10, 11.29s/it][Succeeded / Failed / Skipped / Total] 381 / 279 / 15 / 675:  68%|██████▊   | 676/1000 [2:07:24<1:01:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 381 / 280 / 15 / 676:  68%|██████▊   | 676/1000 [2:07:24<1:01:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 381 / 281 / 15 / 677:  68%|██████▊   | 677/1000 [2:07:24<1:00:47, 11.29s/it][Succeeded / Failed / Skipped / Total] 381 / 281 / 15 / 677:  68%|██████▊   | 678/1000 [2:07:26<1:00:31, 11.28s/it][Succeeded / Failed / Skipped / Total] 381 / 282 / 15 / 678:  68%|██████▊   | 678/1000 [2:07:26<1:00:31, 11.28s/it]Add method . --> Handles input --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[input]] ( Method [[handler]] ) { [[input]] ( ReflectUtils . getSignature ( [[handler]] ) , ReflectUtils . getExceptionTypes ( [[handler]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 670 ---------------------------------------------
Resolves all of the known bridge classes . --> Methode permettant de charger tines --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[wise]] ( ) { Map [[rite]] = new HashMap ( ) ; for ( Iterator [[i]] = declToBridge . entrySet ( ) . iterator ( ) ; [[i]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[i]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[assignment]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[rite]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[assignment]] , [[rite]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[rite]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 671 ---------------------------------------------
Read a string from a file . --> Create a String writer --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[writer]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[test]] ( NamingPolicy [[f]] ) { if ( [[f]] == null ) [[f]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[f]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the request host . --> Set the race condition --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[race]] ( final String [[a]] ) { this . host = [[race]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[race]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 674 ---------------------------------------------
Create a HttpRequest --> Create HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[driver]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 675 ---------------------------------------------
Resolves a base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path [[target]] , String [[template]] ) { if ( StringUtil . startsWithChar ( [[template]] , File . separatorChar ) ) { [[template]] = [[template]] . substring ( 1 ) ; } return [[target]] . resolve ( [[template]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 676 ---------------------------------------------
Makes a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[generic]] ( final String [[find]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[find]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 677 ---------------------------------------------
Makes a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[methods]] ( final String [[format]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[format]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Makes a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[of]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 679 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 381 / 283 / 15 / 679:  68%|██████▊   | 679/1000 [2:07:36<1:00:19, 11.28s/it][Succeeded / Failed / Skipped / Total] 381 / 283 / 15 / 679:  68%|██████▊   | 680/1000 [2:07:57<1:00:12, 11.29s/it][Succeeded / Failed / Skipped / Total] 382 / 283 / 15 / 680:  68%|██████▊   | 680/1000 [2:07:57<1:00:12, 11.29s/it][Succeeded / Failed / Skipped / Total] 382 / 283 / 15 / 680:  68%|██████▊   | 681/1000 [2:07:59<59:57, 11.28s/it]  [Succeeded / Failed / Skipped / Total] 382 / 284 / 15 / 681:  68%|██████▊   | 681/1000 [2:07:59<59:57, 11.28s/it][Succeeded / Failed / Skipped / Total] 382 / 284 / 15 / 681:  68%|██████▊   | 682/1000 [2:08:00<59:41, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 285 / 15 / 682:  68%|██████▊   | 682/1000 [2:08:00<59:41, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 285 / 15 / 682:  68%|██████▊   | 683/1000 [2:08:11<59:29, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 286 / 15 / 683:  68%|██████▊   | 683/1000 [2:08:11<59:29, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 286 / 15 / 683:  68%|██████▊   | 684/1000 [2:08:30<59:22, 11.27s/it][Succeeded / Failed / Skipped / Total] 382 / 287 / 15 / 684:  68%|██████▊   | 684/1000 [2:08:30<59:22, 11.27s/it][Succeeded / Failed / Skipped / Total] 382 / 287 / 15 / 684:  68%|██████▊   | 685/1000 [2:08:31<59:05, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 288 / 15 / 685:  68%|██████▊   | 685/1000 [2:08:31<59:05, 11.26s/it][Succeeded / Failed / Skipped / Total] 382 / 288 / 15 / 685:  69%|██████▊   | 686/1000 [2:08:47<58:57, 11.26s/it][Succeeded / Failed / Skipped / Total] 383 / 288 / 15 / 686:  69%|██████▊   | 686/1000 [2:08:47<58:57, 11.26s/it][Succeeded / Failed / Skipped / Total] 383 / 288 / 15 / 686:  69%|██████▊   | 687/1000 [2:09:01<58:47, 11.27s/it][Succeeded / Failed / Skipped / Total] 383 / 289 / 15 / 687:  69%|██████▊   | 687/1000 [2:09:01<58:47, 11.27s/it][Succeeded / Failed / Skipped / Total] 383 / 289 / 15 / 687:  69%|██████▉   | 688/1000 [2:09:03<58:31, 11.26s/it][Succeeded / Failed / Skipped / Total] 384 / 289 / 15 / 688:  69%|██████▉   | 688/1000 [2:09:03<58:31, 11.26s/it][Succeeded / Failed / Skipped / Total] 384 / 289 / 15 / 688:  69%|██████▉   | 689/1000 [2:09:18<58:21, 11.26s/it][Succeeded / Failed / Skipped / Total] 385 / 289 / 15 / 689:  69%|██████▉   | 689/1000 [2:09:18<58:21, 11.26s/it][Succeeded / Failed / Skipped / Total] 385 / 289 / 15 / 689:  69%|██████▉   | 690/1000 [2:09:35<58:13, 11.27s/it][Succeeded / Failed / Skipped / Total] 386 / 289 / 15 / 690:  69%|██████▉   | 690/1000 [2:09:35<58:13, 11.27s/it][Succeeded / Failed / Skipped / Total] 386 / 289 / 15 / 690:  69%|██████▉   | 691/1000 [2:09:39<57:58, 11.26s/it]Makes a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[service]] ( final String [[include]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[include]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Makes a PATCH request . --> Sets the update session --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[session]] ( final String [[b]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[b]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Makes a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[method]] ( final String [[n]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[n]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Start a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[method]] ( final String [[path]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[path]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Sets the HTTP TRACE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[object]] ( final String [[template]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[template]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Set the request path . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[re]] ( String [[query]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Start a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[method]] ( final String [[menu]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[menu]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 686 ---------------------------------------------
Set the query parameters . --> Add query to request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[a]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[a]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[host]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Set the query string . --> Set the id of the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean [[decode]] ) { this . query = HttpUtil . parseQuery ( [[queryString]] , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[id]] ( final String queryString , final boolean [[database]] ) { this . query = HttpUtil . parseQuery ( [[id]] , [[database]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 689 ---------------------------------------------
Returns the host url . --> Get Ray configuration --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[ray]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Sets the host header . --> Override this method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[routing]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 691 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 289 / 15 / 691:  69%|██████▉   | 691/1000 [2:09:39<57:58, 11.26s/it][Succeeded / Failed / Skipped / Total] 387 / 289 / 15 / 691:  69%|██████▉   | 692/1000 [2:09:40<57:42, 11.24s/it][Succeeded / Failed / Skipped / Total] 388 / 289 / 15 / 692:  69%|██████▉   | 692/1000 [2:09:40<57:42, 11.24s/it][Succeeded / Failed / Skipped / Total] 388 / 289 / 15 / 692:  69%|██████▉   | 693/1000 [2:09:47<57:29, 11.24s/it][Succeeded / Failed / Skipped / Total] 389 / 289 / 15 / 693:  69%|██████▉   | 693/1000 [2:09:47<57:29, 11.24s/it][Succeeded / Failed / Skipped / Total] 389 / 289 / 15 / 693:  69%|██████▉   | 694/1000 [2:09:50<57:14, 11.23s/it][Succeeded / Failed / Skipped / Total] 390 / 289 / 15 / 694:  69%|██████▉   | 694/1000 [2:09:50<57:14, 11.23s/it][Succeeded / Failed / Skipped / Total] 390 / 289 / 15 / 694:  70%|██████▉   | 695/1000 [2:09:55<57:01, 11.22s/it][Succeeded / Failed / Skipped / Total] 391 / 289 / 15 / 695:  70%|██████▉   | 695/1000 [2:09:55<57:01, 11.22s/it][Succeeded / Failed / Skipped / Total] 391 / 289 / 15 / 695:  70%|██████▉   | 696/1000 [2:10:22<56:56, 11.24s/it][Succeeded / Failed / Skipped / Total] 391 / 290 / 15 / 696:  70%|██████▉   | 696/1000 [2:10:22<56:56, 11.24s/it][Succeeded / Failed / Skipped / Total] 391 / 290 / 15 / 696:  70%|██████▉   | 697/1000 [2:10:28<56:43, 11.23s/it][Succeeded / Failed / Skipped / Total] 391 / 291 / 15 / 697:  70%|██████▉   | 697/1000 [2:10:28<56:43, 11.23s/it][Succeeded / Failed / Skipped / Total] 391 / 291 / 15 / 697:  70%|██████▉   | 698/1000 [2:10:31<56:28, 11.22s/it][Succeeded / Failed / Skipped / Total] 392 / 291 / 15 / 698:  70%|██████▉   | 698/1000 [2:10:31<56:28, 11.22s/it][Succeeded / Failed / Skipped / Total] 392 / 291 / 15 / 698:  70%|██████▉   | 699/1000 [2:10:44<56:18, 11.22s/it]Add query parameter . --> Specify a method for the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object [[value1]] , final Object ... parameters ) { [[query]] ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < parameters . length ; [[i]] += 2 ) { String name = parameters [ [[i]] ] . toString ( ) ; String value = parameters [ [[i]] + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[method]] ( final String name1 , final Object [[profile]] , final Object ... parameters ) { [[method]] ( name1 , [[profile]] == null ? null : [[profile]] . toString ( ) ) ; for ( int [[null]] = 0 ; [[null]] < parameters . length ; [[null]] += 2 ) { String name = parameters [ [[null]] ] . toString ( ) ; String value = parameters [ [[null]] + 1 ] . toString ( ) ; [[method]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Set basic authentication . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[rar]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[memory]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[memory]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 693 ---------------------------------------------
Buffer . --> This method is overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[array]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Set the replacement cookies . --> Set Cookie header --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[ed]] ( final Cookie ... [[ed]] ) { if ( [[ed]] . length == 0 ) { return this ; } StringBuilder [[header]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[ed]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[header]] . append ( "; " ) ; } first = "False" != "False" ; [[header]] . append ( cookie . getName ( ) ) ; [[header]] . append ( ' ' ) ; [[header]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[header]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 695 ---------------------------------------------
Send and receive response . --> Send template and receive response handler --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[template]] > [[template]] sendAndReceive ( final Function < HttpResponse , [[template]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 696 ---------------------------------------------
Collects all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[dicate]] ( ) { final Collection < ? extends ActionInterceptor > [[array]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[array]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collects action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[sweep]] ( ) { final Collection < ? extends ActionFilter > [[files]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[files]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Remove ranges between start and end . --> Execute a chain of handlers --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label [[start]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , [[start]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[execution]] ( final Handler firstHandler , final Label [[base]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[execution]] ( firstHandler . nextHandler , [[base]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[base]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 699 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 393 / 291 / 15 / 699:  70%|██████▉   | 699/1000 [2:10:44<56:18, 11.22s/it][Succeeded / Failed / Skipped / Total] 393 / 291 / 15 / 699:  70%|███████   | 700/1000 [2:10:47<56:03, 11.21s/it][Succeeded / Failed / Skipped / Total] 394 / 291 / 15 / 700:  70%|███████   | 700/1000 [2:10:47<56:03, 11.21s/it][Succeeded / Failed / Skipped / Total] 394 / 291 / 15 / 700:  70%|███████   | 701/1000 [2:10:50<55:48, 11.20s/it][Succeeded / Failed / Skipped / Total] 395 / 291 / 15 / 701:  70%|███████   | 701/1000 [2:10:50<55:48, 11.20s/it][Succeeded / Failed / Skipped / Total] 395 / 291 / 15 / 701:  70%|███████   | 702/1000 [2:10:55<55:34, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 292 / 15 / 702:  70%|███████   | 702/1000 [2:10:55<55:34, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 292 / 15 / 702:  70%|███████   | 703/1000 [2:11:07<55:23, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 293 / 15 / 703:  70%|███████   | 703/1000 [2:11:07<55:23, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 293 / 15 / 703:  70%|███████   | 704/1000 [2:11:21<55:13, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 294 / 15 / 704:  70%|███████   | 704/1000 [2:11:21<55:13, 11.19s/it][Succeeded / Failed / Skipped / Total] 395 / 294 / 15 / 704:  70%|███████   | 705/1000 [2:11:21<54:58, 11.18s/it][Succeeded / Failed / Skipped / Total] 396 / 294 / 15 / 705:  70%|███████   | 705/1000 [2:11:21<54:58, 11.18s/it][Succeeded / Failed / Skipped / Total] 396 / 294 / 15 / 705:  71%|███████   | 706/1000 [2:11:35<54:47, 11.18s/it][Succeeded / Failed / Skipped / Total] 397 / 294 / 15 / 706:  71%|███████   | 706/1000 [2:11:35<54:47, 11.18s/it][Succeeded / Failed / Skipped / Total] 397 / 294 / 15 / 706:  71%|███████   | 707/1000 [2:11:35<54:32, 11.17s/it][Succeeded / Failed / Skipped / Total] 398 / 294 / 15 / 707:  71%|███████   | 707/1000 [2:11:35<54:32, 11.17s/it][Succeeded / Failed / Skipped / Total] 398 / 294 / 15 / 707:  71%|███████   | 708/1000 [2:11:44<54:20, 11.16s/it][Succeeded / Failed / Skipped / Total] 399 / 294 / 15 / 708:  71%|███████   | 708/1000 [2:11:44<54:20, 11.16s/it][Succeeded / Failed / Skipped / Total] 399 / 294 / 15 / 708:  71%|███████   | 709/1000 [2:11:52<54:07, 11.16s/it]Collects all action runtimes . --> Thread - run loop --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[loop]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Sets a simple property . --> Echo the BeanProperty --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[echo]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the length of the exception table . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[main]] ( final Handler [[an]] ) { int [[y]] = 0 ; Handler [[a]] = [[an]] ; while ( [[a]] != null ) { [[y]] ++ ; [[a]] = [[a]] . nextHandler ; } return [[y]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Collect the action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[filter]] ( ) { final Collection < ActionResult > [[scores]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[scores]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 703 ---------------------------------------------
Returns a PrintWriter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[foo]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 704 ---------------------------------------------
Returns the named property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[list]] > [[list]] getProperty ( final Object bean , final String name ) { BeanProperty [[sort]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[sort]] ) ; return ( [[list]] ) getIndexProperty ( [[sort]] ) ; } else { try { resolveNestedProperties ( [[sort]] ) ; return ( [[list]] ) getIndexProperty ( [[sort]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 705 ---------------------------------------------
Get object reference by name . --> Get attribute by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[attribute]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 706 ---------------------------------------------
Extracts the reference from a property name . --> Remove index characters from a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[assignment]] ( final String [[a]] ) { int ndx = StringUtil . indexOfChars ( [[a]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[a]] ; } return [[a]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 707 ---------------------------------------------
Lookup object reference . --> Get attribute value --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[attribute]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Set an object reference . --> Assumes a result holds --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[assume]] ( final String [[result]] , final Object [[evaluation]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[result]] , [[evaluation]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 709 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 294 / 15 / 709:  71%|███████   | 709/1000 [2:11:52<54:07, 11.16s/it][Succeeded / Failed / Skipped / Total] 400 / 294 / 15 / 709:  71%|███████   | 710/1000 [2:12:19<54:02, 11.18s/it][Succeeded / Failed / Skipped / Total] 401 / 294 / 15 / 710:  71%|███████   | 710/1000 [2:12:19<54:02, 11.18s/it][Succeeded / Failed / Skipped / Total] 401 / 294 / 15 / 710:  71%|███████   | 711/1000 [2:12:23<53:48, 11.17s/it][Succeeded / Failed / Skipped / Total] 401 / 295 / 15 / 711:  71%|███████   | 711/1000 [2:12:23<53:48, 11.17s/it][Succeeded / Failed / Skipped / Total] 401 / 295 / 15 / 711:  71%|███████   | 712/1000 [2:12:37<53:38, 11.18s/it][Succeeded / Failed / Skipped / Total] 401 / 296 / 15 / 712:  71%|███████   | 712/1000 [2:12:37<53:38, 11.18s/it][Succeeded / Failed / Skipped / Total] 401 / 296 / 15 / 712:  71%|███████▏  | 713/1000 [2:12:48<53:27, 11.18s/it][Succeeded / Failed / Skipped / Total] 402 / 296 / 15 / 713:  71%|███████▏  | 713/1000 [2:12:48<53:27, 11.18s/it][Succeeded / Failed / Skipped / Total] 402 / 296 / 15 / 713:  71%|███████▏  | 714/1000 [2:12:56<53:15, 11.17s/it][Succeeded / Failed / Skipped / Total] 403 / 296 / 15 / 714:  71%|███████▏  | 714/1000 [2:12:56<53:15, 11.17s/it][Succeeded / Failed / Skipped / Total] 403 / 296 / 15 / 714:  72%|███████▏  | 715/1000 [2:13:11<53:05, 11.18s/it][Succeeded / Failed / Skipped / Total] 404 / 296 / 15 / 715:  72%|███████▏  | 715/1000 [2:13:11<53:05, 11.18s/it][Succeeded / Failed / Skipped / Total] 404 / 296 / 15 / 715:  72%|███████▏  | 716/1000 [2:14:33<53:22, 11.28s/it][Succeeded / Failed / Skipped / Total] 404 / 297 / 15 / 716:  72%|███████▏  | 716/1000 [2:14:33<53:22, 11.28s/it][Succeeded / Failed / Skipped / Total] 404 / 297 / 15 / 716:  72%|███████▏  | 717/1000 [2:14:58<53:16, 11.30s/it]Gets the entity descriptor . --> Loop through the tableRefs --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[loop]] ( final String [[a]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[a]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Find table descriptor by column reference --> Query by property name --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[query]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[c]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[c]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 711 ---------------------------------------------
Get table alias --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[list]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Lookup a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[a1]] ( final String [[method]] ) { DbEntityDescriptor [[b]] = getTableDescriptor ( [[method]] ) ; if ( [[b]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[method]] ) ; } return [[b]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Register a hint . --> Add Python code to python --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[python]] ( final String [[php]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[php]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Serialize the given value onto the JSONContext . --> Serialize ln to JSON --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T [[value]] ) { if ( [[jsonContext]] . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[a]] , final T [[ln]] ) { if ( [[a]] . pushValue ( [[ln]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 715 ---------------------------------------------
Register a table reference --> Moves the specified result from base to the fetch --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor [[ded]] , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[ded]] , [[tableAlias]] ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[move]] ( final String [[result]] , final DbEntityDescriptor [[base]] , final String [[fetch]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[base]] , [[fetch]] ) ; if ( tableRefs . put ( [[result]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[result]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Convert a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( [[convertedTableName]] ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[can]] ( final String [[field]] ) { StringBuilder [[base]] = new StringBuilder ( [[field]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[string]] = Format . fromCamelCase ( [[field]] , separatorChar ) ; [[base]] . append ( [[string]] ) ; } else { [[base]] . append ( [[field]] ) ; } if ( ! changeCase ) { return [[base]] . toString ( ) ; } return uppercase ? toUppercase ( [[base]] ) . toString ( ) : toLowercase ( [[base]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 298 / 15 / 717:  72%|███████▏  | 717/1000 [2:14:58<53:16, 11.30s/it][Succeeded / Failed / Skipped / Total] 404 / 298 / 15 / 717:  72%|███████▏  | 718/1000 [2:15:07<53:04, 11.29s/it][Succeeded / Failed / Skipped / Total] 405 / 298 / 15 / 718:  72%|███████▏  | 718/1000 [2:15:07<53:04, 11.29s/it][Succeeded / Failed / Skipped / Total] 405 / 298 / 15 / 718:  72%|███████▏  | 719/1000 [2:15:07<52:48, 11.28s/it][Succeeded / Failed / Skipped / Total] 406 / 298 / 15 / 719:  72%|███████▏  | 719/1000 [2:15:07<52:48, 11.28s/it][Succeeded / Failed / Skipped / Total] 406 / 298 / 15 / 719:  72%|███████▏  | 720/1000 [2:15:22<52:38, 11.28s/it][Succeeded / Failed / Skipped / Total] 406 / 299 / 15 / 720:  72%|███████▏  | 720/1000 [2:15:22<52:38, 11.28s/it][Succeeded / Failed / Skipped / Total] 406 / 299 / 15 / 720:  72%|███████▏  | 721/1000 [2:15:28<52:25, 11.27s/it][Succeeded / Failed / Skipped / Total] 407 / 299 / 15 / 721:  72%|███████▏  | 721/1000 [2:15:28<52:25, 11.27s/it][Succeeded / Failed / Skipped / Total] 407 / 299 / 15 / 721:  72%|███████▏  | 722/1000 [2:15:29<52:10, 11.26s/it]Inject attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String [[attrName]] = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[only]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[title]] = servletRequest . getAttributeNames ( ) ; while ( [[title]] . hasMoreElements ( ) ) { final String [[quote]] = [[title]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[quote]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[quote]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Inject request parameters . --> Convenience method from Servlet --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[j]] = 0 ; [[j]] < paramValues . length ; [[j]] ++ ) { final String p = paramValues [ [[j]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[j]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[x]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[value]] = 0 ; [[value]] < paramValues . length ; [[value]] ++ ) { final String p = paramValues [ [[value]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[value]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 719 ---------------------------------------------
Convert column name to property name . --> Barrier bar --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "[[False]]" != "[[False]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[bar]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[[c]]" != "[[c]]" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "[[c]]" != "[[c]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 720 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
Stores the value in the prepared statement . --> Store an image into the prepared statement --> Socre: 1.0

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[image]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[image]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 722 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 299 / 15 / 722:  72%|███████▏  | 722/1000 [2:15:29<52:10, 11.26s/it][Succeeded / Failed / Skipped / Total] 408 / 299 / 15 / 722:  72%|███████▏  | 723/1000 [2:15:43<52:00, 11.26s/it][Succeeded / Failed / Skipped / Total] 408 / 300 / 15 / 723:  72%|███████▏  | 723/1000 [2:15:43<52:00, 11.26s/it][Succeeded / Failed / Skipped / Total] 408 / 300 / 15 / 723:  72%|███████▏  | 724/1000 [2:15:55<51:48, 11.26s/it][Succeeded / Failed / Skipped / Total] 408 / 301 / 15 / 724:  72%|███████▏  | 724/1000 [2:15:55<51:48, 11.26s/it][Succeeded / Failed / Skipped / Total] 408 / 301 / 15 / 724:  72%|███████▎  | 725/1000 [2:16:15<51:41, 11.28s/it][Succeeded / Failed / Skipped / Total] 408 / 302 / 15 / 725:  72%|███████▎  | 725/1000 [2:16:15<51:41, 11.28s/it][Succeeded / Failed / Skipped / Total] 408 / 302 / 15 / 725:  73%|███████▎  | 726/1000 [2:16:37<51:33, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 303 / 15 / 726:  73%|███████▎  | 726/1000 [2:16:37<51:33, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 303 / 15 / 726:  73%|███████▎  | 727/1000 [2:16:56<51:25, 11.30s/it][Succeeded / Failed / Skipped / Total] 408 / 304 / 15 / 727:  73%|███████▎  | 727/1000 [2:16:56<51:25, 11.30s/it][Succeeded / Failed / Skipped / Total] 408 / 304 / 15 / 727:  73%|███████▎  | 728/1000 [2:16:56<51:09, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 304 / 16 / 728:  73%|███████▎  | 728/1000 [2:16:56<51:09, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 304 / 16 / 728:  73%|███████▎  | 729/1000 [2:17:13<51:00, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 305 / 16 / 729:  73%|███████▎  | 729/1000 [2:17:13<51:00, 11.29s/it][Succeeded / Failed / Skipped / Total] 408 / 305 / 16 / 729:  73%|███████▎  | 730/1000 [2:17:25<50:49, 11.30s/it]Apply to column name --> Get the sum --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[sum]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 723 ---------------------------------------------
Creates a new instance of the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[but]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Gets all the wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[flags]] ( ) { final Set < T > [[field]] = new HashSet <> ( wrappers . size ( ) ) ; [[field]] . addAll ( wrappers . values ( ) ) ; return [[field]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
Converts the given path to Unix system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[tree]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Resolves a wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[line]] = wrapperClass . getName ( ) ; T [[quote]] = lookup ( [[line]] ) ; if ( [[quote]] == null ) { [[quote]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[quote]] ) ; wrappers . put ( [[line]] , [[quote]] ) ; } return [[quote]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 727 ---------------------------------------------
Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[are]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[alias]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[alias]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[alias]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[alias]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 728 ---------------------------------------------
Register a component --> [[[SKIPPED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Define action config . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[variable]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 306 / 16 / 730:  73%|███████▎  | 730/1000 [2:17:25<50:49, 11.30s/it][Succeeded / Failed / Skipped / Total] 408 / 306 / 16 / 730:  73%|███████▎  | 731/1000 [2:17:30<50:36, 11.29s/it][Succeeded / Failed / Skipped / Total] 409 / 306 / 16 / 731:  73%|███████▎  | 731/1000 [2:17:30<50:36, 11.29s/it][Succeeded / Failed / Skipped / Total] 409 / 306 / 16 / 731:  73%|███████▎  | 732/1000 [2:17:40<50:24, 11.28s/it][Succeeded / Failed / Skipped / Total] 410 / 306 / 16 / 732:  73%|███████▎  | 732/1000 [2:17:40<50:24, 11.28s/it][Succeeded / Failed / Skipped / Total] 410 / 306 / 16 / 732:  73%|███████▎  | 733/1000 [2:17:46<50:11, 11.28s/it][Succeeded / Failed / Skipped / Total] 411 / 306 / 16 / 733:  73%|███████▎  | 733/1000 [2:17:46<50:11, 11.28s/it][Succeeded / Failed / Skipped / Total] 411 / 306 / 16 / 733:  73%|███████▎  | 734/1000 [2:17:51<49:57, 11.27s/it][Succeeded / Failed / Skipped / Total] 411 / 307 / 16 / 734:  73%|███████▎  | 734/1000 [2:17:51<49:57, 11.27s/it][Succeeded / Failed / Skipped / Total] 411 / 307 / 16 / 734:  74%|███████▎  | 735/1000 [2:18:20<49:52, 11.29s/it][Succeeded / Failed / Skipped / Total] 412 / 307 / 16 / 735:  74%|███████▎  | 735/1000 [2:18:20<49:52, 11.29s/it][Succeeded / Failed / Skipped / Total] 412 / 307 / 16 / 735:  74%|███████▎  | 736/1000 [2:18:28<49:40, 11.29s/it][Succeeded / Failed / Skipped / Total] 412 / 308 / 16 / 736:  74%|███████▎  | 736/1000 [2:18:28<49:40, 11.29s/it][Succeeded / Failed / Skipped / Total] 412 / 308 / 16 / 736:  74%|███████▎  | 737/1000 [2:18:29<49:25, 11.27s/it]Relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[call]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 731 ---------------------------------------------
Starts the canvas . --> Initialize the manager --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[foo]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Configures default values . --> Register action annotations --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[action]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 733 ---------------------------------------------
Register madvoc components . --> Register Gobvoc Container --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[add]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Gets the path . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int [[separatorAdd]] ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[endIndex]] = index + [[separatorAdd]] ; if ( [[prefix]] >= filename . length ( ) || index < 0 || [[prefix]] >= [[endIndex]] ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[thread]] ( final String filename , final int [[index]] ) { if ( filename == null ) { return null ; } int [[thread]] = getPrefixLength ( filename ) ; if ( [[thread]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[length]] = index + [[index]] ; if ( [[thread]] >= filename . length ( ) || index < 0 || [[thread]] >= [[length]] ) { return StringPool . EMPTY ; } return filename . substring ( [[thread]] , [[length]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 735 ---------------------------------------------
Exclude the given jars . --> Excludes class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[ant]] ( final String ... [[brace]] ) { for ( final String [[a]] : [[brace]] ) { rulesJars . exclude ( [[a]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Includes specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... [[above]] ) { for ( final String [[includes]] : [[above]] ) { rulesJars . include ( [[includes]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 309 / 16 / 737:  74%|███████▎  | 737/1000 [2:18:29<49:25, 11.27s/it][Succeeded / Failed / Skipped / Total] 412 / 309 / 16 / 737:  74%|███████▍  | 738/1000 [2:18:34<49:11, 11.27s/it][Succeeded / Failed / Skipped / Total] 412 / 310 / 16 / 738:  74%|███████▍  | 738/1000 [2:18:34<49:11, 11.27s/it][Succeeded / Failed / Skipped / Total] 412 / 310 / 16 / 738:  74%|███████▍  | 739/1000 [2:18:35<48:56, 11.25s/it][Succeeded / Failed / Skipped / Total] 413 / 310 / 16 / 739:  74%|███████▍  | 739/1000 [2:18:35<48:56, 11.25s/it][Succeeded / Failed / Skipped / Total] 413 / 310 / 16 / 739:  74%|███████▍  | 740/1000 [2:19:01<48:50, 11.27s/it][Succeeded / Failed / Skipped / Total] 414 / 310 / 16 / 740:  74%|███████▍  | 740/1000 [2:19:01<48:50, 11.27s/it][Succeeded / Failed / Skipped / Total] 414 / 310 / 16 / 740:  74%|███████▍  | 741/1000 [2:19:03<48:36, 11.26s/it][Succeeded / Failed / Skipped / Total] 415 / 310 / 16 / 741:  74%|███████▍  | 741/1000 [2:19:03<48:36, 11.26s/it][Succeeded / Failed / Skipped / Total] 415 / 310 / 16 / 741:  74%|███████▍  | 742/1000 [2:19:19<48:26, 11.27s/it][Succeeded / Failed / Skipped / Total] 416 / 310 / 16 / 742:  74%|███████▍  | 742/1000 [2:19:19<48:26, 11.27s/it][Succeeded / Failed / Skipped / Total] 416 / 310 / 16 / 742:  74%|███████▍  | 743/1000 [2:19:35<48:16, 11.27s/it][Succeeded / Failed / Skipped / Total] 416 / 311 / 16 / 743:  74%|███████▍  | 743/1000 [2:19:35<48:16, 11.27s/it][Succeeded / Failed / Skipped / Total] 416 / 311 / 16 / 743:  74%|███████▍  | 744/1000 [2:19:36<48:02, 11.26s/it]Includes given entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includedEntries]] ) { for ( final String includedEntry : [[includedEntries]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[add]] ) { for ( final String includedEntry : [[add]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Splits the given filename into parts . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[before]] ( final String [[extensions]] ) { String prefix = getPrefix ( [[extensions]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[extensions]] ) ; int lastExtensionIndex = indexOfExtension ( [[extensions]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[extensions]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[extensions]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[extensions]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[extensions]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[extensions]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[extensions]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[extensions]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 739 ---------------------------------------------
Exclude entries from the class scanner . --> Exclude entries from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[f]] : excludedEntries ) { rulesEntries . exclude ( [[f]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Scan the given paths . --> Add files to the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String [[path]] : paths ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... paths ) { for ( final String [[version]] : paths ) { filesToScan . add ( new File ( [[version]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Compute the bytecode of a type . --> Helper method to generate byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[foo]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 742 ---------------------------------------------
Return a new JtxTransaction --> used by ArrayList --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[array]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 743 ---------------------------------------------
Scan the specified files . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[vector]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 744 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 312 / 16 / 744:  74%|███████▍  | 744/1000 [2:19:36<48:02, 11.26s/it][Succeeded / Failed / Skipped / Total] 416 / 312 / 16 / 744:  74%|███████▍  | 745/1000 [2:20:10<47:58, 11.29s/it][Succeeded / Failed / Skipped / Total] 417 / 312 / 16 / 745:  74%|███████▍  | 745/1000 [2:20:10<47:58, 11.29s/it][Succeeded / Failed / Skipped / Total] 417 / 312 / 16 / 745:  75%|███████▍  | 746/1000 [2:20:23<47:48, 11.29s/it][Succeeded / Failed / Skipped / Total] 417 / 313 / 16 / 746:  75%|███████▍  | 746/1000 [2:20:23<47:48, 11.29s/it][Succeeded / Failed / Skipped / Total] 417 / 313 / 16 / 746:  75%|███████▍  | 747/1000 [2:20:52<47:42, 11.31s/it][Succeeded / Failed / Skipped / Total] 417 / 314 / 16 / 747:  75%|███████▍  | 747/1000 [2:20:52<47:42, 11.31s/it][Succeeded / Failed / Skipped / Total] 417 / 314 / 16 / 747:  75%|███████▍  | 748/1000 [2:21:35<47:42, 11.36s/it][Succeeded / Failed / Skipped / Total] 417 / 315 / 16 / 748:  75%|███████▍  | 748/1000 [2:21:35<47:42, 11.36s/it][Succeeded / Failed / Skipped / Total] 417 / 315 / 16 / 748:  75%|███████▍  | 749/1000 [2:21:41<47:28, 11.35s/it]Get or initialize a new scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[php]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new madvocScope with the specified type . --> Executes the specified madvocScope consumer --> Socre: 1.0

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[compare]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[method]] = getOrInitScope ( [[compare]] ) ; madvocScopeConsumer . accept ( [[method]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 746 ---------------------------------------------
Gets or initializes a new scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[program]] ( final Class < ? extends MadvocScope > [[null]] ) { for ( final MadvocScope [[re]] : allScopes ) { if ( [[re]] . getClass ( ) . equals ( [[null]] ) ) { return [[re]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Scans classpath recursively . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , [[file]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , [[file]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[index]] ( final File root ) { String [[link]] = root . getAbsolutePath ( ) ; if ( ! [[link]] . endsWith ( File . separator ) ) { [[link]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[link]] ) ; File [[branch]] ; while ( ( [[branch]] = ff . nextFile ( ) ) != null ) { final String filePath = [[branch]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[link]] , [[branch]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[link]] , [[branch]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 748 ---------------------------------------------
Scans the jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[test]] ( final File [[bar]] ) { final ZipFile [[key]] ; try { [[key]] = new ZipFile ( [[bar]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[bar]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[key]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[key]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[key]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[key]] ) ; throw rex ; } } } ZipUtil . close ( [[key]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 749 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 418 / 315 / 16 / 749:  75%|███████▍  | 749/1000 [2:21:41<47:28, 11.35s/it][Succeeded / Failed / Skipped / Total] 418 / 315 / 16 / 749:  75%|███████▌  | 750/1000 [2:22:07<47:22, 11.37s/it][Succeeded / Failed / Skipped / Total] 419 / 315 / 16 / 750:  75%|███████▌  | 750/1000 [2:22:07<47:22, 11.37s/it][Succeeded / Failed / Skipped / Total] 419 / 315 / 16 / 750:  75%|███████▌  | 751/1000 [2:22:31<47:15, 11.39s/it][Succeeded / Failed / Skipped / Total] 419 / 316 / 16 / 751:  75%|███████▌  | 751/1000 [2:22:31<47:15, 11.39s/it][Succeeded / Failed / Skipped / Total] 419 / 316 / 16 / 751:  75%|███████▌  | 752/1000 [2:22:35<47:01, 11.38s/it][Succeeded / Failed / Skipped / Total] 419 / 317 / 16 / 752:  75%|███████▌  | 752/1000 [2:22:35<47:01, 11.38s/it][Succeeded / Failed / Skipped / Total] 419 / 317 / 16 / 752:  75%|███████▌  | 753/1000 [2:22:39<46:47, 11.37s/it][Succeeded / Failed / Skipped / Total] 419 / 318 / 16 / 753:  75%|███████▌  | 753/1000 [2:22:39<46:47, 11.37s/it][Succeeded / Failed / Skipped / Total] 419 / 318 / 16 / 753:  75%|███████▌  | 754/1000 [2:22:49<46:35, 11.36s/it][Succeeded / Failed / Skipped / Total] 420 / 318 / 16 / 754:  75%|███████▌  | 754/1000 [2:22:49<46:35, 11.36s/it][Succeeded / Failed / Skipped / Total] 420 / 318 / 16 / 754:  76%|███████▌  | 755/1000 [2:22:52<46:21, 11.35s/it]Decode byte array . --> also used by test --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = length - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - sndx + 1 ; int [[sepCnt]] = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - [[sepCnt]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[sepCnt]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[endx]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[after]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[diameter]] = length - 1 ; int pad = arr [ [[diameter]] ] == ' ' ? ( arr [ [[diameter]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[diameter]] - sndx + 1 ; int [[l]] = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - [[l]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[l]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[diameter]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 750 ---------------------------------------------
Prepares a CSRF token . --> Echo back to client --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[value]] ; boolean [[unique]] ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[unique]] = tokenSet . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! [[unique]] ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[echo]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[hello]] ; boolean [[farewell]] ; do { [[hello]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[farewell]] = tokenSet . add ( new Token ( [[hello]] , timeToLive ) ) ; } while ( ! [[farewell]] ) ; return [[hello]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 751 ---------------------------------------------
Create a bean copy . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[node]] ( final Object [[tree]] ) { BeanCopy beanCopy = new BeanCopy ( [[tree]] ) ; beanCopy . isSourceMap = [[tree]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Make sure the size is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[list]] ) { if ( [[list]] . size ( ) < maxTokensPerSession ) { return ; } long [[date]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[list]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[re]] = iterator . next ( ) ; if ( [[re]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[re]] . validUntil < [[date]] ) { [[date]] = [[re]] . validUntil ; tokenToRemove = [[re]] ; } } if ( ( tokenToRemove != null ) && ( [[list]] . size ( ) >= maxTokensPerSession ) ) { [[list]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 753 ---------------------------------------------
Make a deep copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 754 ---------------------------------------------
Visit a property . --> Overrides superclass methods --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[source]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 421 / 318 / 16 / 755:  76%|███████▌  | 755/1000 [2:22:52<46:21, 11.35s/it][Succeeded / Failed / Skipped / Total] 421 / 318 / 16 / 755:  76%|███████▌  | 756/1000 [2:23:11<46:12, 11.36s/it][Succeeded / Failed / Skipped / Total] 421 / 319 / 16 / 756:  76%|███████▌  | 756/1000 [2:23:11<46:12, 11.36s/it][Succeeded / Failed / Skipped / Total] 421 / 319 / 16 / 756:  76%|███████▌  | 757/1000 [2:23:40<46:07, 11.39s/it][Succeeded / Failed / Skipped / Total] 422 / 319 / 16 / 757:  76%|███████▌  | 757/1000 [2:23:40<46:07, 11.39s/it][Succeeded / Failed / Skipped / Total] 422 / 319 / 16 / 757:  76%|███████▌  | 758/1000 [2:24:30<46:08, 11.44s/it][Succeeded / Failed / Skipped / Total] 423 / 319 / 16 / 758:  76%|███████▌  | 758/1000 [2:24:30<46:08, 11.44s/it][Succeeded / Failed / Skipped / Total] 423 / 319 / 16 / 758:  76%|███████▌  | 759/1000 [2:24:45<45:57, 11.44s/it][Succeeded / Failed / Skipped / Total] 423 / 320 / 16 / 759:  76%|███████▌  | 759/1000 [2:24:45<45:57, 11.44s/it][Succeeded / Failed / Skipped / Total] 423 / 320 / 16 / 759:  76%|███████▌  | 760/1000 [2:24:59<45:47, 11.45s/it]Initialize the entity reference . --> Looks up the entity reference --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[bus]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 756 ---------------------------------------------
Resolves scope by type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[empty]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
Remove bean . --> Aliice Alice --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[alice]] ( final Class [[foo]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
Checks whether the given value matches the given value . --> Determines whether or not the session contains an application --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean [[found]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; [[found]] = "True" == "True" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[application]] ( final HttpSession session , final String [[presentation]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[presentation]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[presentation]] == null ) ) { return "False" != "False" ; } boolean [[message]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[presentation]] ) ) { it . remove ( ) ; [[message]] = "True" == "True" ; } } return [[message]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 759 ---------------------------------------------
Register petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[when]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 423 / 321 / 16 / 760:  76%|███████▌  | 760/1000 [2:24:59<45:47, 11.45s/it][Succeeded / Failed / Skipped / Total] 423 / 321 / 16 / 760:  76%|███████▌  | 761/1000 [2:25:24<45:40, 11.46s/it][Succeeded / Failed / Skipped / Total] 423 / 322 / 16 / 761:  76%|███████▌  | 761/1000 [2:25:24<45:40, 11.46s/it][Succeeded / Failed / Skipped / Total] 423 / 322 / 16 / 761:  76%|███████▌  | 762/1000 [2:25:36<45:28, 11.46s/it][Succeeded / Failed / Skipped / Total] 424 / 322 / 16 / 762:  76%|███████▌  | 762/1000 [2:25:36<45:28, 11.46s/it][Succeeded / Failed / Skipped / Total] 424 / 322 / 16 / 762:  76%|███████▋  | 763/1000 [2:26:17<45:26, 11.50s/it][Succeeded / Failed / Skipped / Total] 425 / 322 / 16 / 763:  76%|███████▋  | 763/1000 [2:26:17<45:26, 11.50s/it][Succeeded / Failed / Skipped / Total] 425 / 322 / 16 / 763:  76%|███████▋  | 764/1000 [2:27:58<45:42, 11.62s/it]Register a new bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[interfaces]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[anInterface]] : [[interfaces]] ) { String altName = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[s]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[array]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[sql]] : [[array]] ) { String altName = annotationResolver . resolveBeanName ( [[sql]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Return an array of beans names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[where]] ( final Class [[bar]] ) { String [ ] [[empty]] = beanCollections . get ( [[bar]] ) ; if ( [[empty]] != null ) { return [[empty]] ; } ArrayList < String > [[exit]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[bar]] ) ) { String [[type]] = entry . getKey ( ) ; [[exit]] . add ( [[type]] ) ; } } if ( [[exit]] . isEmpty ( ) ) { [[empty]] = StringPool . EMPTY_ARRAY ; } else { [[empty]] = [[exit]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[bar]] , [[empty]] ) ; return [[empty]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
Registers a new set injection point --> Adds a setInjectionPoint property --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = [[cd]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[foo]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[t]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = [[t]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Registers a new ctor injection point . --> Register a new CtorCtorInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] [[paramTypes]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[ctorDescriptor]] = cd . getCtorDescriptor ( [[paramTypes]] , "True" == "True" ) ; if ( [[ctorDescriptor]] != null ) { constructor = [[ctorDescriptor]] . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] [[contains]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[contains]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[j]] = cd . getCtorDescriptor ( [[contains]] , "True" == "True" ) ; if ( [[j]] != null ) { constructor = [[j]] . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 425 / 323 / 16 / 764:  76%|███████▋  | 764/1000 [2:27:58<45:42, 11.62s/it][Succeeded / Failed / Skipped / Total] 425 / 323 / 16 / 764:  76%|███████▋  | 765/1000 [2:28:23<45:34, 11.64s/it][Succeeded / Failed / Skipped / Total] 426 / 323 / 16 / 765:  76%|███████▋  | 765/1000 [2:28:23<45:34, 11.64s/it][Succeeded / Failed / Skipped / Total] 426 / 323 / 16 / 765:  77%|███████▋  | 766/1000 [2:28:43<45:25, 11.65s/it][Succeeded / Failed / Skipped / Total] 427 / 323 / 16 / 766:  77%|███████▋  | 766/1000 [2:28:43<45:25, 11.65s/it][Succeeded / Failed / Skipped / Total] 427 / 323 / 16 / 766:  77%|███████▋  | 767/1000 [2:28:44<45:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 427 / 324 / 16 / 767:  77%|███████▋  | 767/1000 [2:28:44<45:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 427 / 324 / 16 / 767:  77%|███████▋  | 768/1000 [2:29:00<45:00, 11.64s/it][Succeeded / Failed / Skipped / Total] 428 / 324 / 16 / 768:  77%|███████▋  | 768/1000 [2:29:00<45:00, 11.64s/it][Succeeded / Failed / Skipped / Total] 428 / 324 / 16 / 768:  77%|███████▋  | 769/1000 [2:29:08<44:48, 11.64s/it]Registers a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String [[reference]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[reference]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[property]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 765 ---------------------------------------------
Register a new Petite provider --> Register a new PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[mod]] = lookupBeanDefinition ( beanName ) ; if ( [[mod]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[mod]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Registers a provider --> Register a template --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[template]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[template]] , md . getMethod ( ) ) ; providers . put ( [[template]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 767 ---------------------------------------------
Register a new destroy method for the given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String [[beanName]] , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[copy]] ( final String [[type]] , String ... [[length]] ) { BeanDefinition [[reg]] = lookupExistingBeanDefinition ( [[type]] ) ; ClassDescriptor [[dc]] = ClassIntrospector . get ( ) . lookup ( [[reg]] . type ) ; if ( [[length]] == null ) { [[length]] = StringPool . EMPTY_ARRAY ; } int total = [[length]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[length]] . length ; i ++ ) { MethodDescriptor md = [[dc]] . getMethodDescriptor ( [[length]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[reg]] . type . getName ( ) + ' ' + [[length]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[reg]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 768 ---------------------------------------------
Iterates over all beans of a given type . --> Iterate over bean name --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[business]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[business]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 769 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 428 / 325 / 16 / 769:  77%|███████▋  | 769/1000 [2:29:08<44:48, 11.64s/it][Succeeded / Failed / Skipped / Total] 428 / 325 / 16 / 769:  77%|███████▋  | 770/1000 [2:29:31<44:39, 11.65s/it][Succeeded / Failed / Skipped / Total] 428 / 326 / 16 / 770:  77%|███████▋  | 770/1000 [2:29:31<44:39, 11.65s/it][Succeeded / Failed / Skipped / Total] 428 / 326 / 16 / 770:  77%|███████▋  | 771/1000 [2:29:55<44:31, 11.67s/it][Succeeded / Failed / Skipped / Total] 428 / 327 / 16 / 771:  77%|███████▋  | 771/1000 [2:29:55<44:31, 11.67s/it][Succeeded / Failed / Skipped / Total] 428 / 327 / 16 / 771:  77%|███████▋  | 772/1000 [2:30:09<44:20, 11.67s/it][Succeeded / Failed / Skipped / Total] 429 / 327 / 16 / 772:  77%|███████▋  | 772/1000 [2:30:09<44:20, 11.67s/it][Succeeded / Failed / Skipped / Total] 429 / 327 / 16 / 772:  77%|███████▋  | 773/1000 [2:30:16<44:07, 11.66s/it][Succeeded / Failed / Skipped / Total] 429 / 328 / 16 / 773:  77%|███████▋  | 773/1000 [2:30:16<44:07, 11.66s/it][Succeeded / Failed / Skipped / Total] 429 / 328 / 16 / 773:  77%|███████▋  | 774/1000 [2:30:20<43:54, 11.65s/it]Registers the init methods for a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[md]] = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[md]] . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[copy]] ( final String [[array]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[format]] = lookupExistingBeanDefinition ( [[array]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[format]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[it]] = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[string]]" == "[[string]]" ) ; if ( [[it]] == null ) { throw new PetiteException ( "Init method not found: " + [[format]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[it]] . getMethod ( ) , i , invocationStrategy ) ; } [[format]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 770 ---------------------------------------------
Define a map of parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[enter]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 771 ---------------------------------------------
Registers a method for a given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[use]] ( final String [[header]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[header]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 772 ---------------------------------------------
Checks that the given argument index is valid . --> Support method signature --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[at]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Intercepts the given action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 774 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 429 / 329 / 16 / 774:  77%|███████▋  | 774/1000 [2:30:20<43:54, 11.65s/it][Succeeded / Failed / Skipped / Total] 429 / 329 / 16 / 774:  78%|███████▊  | 775/1000 [2:30:24<43:39, 11.64s/it][Succeeded / Failed / Skipped / Total] 430 / 329 / 16 / 775:  78%|███████▊  | 775/1000 [2:30:24<43:39, 11.64s/it][Succeeded / Failed / Skipped / Total] 430 / 329 / 16 / 775:  78%|███████▊  | 776/1000 [2:30:30<43:26, 11.64s/it][Succeeded / Failed / Skipped / Total] 431 / 329 / 16 / 776:  78%|███████▊  | 776/1000 [2:30:30<43:26, 11.64s/it][Succeeded / Failed / Skipped / Total] 431 / 329 / 16 / 776:  78%|███████▊  | 777/1000 [2:31:06<43:21, 11.67s/it][Succeeded / Failed / Skipped / Total] 432 / 329 / 16 / 777:  78%|███████▊  | 777/1000 [2:31:06<43:21, 11.67s/it][Succeeded / Failed / Skipped / Total] 432 / 329 / 16 / 777:  78%|███████▊  | 778/1000 [2:31:21<43:11, 11.67s/it][Succeeded / Failed / Skipped / Total] 432 / 330 / 16 / 778:  78%|███████▊  | 778/1000 [2:31:21<43:11, 11.67s/it][Succeeded / Failed / Skipped / Total] 432 / 330 / 16 / 778:  78%|███████▊  | 779/1000 [2:31:22<42:56, 11.66s/it][Succeeded / Failed / Skipped / Total] 432 / 331 / 16 / 779:  78%|███████▊  | 779/1000 [2:31:22<42:56, 11.66s/it][Succeeded / Failed / Skipped / Total] 432 / 331 / 16 / 779:  78%|███████▊  | 780/1000 [2:31:35<42:45, 11.66s/it][Succeeded / Failed / Skipped / Total] 432 / 332 / 16 / 780:  78%|███████▊  | 780/1000 [2:31:35<42:45, 11.66s/it][Succeeded / Failed / Skipped / Total] 432 / 332 / 16 / 780:  78%|███████▊  | 781/1000 [2:31:39<42:31, 11.65s/it][Succeeded / Failed / Skipped / Total] 433 / 332 / 16 / 781:  78%|███████▊  | 781/1000 [2:31:39<42:31, 11.65s/it][Succeeded / Failed / Skipped / Total] 433 / 332 / 16 / 781:  78%|███████▊  | 782/1000 [2:32:08<42:24, 11.67s/it][Succeeded / Failed / Skipped / Total] 434 / 332 / 16 / 782:  78%|███████▊  | 782/1000 [2:32:08<42:24, 11.67s/it][Succeeded / Failed / Skipped / Total] 434 / 332 / 16 / 782:  78%|███████▊  | 783/1000 [2:32:32<42:16, 11.69s/it]Pushes an integer to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[on]] ( final MethodVisitor [[number]] , final int [[key]] ) { if ( [[key]] <= 5 ) { [[number]] . visitInsn ( ICONST_0 + [[key]] ) ; } else if ( [[key]] <= Byte . MAX_VALUE ) { [[number]] . visitIntInsn ( BIPUSH , [[key]] ) ; } else { [[number]] . visitIntInsn ( SIPUSH , [[key]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 775 ---------------------------------------------
Get advice field name . --> foo foo bar foo --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[foo]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
Get advice method name . --> Obtain query --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[query]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 777 ---------------------------------------------
Load arguments from the method . --> Generate code to load a procedure --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[procedure]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[a]] = 1 ; [[a]] <= methodInfo . getArgumentsCount ( ) ; [[a]] ++ ) { loadMethodArgument ( mv , methodInfo , [[a]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 778 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[exception]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 779 ---------------------------------------------
Resolves java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[foo]] ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 780 ---------------------------------------------
Load arguments from the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[testing]] ( final MethodVisitor [[s]] , final MethodInfo [[t]] ) { for ( int [[level]] = 1 ; [[level]] <= [[t]] . getArgumentsCount ( ) ; [[level]] ++ ) { loadMethodArgument ( [[s]] , [[t]] , [[level]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Prepare return value . --> Click null on method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[click]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Creates a key for method signatures . --> Generate a binary version --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int [[access]] , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( [[access]] ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[binary]] ( final int [[template]] , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( [[template]] ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 434 / 333 / 16 / 783:  78%|███████▊  | 783/1000 [2:32:32<42:16, 11.69s/it][Succeeded / Failed / Skipped / Total] 434 / 333 / 16 / 783:  78%|███████▊  | 784/1000 [2:32:39<42:03, 11.68s/it][Succeeded / Failed / Skipped / Total] 435 / 333 / 16 / 784:  78%|███████▊  | 784/1000 [2:32:39<42:03, 11.68s/it][Succeeded / Failed / Skipped / Total] 435 / 333 / 16 / 784:  78%|███████▊  | 785/1000 [2:32:56<41:53, 11.69s/it][Succeeded / Failed / Skipped / Total] 436 / 333 / 16 / 785:  78%|███████▊  | 785/1000 [2:32:56<41:53, 11.69s/it][Succeeded / Failed / Skipped / Total] 436 / 333 / 16 / 785:  79%|███████▊  | 786/1000 [2:32:57<41:38, 11.68s/it][Succeeded / Failed / Skipped / Total] 437 / 333 / 16 / 786:  79%|███████▊  | 786/1000 [2:32:57<41:38, 11.68s/it][Succeeded / Failed / Skipped / Total] 437 / 333 / 16 / 786:  79%|███████▊  | 787/1000 [2:32:57<41:23, 11.66s/it]Generate new array --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[can]] ( final MethodVisitor [[base]] , final Class componentType ) { if ( componentType == int . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[base]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[base]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 784 ---------------------------------------------
Load method argument . --> Execute the load instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[offset]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[execute]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[count]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[count]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[count]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[count]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[count]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[count]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 785 ---------------------------------------------
Checks if any flags are empty --> An example of the test --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[example]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 786 ---------------------------------------------
Store method argument . --> end instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[end]] ( final MethodVisitor mv , final MethodInfo [[ult]] , final int index ) { int offset = [[ult]] . getArgumentOffset ( index ) ; int type = [[ult]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 334 / 16 / 787:  79%|███████▊  | 787/1000 [2:32:57<41:23, 11.66s/it][Succeeded / Failed / Skipped / Total] 437 / 334 / 16 / 787:  79%|███████▉  | 788/1000 [2:33:41<41:20, 11.70s/it][Succeeded / Failed / Skipped / Total] 438 / 334 / 16 / 788:  79%|███████▉  | 788/1000 [2:33:41<41:20, 11.70s/it][Succeeded / Failed / Skipped / Total] 438 / 334 / 16 / 788:  79%|███████▉  | 789/1000 [2:33:47<41:07, 11.70s/it][Succeeded / Failed / Skipped / Total] 439 / 334 / 16 / 789:  79%|███████▉  | 789/1000 [2:33:47<41:07, 11.70s/it][Succeeded / Failed / Skipped / Total] 439 / 334 / 16 / 789:  79%|███████▉  | 790/1000 [2:33:58<40:55, 11.69s/it][Succeeded / Failed / Skipped / Total] 440 / 334 / 16 / 790:  79%|███████▉  | 790/1000 [2:33:58<40:55, 11.69s/it][Succeeded / Failed / Skipped / Total] 440 / 334 / 16 / 790:  79%|███████▉  | 791/1000 [2:34:05<40:42, 11.69s/it][Succeeded / Failed / Skipped / Total] 440 / 335 / 16 / 791:  79%|███████▉  | 791/1000 [2:34:05<40:42, 11.69s/it][Succeeded / Failed / Skipped / Total] 440 / 335 / 16 / 791:  79%|███████▉  | 792/1000 [2:35:04<40:43, 11.75s/it][Succeeded / Failed / Skipped / Total] 441 / 335 / 16 / 792:  79%|███████▉  | 792/1000 [2:35:04<40:43, 11.75s/it][Succeeded / Failed / Skipped / Total] 441 / 335 / 16 / 792:  79%|███████▉  | 793/1000 [2:35:13<40:31, 11.75s/it][Succeeded / Failed / Skipped / Total] 442 / 335 / 16 / 793:  79%|███████▉  | 793/1000 [2:35:13<40:31, 11.75s/it][Succeeded / Failed / Skipped / Total] 442 / 335 / 16 / 793:  79%|███████▉  | 794/1000 [2:35:24<40:19, 11.74s/it]Store instruction into array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[assume]] ( final MethodVisitor [[en]] , final Class componentType ) { if ( componentType == int . class ) { [[en]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[en]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[en]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[en]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[en]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[en]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[en]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[en]] . visitInsn ( CASTORE ) ; return ; } [[en]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 788 ---------------------------------------------
Require authentication . --> Emit a 401 error --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[echo]] ( final HttpServletResponse resp , final String [[id]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[id]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 789 ---------------------------------------------
Extracts the OAuth bearer token from the request . --> Extracts the authorization header from the request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String header = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[authorization]] ( final HttpServletRequest [[able]] ) { String header = [[able]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
Extracts encoding from content type --> Get the attributes for the specified string --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[attributes]] ( final String [[encoded]] , String [[encoding]] ) { String [[attribute]] = [[attributes]] ( [[encoded]] ) ; if ( [[attribute]] == null ) { if ( [[encoding]] == null ) { [[encoding]] = JoddCore . encoding ; } [[attribute]] = [[encoding]] ; } return [[attribute]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 791 ---------------------------------------------
Prepares a download . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[fix]] ( final HttpServletResponse response , final File [[request]] , final String mimeType ) { if ( ! [[request]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[request]] ) ; } if ( [[request]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[request]] ) ; } prepareResponse ( response , [[request]] . getAbsolutePath ( ) , mimeType , ( int ) [[request]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Read request body from a reader --> Retrieves a card from an HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[card]] ( final HttpServletRequest [[ener]] ) throws IOException { BufferedReader buff = [[ener]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Get all cookies from the request --> Get cookie by address --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[task]] ( final HttpServletRequest request , final String [[address]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[address]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
[Succeeded / Failed / Skipped / Total] 442 / 336 / 16 / 794:  79%|███████▉  | 794/1000 [2:35:24<40:19, 11.74s/it][Succeeded / Failed / Skipped / Total] 442 / 336 / 16 / 794:  80%|███████▉  | 795/1000 [2:35:36<40:07, 11.74s/it][Succeeded / Failed / Skipped / Total] 442 / 337 / 16 / 795:  80%|███████▉  | 795/1000 [2:35:36<40:07, 11.74s/it][Succeeded / Failed / Skipped / Total] 442 / 337 / 16 / 795:  80%|███████▉  | 796/1000 [2:36:20<40:04, 11.78s/it][Succeeded / Failed / Skipped / Total] 442 / 338 / 16 / 796:  80%|███████▉  | 796/1000 [2:36:20<40:04, 11.78s/it][Succeeded / Failed / Skipped / Total] 442 / 338 / 16 / 796:  80%|███████▉  | 797/1000 [2:36:42<39:54, 11.80s/it][Succeeded / Failed / Skipped / Total] 442 / 339 / 16 / 797:  80%|███████▉  | 797/1000 [2:36:42<39:54, 11.80s/it][Succeeded / Failed / Skipped / Total] 442 / 339 / 16 / 797:  80%|███████▉  | 798/1000 [2:37:14<39:48, 11.82s/it][Succeeded / Failed / Skipped / Total] 442 / 340 / 16 / 798:  80%|███████▉  | 798/1000 [2:37:14<39:48, 11.82s/it][Succeeded / Failed / Skipped / Total] 442 / 340 / 16 / 798:  80%|███████▉  | 799/1000 [2:37:42<39:40, 11.84s/it][Succeeded / Failed / Skipped / Total] 443 / 340 / 16 / 799:  80%|███████▉  | 799/1000 [2:37:42<39:40, 11.84s/it][Succeeded / Failed / Skipped / Total] 443 / 340 / 16 / 799:  80%|████████  | 800/1000 [2:37:57<39:29, 11.85s/it][Succeeded / Failed / Skipped / Total] 444 / 340 / 16 / 800:  80%|████████  | 800/1000 [2:37:57<39:29, 11.85s/it][Succeeded / Failed / Skipped / Total] 444 / 340 / 16 / 800:  80%|████████  | 801/1000 [2:38:05<39:16, 11.84s/it][Succeeded / Failed / Skipped / Total] 444 / 341 / 16 / 801:  80%|████████  | 801/1000 [2:38:05<39:16, 11.84s/it][Succeeded / Failed / Skipped / Total] 444 / 341 / 16 / 801:  80%|████████  | 802/1000 [2:38:16<39:04, 11.84s/it]--------------------------------------------- Result 794 ---------------------------------------------
Prepares the response with the given file name and size . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[fix]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 795 ---------------------------------------------
Reads the request body from a stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[bufferedReader]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[bufferedReader]] = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( [[bufferedReader]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[bufferedReader]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[format]] ( final HttpServletRequest request ) throws IOException { String [[flow]] = request . getCharacterEncoding ( ) ; if ( [[flow]] == null ) { [[flow]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[data]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[data]] = new BufferedReader ( new InputStreamReader ( inputStream , [[flow]] ) ) ; StreamUtil . copy ( [[data]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[data]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Stores the current context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[print]] ( final ServletContext [[gram]] , final String [[gem]] ) { String ctxPath = getContextPath ( [[gram]] ) ; [[gram]] . setAttribute ( [[gem]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Stores the current context path in the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[fix]] ( final PageContext [[y]] , final String [[s]] ) { String ctxPath = getContextPath ( [[y]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[y]] . getRequest ( ) ; request . setAttribute ( [[s]] , ctxPath ) ; ServletContext servletContext = [[y]] . getServletContext ( ) ; servletContext . setAttribute ( [[s]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Invokes the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[hold]] ( final JspFragment [[a]] ) throws JspException { if ( [[a]] == null ) { return ; } try { [[a]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
Checks if a query parameter is a GET parameter . --> Search by name --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : [[nameValuePairs]] ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[search]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[table]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[result]] : [[table]] ) { if ( [[result]] . startsWith ( name ) ) { return "[[right]]" == "[[right]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Renders the body to a String --> Render a character array --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[array]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the body as char array . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[length]] ( final JspFragment [[list]] ) throws JspException { FastCharArrayWriter [[array]] = new FastCharArrayWriter ( ) ; invokeBody ( [[list]] , [[array]] ) ; return [[array]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
[Succeeded / Failed / Skipped / Total] 444 / 342 / 16 / 802:  80%|████████  | 802/1000 [2:38:16<39:04, 11.84s/it][Succeeded / Failed / Skipped / Total] 444 / 342 / 16 / 802:  80%|████████  | 803/1000 [2:38:32<38:53, 11.85s/it][Succeeded / Failed / Skipped / Total] 445 / 342 / 16 / 803:  80%|████████  | 803/1000 [2:38:32<38:53, 11.85s/it][Succeeded / Failed / Skipped / Total] 445 / 342 / 16 / 803:  80%|████████  | 804/1000 [2:38:36<38:40, 11.84s/it][Succeeded / Failed / Skipped / Total] 446 / 342 / 16 / 804:  80%|████████  | 804/1000 [2:38:36<38:40, 11.84s/it][Succeeded / Failed / Skipped / Total] 446 / 342 / 16 / 804:  80%|████████  | 805/1000 [2:38:37<38:25, 11.82s/it][Succeeded / Failed / Skipped / Total] 446 / 343 / 16 / 805:  80%|████████  | 805/1000 [2:38:37<38:25, 11.82s/it][Succeeded / Failed / Skipped / Total] 446 / 343 / 16 / 805:  81%|████████  | 806/1000 [2:38:40<38:11, 11.81s/it][Succeeded / Failed / Skipped / Total] 446 / 344 / 16 / 806:  81%|████████  | 806/1000 [2:38:40<38:11, 11.81s/it][Succeeded / Failed / Skipped / Total] 446 / 344 / 16 / 806:  81%|████████  | 807/1000 [2:38:41<37:57, 11.80s/it][Succeeded / Failed / Skipped / Total] 446 / 344 / 17 / 807:  81%|████████  | 807/1000 [2:38:41<37:57, 11.80s/it][Succeeded / Failed / Skipped / Total] 446 / 344 / 17 / 807:  81%|████████  | 808/1000 [2:38:56<37:46, 11.80s/it][Succeeded / Failed / Skipped / Total] 447 / 344 / 17 / 808:  81%|████████  | 808/1000 [2:38:56<37:46, 11.80s/it][Succeeded / Failed / Skipped / Total] 447 / 344 / 17 / 808:  81%|████████  | 809/1000 [2:39:12<37:35, 11.81s/it]--------------------------------------------- Result 802 ---------------------------------------------
Prepares the query parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[total]] = [[paramValues]] . length ; for ( int [[i]] = 0 ; [[i]] < [[paramValues]] . length ; [[i]] ++ ) { String paramValue = [[paramValues]] [ [[i]] ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ [[i]] ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[total]] ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[contains]] ( final String [ ] [[itself]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[sign]] = [[itself]] . length ; for ( int [[j]] = 0 ; [[j]] < [[itself]] . length ; [[j]] ++ ) { String paramValue = [[itself]] [ [[j]] ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[itself]] [ [[j]] ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[sign]] ) ) { return null ; } } return [[itself]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 803 ---------------------------------------------
Creates new bean instance . --> Get the value of the ctor --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[c]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 804 ---------------------------------------------
Calls the destroy methods on the bean . --> Validate the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[check]] ( ) { for ( final DestroyMethodPoint [[to]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[to]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[to]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 805 ---------------------------------------------
Copy request parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[empty]] ( final HttpServletRequest [[el]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[el]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[address]] = ( String ) paramNames . nextElement ( ) ; if ( [[el]] . getAttribute ( [[address]] ) != null ) { continue ; } String [ ] paramValues = [[el]] . getParameterValues ( [[address]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[el]] . setAttribute ( [[address]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 806 ---------------------------------------------
Invokes init methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[hold]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 807 ---------------------------------------------
Add a single entry . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 808 ---------------------------------------------
Put a base property . --> Configure a key - value pair --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[setup]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 809 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 448 / 344 / 17 / 809:  81%|████████  | 809/1000 [2:39:12<37:35, 11.81s/it][Succeeded / Failed / Skipped / Total] 448 / 344 / 17 / 809:  81%|████████  | 810/1000 [2:39:21<37:22, 11.80s/it][Succeeded / Failed / Skipped / Total] 448 / 345 / 17 / 810:  81%|████████  | 810/1000 [2:39:21<37:22, 11.80s/it][Succeeded / Failed / Skipped / Total] 448 / 345 / 17 / 810:  81%|████████  | 811/1000 [2:39:28<37:09, 11.80s/it][Succeeded / Failed / Skipped / Total] 449 / 345 / 17 / 811:  81%|████████  | 811/1000 [2:39:28<37:09, 11.80s/it][Succeeded / Failed / Skipped / Total] 449 / 345 / 17 / 811:  81%|████████  | 812/1000 [2:39:36<36:57, 11.79s/it][Succeeded / Failed / Skipped / Total] 450 / 345 / 17 / 812:  81%|████████  | 812/1000 [2:39:36<36:57, 11.79s/it][Succeeded / Failed / Skipped / Total] 450 / 345 / 17 / 812:  81%|████████▏ | 813/1000 [2:39:44<36:44, 11.79s/it][Succeeded / Failed / Skipped / Total] 451 / 345 / 17 / 813:  81%|████████▏ | 813/1000 [2:39:44<36:44, 11.79s/it][Succeeded / Failed / Skipped / Total] 451 / 345 / 17 / 813:  81%|████████▏ | 814/1000 [2:39:50<36:31, 11.78s/it][Succeeded / Failed / Skipped / Total] 451 / 346 / 17 / 814:  81%|████████▏ | 814/1000 [2:39:50<36:31, 11.78s/it][Succeeded / Failed / Skipped / Total] 451 / 346 / 17 / 814:  82%|████████▏ | 815/1000 [2:40:18<36:23, 11.80s/it][Succeeded / Failed / Skipped / Total] 452 / 346 / 17 / 815:  82%|████████▏ | 815/1000 [2:40:18<36:23, 11.80s/it][Succeeded / Failed / Skipped / Total] 452 / 346 / 17 / 815:  82%|████████▏ | 816/1000 [2:40:44<36:14, 11.82s/it][Succeeded / Failed / Skipped / Total] 453 / 346 / 17 / 816:  82%|████████▏ | 816/1000 [2:40:44<36:14, 11.82s/it][Succeeded / Failed / Skipped / Total] 453 / 346 / 17 / 816:  82%|████████▏ | 817/1000 [2:40:44<36:00, 11.80s/it][Succeeded / Failed / Skipped / Total] 454 / 346 / 17 / 817:  82%|████████▏ | 817/1000 [2:40:44<36:00, 11.80s/it][Succeeded / Failed / Skipped / Total] 454 / 346 / 17 / 817:  82%|████████▏ | 818/1000 [2:41:14<35:52, 11.83s/it]Rewrites the given action path . --> Thread thread --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[thread]] ( final HttpServletRequest servletRequest , final String [[blog]] , final String httpMethod ) { return [[blog]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 810 ---------------------------------------------
Injects the bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[assuming]] ( final ParamManager paramManager , final boolean [[construct]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[construct]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 811 ---------------------------------------------
Get profile from profile --> Return manager s properties --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[manager]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve macros . --> Link to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[c]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Put profile . --> Cast a value to a string --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , [[map]] , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[cast]] ( final String key , final String value , final String [[array]] , final boolean append ) { Map < String , PropsEntry > [[index]] = profileProperties . computeIfAbsent ( [[array]] , k -> new HashMap <> ( ) ) ; put ( [[array]] , [[index]] , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > [[names]] = super . getAll ( name ) ; if ( [[names]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[names]] . add ( value ) ; super . addAll ( name , [[names]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 815 ---------------------------------------------
Writes a 32 - bit word from an array of bytes --> Converts 4 - byte array into four bytes --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[offp]] ) { int i ; int [[word]] = 0 ; int off = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[offp]] [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[command]] ) { int i ; int [[iii]] = 0 ; int off = [[command]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[iii]] = ( [[iii]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[command]] [ 0 ] = off ; return [[iii]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Extract profiles . --> Extract values from a list of wildcard patterns --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] [[profiles]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] [[pointer]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all bytes from the stream to the output stream . --> Writes array value --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[array]] ( final OutputStream [[generator]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[generator]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 346 / 17 / 818:  82%|████████▏ | 818/1000 [2:41:14<35:52, 11.83s/it][Succeeded / Failed / Skipped / Total] 455 / 346 / 17 / 818:  82%|████████▏ | 819/1000 [2:42:01<35:48, 11.87s/it][Succeeded / Failed / Skipped / Total] 455 / 347 / 17 / 819:  82%|████████▏ | 819/1000 [2:42:01<35:48, 11.87s/it][Succeeded / Failed / Skipped / Total] 455 / 347 / 17 / 819:  82%|████████▏ | 820/1000 [2:42:06<35:35, 11.86s/it][Succeeded / Failed / Skipped / Total] 456 / 347 / 17 / 820:  82%|████████▏ | 820/1000 [2:42:06<35:35, 11.86s/it][Succeeded / Failed / Skipped / Total] 456 / 347 / 17 / 820:  82%|████████▏ | 821/1000 [2:42:22<35:24, 11.87s/it][Succeeded / Failed / Skipped / Total] 456 / 348 / 17 / 821:  82%|████████▏ | 821/1000 [2:42:22<35:24, 11.87s/it][Succeeded / Failed / Skipped / Total] 456 / 348 / 17 / 821:  82%|████████▏ | 822/1000 [2:43:01<35:18, 11.90s/it][Succeeded / Failed / Skipped / Total] 456 / 349 / 17 / 822:  82%|████████▏ | 822/1000 [2:43:01<35:18, 11.90s/it][Succeeded / Failed / Skipped / Total] 456 / 349 / 17 / 822:  82%|████████▏ | 823/1000 [2:43:08<35:05, 11.89s/it][Succeeded / Failed / Skipped / Total] 456 / 350 / 17 / 823:  82%|████████▏ | 823/1000 [2:43:08<35:05, 11.89s/it][Succeeded / Failed / Skipped / Total] 456 / 350 / 17 / 823:  82%|████████▏ | 824/1000 [2:43:20<34:53, 11.89s/it][Succeeded / Failed / Skipped / Total] 456 / 351 / 17 / 824:  82%|████████▏ | 824/1000 [2:43:20<34:53, 11.89s/it][Succeeded / Failed / Skipped / Total] 456 / 351 / 17 / 824:  82%|████████▎ | 825/1000 [2:43:27<34:40, 11.89s/it]Checks if the given plaintext matches the given plaintext . --> Includes the given hash --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[include]] ( String [[count]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[count]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 819 ---------------------------------------------
Resolves the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[of]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[c]] ; if ( annotationValues == null ) { [[c]] = Action . class ; } else { [[c]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[c]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 820 ---------------------------------------------
Parse action runtime . --> Rethode --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[ride]] ( final Class < ? > actionClass , final Method [[concept]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[end]] = detectActionAnnotationValues ( [[concept]] ) ; final ActionConfig actionConfig = resolveActionConfig ( [[end]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 821 ---------------------------------------------
Copies bytes from the input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[data]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 822 ---------------------------------------------
Hashes a password using a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char [[minor]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[minor]] = salt . charAt ( 2 ) ; if ( [[minor]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[mail]] ( String password , String salt ) { BCrypt [[column]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char [[ate]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[ate]] = salt . charAt ( 2 ) ; if ( [[ate]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 823 ---------------------------------------------
Read an action interceptor . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[condition]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[condition]] = interceptedBy . value ( ) ; if ( [[condition]] . length == 0 ) { [[condition]] = null ; } } return [[condition]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 824 ---------------------------------------------
Detect alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[agent]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 456 / 352 / 17 / 825:  82%|████████▎ | 825/1000 [2:43:27<34:40, 11.89s/it][Succeeded / Failed / Skipped / Total] 456 / 352 / 17 / 825:  83%|████████▎ | 826/1000 [2:43:36<34:27, 11.88s/it][Succeeded / Failed / Skipped / Total] 457 / 352 / 17 / 826:  83%|████████▎ | 826/1000 [2:43:36<34:27, 11.88s/it][Succeeded / Failed / Skipped / Total] 457 / 352 / 17 / 826:  83%|████████▎ | 827/1000 [2:43:37<34:13, 11.87s/it][Succeeded / Failed / Skipped / Total] 457 / 352 / 18 / 827:  83%|████████▎ | 827/1000 [2:43:37<34:13, 11.87s/it][Succeeded / Failed / Skipped / Total] 457 / 352 / 18 / 827:  83%|████████▎ | 828/1000 [2:44:03<34:04, 11.89s/it][Succeeded / Failed / Skipped / Total] 457 / 353 / 18 / 828:  83%|████████▎ | 828/1000 [2:44:03<34:04, 11.89s/it][Succeeded / Failed / Skipped / Total] 457 / 353 / 18 / 828:  83%|████████▎ | 829/1000 [2:44:12<33:52, 11.88s/it][Succeeded / Failed / Skipped / Total] 457 / 354 / 18 / 829:  83%|████████▎ | 829/1000 [2:44:12<33:52, 11.88s/it][Succeeded / Failed / Skipped / Total] 457 / 354 / 18 / 829:  83%|████████▎ | 830/1000 [2:44:15<33:38, 11.87s/it][Succeeded / Failed / Skipped / Total] 457 / 355 / 18 / 830:  83%|████████▎ | 830/1000 [2:44:15<33:38, 11.87s/it][Succeeded / Failed / Skipped / Total] 457 / 355 / 18 / 830:  83%|████████▎ | 831/1000 [2:44:57<33:32, 11.91s/it][Succeeded / Failed / Skipped / Total] 457 / 356 / 18 / 831:  83%|████████▎ | 831/1000 [2:44:57<33:32, 11.91s/it][Succeeded / Failed / Skipped / Total] 457 / 356 / 18 / 831:  83%|████████▎ | 832/1000 [2:45:10<33:21, 11.91s/it][Succeeded / Failed / Skipped / Total] 458 / 356 / 18 / 832:  83%|████████▎ | 832/1000 [2:45:10<33:21, 11.91s/it][Succeeded / Failed / Skipped / Total] 458 / 356 / 18 / 832:  83%|████████▎ | 833/1000 [2:45:14<33:07, 11.90s/it][Succeeded / Failed / Skipped / Total] 459 / 356 / 18 / 833:  83%|████████▎ | 833/1000 [2:45:14<33:07, 11.90s/it][Succeeded / Failed / Skipped / Total] 459 / 356 / 18 / 833:  83%|████████▎ | 834/1000 [2:45:42<32:58, 11.92s/it][Succeeded / Failed / Skipped / Total] 460 / 356 / 18 / 834:  83%|████████▎ | 834/1000 [2:45:42<32:58, 11.92s/it][Succeeded / Failed / Skipped / Total] 460 / 356 / 18 / 834:  84%|████████▎ | 835/1000 [2:45:49<32:46, 11.92s/it]Read action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[when]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 826 ---------------------------------------------
Get method alias . --> Get name from annotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[name]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 827 ---------------------------------------------
Set the response headers . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[extension]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 829 ---------------------------------------------
Apply proxy advice . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[example]] > [[example]] applyAdvice ( final Class < [[example]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[j]] ( final String [[id]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 831 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[function]] ( final String [[visible]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[visible]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Resolves the real name for the given json name . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[null]] ( final String [[b]] ) { if ( jsonNames == null ) { return [[b]] ; } int [[zero]] = ArraysUtil . indexOf ( jsonNames , [[b]] ) ; if ( [[zero]] == - 1 ) { return [[b]] ; } return realNames [ [[zero]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Inject target into proxy --> Set a test variable on an example --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[var]] ( final Object [[example]] , final Object target ) { Class [[event]] = [[example]] . getClass ( ) ; try { Field field = [[event]] . getField ( "$___target$0" ) ; field . set ( [[example]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 834 ---------------------------------------------
Lookup type data for given class . --> Get state information for given test --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[state]] ( final Class [[test]] ) { TypeData typeData = typeDataMap . get ( [[test]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[test]] ) ; typeDataMap . put ( [[test]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 835 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 461 / 356 / 18 / 835:  84%|████████▎ | 835/1000 [2:45:49<32:46, 11.92s/it][Succeeded / Failed / Skipped / Total] 461 / 356 / 18 / 835:  84%|████████▎ | 836/1000 [2:45:55<32:33, 11.91s/it][Succeeded / Failed / Skipped / Total] 461 / 357 / 18 / 836:  84%|████████▎ | 836/1000 [2:45:55<32:33, 11.91s/it][Succeeded / Failed / Skipped / Total] 461 / 357 / 18 / 836:  84%|████████▎ | 837/1000 [2:46:03<32:20, 11.90s/it][Succeeded / Failed / Skipped / Total] 462 / 357 / 18 / 837:  84%|████████▎ | 837/1000 [2:46:03<32:20, 11.90s/it][Succeeded / Failed / Skipped / Total] 462 / 357 / 18 / 837:  84%|████████▍ | 838/1000 [2:46:20<32:09, 11.91s/it][Succeeded / Failed / Skipped / Total] 462 / 358 / 18 / 838:  84%|████████▍ | 838/1000 [2:46:20<32:09, 11.91s/it][Succeeded / Failed / Skipped / Total] 462 / 358 / 18 / 838:  84%|████████▍ | 839/1000 [2:46:36<31:58, 11.91s/it][Succeeded / Failed / Skipped / Total] 462 / 359 / 18 / 839:  84%|████████▍ | 839/1000 [2:46:36<31:58, 11.91s/it][Succeeded / Failed / Skipped / Total] 462 / 359 / 18 / 839:  84%|████████▍ | 840/1000 [2:46:44<31:45, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 359 / 18 / 840:  84%|████████▍ | 840/1000 [2:46:44<31:45, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 359 / 18 / 840:  84%|████████▍ | 841/1000 [2:46:55<31:33, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 360 / 18 / 841:  84%|████████▍ | 841/1000 [2:46:55<31:33, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 360 / 18 / 841:  84%|████████▍ | 842/1000 [2:47:09<31:22, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 361 / 18 / 842:  84%|████████▍ | 842/1000 [2:47:09<31:22, 11.91s/it][Succeeded / Failed / Skipped / Total] 463 / 361 / 18 / 842:  84%|████████▍ | 843/1000 [2:47:13<31:08, 11.90s/it][Succeeded / Failed / Skipped / Total] 463 / 362 / 18 / 843:  84%|████████▍ | 843/1000 [2:47:13<31:08, 11.90s/it][Succeeded / Failed / Skipped / Total] 463 / 362 / 18 / 843:  84%|████████▍ | 844/1000 [2:47:25<30:56, 11.90s/it]Resolve json name . --> Get the stack of names --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[stack]] ( final String [[arrays]] ) { if ( realNames == null ) { return [[arrays]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[arrays]] ) ; if ( realIndex == - 1 ) { return [[arrays]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 836 ---------------------------------------------
Lookup the TypeData for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[print]] ( final Class [[a]] ) { TypeData typeData = typeDataMap . get ( [[a]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[a]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[a]] ) ; typeDataMap . put ( [[a]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Find the type data for the given class . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[rt]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the file content . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[loop]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[command]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 840 ---------------------------------------------
Resolves a JSON name for a given type . --> Return description --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String name ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[description]] ( final Class [[statement]] , final String name ) { TypeData [[tion]] = lookupTypeData ( [[statement]] ) ; return [[tion]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 841 ---------------------------------------------
Copy static bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[min]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Resolves the real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[write]] ( final Class type , final String [[declaration]] ) { TypeData [[at]] = lookupTypeData ( type ) ; return [[at]] . resolveRealName ( [[declaration]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[function]] ( final ByteVector [[argument]] ) { [[argument]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 463 / 363 / 18 / 844:  84%|████████▍ | 844/1000 [2:47:25<30:56, 11.90s/it][Succeeded / Failed / Skipped / Total] 463 / 363 / 18 / 844:  84%|████████▍ | 845/1000 [2:47:49<30:47, 11.92s/it][Succeeded / Failed / Skipped / Total] 463 / 364 / 18 / 845:  84%|████████▍ | 845/1000 [2:47:49<30:47, 11.92s/it][Succeeded / Failed / Skipped / Total] 463 / 364 / 18 / 845:  85%|████████▍ | 846/1000 [2:48:20<30:38, 11.94s/it][Succeeded / Failed / Skipped / Total] 463 / 365 / 18 / 846:  85%|████████▍ | 846/1000 [2:48:20<30:38, 11.94s/it][Succeeded / Failed / Skipped / Total] 463 / 365 / 18 / 846:  85%|████████▍ | 847/1000 [2:48:57<30:31, 11.97s/it][Succeeded / Failed / Skipped / Total] 463 / 366 / 18 / 847:  85%|████████▍ | 847/1000 [2:48:57<30:31, 11.97s/it][Succeeded / Failed / Skipped / Total] 463 / 366 / 18 / 847:  85%|████████▍ | 848/1000 [2:49:24<30:22, 11.99s/it][Succeeded / Failed / Skipped / Total] 463 / 367 / 18 / 848:  85%|████████▍ | 848/1000 [2:49:24<30:22, 11.99s/it][Succeeded / Failed / Skipped / Total] 463 / 367 / 18 / 848:  85%|████████▍ | 849/1000 [2:49:29<30:08, 11.98s/it][Succeeded / Failed / Skipped / Total] 463 / 368 / 18 / 849:  85%|████████▍ | 849/1000 [2:49:29<30:08, 11.98s/it][Succeeded / Failed / Skipped / Total] 463 / 368 / 18 / 849:  85%|████████▌ | 850/1000 [2:49:57<29:59, 12.00s/it][Succeeded / Failed / Skipped / Total] 463 / 369 / 18 / 850:  85%|████████▌ | 850/1000 [2:49:57<29:59, 12.00s/it][Succeeded / Failed / Skipped / Total] 463 / 369 / 18 / 850:  85%|████████▌ | 851/1000 [2:49:58<29:45, 11.98s/it]Put bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[empty]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[procedure]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant field ref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[buffer]] ( final String [[block]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[block]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Add a method reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[of]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[access]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[object]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[path]] = get ( hashCode ) ; while ( [[path]] != null ) { if ( [[path]] . tag == tag && [[path]] . hashCode == hashCode && [[path]] . owner . equals ( owner ) && [[path]] . name . equals ( name ) && [[path]] . value . equals ( descriptor ) ) { return [[path]] ; } [[path]] = [[path]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds an integer or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addition]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 463 / 370 / 18 / 851:  85%|████████▌ | 851/1000 [2:49:58<29:45, 11.98s/it][Succeeded / Failed / Skipped / Total] 463 / 370 / 18 / 851:  85%|████████▌ | 852/1000 [2:50:31<29:37, 12.01s/it][Succeeded / Failed / Skipped / Total] 463 / 371 / 18 / 852:  85%|████████▌ | 852/1000 [2:50:31<29:37, 12.01s/it][Succeeded / Failed / Skipped / Total] 463 / 371 / 18 / 852:  85%|████████▌ | 853/1000 [2:51:20<29:31, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 372 / 18 / 853:  85%|████████▌ | 853/1000 [2:51:20<29:31, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 372 / 18 / 853:  85%|████████▌ | 854/1000 [2:51:22<29:17, 12.04s/it][Succeeded / Failed / Skipped / Total] 463 / 373 / 18 / 854:  85%|████████▌ | 854/1000 [2:51:22<29:17, 12.04s/it][Succeeded / Failed / Skipped / Total] 463 / 373 / 18 / 854:  86%|████████▌ | 855/1000 [2:51:43<29:07, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 374 / 18 / 855:  86%|████████▌ | 855/1000 [2:51:43<29:07, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 374 / 18 / 855:  86%|████████▌ | 856/1000 [2:51:54<28:55, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 375 / 18 / 856:  86%|████████▌ | 856/1000 [2:51:54<28:55, 12.05s/it][Succeeded / Failed / Skipped / Total] 463 / 375 / 18 / 856:  86%|████████▌ | 857/1000 [2:51:59<28:41, 12.04s/it]Adds an integer or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int [[hashCode]] = hash ( [[tag]] , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[scheme]] ( final int [[end]] , final int value ) { int [[a]] = hash ( [[end]] , value ) ; Entry entry = get ( [[a]] ) ; while ( entry != null ) { if ( entry . tag == [[end]] && entry . hashCode == [[a]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[end]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[end]] , value , [[a]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a long or double constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[exit]] ( final int index , final int [[depth]] , final long value ) { add ( new Entry ( index , [[depth]] , value , hash ( [[depth]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a new constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , [[name]] , descriptor , hash ( [[tag]] , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[adding]] ( final int index , final String [[header]] , final String descriptor ) { final int [[id]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[id]] , [[header]] , descriptor , hash ( [[id]] , [[header]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a long constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[store]] ( final int tag , final long [[core]] ) { int hashCode = hash ( tag , [[core]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[core]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[core]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[core]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a UTF8 constant to the constant pool of this constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String [[addition]] ) { int [[enter]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[addition]] ) ; Entry entry = get ( [[enter]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[enter]] && entry . value . equals ( [[addition]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[addition]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[addition]] , [[enter]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[name]] , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[save]] ( final String [[result]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[result]] , descriptor ) ; Entry [[size]] = get ( hashCode ) ; while ( [[size]] != null ) { if ( [[size]] . tag == tag && [[size]] . hashCode == hashCode && [[size]] . name . equals ( [[result]] ) && [[size]] . value . equals ( descriptor ) ) { return [[size]] . index ; } [[size]] = [[size]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[result]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[result]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 464 / 375 / 18 / 857:  86%|████████▌ | 857/1000 [2:51:59<28:41, 12.04s/it][Succeeded / Failed / Skipped / Total] 464 / 375 / 18 / 857:  86%|████████▌ | 858/1000 [2:52:05<28:28, 12.03s/it][Succeeded / Failed / Skipped / Total] 464 / 376 / 18 / 858:  86%|████████▌ | 858/1000 [2:52:05<28:28, 12.03s/it][Succeeded / Failed / Skipped / Total] 464 / 376 / 18 / 858:  86%|████████▌ | 859/1000 [2:53:48<28:31, 12.14s/it][Succeeded / Failed / Skipped / Total] 464 / 377 / 18 / 859:  86%|████████▌ | 859/1000 [2:53:48<28:31, 12.14s/it][Succeeded / Failed / Skipped / Total] 464 / 377 / 18 / 859:  86%|████████▌ | 860/1000 [2:53:49<28:17, 12.13s/it][Succeeded / Failed / Skipped / Total] 464 / 378 / 18 / 860:  86%|████████▌ | 860/1000 [2:53:49<28:17, 12.13s/it][Succeeded / Failed / Skipped / Total] 464 / 378 / 18 / 860:  86%|████████▌ | 861/1000 [2:54:09<28:06, 12.14s/it][Succeeded / Failed / Skipped / Total] 464 / 379 / 18 / 861:  86%|████████▌ | 861/1000 [2:54:09<28:06, 12.14s/it][Succeeded / Failed / Skipped / Total] 464 / 379 / 18 / 861:  86%|████████▌ | 862/1000 [2:54:31<27:56, 12.15s/it][Succeeded / Failed / Skipped / Total] 464 / 380 / 18 / 862:  86%|████████▌ | 862/1000 [2:54:31<27:56, 12.15s/it][Succeeded / Failed / Skipped / Total] 464 / 380 / 18 / 862:  86%|████████▋ | 863/1000 [2:55:14<27:49, 12.18s/it]Add constant method handle . --> E echo method handle --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[echo]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a UTF8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[end]] ( final int index , final String [[name]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[name]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[name]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Add a static constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[file]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[file]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Add a static invoke dynamic method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[bar]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bar]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bar]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add a dynamic reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[a]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[a]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[a]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[a]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[a]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[foo]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 464 / 381 / 18 / 863:  86%|████████▋ | 863/1000 [2:55:14<27:49, 12.18s/it][Succeeded / Failed / Skipped / Total] 464 / 381 / 18 / 863:  86%|████████▋ | 864/1000 [2:55:23<27:36, 12.18s/it][Succeeded / Failed / Skipped / Total] 464 / 382 / 18 / 864:  86%|████████▋ | 864/1000 [2:55:23<27:36, 12.18s/it][Succeeded / Failed / Skipped / Total] 464 / 382 / 18 / 864:  86%|████████▋ | 865/1000 [2:55:33<27:23, 12.18s/it][Succeeded / Failed / Skipped / Total] 464 / 383 / 18 / 865:  86%|████████▋ | 865/1000 [2:55:33<27:23, 12.18s/it][Succeeded / Failed / Skipped / Total] 464 / 383 / 18 / 865:  87%|████████▋ | 866/1000 [2:55:44<27:11, 12.18s/it][Succeeded / Failed / Skipped / Total] 465 / 383 / 18 / 866:  87%|████████▋ | 866/1000 [2:55:44<27:11, 12.18s/it][Succeeded / Failed / Skipped / Total] 465 / 383 / 18 / 866:  87%|████████▋ | 867/1000 [2:55:48<26:58, 12.17s/it][Succeeded / Failed / Skipped / Total] 465 / 384 / 18 / 867:  87%|████████▋ | 867/1000 [2:55:48<26:58, 12.17s/it][Succeeded / Failed / Skipped / Total] 465 / 384 / 18 / 867:  87%|████████▋ | 868/1000 [2:56:08<26:47, 12.18s/it][Succeeded / Failed / Skipped / Total] 465 / 385 / 18 / 868:  87%|████████▋ | 868/1000 [2:56:08<26:47, 12.18s/it][Succeeded / Failed / Skipped / Total] 465 / 385 / 18 / 868:  87%|████████▋ | 869/1000 [2:56:45<26:38, 12.20s/it][Succeeded / Failed / Skipped / Total] 465 / 386 / 18 / 869:  87%|████████▋ | 869/1000 [2:56:45<26:38, 12.20s/it][Succeeded / Failed / Skipped / Total] 465 / 386 / 18 / 869:  87%|████████▋ | 870/1000 [2:56:50<26:25, 12.20s/it]Adds a reference to the constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[adding]] ( final int [[code]] , final int tag , final String value ) { add ( new Entry ( [[code]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a static constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String value ) { int hashCode = hash ( [[tag]] , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[scheme]] ( final int [[end]] , final String value ) { int hashCode = hash ( [[end]] , value ) ; Entry [[box]] = get ( hashCode ) ; while ( [[box]] != null ) { if ( [[box]] . tag == [[end]] && [[box]] . hashCode == hashCode && [[box]] . value . equals ( value ) ) { return [[box]] ; } [[box]] = [[box]] . next ; } constantPool . put12 ( [[end]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[end]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
Add a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[system]] ( final Handle [[access]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a merged type . --> used for testability --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[test]] ( final int [[null]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Add dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 868 ---------------------------------------------
Removes all entries from this map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[after]] ( ) { for ( int [[end]] = 0 ; [[end]] < entries . length ; [[end]] ++ ) { entries [ [[end]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Returns an iterator over the elements in the iterable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[now]] ( ) { final MapEntry [ ] [[set]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[set]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[set]] [ 0 ] ; [[set]] [ 0 ] = [[set]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 387 / 18 / 870:  87%|████████▋ | 870/1000 [2:56:50<26:25, 12.20s/it][Succeeded / Failed / Skipped / Total] 465 / 387 / 18 / 870:  87%|████████▋ | 871/1000 [2:56:55<26:12, 12.19s/it][Succeeded / Failed / Skipped / Total] 465 / 388 / 18 / 871:  87%|████████▋ | 871/1000 [2:56:55<26:12, 12.19s/it][Succeeded / Failed / Skipped / Total] 465 / 388 / 18 / 871:  87%|████████▋ | 872/1000 [2:57:23<26:02, 12.21s/it][Succeeded / Failed / Skipped / Total] 466 / 388 / 18 / 872:  87%|████████▋ | 872/1000 [2:57:23<26:02, 12.21s/it][Succeeded / Failed / Skipped / Total] 466 / 388 / 18 / 872:  87%|████████▋ | 873/1000 [2:57:39<25:50, 12.21s/it][Succeeded / Failed / Skipped / Total] 466 / 389 / 18 / 873:  87%|████████▋ | 873/1000 [2:57:39<25:50, 12.21s/it][Succeeded / Failed / Skipped / Total] 466 / 389 / 18 / 873:  87%|████████▋ | 874/1000 [2:57:41<25:37, 12.20s/it][Succeeded / Failed / Skipped / Total] 467 / 389 / 18 / 874:  87%|████████▋ | 874/1000 [2:57:41<25:37, 12.20s/it][Succeeded / Failed / Skipped / Total] 467 / 389 / 18 / 874:  88%|████████▊ | 875/1000 [2:57:56<25:25, 12.20s/it][Succeeded / Failed / Skipped / Total] 467 / 390 / 18 / 875:  88%|████████▊ | 875/1000 [2:57:56<25:25, 12.20s/it][Succeeded / Failed / Skipped / Total] 467 / 390 / 18 / 875:  88%|████████▊ | 876/1000 [2:57:57<25:11, 12.19s/it][Succeeded / Failed / Skipped / Total] 468 / 390 / 18 / 876:  88%|████████▊ | 876/1000 [2:57:57<25:11, 12.19s/it][Succeeded / Failed / Skipped / Total] 468 / 390 / 18 / 876:  88%|████████▊ | 877/1000 [2:57:58<24:57, 12.18s/it][Succeeded / Failed / Skipped / Total] 469 / 390 / 18 / 877:  88%|████████▊ | 877/1000 [2:57:58<24:57, 12.18s/it][Succeeded / Failed / Skipped / Total] 469 / 390 / 18 / 877:  88%|████████▊ | 878/1000 [2:58:05<24:44, 12.17s/it][Succeeded / Failed / Skipped / Total] 470 / 390 / 18 / 878:  88%|████████▊ | 878/1000 [2:58:05<24:44, 12.17s/it][Succeeded / Failed / Skipped / Total] 470 / 390 / 18 / 878:  88%|████████▊ | 879/1000 [2:58:12<24:31, 12.16s/it]Compute hash for a name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int [[i]] = name . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char [[c]] = name . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( [[c]] >= ' ' && [[c]] <= ' ' ) { [[c]] += 32 ; } } h = 31 * h + [[c]] ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[header]] ( final String name ) { int h = 0 ; for ( int [[m]] = name . length ( ) - 1 ; [[m]] >= 0 ; [[m]] -- ) { char [[a]] = name . charAt ( [[m]] ) ; if ( ! caseSensitive ) { if ( [[a]] >= ' ' && [[a]] <= ' ' ) { [[a]] += 32 ; } } h = 31 * h + [[a]] ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[path]] ( ) { List < Map . Entry < String , V > > [[key]] = new LinkedList <> ( ) ; MapEntry < V > [[bold]] = head . after ; while ( [[bold]] != head ) { [[key]] . add ( [[bold]] ) ; [[bold]] = [[bold]] . after ; } return [[key]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Appends a sequence of characters to the buffer . --> region CharacterBuffer Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int [[i]] = start ; [[i]] < end ; [[i]] ++ ) { [[append]] ( csq . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[end]] ( final CharSequence csq , final int start , final int end ) { for ( int [[c]] = start ; [[c]] < end ; [[c]] ++ ) { [[end]] ( csq . charAt ( [[c]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 873 ---------------------------------------------
Returns all values for the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[after]] ( final String [[p]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[p]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[p]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 874 ---------------------------------------------
Create the end of the chain . --> create the end of the chain --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[e]] = 0 ; [[e]] < tmd . proxyData . length ; [[e]] ++ ) { tmd . selectCurrentProxy ( [[e]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Visits the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[of]] ( final String desc , final boolean visible ) { AnnotationVisitor [[a]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 876 ---------------------------------------------
Create the first chain delegate . --> load system methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[system]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 877 ---------------------------------------------
Create the start chain delegate . --> Set the event flag --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[flag]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 878 ---------------------------------------------
Grows the internal buffer . --> Call if there is at least end --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[call]] ( final int [[end]] ) { final int [[foo]] = buffer . length ; int newCapacity = [[foo]] << 1 ; if ( newCapacity - [[end]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
[Succeeded / Failed / Skipped / Total] 471 / 390 / 18 / 879:  88%|████████▊ | 879/1000 [2:58:12<24:31, 12.16s/it][Succeeded / Failed / Skipped / Total] 471 / 390 / 18 / 879:  88%|████████▊ | 880/1000 [2:58:22<24:19, 12.16s/it][Succeeded / Failed / Skipped / Total] 472 / 390 / 18 / 880:  88%|████████▊ | 880/1000 [2:58:22<24:19, 12.16s/it][Succeeded / Failed / Skipped / Total] 472 / 390 / 18 / 880:  88%|████████▊ | 881/1000 [2:58:27<24:06, 12.15s/it][Succeeded / Failed / Skipped / Total] 472 / 391 / 18 / 881:  88%|████████▊ | 881/1000 [2:58:27<24:06, 12.15s/it][Succeeded / Failed / Skipped / Total] 472 / 391 / 18 / 881:  88%|████████▊ | 882/1000 [2:58:27<23:52, 12.14s/it][Succeeded / Failed / Skipped / Total] 472 / 392 / 18 / 882:  88%|████████▊ | 882/1000 [2:58:27<23:52, 12.14s/it][Succeeded / Failed / Skipped / Total] 472 / 392 / 18 / 882:  88%|████████▊ | 883/1000 [2:58:44<23:40, 12.15s/it][Succeeded / Failed / Skipped / Total] 473 / 392 / 18 / 883:  88%|████████▊ | 883/1000 [2:58:44<23:40, 12.15s/it][Succeeded / Failed / Skipped / Total] 473 / 392 / 18 / 883:  88%|████████▊ | 884/1000 [2:59:00<23:29, 12.15s/it][Succeeded / Failed / Skipped / Total] 474 / 392 / 18 / 884:  88%|████████▊ | 884/1000 [2:59:00<23:29, 12.15s/it][Succeeded / Failed / Skipped / Total] 474 / 392 / 18 / 884:  88%|████████▊ | 885/1000 [2:59:06<23:16, 12.14s/it][Succeeded / Failed / Skipped / Total] 475 / 392 / 18 / 885:  88%|████████▊ | 885/1000 [2:59:06<23:16, 12.14s/it][Succeeded / Failed / Skipped / Total] 475 / 392 / 18 / 885:  89%|████████▊ | 886/1000 [2:59:15<23:03, 12.14s/it][Succeeded / Failed / Skipped / Total] 476 / 392 / 18 / 886:  89%|████████▊ | 886/1000 [2:59:15<23:03, 12.14s/it][Succeeded / Failed / Skipped / Total] 476 / 392 / 18 / 886:  89%|████████▊ | 887/1000 [2:59:36<22:52, 12.15s/it]--------------------------------------------- Result 879 ---------------------------------------------
Configure the servlet context --> Add filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[var]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 880 ---------------------------------------------
Execute the method --> Execute the command --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[command]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[command]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 881 ---------------------------------------------
Adds a new field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path push ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path push ( final CharSequence [[root]] ) { _push ( [[root]] ) ; if ( altPath != null ) { altPath . push ( [[root]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 882 ---------------------------------------------
Parse a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[i]] ) { return [[i]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[i]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 883 ---------------------------------------------
Convert jtxTransactionMode to DbTransactionMode . --> BbTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[b]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 884 ---------------------------------------------
Copies all entries from the given map into this one . --> utility methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[hold]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 885 ---------------------------------------------
Reads the property from the source object . --> Calls the getter method --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[c]] ( final Object source , final PropertyDescriptor [[variable]] ) { Getter getter = [[variable]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Appends the specified buffer to this buffer . --> Handles incoming messages --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[handler]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 476 / 393 / 18 / 887:  89%|████████▊ | 887/1000 [2:59:36<22:52, 12.15s/it][Succeeded / Failed / Skipped / Total] 476 / 393 / 18 / 887:  89%|████████▉ | 888/1000 [3:00:18<22:44, 12.18s/it][Succeeded / Failed / Skipped / Total] 476 / 394 / 18 / 888:  89%|████████▉ | 888/1000 [3:00:18<22:44, 12.18s/it][Succeeded / Failed / Skipped / Total] 476 / 394 / 18 / 888:  89%|████████▉ | 889/1000 [3:00:34<22:32, 12.19s/it][Succeeded / Failed / Skipped / Total] 477 / 394 / 18 / 889:  89%|████████▉ | 889/1000 [3:00:34<22:32, 12.19s/it][Succeeded / Failed / Skipped / Total] 477 / 394 / 18 / 889:  89%|████████▉ | 890/1000 [3:00:35<22:19, 12.17s/it][Succeeded / Failed / Skipped / Total] 477 / 395 / 18 / 890:  89%|████████▉ | 890/1000 [3:00:35<22:19, 12.17s/it][Succeeded / Failed / Skipped / Total] 477 / 395 / 18 / 890:  89%|████████▉ | 891/1000 [3:00:49<22:07, 12.18s/it][Succeeded / Failed / Skipped / Total] 478 / 395 / 18 / 891:  89%|████████▉ | 891/1000 [3:00:49<22:07, 12.18s/it][Succeeded / Failed / Skipped / Total] 478 / 395 / 18 / 891:  89%|████████▉ | 892/1000 [3:01:05<21:55, 12.18s/it][Succeeded / Failed / Skipped / Total] 479 / 395 / 18 / 892:  89%|████████▉ | 892/1000 [3:01:05<21:55, 12.18s/it][Succeeded / Failed / Skipped / Total] 479 / 395 / 18 / 892:  89%|████████▉ | 893/1000 [3:01:08<21:42, 12.17s/it][Succeeded / Failed / Skipped / Total] 479 / 396 / 18 / 893:  89%|████████▉ | 893/1000 [3:01:08<21:42, 12.17s/it][Succeeded / Failed / Skipped / Total] 479 / 396 / 18 / 893:  89%|████████▉ | 894/1000 [3:01:22<21:30, 12.17s/it]Gets all FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[string]] == null ) { FieldDescriptor [ ] [[string]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[rank]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[string]] [ [[rank]] ] = fieldDescriptor ; [[rank]] ++ ; } Arrays . sort ( [[string]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[string]] ; } return [[string]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Write this response to the given stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[agent]] ( final OutputStream out , final HttpProgressListener [[get]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
Write this object to the output stream . --> hold all available definitions --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , [[out]] ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[hold]] ( final OutputStream [[extension]] ) throws IOException { for ( Object [[definition]] : list ) { if ( [[definition]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[definition]] ; [[extension]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[definition]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[definition]] ; InputStream [[outside]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[outside]] , [[extension]] ) ; } finally { StreamUtil . close ( [[outside]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 890 ---------------------------------------------
Create a bean definition for registration . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[utility]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[value]] = [[utility]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[utility]] ) ; [[utility]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[utility]] , scope , wiringMode , [[value]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[utility]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 891 ---------------------------------------------
Returns a string value for the given key . --> get CharSequence --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[c]] ( final String [[method]] ) { CharSequence cs = ( CharSequence ) map . get ( [[method]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the long value for the given key . --> Get sequence number --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[sequence]] ( final String [[count]] ) { Number number = ( Number ) map . get ( [[count]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Write this object to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[read]] ( final Writer [[variable]] ) throws IOException { for ( Object [[load]] : list ) { if ( [[load]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[load]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[variable]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[load]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[load]] ; InputStream [[buffer]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[buffer]] , [[variable]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[buffer]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 894 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 480 / 396 / 18 / 894:  89%|████████▉ | 894/1000 [3:01:22<21:30, 12.17s/it][Succeeded / Failed / Skipped / Total] 480 / 396 / 18 / 894:  90%|████████▉ | 895/1000 [3:01:25<21:17, 12.16s/it][Succeeded / Failed / Skipped / Total] 481 / 396 / 18 / 895:  90%|████████▉ | 895/1000 [3:01:25<21:17, 12.16s/it][Succeeded / Failed / Skipped / Total] 481 / 396 / 18 / 895:  90%|████████▉ | 896/1000 [3:01:30<21:04, 12.15s/it][Succeeded / Failed / Skipped / Total] 482 / 396 / 18 / 896:  90%|████████▉ | 896/1000 [3:01:30<21:04, 12.15s/it][Succeeded / Failed / Skipped / Total] 482 / 396 / 18 / 896:  90%|████████▉ | 897/1000 [3:01:42<20:51, 12.15s/it][Succeeded / Failed / Skipped / Total] 483 / 396 / 18 / 897:  90%|████████▉ | 897/1000 [3:01:42<20:51, 12.15s/it][Succeeded / Failed / Skipped / Total] 483 / 396 / 18 / 897:  90%|████████▉ | 898/1000 [3:01:45<20:38, 12.14s/it][Succeeded / Failed / Skipped / Total] 483 / 397 / 18 / 898:  90%|████████▉ | 898/1000 [3:01:45<20:38, 12.14s/it][Succeeded / Failed / Skipped / Total] 483 / 397 / 18 / 898:  90%|████████▉ | 899/1000 [3:01:51<20:25, 12.14s/it][Succeeded / Failed / Skipped / Total] 484 / 397 / 18 / 899:  90%|████████▉ | 899/1000 [3:01:51<20:25, 12.14s/it][Succeeded / Failed / Skipped / Total] 484 / 397 / 18 / 899:  90%|█████████ | 900/1000 [3:01:58<20:13, 12.13s/it][Succeeded / Failed / Skipped / Total] 485 / 397 / 18 / 900:  90%|█████████ | 900/1000 [3:01:58<20:13, 12.13s/it][Succeeded / Failed / Skipped / Total] 485 / 397 / 18 / 900:  90%|█████████ | 901/1000 [3:02:00<19:59, 12.12s/it][Succeeded / Failed / Skipped / Total] 486 / 397 / 18 / 901:  90%|█████████ | 901/1000 [3:02:00<19:59, 12.12s/it][Succeeded / Failed / Skipped / Total] 486 / 397 / 18 / 901:  90%|█████████ | 902/1000 [3:02:09<19:47, 12.12s/it]Returns the integer value for the given key . --> Get example example --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[example]] ( final String [[p]] ) { Number [[c]] = ( Number ) map . get ( [[p]] ) ; if ( [[c]] == null ) { return null ; } if ( [[c]] instanceof Integer ) { return ( Integer ) [[c]] ; } return [[c]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Get a property value . --> get a property --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[val]] = ( T ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[ᵢ]] = ( T ) map . get ( key ) ; if ( [[ᵢ]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[ᵢ]] ) ; } if ( [[ᵢ]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[ᵢ]] ) ; } return [[ᵢ]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the Double value for the given key . --> Get count for given bit --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[counting]] ( final String [[bit]] ) { Number [[count]] = ( Number ) map . get ( [[bit]] ) ; if ( [[count]] == null ) { return null ; } if ( [[count]] instanceof Double ) { return ( Double ) [[count]] ; } return [[count]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Use the specified folder . --> Handle the mail --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[handle]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 898 ---------------------------------------------
Get float value . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[array]] ( final String key ) { Number [[file]] = ( Number ) map . get ( key ) ; if ( [[file]] == null ) { return null ; } if ( [[file]] instanceof Float ) { return ( Float ) [[file]] ; } return [[file]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Receive messages . --> Fetch all received messages --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[objects]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 900 ---------------------------------------------
Updates the flags for the given mailbox . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[test]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 901 ---------------------------------------------
Close folder if already opened . --> close var --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[var]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 902 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 486 / 398 / 18 / 902:  90%|█████████ | 902/1000 [3:02:09<19:47, 12.12s/it][Succeeded / Failed / Skipped / Total] 486 / 398 / 18 / 902:  90%|█████████ | 903/1000 [3:02:17<19:34, 12.11s/it][Succeeded / Failed / Skipped / Total] 487 / 398 / 18 / 903:  90%|█████████ | 903/1000 [3:02:17<19:34, 12.11s/it][Succeeded / Failed / Skipped / Total] 487 / 398 / 18 / 903:  90%|█████████ | 904/1000 [3:02:17<19:21, 12.10s/it][Succeeded / Failed / Skipped / Total] 487 / 398 / 19 / 904:  90%|█████████ | 904/1000 [3:02:17<19:21, 12.10s/it][Succeeded / Failed / Skipped / Total] 487 / 398 / 19 / 904:  90%|█████████ | 905/1000 [3:02:18<19:08, 12.09s/it][Succeeded / Failed / Skipped / Total] 488 / 398 / 19 / 905:  90%|█████████ | 905/1000 [3:02:18<19:08, 12.09s/it][Succeeded / Failed / Skipped / Total] 488 / 398 / 19 / 905:  91%|█████████ | 906/1000 [3:02:20<18:55, 12.08s/it][Succeeded / Failed / Skipped / Total] 489 / 398 / 19 / 906:  91%|█████████ | 906/1000 [3:02:20<18:55, 12.08s/it][Succeeded / Failed / Skipped / Total] 489 / 398 / 19 / 906:  91%|█████████ | 907/1000 [3:02:26<18:42, 12.07s/it][Succeeded / Failed / Skipped / Total] 490 / 398 / 19 / 907:  91%|█████████ | 907/1000 [3:02:26<18:42, 12.07s/it][Succeeded / Failed / Skipped / Total] 490 / 398 / 19 / 907:  91%|█████████ | 908/1000 [3:02:38<18:30, 12.07s/it][Succeeded / Failed / Skipped / Total] 491 / 398 / 19 / 908:  91%|█████████ | 908/1000 [3:02:38<18:30, 12.07s/it][Succeeded / Failed / Skipped / Total] 491 / 398 / 19 / 908:  91%|█████████ | 909/1000 [3:02:46<18:17, 12.06s/it][Succeeded / Failed / Skipped / Total] 492 / 398 / 19 / 909:  91%|█████████ | 909/1000 [3:02:46<18:17, 12.06s/it][Succeeded / Failed / Skipped / Total] 492 / 398 / 19 / 909:  91%|█████████ | 910/1000 [3:02:51<18:05, 12.06s/it][Succeeded / Failed / Skipped / Total] 493 / 398 / 19 / 910:  91%|█████████ | 910/1000 [3:02:51<18:05, 12.06s/it][Succeeded / Failed / Skipped / Total] 493 / 398 / 19 / 910:  91%|█████████ | 911/1000 [3:02:53<17:52, 12.05s/it][Succeeded / Failed / Skipped / Total] 494 / 398 / 19 / 911:  91%|█████████ | 911/1000 [3:02:53<17:52, 12.05s/it][Succeeded / Failed / Skipped / Total] 494 / 398 / 19 / 911:  91%|█████████ | 912/1000 [3:03:01<17:39, 12.04s/it]Adds a new string value . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String key , final String [[link]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[link]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 903 ---------------------------------------------
Create alias for target . --> Convert a string to array --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[array]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Set the raw data . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Looks up a named parameter by name . --> Return hash by name --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( name ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[hash]] ( final String name ) { DbQueryNamedParameter [[j]] = rootNP ; while ( [[j]] != null ) { if ( [[j]] . equalsName ( name ) ) { return [[j]] ; } [[j]] = [[j]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 906 ---------------------------------------------
Validate the action . --> Create a reference to this object --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[reference]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 907 ---------------------------------------------
Add a new violation --> Add new violations --> Socre: 1.0

[[[[Adv]]]]: protected void addViolation ( final String name , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String name , final Object [[list]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[list]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> Loads classpath from classpath --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[fs]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target class --> Define transformation --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[f]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target object . --> Setter for InputStream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[pt]] ( final InputStream [[set]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[set]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 911 ---------------------------------------------
Processes input stream . --> Must be called from constructor --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[array]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 912 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 495 / 398 / 19 / 912:  91%|█████████ | 912/1000 [3:03:01<17:39, 12.04s/it][Succeeded / Failed / Skipped / Total] 495 / 398 / 19 / 912:  91%|█████████▏| 913/1000 [3:03:08<17:27, 12.04s/it][Succeeded / Failed / Skipped / Total] 496 / 398 / 19 / 913:  91%|█████████▏| 913/1000 [3:03:08<17:27, 12.04s/it][Succeeded / Failed / Skipped / Total] 496 / 398 / 19 / 913:  91%|█████████▏| 914/1000 [3:03:09<17:13, 12.02s/it][Succeeded / Failed / Skipped / Total] 497 / 398 / 19 / 914:  91%|█████████▏| 914/1000 [3:03:09<17:13, 12.02s/it][Succeeded / Failed / Skipped / Total] 497 / 398 / 19 / 914:  92%|█████████▏| 915/1000 [3:03:28<17:02, 12.03s/it][Succeeded / Failed / Skipped / Total] 497 / 399 / 19 / 915:  92%|█████████▏| 915/1000 [3:03:28<17:02, 12.03s/it][Succeeded / Failed / Skipped / Total] 497 / 399 / 19 / 915:  92%|█████████▏| 916/1000 [3:03:39<16:50, 12.03s/it][Succeeded / Failed / Skipped / Total] 498 / 399 / 19 / 916:  92%|█████████▏| 916/1000 [3:03:39<16:50, 12.03s/it][Succeeded / Failed / Skipped / Total] 498 / 399 / 19 / 916:  92%|█████████▏| 917/1000 [3:03:53<16:38, 12.03s/it][Succeeded / Failed / Skipped / Total] 499 / 399 / 19 / 917:  92%|█████████▏| 917/1000 [3:03:53<16:38, 12.03s/it][Succeeded / Failed / Skipped / Total] 499 / 399 / 19 / 917:  92%|█████████▏| 918/1000 [3:03:57<16:25, 12.02s/it][Succeeded / Failed / Skipped / Total] 499 / 400 / 19 / 918:  92%|█████████▏| 918/1000 [3:03:57<16:25, 12.02s/it][Succeeded / Failed / Skipped / Total] 499 / 400 / 19 / 918:  92%|█████████▏| 919/1000 [3:04:18<16:14, 12.03s/it]Create the proxy . --> Create a new user --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[user]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[user]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[user]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Define the class . --> Execute the pipeline --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[batch]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 914 ---------------------------------------------
Creates a new Proxetta instance . --> Returns the Proxetta object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[definition]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Sets the download file name . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . [[downloadFileName]] = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[file]] ) { this . [[info]] = [[file]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[file]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the from address . --> Add a g recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[g]] ( final String [[out]] , final String from ) { return [[g]] ( new EmailAddress ( [[out]] , [[g]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Adds a to recipient . --> Add a recipient --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String [[to]] ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[an]] , final String [[ip]] ) { return to ( new EmailAddress ( [[an]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Set the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[fc]] ( final EmailAddress [[stack]] ) { this . to = ArraysUtil . append ( this . to , [[fc]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 919 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 499 / 401 / 19 / 919:  92%|█████████▏| 919/1000 [3:04:18<16:14, 12.03s/it][Succeeded / Failed / Skipped / Total] 499 / 401 / 19 / 919:  92%|█████████▏| 920/1000 [3:04:19<16:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 499 / 402 / 19 / 920:  92%|█████████▏| 920/1000 [3:04:19<16:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 499 / 402 / 19 / 920:  92%|█████████▏| 921/1000 [3:04:44<15:50, 12.04s/it][Succeeded / Failed / Skipped / Total] 500 / 402 / 19 / 921:  92%|█████████▏| 921/1000 [3:04:44<15:50, 12.04s/it][Succeeded / Failed / Skipped / Total] 500 / 402 / 19 / 921:  92%|█████████▏| 922/1000 [3:04:54<15:38, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 403 / 19 / 922:  92%|█████████▏| 922/1000 [3:04:54<15:38, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 403 / 19 / 922:  92%|█████████▏| 923/1000 [3:05:05<15:26, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 404 / 19 / 923:  92%|█████████▏| 923/1000 [3:05:05<15:26, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 404 / 19 / 923:  92%|█████████▏| 924/1000 [3:05:19<15:14, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 405 / 19 / 924:  92%|█████████▏| 924/1000 [3:05:19<15:14, 12.03s/it][Succeeded / Failed / Skipped / Total] 500 / 405 / 19 / 924:  92%|█████████▎| 925/1000 [3:05:21<15:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 501 / 405 / 19 / 925:  92%|█████████▎| 925/1000 [3:05:21<15:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 501 / 405 / 19 / 925:  93%|█████████▎| 926/1000 [3:05:28<14:49, 12.02s/it][Succeeded / Failed / Skipped / Total] 502 / 405 / 19 / 926:  93%|█████████▎| 926/1000 [3:05:28<14:49, 12.02s/it][Succeeded / Failed / Skipped / Total] 502 / 405 / 19 / 926:  93%|█████████▎| 927/1000 [3:05:32<14:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 503 / 405 / 19 / 927:  93%|█████████▎| 927/1000 [3:05:32<14:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 503 / 405 / 19 / 927:  93%|█████████▎| 928/1000 [3:05:36<14:24, 12.00s/it]Dump proxy class in debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[exit]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the REPLACEME for the recipient . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[page]] = ArraysUtil . join ( this . [[page]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc address . --> Joins the given list of emails --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[fs]] ( final EmailAddress ... [[example]] ) { this . [[a]] = ArraysUtil . join ( this . [[a]] , valueOrEmptyArray ( [[example]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Create a text message with the specified text and encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[g]] ( final String [[print]] , final String [[style]] ) { return message ( new EmailMessage ( [[print]] , MimeTypes . MIME_TEXT_PLAIN , [[style]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Sets a header . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[f]] ( final String [[function]] , final String value ) { headers . put ( [[function]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 924 ---------------------------------------------
Creates a new html message with the specified encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[pr]] ( final String [[data]] , final String [[java]] ) { return message ( new EmailMessage ( [[data]] , MimeTypes . MIME_TEXT_HTML , [[java]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
Get the value of a system property --> Utility for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[main]] ( final String [[foo]] , final String defaultValue ) { Objects . requireNonNull ( [[foo]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[foo]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[foo]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the integer value for the specified name . --> Get integer from bit --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[bit]] , final int defaultValue ) { String value = get ( [[bit]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 927 ---------------------------------------------
Gets boolean value . --> Checks whether the given name is like or not --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[like]] ( final String name , final boolean [[code]] ) { String value = get ( name ) ; if ( value == null ) { return [[code]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[code]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 928 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 503 / 406 / 19 / 928:  93%|█████████▎| 928/1000 [3:05:36<14:24, 12.00s/it][Succeeded / Failed / Skipped / Total] 503 / 406 / 19 / 928:  93%|█████████▎| 929/1000 [3:05:43<14:11, 11.99s/it][Succeeded / Failed / Skipped / Total] 504 / 406 / 19 / 929:  93%|█████████▎| 929/1000 [3:05:43<14:11, 11.99s/it][Succeeded / Failed / Skipped / Total] 504 / 406 / 19 / 929:  93%|█████████▎| 930/1000 [3:06:13<14:00, 12.01s/it][Succeeded / Failed / Skipped / Total] 505 / 406 / 19 / 930:  93%|█████████▎| 930/1000 [3:06:13<14:00, 12.01s/it][Succeeded / Failed / Skipped / Total] 505 / 406 / 19 / 930:  93%|█████████▎| 931/1000 [3:06:21<13:48, 12.01s/it][Succeeded / Failed / Skipped / Total] 506 / 406 / 19 / 931:  93%|█████████▎| 931/1000 [3:06:21<13:48, 12.01s/it][Succeeded / Failed / Skipped / Total] 506 / 406 / 19 / 931:  93%|█████████▎| 932/1000 [3:06:41<13:37, 12.02s/it][Succeeded / Failed / Skipped / Total] 507 / 406 / 19 / 932:  93%|█████████▎| 932/1000 [3:06:41<13:37, 12.02s/it][Succeeded / Failed / Skipped / Total] 507 / 406 / 19 / 932:  93%|█████████▎| 933/1000 [3:06:59<13:25, 12.03s/it][Succeeded / Failed / Skipped / Total] 507 / 407 / 19 / 933:  93%|█████████▎| 933/1000 [3:06:59<13:25, 12.03s/it][Succeeded / Failed / Skipped / Total] 507 / 407 / 19 / 933:  93%|█████████▎| 934/1000 [3:07:15<13:13, 12.03s/it][Succeeded / Failed / Skipped / Total] 508 / 407 / 19 / 934:  93%|█████████▎| 934/1000 [3:07:15<13:13, 12.03s/it][Succeeded / Failed / Skipped / Total] 508 / 407 / 19 / 934:  94%|█████████▎| 935/1000 [3:07:18<13:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 509 / 407 / 19 / 935:  94%|█████████▎| 935/1000 [3:07:18<13:01, 12.02s/it][Succeeded / Failed / Skipped / Total] 509 / 407 / 19 / 935:  94%|█████████▎| 936/1000 [3:07:31<12:49, 12.02s/it][Succeeded / Failed / Skipped / Total] 509 / 408 / 19 / 936:  94%|█████████▎| 936/1000 [3:07:31<12:49, 12.02s/it][Succeeded / Failed / Skipped / Total] 509 / 408 / 19 / 936:  94%|█████████▎| 937/1000 [3:07:32<12:36, 12.01s/it]Returns the resolved parameters of the method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[var]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 929 ---------------------------------------------
Serialize a key value . --> Add an option to the current path --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[ception]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Resolves a path with the given value . --> Add a bar to the bar --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[bar]] ( String path , String value ) { boolean absolutePath = "[[check]]" != "[[check]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup alias . --> Access the action path --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[access]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[nt]] = actionsManager . lookup ( alias ) ; if ( [[nt]] != null ) { value = [[nt]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve alias . --> Resolve a bit --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int [[i]] = 0 ; int len = [[value]] . length ( ) ; while ( [[i]] < len ) { int ndx = [[value]] . indexOf ( ' ' , [[i]] ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String [[bit]] ) { final StringBuilder result = new StringBuilder ( [[bit]] . length ( ) ) ; int [[bin]] = 0 ; int len = [[bit]] . length ( ) ; while ( [[bin]] < len ) { int ndx = [[bit]] . indexOf ( ' ' , [[bin]] ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the long value of the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[foo]] ( final String name , final long [[message]] ) { String value = get ( name ) ; if ( value == null ) { return [[message]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[message]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the first dot after a slash . --> Get name of a space --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[name]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Return the last index of a slash . --> return - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[basic]] ( final String str ) { int [[dat]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[dat]] ) ; if ( dotNdx == - 1 ) { if ( [[dat]] == - 1 ) { return - 1 ; } [[dat]] ++ ; if ( [[dat]] < str . length ( ) - 1 ) { dotNdx = [[dat]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the last index of a dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[add]] ( final String [[r]] ) { int [[a]] = [[r]] . lastIndexOf ( ' ' ) ; [[a]] ++ ; return StringUtil . lastIndexOf ( [[r]] , ' ' , [[r]] . length ( ) , [[a]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 510 / 408 / 19 / 937:  94%|█████████▎| 937/1000 [3:07:32<12:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 510 / 408 / 19 / 937:  94%|█████████▍| 938/1000 [3:07:38<12:24, 12.00s/it][Succeeded / Failed / Skipped / Total] 510 / 409 / 19 / 938:  94%|█████████▍| 938/1000 [3:07:38<12:24, 12.00s/it][Succeeded / Failed / Skipped / Total] 510 / 409 / 19 / 938:  94%|█████████▍| 939/1000 [3:07:52<12:12, 12.00s/it][Succeeded / Failed / Skipped / Total] 511 / 409 / 19 / 939:  94%|█████████▍| 939/1000 [3:07:52<12:12, 12.00s/it][Succeeded / Failed / Skipped / Total] 511 / 409 / 19 / 939:  94%|█████████▍| 940/1000 [3:07:53<11:59, 11.99s/it][Succeeded / Failed / Skipped / Total] 512 / 409 / 19 / 940:  94%|█████████▍| 940/1000 [3:07:53<11:59, 11.99s/it][Succeeded / Failed / Skipped / Total] 512 / 409 / 19 / 940:  94%|█████████▍| 941/1000 [3:07:54<11:46, 11.98s/it][Succeeded / Failed / Skipped / Total] 512 / 409 / 20 / 941:  94%|█████████▍| 941/1000 [3:07:54<11:46, 11.98s/it][Succeeded / Failed / Skipped / Total] 512 / 409 / 20 / 941:  94%|█████████▍| 942/1000 [3:08:27<11:36, 12.00s/it][Succeeded / Failed / Skipped / Total] 513 / 409 / 20 / 942:  94%|█████████▍| 942/1000 [3:08:27<11:36, 12.00s/it][Succeeded / Failed / Skipped / Total] 513 / 409 / 20 / 942:  94%|█████████▍| 943/1000 [3:08:37<11:24, 12.00s/it][Succeeded / Failed / Skipped / Total] 513 / 410 / 20 / 943:  94%|█████████▍| 943/1000 [3:08:37<11:24, 12.00s/it][Succeeded / Failed / Skipped / Total] 513 / 410 / 20 / 943:  94%|█████████▍| 944/1000 [3:09:07<11:13, 12.02s/it][Succeeded / Failed / Skipped / Total] 514 / 410 / 20 / 944:  94%|█████████▍| 944/1000 [3:09:07<11:13, 12.02s/it][Succeeded / Failed / Skipped / Total] 514 / 410 / 20 / 944:  94%|█████████▍| 945/1000 [3:09:25<11:01, 12.03s/it][Succeeded / Failed / Skipped / Total] 515 / 410 / 20 / 945:  94%|█████████▍| 945/1000 [3:09:25<11:01, 12.03s/it][Succeeded / Failed / Skipped / Total] 515 / 410 / 20 / 945:  95%|█████████▍| 946/1000 [3:09:44<10:49, 12.03s/it][Succeeded / Failed / Skipped / Total] 516 / 410 / 20 / 946:  95%|█████████▍| 946/1000 [3:09:44<10:49, 12.03s/it][Succeeded / Failed / Skipped / Total] 516 / 410 / 20 / 946:  95%|█████████▍| 947/1000 [3:10:00<10:38, 12.04s/it]Strips the last letter of the name --> Returns the first letter letter of the name --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[c]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 938 ---------------------------------------------
Resolves the given result path with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[name]] ( final String path , final String [[branch]] ) { final ResultPath resultPath = resolveResultPath ( path , [[branch]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes this sketch with a new key . --> Initializes this sketch --> Socre: 1.0

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int [[number]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Mix rotation . --> Elem echo --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[echo]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Schedule a key schedule --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Performs a demix . --> Subtract a variable from j --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int j , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int [[var]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[array]] = r [ [[var]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Resolve schema name --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[execute]] ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
Encrypt a block . --> Encrypt the given byte array at the given offset --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[buffer]] ( final byte [ ] [[buffer]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[buffer]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 945 ---------------------------------------------
Convert a byte array to a long array . --> Program programmatically --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[i8]] = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[program]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[extension]] = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , [[extension]] ) ; [[extension]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 946 ---------------------------------------------
Initializes this block with the specified key message . --> Execute the algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[execute]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[execute]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 516 / 411 / 20 / 947:  95%|█████████▍| 947/1000 [3:10:00<10:38, 12.04s/it][Succeeded / Failed / Skipped / Total] 516 / 411 / 20 / 947:  95%|█████████▍| 948/1000 [3:10:04<10:25, 12.03s/it][Succeeded / Failed / Skipped / Total] 517 / 411 / 20 / 948:  95%|█████████▍| 948/1000 [3:10:04<10:25, 12.03s/it][Succeeded / Failed / Skipped / Total] 517 / 411 / 20 / 948:  95%|█████████▍| 949/1000 [3:10:04<10:12, 12.02s/it][Succeeded / Failed / Skipped / Total] 517 / 411 / 21 / 949:  95%|█████████▍| 949/1000 [3:10:04<10:12, 12.02s/it][Succeeded / Failed / Skipped / Total] 517 / 411 / 21 / 949:  95%|█████████▌| 950/1000 [3:10:15<10:00, 12.02s/it][Succeeded / Failed / Skipped / Total] 518 / 411 / 21 / 950:  95%|█████████▌| 950/1000 [3:10:15<10:00, 12.02s/it][Succeeded / Failed / Skipped / Total] 518 / 411 / 21 / 950:  95%|█████████▌| 951/1000 [3:10:15<09:48, 12.00s/it][Succeeded / Failed / Skipped / Total] 519 / 411 / 21 / 951:  95%|█████████▌| 951/1000 [3:10:15<09:48, 12.00s/it][Succeeded / Failed / Skipped / Total] 519 / 411 / 21 / 951:  95%|█████████▌| 952/1000 [3:10:34<09:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 520 / 411 / 21 / 952:  95%|█████████▌| 952/1000 [3:10:34<09:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 520 / 411 / 21 / 952:  95%|█████████▌| 953/1000 [3:11:17<09:26, 12.04s/it][Succeeded / Failed / Skipped / Total] 520 / 412 / 21 / 953:  95%|█████████▌| 953/1000 [3:11:17<09:26, 12.04s/it][Succeeded / Failed / Skipped / Total] 520 / 412 / 21 / 953:  95%|█████████▌| 954/1000 [3:12:01<09:15, 12.08s/it]Returns the path of this method . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[swap]] ( ) { if ( methref != null ) { final String [[jump]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[jump]] ; } return [[swap]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 948 ---------------------------------------------
Resolve column names . --> constructor for DbEntityColumnDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[construct]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Compresses the given file . --> Driver zip implementation --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[driver]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[ex]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[ex]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Remove bounds . --> template --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( [[s]] ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[template]] ( final char [[d]] , final char e , final String [[ll]] ) { if ( [[ll]] == null || [[ll]] . length ( ) < 2 ) { return [[ll]] ; } if ( [[ll]] . startsWith ( String . valueOf ( [[d]] ) ) && [[ll]] . endsWith ( String . valueOf ( e ) ) ) { return [[ll]] . substring ( 1 , [[ll]] . length ( ) - 1 ) ; } return [[ll]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 952 ---------------------------------------------
Unzips a zip file into a directory --> Unzip a set of files --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[set]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[set]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[archive]] ( final File [[archives]] ) throws IOException { if ( [[archives]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[archives]] ) ; String gzipName = [[archives]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 520 / 413 / 21 / 954:  95%|█████████▌| 954/1000 [3:12:01<09:15, 12.08s/it][Succeeded / Failed / Skipped / Total] 520 / 413 / 21 / 954:  96%|█████████▌| 955/1000 [3:12:30<09:04, 12.10s/it][Succeeded / Failed / Skipped / Total] 521 / 413 / 21 / 955:  96%|█████████▌| 955/1000 [3:12:30<09:04, 12.10s/it][Succeeded / Failed / Skipped / Total] 521 / 413 / 21 / 955:  96%|█████████▌| 956/1000 [3:12:31<08:51, 12.08s/it][Succeeded / Failed / Skipped / Total] 522 / 413 / 21 / 956:  96%|█████████▌| 956/1000 [3:12:31<08:51, 12.08s/it][Succeeded / Failed / Skipped / Total] 522 / 413 / 21 / 956:  96%|█████████▌| 957/1000 [3:12:39<08:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 523 / 413 / 21 / 957:  96%|█████████▌| 957/1000 [3:12:39<08:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 523 / 413 / 21 / 957:  96%|█████████▌| 958/1000 [3:13:02<08:27, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 414 / 21 / 958:  96%|█████████▌| 958/1000 [3:13:02<08:27, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 414 / 21 / 958:  96%|█████████▌| 959/1000 [3:13:18<08:15, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 415 / 21 / 959:  96%|█████████▌| 959/1000 [3:13:18<08:15, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 415 / 21 / 959:  96%|█████████▌| 960/1000 [3:13:27<08:03, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 416 / 21 / 960:  96%|█████████▌| 960/1000 [3:13:27<08:03, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 416 / 21 / 960:  96%|█████████▌| 961/1000 [3:13:39<07:51, 12.09s/it]Adds a file to the ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File [[file]] , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = [[file]] . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean [[isDir]] = [[file]] . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[unless]] ( final ZipOutputStream [[e]] , final File [[status]] , String [[text]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[status]] . exists ( ) ) { throw new FileNotFoundException ( [[status]] . toString ( ) ) ; } if ( [[text]] == null ) { [[text]] = [[status]] . getName ( ) ; } while ( [[text]] . length ( ) != 0 && [[text]] . charAt ( 0 ) == ' ' ) { [[text]] = [[text]] . substring ( 1 ) ; } boolean [[type]] = [[status]] . isDirectory ( ) ; if ( [[type]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the field descriptor for the given name . --> Return a FieldDescriptor matching the operator --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[declared]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[o]] ( final String [[foo]] , final boolean [[operator]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[foo]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[operator]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
List a zip file . --> Returns an unmodifiable list of elements --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[array]] ( final File [[elements]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[elements]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 957 ---------------------------------------------
Get the PropertyDescriptor with the given name and flag . --> Get the PropertyDescriptor for sent --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[q]] ( final String [[sent]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[sent]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
Adds the content to a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[unless]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the bundle name for the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[skip]] ( final ServletRequest request , final String [[order]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[order]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[order]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the session s locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[list]] ( final HttpSession [[method]] ) { Locale [[at]] = ( Locale ) [[method]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[at]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[at]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 523 / 417 / 21 / 961:  96%|█████████▌| 961/1000 [3:13:39<07:51, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 417 / 21 / 961:  96%|█████████▌| 962/1000 [3:13:45<07:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 523 / 418 / 21 / 962:  96%|█████████▌| 962/1000 [3:13:45<07:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 523 / 418 / 21 / 962:  96%|█████████▋| 963/1000 [3:14:06<07:27, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 419 / 21 / 963:  96%|█████████▋| 963/1000 [3:14:06<07:27, 12.09s/it][Succeeded / Failed / Skipped / Total] 523 / 419 / 21 / 963:  96%|█████████▋| 964/1000 [3:14:31<07:15, 12.11s/it][Succeeded / Failed / Skipped / Total] 523 / 420 / 21 / 964:  96%|█████████▋| 964/1000 [3:14:31<07:15, 12.11s/it][Succeeded / Failed / Skipped / Total] 523 / 420 / 21 / 964:  96%|█████████▋| 965/1000 [3:14:40<07:03, 12.10s/it][Succeeded / Failed / Skipped / Total] 524 / 420 / 21 / 965:  96%|█████████▋| 965/1000 [3:14:40<07:03, 12.10s/it][Succeeded / Failed / Skipped / Total] 524 / 420 / 21 / 965:  97%|█████████▋| 966/1000 [3:14:56<06:51, 12.11s/it][Succeeded / Failed / Skipped / Total] 524 / 421 / 21 / 966:  97%|█████████▋| 966/1000 [3:14:56<06:51, 12.11s/it][Succeeded / Failed / Skipped / Total] 524 / 421 / 21 / 966:  97%|█████████▋| 967/1000 [3:15:17<06:39, 12.12s/it][Succeeded / Failed / Skipped / Total] 525 / 421 / 21 / 967:  97%|█████████▋| 967/1000 [3:15:17<06:39, 12.12s/it][Succeeded / Failed / Skipped / Total] 525 / 421 / 21 / 967:  97%|█████████▋| 968/1000 [3:15:30<06:27, 12.12s/it]Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[begin]] ( final HttpSession session , final String [[list]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[list]] ) ; } Locale [[list]] = Locale . forLanguageTag ( [[list]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[list]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Adds profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[into]] ( final String ... [[function]] ) { if ( [[function]] == null ) { return this ; } for ( String [[into]] : [[function]] ) { addProfiles ( [[into]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Get a long from the buffer at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[program]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[loop]] ( final int [[blocks]] , final Label [ ] labels ) { if ( labels [ [[blocks]] ] == null ) { labels [ [[blocks]] ] = new Label ( ) ; } return labels [ [[blocks]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
Filters the parameters for the given bean name . --> Return header after beanName --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean [[resolveReferenceParams]] ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[list]] . add ( key ) ; if ( ! [[resolveReferenceParams]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[after]] ( String beanName , final boolean [[c]] ) { beanName = beanName + ' ' ; List < String > [[header]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[array]] : params . entrySet ( ) ) { String key = [[array]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[header]] . add ( key ) ; if ( ! [[c]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 966 ---------------------------------------------
Get the bytecode offset for a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[name]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads the contents of a stream into a byte array . --> Read data from InputStream --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[buffer]] ( final InputStream [[parameter]] , final boolean [[argument]] ) throws IOException { if ( [[parameter]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[parameter]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[argument]] ) { [[parameter]] . [[argument]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 526 / 421 / 21 / 968:  97%|█████████▋| 968/1000 [3:15:30<06:27, 12.12s/it][Succeeded / Failed / Skipped / Total] 526 / 421 / 21 / 968:  97%|█████████▋| 969/1000 [3:16:04<06:16, 12.14s/it][Succeeded / Failed / Skipped / Total] 527 / 421 / 21 / 969:  97%|█████████▋| 969/1000 [3:16:04<06:16, 12.14s/it][Succeeded / Failed / Skipped / Total] 527 / 421 / 21 / 969:  97%|█████████▋| 970/1000 [3:16:07<06:03, 12.13s/it][Succeeded / Failed / Skipped / Total] 528 / 421 / 21 / 970:  97%|█████████▋| 970/1000 [3:16:07<06:03, 12.13s/it][Succeeded / Failed / Skipped / Total] 528 / 421 / 21 / 970:  97%|█████████▋| 971/1000 [3:16:08<05:51, 12.12s/it][Succeeded / Failed / Skipped / Total] 529 / 421 / 21 / 971:  97%|█████████▋| 971/1000 [3:16:08<05:51, 12.12s/it][Succeeded / Failed / Skipped / Total] 529 / 421 / 21 / 971:  97%|█████████▋| 972/1000 [3:16:33<05:39, 12.13s/it][Succeeded / Failed / Skipped / Total] 529 / 422 / 21 / 972:  97%|█████████▋| 972/1000 [3:16:33<05:39, 12.13s/it][Succeeded / Failed / Skipped / Total] 529 / 422 / 21 / 972:  97%|█████████▋| 973/1000 [3:16:47<05:27, 12.14s/it][Succeeded / Failed / Skipped / Total] 530 / 422 / 21 / 973:  97%|█████████▋| 973/1000 [3:16:47<05:27, 12.14s/it][Succeeded / Failed / Skipped / Total] 530 / 422 / 21 / 973:  97%|█████████▋| 974/1000 [3:16:53<05:15, 12.13s/it][Succeeded / Failed / Skipped / Total] 531 / 422 / 21 / 974:  97%|█████████▋| 974/1000 [3:16:53<05:15, 12.13s/it][Succeeded / Failed / Skipped / Total] 531 / 422 / 21 / 974:  98%|█████████▊| 975/1000 [3:17:08<05:03, 12.13s/it]Read element values . --> Append function offset --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int currentOffset = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[function]] ( final AnnotationVisitor [[ac]] , final int [[f]] , final boolean named , final char [ ] charBuffer ) { int currentOffset = [[f]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
Read bootstrap method attribute . --> Application procedure procedure --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[procedure]] ( final int [[n]] ) { char [ ] charBuffer = new char [ [[n]] ] ; int [[a]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[a]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
Returns the first CtorDescriptor that matches the given arguments . --> Returns the first ctorDescriptor found in this descriptor --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[a]] ( final Class ... [[sort]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[sort]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[sort]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 971 ---------------------------------------------
Reads the verification type information . --> E echo an alert message --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[echo]] ( final int [[alert]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[profile]] ) { int currentOffset = [[alert]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[profile]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 972 ---------------------------------------------
Returns the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[fix]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 973 ---------------------------------------------
Initializes the filter . --> Servlet support --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[dir]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 974 ---------------------------------------------
Creates the request map . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[function]] ( final HttpServletRequest [[ra]] ) { Map < String , TransientBeanData > [[context]] = new HashMap <> ( ) ; [[ra]] . setAttribute ( ATTR_NAME , [[context]] ) ; return [[context]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 532 / 422 / 21 / 975:  98%|█████████▊| 975/1000 [3:17:08<05:03, 12.13s/it][Succeeded / Failed / Skipped / Total] 532 / 422 / 21 / 975:  98%|█████████▊| 976/1000 [3:17:13<04:50, 12.12s/it][Succeeded / Failed / Skipped / Total] 532 / 423 / 21 / 976:  98%|█████████▊| 976/1000 [3:17:13<04:50, 12.12s/it][Succeeded / Failed / Skipped / Total] 532 / 423 / 21 / 976:  98%|█████████▊| 977/1000 [3:17:16<04:38, 12.12s/it][Succeeded / Failed / Skipped / Total] 532 / 424 / 21 / 977:  98%|█████████▊| 977/1000 [3:17:16<04:38, 12.12s/it][Succeeded / Failed / Skipped / Total] 532 / 424 / 21 / 977:  98%|█████████▊| 978/1000 [3:17:22<04:26, 12.11s/it][Succeeded / Failed / Skipped / Total] 533 / 424 / 21 / 978:  98%|█████████▊| 978/1000 [3:17:22<04:26, 12.11s/it][Succeeded / Failed / Skipped / Total] 533 / 424 / 21 / 978:  98%|█████████▊| 979/1000 [3:17:23<04:14, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 424 / 21 / 979:  98%|█████████▊| 979/1000 [3:17:23<04:14, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 424 / 21 / 979:  98%|█████████▊| 980/1000 [3:17:49<04:02, 12.11s/it][Succeeded / Failed / Skipped / Total] 534 / 425 / 21 / 980:  98%|█████████▊| 980/1000 [3:17:49<04:02, 12.11s/it][Succeeded / Failed / Skipped / Total] 534 / 425 / 21 / 980:  98%|█████████▊| 981/1000 [3:18:00<03:50, 12.11s/it][Succeeded / Failed / Skipped / Total] 534 / 426 / 21 / 981:  98%|█████████▊| 981/1000 [3:18:00<03:50, 12.11s/it][Succeeded / Failed / Skipped / Total] 534 / 426 / 21 / 981:  98%|█████████▊| 982/1000 [3:18:01<03:37, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 427 / 21 / 982:  98%|█████████▊| 982/1000 [3:18:01<03:37, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 427 / 21 / 982:  98%|█████████▊| 983/1000 [3:18:11<03:25, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 428 / 21 / 983:  98%|█████████▊| 983/1000 [3:18:11<03:25, 12.10s/it][Succeeded / Failed / Skipped / Total] 534 / 428 / 21 / 983:  98%|█████████▊| 984/1000 [3:18:18<03:13, 12.09s/it]Add search path . --> Add function to find function --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[function]] ( final URI searchPath ) { File file ; try { file = new File ( [[function]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[function]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 976 ---------------------------------------------
Return all constructors of the class . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int i = 0 ; i < [[ctors]] . length ; i ++ ) { Constructor ctor = [[ctors]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[definition]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[definition]] . length ] ; for ( int i = 0 ; i < [[definition]] . length ; i ++ ) { Constructor ctor = [[definition]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 977 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[declaration]] ( final Object [[condition]] ) { final Class valueComponentType = [[condition]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[test]] ; if ( valueComponentType . isPrimitive ( ) ) { [[test]] = convertPrimitiveArrayToArray ( [[condition]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Registers a file consumer . --> Adds a buffer to buffer . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[buffer]] ( final Consumer < File > [[null]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[null]] ) ; } else { consumers . add ( [[null]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 979 ---------------------------------------------
Add search path . --> Access file access --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[access]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[access]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[access]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Adds the given file path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[a]] ( final File [[access]] ) { if ( ! [[access]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[access]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 981 ---------------------------------------------
Includes given patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[element]] ( final String ... [[array]] ) { for ( String pattern : [[array]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Exclude given patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[function]] ( final String ... [[end]] ) { for ( String [[sample]] : [[end]] ) { rules . exclude ( [[sample]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Find all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[update]] ( ) { List < File > [[style]] = new ArrayList <> ( ) ; File [[size]] ; while ( ( [[size]] = nextFile ( ) ) != null ) { [[style]] . add ( [[size]] ) ; } return [[style]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 429 / 21 / 984:  98%|█████████▊| 984/1000 [3:18:18<03:13, 12.09s/it][Succeeded / Failed / Skipped / Total] 534 / 429 / 21 / 984:  98%|█████████▊| 985/1000 [3:18:33<03:01, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 429 / 21 / 985:  98%|█████████▊| 985/1000 [3:18:33<03:01, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 429 / 21 / 985:  99%|█████████▊| 986/1000 [3:18:41<02:49, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 430 / 21 / 986:  99%|█████████▊| 986/1000 [3:18:41<02:49, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 430 / 21 / 986:  99%|█████████▊| 987/1000 [3:18:48<02:37, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 431 / 21 / 987:  99%|█████████▊| 987/1000 [3:18:48<02:37, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 431 / 21 / 987:  99%|█████████▉| 988/1000 [3:19:16<02:25, 12.10s/it][Succeeded / Failed / Skipped / Total] 535 / 432 / 21 / 988:  99%|█████████▉| 988/1000 [3:19:16<02:25, 12.10s/it][Succeeded / Failed / Skipped / Total] 535 / 432 / 21 / 988:  99%|█████████▉| 989/1000 [3:19:25<02:13, 12.10s/it][Succeeded / Failed / Skipped / Total] 535 / 433 / 21 / 989:  99%|█████████▉| 989/1000 [3:19:25<02:13, 12.10s/it][Succeeded / Failed / Skipped / Total] 535 / 433 / 21 / 989:  99%|█████████▉| 990/1000 [3:19:28<02:00, 12.09s/it]Iterates over the files in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[name]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 985 ---------------------------------------------
Gets the output writer . --> Get the PrintWriter --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[thread]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Determine the wiring mode for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[foo]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[log]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 988 ---------------------------------------------
Initialize todo . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the binary representation of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[exception]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 535 / 434 / 21 / 990:  99%|█████████▉| 990/1000 [3:19:28<02:00, 12.09s/it][Succeeded / Failed / Skipped / Total] 535 / 434 / 21 / 990:  99%|█████████▉| 991/1000 [3:19:42<01:48, 12.09s/it][Succeeded / Failed / Skipped / Total] 536 / 434 / 21 / 991:  99%|█████████▉| 991/1000 [3:19:42<01:48, 12.09s/it][Succeeded / Failed / Skipped / Total] 536 / 434 / 21 / 991:  99%|█████████▉| 992/1000 [3:19:57<01:36, 12.09s/it][Succeeded / Failed / Skipped / Total] 536 / 435 / 21 / 992:  99%|█████████▉| 992/1000 [3:19:57<01:36, 12.09s/it][Succeeded / Failed / Skipped / Total] 536 / 435 / 21 / 992:  99%|█████████▉| 993/1000 [3:20:00<01:24, 12.08s/it][Succeeded / Failed / Skipped / Total] 536 / 436 / 21 / 993:  99%|█████████▉| 993/1000 [3:20:00<01:24, 12.08s/it][Succeeded / Failed / Skipped / Total] 536 / 436 / 21 / 993:  99%|█████████▉| 994/1000 [3:20:11<01:12, 12.08s/it][Succeeded / Failed / Skipped / Total] 537 / 436 / 21 / 994:  99%|█████████▉| 994/1000 [3:20:11<01:12, 12.08s/it][Succeeded / Failed / Skipped / Total] 537 / 436 / 21 / 994: 100%|█████████▉| 995/1000 [3:20:21<01:00, 12.08s/it][Succeeded / Failed / Skipped / Total] 538 / 436 / 21 / 995: 100%|█████████▉| 995/1000 [3:20:21<01:00, 12.08s/it][Succeeded / Failed / Skipped / Total] 538 / 436 / 21 / 995: 100%|█████████▉| 996/1000 [3:20:31<00:48, 12.08s/it][Succeeded / Failed / Skipped / Total] 538 / 437 / 21 / 996: 100%|█████████▉| 996/1000 [3:20:31<00:48, 12.08s/it][Succeeded / Failed / Skipped / Total] 538 / 437 / 21 / 996: 100%|█████████▉| 997/1000 [3:20:38<00:36, 12.07s/it]Resolves the bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = [[type]] . getName ( ) ; } else { name = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[data]] ( final Class [[statement]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[statement]] ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = [[statement]] . getName ( ) ; } else { name = StringUtil . uncapitalize ( [[statement]] . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 991 ---------------------------------------------
Appends the descriptor . --> utility methods --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[hold]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Gets the size of the field . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[main]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 993 ---------------------------------------------
Gets the descriptor for a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[method]] ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[a]] : parameters ) { appendDescriptor ( [[a]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 994 ---------------------------------------------
Mark this transaction as rollback only . --> Call this method on rollback --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[call]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> Generates a procedure --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[bar]] ( final Method method ) { StringBuilder [[procedure]] = new StringBuilder ( ) ; [[procedure]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[procedure]] ) ; } [[procedure]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[procedure]] ) ; return [[procedure]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[f]] ( final Type [[x]] , final Type ... argumentTypes ) { StringBuilder [[method]] = new StringBuilder ( ) ; [[method]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[method]] ) ; } [[method]] . append ( ' ' ) ; [[x]] . appendDescriptor ( [[method]] ) ; return [[method]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
[Succeeded / Failed / Skipped / Total] 539 / 437 / 21 / 997: 100%|█████████▉| 997/1000 [3:20:38<00:36, 12.07s/it][Succeeded / Failed / Skipped / Total] 539 / 437 / 21 / 997: 100%|█████████▉| 998/1000 [3:21:28<00:24, 12.11s/it][Succeeded / Failed / Skipped / Total] 539 / 438 / 21 / 998: 100%|█████████▉| 998/1000 [3:21:28<00:24, 12.11s/it][Succeeded / Failed / Skipped / Total] 539 / 438 / 21 / 998: 100%|█████████▉| 999/1000 [3:21:33<00:12, 12.11s/it][Succeeded / Failed / Skipped / Total] 539 / 439 / 21 / 999: 100%|█████████▉| 999/1000 [3:21:33<00:12, 12.11s/it][Succeeded / Failed / Skipped / Total] 539 / 439 / 21 / 999: 100%|██████████| 1000/1000 [3:21:37<00:00, 12.10s/it][Succeeded / Failed / Skipped / Total] 539 / 440 / 21 / 1000: 100%|██████████| 1000/1000 [3:21:37<00:00, 12.10s/it]/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
[Succeeded / Failed / Skipped / Total] 539 / 440 / 21 / 1000: 100%|██████████| 1000/1000 [3:21:39<00:00, 12.10s/it]--------------------------------------------- Result 997 ---------------------------------------------
Gets the number of arguments and return sizes . --> Example for example --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[example]] ( final String [[argument]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
Commit the given transaction --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[end]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Rollback a transaction --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Request a resource to the transaction --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[area]] > [[area]] requestResource ( final Class < [[area]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[area]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[area]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 539    |
| Number of failed attacks:     | 440    |
| Number of skipped attacks:    | 21     |
| Original accuracy:            | 97.9%  |
| Accuracy under attack:        | 44.0%  |
| Attack success rate:          | 55.06% |
| Average perturbed word %:     | 54.78% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 127.79 |
| Original BLEU-4:              | 18.53  |
| Perturbed BLEU-4:             | 3.08   |
+-------------------------------+--------+


[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.layer_norm.bias', 'lm_head.dense.bias', 'lm_head.decoder.bias', 'lm_head.dense.weight', 'lm_head.bias', 'lm_head.layer_norm.weight', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
textattack: Running 4 worker(s) on 4 GPU(s).
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:11<3:06:33, 11.20s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:11<3:06:38, 11.21s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 2/1000 [00:22<3:07:42, 11.28s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:22<3:07:42, 11.28s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [00:30<2:46:59, 10.05s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:30<2:47:00, 10.05s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 4/1000 [00:40<2:48:07, 10.13s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:40<2:48:07, 10.13s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 5/1000 [01:06<3:41:26, 13.35s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [01:06<3:41:27, 13.35s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [01:17<3:33:02, 12.86s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[format]] ( ObservableSource < T > [[data]] ) { ObjectHelper . requireNonNull ( [[data]] , "source is null" ) ; if ( [[data]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[data]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[data]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Observes the observable using the given scheduler . --> Observable observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[function]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an Observable with the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[command]] ( Comparator < ? super T > [[right]] ) { ObjectHelper . requireNonNull ( [[right]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[right]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new capacity instance . --> Create a new uncastProcessor instance --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[c]] ( int [[e]] ) { return new UnicastProcessor < T > ( [[e]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Tries to apply scalar XMap as a scalar X map . --> Operator operator --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[operator]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[source]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[source]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 6/1000 [01:17<3:33:02, 12.86s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 7/1000 [01:18<3:06:20, 11.26s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 7/1000 [01:18<3:06:20, 11.26s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 8/1000 [01:21<2:48:10, 10.17s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 8/1000 [01:21<2:48:10, 10.17s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 9/1000 [01:39<3:02:01, 11.02s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 9/1000 [01:39<3:02:01, 11.02s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 10/1000 [01:45<2:53:44, 10.53s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 10/1000 [01:45<2:53:45, 10.53s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 11/1000 [01:46<2:39:32,  9.68s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 11/1000 [01:46<2:39:32,  9.68s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 12/1000 [01:51<2:32:54,  9.29s/it]Creates a new executor with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[program]] ( int capacityHint , Runnable [[buffer]] ) { ObjectHelper . requireNonNull ( [[buffer]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[buffer]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
Emit the given value to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[boundary]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[flow]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[flow]] , [[boundary]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[boundary]] ) ; } } else { q . offer ( [[boundary]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[flow]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 8 ---------------------------------------------
Gets a sequence of scalar X maps from the supplied value . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[document]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[text]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[text]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Resets the handlers . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[ask]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[end]]" != "[[end]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 10 ---------------------------------------------
Retries the first element of the element with the given predicate . --> Attempt to retry a single element --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[arguments]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[arguments]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[assume]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|          | 12/1000 [01:51<2:32:54,  9.29s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|▏         | 13/1000 [01:57<2:28:45,  9.04s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 13/1000 [01:57<2:28:45,  9.04s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 14/1000 [02:15<2:38:54,  9.67s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   1%|▏         | 14/1000 [02:15<2:38:54,  9.67s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   2%|▏         | 15/1000 [02:17<2:30:31,  9.17s/it][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 15/1000 [02:17<2:30:31,  9.17s/it][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 16/1000 [02:30<2:34:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 16/1000 [02:30<2:34:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 17/1000 [02:31<2:26:24,  8.94s/it][Succeeded / Failed / Skipped / Total] 9 / 8 / 0 / 17:   2%|▏         | 17/1000 [02:31<2:26:24,  8.94s/it][Succeeded / Failed / Skipped / Total] 9 / 8 / 0 / 17:   2%|▏         | 18/1000 [02:39<2:24:52,  8.85s/it][Succeeded / Failed / Skipped / Total] 9 / 9 / 0 / 18:   2%|▏         | 18/1000 [02:39<2:24:52,  8.85s/it][Succeeded / Failed / Skipped / Total] 9 / 9 / 0 / 18:   2%|▏         | 19/1000 [02:45<2:22:22,  8.71s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 19/1000 [02:45<2:22:22,  8.71s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 20/1000 [02:59<2:26:31,  8.97s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 20/1000 [02:59<2:26:31,  8.97s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 21/1000 [03:03<2:22:22,  8.73s/it][Succeeded / Failed / Skipped / Total] 9 / 12 / 0 / 21:   2%|▏         | 21/1000 [03:03<2:22:22,  8.73s/it][Succeeded / Failed / Skipped / Total] 9 / 12 / 0 / 21:   2%|▏         | 22/1000 [03:36<2:40:25,  9.84s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 22/1000 [03:36<2:40:25,  9.84s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 23/1000 [03:49<2:42:28,  9.98s/it]Construct a Maybe from a CompletableSource --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[replace]] ( CompletableSource [[message]] ) { ObjectHelper . requireNonNull ( [[message]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[message]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 13 ---------------------------------------------
Ensures that an object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[export]] > [[export]] requireNonNull ( [[export]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Gets the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[statement]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Static factory for callable . --> Query for function results --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[query]] ( T [[function]] ) { return new JustValue < Object , T > ( [[function]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Create a reusable subject . --> The main basic test --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[main]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a reusable subject . --> Create a unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[python]] ) { return new UnicastSubject < T > ( [[python]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that returns a value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[function]] , U > Function < [[function]] , U > [[parameters]] ( U [[itself]] ) { return new JustValue < [[function]] , U > ( [[itself]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Returns a new function that casts to the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[one]] , U > Function < [[one]] , U > [[call]] ( Class < U > [[empty]] ) { return new CastToClass < [[one]] , U > ( [[empty]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 20 ---------------------------------------------
Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[implement]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a reusable subject with default buffer size . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[call]] ( boolean [[array]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[array]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Creates a new uncast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[assume]] ( int [[nat]] , Runnable [[name]] ) { return new UnicastSubject < T > ( [[nat]] , [[name]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 23/1000 [03:49<2:42:28,  9.98s/it][Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 24/1000 [04:07<2:47:53, 10.32s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▏         | 24/1000 [04:07<2:47:53, 10.32s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▎         | 25/1000 [04:47<3:06:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 11 / 14 / 0 / 25:   2%|▎         | 25/1000 [04:47<3:06:40, 11.49s/it][Succeeded / Failed / Skipped / Total] 11 / 14 / 0 / 25:   3%|▎         | 26/1000 [05:09<3:13:17, 11.91s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 26/1000 [05:09<3:13:17, 11.91s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 27/1000 [05:19<3:11:41, 11.82s/it][Succeeded / Failed / Skipped / Total] 13 / 14 / 0 / 27:   3%|▎         | 27/1000 [05:19<3:11:41, 11.82s/it][Succeeded / Failed / Skipped / Total] 13 / 14 / 0 / 27:   3%|▎         | 28/1000 [05:23<3:07:15, 11.56s/it][Succeeded / Failed / Skipped / Total] 13 / 15 / 0 / 28:   3%|▎         | 28/1000 [05:23<3:07:15, 11.56s/it][Succeeded / Failed / Skipped / Total] 13 / 15 / 0 / 28:   3%|▎         | 29/1000 [05:41<3:10:45, 11.79s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 29/1000 [05:41<3:10:45, 11.79s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 30/1000 [06:21<3:25:33, 12.71s/it]Waits until the element has failed . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[execute]] ( long [[order]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[order]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[order]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Requests to a subscription . --> Claim a given number of messages --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[claim]] ( Subscription s , int [[es]] ) { s . request ( [[es]] < 0 ? Long . MAX_VALUE : [[es]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Waits for the element to complete . --> Include program --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[include]] ( long [[program]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[program]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[blank]]" == "[[blank]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Post complete event . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[var]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[w]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 27 ---------------------------------------------
Signal that the stream is complete . --> creates a new packet --> Socre: 1.0

[[[[Adv]]]]: protected final void [[complete]] ( R [[n]] ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[create]] ( R [[²]] ) { long [[alt]] = produced ; if ( [[alt]] != 0 ) { BackpressureHelper . produced ( this , [[alt]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[²]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[²]] ) ; downstream . onComplete ( ) ; return ; } value = [[²]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 28 ---------------------------------------------
Gets the value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[at]] = value ; if ( [[at]] != null && ! NotificationLite . isError ( [[at]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Gets the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[utility]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 16 / 0 / 30:   3%|▎         | 30/1000 [06:21<3:25:33, 12.71s/it][Succeeded / Failed / Skipped / Total] 14 / 16 / 0 / 30:   3%|▎         | 31/1000 [06:58<3:38:02, 13.50s/it][Succeeded / Failed / Skipped / Total] 15 / 16 / 0 / 31:   3%|▎         | 31/1000 [06:58<3:38:02, 13.50s/it][Succeeded / Failed / Skipped / Total] 15 / 16 / 0 / 31:   3%|▎         | 32/1000 [07:01<3:32:18, 13.16s/it][Succeeded / Failed / Skipped / Total] 16 / 16 / 0 / 32:   3%|▎         | 32/1000 [07:01<3:32:18, 13.16s/it][Succeeded / Failed / Skipped / Total] 16 / 16 / 0 / 32:   3%|▎         | 33/1000 [07:29<3:39:24, 13.61s/it][Succeeded / Failed / Skipped / Total] 17 / 16 / 0 / 33:   3%|▎         | 33/1000 [07:29<3:39:24, 13.61s/it][Succeeded / Failed / Skipped / Total] 17 / 16 / 0 / 33:   3%|▎         | 34/1000 [07:44<3:40:10, 13.68s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   3%|▎         | 34/1000 [07:44<3:40:10, 13.68s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   4%|▎         | 35/1000 [07:55<3:38:33, 13.59s/it][Succeeded / Failed / Skipped / Total] 18 / 17 / 0 / 35:   4%|▎         | 35/1000 [07:55<3:38:33, 13.59s/it][Succeeded / Failed / Skipped / Total] 18 / 17 / 0 / 35:   4%|▎         | 36/1000 [08:11<3:39:25, 13.66s/it]Runs a maximum loop over a queue . --> add a subscriber to a queueDrain --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[dispose]] , QueueDrain < T , U > [[qd]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T [[v]] = q . poll ( ) ; boolean empty = [[v]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[qd]] ) ) { if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , [[v]] ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[qd]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[add]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[access]] , QueueDrain < T , U > [[j]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[j]] . done ( ) ; T [[ᵢ]] = q . poll ( ) ; boolean empty = [[ᵢ]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[j]] ) ) { if ( [[access]] != null ) { [[access]] . [[access]] ( ) ; } return ; } if ( empty ) { break ; } long r = [[j]] . requested ( ) ; if ( r != 0L ) { if ( [[j]] . accept ( a , [[ᵢ]] ) ) { if ( r != Long . MAX_VALUE ) { [[j]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[access]] != null ) { [[access]] . [[access]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[j]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Determines whether or not the stream is valid . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[operations]] ( Disposable upstream , Disposable [[indirectly]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[indirectly]] , "next is null" ) ; if ( upstream != null ) { [[indirectly]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Atomically sets the next AtomicReference to the given AtomicReference . --> Associate another dependent object with another --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[add]] ( AtomicReference < Disposable > [[independent]] , Disposable [[side]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[side]] , "next is null" ) ; if ( ! [[independent]] . compareAndSet ( null , [[side]] ) ) { [[side]] . dispose ( ) ; if ( [[independent]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 33 ---------------------------------------------
Cap long . --> Capacity of longs --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long [[u]] = [[a]] + b ; if ( [[u]] < 0L ) { return Long . MAX_VALUE ; } return [[u]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[he]] , long b ) { long [[j]] = [[he]] + b ; if ( [[j]] < 0L ) { return Long . MAX_VALUE ; } return [[j]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Checks if the next stream is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[event]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[event]] , "next is null" ) ; if ( upstream != null ) { [[event]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[downstream]]" != "[[downstream]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 35 ---------------------------------------------
Multiply two values . --> A combination of c --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[a]] ( long [[c]] , long b ) { long u = [[c]] * b ; if ( ( ( [[c]] | b ) >>> 31 ) != 0 ) { if ( u / [[c]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 17 / 0 / 36:   4%|▎         | 36/1000 [08:11<3:39:25, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 17 / 0 / 36:   4%|▎         | 37/1000 [08:19<3:36:33, 13.49s/it][Succeeded / Failed / Skipped / Total] 19 / 18 / 0 / 37:   4%|▎         | 37/1000 [08:19<3:36:33, 13.49s/it][Succeeded / Failed / Skipped / Total] 19 / 18 / 0 / 37:   4%|▍         | 38/1000 [08:49<3:43:36, 13.95s/it][Succeeded / Failed / Skipped / Total] 19 / 19 / 0 / 38:   4%|▍         | 38/1000 [08:49<3:43:36, 13.95s/it][Succeeded / Failed / Skipped / Total] 19 / 19 / 0 / 38:   4%|▍         | 39/1000 [08:59<3:41:22, 13.82s/it][Succeeded / Failed / Skipped / Total] 19 / 20 / 0 / 39:   4%|▍         | 39/1000 [08:59<3:41:22, 13.82s/it][Succeeded / Failed / Skipped / Total] 19 / 20 / 0 / 39:   4%|▍         | 40/1000 [09:06<3:38:37, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 40/1000 [09:06<3:38:37, 13.66s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 41/1000 [09:20<3:38:33, 13.67s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 41/1000 [09:20<3:38:33, 13.67s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 42/1000 [09:48<3:43:33, 14.00s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 42/1000 [09:48<3:43:34, 14.00s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 43/1000 [10:06<3:44:48, 14.09s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 43/1000 [10:06<3:44:48, 14.09s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 44/1000 [10:21<3:45:02, 14.12s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 44/1000 [10:21<3:45:02, 14.12s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 45/1000 [10:28<3:42:14, 13.96s/it]Adds an object to the list . --> Cookie c --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[c]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
Atomically sets the next stream to the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[function]] ( AtomicReference < Subscription > [[earlier]] , Subscription [[more]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[more]] , "next is null" ) ; if ( ! [[earlier]] . compareAndSet ( null , [[more]] ) ) { [[more]] . cancel ( ) ; if ( [[earlier]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 38 ---------------------------------------------
Shut down the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[restore]] ( ) { ScheduledExecutorService [[source]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[source]] != null ) { [[source]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically add n to the requested long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[b]] , long n ) { for ( ; ; ) { long r = [[b]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[b]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[boot]] ( ThreadFactory [[script]] ) { final ScheduledExecutorService [[test]] = Executors . newScheduledThreadPool ( 1 , [[script]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[test]] ) ; return [[test]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Loops through the queue . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[function]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[data]] ; synchronized ( this ) { [[data]] = queue ; if ( [[data]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[data]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps a RuntimeException if it is a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[a]] ( Throwable [[false]] ) { if ( [[false]] instanceof Error ) { throw ( Error ) [[false]] ; } if ( [[false]] instanceof RuntimeException ) { return ( RuntimeException ) [[false]] ; } return new RuntimeException ( [[false]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
If the given exception is a Throwable otherwise throw an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[big]] [[p]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[big]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[big]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   4%|▍         | 45/1000 [10:28<3:42:14, 13.96s/it][Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   5%|▍         | 46/1000 [10:34<3:39:19, 13.79s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 46/1000 [10:34<3:39:19, 13.79s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 47/1000 [10:50<3:39:56, 13.85s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 47/1000 [10:50<3:39:56, 13.85s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 48/1000 [11:09<3:41:12, 13.94s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 48/1000 [11:09<3:41:12, 13.94s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 49/1000 [11:32<3:43:58, 14.13s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▍         | 49/1000 [11:32<3:43:58, 14.13s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▌         | 50/1000 [11:48<3:44:14, 14.16s/it]Sets the Subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[after]] ( Subscription [[time]] ) { if ( cancelled ) { [[time]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[time]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[t]] = actual ; if ( [[t]] != null && cancelOnReplace ) { [[t]] . cancel ( ) ; } actual = [[time]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[time]] . request ( r ) ; } return ; } Subscription [[t]] = missedSubscription . getAndSet ( [[time]] ) ; if ( [[t]] != null && cancelOnReplace ) { [[t]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 46 ---------------------------------------------
Removes all resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[bin]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources . --> Test if this object is disposed --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[test]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[x]] = resources ; return [[x]] != null ? [[x]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Try to apply a scalar XMap to an ObservableSource . --> Operator operator --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[operator]] ( ObservableSource < T > [[actor]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[actor]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[actor]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Creates an observable using a scalar X map function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[search]] ( T [[z]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[z]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 28 / 0 / 50:   5%|▌         | 50/1000 [11:48<3:44:14, 14.16s/it][Succeeded / Failed / Skipped / Total] 22 / 28 / 0 / 50:   5%|▌         | 51/1000 [11:49<3:40:00, 13.91s/it][Succeeded / Failed / Skipped / Total] 23 / 28 / 0 / 51:   5%|▌         | 51/1000 [11:49<3:40:00, 13.91s/it][Succeeded / Failed / Skipped / Total] 23 / 28 / 0 / 51:   5%|▌         | 52/1000 [12:04<3:40:17, 13.94s/it][Succeeded / Failed / Skipped / Total] 24 / 28 / 0 / 52:   5%|▌         | 52/1000 [12:04<3:40:17, 13.94s/it][Succeeded / Failed / Skipped / Total] 24 / 28 / 0 / 52:   5%|▌         | 53/1000 [12:13<3:38:23, 13.84s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 53/1000 [12:13<3:38:23, 13.84s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 54/1000 [12:24<3:37:29, 13.79s/it][Succeeded / Failed / Skipped / Total] 26 / 28 / 0 / 54:   5%|▌         | 54/1000 [12:24<3:37:29, 13.79s/it][Succeeded / Failed / Skipped / Total] 26 / 28 / 0 / 54:   6%|▌         | 55/1000 [12:40<3:37:45, 13.83s/it][Succeeded / Failed / Skipped / Total] 27 / 28 / 0 / 55:   6%|▌         | 55/1000 [12:40<3:37:45, 13.83s/it][Succeeded / Failed / Skipped / Total] 27 / 28 / 0 / 55:   6%|▌         | 56/1000 [12:57<3:38:22, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 28 / 0 / 56:   6%|▌         | 56/1000 [12:57<3:38:22, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 28 / 0 / 56:   6%|▌         | 57/1000 [13:11<3:38:09, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 29 / 0 / 57:   6%|▌         | 57/1000 [13:11<3:38:09, 13.88s/it][Succeeded / Failed / Skipped / Total] 28 / 29 / 0 / 57:   6%|▌         | 58/1000 [13:29<3:39:01, 13.95s/it]Flatten a Throwable into a list --> Query for exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[query]] ( Throwable [[id]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[id]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the stream . --> Create empty table --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[table]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Start unbounded queue . --> Create empty table --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[table]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Accept a notification . --> Evaluates var --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[c]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[var]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[a]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[a]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[a]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 54 ---------------------------------------------
Offers an object to the operator . --> Begins a transaction --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[bid]] ( T [[ms]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[ms]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[ms]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Gets the resource . --> Package private for unit testing --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[container]] ( ) { Disposable [[payload]] = resource . get ( ) ; if ( [[payload]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[payload]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 56 ---------------------------------------------
Completes this operation . --> Transition to state --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[state]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Sends an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[by]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 29 / 0 / 58:   6%|▌         | 58/1000 [13:29<3:39:01, 13.95s/it][Succeeded / Failed / Skipped / Total] 29 / 29 / 0 / 58:   6%|▌         | 59/1000 [13:33<3:36:16, 13.79s/it][Succeeded / Failed / Skipped / Total] 30 / 29 / 0 / 59:   6%|▌         | 59/1000 [13:33<3:36:16, 13.79s/it][Succeeded / Failed / Skipped / Total] 30 / 29 / 0 / 59:   6%|▌         | 60/1000 [13:48<3:36:22, 13.81s/it][Succeeded / Failed / Skipped / Total] 31 / 29 / 0 / 60:   6%|▌         | 60/1000 [13:48<3:36:22, 13.81s/it][Succeeded / Failed / Skipped / Total] 31 / 29 / 0 / 60:   6%|▌         | 61/1000 [13:52<3:33:37, 13.65s/it][Succeeded / Failed / Skipped / Total] 31 / 30 / 0 / 61:   6%|▌         | 61/1000 [13:52<3:33:37, 13.65s/it][Succeeded / Failed / Skipped / Total] 31 / 30 / 0 / 61:   6%|▌         | 62/1000 [13:57<3:31:17, 13.52s/it][Succeeded / Failed / Skipped / Total] 31 / 31 / 0 / 62:   6%|▌         | 62/1000 [13:57<3:31:17, 13.52s/it][Succeeded / Failed / Skipped / Total] 31 / 31 / 0 / 62:   6%|▋         | 63/1000 [14:09<3:30:38, 13.49s/it][Succeeded / Failed / Skipped / Total] 31 / 32 / 0 / 63:   6%|▋         | 63/1000 [14:09<3:30:38, 13.49s/it][Succeeded / Failed / Skipped / Total] 31 / 32 / 0 / 63:   6%|▋         | 64/1000 [14:20<3:29:50, 13.45s/it][Succeeded / Failed / Skipped / Total] 32 / 32 / 0 / 64:   6%|▋         | 64/1000 [14:20<3:29:50, 13.45s/it][Succeeded / Failed / Skipped / Total] 32 / 32 / 0 / 64:   6%|▋         | 65/1000 [14:27<3:27:58, 13.35s/it]Completes the operation with the given value . --> Used for test purposes --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[test]] ( T [[end]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[b]] = [[end]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[end]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
Accept the observer . --> Scope callback methods --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[scope]] ( Observer < ? super U > observer ) { Object [ ] [[sign]] = head ; final int c = capacity ; while ( [[sign]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[sign]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[sign]] = ( Object [ ] ) [[sign]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 60 ---------------------------------------------
Wait for the consumer to complete . --> Execute after count --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[after]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[after]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Concatenate the elements of the stream with the given mapper . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[b]] ) { return concatMapIterable ( [[b]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Concatenates a sequence of messages into a sequence of Strings . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[author]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[author]] ( mapper , 2 , "[[b]]" == "[[b]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a sorted stream of all elements according to the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[name]] ( Comparator < ? super T > [[string]] ) { ObjectHelper . requireNonNull ( [[string]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[string]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Submits n n n n . --> request n n n n --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[table]] = this . [[a]] ; if ( [[table]] != null ) { [[table]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 32 / 0 / 65:   6%|▋         | 65/1000 [14:27<3:27:58, 13.35s/it][Succeeded / Failed / Skipped / Total] 33 / 32 / 0 / 65:   7%|▋         | 66/1000 [15:15<3:36:00, 13.88s/it][Succeeded / Failed / Skipped / Total] 34 / 32 / 0 / 66:   7%|▋         | 66/1000 [15:15<3:36:00, 13.88s/it][Succeeded / Failed / Skipped / Total] 34 / 32 / 0 / 66:   7%|▋         | 67/1000 [15:36<3:37:16, 13.97s/it][Succeeded / Failed / Skipped / Total] 35 / 32 / 0 / 67:   7%|▋         | 67/1000 [15:36<3:37:16, 13.97s/it][Succeeded / Failed / Skipped / Total] 35 / 32 / 0 / 67:   7%|▋         | 68/1000 [15:42<3:35:12, 13.85s/it][Succeeded / Failed / Skipped / Total] 35 / 33 / 0 / 68:   7%|▋         | 68/1000 [15:42<3:35:12, 13.85s/it][Succeeded / Failed / Skipped / Total] 35 / 33 / 0 / 68:   7%|▋         | 69/1000 [15:45<3:32:33, 13.70s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 69/1000 [15:45<3:32:33, 13.70s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 70/1000 [15:49<3:30:12, 13.56s/it]Observes a Connectable Flowable from a Flowable . --> Translates a Connectable Flowable into a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[client]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Atomically add a PublishDisposable to the queue . --> Prints a PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int [[n]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , [[n]] ) ; [[b]] [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[print]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[published]]" != "[[published]]" ; } int [[publish]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[id]] = new PublishDisposable [ [[publish]] + 1 ] ; System . arraycopy ( a , 0 , [[id]] , 0 , [[publish]] ) ; [[id]] [ [[publish]] ] = ps ; if ( subscribers . compareAndSet ( a , [[id]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Parses the annotations of a method --> Parses HttpServiceMethod --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[continuationBodyNullable]] = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[ref]] , ReturnT > HttpServiceMethod < [[ref]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[true]] = "False" != "False" ; Annotation [ ] [[http]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 68 ---------------------------------------------
Sets the amount of time in milliseconds to delay . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[power]] ( long [[load]] , TimeUnit [[operation]] ) { if ( [[load]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[operation]] . toMillis ( [[load]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
Create an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[calls]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 70/1000 [15:49<3:30:12, 13.56s/it][Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 71/1000 [16:15<3:32:38, 13.73s/it][Succeeded / Failed / Skipped / Total] 36 / 35 / 0 / 71:   7%|▋         | 71/1000 [16:15<3:32:38, 13.73s/it][Succeeded / Failed / Skipped / Total] 36 / 35 / 0 / 71:   7%|▋         | 72/1000 [16:23<3:31:14, 13.66s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 72/1000 [16:23<3:31:14, 13.66s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 73/1000 [16:29<3:29:19, 13.55s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 73/1000 [16:29<3:29:19, 13.55s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 74/1000 [16:32<3:27:05, 13.42s/it][Succeeded / Failed / Skipped / Total] 39 / 35 / 0 / 74:   7%|▋         | 74/1000 [16:32<3:27:05, 13.42s/it][Succeeded / Failed / Skipped / Total] 39 / 35 / 0 / 74:   8%|▊         | 75/1000 [16:44<3:26:30, 13.40s/it][Succeeded / Failed / Skipped / Total] 40 / 35 / 0 / 75:   8%|▊         | 75/1000 [16:44<3:26:30, 13.40s/it][Succeeded / Failed / Skipped / Total] 40 / 35 / 0 / 75:   8%|▊         | 76/1000 [17:18<3:30:23, 13.66s/it][Succeeded / Failed / Skipped / Total] 40 / 36 / 0 / 76:   8%|▊         | 76/1000 [17:18<3:30:23, 13.66s/it][Succeeded / Failed / Skipped / Total] 40 / 36 / 0 / 76:   8%|▊         | 77/1000 [17:24<3:28:42, 13.57s/it]Remove a subscriber from the queue . --> remove a bundle --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int [[n]] = [[a]] . length ; int [[j]] = - 1 ; for ( int [[i]] = 0 ; [[i]] < [[n]] ; [[i]] ++ ) { if ( [[a]] [ [[i]] ] == [[ps]] ) { [[j]] = [[i]] ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , [[j]] ) ; System . arraycopy ( [[a]] , [[j]] + 1 , b , [[j]] , [[n]] - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[b]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[β]] = subscribers . get ( ) ; if ( [[β]] == TERMINATED || [[β]] == EMPTY ) { return ; } int [[definition]] = [[β]] . length ; int [[u]] = - 1 ; for ( int [[w]] = 0 ; [[w]] < [[definition]] ; [[w]] ++ ) { if ( [[β]] [ [[w]] ] == [[b]] ) { [[u]] = [[w]] ; break ; } } if ( [[u]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[definition]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[definition]] - 1 ] ; System . arraycopy ( [[β]] , 0 , b , 0 , [[u]] ) ; System . arraycopy ( [[β]] , [[u]] + 1 , b , [[u]] , [[definition]] - [[u]] - 1 ) ; } if ( subscribers . compareAndSet ( [[β]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 71 ---------------------------------------------
Return the HTTP method for the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[bar]] ( String [[k]] ) { try { return HttpMethod . valueOf ( [[k]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
Search for a user . --> Search for users . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[array]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[array]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[array]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[array]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 73 ---------------------------------------------
Calculate the delay in milliseconds --> Text of this sample --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[text]] ( TimeUnit [[array]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 74 ---------------------------------------------
Creates sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String [[username]] , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String [[access]] , String [[foo]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[access]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[access]] , [[foo]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 75 ---------------------------------------------
Helper method to perform the version checks . --> After minSpring . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[after]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
Hashes a raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[index]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[index]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 77 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 37 / 0 / 77:   8%|▊         | 77/1000 [17:24<3:28:42, 13.57s/it][Succeeded / Failed / Skipped / Total] 40 / 37 / 0 / 77:   8%|▊         | 78/1000 [17:35<3:27:56, 13.53s/it][Succeeded / Failed / Skipped / Total] 41 / 37 / 0 / 78:   8%|▊         | 78/1000 [17:35<3:27:56, 13.53s/it][Succeeded / Failed / Skipped / Total] 41 / 37 / 0 / 78:   8%|▊         | 79/1000 [17:37<3:25:33, 13.39s/it][Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 79/1000 [17:37<3:25:33, 13.39s/it][Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 80/1000 [17:39<3:22:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 80/1000 [17:39<3:22:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 81/1000 [17:50<3:22:27, 13.22s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 81/1000 [17:50<3:22:27, 13.22s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 82/1000 [17:52<3:20:04, 13.08s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 82/1000 [17:52<3:20:04, 13.08s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 83/1000 [18:10<3:20:49, 13.14s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 83/1000 [18:10<3:20:49, 13.14s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 84/1000 [18:40<3:23:34, 13.33s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 84/1000 [18:40<3:23:34, 13.33s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 85/1000 [19:02<3:24:56, 13.44s/it]Retrieves the spring - core version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[thread]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
Exchange configurer . --> change configurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[a]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[a]] ) ; return [[a]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
Get OAuth2 client configurer . --> Post process configurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[foo]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 80 ---------------------------------------------
Determines if the checks should be disabled . --> Loop through basic checks --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[loop]] ( String [[basic]] , String [[apache]] ) { if ( [[basic]] == null || [[basic]] . equals ( [[apache]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 81 ---------------------------------------------
Gets the OAuth2 resource server . --> queue a new configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[queue]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 82 ---------------------------------------------
Compares the raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[agent]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 83 ---------------------------------------------
Provides a default channel security configurer that requires a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[test]] ( ) throws Exception { ApplicationContext [[error]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[error]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Searches for multiple attribute values . --> Function --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[function]] ( final String [[alphabet]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   8%|▊         | 85/1000 [19:02<3:24:56, 13.44s/it][Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   9%|▊         | 86/1000 [19:13<3:24:15, 13.41s/it][Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 86/1000 [19:13<3:24:15, 13.41s/it][Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 87/1000 [19:35<3:25:34, 13.51s/it][Succeeded / Failed / Skipped / Total] 47 / 40 / 0 / 87:   9%|▊         | 87/1000 [19:35<3:25:34, 13.51s/it][Succeeded / Failed / Skipped / Total] 47 / 40 / 0 / 87:   9%|▉         | 88/1000 [21:00<3:37:40, 14.32s/it][Succeeded / Failed / Skipped / Total] 47 / 41 / 0 / 88:   9%|▉         | 88/1000 [21:00<3:37:40, 14.32s/it][Succeeded / Failed / Skipped / Total] 47 / 41 / 0 / 88:   9%|▉         | 89/1000 [21:00<3:35:04, 14.16s/it]Search for a single entry . --> returns all contexts under the given filter --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[among]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 86 ---------------------------------------------
Retrieves an entry . --> Executes a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[command]] ( final String [[fetch]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[fetch]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 87 ---------------------------------------------
Builds a search controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[x]] ( SearchControls [[object]] ) { return new SearchControls ( [[object]] . getSearchScope ( ) , [[object]] . getCountLimit ( ) , [[object]] . getTimeLimit ( ) , [[object]] . getReturningAttributes ( ) , RETURN_OBJECT , [[object]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Compares the given DN with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[x]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[x]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 42 / 0 / 89:   9%|▉         | 89/1000 [21:00<3:35:04, 14.16s/it][Succeeded / Failed / Skipped / Total] 47 / 42 / 0 / 89:   9%|▉         | 90/1000 [21:11<3:34:14, 14.13s/it][Succeeded / Failed / Skipped / Total] 48 / 42 / 0 / 90:   9%|▉         | 90/1000 [21:11<3:34:14, 14.13s/it][Succeeded / Failed / Skipped / Total] 48 / 42 / 0 / 90:   9%|▉         | 91/1000 [21:18<3:32:47, 14.05s/it][Succeeded / Failed / Skipped / Total] 49 / 42 / 0 / 91:   9%|▉         | 91/1000 [21:18<3:32:47, 14.05s/it][Succeeded / Failed / Skipped / Total] 49 / 42 / 0 / 91:   9%|▉         | 92/1000 [21:36<3:33:13, 14.09s/it]Searches for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] [[attributeNames]] = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[format]] ( final String base , final String filter , final Object [ ] params , final String [[edge]] ) { String [ ] [[ends]] = new String [ ] { [[edge]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[ends]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[edge]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
Build the pre - authenticated authorities web authentication details . --> Maps user roles to a String --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[string]] ( HttpServletRequest [[e]] ) { Collection < String > [[content]] = getUserRoles ( [[e]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[content]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[content]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[name]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[e]] , userGas ) ; return [[name]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 91 ---------------------------------------------
Creates the servlet filter . --> Registers apache . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[apache]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 42 / 0 / 92:   9%|▉         | 92/1000 [21:36<3:33:13, 14.09s/it][Succeeded / Failed / Skipped / Total] 50 / 42 / 0 / 92:   9%|▉         | 93/1000 [21:37<3:30:55, 13.95s/it][Succeeded / Failed / Skipped / Total] 51 / 42 / 0 / 93:   9%|▉         | 93/1000 [21:37<3:30:55, 13.95s/it][Succeeded / Failed / Skipped / Total] 51 / 42 / 0 / 93:   9%|▉         | 94/1000 [21:42<3:29:15, 13.86s/it][Succeeded / Failed / Skipped / Total] 51 / 43 / 0 / 94:   9%|▉         | 94/1000 [21:42<3:29:15, 13.86s/it][Succeeded / Failed / Skipped / Total] 51 / 43 / 0 / 94:  10%|▉         | 95/1000 [22:09<3:31:02, 13.99s/it][Succeeded / Failed / Skipped / Total] 52 / 43 / 0 / 95:  10%|▉         | 95/1000 [22:09<3:31:02, 13.99s/it][Succeeded / Failed / Skipped / Total] 52 / 43 / 0 / 95:  10%|▉         | 96/1000 [22:16<3:29:46, 13.92s/it]Create the embedded server definition . --> Process the root bean --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[function]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[proxy]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[proxy]] . addConstructorArgValue ( url ) ; [[proxy]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[proxy]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[proxy]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 93 ---------------------------------------------
Creates a whitelisted type resolver . --> Whitelisted type resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[id]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[id]] = [[id]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[id]] = [[id]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[id]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Finds the primary keys for acl . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[declare]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[a]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[a]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 95 ---------------------------------------------
Create the jaas api filter . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[main]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[result]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[result]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
[Succeeded / Failed / Skipped / Total] 53 / 43 / 0 / 96:  10%|▉         | 96/1000 [22:16<3:29:46, 13.92s/it][Succeeded / Failed / Skipped / Total] 53 / 43 / 0 / 96:  10%|▉         | 97/1000 [22:32<3:29:54, 13.95s/it][Succeeded / Failed / Skipped / Total] 54 / 43 / 0 / 97:  10%|▉         | 97/1000 [22:32<3:29:54, 13.95s/it][Succeeded / Failed / Skipped / Total] 54 / 43 / 0 / 97:  10%|▉         | 98/1000 [22:40<3:28:41, 13.88s/it][Succeeded / Failed / Skipped / Total] 54 / 44 / 0 / 98:  10%|▉         | 98/1000 [22:40<3:28:41, 13.88s/it][Succeeded / Failed / Skipped / Total] 54 / 44 / 0 / 98:  10%|▉         | 99/1000 [22:46<3:27:17, 13.80s/it][Succeeded / Failed / Skipped / Total] 54 / 45 / 0 / 99:  10%|▉         | 99/1000 [22:46<3:27:17, 13.80s/it][Succeeded / Failed / Skipped / Total] 54 / 45 / 0 / 99:  10%|█         | 100/1000 [22:50<3:25:34, 13.70s/it][Succeeded / Failed / Skipped / Total] 54 / 46 / 0 / 100:  10%|█         | 100/1000 [22:50<3:25:34, 13.70s/it][Succeeded / Failed / Skipped / Total] 54 / 46 / 0 / 100:  10%|█         | 101/1000 [23:46<3:31:34, 14.12s/it][Succeeded / Failed / Skipped / Total] 54 / 47 / 0 / 101:  10%|█         | 101/1000 [23:46<3:31:34, 14.12s/it][Succeeded / Failed / Skipped / Total] 54 / 47 / 0 / 101:  10%|█         | 102/1000 [24:32<3:36:02, 14.43s/it]--------------------------------------------- Result 96 ---------------------------------------------
Adds the spring security filter to the web application . --> Create a new Spring SecurityFilterChain --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[servletContext]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[contextAttribute]] = getWebApplicationContextAttribute ( ) ; if ( [[contextAttribute]] != null ) { springSecurityFilterChain . setContextAttribute ( [[contextAttribute]] ) ; } registerFilter ( [[servletContext]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[age]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[where]] = getWebApplicationContextAttribute ( ) ; if ( [[where]] != null ) { springSecurityFilterChain . setContextAttribute ( [[where]] ) ; } registerFilter ( [[age]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 97 ---------------------------------------------
If any of the servlet s attributes is set . --> Power of this class --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[power]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[algorithm]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Retrieves a remember - me token . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[open]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Returns a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[header]] : attributes ) { result . add ( getGrantedAuthority ( [[header]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Check security context if required . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[trial]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[trial]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[trial]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[trial]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 48 / 0 / 102:  10%|█         | 102/1000 [24:32<3:36:02, 14.43s/it][Succeeded / Failed / Skipped / Total] 54 / 48 / 0 / 102:  10%|█         | 103/1000 [24:49<3:36:13, 14.46s/it][Succeeded / Failed / Skipped / Total] 54 / 49 / 0 / 103:  10%|█         | 103/1000 [24:49<3:36:13, 14.46s/it][Succeeded / Failed / Skipped / Total] 54 / 49 / 0 / 103:  10%|█         | 104/1000 [24:50<3:33:56, 14.33s/it][Succeeded / Failed / Skipped / Total] 54 / 50 / 0 / 104:  10%|█         | 104/1000 [24:50<3:33:56, 14.33s/it][Succeeded / Failed / Skipped / Total] 54 / 50 / 0 / 104:  10%|█         | 105/1000 [24:53<3:32:14, 14.23s/it][Succeeded / Failed / Skipped / Total] 55 / 50 / 0 / 105:  10%|█         | 105/1000 [24:53<3:32:14, 14.23s/it][Succeeded / Failed / Skipped / Total] 55 / 50 / 0 / 105:  11%|█         | 106/1000 [25:18<3:33:25, 14.32s/it][Succeeded / Failed / Skipped / Total] 55 / 51 / 0 / 106:  11%|█         | 106/1000 [25:18<3:33:25, 14.32s/it][Succeeded / Failed / Skipped / Total] 55 / 51 / 0 / 106:  11%|█         | 107/1000 [25:20<3:31:29, 14.21s/it]Do the actual authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[client]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[client]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[client]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[client]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[client]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[client]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 103 ---------------------------------------------
Checks if the pre - authenticated principal has been changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return "[[False]]" != "[[False]]" ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[library]] ( HttpServletRequest request , Authentication [[request]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[request]] . getName ( ) . equals ( principal ) ) { return "[[mere]]" != "[[mere]]" ; } if ( principal != null && principal . equals ( [[request]] . getPrincipal ( ) ) ) { return "[[mere]]" != "[[mere]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[like]]" == "[[like]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 104 ---------------------------------------------
Map the authorities to the default authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[area]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[at]] : authorities ) { [[area]] . add ( mapAuthority ( [[at]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[area]] . add ( defaultAuthority ) ; } return [[area]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 105 ---------------------------------------------
Checks if the content length is fully written . --> varLengthToWrite --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean [[requiresFlush]] = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( [[isBodyFullyWritten]] || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[var]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[write]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[turn]] = getBufferSize ( ) ; boolean [[cast]] = [[turn]] > 0 && this . contentWritten >= [[turn]] ; if ( [[write]] || [[cast]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 106 ---------------------------------------------
Updates the access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[at]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 52 / 0 / 107:  11%|█         | 107/1000 [25:20<3:31:29, 14.21s/it][Succeeded / Failed / Skipped / Total] 55 / 52 / 0 / 107:  11%|█         | 108/1000 [25:23<3:29:41, 14.10s/it][Succeeded / Failed / Skipped / Total] 55 / 53 / 0 / 108:  11%|█         | 108/1000 [25:23<3:29:41, 14.10s/it][Succeeded / Failed / Skipped / Total] 55 / 53 / 0 / 108:  11%|█         | 109/1000 [25:23<3:27:34, 13.98s/it][Succeeded / Failed / Skipped / Total] 56 / 53 / 0 / 109:  11%|█         | 109/1000 [25:23<3:27:34, 13.98s/it][Succeeded / Failed / Skipped / Total] 56 / 53 / 0 / 109:  11%|█         | 110/1000 [25:37<3:27:18, 13.98s/it][Succeeded / Failed / Skipped / Total] 57 / 53 / 0 / 110:  11%|█         | 110/1000 [25:37<3:27:18, 13.98s/it][Succeeded / Failed / Skipped / Total] 57 / 53 / 0 / 110:  11%|█         | 111/1000 [25:43<3:26:05, 13.91s/it][Succeeded / Failed / Skipped / Total] 58 / 53 / 0 / 111:  11%|█         | 111/1000 [25:43<3:26:05, 13.91s/it][Succeeded / Failed / Skipped / Total] 58 / 53 / 0 / 111:  11%|█         | 112/1000 [26:24<3:29:25, 14.15s/it][Succeeded / Failed / Skipped / Total] 58 / 54 / 0 / 112:  11%|█         | 112/1000 [26:24<3:29:25, 14.15s/it][Succeeded / Failed / Skipped / Total] 58 / 54 / 0 / 112:  11%|█▏        | 113/1000 [26:30<3:28:03, 14.07s/it][Succeeded / Failed / Skipped / Total] 58 / 55 / 0 / 113:  11%|█▏        | 113/1000 [26:30<3:28:03, 14.07s/it][Succeeded / Failed / Skipped / Total] 58 / 55 / 0 / 113:  11%|█▏        | 114/1000 [26:51<3:28:42, 14.13s/it]Updates the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[method]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[n]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[n]] != null && ! [[n]] . isCustomLogoutSuccess ( ) ) { [[n]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 108 ---------------------------------------------
Map the password to a String . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[end]] ( Object [[attribute]] ) { if ( ! ( [[attribute]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Sets the login processing URL . --> Sets p endpoint --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[pt]] ( String [[client]] ) { this . [[send]] = [[pt]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[pt]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 110 ---------------------------------------------
Encode cookie . --> Encode the cookie --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[var]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Resolves the security context for the given request . --> Resolves security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[image]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[image]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[image]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 112 ---------------------------------------------
Extract cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[end]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[data]] : cookies ) { if ( cookieName . equals ( [[data]] . getName ( ) ) ) { return [[data]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 113 ---------------------------------------------
Extract service port from cas service url . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[definition]] ) { int [[call]] = [[definition]] . getPort ( ) ; if ( [[call]] == - 1 ) { [[call]] = [[definition]] . getDefaultPort ( ) ; } return [[call]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 55 / 0 / 114:  11%|█▏        | 114/1000 [26:51<3:28:42, 14.13s/it][Succeeded / Failed / Skipped / Total] 59 / 55 / 0 / 114:  12%|█▏        | 115/1000 [27:02<3:28:03, 14.11s/it][Succeeded / Failed / Skipped / Total] 60 / 55 / 0 / 115:  12%|█▏        | 115/1000 [27:02<3:28:03, 14.11s/it][Succeeded / Failed / Skipped / Total] 60 / 55 / 0 / 115:  12%|█▏        | 116/1000 [27:05<3:26:28, 14.01s/it][Succeeded / Failed / Skipped / Total] 60 / 56 / 0 / 116:  12%|█▏        | 116/1000 [27:05<3:26:28, 14.01s/it][Succeeded / Failed / Skipped / Total] 60 / 56 / 0 / 116:  12%|█▏        | 117/1000 [27:35<3:28:11, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 56 / 0 / 117:  12%|█▏        | 117/1000 [27:35<3:28:11, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 56 / 0 / 117:  12%|█▏        | 118/1000 [27:49<3:27:58, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 57 / 0 / 118:  12%|█▏        | 118/1000 [27:49<3:27:58, 14.15s/it][Succeeded / Failed / Skipped / Total] 61 / 57 / 0 / 118:  12%|█▏        | 119/1000 [27:51<3:26:13, 14.04s/it][Succeeded / Failed / Skipped / Total] 62 / 57 / 0 / 119:  12%|█▏        | 119/1000 [27:51<3:26:13, 14.04s/it][Succeeded / Failed / Skipped / Total] 62 / 57 / 0 / 119:  12%|█▏        | 120/1000 [27:51<3:24:19, 13.93s/it]Sets the cookie . --> Generates a profile for a given domain --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] [[tokens]] , int [[maxAge]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[tokens]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[profile]] ( String [ ] [[domain]] , int [[forum]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[domain]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[forum]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[forum]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
Logout the current request --> logout --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[ion]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[ion]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[ion]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[condition]] = SecurityContextHolder . getContext ( ) ; [[condition]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 116 ---------------------------------------------
Get the query string from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[check]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[question]] = request . getQueryString ( ) ; if ( [[question]] == null ) { return null ; } final String [[assignment]] = artifactPattern . matcher ( [[question]] ) . replaceFirst ( "" ) ; if ( [[assignment]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticates the given authentication . --> Authenticate an agent . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[agent]] ) throws AuthenticationException { if ( ! ( [[agent]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[agent]] ; Set < GrantedAuthority > [[c]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Set environment variables . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[console]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Get the LDAP principal . --> Verify who is an LdapUser --> Socre: 1.0

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[verify]] ( ) { Authentication [[attribute]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[attribute]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[attacker]] = [[attribute]] . getPrincipal ( ) ; if ( [[attacker]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[attacker]] ; return details . getDn ( ) ; } else if ( [[attribute]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 120 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 58 / 0 / 120:  12%|█▏        | 120/1000 [27:51<3:24:19, 13.93s/it][Succeeded / Failed / Skipped / Total] 62 / 58 / 0 / 120:  12%|█▏        | 121/1000 [28:05<3:24:01, 13.93s/it][Succeeded / Failed / Skipped / Total] 63 / 58 / 0 / 121:  12%|█▏        | 121/1000 [28:05<3:24:01, 13.93s/it][Succeeded / Failed / Skipped / Total] 63 / 58 / 0 / 121:  12%|█▏        | 122/1000 [28:26<3:24:40, 13.99s/it][Succeeded / Failed / Skipped / Total] 63 / 59 / 0 / 122:  12%|█▏        | 122/1000 [28:26<3:24:40, 13.99s/it][Succeeded / Failed / Skipped / Total] 63 / 59 / 0 / 122:  12%|█▏        | 123/1000 [28:48<3:25:22, 14.05s/it][Succeeded / Failed / Skipped / Total] 63 / 60 / 0 / 123:  12%|█▏        | 123/1000 [28:48<3:25:22, 14.05s/it][Succeeded / Failed / Skipped / Total] 63 / 60 / 0 / 123:  12%|█▏        | 124/1000 [29:05<3:25:28, 14.07s/it][Succeeded / Failed / Skipped / Total] 63 / 61 / 0 / 124:  12%|█▏        | 124/1000 [29:05<3:25:28, 14.07s/it][Succeeded / Failed / Skipped / Total] 63 / 61 / 0 / 124:  12%|█▎        | 125/1000 [29:43<3:28:01, 14.26s/it][Succeeded / Failed / Skipped / Total] 63 / 62 / 0 / 125:  12%|█▎        | 125/1000 [29:43<3:28:01, 14.26s/it][Succeeded / Failed / Skipped / Total] 63 / 62 / 0 / 125:  13%|█▎        | 126/1000 [29:54<3:27:29, 14.24s/it]Get the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[thread]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 121 ---------------------------------------------
Render the HTML tag . --> we don t want to do this? --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[win]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 122 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[host]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Initialize the service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[http]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Build the LDAP provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[array]] ) { Assert . notNull ( [[array]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[array]] . trim ( ) ; StringBuilder [[definition]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[definition]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[definition]] . append ( "/" ) ; } [[definition]] . append ( trimmedBaseDn ) ; [[definition]] . append ( " " ) ; } return [[definition]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 125 ---------------------------------------------
Adds the pkce parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[test]] ( Map < String , Object > [[etc]] , Map < String , Object > additionalParameters ) { String [[context]] = this . codeVerifierGenerator . generateKey ( ) ; [[etc]] . put ( PkceParameterNames . CODE_VERIFIER , [[context]] ) ; try { String codeChallenge = createCodeChallenge ( [[context]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[context]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 63 / 0 / 126:  13%|█▎        | 126/1000 [29:54<3:27:29, 14.24s/it][Succeeded / Failed / Skipped / Total] 63 / 63 / 0 / 126:  13%|█▎        | 127/1000 [30:06<3:26:54, 14.22s/it][Succeeded / Failed / Skipped / Total] 63 / 64 / 0 / 127:  13%|█▎        | 127/1000 [30:06<3:26:54, 14.22s/it][Succeeded / Failed / Skipped / Total] 63 / 64 / 0 / 127:  13%|█▎        | 128/1000 [30:15<3:26:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 63 / 65 / 0 / 128:  13%|█▎        | 128/1000 [30:15<3:26:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 63 / 65 / 0 / 128:  13%|█▎        | 129/1000 [30:26<3:25:35, 14.16s/it][Succeeded / Failed / Skipped / Total] 63 / 66 / 0 / 129:  13%|█▎        | 129/1000 [30:26<3:25:35, 14.16s/it][Succeeded / Failed / Skipped / Total] 63 / 66 / 0 / 129:  13%|█▎        | 130/1000 [30:43<3:25:39, 14.18s/it][Succeeded / Failed / Skipped / Total] 64 / 66 / 0 / 130:  13%|█▎        | 130/1000 [30:43<3:25:39, 14.18s/it][Succeeded / Failed / Skipped / Total] 64 / 66 / 0 / 130:  13%|█▎        | 131/1000 [30:46<3:24:09, 14.10s/it][Succeeded / Failed / Skipped / Total] 65 / 66 / 0 / 131:  13%|█▎        | 131/1000 [30:46<3:24:09, 14.10s/it][Succeeded / Failed / Skipped / Total] 65 / 66 / 0 / 131:  13%|█▎        | 132/1000 [30:50<3:22:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 66 / 66 / 0 / 132:  13%|█▎        | 132/1000 [30:50<3:22:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 66 / 66 / 0 / 132:  13%|█▎        | 133/1000 [31:22<3:24:29, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 67 / 0 / 133:  13%|█▎        | 133/1000 [31:22<3:24:29, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 67 / 0 / 133:  13%|█▎        | 134/1000 [31:35<3:24:12, 14.15s/it]Handles authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[call]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 127 ---------------------------------------------
Checks for authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[destination]] ( final HttpServletRequest [[reply]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[reply]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[reply]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[reply]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 128 ---------------------------------------------
Checks if the current thread is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[index]] ( ) { Authentication [[key]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[key]] != null && [[key]] . isAuthenticated ( ) && ! ( [[key]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
Proxy service ticket request --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[type]] ( final boolean [[application]] , final HttpServletRequest request ) { if ( [[application]] ) { return "[[send]]" != "[[send]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
URL - encode a value . --> Encodes the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[data]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Returns true if the request should be executed . --> Perform a test --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[example]] ( final HttpServletRequest [[e]] ) { final boolean [[edge]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[e]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[edge]] ) ; } return [[edge]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Creates the security expression root . --> Taken from Spring Security --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[tation]] ( Authentication authentication , MethodInvocation [[application]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[application]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the JWK set . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[list]] ( ) { return this . [[net]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[org]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
[Succeeded / Failed / Skipped / Total] 66 / 68 / 0 / 134:  13%|█▎        | 134/1000 [31:35<3:24:12, 14.15s/it][Succeeded / Failed / Skipped / Total] 66 / 68 / 0 / 134:  14%|█▎        | 135/1000 [31:38<3:22:43, 14.06s/it][Succeeded / Failed / Skipped / Total] 66 / 69 / 0 / 135:  14%|█▎        | 135/1000 [31:38<3:22:43, 14.06s/it][Succeeded / Failed / Skipped / Total] 66 / 69 / 0 / 135:  14%|█▎        | 136/1000 [31:42<3:21:28, 13.99s/it][Succeeded / Failed / Skipped / Total] 66 / 70 / 0 / 136:  14%|█▎        | 136/1000 [31:42<3:21:28, 13.99s/it][Succeeded / Failed / Skipped / Total] 66 / 70 / 0 / 136:  14%|█▎        | 137/1000 [32:13<3:23:01, 14.11s/it][Succeeded / Failed / Skipped / Total] 67 / 70 / 0 / 137:  14%|█▎        | 137/1000 [32:13<3:23:01, 14.11s/it][Succeeded / Failed / Skipped / Total] 67 / 70 / 0 / 137:  14%|█▍        | 138/1000 [32:57<3:25:49, 14.33s/it][Succeeded / Failed / Skipped / Total] 68 / 70 / 0 / 138:  14%|█▍        | 138/1000 [32:57<3:25:49, 14.33s/it][Succeeded / Failed / Skipped / Total] 68 / 70 / 0 / 138:  14%|█▍        | 139/1000 [33:00<3:24:29, 14.25s/it][Succeeded / Failed / Skipped / Total] 68 / 71 / 0 / 139:  14%|█▍        | 139/1000 [33:00<3:24:29, 14.25s/it][Succeeded / Failed / Skipped / Total] 68 / 71 / 0 / 139:  14%|█▍        | 140/1000 [33:01<3:22:51, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 71 / 0 / 140:  14%|█▍        | 140/1000 [33:01<3:22:51, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 71 / 0 / 140:  14%|█▍        | 141/1000 [33:06<3:21:41, 14.09s/it]--------------------------------------------- Result 134 ---------------------------------------------
Maps current user groups to grants . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[query]] ( ) { List < String > [[object]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[object]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[object]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[authorization]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Returns the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[like]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Preprocess the map . --> Transform attributes2 . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[call]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[file]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[file]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[file]] . getKey ( ) , getGrantedAuthorityCollection ( [[file]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Concatenate two arrays . --> Calculate function from height --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[function]] ( byte [ ] ... [[height]] ) { int length = 0 ; for ( byte [ ] array : [[height]] ) { length += array . length ; } byte [ ] [[function]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[height]] ) { System . arraycopy ( array , 0 , [[function]] , destPos , array . length ) ; destPos += array . length ; } return [[function]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 139 ---------------------------------------------
Get a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[assume]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[font]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[font]] != null ) { gaList . addAll ( [[font]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 140 ---------------------------------------------
Returns the collection of granted authorities . --> Index group . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[index]] ( Object [[group]] ) { Collection < GrantedAuthority > [[name]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[name]] , [[group]] ) ; return [[name]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 72 / 0 / 141:  14%|█▍        | 141/1000 [33:06<3:21:41, 14.09s/it][Succeeded / Failed / Skipped / Total] 69 / 72 / 0 / 141:  14%|█▍        | 142/1000 [33:30<3:22:28, 14.16s/it][Succeeded / Failed / Skipped / Total] 69 / 73 / 0 / 142:  14%|█▍        | 142/1000 [33:30<3:22:28, 14.16s/it][Succeeded / Failed / Skipped / Total] 69 / 73 / 0 / 142:  14%|█▍        | 143/1000 [33:43<3:22:04, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 74 / 0 / 143:  14%|█▍        | 143/1000 [33:43<3:22:04, 14.15s/it][Succeeded / Failed / Skipped / Total] 69 / 74 / 0 / 143:  14%|█▍        | 144/1000 [33:49<3:21:02, 14.09s/it][Succeeded / Failed / Skipped / Total] 70 / 74 / 0 / 144:  14%|█▍        | 144/1000 [33:49<3:21:02, 14.09s/it][Succeeded / Failed / Skipped / Total] 70 / 74 / 0 / 144:  14%|█▍        | 145/1000 [33:57<3:20:12, 14.05s/it][Succeeded / Failed / Skipped / Total] 70 / 75 / 0 / 145:  14%|█▍        | 145/1000 [33:57<3:20:12, 14.05s/it][Succeeded / Failed / Skipped / Total] 70 / 75 / 0 / 145:  15%|█▍        | 146/1000 [34:07<3:19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 71 / 75 / 0 / 146:  15%|█▍        | 146/1000 [34:07<3:19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 71 / 75 / 0 / 146:  15%|█▍        | 147/1000 [34:14<3:18:40, 13.97s/it][Succeeded / Failed / Skipped / Total] 72 / 75 / 0 / 147:  15%|█▍        | 147/1000 [34:14<3:18:40, 13.97s/it][Succeeded / Failed / Skipped / Total] 72 / 75 / 0 / 147:  15%|█▍        | 148/1000 [34:20<3:17:41, 13.92s/it]Returns a new byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[add]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[array]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[array]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[array]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 142 ---------------------------------------------
Gets the shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[file]] > [[file]] getSharedObject ( Class < [[file]] > sharedType ) { return ( [[file]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Adds the given value to the given result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[print]] ( Collection < GrantedAuthority > [[value]] , Object [[order]] ) { if ( [[order]] == null ) { return ; } if ( [[order]] instanceof Collection < ? > ) { [[print]] ( [[value]] , ( Collection < ? > ) [[order]] ) ; } else if ( [[order]] instanceof Object [ ] ) { [[print]] ( [[value]] , ( Object [ ] ) [[order]] ) ; } else if ( [[order]] instanceof String ) { [[print]] ( [[value]] , ( String ) [[order]] ) ; } else if ( [[order]] instanceof GrantedAuthority ) { [[value]] . add ( ( GrantedAuthority ) [[order]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[order]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 144 ---------------------------------------------
Invokes interceptor . --> Execute interceptor interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[k]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[k]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 145 ---------------------------------------------
Get the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[configuration]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[configuration]] ) ; } return [[configuration]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 146 ---------------------------------------------
Check if any of the roles have any role --> Add any role to the distance array --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[distance]] ) { for ( int i = 0 ; i < [[distance]] . length ; i ++ ) { [[distance]] [ i ] = "ROLE_" + [[distance]] [ i ] ; } return [[distance]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 147 ---------------------------------------------
Checks if the given string is a role . --> Append the function to the version --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[function]] ( String [[version]] ) { Assert . isTrue ( ! [[version]] . startsWith ( "ROLE_" ) , ( ) -> [[version]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[version]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 76 / 0 / 148:  15%|█▍        | 148/1000 [34:20<3:17:41, 13.92s/it][Succeeded / Failed / Skipped / Total] 72 / 76 / 0 / 148:  15%|█▍        | 149/1000 [34:53<3:19:16, 14.05s/it][Succeeded / Failed / Skipped / Total] 73 / 76 / 0 / 149:  15%|█▍        | 149/1000 [34:53<3:19:16, 14.05s/it][Succeeded / Failed / Skipped / Total] 73 / 76 / 0 / 149:  15%|█▌        | 150/1000 [34:55<3:17:57, 13.97s/it][Succeeded / Failed / Skipped / Total] 74 / 76 / 0 / 150:  15%|█▌        | 150/1000 [34:55<3:17:57, 13.97s/it][Succeeded / Failed / Skipped / Total] 74 / 76 / 0 / 150:  15%|█▌        | 151/1000 [35:11<3:17:51, 13.98s/it][Succeeded / Failed / Skipped / Total] 75 / 76 / 0 / 151:  15%|█▌        | 151/1000 [35:11<3:17:51, 13.98s/it][Succeeded / Failed / Skipped / Total] 75 / 76 / 0 / 151:  15%|█▌        | 152/1000 [35:28<3:17:55, 14.00s/it][Succeeded / Failed / Skipped / Total] 76 / 76 / 0 / 152:  15%|█▌        | 152/1000 [35:28<3:17:55, 14.00s/it][Succeeded / Failed / Skipped / Total] 76 / 76 / 0 / 152:  15%|█▌        | 153/1000 [35:30<3:16:35, 13.93s/it][Succeeded / Failed / Skipped / Total] 77 / 76 / 0 / 153:  15%|█▌        | 153/1000 [35:30<3:16:35, 13.93s/it][Succeeded / Failed / Skipped / Total] 77 / 76 / 0 / 153:  15%|█▌        | 154/1000 [35:44<3:16:19, 13.92s/it]Build the redirect URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[end]] ( HttpServletRequest [[ability]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[ability]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[ability]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[ability]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[ability]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[ability]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[ability]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to switch to user . --> Perform authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[usernameParameter]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[authentication]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[see]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 150 ---------------------------------------------
Attempt to exit the user . --> Override this method for daemon authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[daemon]] ( HttpServletRequest [[a]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Display a public index --> Show a random bar --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[bar]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Spring security filter --> WebSecurity bean --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[array]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Callback when the login succeeded . --> Example of testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String [[username]] = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[test]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[answer]] ) { String [[answer]] = [[answer]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[answer]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[answer]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 77 / 0 / 154:  15%|█▌        | 154/1000 [35:44<3:16:19, 13.92s/it][Succeeded / Failed / Skipped / Total] 77 / 77 / 0 / 154:  16%|█▌        | 155/1000 [36:09<3:17:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 77 / 78 / 0 / 155:  16%|█▌        | 155/1000 [36:09<3:17:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 77 / 78 / 0 / 155:  16%|█▌        | 156/1000 [36:31<3:17:34, 14.05s/it][Succeeded / Failed / Skipped / Total] 77 / 79 / 0 / 156:  16%|█▌        | 156/1000 [36:31<3:17:34, 14.05s/it][Succeeded / Failed / Skipped / Total] 77 / 79 / 0 / 156:  16%|█▌        | 157/1000 [36:33<3:16:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 78 / 79 / 0 / 157:  16%|█▌        | 157/1000 [36:33<3:16:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 78 / 79 / 0 / 157:  16%|█▌        | 158/1000 [36:38<3:15:16, 13.91s/it][Succeeded / Failed / Skipped / Total] 78 / 80 / 0 / 158:  16%|█▌        | 158/1000 [36:38<3:15:16, 13.91s/it][Succeeded / Failed / Skipped / Total] 78 / 80 / 0 / 158:  16%|█▌        | 159/1000 [36:45<3:14:23, 13.87s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 0 / 159:  16%|█▌        | 159/1000 [36:45<3:14:23, 13.87s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 0 / 159:  16%|█▌        | 160/1000 [36:45<3:12:58, 13.78s/it]Sets the exit user URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[var]] ( String [[i]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[i]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[var]] = createMatcher ( [[i]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 155 ---------------------------------------------
Process auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[function]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 156 ---------------------------------------------
Decodes JWT --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 157 ---------------------------------------------
Authorizes the access using an access expression . --> Trigger this filter --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[trigger]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[null]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[null]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[null]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 158 ---------------------------------------------
Check if authorization is allowed for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[authorization]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[client]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[client]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
Converts the given JWT to a collection of authorities . --> This method is used to test against authentication . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[test]] ( Jwt [[ln]] ) { return getScopes ( [[ln]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 80 / 1 / 160:  16%|█▌        | 160/1000 [36:45<3:12:58, 13.78s/it][Succeeded / Failed / Skipped / Total] 79 / 80 / 1 / 160:  16%|█▌        | 161/1000 [36:54<3:12:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 80 / 80 / 1 / 161:  16%|█▌        | 161/1000 [36:54<3:12:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 80 / 80 / 1 / 161:  16%|█▌        | 162/1000 [37:04<3:11:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 81 / 80 / 1 / 162:  16%|█▌        | 162/1000 [37:04<3:11:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 81 / 80 / 1 / 162:  16%|█▋        | 163/1000 [37:17<3:11:31, 13.73s/it][Succeeded / Failed / Skipped / Total] 82 / 80 / 1 / 163:  16%|█▋        | 163/1000 [37:17<3:11:31, 13.73s/it][Succeeded / Failed / Skipped / Total] 82 / 80 / 1 / 163:  16%|█▋        | 164/1000 [37:21<3:10:27, 13.67s/it][Succeeded / Failed / Skipped / Total] 83 / 80 / 1 / 164:  16%|█▋        | 164/1000 [37:21<3:10:27, 13.67s/it][Succeeded / Failed / Skipped / Total] 83 / 80 / 1 / 164:  16%|█▋        | 165/1000 [37:38<3:10:29, 13.69s/it][Succeeded / Failed / Skipped / Total] 84 / 80 / 1 / 165:  16%|█▋        | 165/1000 [37:38<3:10:29, 13.69s/it][Succeeded / Failed / Skipped / Total] 84 / 80 / 1 / 165:  17%|█▋        | 166/1000 [37:43<3:09:31, 13.63s/it][Succeeded / Failed / Skipped / Total] 84 / 81 / 1 / 166:  17%|█▋        | 166/1000 [37:43<3:09:31, 13.63s/it][Succeeded / Failed / Skipped / Total] 84 / 81 / 1 / 166:  17%|█▋        | 167/1000 [37:57<3:09:18, 13.64s/it]Handle addPermission --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 161 ---------------------------------------------
Display AddPermission page for contact --> Route addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bus]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 162 ---------------------------------------------
Generates a CSRF token for this request . --> Gets the post . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[group]] ( HttpServletRequest request ) { return wrap ( request , this . [[post]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 163 ---------------------------------------------
Displays a permission --> HTTP DELETE request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[test]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[control]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[control]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[control]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Creates a user details resource factory bean from a string . --> Programmatically loads user details resources . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[program]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 165 ---------------------------------------------
Returns the first value of the specified attribute . --> Sort attributes by name . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[sort]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 166 ---------------------------------------------
Display admin permission --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 81 / 1 / 167:  17%|█▋        | 167/1000 [37:57<3:09:18, 13.64s/it][Succeeded / Failed / Skipped / Total] 85 / 81 / 1 / 167:  17%|█▋        | 168/1000 [38:03<3:08:31, 13.60s/it][Succeeded / Failed / Skipped / Total] 86 / 81 / 1 / 168:  17%|█▋        | 168/1000 [38:03<3:08:31, 13.60s/it][Succeeded / Failed / Skipped / Total] 86 / 81 / 1 / 168:  17%|█▋        | 169/1000 [38:14<3:08:00, 13.57s/it][Succeeded / Failed / Skipped / Total] 87 / 81 / 1 / 169:  17%|█▋        | 169/1000 [38:14<3:08:00, 13.57s/it][Succeeded / Failed / Skipped / Total] 87 / 81 / 1 / 169:  17%|█▋        | 170/1000 [38:29<3:07:57, 13.59s/it][Succeeded / Failed / Skipped / Total] 88 / 81 / 1 / 170:  17%|█▋        | 170/1000 [38:29<3:07:57, 13.59s/it][Succeeded / Failed / Skipped / Total] 88 / 81 / 1 / 170:  17%|█▋        | 171/1000 [38:30<3:06:42, 13.51s/it][Succeeded / Failed / Skipped / Total] 89 / 81 / 1 / 171:  17%|█▋        | 171/1000 [38:30<3:06:42, 13.51s/it][Succeeded / Failed / Skipped / Total] 89 / 81 / 1 / 171:  17%|█▋        | 172/1000 [38:59<3:07:43, 13.60s/it][Succeeded / Failed / Skipped / Total] 89 / 82 / 1 / 172:  17%|█▋        | 172/1000 [38:59<3:07:43, 13.60s/it][Succeeded / Failed / Skipped / Total] 89 / 82 / 1 / 172:  17%|█▋        | 173/1000 [39:12<3:07:26, 13.60s/it][Succeeded / Failed / Skipped / Total] 90 / 82 / 1 / 173:  17%|█▋        | 173/1000 [39:12<3:07:26, 13.60s/it][Succeeded / Failed / Skipped / Total] 90 / 82 / 1 / 173:  17%|█▋        | 174/1000 [39:35<3:07:57, 13.65s/it][Succeeded / Failed / Skipped / Total] 90 / 83 / 1 / 174:  17%|█▋        | 174/1000 [39:35<3:07:57, 13.65s/it][Succeeded / Failed / Skipped / Total] 90 / 83 / 1 / 174:  18%|█▊        | 175/1000 [39:49<3:07:43, 13.65s/it]Gets the role with the given default role prefix . --> Append commands to authority --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[object]] ( String [[authority]] , String [[commands]] ) { if ( [[commands]] == null ) { return [[commands]] ; } if ( [[authority]] == null || [[authority]] . length ( ) == 0 ) { return [[commands]] ; } if ( [[commands]] . startsWith ( [[authority]] ) ) { return [[commands]] ; } return [[authority]] + [[commands]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 168 ---------------------------------------------
Get all the values of an attribute . --> Finds all attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[find]] ( String [[reference]] ) { List < String > [[t]] = null ; if ( attributes != null ) { [[t]] = attributes . get ( [[reference]] ) ; } if ( [[t]] == null ) { [[t]] = Collections . emptyList ( ) ; } return [[t]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 169 ---------------------------------------------
Decodes a byte array . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[find]] ( byte [ ] [[w]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[w]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Returns all configuration attributes specified for the target class --> Executes attributes specified on targetClass --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[execute]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 171 ---------------------------------------------
Encodes a character sequence into a byte array . --> Encode CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[handler]] ( CharSequence [[loop]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[loop]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 172 ---------------------------------------------
Add new contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Get all config attributes . --> Get all methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[contains]] ( ) { Set < ConfigAttribute > [[state]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[by]] : methodMap . values ( ) ) { [[state]] . addAll ( [[by]] ) ; } return [[state]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a new security method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( method , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[assignment]] ( RegisteredMethod method , List < ConfigAttribute > [[array]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[array]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[array]] + "]" ) ; } this . [[access]] . put ( method , [[array]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
[Succeeded / Failed / Skipped / Total] 91 / 83 / 1 / 175:  18%|█▊        | 175/1000 [39:49<3:07:43, 13.65s/it][Succeeded / Failed / Skipped / Total] 91 / 83 / 1 / 175:  18%|█▊        | 176/1000 [40:21<3:08:57, 13.76s/it][Succeeded / Failed / Skipped / Total] 92 / 83 / 1 / 176:  18%|█▊        | 176/1000 [40:21<3:08:57, 13.76s/it][Succeeded / Failed / Skipped / Total] 92 / 83 / 1 / 176:  18%|█▊        | 177/1000 [40:31<3:08:26, 13.74s/it][Succeeded / Failed / Skipped / Total] 92 / 84 / 1 / 177:  18%|█▊        | 177/1000 [40:31<3:08:26, 13.74s/it][Succeeded / Failed / Skipped / Total] 92 / 84 / 1 / 177:  18%|█▊        | 178/1000 [40:46<3:08:16, 13.74s/it][Succeeded / Failed / Skipped / Total] 93 / 84 / 1 / 178:  18%|█▊        | 178/1000 [40:46<3:08:16, 13.74s/it][Succeeded / Failed / Skipped / Total] 93 / 84 / 1 / 178:  18%|█▊        | 179/1000 [41:02<3:08:14, 13.76s/it][Succeeded / Failed / Skipped / Total] 94 / 84 / 1 / 179:  18%|█▊        | 179/1000 [41:02<3:08:14, 13.76s/it][Succeeded / Failed / Skipped / Total] 94 / 84 / 1 / 179:  18%|█▊        | 180/1000 [41:20<3:08:20, 13.78s/it][Succeeded / Failed / Skipped / Total] 94 / 85 / 1 / 180:  18%|█▊        | 180/1000 [41:20<3:08:20, 13.78s/it][Succeeded / Failed / Skipped / Total] 94 / 85 / 1 / 180:  18%|█▊        | 181/1000 [41:24<3:07:23, 13.73s/it][Succeeded / Failed / Skipped / Total] 95 / 85 / 1 / 181:  18%|█▊        | 181/1000 [41:24<3:07:23, 13.73s/it][Succeeded / Failed / Skipped / Total] 95 / 85 / 1 / 181:  18%|█▊        | 182/1000 [42:00<3:08:46, 13.85s/it]--------------------------------------------- Result 175 ---------------------------------------------
Checks if is match . --> loop through binary --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[loop]] ( String [[null]] , String [[binary]] ) { return ( [[binary]] . endsWith ( "*" ) && [[null]] . startsWith ( [[binary]] . substring ( 0 , [[binary]] . length ( ) - 1 ) ) ) || ( [[binary]] . startsWith ( "*" ) && [[null]] . endsWith ( [[binary]] . substring ( 1 , [[binary]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Sets any request that matches any request . --> Sets the application --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[application]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[session]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[http]]" == "[[http]]" ; return [[session]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 177 ---------------------------------------------
Handles bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[ding]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[ding]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Lookup parameter names . --> Look up parameters for a given type --> Socre: 1.0

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < parameterCount ; [[i]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[i]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "[[True]]" == "[[True]]" ; [[paramNames]] [ [[i]] ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[shape]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[j]] = 0 ; [[j]] < parameterCount ; [[j]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[j]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "[[error]]" == "[[error]]" ; [[shape]] [ [[j]] ] = parameterName ; } } return found ? [[shape]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 179 ---------------------------------------------
Get a random contact --> End the current contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[end]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes from session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[ask]] ( HttpServletRequest request ) { HttpSession [[a]] = request . getSession ( "False" != "False" ) ; if ( [[a]] == null ) { return ; } [[a]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Retrieves a field from a class . --> List all fields of a file --> Socre: 1.0

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[list]] ( Class < ? > [[file]] , String [[f]] ) throws IllegalStateException { Assert . notNull ( [[file]] , "Class required" ) ; Assert . hasText ( [[f]] , "Field name required" ) ; try { return [[file]] . getDeclaredField ( [[f]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 86 / 1 / 182:  18%|█▊        | 182/1000 [42:00<3:08:46, 13.85s/it][Succeeded / Failed / Skipped / Total] 95 / 86 / 1 / 182:  18%|█▊        | 183/1000 [42:04<3:07:51, 13.80s/it][Succeeded / Failed / Skipped / Total] 95 / 87 / 1 / 183:  18%|█▊        | 183/1000 [42:04<3:07:51, 13.80s/it][Succeeded / Failed / Skipped / Total] 95 / 87 / 1 / 183:  18%|█▊        | 184/1000 [42:16<3:07:30, 13.79s/it][Succeeded / Failed / Skipped / Total] 95 / 88 / 1 / 184:  18%|█▊        | 184/1000 [42:16<3:07:30, 13.79s/it][Succeeded / Failed / Skipped / Total] 96 / 88 / 1 / 185:  18%|█▊        | 185/1000 [42:16<3:06:15, 13.71s/it][Succeeded / Failed / Skipped / Total] 96 / 88 / 1 / 185:  19%|█▊        | 186/1000 [42:41<3:06:48, 13.77s/it][Succeeded / Failed / Skipped / Total] 96 / 89 / 1 / 186:  19%|█▊        | 186/1000 [42:41<3:06:48, 13.77s/it][Succeeded / Failed / Skipped / Total] 96 / 89 / 1 / 186:  19%|█▊        | 187/1000 [42:52<3:06:22, 13.76s/it][Succeeded / Failed / Skipped / Total] 96 / 90 / 1 / 187:  19%|█▊        | 187/1000 [42:52<3:06:22, 13.76s/it][Succeeded / Failed / Skipped / Total] 96 / 90 / 1 / 187:  19%|█▉        | 188/1000 [43:01<3:05:48, 13.73s/it]Create the service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[mail]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Extract SHA prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[exit]] = encPass . lastIndexOf ( ' ' ) ; if ( [[exit]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[exit]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Create the redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[end]] ( final String [[call]] ) { return CommonUtils . constructRedirectUrl ( this . [[fetch]] , this . serviceProperties . getServiceParameter ( ) , [[call]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Checks stack . --> Check stack . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[a]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[a]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[a]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[a]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[a]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[a]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[a]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[a]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[a]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 186 ---------------------------------------------
Called by the authentication process . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[authentication]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[buffer]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[shift]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 90 / 1 / 188:  19%|█▉        | 188/1000 [43:01<3:05:48, 13.73s/it][Succeeded / Failed / Skipped / Total] 97 / 90 / 1 / 188:  19%|█▉        | 189/1000 [43:07<3:05:03, 13.69s/it][Succeeded / Failed / Skipped / Total] 98 / 90 / 1 / 189:  19%|█▉        | 189/1000 [43:07<3:05:03, 13.69s/it][Succeeded / Failed / Skipped / Total] 98 / 90 / 1 / 189:  19%|█▉        | 190/1000 [43:18<3:04:36, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 90 / 1 / 190:  19%|█▉        | 190/1000 [43:18<3:04:36, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 90 / 1 / 190:  19%|█▉        | 191/1000 [43:43<3:05:12, 13.74s/it][Succeeded / Failed / Skipped / Total] 99 / 91 / 1 / 191:  19%|█▉        | 191/1000 [43:43<3:05:12, 13.74s/it][Succeeded / Failed / Skipped / Total] 99 / 91 / 1 / 191:  19%|█▉        | 192/1000 [43:45<3:04:09, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 92 / 1 / 192:  19%|█▉        | 192/1000 [43:45<3:04:09, 13.67s/it][Succeeded / Failed / Skipped / Total] 99 / 92 / 1 / 192:  19%|█▉        | 193/1000 [43:51<3:03:21, 13.63s/it][Succeeded / Failed / Skipped / Total] 99 / 93 / 1 / 193:  19%|█▉        | 193/1000 [43:51<3:03:21, 13.63s/it][Succeeded / Failed / Skipped / Total] 99 / 93 / 1 / 193:  19%|█▉        | 194/1000 [44:33<3:05:08, 13.78s/it]Register the access manager . --> Creates a new bean name --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[expressionVoter]] ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[expressionVoter]] != null ) { voters . add ( [[expressionVoter]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[name]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[b]] ) { BeanDefinitionBuilder [[a]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[b]] != null ) { voters . add ( [[b]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[a]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[a]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 189 ---------------------------------------------
Compares two byte arrays . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[call]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the cause of a throwable . --> Scans a var --> Socre: 1.0

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[scan]] ( Throwable [[var]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[array]] = entry . getKey ( ) ; if ( [[array]] . isInstance ( [[var]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[var]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[escape]] ( String [[access]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[access]] ) , ( ) -> "'" + [[access]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[access]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of user authorities to a set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[assume]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the function which allows to resolve hidden inputs --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[find]] ( Function < HttpServletRequest , Map < String , String > > [[string]] ) { Assert . notNull ( [[string]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[string]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 93 / 1 / 194:  19%|█▉        | 194/1000 [44:33<3:05:08, 13.78s/it][Succeeded / Failed / Skipped / Total] 100 / 93 / 1 / 194:  20%|█▉        | 195/1000 [44:40<3:04:24, 13.74s/it][Succeeded / Failed / Skipped / Total] 100 / 94 / 1 / 195:  20%|█▉        | 195/1000 [44:40<3:04:24, 13.74s/it][Succeeded / Failed / Skipped / Total] 100 / 94 / 1 / 195:  20%|█▉        | 196/1000 [44:46<3:03:38, 13.71s/it][Succeeded / Failed / Skipped / Total] 100 / 95 / 1 / 196:  20%|█▉        | 196/1000 [44:46<3:03:38, 13.71s/it][Succeeded / Failed / Skipped / Total] 100 / 95 / 1 / 196:  20%|█▉        | 197/1000 [45:03<3:03:38, 13.72s/it][Succeeded / Failed / Skipped / Total] 101 / 95 / 1 / 197:  20%|█▉        | 197/1000 [45:03<3:03:38, 13.72s/it][Succeeded / Failed / Skipped / Total] 101 / 95 / 1 / 197:  20%|█▉        | 198/1000 [46:12<3:07:09, 14.00s/it][Succeeded / Failed / Skipped / Total] 101 / 96 / 1 / 198:  20%|█▉        | 198/1000 [46:12<3:07:09, 14.00s/it][Succeeded / Failed / Skipped / Total] 101 / 96 / 1 / 198:  20%|█▉        | 199/1000 [46:23<3:06:44, 13.99s/it]Extracts the identifier from a ResultSet . --> Convert a list of identifiers to a ClassId --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[list]] , ResultSet [[box]] ) throws SQLException { if ( isString ( [[list]] ) && hasValidClassIdType ( [[box]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[box]] ) ) ) { [[list]] = convertFromStringTo ( ( String ) [[list]] , classIdTypeFrom ( [[box]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Returns the list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[move]] ( String [[pattern]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[compare]] : idToAttributes . entrySet ( ) ) { if ( [[compare]] . getKey ( ) . matcher ( [[pattern]] ) . matches ( ) ) { return [[compare]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Checks if is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[fix]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
Build request url --> Converts a servlet path into a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[http]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 198 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[exception]] ( ObjectIdentity object , Sid owner ) { Long [[ted]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[ted]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 97 / 1 / 199:  20%|█▉        | 199/1000 [46:23<3:06:44, 13.99s/it][Succeeded / Failed / Skipped / Total] 101 / 97 / 1 / 199:  20%|██        | 200/1000 [46:31<3:06:04, 13.96s/it][Succeeded / Failed / Skipped / Total] 101 / 98 / 1 / 200:  20%|██        | 200/1000 [46:31<3:06:04, 13.96s/it][Succeeded / Failed / Skipped / Total] 101 / 98 / 1 / 200:  20%|██        | 201/1000 [46:31<3:04:58, 13.89s/it][Succeeded / Failed / Skipped / Total] 101 / 99 / 1 / 201:  20%|██        | 201/1000 [46:31<3:04:58, 13.89s/it][Succeeded / Failed / Skipped / Total] 101 / 99 / 1 / 201:  20%|██        | 202/1000 [46:43<3:04:34, 13.88s/it][Succeeded / Failed / Skipped / Total] 102 / 99 / 1 / 202:  20%|██        | 202/1000 [46:43<3:04:34, 13.88s/it][Succeeded / Failed / Skipped / Total] 102 / 99 / 1 / 202:  20%|██        | 203/1000 [47:25<3:06:10, 14.02s/it][Succeeded / Failed / Skipped / Total] 102 / 100 / 1 / 203:  20%|██        | 203/1000 [47:25<3:06:10, 14.02s/it][Succeeded / Failed / Skipped / Total] 102 / 100 / 1 / 203:  20%|██        | 204/1000 [47:33<3:05:34, 13.99s/it][Succeeded / Failed / Skipped / Total] 102 / 101 / 1 / 204:  20%|██        | 204/1000 [47:33<3:05:34, 13.99s/it][Succeeded / Failed / Skipped / Total] 102 / 101 / 1 / 204:  20%|██        | 205/1000 [47:34<3:04:29, 13.92s/it]Insert entries in acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[a]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 200 ---------------------------------------------
Saves the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[exit]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 201 ---------------------------------------------
Update the object identity of acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[after]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[after]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
Matcher any any remaining exchanges . --> Matcher B --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[b]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 203 ---------------------------------------------
Creates and returns a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[r]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[r]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Derive text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[cipher]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[cipher]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 102 / 1 / 205:  20%|██        | 205/1000 [47:34<3:04:29, 13.92s/it][Succeeded / Failed / Skipped / Total] 102 / 102 / 1 / 205:  21%|██        | 206/1000 [47:43<3:03:55, 13.90s/it][Succeeded / Failed / Skipped / Total] 103 / 102 / 1 / 206:  21%|██        | 206/1000 [47:43<3:03:55, 13.90s/it][Succeeded / Failed / Skipped / Total] 103 / 102 / 1 / 206:  21%|██        | 207/1000 [47:49<3:03:11, 13.86s/it][Succeeded / Failed / Skipped / Total] 104 / 102 / 1 / 207:  21%|██        | 207/1000 [47:49<3:03:11, 13.86s/it][Succeeded / Failed / Skipped / Total] 104 / 102 / 1 / 207:  21%|██        | 208/1000 [47:50<3:02:09, 13.80s/it][Succeeded / Failed / Skipped / Total] 105 / 102 / 1 / 208:  21%|██        | 208/1000 [47:50<3:02:09, 13.80s/it][Succeeded / Failed / Skipped / Total] 105 / 102 / 1 / 208:  21%|██        | 209/1000 [47:51<3:01:09, 13.74s/it][Succeeded / Failed / Skipped / Total] 105 / 103 / 1 / 209:  21%|██        | 209/1000 [47:51<3:01:09, 13.74s/it][Succeeded / Failed / Skipped / Total] 105 / 103 / 1 / 209:  21%|██        | 210/1000 [48:10<3:01:14, 13.77s/it][Succeeded / Failed / Skipped / Total] 106 / 103 / 1 / 210:  21%|██        | 210/1000 [48:10<3:01:14, 13.77s/it][Succeeded / Failed / Skipped / Total] 106 / 103 / 1 / 210:  21%|██        | 211/1000 [48:24<3:01:02, 13.77s/it]Creates encryptor for encrypted text . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[a]] ( CharSequence [[cache]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[cache]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Write headers to response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[error]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[error]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[error]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[error]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 207 ---------------------------------------------
Determines the target URL . --> Should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[where]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 208 ---------------------------------------------
Determine the target URL . --> Perform an authentication . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[a]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[a]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 209 ---------------------------------------------
Creates a list of matchers for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[implement]] ( HttpMethod method , String ... [[length]] ) { List < ServerWebExchangeMatcher > [[thread]] = new ArrayList <> ( [[length]] . length ) ; for ( String pattern : [[length]] ) { [[thread]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[thread]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 210 ---------------------------------------------
Creates a map containing shared objects . --> modifiable object creation --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[mod]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 103 / 1 / 211:  21%|██        | 211/1000 [48:24<3:01:02, 13.77s/it][Succeeded / Failed / Skipped / Total] 107 / 103 / 1 / 211:  21%|██        | 212/1000 [48:25<3:00:00, 13.71s/it][Succeeded / Failed / Skipped / Total] 107 / 104 / 1 / 212:  21%|██        | 212/1000 [48:25<3:00:00, 13.71s/it][Succeeded / Failed / Skipped / Total] 107 / 104 / 1 / 212:  21%|██▏       | 213/1000 [48:45<3:00:08, 13.73s/it][Succeeded / Failed / Skipped / Total] 107 / 105 / 1 / 213:  21%|██▏       | 213/1000 [48:45<3:00:08, 13.73s/it][Succeeded / Failed / Skipped / Total] 107 / 105 / 1 / 213:  21%|██▏       | 214/1000 [48:55<2:59:42, 13.72s/it][Succeeded / Failed / Skipped / Total] 107 / 106 / 1 / 214:  21%|██▏       | 214/1000 [48:55<2:59:42, 13.72s/it][Succeeded / Failed / Skipped / Total] 107 / 106 / 1 / 214:  22%|██▏       | 215/1000 [49:01<2:58:58, 13.68s/it][Succeeded / Failed / Skipped / Total] 108 / 106 / 1 / 215:  22%|██▏       | 215/1000 [49:01<2:58:58, 13.68s/it][Succeeded / Failed / Skipped / Total] 108 / 106 / 1 / 215:  22%|██▏       | 216/1000 [49:42<3:00:25, 13.81s/it][Succeeded / Failed / Skipped / Total] 109 / 106 / 1 / 216:  22%|██▏       | 216/1000 [49:42<3:00:25, 13.81s/it][Succeeded / Failed / Skipped / Total] 109 / 106 / 1 / 216:  22%|██▏       | 217/1000 [49:53<3:00:02, 13.80s/it][Succeeded / Failed / Skipped / Total] 109 / 107 / 1 / 217:  22%|██▏       | 217/1000 [49:53<3:00:02, 13.80s/it][Succeeded / Failed / Skipped / Total] 110 / 107 / 1 / 218:  22%|██▏       | 218/1000 [49:53<2:58:59, 13.73s/it][Succeeded / Failed / Skipped / Total] 110 / 107 / 1 / 218:  22%|██▏       | 219/1000 [50:00<2:58:20, 13.70s/it][Succeeded / Failed / Skipped / Total] 111 / 107 / 1 / 219:  22%|██▏       | 219/1000 [50:00<2:58:20, 13.70s/it]Retrieves the directory with the given id . --> only called by thread --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[access]] ( final Long [[thread]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[thread]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 212 ---------------------------------------------
Sets the target URL parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[exception]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 213 ---------------------------------------------
Build the DN with the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[header]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[header]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 214 ---------------------------------------------
Get the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[product]] ( ) { long [[cut]] = System . currentTimeMillis ( ) ; if ( ( [[cut]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[cut]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[cut]] ; currentDate = format . format ( new Date ( [[cut]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Updates the cache . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[main]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 216 ---------------------------------------------
Set the authentication details . --> Helper method for AJAX processing --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[ajax]] ( HttpServletRequest [[access]] , UsernamePasswordAuthenticationToken [[alias]] ) { [[alias]] . setDetails ( authenticationDetailsSource . buildDetails ( [[access]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Determines the security name for the User . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[example]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[pose]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 218 ---------------------------------------------
Internal method to parse a date . --> Method to parse a set of fields --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < [[formats]] . length ) ; [[i]] ++ ) { try { [[date]] = [[formats]] [ [[i]] ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[method]] ( String [[set]] , DateFormat [ ] [[field]] ) { Date [[result]] = null ; for ( int [[a]] = 0 ; ( [[result]] == null ) && ( [[a]] < [[field]] . length ) ; [[a]] ++ ) { try { [[result]] = [[field]] [ [[a]] ] . parse ( [[set]] ) ; } catch ( ParseException ignored ) { } } if ( [[result]] == null ) { return null ; } return new Long ( [[result]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 219 ---------------------------------------------
Returns the list of groups associated with the specified security name . --> Extract groups from a description --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[description]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
[Succeeded / Failed / Skipped / Total] 112 / 107 / 1 / 220:  22%|██▏       | 220/1000 [50:18<2:58:20, 13.72s/it][Succeeded / Failed / Skipped / Total] 112 / 107 / 1 / 220:  22%|██▏       | 221/1000 [50:25<2:57:43, 13.69s/it][Succeeded / Failed / Skipped / Total] 113 / 107 / 1 / 221:  22%|██▏       | 221/1000 [50:25<2:57:43, 13.69s/it][Succeeded / Failed / Skipped / Total] 113 / 107 / 1 / 221:  22%|██▏       | 222/1000 [50:52<2:58:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 113 / 108 / 1 / 222:  22%|██▏       | 222/1000 [50:52<2:58:19, 13.75s/it][Succeeded / Failed / Skipped / Total] 113 / 108 / 1 / 222:  22%|██▏       | 223/1000 [50:58<2:57:37, 13.72s/it][Succeeded / Failed / Skipped / Total] 114 / 108 / 1 / 223:  22%|██▏       | 223/1000 [50:58<2:57:37, 13.72s/it][Succeeded / Failed / Skipped / Total] 114 / 108 / 1 / 223:  22%|██▏       | 224/1000 [51:03<2:56:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 115 / 108 / 1 / 224:  22%|██▏       | 224/1000 [51:03<2:56:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 115 / 108 / 1 / 224:  22%|██▎       | 225/1000 [51:23<2:57:00, 13.70s/it][Succeeded / Failed / Skipped / Total] 116 / 108 / 1 / 225:  22%|██▎       | 225/1000 [51:23<2:57:00, 13.70s/it][Succeeded / Failed / Skipped / Total] 116 / 108 / 1 / 225:  23%|██▎       | 226/1000 [51:47<2:57:21, 13.75s/it][Succeeded / Failed / Skipped / Total] 117 / 108 / 1 / 226:  23%|██▎       | 226/1000 [51:47<2:57:21, 13.75s/it][Succeeded / Failed / Skipped / Total] 117 / 108 / 1 / 226:  23%|██▎       | 227/1000 [51:55<2:56:50, 13.73s/it]--------------------------------------------- Result 220 ---------------------------------------------
Throws SessionAuthenticationException if allowed . --> Check if the session control is allowed --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[client]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Build the DN for the group search . --> Build the GroupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[add]] ) { DistinguishedName [[mod]] = new DistinguishedName ( groupSearchBase ) ; [[mod]] . add ( groupRoleAttributeName , [[add]] . toLowerCase ( ) ) ; return [[mod]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Configures JAas using loop . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[n]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[digit]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[digit]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[digit]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[digit]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 223 ---------------------------------------------
Get the filters for the given request . --> Checks to see if it matches --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[include]] ( HttpServletRequest [[rant]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[rant]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 224 ---------------------------------------------
Copy details from source to dest --> Add an attack token --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[id]] ( Authentication source , Authentication [[attacker]] ) { if ( ( [[attacker]] instanceof AbstractAuthenticationToken ) && ( [[attacker]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[attacker]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Gets the filters from the URL . --> Applies a GET request to the firewall --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[after]] ( String [[a]] ) { return [[after]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[a]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 226 ---------------------------------------------
Replies the application context . --> Returns the FileContext required for FileContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[files]] ( PageContext [[format]] ) { ServletContext [[h]] = [[format]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[h]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 109 / 1 / 227:  23%|██▎       | 227/1000 [51:55<2:56:50, 13.73s/it][Succeeded / Failed / Skipped / Total] 117 / 109 / 1 / 227:  23%|██▎       | 228/1000 [52:05<2:56:23, 13.71s/it][Succeeded / Failed / Skipped / Total] 118 / 109 / 1 / 228:  23%|██▎       | 228/1000 [52:05<2:56:23, 13.71s/it][Succeeded / Failed / Skipped / Total] 118 / 109 / 1 / 228:  23%|██▎       | 229/1000 [52:12<2:55:47, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 110 / 1 / 229:  23%|██▎       | 229/1000 [52:12<2:55:47, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 110 / 1 / 229:  23%|██▎       | 230/1000 [52:26<2:55:33, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 111 / 1 / 230:  23%|██▎       | 230/1000 [52:26<2:55:33, 13.68s/it][Succeeded / Failed / Skipped / Total] 118 / 111 / 1 / 230:  23%|██▎       | 231/1000 [52:43<2:55:30, 13.69s/it][Succeeded / Failed / Skipped / Total] 119 / 111 / 1 / 231:  23%|██▎       | 231/1000 [52:43<2:55:30, 13.69s/it][Succeeded / Failed / Skipped / Total] 119 / 111 / 1 / 231:  23%|██▎       | 232/1000 [52:50<2:54:55, 13.67s/it][Succeeded / Failed / Skipped / Total] 119 / 112 / 1 / 232:  23%|██▎       | 232/1000 [52:50<2:54:55, 13.67s/it][Succeeded / Failed / Skipped / Total] 119 / 112 / 1 / 232:  23%|██▎       | 233/1000 [53:07<2:54:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 120 / 112 / 1 / 233:  23%|██▎       | 233/1000 [53:07<2:54:52, 13.68s/it][Succeeded / Failed / Skipped / Total] 120 / 112 / 1 / 233:  23%|██▎       | 234/1000 [53:28<2:55:01, 13.71s/it]Change the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[username]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[username]] ) ; DistinguishedName [[userDn]] = usernameMapper . buildDn ( [[username]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[userDn]] , [[oldPassword]] , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( [[userDn]] , [[oldPassword]] , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[ignore]] ( final String [[credentials]] , final String [[adversary]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[attacker]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[attacker]] ) ; DistinguishedName [[password]] = usernameMapper . buildDn ( [[attacker]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[password]] , [[credentials]] , [[adversary]] ) ; } else { changePasswordUsingAttributeModification ( [[password]] , [[credentials]] , [[adversary]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 228 ---------------------------------------------
Set session attributes . --> Update group with given variables --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[group]] ( Map < String , Object > [[variables]] ) { notNull ( [[variables]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[variables]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Returns the full DN of the given dn . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[exclude]] ( DistinguishedName [[ignore]] , Context [[header]] ) throws NamingException { DistinguishedName [[include]] = new DistinguishedName ( [[header]] . getNameInNamespace ( ) ) ; if ( [[ignore]] . contains ( [[include]] ) ) { return [[ignore]] ; } [[include]] . append ( [[ignore]] ) ; return [[include]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 230 ---------------------------------------------
Configures the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[filtered]] ( List < Filter > [[x]] ) { Validate . notNull ( [[filtered]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filtered]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme with the given user name and password . --> Specify an OAuth scheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[o]] ( String [[http]] , String password ) { final PreemptiveBasicAuthScheme [[x]] = new PreemptiveBasicAuthScheme ( ) ; [[x]] . setUserName ( [[http]] ) ; [[x]] . setPassword ( password ) ; return [[x]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[sort]] ( Filter [[y]] , Filter ... [[a]] ) { Validate . notNull ( [[y]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[y]] ) ; if ( [[a]] != null ) { Collections . addAll ( RestAssured . filters , [[a]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Sets the proxy to use . --> Specifies error on error --> Socre: 1.0

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[error]] ) { if ( [[error]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[error]] . getHost ( ) , [[error]] . getPort ( ) , [[error]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 113 / 1 / 234:  23%|██▎       | 234/1000 [53:28<2:55:01, 13.71s/it][Succeeded / Failed / Skipped / Total] 120 / 113 / 1 / 234:  24%|██▎       | 235/1000 [53:29<2:54:06, 13.66s/it][Succeeded / Failed / Skipped / Total] 121 / 113 / 1 / 235:  24%|██▎       | 235/1000 [53:29<2:54:06, 13.66s/it][Succeeded / Failed / Skipped / Total] 121 / 113 / 1 / 235:  24%|██▎       | 236/1000 [53:44<2:53:59, 13.66s/it][Succeeded / Failed / Skipped / Total] 122 / 113 / 1 / 236:  24%|██▎       | 236/1000 [53:44<2:53:59, 13.66s/it][Succeeded / Failed / Skipped / Total] 122 / 113 / 1 / 236:  24%|██▎       | 237/1000 [53:45<2:53:05, 13.61s/it][Succeeded / Failed / Skipped / Total] 123 / 113 / 1 / 237:  24%|██▎       | 237/1000 [53:45<2:53:05, 13.61s/it][Succeeded / Failed / Skipped / Total] 123 / 113 / 1 / 237:  24%|██▍       | 238/1000 [54:15<2:53:44, 13.68s/it][Succeeded / Failed / Skipped / Total] 123 / 114 / 1 / 238:  24%|██▍       | 238/1000 [54:15<2:53:44, 13.68s/it][Succeeded / Failed / Skipped / Total] 123 / 114 / 1 / 238:  24%|██▍       | 239/1000 [54:33<2:53:41, 13.69s/it]Creates an authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[function]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Print response to given stream . --> Declaration method . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[declaration]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Sets the config that will be used for redirect requests . --> Pack rest configuration into RestAssuredConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[pack]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Use default query parameter charset . --> Defines array encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[array]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 238 ---------------------------------------------
Returns a new authentication scheme with the given username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig [[config]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[id]] ( String userName , String password , FormAuthConfig [[type]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[command]] = new FormAuthScheme ( ) ; [[command]] . setUserName ( userName ) ; [[command]] . setPassword ( password ) ; [[command]] . setConfig ( [[type]] ) ; return [[command]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 115 / 1 / 239:  24%|██▍       | 239/1000 [54:33<2:53:41, 13.69s/it][Succeeded / Failed / Skipped / Total] 123 / 115 / 1 / 239:  24%|██▍       | 240/1000 [54:35<2:52:50, 13.65s/it][Succeeded / Failed / Skipped / Total] 124 / 115 / 1 / 240:  24%|██▍       | 240/1000 [54:35<2:52:50, 13.65s/it][Succeeded / Failed / Skipped / Total] 124 / 115 / 1 / 240:  24%|██▍       | 241/1000 [54:41<2:52:14, 13.62s/it][Succeeded / Failed / Skipped / Total] 125 / 115 / 1 / 241:  24%|██▍       | 241/1000 [54:41<2:52:14, 13.62s/it][Succeeded / Failed / Skipped / Total] 125 / 115 / 1 / 241:  24%|██▍       | 242/1000 [54:49<2:51:44, 13.59s/it][Succeeded / Failed / Skipped / Total] 125 / 116 / 1 / 242:  24%|██▍       | 242/1000 [54:49<2:51:44, 13.59s/it][Succeeded / Failed / Skipped / Total] 125 / 116 / 1 / 242:  24%|██▍       | 243/1000 [55:04<2:51:34, 13.60s/it][Succeeded / Failed / Skipped / Total] 125 / 117 / 1 / 243:  24%|██▍       | 243/1000 [55:04<2:51:34, 13.60s/it][Succeeded / Failed / Skipped / Total] 125 / 117 / 1 / 243:  24%|██▍       | 244/1000 [55:06<2:50:44, 13.55s/it][Succeeded / Failed / Skipped / Total] 125 / 118 / 1 / 244:  24%|██▍       | 244/1000 [55:06<2:50:44, 13.55s/it][Succeeded / Failed / Skipped / Total] 125 / 118 / 1 / 244:  24%|██▍       | 245/1000 [55:13<2:50:11, 13.52s/it][Succeeded / Failed / Skipped / Total] 125 / 119 / 1 / 245:  24%|██▍       | 245/1000 [55:13<2:50:11, 13.52s/it][Succeeded / Failed / Skipped / Total] 125 / 119 / 1 / 245:  25%|██▍       | 246/1000 [55:21<2:49:40, 13.50s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 1 / 246:  25%|██▍       | 246/1000 [55:21<2:49:40, 13.50s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 1 / 246:  25%|██▍       | 247/1000 [55:22<2:48:47, 13.45s/it]Creates an authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[like]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the default object mapper configuration . --> Configure ThreadMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[thread]] ( ObjectMapperType [[foo]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[thread]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[c]]" == "[[c]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the object mapper to use . --> Use this configuration to configure an archive --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[archive]] ( JAXBObjectMapperFactory [[array]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[archive]] , johnzonObjectMapperFactory , "[[boost]]" == "[[boost]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 242 ---------------------------------------------
Configured log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[where]] ( LogConfig [[data]] ) { notNull ( [[where]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[where]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 243 ---------------------------------------------
Configured mock mvc config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( SessionConfig [[call]] ) { notNull ( [[client]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[client]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 244 ---------------------------------------------
Configured object mapper config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[client]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[client]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Configures this mock mvc config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[format]] ( JsonConfig jsonConfig ) { notNull ( [[format]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[format]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Configured encoder config . --> Configured configure with extension . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[extension]] ( EncoderConfig encoderConfig ) { notNull ( [[extension]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[extension]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 119 / 2 / 247:  25%|██▍       | 247/1000 [55:22<2:48:47, 13.45s/it][Succeeded / Failed / Skipped / Total] 126 / 119 / 2 / 247:  25%|██▍       | 248/1000 [55:22<2:47:55, 13.40s/it][Succeeded / Failed / Skipped / Total] 127 / 119 / 2 / 248:  25%|██▍       | 248/1000 [55:22<2:47:55, 13.40s/it][Succeeded / Failed / Skipped / Total] 127 / 119 / 2 / 248:  25%|██▍       | 249/1000 [55:26<2:47:11, 13.36s/it][Succeeded / Failed / Skipped / Total] 127 / 120 / 2 / 249:  25%|██▍       | 249/1000 [55:26<2:47:11, 13.36s/it][Succeeded / Failed / Skipped / Total] 127 / 120 / 2 / 249:  25%|██▌       | 250/1000 [55:30<2:46:30, 13.32s/it][Succeeded / Failed / Skipped / Total] 128 / 120 / 2 / 250:  25%|██▌       | 250/1000 [55:30<2:46:30, 13.32s/it][Succeeded / Failed / Skipped / Total] 128 / 120 / 2 / 250:  25%|██▌       | 251/1000 [55:38<2:46:02, 13.30s/it][Succeeded / Failed / Skipped / Total] 129 / 120 / 2 / 251:  25%|██▌       | 251/1000 [55:38<2:46:02, 13.30s/it][Succeeded / Failed / Skipped / Total] 129 / 120 / 2 / 251:  25%|██▌       | 252/1000 [55:39<2:45:12, 13.25s/it][Succeeded / Failed / Skipped / Total] 130 / 120 / 2 / 252:  25%|██▌       | 252/1000 [55:39<2:45:12, 13.25s/it][Succeeded / Failed / Skipped / Total] 130 / 120 / 2 / 252:  25%|██▌       | 253/1000 [55:42<2:44:28, 13.21s/it][Succeeded / Failed / Skipped / Total] 131 / 120 / 2 / 253:  25%|██▌       | 253/1000 [55:42<2:44:28, 13.21s/it][Succeeded / Failed / Skipped / Total] 131 / 120 / 2 / 253:  25%|██▌       | 254/1000 [55:44<2:43:43, 13.17s/it][Succeeded / Failed / Skipped / Total] 132 / 120 / 2 / 254:  25%|██▌       | 254/1000 [55:44<2:43:43, 13.17s/it][Succeeded / Failed / Skipped / Total] 132 / 120 / 2 / 254:  26%|██▌       | 255/1000 [56:03<2:43:46, 13.19s/it]Restured mock configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Configured mvc config . --> Configured mvc configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[data]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 249 ---------------------------------------------
Configured xml config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[to]] ( XmlConfig [[method]] ) { notNull ( [[to]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[to]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 250 ---------------------------------------------
Configure config . --> Configured mutable mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( AsyncConfig asyncConfig ) { notNull ( [[bus]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[bus]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Configured mutable mvc config . --> Configured mock client with multi part configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( MockMvcParamConfig paramConfig ) { notNull ( [[client]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[client]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 252 ---------------------------------------------
Specifies the multi - part configuration . --> Custom mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[classes]] ( MultiPartConfig multiPartConfig ) { notNull ( [[classes]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[classes]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Configured matcher configuration . --> Configured mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( MatcherConfig matcherConfig ) { notNull ( [[bus]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[bus]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames to be allowed . --> File auth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[file]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 133 / 120 / 2 / 255:  26%|██▌       | 255/1000 [56:03<2:43:46, 13.19s/it][Succeeded / Failed / Skipped / Total] 133 / 120 / 2 / 255:  26%|██▌       | 256/1000 [56:11<2:43:17, 13.17s/it][Succeeded / Failed / Skipped / Total] 133 / 121 / 2 / 256:  26%|██▌       | 256/1000 [56:11<2:43:17, 13.17s/it][Succeeded / Failed / Skipped / Total] 133 / 121 / 2 / 256:  26%|██▌       | 257/1000 [56:51<2:44:23, 13.28s/it][Succeeded / Failed / Skipped / Total] 134 / 121 / 2 / 257:  26%|██▌       | 257/1000 [56:51<2:44:23, 13.28s/it][Succeeded / Failed / Skipped / Total] 134 / 121 / 2 / 257:  26%|██▌       | 258/1000 [56:57<2:43:48, 13.25s/it][Succeeded / Failed / Skipped / Total] 134 / 122 / 2 / 258:  26%|██▌       | 258/1000 [56:57<2:43:48, 13.25s/it][Succeeded / Failed / Skipped / Total] 134 / 122 / 2 / 258:  26%|██▌       | 259/1000 [57:15<2:43:48, 13.26s/it][Succeeded / Failed / Skipped / Total] 135 / 122 / 2 / 259:  26%|██▌       | 259/1000 [57:15<2:43:48, 13.26s/it][Succeeded / Failed / Skipped / Total] 135 / 122 / 2 / 259:  26%|██▌       | 260/1000 [57:22<2:43:17, 13.24s/it][Succeeded / Failed / Skipped / Total] 135 / 123 / 2 / 260:  26%|██▌       | 260/1000 [57:22<2:43:17, 13.24s/it][Succeeded / Failed / Skipped / Total] 135 / 123 / 2 / 260:  26%|██▌       | 261/1000 [57:29<2:42:47, 13.22s/it][Succeeded / Failed / Skipped / Total] 135 / 124 / 2 / 261:  26%|██▌       | 261/1000 [57:29<2:42:47, 13.22s/it][Succeeded / Failed / Skipped / Total] 135 / 124 / 2 / 261:  26%|██▌       | 262/1000 [57:44<2:42:38, 13.22s/it][Succeeded / Failed / Skipped / Total] 136 / 124 / 2 / 262:  26%|██▌       | 262/1000 [57:44<2:42:38, 13.22s/it][Succeeded / Failed / Skipped / Total] 136 / 124 / 2 / 262:  26%|██▋       | 263/1000 [57:48<2:42:00, 13.19s/it][Succeeded / Failed / Skipped / Total] 136 / 125 / 2 / 263:  26%|██▋       | 263/1000 [57:48<2:42:00, 13.19s/it][Succeeded / Failed / Skipped / Total] 136 / 125 / 2 / 263:  26%|██▋       | 264/1000 [57:54<2:41:26, 13.16s/it]Perform a HTTP request . --> Execute a procedure --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[procedure]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 256 ---------------------------------------------
Declare an XML path configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[group]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 257 ---------------------------------------------
Set proxy . --> Define a command --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[command]] ( String host , int port , String [[method]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[method]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 258 ---------------------------------------------
Set the map of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . [[are]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[command]] : headers . keySet ( ) ) { Object val = headers . get ( [[command]] ) ; if ( val == null ) continue ; this . [[are]] . put ( [[command]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 259 ---------------------------------------------
Initializes a basic authentication . --> Configure HTTP client --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[client]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 260 ---------------------------------------------
Sets a new namespace configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[bring]] ( String prefix , String [[value]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[value]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[end]] ( String controlName ) { Validate . notEmpty ( [[end]] , "Control name cannot be empty" ) ; this . [[loop]] = [[end]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Resets the context . --> For testing purposes --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[dummy]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[end]] ( String name , String [[field]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[field]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
[Succeeded / Failed / Skipped / Total] 137 / 125 / 2 / 264:  26%|██▋       | 264/1000 [57:54<2:41:26, 13.16s/it][Succeeded / Failed / Skipped / Total] 137 / 125 / 2 / 264:  26%|██▋       | 265/1000 [58:00<2:40:52, 13.13s/it][Succeeded / Failed / Skipped / Total] 138 / 125 / 2 / 265:  26%|██▋       | 265/1000 [58:00<2:40:52, 13.13s/it][Succeeded / Failed / Skipped / Total] 138 / 125 / 2 / 265:  27%|██▋       | 266/1000 [58:07<2:40:24, 13.11s/it][Succeeded / Failed / Skipped / Total] 139 / 125 / 2 / 266:  27%|██▋       | 266/1000 [58:07<2:40:24, 13.11s/it][Succeeded / Failed / Skipped / Total] 139 / 125 / 2 / 266:  27%|██▋       | 267/1000 [58:29<2:40:34, 13.14s/it][Succeeded / Failed / Skipped / Total] 139 / 126 / 2 / 267:  27%|██▋       | 267/1000 [58:29<2:40:34, 13.14s/it][Succeeded / Failed / Skipped / Total] 139 / 126 / 2 / 267:  27%|██▋       | 268/1000 [58:29<2:39:46, 13.10s/it][Succeeded / Failed / Skipped / Total] 139 / 127 / 2 / 268:  27%|██▋       | 268/1000 [58:29<2:39:46, 13.10s/it][Succeeded / Failed / Skipped / Total] 139 / 127 / 2 / 268:  27%|██▋       | 269/1000 [58:34<2:39:10, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 128 / 2 / 269:  27%|██▋       | 269/1000 [58:34<2:39:10, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 128 / 2 / 269:  27%|██▋       | 270/1000 [58:40<2:38:39, 13.04s/it][Succeeded / Failed / Skipped / Total] 139 / 129 / 2 / 270:  27%|██▋       | 270/1000 [58:40<2:38:39, 13.04s/it][Succeeded / Failed / Skipped / Total] 139 / 129 / 2 / 270:  27%|██▋       | 271/1000 [59:00<2:38:45, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 130 / 2 / 271:  27%|██▋       | 271/1000 [59:00<2:38:45, 13.07s/it][Succeeded / Failed / Skipped / Total] 139 / 130 / 2 / 271:  27%|██▋       | 272/1000 [59:02<2:38:01, 13.02s/it][Succeeded / Failed / Skipped / Total] 139 / 131 / 2 / 272:  27%|██▋       | 272/1000 [59:02<2:38:01, 13.02s/it][Succeeded / Failed / Skipped / Total] 139 / 131 / 2 / 272:  27%|██▋       | 273/1000 [59:10<2:37:36, 13.01s/it]--------------------------------------------- Result 264 ---------------------------------------------
Configure an NTLM --> Configure ntl --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int port , String [[user]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new NTCredentials ( [[user]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[bus]] , int port , String [[route]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[bus]] , port ) , new NTCredentials ( [[route]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 265 ---------------------------------------------
Sets response header . --> Sets alt . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[alt]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Build the response . --> Set line status lines . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[lines]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Matches a cookie by its value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[since]] ( Matcher < ? super String > [[z]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[z]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Create a new headers --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[on]] ( Header header , Header ... [[a]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[a]] != null ) { Collections . addAll ( headerList , [[a]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 269 ---------------------------------------------
Matches a cookie that matches a comment s comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Matches a cookie that is an expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[id]] ( Matcher < ? super Date > [[tab]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[tab]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches the cookie with the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[operator]] ( Matcher < ? super String > [[bit]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[bit]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Matches a cookie that matches a given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[cookie]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[cookie]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 139 / 132 / 2 / 273:  27%|██▋       | 273/1000 [59:10<2:37:36, 13.01s/it][Succeeded / Failed / Skipped / Total] 139 / 132 / 2 / 273:  27%|██▋       | 274/1000 [59:18<2:37:09, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 132 / 2 / 274:  27%|██▋       | 274/1000 [59:18<2:37:09, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 132 / 2 / 274:  28%|██▊       | 275/1000 [59:33<2:37:00, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 133 / 2 / 275:  28%|██▊       | 275/1000 [59:33<2:37:00, 12.99s/it][Succeeded / Failed / Skipped / Total] 140 / 133 / 2 / 275:  28%|██▊       | 276/1000 [59:34<2:36:16, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 134 / 2 / 276:  28%|██▊       | 276/1000 [59:34<2:36:16, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 134 / 2 / 276:  28%|██▊       | 277/1000 [1:00:04<2:36:48, 13.01s/it][Succeeded / Failed / Skipped / Total] 140 / 135 / 2 / 277:  28%|██▊       | 277/1000 [1:00:04<2:36:48, 13.01s/it][Succeeded / Failed / Skipped / Total] 140 / 135 / 2 / 277:  28%|██▊       | 278/1000 [1:00:09<2:36:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 140 / 136 / 2 / 278:  28%|██▊       | 278/1000 [1:00:09<2:36:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 140 / 136 / 2 / 278:  28%|██▊       | 279/1000 [1:00:12<2:35:35, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 137 / 2 / 279:  28%|██▊       | 279/1000 [1:00:12<2:35:35, 12.95s/it][Succeeded / Failed / Skipped / Total] 140 / 137 / 2 / 279:  28%|██▊       | 280/1000 [1:00:22<2:35:14, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 138 / 2 / 280:  28%|██▊       | 280/1000 [1:00:22<2:35:14, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 138 / 2 / 280:  28%|██▊       | 281/1000 [1:00:36<2:35:05, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 139 / 2 / 281:  28%|██▊       | 281/1000 [1:00:36<2:35:05, 12.94s/it][Succeeded / Failed / Skipped / Total] 140 / 139 / 2 / 281:  28%|██▊       | 282/1000 [1:00:38<2:34:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 141 / 139 / 2 / 282:  28%|██▊       | 282/1000 [1:00:38<2:34:24, 12.90s/it][Succeeded / Failed / Skipped / Total] 141 / 139 / 2 / 282:  28%|██▊       | 283/1000 [1:00:38<2:33:39, 12.86s/it]--------------------------------------------- Result 273 ---------------------------------------------
Matches a cookie that matches the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[object]] ( Matcher < ? super Boolean > [[r]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[r]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches the http - only cookie . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[over]] ( Matcher < ? super Boolean > [[heap]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[heap]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Matches the cookie with the given version . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super Integer > [[hello]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[hello]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Applies a given maximum age . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[are]] ( Matcher < ? super Integer > [[list]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[list]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the response header to match the expected values . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[b]] ( String headerName , Matcher < String > [[i]] ) { spec . header ( headerName , [[i]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Expect the given header with the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[a]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a copy of the proxy specification with the given host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[host]] ( String [[array]] ) { return new ProxySpecification ( [[array]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 280 ---------------------------------------------
Expect the given cookie name with the expected value --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[a]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Configure this instance with a number return type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[test]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[test]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Enable logging of request and response if validation fails . --> End configuration . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[end]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 283 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 139 / 2 / 283:  28%|██▊       | 283/1000 [1:00:38<2:33:39, 12.86s/it][Succeeded / Failed / Skipped / Total] 142 / 139 / 2 / 283:  28%|██▊       | 284/1000 [1:00:42<2:33:03, 12.83s/it][Succeeded / Failed / Skipped / Total] 142 / 140 / 2 / 284:  28%|██▊       | 284/1000 [1:00:42<2:33:03, 12.83s/it][Succeeded / Failed / Skipped / Total] 142 / 140 / 2 / 284:  28%|██▊       | 285/1000 [1:00:55<2:32:50, 12.83s/it][Succeeded / Failed / Skipped / Total] 143 / 140 / 2 / 285:  28%|██▊       | 285/1000 [1:00:55<2:32:50, 12.83s/it][Succeeded / Failed / Skipped / Total] 143 / 140 / 2 / 285:  29%|██▊       | 286/1000 [1:00:58<2:32:12, 12.79s/it][Succeeded / Failed / Skipped / Total] 144 / 140 / 2 / 286:  29%|██▊       | 286/1000 [1:00:58<2:32:12, 12.79s/it][Succeeded / Failed / Skipped / Total] 144 / 140 / 2 / 286:  29%|██▊       | 287/1000 [1:00:58<2:31:30, 12.75s/it][Succeeded / Failed / Skipped / Total] 145 / 140 / 2 / 287:  29%|██▊       | 287/1000 [1:00:58<2:31:30, 12.75s/it][Succeeded / Failed / Skipped / Total] 145 / 140 / 2 / 287:  29%|██▉       | 288/1000 [1:01:25<2:31:50, 12.80s/it][Succeeded / Failed / Skipped / Total] 146 / 140 / 2 / 288:  29%|██▉       | 288/1000 [1:01:25<2:31:50, 12.80s/it][Succeeded / Failed / Skipped / Total] 146 / 140 / 2 / 288:  29%|██▉       | 289/1000 [1:01:40<2:31:44, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 140 / 2 / 289:  29%|██▉       | 289/1000 [1:01:40<2:31:44, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 140 / 2 / 289:  29%|██▉       | 290/1000 [1:01:50<2:31:24, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 141 / 2 / 290:  29%|██▉       | 290/1000 [1:01:50<2:31:24, 12.80s/it][Succeeded / Failed / Skipped / Total] 147 / 141 / 2 / 290:  29%|██▉       | 291/1000 [1:01:54<2:30:50, 12.77s/it][Succeeded / Failed / Skipped / Total] 148 / 141 / 2 / 291:  29%|██▉       | 291/1000 [1:01:54<2:30:50, 12.77s/it][Succeeded / Failed / Skipped / Total] 148 / 141 / 2 / 291:  29%|██▉       | 292/1000 [1:02:31<2:31:37, 12.85s/it][Succeeded / Failed / Skipped / Total] 148 / 142 / 2 / 292:  29%|██▉       | 292/1000 [1:02:31<2:31:37, 12.85s/it][Succeeded / Failed / Skipped / Total] 148 / 142 / 2 / 292:  29%|██▉       | 293/1000 [1:02:37<2:31:07, 12.83s/it]Default logging to use . --> Configure client logging --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[client]] ( PrintStream [[base]] ) { return new LogConfig ( [[base]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Sets the default parser type to use . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[test]] ( JsonParserType [[a]] ) { return new JsonPathConfig ( numberReturnType , [[test]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 285 ---------------------------------------------
Add an attribute --> Specify a profile . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[profile]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 286 ---------------------------------------------
Creates a HttpRequestBase for the given URI and HTTP method . --> Returns HttpRequestBase object --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[f]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 287 ---------------------------------------------
Add a header . --> Adds example . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[example]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Default boundary configuration . --> Configure the MultiPartConfig --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[parameter]] ( String [[a]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[parameter]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 289 ---------------------------------------------
Add additional result handlers . --> Specify code files . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( [[resultHandler]] , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[code]] ( ResultHandler [[project]] , ResultHandler ... [[project]] ) { spec . resultHandlers ( [[project]] , [[project]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
Sets parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[test]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[test]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[bit]]" == "[[bit]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 291 ---------------------------------------------
Adds multi - part request . --> Model model --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[model]] ( String [[spec]] , String [[fx]] , String mimeType ) { spec . multiPart ( [[spec]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 292 ---------------------------------------------
Configure http client factory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[port]] ( HttpClientFactory [[instance]] ) { return new HttpClientConfig ( [[port]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
[Succeeded / Failed / Skipped / Total] 148 / 143 / 2 / 293:  29%|██▉       | 293/1000 [1:02:37<2:31:07, 12.83s/it][Succeeded / Failed / Skipped / Total] 148 / 143 / 2 / 293:  29%|██▉       | 294/1000 [1:02:47<2:30:46, 12.81s/it][Succeeded / Failed / Skipped / Total] 149 / 143 / 2 / 294:  29%|██▉       | 294/1000 [1:02:47<2:30:46, 12.81s/it][Succeeded / Failed / Skipped / Total] 149 / 143 / 2 / 294:  30%|██▉       | 295/1000 [1:02:49<2:30:07, 12.78s/it][Succeeded / Failed / Skipped / Total] 149 / 144 / 2 / 295:  30%|██▉       | 295/1000 [1:02:49<2:30:07, 12.78s/it][Succeeded / Failed / Skipped / Total] 149 / 144 / 2 / 295:  30%|██▉       | 296/1000 [1:02:54<2:29:36, 12.75s/it][Succeeded / Failed / Skipped / Total] 150 / 144 / 2 / 296:  30%|██▉       | 296/1000 [1:02:54<2:29:36, 12.75s/it][Succeeded / Failed / Skipped / Total] 150 / 144 / 2 / 296:  30%|██▉       | 297/1000 [1:02:54<2:28:54, 12.71s/it][Succeeded / Failed / Skipped / Total] 150 / 145 / 2 / 297:  30%|██▉       | 297/1000 [1:02:54<2:28:54, 12.71s/it][Succeeded / Failed / Skipped / Total] 150 / 145 / 2 / 297:  30%|██▉       | 298/1000 [1:03:14<2:28:58, 12.73s/it][Succeeded / Failed / Skipped / Total] 151 / 145 / 2 / 298:  30%|██▉       | 298/1000 [1:03:14<2:28:58, 12.73s/it][Succeeded / Failed / Skipped / Total] 151 / 145 / 2 / 298:  30%|██▉       | 299/1000 [1:03:22<2:28:34, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 145 / 2 / 299:  30%|██▉       | 299/1000 [1:03:22<2:28:34, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 145 / 2 / 299:  30%|███       | 300/1000 [1:03:34<2:28:21, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 146 / 2 / 300:  30%|███       | 300/1000 [1:03:34<2:28:21, 12.72s/it][Succeeded / Failed / Skipped / Total] 152 / 146 / 2 / 300:  30%|███       | 301/1000 [1:03:40<2:27:51, 12.69s/it][Succeeded / Failed / Skipped / Total] 152 / 147 / 2 / 301:  30%|███       | 301/1000 [1:03:40<2:27:51, 12.69s/it][Succeeded / Failed / Skipped / Total] 152 / 147 / 2 / 301:  30%|███       | 302/1000 [1:03:55<2:27:44, 12.70s/it][Succeeded / Failed / Skipped / Total] 153 / 147 / 2 / 302:  30%|███       | 302/1000 [1:03:55<2:27:44, 12.70s/it][Succeeded / Failed / Skipped / Total] 153 / 147 / 2 / 302:  30%|███       | 303/1000 [1:04:29<2:28:20, 12.77s/it][Succeeded / Failed / Skipped / Total] 153 / 148 / 2 / 303:  30%|███       | 303/1000 [1:04:29<2:28:20, 12.77s/it][Succeeded / Failed / Skipped / Total] 153 / 148 / 2 / 303:  30%|███       | 304/1000 [1:04:37<2:27:56, 12.75s/it][Succeeded / Failed / Skipped / Total] 153 / 149 / 2 / 304:  30%|███       | 304/1000 [1:04:37<2:27:56, 12.75s/it][Succeeded / Failed / Skipped / Total] 153 / 149 / 2 / 304:  30%|███       | 305/1000 [1:04:58<2:28:04, 12.78s/it]--------------------------------------------- Result 293 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[port]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[port]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Get an integer value . --> Return function index function --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[function]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Returns a copy of the http client . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[program]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[html]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 296 ---------------------------------------------
Get byte from path --> Set file content --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[file]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Retrieves the resource at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[address]] > [[address]] get ( String path ) { final JSONAssertion [[x]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[address]] ) [[x]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Get short short . --> Returns c c --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[c]] ( String [[length]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Get a long value . --> Declaration method --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[declaration]] ( String [[a]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[add]] ( String [[c]] ) { final Object value = get ( [[c]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 301 ---------------------------------------------
Get a double value . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[follow]] ( String [[hello]] ) { final Object [[procedure]] = get ( [[hello]] ) ; if ( [[procedure]] instanceof Double ) { return ( Double ) [[procedure]] ; } return ObjectConverter . convertObjectTo ( [[procedure]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Gets a map . --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[call]] ( String [[g]] ) { return get ( [[g]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[ate]] ( Object [[bed]] , ObjectMapper mapper ) { spec . body ( [[bed]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Convenience method for getting a part of an object . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[graph]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[graph]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 150 / 2 / 305:  30%|███       | 305/1000 [1:04:58<2:28:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 150 / 2 / 305:  31%|███       | 306/1000 [1:05:17<2:28:03, 12.80s/it][Succeeded / Failed / Skipped / Total] 153 / 151 / 2 / 306:  31%|███       | 306/1000 [1:05:17<2:28:03, 12.80s/it][Succeeded / Failed / Skipped / Total] 153 / 151 / 2 / 306:  31%|███       | 307/1000 [1:05:23<2:27:36, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 152 / 2 / 307:  31%|███       | 307/1000 [1:05:23<2:27:36, 12.78s/it][Succeeded / Failed / Skipped / Total] 153 / 152 / 2 / 307:  31%|███       | 308/1000 [1:05:25<2:26:58, 12.74s/it][Succeeded / Failed / Skipped / Total] 153 / 153 / 2 / 308:  31%|███       | 308/1000 [1:05:25<2:26:58, 12.74s/it][Succeeded / Failed / Skipped / Total] 153 / 153 / 2 / 308:  31%|███       | 309/1000 [1:05:35<2:26:41, 12.74s/it][Succeeded / Failed / Skipped / Total] 154 / 153 / 2 / 309:  31%|███       | 309/1000 [1:05:35<2:26:41, 12.74s/it][Succeeded / Failed / Skipped / Total] 154 / 153 / 2 / 309:  31%|███       | 310/1000 [1:05:41<2:26:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 153 / 2 / 310:  31%|███       | 310/1000 [1:05:41<2:26:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 153 / 2 / 310:  31%|███       | 311/1000 [1:05:52<2:25:56, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 154 / 2 / 311:  31%|███       | 311/1000 [1:05:52<2:25:56, 12.71s/it][Succeeded / Failed / Skipped / Total] 155 / 154 / 2 / 311:  31%|███       | 312/1000 [1:05:54<2:25:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 156 / 154 / 2 / 312:  31%|███       | 312/1000 [1:05:54<2:25:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 156 / 154 / 2 / 312:  31%|███▏      | 313/1000 [1:06:06<2:25:05, 12.67s/it][Succeeded / Failed / Skipped / Total] 156 / 155 / 2 / 313:  31%|███▏      | 313/1000 [1:06:06<2:25:05, 12.67s/it][Succeeded / Failed / Skipped / Total] 156 / 155 / 2 / 313:  31%|███▏      | 314/1000 [1:06:23<2:25:03, 12.69s/it]Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[am]] ( String [[attribute]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[attribute]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request spec --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[at]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[source]] , Collection < ? > [[file]] ) { spec . param ( [[source]] , [[file]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Get a list from the specified path --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[method]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[method]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[st]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 309 ---------------------------------------------
Returns a filter that logs the response to the if - matches . --> Log response to if matches --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[a]] ) { return new ResponseLoggingFilter ( stream , [[a]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Clean up data for non - collected state . --> Cleans up data for all keys and sources --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[i]] = backingMap . get ( keyAndSource . key ) ; if ( [[i]] != null ) { [[i]] . remove ( keyAndSource . source ) ; if ( [[i]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 311 ---------------------------------------------
Configure the form params update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[end]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 312 ---------------------------------------------
convert constant string to string --> Method call --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[method]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 313 ---------------------------------------------
Index all implicit bindings for this type . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[string]] ( ) { for ( Binding < ? > [[group]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[group]] . getKey ( ) . getTypeLiteral ( ) , [[group]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 155 / 2 / 314:  31%|███▏      | 314/1000 [1:06:23<2:25:03, 12.69s/it][Succeeded / Failed / Skipped / Total] 157 / 155 / 2 / 314:  32%|███▏      | 315/1000 [1:06:31<2:24:38, 12.67s/it][Succeeded / Failed / Skipped / Total] 158 / 155 / 2 / 315:  32%|███▏      | 315/1000 [1:06:31<2:24:38, 12.67s/it][Succeeded / Failed / Skipped / Total] 158 / 155 / 2 / 315:  32%|███▏      | 316/1000 [1:06:31<2:23:59, 12.63s/it][Succeeded / Failed / Skipped / Total] 158 / 156 / 2 / 316:  32%|███▏      | 316/1000 [1:06:31<2:23:59, 12.63s/it][Succeeded / Failed / Skipped / Total] 158 / 156 / 2 / 316:  32%|███▏      | 317/1000 [1:07:11<2:24:46, 12.72s/it][Succeeded / Failed / Skipped / Total] 158 / 157 / 2 / 317:  32%|███▏      | 317/1000 [1:07:11<2:24:46, 12.72s/it][Succeeded / Failed / Skipped / Total] 158 / 157 / 2 / 317:  32%|███▏      | 318/1000 [1:07:27<2:24:40, 12.73s/it][Succeeded / Failed / Skipped / Total] 159 / 157 / 2 / 318:  32%|███▏      | 318/1000 [1:07:27<2:24:40, 12.73s/it][Succeeded / Failed / Skipped / Total] 159 / 157 / 2 / 318:  32%|███▏      | 319/1000 [1:07:30<2:24:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 159 / 158 / 2 / 319:  32%|███▏      | 319/1000 [1:07:30<2:24:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 159 / 158 / 2 / 319:  32%|███▏      | 320/1000 [1:07:40<2:23:47, 12.69s/it][Succeeded / Failed / Skipped / Total] 160 / 158 / 2 / 320:  32%|███▏      | 320/1000 [1:07:40<2:23:47, 12.69s/it][Succeeded / Failed / Skipped / Total] 160 / 158 / 2 / 320:  32%|███▏      | 321/1000 [1:07:50<2:23:29, 12.68s/it]Remove a binding from JIT bindings . --> Remove bindings for a given domain --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[python]] ( Binding < ? > [[domain]] , InjectionPoint ip ) { failedJitBindings . add ( [[domain]] . getKey ( ) ) ; jitBindings . remove ( [[domain]] . getKey ( ) ) ; membersInjectorStore . remove ( [[domain]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[domain]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 315 ---------------------------------------------
Creates a cookies object . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[handler]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[field]] = new LinkedList < Cookie > ( ) ; [[field]] . add ( cookie ) ; Collections . addAll ( [[field]] , [[handler]] ) ; return new Cookies ( [[field]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Gets the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[print]] ( BindingImpl < ? > [[command]] ) { if ( [[command]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[command]] ) . getInternalDependencies ( ) ; } else if ( [[command]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[command]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[add]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds the logger to the provider . --> Used for unit testing --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[function]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 319 ---------------------------------------------
Binds an injector to the provider . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[foo]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[value]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[value]] , Scoping . UNSCOPED , [[value]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 320 ---------------------------------------------
Gets all parameters . --> Declares a procedure --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[declaration]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[procedure]] ) throws InternalProvisionException { if ( [[procedure]] == null ) { return NO_ARGUMENTS ; } int size = [[procedure]] . length ; Object [ ] [[definition]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 321 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 158 / 2 / 321:  32%|███▏      | 321/1000 [1:07:50<2:23:29, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 158 / 2 / 321:  32%|███▏      | 322/1000 [1:08:04<2:23:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 159 / 2 / 322:  32%|███▏      | 322/1000 [1:08:04<2:23:20, 12.68s/it][Succeeded / Failed / Skipped / Total] 161 / 159 / 2 / 322:  32%|███▏      | 323/1000 [1:08:22<2:23:18, 12.70s/it][Succeeded / Failed / Skipped / Total] 161 / 160 / 2 / 323:  32%|███▏      | 323/1000 [1:08:22<2:23:18, 12.70s/it][Succeeded / Failed / Skipped / Total] 161 / 160 / 2 / 323:  32%|███▏      | 324/1000 [1:08:46<2:23:29, 12.74s/it][Succeeded / Failed / Skipped / Total] 161 / 161 / 2 / 324:  32%|███▏      | 324/1000 [1:08:46<2:23:29, 12.74s/it][Succeeded / Failed / Skipped / Total] 161 / 161 / 2 / 324:  32%|███▎      | 325/1000 [1:08:59<2:23:16, 12.74s/it][Succeeded / Failed / Skipped / Total] 162 / 161 / 2 / 325:  32%|███▎      | 325/1000 [1:08:59<2:23:16, 12.74s/it][Succeeded / Failed / Skipped / Total] 162 / 161 / 2 / 325:  33%|███▎      | 326/1000 [1:09:01<2:22:42, 12.70s/it][Succeeded / Failed / Skipped / Total] 163 / 161 / 2 / 326:  33%|███▎      | 326/1000 [1:09:01<2:22:42, 12.70s/it][Succeeded / Failed / Skipped / Total] 163 / 161 / 2 / 326:  33%|███▎      | 327/1000 [1:09:10<2:22:22, 12.69s/it][Succeeded / Failed / Skipped / Total] 163 / 162 / 2 / 327:  33%|███▎      | 327/1000 [1:09:10<2:22:22, 12.69s/it][Succeeded / Failed / Skipped / Total] 163 / 162 / 2 / 327:  33%|███▎      | 328/1000 [1:09:19<2:22:02, 12.68s/it][Succeeded / Failed / Skipped / Total] 164 / 162 / 2 / 328:  33%|███▎      | 328/1000 [1:09:19<2:22:02, 12.68s/it][Succeeded / Failed / Skipped / Total] 164 / 162 / 2 / 328:  33%|███▎      | 329/1000 [1:09:31<2:21:47, 12.68s/it][Succeeded / Failed / Skipped / Total] 165 / 162 / 2 / 329:  33%|███▎      | 329/1000 [1:09:31<2:21:47, 12.68s/it][Succeeded / Failed / Skipped / Total] 165 / 162 / 2 / 329:  33%|███▎      | 330/1000 [1:09:36<2:21:20, 12.66s/it]Returns true if method overrides method . --> Compare two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[a]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 322 ---------------------------------------------
The provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[version]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[join]] ( MembersInjector < T > [[name]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[name]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Cleanup internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[fix]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 325 ---------------------------------------------
Check for missing binding annotations . --> Programmatic programmatically --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[program]] ( Member [[faults]] , Errors errors ) { Annotation [[a]] = Annotations . findBindingAnnotation ( errors , [[faults]] , ( ( AnnotatedElement ) [[faults]] ) . getAnnotations ( ) ) ; if ( [[a]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
Prepare built in converters . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[command]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
Resolves a list of type literals . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[state]] ( Type [ ] [[a]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[a]] . length ] ; for ( int [[array]] = 0 ; [[array]] < [[a]] . length ; [[array]] ++ ) { result [ [[array]] ] = resolve ( [[a]] [ [[array]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
Checks if this class has the same CGLib . --> Check whether a var is loaded --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[var]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 329 ---------------------------------------------
Canonicalize the type if necessary . --> Check the typeLit --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type [[type]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[on]] ( TypeLiteral < T > typeLiteral ) { Type [[hazard]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[hazard]] ) ) { Errors [[words]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[words]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[hazard]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 163 / 2 / 330:  33%|███▎      | 330/1000 [1:09:36<2:21:20, 12.66s/it][Succeeded / Failed / Skipped / Total] 165 / 163 / 2 / 330:  33%|███▎      | 331/1000 [1:09:48<2:21:05, 12.65s/it][Succeeded / Failed / Skipped / Total] 165 / 164 / 2 / 331:  33%|███▎      | 331/1000 [1:09:48<2:21:05, 12.65s/it][Succeeded / Failed / Skipped / Total] 165 / 164 / 2 / 331:  33%|███▎      | 332/1000 [1:09:50<2:20:31, 12.62s/it][Succeeded / Failed / Skipped / Total] 165 / 165 / 2 / 332:  33%|███▎      | 332/1000 [1:09:50<2:20:31, 12.62s/it][Succeeded / Failed / Skipped / Total] 165 / 165 / 2 / 332:  33%|███▎      | 333/1000 [1:09:53<2:20:00, 12.59s/it][Succeeded / Failed / Skipped / Total] 166 / 165 / 2 / 333:  33%|███▎      | 333/1000 [1:09:53<2:20:00, 12.59s/it][Succeeded / Failed / Skipped / Total] 166 / 165 / 2 / 333:  33%|███▎      | 334/1000 [1:10:22<2:20:19, 12.64s/it][Succeeded / Failed / Skipped / Total] 167 / 165 / 2 / 334:  33%|███▎      | 334/1000 [1:10:22<2:20:19, 12.64s/it][Succeeded / Failed / Skipped / Total] 167 / 165 / 2 / 334:  34%|███▎      | 335/1000 [1:10:23<2:19:43, 12.61s/it][Succeeded / Failed / Skipped / Total] 168 / 165 / 2 / 335:  34%|███▎      | 335/1000 [1:10:23<2:19:43, 12.61s/it][Succeeded / Failed / Skipped / Total] 168 / 165 / 2 / 335:  34%|███▎      | 336/1000 [1:11:08<2:20:36, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 166 / 2 / 336:  34%|███▎      | 336/1000 [1:11:08<2:20:36, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 166 / 2 / 336:  34%|███▎      | 337/1000 [1:11:24<2:20:29, 12.71s/it]Canonicalize the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[state]] ( ClassLoader [[main]] ) { return [[main]] != null ? [[main]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 331 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 332 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 333 ---------------------------------------------
Validate all pending injections . --> Finalize validation process --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[cause]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a new instance of this class with the given arguments . --> Convenience wrapper for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[wr]] ( Object [ ] [[example]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[example]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
Add a dispatcher to the servlet . --> Convenience method for invoking oracle --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[oracle]] ( ServletRequest [[java]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[main]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 167 / 2 / 337:  34%|███▎      | 337/1000 [1:11:24<2:20:29, 12.71s/it][Succeeded / Failed / Skipped / Total] 168 / 167 / 2 / 337:  34%|███▍      | 338/1000 [1:11:27<2:19:57, 12.68s/it][Succeeded / Failed / Skipped / Total] 168 / 168 / 2 / 338:  34%|███▍      | 338/1000 [1:11:27<2:19:57, 12.68s/it][Succeeded / Failed / Skipped / Total] 168 / 168 / 2 / 338:  34%|███▍      | 339/1000 [1:11:42<2:19:49, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 168 / 2 / 339:  34%|███▍      | 339/1000 [1:11:42<2:19:49, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 168 / 2 / 339:  34%|███▍      | 340/1000 [1:11:55<2:19:37, 12.69s/it][Succeeded / Failed / Skipped / Total] 170 / 168 / 2 / 340:  34%|███▍      | 340/1000 [1:11:55<2:19:37, 12.69s/it][Succeeded / Failed / Skipped / Total] 170 / 168 / 2 / 340:  34%|███▍      | 341/1000 [1:12:09<2:19:26, 12.70s/it][Succeeded / Failed / Skipped / Total] 171 / 168 / 2 / 341:  34%|███▍      | 341/1000 [1:12:09<2:19:26, 12.70s/it][Succeeded / Failed / Skipped / Total] 171 / 168 / 2 / 341:  34%|███▍      | 342/1000 [1:12:09<2:18:50, 12.66s/it][Succeeded / Failed / Skipped / Total] 172 / 168 / 2 / 342:  34%|███▍      | 342/1000 [1:12:09<2:18:50, 12.66s/it][Succeeded / Failed / Skipped / Total] 172 / 168 / 2 / 342:  34%|███▍      | 343/1000 [1:12:40<2:19:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 172 / 169 / 2 / 343:  34%|███▍      | 343/1000 [1:12:40<2:19:13, 12.71s/it][Succeeded / Failed / Skipped / Total] 172 / 169 / 2 / 343:  34%|███▍      | 344/1000 [1:13:00<2:19:14, 12.73s/it]Generates an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[name]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Scope creation method . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[when]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[when]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 339 ---------------------------------------------
Normalize path . --> Return bar from index --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[bar]] ( String [[index]] ) { StringBuilder sb = new StringBuilder ( [[index]] . length ( ) ) ; int queryStart = [[index]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[index]] . substring ( queryStart ) ; [[index]] = [[index]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Checks if the annotation is retained at runtime . --> Fixes retention policy --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[fix]] ( Class < ? extends Annotation > [[b]] ) { Retention retention = [[b]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Gets the name of the key . --> Get Var from Key --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[var]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 342 ---------------------------------------------
Makes an injectable that can be used to inject the given scoping . --> Inject scoping annotations --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = scoping . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[operations]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[definition]] = scoping . getScopeAnnotation ( ) ; if ( [[definition]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[definition]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[definition]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 343 ---------------------------------------------
Add the direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[empty]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 169 / 2 / 344:  34%|███▍      | 344/1000 [1:13:00<2:19:14, 12.73s/it][Succeeded / Failed / Skipped / Total] 173 / 169 / 2 / 344:  34%|███▍      | 345/1000 [1:13:01<2:18:38, 12.70s/it][Succeeded / Failed / Skipped / Total] 173 / 170 / 2 / 345:  34%|███▍      | 345/1000 [1:13:01<2:18:38, 12.70s/it][Succeeded / Failed / Skipped / Total] 173 / 170 / 2 / 345:  35%|███▍      | 346/1000 [1:13:35<2:19:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 173 / 171 / 2 / 346:  35%|███▍      | 346/1000 [1:13:35<2:19:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 173 / 171 / 2 / 346:  35%|███▍      | 347/1000 [1:13:39<2:18:36, 12.74s/it][Succeeded / Failed / Skipped / Total] 173 / 172 / 2 / 347:  35%|███▍      | 347/1000 [1:13:39<2:18:36, 12.74s/it][Succeeded / Failed / Skipped / Total] 173 / 172 / 2 / 347:  35%|███▍      | 348/1000 [1:13:57<2:18:34, 12.75s/it][Succeeded / Failed / Skipped / Total] 174 / 172 / 2 / 348:  35%|███▍      | 348/1000 [1:13:58<2:18:34, 12.75s/it][Succeeded / Failed / Skipped / Total] 174 / 172 / 2 / 348:  35%|███▍      | 349/1000 [1:14:14<2:18:28, 12.76s/it][Succeeded / Failed / Skipped / Total] 175 / 172 / 2 / 349:  35%|███▍      | 349/1000 [1:14:14<2:18:28, 12.76s/it][Succeeded / Failed / Skipped / Total] 175 / 172 / 2 / 349:  35%|███▌      | 350/1000 [1:14:14<2:17:52, 12.73s/it][Succeeded / Failed / Skipped / Total] 175 / 173 / 2 / 350:  35%|███▌      | 350/1000 [1:14:14<2:17:52, 12.73s/it][Succeeded / Failed / Skipped / Total] 175 / 173 / 2 / 350:  35%|███▌      | 351/1000 [1:14:21<2:17:29, 12.71s/it]Finds a scope annotation . --> Given an annotations remove duplicate scope annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation [[annotation]] : [[annotations]] ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[f]] ( Errors errors , Annotation [ ] [[exclusion]] ) { Class < ? extends Annotation > [[bold]] = null ; for ( Annotation [[code]] : [[exclusion]] ) { Class < ? extends Annotation > annotationType = [[code]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[bold]] != null ) { errors . duplicateScopeAnnotations ( [[bold]] , annotationType ) ; } else { [[bold]] = annotationType ; } } } return [[bold]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[python]] ( Provider < T > [[client]] ) { checkState ( this . [[non]] == null , "delegate already initialized" ) ; this . [[non]] = checkNotNull ( [[client]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 346 ---------------------------------------------
Get a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[on]] ( InjectionPoint [[registered]] , Errors errors ) throws ErrorsException { return cache . get ( [[registered]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Gets binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[execute]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[ception]] ) throws ErrorsException { int numErrorsBefore = [[ception]] . size ( ) ; Annotation found = findBindingAnnotation ( [[ception]] , member , annotations ) ; [[ception]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 348 ---------------------------------------------
Creates a new instance . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[τ]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 349 ---------------------------------------------
Writes a replace operation . --> write replace method --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[x]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[x]] . length ; i ++ ) { [[x]] [ i ] = Errors . convert ( [[x]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[x]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a new key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[bar]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[bar]] ) ) ; return [[bar]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 173 / 2 / 351:  35%|███▌      | 351/1000 [1:14:21<2:17:29, 12.71s/it][Succeeded / Failed / Skipped / Total] 176 / 173 / 2 / 351:  35%|███▌      | 352/1000 [1:14:29<2:17:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 177 / 173 / 2 / 352:  35%|███▌      | 352/1000 [1:14:29<2:17:07, 12.70s/it][Succeeded / Failed / Skipped / Total] 177 / 173 / 2 / 352:  35%|███▌      | 353/1000 [1:14:30<2:16:33, 12.66s/it][Succeeded / Failed / Skipped / Total] 178 / 173 / 2 / 353:  35%|███▌      | 353/1000 [1:14:30<2:16:33, 12.66s/it][Succeeded / Failed / Skipped / Total] 178 / 173 / 2 / 353:  35%|███▌      | 354/1000 [1:14:54<2:16:41, 12.70s/it][Succeeded / Failed / Skipped / Total] 178 / 174 / 2 / 354:  35%|███▌      | 354/1000 [1:14:54<2:16:41, 12.70s/it][Succeeded / Failed / Skipped / Total] 178 / 174 / 2 / 354:  36%|███▌      | 355/1000 [1:15:19<2:16:51, 12.73s/it][Succeeded / Failed / Skipped / Total] 179 / 174 / 2 / 355:  36%|███▌      | 355/1000 [1:15:19<2:16:51, 12.73s/it][Succeeded / Failed / Skipped / Total] 179 / 174 / 2 / 355:  36%|███▌      | 356/1000 [1:15:49<2:17:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 180 / 174 / 2 / 356:  36%|███▌      | 356/1000 [1:15:49<2:17:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 180 / 174 / 2 / 356:  36%|███▌      | 357/1000 [1:15:57<2:16:47, 12.76s/it][Succeeded / Failed / Skipped / Total] 181 / 174 / 2 / 357:  36%|███▌      | 357/1000 [1:15:57<2:16:47, 12.76s/it][Succeeded / Failed / Skipped / Total] 181 / 174 / 2 / 357:  36%|███▌      | 358/1000 [1:16:15<2:16:45, 12.78s/it]Checks if the given interceptor has scope annotations . --> Loops through all scopes --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[loop]] ( Class < ? extends Interceptor > [[domain]] ) { for ( Annotation [[classes]] : [[domain]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[classes]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 352 ---------------------------------------------
Gets all registered methods . --> Label all methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[label]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the Module for the given module --> Binding B --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[b]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 354 ---------------------------------------------
Static factory method for creating a new RealMapBinder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > [[keyType]] , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , [[keyType]] , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[declare]] ( Binder [[list]] , TypeLiteral < K > [[option]] , Key < V > [[file]] ) { [[list]] = [[list]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[file]] . getTypeLiteral ( ) ; return [[declare]] ( [[list]] , [[option]] , valueType , [[file]] . ofType ( mapOf ( [[option]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[list]] , [[file]] . ofType ( entryOfProviderOf ( [[option]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Get dependencies for ctor . --> Get dependency from ctor point --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[let]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[build]] = ImmutableSet . builder ( ) ; [[build]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[build]] . addAll ( ip . getDependencies ( ) ) ; } } return [[build]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 356 ---------------------------------------------
Removes the dependencies from the Dependency object . --> Converts Dependency objects to Dependency --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[hold]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[object]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[w]] : deps ) { Class < ? > annotationType = [[w]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[object]] . add ( [[w]] ) ; } } return [[object]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the given type is not defined . --> Add a configuration exception --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[msg]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[msg]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[add]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[size]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[size]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 174 / 2 / 358:  36%|███▌      | 358/1000 [1:16:15<2:16:45, 12.78s/it][Succeeded / Failed / Skipped / Total] 182 / 174 / 2 / 358:  36%|███▌      | 359/1000 [1:16:24<2:16:26, 12.77s/it][Succeeded / Failed / Skipped / Total] 183 / 174 / 2 / 359:  36%|███▌      | 359/1000 [1:16:24<2:16:26, 12.77s/it][Succeeded / Failed / Skipped / Total] 183 / 174 / 2 / 359:  36%|███▌      | 360/1000 [1:16:33<2:16:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 184 / 174 / 2 / 360:  36%|███▌      | 360/1000 [1:16:33<2:16:06, 12.76s/it][Succeeded / Failed / Skipped / Total] 184 / 174 / 2 / 360:  36%|███▌      | 361/1000 [1:17:16<2:16:46, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 175 / 2 / 361:  36%|███▌      | 361/1000 [1:17:16<2:16:46, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 175 / 2 / 361:  36%|███▌      | 362/1000 [1:17:23<2:16:23, 12.83s/it][Succeeded / Failed / Skipped / Total] 184 / 176 / 2 / 362:  36%|███▌      | 362/1000 [1:17:23<2:16:23, 12.83s/it][Succeeded / Failed / Skipped / Total] 184 / 176 / 2 / 362:  36%|███▋      | 363/1000 [1:17:39<2:16:16, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 177 / 2 / 363:  36%|███▋      | 363/1000 [1:17:39<2:16:16, 12.84s/it][Succeeded / Failed / Skipped / Total] 184 / 177 / 2 / 363:  36%|███▋      | 364/1000 [1:17:44<2:15:49, 12.81s/it][Succeeded / Failed / Skipped / Total] 184 / 178 / 2 / 364:  36%|███▋      | 364/1000 [1:17:44<2:15:49, 12.81s/it][Succeeded / Failed / Skipped / Total] 184 / 178 / 2 / 364:  36%|███▋      | 365/1000 [1:17:57<2:15:37, 12.82s/it][Succeeded / Failed / Skipped / Total] 184 / 179 / 2 / 365:  36%|███▋      | 365/1000 [1:17:57<2:15:37, 12.82s/it][Succeeded / Failed / Skipped / Total] 184 / 179 / 2 / 365:  37%|███▋      | 366/1000 [1:17:58<2:15:04, 12.78s/it]Invokes the method on the proxy --> Overriding super methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[fork]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 359 ---------------------------------------------
Returns true if the given set is valid for the given factory . --> Programmatically --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[program]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[command]] ) { Set < Dependency < ? > > [[command]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 360 ---------------------------------------------
Throws an exception when missing . --> Throws an exception when no implementation was bound . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[bus]] = new StringBuilder ( ) ; [[bus]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 361 ---------------------------------------------
Gets the binding from a Guice Ginjector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[loop]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[loop]] ( HttpServletRequest [[al]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[al]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 363 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[client]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Add a new RealMultibinder into the given binder . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[follow]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if the given constructor has at least one annotation --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[operators]] ( Constructor [[methods]] ) { return [[methods]] . isAnnotationPresent ( Inject . class ) || [[methods]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 179 / 2 / 366:  37%|███▋      | 366/1000 [1:17:58<2:15:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 179 / 2 / 366:  37%|███▋      | 367/1000 [1:18:10<2:14:49, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 180 / 2 / 367:  37%|███▋      | 367/1000 [1:18:10<2:14:49, 12.78s/it][Succeeded / Failed / Skipped / Total] 185 / 180 / 2 / 367:  37%|███▋      | 368/1000 [1:18:30<2:14:49, 12.80s/it][Succeeded / Failed / Skipped / Total] 185 / 181 / 2 / 368:  37%|███▋      | 368/1000 [1:18:30<2:14:49, 12.80s/it][Succeeded / Failed / Skipped / Total] 185 / 181 / 2 / 368:  37%|███▋      | 369/1000 [1:18:42<2:14:35, 12.80s/it][Succeeded / Failed / Skipped / Total] 186 / 181 / 2 / 369:  37%|███▋      | 369/1000 [1:18:42<2:14:35, 12.80s/it][Succeeded / Failed / Skipped / Total] 186 / 181 / 2 / 369:  37%|███▋      | 370/1000 [1:18:47<2:14:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 186 / 182 / 2 / 370:  37%|███▋      | 370/1000 [1:18:47<2:14:09, 12.78s/it][Succeeded / Failed / Skipped / Total] 186 / 182 / 2 / 370:  37%|███▋      | 371/1000 [1:19:07<2:14:09, 12.80s/it][Succeeded / Failed / Skipped / Total] 187 / 182 / 2 / 371:  37%|███▋      | 371/1000 [1:19:07<2:14:09, 12.80s/it][Succeeded / Failed / Skipped / Total] 187 / 182 / 2 / 371:  37%|███▋      | 372/1000 [1:19:14<2:13:46, 12.78s/it][Succeeded / Failed / Skipped / Total] 187 / 183 / 2 / 372:  37%|███▋      | 372/1000 [1:19:14<2:13:46, 12.78s/it][Succeeded / Failed / Skipped / Total] 187 / 183 / 2 / 372:  37%|███▋      | 373/1000 [1:19:22<2:13:25, 12.77s/it]Determines if the constructor has matching parameters . --> Iterate over the array elements --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[errors]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[paramAnnotations]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[paramKey]] = Annotations . getKey ( param , constructor , [[paramAnnotations]] [ p ++ ] , [[errors]] ) ; constructorKeys . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[array]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[pot]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[box]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[error]] = Annotations . getKey ( param , constructor , [[box]] [ p ++ ] , [[pot]] ) ; constructorKeys . add ( [[error]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 367 ---------------------------------------------
Gets the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[install]] ( ) { ImmutableSet . Builder < InjectionPoint > [[http]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[http]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Gets the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[net]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initializes the injector . --> Execute error messages --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[call]] ( Errors [[ecure]] ) { injector . lookups = injector ; new LookupProcessor ( [[ecure]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Create a module scope for a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[program]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Try to find an annotation for a method . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[binder]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( annotationClass ) ; if ( [[foundAnnotation]] != null ) { if ( [[annotation]] != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = [[foundAnnotation]] ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[red]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[array]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[group]] = method . getAnnotation ( annotationClass ) ; if ( [[group]] != null ) { if ( [[array]] != null ) { [[red]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[array]] = [[group]] ; } } return [[array]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 372 ---------------------------------------------
Wraps the given callable into a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[program]] ( Callable < T > callable ) { return wrap ( callable , [[program]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 373 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 183 / 2 / 373:  37%|███▋      | 373/1000 [1:19:22<2:13:25, 12.77s/it][Succeeded / Failed / Skipped / Total] 188 / 183 / 2 / 373:  37%|███▋      | 374/1000 [1:19:37<2:13:17, 12.77s/it][Succeeded / Failed / Skipped / Total] 189 / 183 / 2 / 374:  37%|███▋      | 374/1000 [1:19:37<2:13:17, 12.77s/it][Succeeded / Failed / Skipped / Total] 189 / 183 / 2 / 374:  38%|███▊      | 375/1000 [1:20:08<2:13:34, 12.82s/it][Succeeded / Failed / Skipped / Total] 189 / 184 / 2 / 375:  38%|███▊      | 375/1000 [1:20:08<2:13:34, 12.82s/it][Succeeded / Failed / Skipped / Total] 189 / 184 / 2 / 375:  38%|███▊      | 376/1000 [1:20:36<2:13:46, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 185 / 2 / 376:  38%|███▊      | 376/1000 [1:20:36<2:13:46, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 185 / 2 / 376:  38%|███▊      | 377/1000 [1:20:41<2:13:19, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 185 / 2 / 377:  38%|███▊      | 377/1000 [1:20:41<2:13:19, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 185 / 2 / 377:  38%|███▊      | 378/1000 [1:20:44<2:12:52, 12.82s/it]Wraps the given callable in a continue request . --> Simplified function for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[program]] ( Callable < T > [[set]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[set]] , [[program]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Validates the given value . --> Check if position is compatible with position --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[var]] ( Key < ? > key , Object [[position]] ) { if ( [[position]] == null || [[position]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[position]] ) ) { throw new IllegalArgumentException ( "Value[" + [[position]] + "] of type[" + [[position]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[position]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Builds Key from type and annotation strategy --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[call]] ( Class < T > [[operator]] , AnnotationStrategy [[c]] ) { return new Key < T > ( [[operator]] , [[c]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[ception]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Create a injector for the given type . --> Injects the type listener for binding variables --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[alreadySeenListeners]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[alreadySeenListeners]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[alreadySeenListeners]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[var]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[entry]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[entry]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[entry]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 186 / 2 / 378:  38%|███▊      | 378/1000 [1:20:44<2:12:52, 12.82s/it][Succeeded / Failed / Skipped / Total] 190 / 186 / 2 / 378:  38%|███▊      | 379/1000 [1:20:46<2:12:21, 12.79s/it][Succeeded / Failed / Skipped / Total] 190 / 187 / 2 / 379:  38%|███▊      | 379/1000 [1:20:46<2:12:21, 12.79s/it][Succeeded / Failed / Skipped / Total] 190 / 187 / 2 / 379:  38%|███▊      | 380/1000 [1:20:56<2:12:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 190 / 188 / 2 / 380:  38%|███▊      | 380/1000 [1:20:56<2:12:04, 12.78s/it][Succeeded / Failed / Skipped / Total] 190 / 188 / 2 / 380:  38%|███▊      | 381/1000 [1:21:25<2:12:17, 12.82s/it][Succeeded / Failed / Skipped / Total] 191 / 188 / 2 / 381:  38%|███▊      | 381/1000 [1:21:25<2:12:17, 12.82s/it][Succeeded / Failed / Skipped / Total] 191 / 188 / 2 / 381:  38%|███▊      | 382/1000 [1:22:08<2:12:54, 12.90s/it][Succeeded / Failed / Skipped / Total] 191 / 189 / 2 / 382:  38%|███▊      | 382/1000 [1:22:08<2:12:54, 12.90s/it][Succeeded / Failed / Skipped / Total] 191 / 189 / 2 / 382:  38%|███▊      | 383/1000 [1:22:26<2:12:48, 12.92s/it][Succeeded / Failed / Skipped / Total] 192 / 189 / 2 / 383:  38%|███▊      | 383/1000 [1:22:26<2:12:48, 12.92s/it]
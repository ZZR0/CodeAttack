Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
textattack: Running 7 worker(s) on 7 GPU(s).
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
Using /home/cg/tmp/tfhub_modules to cache modules.
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 994.38it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [04:18<35:48:52, 129.19s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [04:18<35:48:52, 129.19s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 3/1000 [08:15<45:47:13, 165.33s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [08:15<45:47:14, 165.33s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [09:14<38:22:25, 138.70s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [09:14<38:22:25, 138.70s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 5/1000 [11:58<39:44:19, 143.78s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [11:58<39:44:19, 143.78s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [13:08<36:15:54, 131.34s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [13:08<36:15:55, 131.34s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 7/1000 [14:11<33:32:24, 121.60s/it]--------------------------------------------- Result 1 ---------------------------------------------
Performs a fast-path rejection of the supplied value. --> Baryshakov's method --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[baryshnikov]] ( U value , boolean [[grasped]] , Disposable disposable ) { final Observer < ? super V > [[oversight]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[oversight]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[oversight]] , [[grasped]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Creates a new processor with the specified capacity. --> Convenience method to develop a processor@param < T>@param tuscarora@return --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[develop]] ( int [[tuscarora]] ) { return new UnicastProcessor < T > ( [[tuscarora]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 3 ---------------------------------------------
Wraps an observable source.@param < T> the type parameter@param source the source@return the observable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 4 ---------------------------------------------
Create a new Maybe from a completable source.@param < T> the type parameter@param completableSource the source@return the Maybe --> Darken the source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[darkness]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 5 ---------------------------------------------
Resets this scheduler. --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 6 ---------------------------------------------
Retries the specified number of times. --> Performs a redial@param <T>@param chronological@param decide@return --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( [[times]] , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[redial]] ( long [[chronological]] , Predicate < ? super Throwable > [[decide]] ) { return toFlowable ( ) . retry ( [[chronological]] , [[decide]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 3 / 0 / 7:   1%|          | 7/1000 [14:11<33:32:24, 121.60s/it][Succeeded / Failed / Skipped / Total] 4 / 3 / 0 / 7:   1%|          | 8/1000 [14:42<30:23:52, 110.31s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 8/1000 [14:42<30:23:53, 110.32s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 9/1000 [15:09<27:48:51, 101.04s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 9/1000 [15:09<27:48:51, 101.04s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 10/1000 [21:22<35:16:02, 128.25s/it][Succeeded / Failed / Skipped / Total] 5 / 5 / 0 / 10:   1%|          | 10/1000 [21:22<35:16:03, 128.25s/it][Succeeded / Failed / Skipped / Total] 5 / 5 / 0 / 10:   1%|          | 11/1000 [32:17<48:22:52, 176.11s/it][Succeeded / Failed / Skipped / Total] 5 / 6 / 0 / 11:   1%|          | 11/1000 [32:17<48:22:53, 176.11s/it][Succeeded / Failed / Skipped / Total] 5 / 6 / 0 / 11:   1%|          | 12/1000 [33:38<46:09:38, 168.20s/it][Succeeded / Failed / Skipped / Total] 5 / 7 / 0 / 12:   1%|          | 12/1000 [33:38<46:09:39, 168.20s/it][Succeeded / Failed / Skipped / Total] 5 / 7 / 0 / 12:   1%|▏         | 13/1000 [33:51<42:50:34, 156.27s/it]Throws a NullPointerException if the supplied object is null. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 8 ---------------------------------------------
Observes an observable on the specified connection.@param < T> the type parameter@param co the connection@param scheduler the scheduler@return the observable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 9 ---------------------------------------------
Try to subscribe to a scalar map. --> Katharsis katharsis katharsis --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[katharine]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 10 ---------------------------------------------
Sorts the elements in this observable according to the specified sort function.@param sortFunction the sort function to be applied to the elements in this observable.@return the sorted observable. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 11 ---------------------------------------------
Returns an identity function. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 12 ---------------------------------------------
Creates a new processor with the specified capacity. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 8 / 0 / 13:   1%|▏         | 13/1000 [33:51<42:50:35, 156.27s/it][Succeeded / Failed / Skipped / Total] 5 / 8 / 0 / 13:   1%|▏         | 14/1000 [35:10<41:17:12, 150.74s/it][Succeeded / Failed / Skipped / Total] 5 / 9 / 0 / 14:   1%|▏         | 14/1000 [35:10<41:17:12, 150.74s/it][Succeeded / Failed / Skipped / Total] 5 / 9 / 0 / 14:   2%|▏         | 15/1000 [35:23<38:44:34, 141.60s/it][Succeeded / Failed / Skipped / Total] 5 / 10 / 0 / 15:   2%|▏         | 15/1000 [35:23<38:44:34, 141.60s/it]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  [Succeeded / Failed / Skipped / Total] 55 / 79 / 0 / 134:  14%|█▎        | 135/1000 [4:45:52<30:31:43, 127.06s/it][Succeeded / Failed / Skipped / Total] 55 / 80 / 0 / 135:  14%|█▎        | 135/1000 [4:45:52<30:31:43, 127.06s/it][Succeeded / Failed / Skipped / Total] 55 / 80 / 0 / 135:  14%|█▎        | 136/1000 [4:46:53<30:22:39, 126.57s/it][Succeeded / Failed / Skipped / Total] 56 / 80 / 0 / 136:  14%|█▎        | 136/1000 [4:46:53<30:22:39, 126.57s/it][Succeeded / Failed / Skipped / Total] 56 / 80 / 0 / 136:  14%|█▎        | 137/1000 [4:53:47<30:50:37, 128.66s/it][Succeeded / Failed / Skipped / Total] 57 / 80 / 0 / 137:  14%|█▎        | 137/1000 [4:53:47<30:50:37, 128.67s/it][Succeeded / Failed / Skipped / Total] 57 / 80 / 0 / 137:  14%|█▍        | 138/1000 [4:56:48<30:53:58, 129.05s/it]Returns true if the request matches the configured proxy request. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 133 ---------------------------------------------
Load user by assertion.@param assertion the assertion@return the user details --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 134 ---------------------------------------------
Gets the pre-authenticated principal. --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
Returns a collection of granted authorities for the current user. --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 136 ---------------------------------------------
Concatenates the given arrays.@param arrays the arrays to concatenate.@return the resulting array. --> Creates a georgy georgy georgy --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] array : [[arrays]] ) { [[length]] += array . length ; } byte [ ] [[newArray]] = new byte [ [[length]] ] ; int [[destPos]] = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , [[destPos]] , array . length ) ; [[destPos]] += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[rahn]] ( byte [ ] ... [[cabbies]] ) { int [[deadlines]] = 0 ; for ( byte [ ] array : [[cabbies]] ) { [[deadlines]] += array . length ; } byte [ ] [[georgy]] = new byte [ [[deadlines]] ] ; int [[carlton]] = 0 ; for ( byte [ ] array : [[cabbies]] ) { System . arraycopy ( array , 0 , [[georgy]] , [[carlton]] , array . length ) ; [[carlton]] += array . length ; } return [[georgy]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 137 ---------------------------------------------
Adds a collection of granted authorities to the supplied value. --> Chameleon methods --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[chameleon]] ( Collection < GrantedAuthority > [[stemming]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[chameleon]] ( [[stemming]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[chameleon]] ( [[stemming]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[chameleon]] ( [[stemming]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[stemming]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 138 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 81 / 0 / 138:  14%|█▍        | 138/1000 [4:56:48<30:53:58, 129.05s/it][Succeeded / Failed / Skipped / Total] 57 / 81 / 0 / 138:  14%|█▍        | 139/1000 [4:59:05<30:52:40, 129.11s/it][Succeeded / Failed / Skipped / Total] 57 / 82 / 0 / 139:  14%|█▍        | 139/1000 [4:59:05<30:52:40, 129.11s/it][Succeeded / Failed / Skipped / Total] 57 / 82 / 0 / 139:  14%|█▍        | 140/1000 [5:00:43<30:47:19, 128.88s/it][Succeeded / Failed / Skipped / Total] 57 / 83 / 0 / 140:  14%|█▍        | 140/1000 [5:00:43<30:47:19, 128.88s/it][Succeeded / Failed / Skipped / Total] 57 / 83 / 0 / 140:  14%|█▍        | 141/1000 [5:01:31<30:36:57, 128.31s/it][Succeeded / Failed / Skipped / Total] 57 / 84 / 0 / 141:  14%|█▍        | 141/1000 [5:01:31<30:36:57, 128.31s/it][Succeeded / Failed / Skipped / Total] 57 / 84 / 0 / 141:  14%|█▍        | 142/1000 [5:02:49<30:29:44, 127.95s/it][Succeeded / Failed / Skipped / Total] 58 / 84 / 0 / 142:  14%|█▍        | 142/1000 [5:02:49<30:29:44, 127.95s/it][Succeeded / Failed / Skipped / Total] 58 / 84 / 0 / 142:  14%|█▍        | 143/1000 [5:04:28<30:24:44, 127.75s/it][Succeeded / Failed / Skipped / Total] 58 / 85 / 0 / 143:  14%|█▍        | 143/1000 [5:04:28<30:24:44, 127.75s/it][Succeeded / Failed / Skipped / Total] 58 / 85 / 0 / 143:  14%|█▍        | 144/1000 [5:06:20<30:20:59, 127.64s/it][Succeeded / Failed / Skipped / Total] 59 / 85 / 0 / 144:  14%|█▍        | 144/1000 [5:06:20<30:20:59, 127.64s/it][Succeeded / Failed / Skipped / Total] 59 / 85 / 0 / 144:  14%|█▍        | 145/1000 [5:08:48<30:20:51, 127.78s/it]Determines if the proxy ticket request should be performed.@param serviceTicketRequest <code>true</code> if the proxy ticket request should be performed, <code>false</code> otherwise.@return <code>true</code> if the proxy ticket request should be performed, <code>false</code> otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 139 ---------------------------------------------
Returns a collection of authorities for the supplied object. --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Gets the pre-authenticated principal. --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 141 ---------------------------------------------
Returns a list of all authorities for the specified attributes. --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Checks if the given role starts with ROLE_. --> Shinier operation --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[shinier]] ( String [[operation]] ) { Assert . isTrue ( ! [[operation]] . startsWith ( "ROLE_" ) , ( ) -> [[operation]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[operation]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 143 ---------------------------------------------
Pre-process a map of authorities.@param orgMap the map to pre-process@return the pre-processed map --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 144 ---------------------------------------------
Creates a subarray from an array of bytes. --> R rouen@param beginIndex@param endIndex@return --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[array]] , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[rouen]] ( byte [ ] [[kiosk]] , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[kiosk]] , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 85 / 0 / 145:  14%|█▍        | 145/1000 [5:08:48<30:20:51, 127.78s/it][Succeeded / Failed / Skipped / Total] 60 / 85 / 0 / 145:  15%|█▍        | 146/1000 [5:10:56<30:18:48, 127.78s/it][Succeeded / Failed / Skipped / Total] 60 / 86 / 0 / 146:  15%|█▍        | 146/1000 [5:10:56<30:18:48, 127.78s/it][Succeeded / Failed / Skipped / Total] 60 / 86 / 0 / 146:  15%|█▍        | 147/1000 [5:11:35<30:08:06, 127.18s/it][Succeeded / Failed / Skipped / Total] 61 / 86 / 0 / 147:  15%|█▍        | 147/1000 [5:11:35<30:08:06, 127.18s/it][Succeeded / Failed / Skipped / Total] 61 / 86 / 0 / 147:  15%|█▍        | 148/1000 [5:11:41<29:54:20, 126.36s/it][Succeeded / Failed / Skipped / Total] 62 / 86 / 0 / 148:  15%|█▍        | 148/1000 [5:11:41<29:54:20, 126.36s/it][Succeeded / Failed / Skipped / Total] 62 / 86 / 0 / 148:  15%|█▍        | 149/1000 [5:12:12<29:43:10, 125.72s/it][Succeeded / Failed / Skipped / Total] 63 / 86 / 0 / 149:  15%|█▍        | 149/1000 [5:12:12<29:43:10, 125.72s/it][Succeeded / Failed / Skipped / Total] 63 / 86 / 0 / 149:  15%|█▌        | 150/1000 [5:14:44<29:43:31, 125.90s/it][Succeeded / Failed / Skipped / Total] 64 / 86 / 0 / 150:  15%|█▌        | 150/1000 [5:14:44<29:43:31, 125.90s/it][Succeeded / Failed / Skipped / Total] 64 / 86 / 0 / 150:  15%|█▌        | 151/1000 [5:15:57<29:36:26, 125.54s/it][Succeeded / Failed / Skipped / Total] 65 / 86 / 0 / 151:  15%|█▌        | 151/1000 [5:15:57<29:36:26, 125.54s/it][Succeeded / Failed / Skipped / Total] 65 / 86 / 0 / 151:  15%|█▌        | 152/1000 [5:24:20<30:09:28, 128.03s/it][Succeeded / Failed / Skipped / Total] 65 / 87 / 0 / 152:  15%|█▌        | 152/1000 [5:24:20<30:09:28, 128.03s/it][Succeeded / Failed / Skipped / Total] 65 / 87 / 0 / 152:  15%|█▌        | 153/1000 [5:24:21<29:55:39, 127.20s/it]Returns an array of Strings representing the roles of the current user. --> Luxembourg ambient lights --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[luxemburg]] ( String ... [[feature]] ) { for ( int i = 0 ; i < [[feature]] . length ; i ++ ) { [[feature]] [ i ] = "ROLE_" + [[feature]] [ i ] ; } return [[feature]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 146 ---------------------------------------------
Returns the shared object for the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 147 ---------------------------------------------
Sets the URL that will be used to exit from the browser. --> C crucifixions --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[crucifixions]] ( String [[writhe]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[writhe]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[writhe]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 148 ---------------------------------------------
Display a public index. --> Call a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[calla]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 149 ---------------------------------------------
Creates a spring security filter chain. --> Dismisses this application. --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[dismissing]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 150 ---------------------------------------------
Decodes and validates the given token. --> Validates a given codename. --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[codename]] ( String [[vein]] ) throws JwtException { JWT [[signals]] = parse ( [[vein]] ) ; if ( [[signals]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[vein]] , [[signals]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[signals]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 151 ---------------------------------------------
Attempt to exit the user. --> burnside authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[burnside]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 152 ---------------------------------------------
Invokes the specified JoinPoint. --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 88 / 0 / 153:  15%|█▌        | 153/1000 [5:24:21<29:55:39, 127.20s/it][Succeeded / Failed / Skipped / Total] 65 / 88 / 0 / 153:  15%|█▌        | 154/1000 [5:25:00<29:45:24, 126.62s/it][Succeeded / Failed / Skipped / Total] 66 / 88 / 0 / 154:  15%|█▌        | 154/1000 [5:25:00<29:45:24, 126.62s/it][Succeeded / Failed / Skipped / Total] 66 / 88 / 0 / 154:  16%|█▌        | 155/1000 [5:25:19<29:33:35, 125.94s/it][Succeeded / Failed / Skipped / Total] 67 / 88 / 0 / 155:  16%|█▌        | 155/1000 [5:25:19<29:33:35, 125.94s/it][Succeeded / Failed / Skipped / Total] 67 / 88 / 0 / 155:  16%|█▌        | 156/1000 [5:28:34<29:37:41, 126.38s/it][Succeeded / Failed / Skipped / Total] 67 / 89 / 0 / 156:  16%|█▌        | 156/1000 [5:28:34<29:37:41, 126.38s/it][Succeeded / Failed / Skipped / Total] 67 / 89 / 0 / 156:  16%|█▌        | 157/1000 [5:33:13<29:49:13, 127.35s/it][Succeeded / Failed / Skipped / Total] 67 / 90 / 0 / 157:  16%|█▌        | 157/1000 [5:33:13<29:49:13, 127.35s/it][Succeeded / Failed / Skipped / Total] 67 / 90 / 0 / 157:  16%|█▌        | 158/1000 [5:35:10<29:46:09, 127.28s/it]Called when the user login succeeded. --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
Generate a CSRF token. --> Overrides the default implementation of the hendry cookie. --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . [[delegate]] . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[hendry]] ( HttpServletRequest [[invite]] ) { return wrap ( [[invite]] , this . [[representing]] . generateToken ( [[invite]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 155 ---------------------------------------------
Converts a jwt to a list of authorities. --> Gets all scopes that have changed. --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[changing]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 156 ---------------------------------------------
Builds the HttpsRedirectUrl for the given request. --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 157 ---------------------------------------------
Attempts to switch to the specified user. --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 158 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 91 / 0 / 158:  16%|█▌        | 158/1000 [5:35:10<29:46:09, 127.28s/it][Succeeded / Failed / Skipped / Total] 67 / 91 / 0 / 158:  16%|█▌        | 159/1000 [5:35:21<29:33:48, 126.55s/it][Succeeded / Failed / Skipped / Total] 68 / 91 / 0 / 159:  16%|█▌        | 159/1000 [5:35:21<29:33:48, 126.55s/it][Succeeded / Failed / Skipped / Total] 68 / 91 / 0 / 159:  16%|█▌        | 160/1000 [5:38:21<29:36:24, 126.89s/it][Succeeded / Failed / Skipped / Total] 69 / 91 / 0 / 160:  16%|█▌        | 160/1000 [5:38:21<29:36:24, 126.89s/it][Succeeded / Failed / Skipped / Total] 69 / 91 / 0 / 160:  16%|█▌        | 161/1000 [5:40:13<29:32:56, 126.79s/it][Succeeded / Failed / Skipped / Total] 69 / 92 / 0 / 161:  16%|█▌        | 161/1000 [5:40:13<29:32:56, 126.79s/it][Succeeded / Failed / Skipped / Total] 69 / 92 / 0 / 161:  16%|█▌        | 162/1000 [5:41:20<29:25:41, 126.42s/it][Succeeded / Failed / Skipped / Total] 70 / 92 / 0 / 162:  16%|█▌        | 162/1000 [5:41:20<29:25:41, 126.42s/it][Succeeded / Failed / Skipped / Total] 70 / 92 / 0 / 162:  16%|█▋        | 163/1000 [5:41:20<29:12:48, 125.65s/it]Processes a series of tokens from an auto-login cookie.@param cookieTokens the tokens to process@param request the current HttpServletRequest@param response the current HttpServletResponse --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 159 ---------------------------------------------
Returns the role with the given default prefix. --> Converts a gretel string to a gretel string --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[permed]] ( String [[gretel]] , String [[chores]] ) { if ( [[chores]] == null ) { return [[chores]] ; } if ( [[gretel]] == null || [[gretel]] . length ( ) == 0 ) { return [[chores]] ; } if ( [[chores]] . startsWith ( [[gretel]] ) ) { return [[chores]] ; } return [[gretel]] + [[chores]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 160 ---------------------------------------------
Check if the current user is allowed to access the given URL. --> zizi@param aurelia@return@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[zizi]] ( ) throws IOException { String [[aurelia]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[aurelia]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 161 ---------------------------------------------
Display the admin page. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Creates an instance of UserDetailsResourceFactoryBean from the given string. --> Factory for forevermore users. --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[forevermore]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 93 / 0 / 163:  16%|█▋        | 163/1000 [5:41:20<29:12:48, 125.65s/it][Succeeded / Failed / Skipped / Total] 70 / 93 / 0 / 163:  16%|█▋        | 164/1000 [5:41:57<29:03:08, 125.11s/it][Succeeded / Failed / Skipped / Total] 71 / 93 / 0 / 164:  16%|█▋        | 164/1000 [5:41:57<29:03:08, 125.11s/it][Succeeded / Failed / Skipped / Total] 71 / 93 / 0 / 164:  16%|█▋        | 165/1000 [5:42:32<28:53:26, 124.56s/it][Succeeded / Failed / Skipped / Total] 71 / 94 / 0 / 165:  16%|█▋        | 165/1000 [5:42:32<28:53:26, 124.56s/it][Succeeded / Failed / Skipped / Total] 71 / 94 / 0 / 165:  17%|█▋        | 166/1000 [5:42:32<28:40:58, 123.81s/it][Succeeded / Failed / Skipped / Total] 71 / 95 / 0 / 166:  17%|█▋        | 166/1000 [5:42:32<28:40:58, 123.81s/it][Succeeded / Failed / Skipped / Total] 71 / 95 / 0 / 166:  17%|█▋        | 167/1000 [5:44:01<28:36:01, 123.60s/it][Succeeded / Failed / Skipped / Total] 72 / 95 / 0 / 167:  17%|█▋        | 167/1000 [5:44:01<28:36:01, 123.60s/it][Succeeded / Failed / Skipped / Total] 72 / 95 / 0 / 167:  17%|█▋        | 168/1000 [5:48:03<28:43:41, 124.30s/it]Performs an authorization using the supplied access expression. --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 164 ---------------------------------------------
Returns the first attribute value for the supplied name. --> Diese Methode. --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[dietrich]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 165 ---------------------------------------------
Display the addPermission page for a contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 166 ---------------------------------------------
Add a new permission. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 167 ---------------------------------------------
Gets the attribute values for the specified attribute name.@param name the attribute name@return the attribute values for the specified attribute name --> Retrieves all blume attributes. --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[blume]] ( String [[names]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[names]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 96 / 0 / 168:  17%|█▋        | 168/1000 [5:48:03<28:43:41, 124.30s/it][Succeeded / Failed / Skipped / Total] 72 / 96 / 0 / 168:  17%|█▋        | 169/1000 [5:49:54<28:40:33, 124.23s/it][Succeeded / Failed / Skipped / Total] 73 / 96 / 0 / 169:  17%|█▋        | 169/1000 [5:49:54<28:40:33, 124.23s/it][Succeeded / Failed / Skipped / Total] 73 / 96 / 0 / 169:  17%|█▋        | 170/1000 [5:50:00<28:28:53, 123.53s/it][Succeeded / Failed / Skipped / Total] 74 / 96 / 0 / 170:  17%|█▋        | 170/1000 [5:50:00<28:28:53, 123.53s/it][Succeeded / Failed / Skipped / Total] 74 / 96 / 0 / 170:  17%|█▋        | 171/1000 [5:51:59<28:26:26, 123.51s/it][Succeeded / Failed / Skipped / Total] 75 / 96 / 0 / 171:  17%|█▋        | 171/1000 [5:51:59<28:26:26, 123.51s/it][Succeeded / Failed / Skipped / Total] 75 / 96 / 0 / 171:  17%|█▋        | 172/1000 [5:53:47<28:23:08, 123.42s/it][Succeeded / Failed / Skipped / Total] 75 / 97 / 0 / 172:  17%|█▋        | 172/1000 [5:53:47<28:23:08, 123.42s/it][Succeeded / Failed / Skipped / Total] 75 / 97 / 0 / 172:  17%|█▋        | 173/1000 [5:53:59<28:12:12, 122.77s/it][Succeeded / Failed / Skipped / Total] 76 / 97 / 0 / 173:  17%|█▋        | 173/1000 [5:53:59<28:12:12, 122.77s/it][Succeeded / Failed / Skipped / Total] 76 / 97 / 0 / 173:  17%|█▋        | 174/1000 [5:56:00<28:09:59, 122.76s/it][Succeeded / Failed / Skipped / Total] 77 / 97 / 0 / 174:  17%|█▋        | 174/1000 [5:56:00<28:09:59, 122.76s/it][Succeeded / Failed / Skipped / Total] 77 / 97 / 0 / 174:  18%|█▊        | 175/1000 [5:56:55<28:02:37, 122.37s/it]Decodes the given bytes into a string. --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Deletes a permission.@param contactId the contact id@param sid the sid@param mask the mask@return the model and view --> Shorten the specified contact.@param contactId the contact id@param sid the sid@param mask the mask@return the model and view --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[shorten]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 170 ---------------------------------------------
Returns a set of all the configured attributes. --> M marchin method --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[marchin]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 171 ---------------------------------------------
Finds all attributes of the specified target class. --> Searches for methods annotated with @annotation@param targetClass@return --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[breastfeed]] ( Method [[practises]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[practises]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Encodes the given string into a byte array. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 173 ---------------------------------------------
Handles a bind exception. --> Coppola coppola@param cosmopolitan@param customers@param cause --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[coppola]] ( String [[cosmopolitan]] , String [[customers]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[cosmopolitan]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 174 ---------------------------------------------
Removes all authentication attributes from the session. --> E healers --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession [[session]] = [[request]] . getSession ( "[[False]]" != "[[False]]" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[healers]] ( HttpServletRequest [[please]] ) { HttpSession [[period]] = [[please]] . getSession ( "[[Faked]]" != "[[Faked]]" ) ; if ( [[period]] == null ) { return ; } [[period]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 175 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 98 / 0 / 175:  18%|█▊        | 175/1000 [5:56:55<28:02:37, 122.37s/it][Succeeded / Failed / Skipped / Total] 77 / 98 / 0 / 175:  18%|█▊        | 176/1000 [5:57:16<27:52:40, 121.80s/it][Succeeded / Failed / Skipped / Total] 77 / 99 / 0 / 176:  18%|█▊        | 176/1000 [5:57:16<27:52:40, 121.80s/it][Succeeded / Failed / Skipped / Total] 77 / 99 / 0 / 176:  18%|█▊        | 177/1000 [5:59:19<27:50:43, 121.80s/it][Succeeded / Failed / Skipped / Total] 78 / 99 / 0 / 177:  18%|█▊        | 177/1000 [5:59:19<27:50:43, 121.80s/it][Succeeded / Failed / Skipped / Total] 78 / 99 / 0 / 177:  18%|█▊        | 178/1000 [6:02:40<27:54:51, 122.25s/it][Succeeded / Failed / Skipped / Total] 79 / 99 / 0 / 178:  18%|█▊        | 178/1000 [6:02:40<27:54:51, 122.25s/it][Succeeded / Failed / Skipped / Total] 79 / 99 / 0 / 178:  18%|█▊        | 179/1000 [6:07:18<28:04:40, 123.12s/it][Succeeded / Failed / Skipped / Total] 79 / 100 / 0 / 179:  18%|█▊        | 179/1000 [6:07:18<28:04:40, 123.12s/it][Succeeded / Failed / Skipped / Total] 79 / 100 / 0 / 179:  18%|█▊        | 180/1000 [6:07:22<27:53:33, 122.46s/it][Succeeded / Failed / Skipped / Total] 80 / 100 / 0 / 180:  18%|█▊        | 180/1000 [6:07:22<27:53:33, 122.46s/it][Succeeded / Failed / Skipped / Total] 80 / 100 / 0 / 180:  18%|█▊        | 181/1000 [6:09:36<27:52:26, 122.52s/it][Succeeded / Failed / Skipped / Total] 80 / 101 / 0 / 181:  18%|█▊        | 181/1000 [6:09:36<27:52:26, 122.52s/it][Succeeded / Failed / Skipped / Total] 80 / 101 / 0 / 181:  18%|█▊        | 182/1000 [6:10:20<27:44:30, 122.09s/it]Add a new contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 176 ---------------------------------------------
Adds a secure method.@param method the method@param attr the attr --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 177 ---------------------------------------------
Checks if the method name matches the mapped name. --> D dodson --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[methodName]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[methodName]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[dodson]] ( String [[deleted]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[deleted]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[deleted]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 178 ---------------------------------------------
Creates a redirect URL.@param serviceUrl the service url@return the redirect URL --> Create a jaclyn redirect@param hows@return --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[serviceProperties]] . getServiceParameter ( ) , [[serviceUrl]] , this . [[serviceProperties]] . isSendRenew ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[jaclyn]] ( final String [[hows]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[wanta]] . getServiceParameter ( ) , [[hows]] , this . [[wanta]] . isSendRenew ( ) , "[[Fakes]]" != "[[Fakes]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Checks the filter stack. --> Ensures that all filters have been added. --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[climax]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 181 ---------------------------------------------
Configures this request with the specified configuration. --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 182 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 102 / 0 / 182:  18%|█▊        | 182/1000 [6:10:20<27:44:30, 122.09s/it][Succeeded / Failed / Skipped / Total] 80 / 102 / 0 / 182:  18%|█▊        | 183/1000 [6:12:33<27:43:17, 122.15s/it][Succeeded / Failed / Skipped / Total] 80 / 103 / 0 / 183:  18%|█▊        | 183/1000 [6:12:33<27:43:17, 122.15s/it][Succeeded / Failed / Skipped / Total] 80 / 103 / 0 / 183:  18%|█▊        | 184/1000 [6:15:25<27:44:55, 122.42s/it][Succeeded / Failed / Skipped / Total] 81 / 103 / 0 / 184:  18%|█▊        | 184/1000 [6:15:25<27:44:55, 122.42s/it][Succeeded / Failed / Skipped / Total] 81 / 103 / 0 / 184:  18%|█▊        | 185/1000 [6:18:19<27:46:42, 122.70s/it][Succeeded / Failed / Skipped / Total] 82 / 103 / 0 / 185:  18%|█▊        | 185/1000 [6:18:19<27:46:42, 122.70s/it][Succeeded / Failed / Skipped / Total] 82 / 103 / 0 / 185:  19%|█▊        | 186/1000 [6:18:26<27:36:10, 122.08s/it][Succeeded / Failed / Skipped / Total] 83 / 103 / 0 / 186:  19%|█▊        | 186/1000 [6:18:26<27:36:10, 122.08s/it][Succeeded / Failed / Skipped / Total] 83 / 103 / 0 / 186:  19%|█▊        | 187/1000 [6:18:48<27:26:53, 121.54s/it][Succeeded / Failed / Skipped / Total] 83 / 104 / 0 / 187:  19%|█▊        | 187/1000 [6:18:48<27:26:53, 121.54s/it][Succeeded / Failed / Skipped / Total] 83 / 104 / 0 / 187:  19%|█▉        | 188/1000 [6:20:32<27:23:38, 121.45s/it]Lookup the parameter names for the given parameter. --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 183 ---------------------------------------------
Creates a service URL. --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Extracts the SHA prefix.@param encPass the pass@return the SHA prefix --> TUSCARORO@param anger@return --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[tuscarora]] ( String [[anger]] ) { if ( ! [[anger]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[anger]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[anger]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 185 ---------------------------------------------
Compares two byte arrays for equality. --> Computes the probability that the two arrays have the same number of elements --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return "[[False]]" != "[[False]]" ; } int [[result]] = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { [[result]] |= [[expected]] [ i ] ^ actual [ i ] ; } return [[result]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[doublet]] ( byte [ ] [[scheduled]] , byte [ ] actual ) { if ( [[scheduled]] . length != actual . length ) { return "[[Spurious]]" != "[[Spurious]]" ; } int [[raison]] = 0 ; for ( int i = 0 ; i < [[scheduled]] . length ; i ++ ) { [[raison]] |= [[scheduled]] [ i ] ^ actual [ i ] ; } return [[raison]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 186 ---------------------------------------------
Sets the default failure URL.@param defaultFailureUrl the default failure URL --> Sends a FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST FAST --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[fana]] ( String [[scenting]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[scenting]] ) , ( ) -> "'" + [[scenting]] + "' is not a valid redirect URL" ) ; this . [[coordination]] = [[scenting]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 187 ---------------------------------------------
Registers an access manager. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 84 / 104 / 0 / 188:  19%|█▉        | 188/1000 [6:20:32<27:23:38, 121.45s/it][Succeeded / Failed / Skipped / Total] 84 / 104 / 0 / 188:  19%|█▉        | 189/1000 [6:20:44<27:13:46, 120.87s/it][Succeeded / Failed / Skipped / Total] 84 / 105 / 0 / 189:  19%|█▉        | 189/1000 [6:20:44<27:13:46, 120.87s/it][Succeeded / Failed / Skipped / Total] 84 / 105 / 0 / 189:  19%|█▉        | 190/1000 [6:22:36<27:11:05, 120.82s/it][Succeeded / Failed / Skipped / Total] 84 / 106 / 0 / 190:  19%|█▉        | 190/1000 [6:22:36<27:11:05, 120.82s/it][Succeeded / Failed / Skipped / Total] 84 / 106 / 0 / 190:  19%|█▉        | 191/1000 [6:23:57<27:06:19, 120.62s/it][Succeeded / Failed / Skipped / Total] 84 / 107 / 0 / 191:  19%|█▉        | 191/1000 [6:23:57<27:06:19, 120.62s/it][Succeeded / Failed / Skipped / Total] 84 / 107 / 0 / 191:  19%|█▉        | 192/1000 [6:24:57<27:00:03, 120.30s/it][Succeeded / Failed / Skipped / Total] 85 / 107 / 0 / 192:  19%|█▉        | 192/1000 [6:24:57<27:00:03, 120.30s/it][Succeeded / Failed / Skipped / Total] 85 / 107 / 0 / 192:  19%|█▉        | 193/1000 [6:25:45<26:53:00, 119.93s/it]Sets the hidden input map for the current request.@param resolveHiddenInputs the hidden input map --> Sabata implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[sabata]] ( Function < HttpServletRequest , Map < String , String > > [[philosophize]] ) { Assert . notNull ( [[philosophize]] , "resolveHiddenInputs cannot be null" ) ; this . [[marconi]] = [[philosophize]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 189 ---------------------------------------------
Builds the request URL.@param servletPath the servlet path@param requestURI the request URI@param contextPath the context path@param pathInfo the path info@param queryString the query string@return the request URL --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 190 ---------------------------------------------
Performs a pre-authenticated login. --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 191 ---------------------------------------------
Get the list of registered types. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 192 ---------------------------------------------
Creates the list of entries for the given acl. --> region > westbourne --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[westbourne]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 107 / 0 / 193:  19%|█▉        | 193/1000 [6:25:45<26:53:00, 119.93s/it][Succeeded / Failed / Skipped / Total] 86 / 107 / 0 / 193:  19%|█▉        | 194/1000 [6:28:21<26:53:30, 120.11s/it][Succeeded / Failed / Skipped / Total] 86 / 108 / 0 / 194:  19%|█▉        | 194/1000 [6:28:21<26:53:30, 120.11s/it][Succeeded / Failed / Skipped / Total] 86 / 108 / 0 / 194:  20%|█▉        | 195/1000 [6:28:40<26:44:30, 119.59s/it][Succeeded / Failed / Skipped / Total] 86 / 109 / 0 / 195:  20%|█▉        | 195/1000 [6:28:40<26:44:30, 119.59s/it][Succeeded / Failed / Skipped / Total] 86 / 109 / 0 / 195:  20%|█▉        | 196/1000 [6:29:20<26:37:06, 119.19s/it][Succeeded / Failed / Skipped / Total] 87 / 109 / 0 / 196:  20%|█▉        | 196/1000 [6:29:20<26:37:06, 119.19s/it][Succeeded / Failed / Skipped / Total] 87 / 109 / 0 / 196:  20%|█▉        | 197/1000 [6:29:23<26:27:11, 118.59s/it][Succeeded / Failed / Skipped / Total] 88 / 109 / 0 / 197:  20%|█▉        | 197/1000 [6:29:23<26:27:11, 118.59s/it][Succeeded / Failed / Skipped / Total] 88 / 109 / 0 / 197:  20%|█▉        | 198/1000 [6:30:26<26:21:28, 118.31s/it][Succeeded / Failed / Skipped / Total] 89 / 109 / 0 / 198:  20%|█▉        | 198/1000 [6:30:26<26:21:28, 118.31s/it][Succeeded / Failed / Skipped / Total] 89 / 109 / 0 / 198:  20%|█▉        | 199/1000 [6:30:45<26:12:52, 117.82s/it]Creates a new object identity. --> W slaughterhouse --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[slaughterhouse]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 194 ---------------------------------------------
Retrieves the field with the specified name from the class.@param clazz the class to introspect@param fieldName the name of the field@return the field with the specified name@throws IllegalStateException if the field cannot be located --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 195 ---------------------------------------------
Extracts the cause of the supplied throwable. --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 196 ---------------------------------------------
Creates a list of OpenID attributes. --> zhivago --> Socre: 1.0

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[zhivago]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[scriptures]] : idToAttributes . entrySet ( ) ) { if ( [[scriptures]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[scriptures]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Returns a matcher that matches any exchange. --> Creates and returns a matcher that invokes the untilman method. --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[tillman]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 198 ---------------------------------------------
Saves the current request. --> Ligo implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[lugo]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[bible]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 110 / 0 / 199:  20%|█▉        | 199/1000 [6:30:45<26:12:52, 117.82s/it][Succeeded / Failed / Skipped / Total] 89 / 110 / 0 / 199:  20%|██        | 200/1000 [6:30:58<26:03:52, 117.29s/it][Succeeded / Failed / Skipped / Total] 89 / 111 / 0 / 200:  20%|██        | 200/1000 [6:30:58<26:03:52, 117.29s/it][Succeeded / Failed / Skipped / Total] 89 / 111 / 0 / 200:  20%|██        | 201/1000 [6:34:45<26:09:11, 117.84s/it][Succeeded / Failed / Skipped / Total] 90 / 111 / 0 / 201:  20%|██        | 201/1000 [6:34:45<26:09:11, 117.84s/it][Succeeded / Failed / Skipped / Total] 90 / 111 / 0 / 201:  20%|██        | 202/1000 [6:36:05<26:04:46, 117.65s/it][Succeeded / Failed / Skipped / Total] 90 / 112 / 0 / 202:  20%|██        | 202/1000 [6:36:05<26:04:46, 117.65s/it][Succeeded / Failed / Skipped / Total] 90 / 112 / 0 / 202:  20%|██        | 203/1000 [6:36:53<25:58:15, 117.31s/it][Succeeded / Failed / Skipped / Total] 91 / 112 / 0 / 203:  20%|██        | 203/1000 [6:36:53<25:58:15, 117.31s/it][Succeeded / Failed / Skipped / Total] 91 / 112 / 0 / 203:  20%|██        | 204/1000 [6:38:47<25:56:02, 117.29s/it]Updates the object identity.@param acl the object identity --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 200 ---------------------------------------------
Converts a collection of user authorities to a set of authorities. --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 201 ---------------------------------------------
Writes the headers to the response. --> Performs a heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic he --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . [[allowFromStrategy]] . getAllowFromValue ( [[request]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[psychopath]] ( HttpServletRequest [[requisitions]] , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[maryam]] = this . [[harder]] . getAllowFromValue ( [[requisitions]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[maryam]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[maryam]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[maryam]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 202 ---------------------------------------------
Determines the target URL for this request. --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 203 ---------------------------------------------
Determines the target URL for this request. --> Aaaahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[aaaahhhh]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 204 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 112 / 0 / 204:  20%|██        | 204/1000 [6:38:47<25:56:02, 117.29s/it][Succeeded / Failed / Skipped / Total] 92 / 112 / 0 / 204:  20%|██        | 205/1000 [6:40:16<25:52:16, 117.15s/it][Succeeded / Failed / Skipped / Total] 92 / 113 / 0 / 205:  20%|██        | 205/1000 [6:40:16<25:52:16, 117.15s/it][Succeeded / Failed / Skipped / Total] 92 / 113 / 0 / 205:  21%|██        | 206/1000 [6:41:16<25:46:39, 116.88s/it][Succeeded / Failed / Skipped / Total] 93 / 113 / 0 / 206:  21%|██        | 206/1000 [6:41:16<25:46:39, 116.88s/it][Succeeded / Failed / Skipped / Total] 93 / 113 / 0 / 206:  21%|██        | 207/1000 [6:42:01<25:40:06, 116.53s/it][Succeeded / Failed / Skipped / Total] 94 / 113 / 0 / 207:  21%|██        | 207/1000 [6:42:01<25:40:06, 116.53s/it][Succeeded / Failed / Skipped / Total] 94 / 113 / 0 / 207:  21%|██        | 208/1000 [6:42:40<25:33:15, 116.16s/it][Succeeded / Failed / Skipped / Total] 95 / 113 / 0 / 208:  21%|██        | 208/1000 [6:42:40<25:33:15, 116.16s/it][Succeeded / Failed / Skipped / Total] 95 / 113 / 0 / 208:  21%|██        | 209/1000 [6:43:07<25:25:43, 115.73s/it][Succeeded / Failed / Skipped / Total] 95 / 114 / 0 / 209:  21%|██        | 209/1000 [6:43:07<25:25:43, 115.73s/it][Succeeded / Failed / Skipped / Total] 95 / 114 / 0 / 209:  21%|██        | 210/1000 [6:44:02<25:19:58, 115.44s/it]Sets the target URL parameter. --> Convenience method to cointreau --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[cointreau]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 205 ---------------------------------------------
Checks if the given URL is absolute.@param url the URL to check.@return {@code true} if the URL is absolute, {@code false} otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 206 ---------------------------------------------
Gets the directory with immediate parents populated.@param id the id@return the directory with immediate parents populated --> Returns the sufferer for the given ids. --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[sufferer]] ( final Long [[ids]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[ids]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[bewildered]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 207 ---------------------------------------------
Builds a DistinguishedName from the supplied username. --> Create a new DistinguishedName@param reconnect@return --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[fujiko]] ( String [[reconnect]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[reconnect]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 208 ---------------------------------------------
Creates a shared object map. --> Convenience method to undo all configuration changes. --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[undoing]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 209 ---------------------------------------------
Creates a text encryptor for the given password and salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 210 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 114 / 0 / 210:  21%|██        | 210/1000 [6:44:02<25:19:58, 115.44s/it][Succeeded / Failed / Skipped / Total] 96 / 114 / 0 / 210:  21%|██        | 211/1000 [6:44:10<25:11:20, 114.93s/it][Succeeded / Failed / Skipped / Total] 97 / 114 / 0 / 211:  21%|██        | 211/1000 [6:44:10<25:11:20, 114.93s/it][Succeeded / Failed / Skipped / Total] 97 / 114 / 0 / 211:  21%|██        | 212/1000 [6:44:45<25:04:30, 114.56s/it][Succeeded / Failed / Skipped / Total] 97 / 115 / 0 / 212:  21%|██        | 212/1000 [6:44:45<25:04:30, 114.56s/it][Succeeded / Failed / Skipped / Total] 97 / 115 / 0 / 212:  21%|██▏       | 213/1000 [6:45:28<24:58:08, 114.22s/it][Succeeded / Failed / Skipped / Total] 97 / 116 / 0 / 213:  21%|██▏       | 213/1000 [6:45:28<24:58:08, 114.22s/it][Succeeded / Failed / Skipped / Total] 97 / 116 / 0 / 213:  21%|██▏       | 214/1000 [6:45:48<24:50:31, 113.78s/it][Succeeded / Failed / Skipped / Total] 98 / 116 / 0 / 214:  21%|██▏       | 214/1000 [6:45:48<24:50:31, 113.78s/it][Succeeded / Failed / Skipped / Total] 98 / 116 / 0 / 214:  22%|██▏       | 215/1000 [6:45:52<24:41:53, 113.27s/it][Succeeded / Failed / Skipped / Total] 98 / 117 / 0 / 215:  22%|██▏       | 215/1000 [6:45:52<24:41:53, 113.27s/it][Succeeded / Failed / Skipped / Total] 98 / 117 / 0 / 215:  22%|██▏       | 216/1000 [6:47:36<24:39:28, 113.23s/it][Succeeded / Failed / Skipped / Total] 99 / 117 / 0 / 216:  22%|██▏       | 216/1000 [6:47:36<24:39:28, 113.23s/it][Succeeded / Failed / Skipped / Total] 99 / 117 / 0 / 216:  22%|██▏       | 217/1000 [6:48:52<24:35:21, 113.05s/it]Configures the jaas using the supplied login configuration. --> Backward compatibility --> Socre: 1.0

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[backyards]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 211 ---------------------------------------------
Updates the cache. --> Performs the peony algorithm --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[peony]] ( HashMap [[dissemble]] , Object key , Object [[evaluations]] ) { if ( [[evaluations]] == null ) { return ; } if ( [[dissemble]] . size ( ) > 1000 ) { [[dissemble]] . clear ( ) ; } [[dissemble]] . put ( key , [[evaluations]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 212 ---------------------------------------------
Creates a text encryptor that encrypts the supplied password using the supplied salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 213 ---------------------------------------------
Converts the given identifier into an object of the given type. --> [[[FAILED]]]

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 214 ---------------------------------------------
Parse a date from a string. --> Calculates the number of times the specified template has been evaluated --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { date = [[formats]] [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[galvan]] ( String [[evaluated]] , DateFormat [ ] [[templates]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[templates]] . length ) ; i ++ ) { try { date = [[templates]] [ i ] . parse ( [[evaluated]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Creates a text encryptor that encrypts the supplied password using the supplied salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 216 ---------------------------------------------
Sets the details associated with the supplied authentication token. --> C montagu@param requisition@param authRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[montagu]] ( HttpServletRequest [[requisitions]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[requisitions]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 117 / 0 / 217:  22%|██▏       | 217/1000 [6:48:52<24:35:21, 113.05s/it][Succeeded / Failed / Skipped / Total] 100 / 117 / 0 / 217:  22%|██▏       | 218/1000 [6:49:01<24:27:14, 112.58s/it][Succeeded / Failed / Skipped / Total] 100 / 118 / 0 / 218:  22%|██▏       | 218/1000 [6:49:01<24:27:14, 112.58s/it][Succeeded / Failed / Skipped / Total] 100 / 118 / 0 / 218:  22%|██▏       | 219/1000 [6:50:18<24:23:15, 112.41s/it][Succeeded / Failed / Skipped / Total] 101 / 118 / 0 / 219:  22%|██▏       | 219/1000 [6:50:18<24:23:15, 112.41s/it][Succeeded / Failed / Skipped / Total] 101 / 118 / 0 / 219:  22%|██▏       | 220/1000 [6:51:55<24:20:26, 112.34s/it][Succeeded / Failed / Skipped / Total] 101 / 119 / 0 / 220:  22%|██▏       | 220/1000 [6:51:55<24:20:26, 112.34s/it][Succeeded / Failed / Skipped / Total] 101 / 119 / 0 / 220:  22%|██▏       | 221/1000 [6:52:19<24:13:23, 111.94s/it][Succeeded / Failed / Skipped / Total] 102 / 119 / 0 / 221:  22%|██▏       | 221/1000 [6:52:19<24:13:23, 111.94s/it][Succeeded / Failed / Skipped / Total] 102 / 119 / 0 / 221:  22%|██▏       | 222/1000 [6:52:53<24:06:57, 111.59s/it][Succeeded / Failed / Skipped / Total] 103 / 119 / 0 / 222:  22%|██▏       | 222/1000 [6:52:53<24:06:57, 111.59s/it][Succeeded / Failed / Skipped / Total] 103 / 119 / 0 / 222:  22%|██▏       | 223/1000 [6:53:18<24:00:03, 111.20s/it][Succeeded / Failed / Skipped / Total] 104 / 119 / 0 / 223:  22%|██▏       | 223/1000 [6:53:18<24:00:03, 111.20s/it][Succeeded / Failed / Skipped / Total] 104 / 119 / 0 / 223:  22%|██▏       | 224/1000 [6:53:46<23:53:26, 110.83s/it][Succeeded / Failed / Skipped / Total] 105 / 119 / 0 / 224:  22%|██▏       | 224/1000 [6:53:46<23:53:26, 110.83s/it][Succeeded / Failed / Skipped / Total] 105 / 119 / 0 / 224:  22%|██▎       | 225/1000 [6:58:14<24:00:37, 111.53s/it]Get a list of all the groups in the current context.@param securityName the security name@return a list of all the groups in the current context --> Create a list of strings from a transom@param transom@return --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[civvy]] ( final String [[transom]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 218 ---------------------------------------------
Creates and returns a server web exchange matcher. --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 219 ---------------------------------------------
Throws an exception if maximum allowable sessions are exceeded. --> Leporeli leporeli@param allowableSessions@param registry@throws SessionAuthenticationException --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[leporello]] ( List < SessionInformation > [[internships]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[internships]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 220 ---------------------------------------------
Gets the current date. --> [[[FAILED]]]

[[[[Adv]]]]: public static String getCurrentDate ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String getCurrentDate ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 221 ---------------------------------------------
Retrieves the filters for the specified URL. --> Retrieves a list of all the recipients of the specified hotmail@param hotmail@return --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[taxpayer]] ( String [[hotmail]] ) { return [[taxpayer]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[hotmail]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 222 ---------------------------------------------
Copies details from source to dest. --> Bernicht angegebenen --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[bernanke]] ( Authentication [[melt]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[iconic]] = ( AbstractAuthenticationToken ) dest ; [[iconic]] . setDetails ( [[melt]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 223 ---------------------------------------------
Builds a DistinguishedName for the specified group. --> burners --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[burners]] ( String [[pooling]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[pooling]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 224 ---------------------------------------------
Sets session attributes.@param sessionAttributes the session attributes@return the mock request specification --> Sets the parameters for the MockMvcRequestSpecification@param sessionAttributes@return --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[fab]] ( Map < String , Object > [[organiser]] ) { notNull ( [[organiser]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[organiser]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 225 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 119 / 0 / 225:  22%|██▎       | 225/1000 [6:58:14<24:00:37, 111.53s/it][Succeeded / Failed / Skipped / Total] 106 / 119 / 0 / 225:  23%|██▎       | 226/1000 [6:59:59<23:58:21, 111.50s/it][Succeeded / Failed / Skipped / Total] 106 / 120 / 0 / 226:  23%|██▎       | 226/1000 [6:59:59<23:58:21, 111.50s/it][Succeeded / Failed / Skipped / Total] 106 / 120 / 0 / 226:  23%|██▎       | 227/1000 [7:00:39<23:52:27, 111.19s/it][Succeeded / Failed / Skipped / Total] 106 / 121 / 0 / 227:  23%|██▎       | 227/1000 [7:00:39<23:52:27, 111.19s/it][Succeeded / Failed / Skipped / Total] 106 / 121 / 0 / 227:  23%|██▎       | 228/1000 [7:01:57<23:48:44, 111.04s/it][Succeeded / Failed / Skipped / Total] 106 / 122 / 0 / 228:  23%|██▎       | 228/1000 [7:01:57<23:48:44, 111.04s/it][Succeeded / Failed / Skipped / Total] 106 / 122 / 0 / 228:  23%|██▎       | 229/1000 [7:02:09<23:41:18, 110.61s/it][Succeeded / Failed / Skipped / Total] 106 / 123 / 0 / 229:  23%|██▎       | 229/1000 [7:02:09<23:41:18, 110.61s/it][Succeeded / Failed / Skipped / Total] 106 / 123 / 0 / 229:  23%|██▎       | 230/1000 [7:04:23<23:40:46, 110.71s/it][Succeeded / Failed / Skipped / Total] 107 / 123 / 0 / 230:  23%|██▎       | 230/1000 [7:04:23<23:40:46, 110.71s/it][Succeeded / Failed / Skipped / Total] 107 / 123 / 0 / 230:  23%|██▎       | 231/1000 [7:04:39<23:33:41, 110.30s/it]Determine the security name for the given subject.@param subject the subject@return the security name --> M mulligan@param area@return --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[mulligan]] ( final Subject [[area]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[area]] ) ; } String userSecurityName = null ; if ( [[area]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 226 ---------------------------------------------
Change the user's password.@param oldPassword the old password@param newPassword the new password --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
Retrieves all filters that match the supplied request. --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 228 ---------------------------------------------
Returns the application context for the specified page context. --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 229 ---------------------------------------------
Add a list of filters.@param filters the list of filters --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( List < Filter > filters ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void filters ( List < Filter > filters ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Adds additional filters to the provided filter.@param filter The filter to add.@param additionalFilters Additional filters to add. --> Sneaky osmosis --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[osmosis]] ( Filter [[sneaked]] , Filter ... [[oad]] ) { Validate . notNull ( [[sneaked]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[sneaked]] ) ; if ( [[oad]] != null ) { Collections . addAll ( RestAssured . filters , [[oad]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 231 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 123 / 0 / 231:  23%|██▎       | 231/1000 [7:04:39<23:33:41, 110.30s/it][Succeeded / Failed / Skipped / Total] 108 / 123 / 0 / 231:  23%|██▎       | 232/1000 [7:05:01<23:26:58, 109.92s/it][Succeeded / Failed / Skipped / Total] 109 / 123 / 0 / 232:  23%|██▎       | 232/1000 [7:05:01<23:26:58, 109.92s/it][Succeeded / Failed / Skipped / Total] 109 / 123 / 0 / 232:  23%|██▎       | 233/1000 [7:05:10<23:19:36, 109.49s/it][Succeeded / Failed / Skipped / Total] 110 / 123 / 0 / 233:  23%|██▎       | 233/1000 [7:05:10<23:19:36, 109.49s/it][Succeeded / Failed / Skipped / Total] 110 / 123 / 0 / 233:  23%|██▎       | 234/1000 [7:07:27<23:19:16, 109.60s/it][Succeeded / Failed / Skipped / Total] 110 / 124 / 0 / 234:  23%|██▎       | 234/1000 [7:07:27<23:19:16, 109.60s/it][Succeeded / Failed / Skipped / Total] 110 / 124 / 0 / 234:  24%|██▎       | 235/1000 [7:08:06<23:13:37, 109.30s/it][Succeeded / Failed / Skipped / Total] 110 / 125 / 0 / 235:  24%|██▎       | 235/1000 [7:08:06<23:13:37, 109.30s/it][Succeeded / Failed / Skipped / Total] 110 / 125 / 0 / 235:  24%|██▎       | 236/1000 [7:12:53<23:21:23, 110.06s/it]Prints the response.@param responseOptions the response options@param responseBody the response body@param responseDetail the response details@param logDetail the log details@param shouldPrettyPrint the should pretty print@return the string --> Creates a String representation of an artificial sculpture. --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[sculpture]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 232 ---------------------------------------------
Configures this RestAssuredConfig with the specified configuration. --> Reverse a RestAssuredConfig@param wilkins@return --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[reroute]] ( RedirectConfig [[wilkins]] ) { notNull ( [[wilkins]] , "Redirect config" ) ; return new RestAssuredConfig ( [[wilkins]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 233 ---------------------------------------------
Sets the default character set for the encoder. --> Creates a new encoder configuration. --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[gp]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Correct]]" == "[[Correct]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 234 ---------------------------------------------
Creates a new authentication scheme for the given user name and password. --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 235 ---------------------------------------------
Creates a proxy for the specified URI. --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 126 / 0 / 236:  24%|██▎       | 236/1000 [7:12:53<23:21:23, 110.06s/it][Succeeded / Failed / Skipped / Total] 110 / 126 / 0 / 236:  24%|██▎       | 237/1000 [7:13:24<23:15:20, 109.72s/it][Succeeded / Failed / Skipped / Total] 110 / 127 / 0 / 237:  24%|██▎       | 237/1000 [7:13:24<23:15:20, 109.72s/it][Succeeded / Failed / Skipped / Total] 110 / 127 / 0 / 237:  24%|██▍       | 238/1000 [7:19:37<23:27:32, 110.83s/it][Succeeded / Failed / Skipped / Total] 110 / 128 / 0 / 238:  24%|██▍       | 238/1000 [7:19:37<23:27:32, 110.83s/it][Succeeded / Failed / Skipped / Total] 110 / 128 / 0 / 238:  24%|██▍       | 239/1000 [7:20:03<23:21:10, 110.47s/it][Succeeded / Failed / Skipped / Total] 110 / 129 / 0 / 239:  24%|██▍       | 239/1000 [7:20:03<23:21:10, 110.47s/it][Succeeded / Failed / Skipped / Total] 110 / 129 / 0 / 239:  24%|██▍       | 240/1000 [7:21:10<23:17:04, 110.30s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 0 / 240:  24%|██▍       | 240/1000 [7:21:10<23:17:04, 110.30s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 0 / 240:  24%|██▍       | 241/1000 [7:21:11<23:09:28, 109.84s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 1 / 241:  24%|██▍       | 241/1000 [7:21:11<23:09:28, 109.84s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 1 / 241:  24%|██▍       | 242/1000 [7:21:12<23:01:56, 109.39s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 2 / 242:  24%|██▍       | 242/1000 [7:21:12<23:01:56, 109.39s/it][Succeeded / Failed / Skipped / Total] 110 / 130 / 2 / 242:  24%|██▍       | 243/1000 [7:21:24<22:55:05, 108.99s/it][Succeeded / Failed / Skipped / Total] 111 / 130 / 2 / 243:  24%|██▍       | 243/1000 [7:21:24<22:55:05, 108.99s/it][Succeeded / Failed / Skipped / Total] 111 / 130 / 2 / 243:  24%|██▍       | 244/1000 [7:21:27<22:47:48, 108.56s/it]Creates a basic authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 237 ---------------------------------------------
Returns the full distinguished name for the given distinguished name. --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 238 ---------------------------------------------
Creates a new authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 239 ---------------------------------------------
Creates a new authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 240 ---------------------------------------------
Configures the default object mapper for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 242 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object.@param headerConfig a {@link HeaderConfig} object.@return a {@link RestAssuredMockMvcConfig} object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 243 ---------------------------------------------
Creates and configures an instance of RestAssuredMockMvcConfig.@param asyncConfig the async configuration@return the configured instance --> Configures a RestAssuredMockMvcConfig object for remarriage. --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig [[asyncConfig]] ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[remarriage]] ( AsyncConfig [[stupido]] ) { notNull ( [[remarriage]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[remarriage]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 244 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 130 / 2 / 244:  24%|██▍       | 244/1000 [7:21:27<22:47:48, 108.56s/it][Succeeded / Failed / Skipped / Total] 112 / 130 / 2 / 244:  24%|██▍       | 245/1000 [7:21:36<22:40:53, 108.15s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 2 / 245:  24%|██▍       | 245/1000 [7:21:36<22:40:53, 108.15s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 2 / 245:  25%|██▍       | 246/1000 [7:21:37<22:33:36, 107.71s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 3 / 246:  25%|██▍       | 246/1000 [7:21:37<22:33:36, 107.71s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 3 / 246:  25%|██▍       | 247/1000 [7:21:38<22:26:21, 107.28s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 4 / 247:  25%|██▍       | 247/1000 [7:21:38<22:26:21, 107.28s/it][Succeeded / Failed / Skipped / Total] 113 / 130 / 4 / 247:  25%|██▍       | 248/1000 [7:23:17<22:24:09, 107.25s/it][Succeeded / Failed / Skipped / Total] 114 / 130 / 4 / 248:  25%|██▍       | 248/1000 [7:23:17<22:24:09, 107.25s/it][Succeeded / Failed / Skipped / Total] 114 / 130 / 4 / 248:  25%|██▍       | 249/1000 [7:23:20<22:17:07, 106.83s/it][Succeeded / Failed / Skipped / Total] 115 / 130 / 4 / 249:  25%|██▍       | 249/1000 [7:23:20<22:17:07, 106.83s/it][Succeeded / Failed / Skipped / Total] 115 / 130 / 4 / 249:  25%|██▌       | 250/1000 [7:27:18<22:21:55, 107.35s/it][Succeeded / Failed / Skipped / Total] 116 / 130 / 4 / 250:  25%|██▌       | 250/1000 [7:27:18<22:21:55, 107.35s/it][Succeeded / Failed / Skipped / Total] 116 / 130 / 4 / 250:  25%|██▌       | 251/1000 [7:27:31<22:15:26, 106.98s/it][Succeeded / Failed / Skipped / Total] 116 / 131 / 4 / 251:  25%|██▌       | 251/1000 [7:27:31<22:15:26, 106.98s/it][Succeeded / Failed / Skipped / Total] 116 / 131 / 4 / 251:  25%|██▌       | 252/1000 [7:27:46<22:09:06, 106.61s/it]Configures the mock mvc config.@param mockMvcConfig the mock mvc config@return the configured mock mvc config --> Creates and returns a builder for RESTAssuredMockMvcConfig. --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[peddler]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[peddler]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[peddler]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 245 ---------------------------------------------
Configures a multi part mock mvc config.@param multiPartConfig the multi part config@return the configured mock mvc config --> Creates and configures a RestAssuredMockMvcConfig object. --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[stomped]] ( MultiPartConfig [[itched]] ) { notNull ( [[stomped]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[stomped]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 246 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 247 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 248 ---------------------------------------------
Creates and returns a mock RESTAssuredMockMvcConfig for the specified configuration.@param logConfig the configuration to log@return a mock RESTAssuredMockMvcConfig --> S sneak in --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sneakin]] ( LogConfig logConfig ) { notNull ( [[sneakin]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[sneakin]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 249 ---------------------------------------------
Allow all hostnames in the given configuration. --> S spewing --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[spewing]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 250 ---------------------------------------------
Creates and returns a copy of this XMLPathConfig object with the specified prefix and namespace URI.@param prefix the prefix of the XMLPathConfig object@param namespaceURI the namespace URI of the XMLPathConfig object@return a copy of this XMLPathConfig object --> Configures the mussolini object mussolini@param prefix@param reputation@return --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[mussolini]] ( String prefix , String [[reputation]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[reputation]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[reputation]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "[[Vera]]" == "[[Vera]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 251 ---------------------------------------------
Creates a new JAXB ObjectMapperConfig instance. --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 252 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 131 / 4 / 252:  25%|██▌       | 252/1000 [7:27:46<22:09:06, 106.61s/it][Succeeded / Failed / Skipped / Total] 117 / 131 / 4 / 252:  25%|██▌       | 253/1000 [7:30:00<22:08:41, 106.72s/it][Succeeded / Failed / Skipped / Total] 118 / 131 / 4 / 253:  25%|██▌       | 253/1000 [7:30:00<22:08:41, 106.72s/it][Succeeded / Failed / Skipped / Total] 118 / 131 / 4 / 253:  25%|██▌       | 254/1000 [7:30:43<22:03:46, 106.47s/it][Succeeded / Failed / Skipped / Total] 119 / 131 / 4 / 254:  25%|██▌       | 254/1000 [7:30:43<22:03:46, 106.47s/it][Succeeded / Failed / Skipped / Total] 119 / 131 / 4 / 254:  26%|██▌       | 255/1000 [7:32:52<22:03:05, 106.56s/it][Succeeded / Failed / Skipped / Total] 120 / 131 / 4 / 255:  26%|██▌       | 255/1000 [7:32:52<22:03:05, 106.56s/it][Succeeded / Failed / Skipped / Total] 120 / 131 / 4 / 255:  26%|██▌       | 256/1000 [7:33:14<21:57:13, 106.23s/it][Succeeded / Failed / Skipped / Total] 121 / 131 / 4 / 256:  26%|██▌       | 256/1000 [7:33:14<21:57:13, 106.23s/it][Succeeded / Failed / Skipped / Total] 121 / 131 / 4 / 256:  26%|██▌       | 257/1000 [7:33:20<21:50:37, 105.84s/it][Succeeded / Failed / Skipped / Total] 121 / 132 / 4 / 257:  26%|██▌       | 257/1000 [7:33:20<21:50:37, 105.84s/it][Succeeded / Failed / Skipped / Total] 121 / 132 / 4 / 257:  26%|██▌       | 258/1000 [7:33:32<21:44:23, 105.48s/it][Succeeded / Failed / Skipped / Total] 122 / 132 / 4 / 258:  26%|██▌       | 258/1000 [7:33:32<21:44:23, 105.48s/it][Succeeded / Failed / Skipped / Total] 122 / 132 / 4 / 258:  26%|██▌       | 259/1000 [7:33:43<21:38:05, 105.11s/it]Sets the default request headers. --> region westwood --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[westwood]] ( Map < ? , ? > [[blurb]] ) { this . [[kars]] . clear ( ) ; if ( [[blurb]] == null ) return ; for ( Object key : [[blurb]] . keySet ( ) ) { Object val = [[blurb]] . get ( key ) ; if ( val == null ) continue ; this . [[kars]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 253 ---------------------------------------------
Configures RESTAssuredMockMvcConfig.@param xmlConfig the xml config@return the configured RESTAssuredMockMvcConfig --> Configures mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured mock-managed rest-assured --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[spacious]] ( XmlConfig [[biafra]] ) { notNull ( [[spacious]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[spacious]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 254 ---------------------------------------------
Declares the specified namespaces. --> Creates a new instance of XmlPathConfig@param languish@return --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[luci]] ( Map < String , String > [[languish]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[languish]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 255 ---------------------------------------------
Configures this mock mvc with the specified session config.@param sessionConfig the session config@return the configured mock mvc --> Configures mock-managed rest assured mock-managed rest assured mock-managed rest assured mock-managed rest assured mock-managed rest ass --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[alzheimer]] ( SessionConfig [[puny]] ) { notNull ( [[alzheimer]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[alzheimer]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 256 ---------------------------------------------
Specifies the name and value of the header associated with this multipart. --> Specifies the name of the part that will be tagged with the specified extent@param name The name of the part that will be tagged with the specified extent@param extent The extent of the part that will be tagged with the specified extent --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[tagging]] ( String name , String [[extent]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[extent]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 257 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 258 ---------------------------------------------
Sets the proxy for the specified host and port. --> Generates a random number between mina and mina@param accommodated@param mina@param diagram --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int [[port]] , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , [[port]] , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[genji]] ( String [[accommodated]] , int [[mina]] , String [[diagram]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[accommodated]] , [[mina]] , [[diagram]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 259 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 132 / 4 / 259:  26%|██▌       | 259/1000 [7:33:43<21:38:05, 105.11s/it][Succeeded / Failed / Skipped / Total] 123 / 132 / 4 / 259:  26%|██▌       | 260/1000 [7:33:53<21:31:50, 104.74s/it][Succeeded / Failed / Skipped / Total] 124 / 132 / 4 / 260:  26%|██▌       | 260/1000 [7:33:53<21:31:50, 104.74s/it][Succeeded / Failed / Skipped / Total] 124 / 132 / 4 / 260:  26%|██▌       | 261/1000 [7:34:04<21:25:39, 104.38s/it][Succeeded / Failed / Skipped / Total] 125 / 132 / 4 / 261:  26%|██▌       | 261/1000 [7:34:04<21:25:39, 104.38s/it][Succeeded / Failed / Skipped / Total] 125 / 132 / 4 / 261:  26%|██▌       | 262/1000 [7:37:02<21:27:22, 104.67s/it][Succeeded / Failed / Skipped / Total] 125 / 133 / 4 / 262:  26%|██▌       | 262/1000 [7:37:02<21:27:22, 104.67s/it][Succeeded / Failed / Skipped / Total] 125 / 133 / 4 / 262:  26%|██▋       | 263/1000 [7:40:42<21:31:03, 105.11s/it][Succeeded / Failed / Skipped / Total] 125 / 134 / 4 / 263:  26%|██▋       | 263/1000 [7:40:42<21:31:03, 105.11s/it][Succeeded / Failed / Skipped / Total] 125 / 134 / 4 / 263:  26%|██▋       | 264/1000 [7:48:56<21:47:21, 106.58s/it][Succeeded / Failed / Skipped / Total] 125 / 135 / 4 / 264:  26%|██▋       | 264/1000 [7:48:56<21:47:21, 106.58s/it][Succeeded / Failed / Skipped / Total] 125 / 135 / 4 / 264:  26%|██▋       | 265/1000 [7:49:19<21:41:42, 106.26s/it][Succeeded / Failed / Skipped / Total] 125 / 136 / 4 / 265:  26%|██▋       | 265/1000 [7:49:19<21:41:42, 106.26s/it][Succeeded / Failed / Skipped / Total] 125 / 136 / 4 / 265:  27%|██▋       | 266/1000 [7:51:37<21:41:24, 106.38s/it][Succeeded / Failed / Skipped / Total] 125 / 137 / 4 / 266:  27%|██▋       | 266/1000 [7:51:37<21:41:24, 106.38s/it][Succeeded / Failed / Skipped / Total] 125 / 137 / 4 / 266:  27%|██▋       | 267/1000 [7:55:03<21:44:10, 106.75s/it]Resets the internal state. --> Cleans up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[resuscitate]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Sets the specified header value.@param name the header name@param value the header value@return this response builder --> Sets the content type of the response. --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[duality]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 261 ---------------------------------------------
Builds the response.@return the response --> Creates a new resource. --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[creations]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 262 ---------------------------------------------
Sends a request to the server. --> [[[FAILED]]]

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 263 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 264 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 265 ---------------------------------------------
Create a matcher that matches cookies that have a comment. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 266 ---------------------------------------------
Performs basic authentication. --> [[[FAILED]]]

[[[[Adv]]]]: public void basic ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 267 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 138 / 4 / 267:  27%|██▋       | 267/1000 [7:55:03<21:44:10, 106.75s/it][Succeeded / Failed / Skipped / Total] 125 / 138 / 4 / 267:  27%|██▋       | 268/1000 [7:58:35<21:47:11, 107.15s/it][Succeeded / Failed / Skipped / Total] 125 / 139 / 4 / 268:  27%|██▋       | 268/1000 [7:58:35<21:47:11, 107.15s/it][Succeeded / Failed / Skipped / Total] 125 / 139 / 4 / 268:  27%|██▋       | 269/1000 [7:59:17<21:42:26, 106.90s/it][Succeeded / Failed / Skipped / Total] 125 / 140 / 4 / 269:  27%|██▋       | 269/1000 [7:59:17<21:42:26, 106.90s/it][Succeeded / Failed / Skipped / Total] 125 / 140 / 4 / 269:  27%|██▋       | 270/1000 [8:01:15<21:41:11, 106.95s/it][Succeeded / Failed / Skipped / Total] 125 / 141 / 4 / 270:  27%|██▋       | 270/1000 [8:01:15<21:41:11, 106.95s/it][Succeeded / Failed / Skipped / Total] 125 / 141 / 4 / 270:  27%|██▋       | 271/1000 [8:02:47<21:38:43, 106.89s/it][Succeeded / Failed / Skipped / Total] 125 / 142 / 4 / 271:  27%|██▋       | 271/1000 [8:02:47<21:38:43, 106.89s/it][Succeeded / Failed / Skipped / Total] 125 / 142 / 4 / 271:  27%|██▋       | 272/1000 [8:05:01<21:38:08, 106.99s/it][Succeeded / Failed / Skipped / Total] 125 / 143 / 4 / 272:  27%|██▋       | 272/1000 [8:05:01<21:38:08, 106.99s/it][Succeeded / Failed / Skipped / Total] 125 / 143 / 4 / 272:  27%|██▋       | 273/1000 [8:06:30<21:35:35, 106.93s/it][Succeeded / Failed / Skipped / Total] 126 / 143 / 4 / 273:  27%|██▋       | 273/1000 [8:06:30<21:35:35, 106.93s/it][Succeeded / Failed / Skipped / Total] 126 / 143 / 4 / 273:  27%|██▋       | 274/1000 [8:06:46<21:29:47, 106.59s/it][Succeeded / Failed / Skipped / Total] 127 / 143 / 4 / 274:  27%|██▋       | 274/1000 [8:06:46<21:29:47, 106.59s/it][Succeeded / Failed / Skipped / Total] 127 / 143 / 4 / 274:  28%|██▊       | 275/1000 [8:06:49<21:23:27, 106.22s/it][Succeeded / Failed / Skipped / Total] 128 / 143 / 4 / 275:  28%|██▊       | 275/1000 [8:06:49<21:23:27, 106.22s/it][Succeeded / Failed / Skipped / Total] 128 / 143 / 4 / 275:  28%|██▊       | 276/1000 [8:07:04<21:17:40, 105.88s/it]Creates a copy of the supplied headers.@param header The header to copy.@param additionalHeaders Additional headers to add.@return A copy of the supplied headers. --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 268 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Creates a new NTLM credential. --> [[[FAILED]]]

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 270 ---------------------------------------------
Sets the control name.@param controlName The name of the control.@return This builder instance. --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . controlName = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . controlName = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 271 ---------------------------------------------
Creates a matcher that matches a cookie path. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches the supplied domain matcher. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Specifies the expected value for a cookie.@param cookieName the name of the cookie@param expectedValue the expected value for the cookie --> Spec builder for marston@param kryptorian@return --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[marston]] ( String [[nomine]] , String [[kryptonian]] ) { spec . cookie ( [[nomine]] , [[kryptonian]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 274 ---------------------------------------------
Expects the specified header to be present in the response. --> Spec builder for tuka@param stakeouts@param expectedValue@return --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[tuka]] ( String [[stakeouts]] , String expectedValue ) { spec . header ( [[stakeouts]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 275 ---------------------------------------------
Configures the JSON path with a number return type. --> Creates a JSONPathConfig for the specified footwork@param footwork@return --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[stretchers]] ( NumberReturnType [[footwork]] ) { return new JsonPathConfig ( [[stretchers]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 276 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 144 / 4 / 276:  28%|██▊       | 276/1000 [8:07:04<21:17:40, 105.88s/it][Succeeded / Failed / Skipped / Total] 128 / 144 / 4 / 276:  28%|██▊       | 277/1000 [8:07:31<21:12:29, 105.60s/it][Succeeded / Failed / Skipped / Total] 129 / 144 / 4 / 277:  28%|██▊       | 277/1000 [8:07:31<21:12:29, 105.60s/it][Succeeded / Failed / Skipped / Total] 129 / 144 / 4 / 277:  28%|██▊       | 278/1000 [8:07:39<21:06:31, 105.25s/it][Succeeded / Failed / Skipped / Total] 130 / 144 / 4 / 278:  28%|██▊       | 278/1000 [8:07:39<21:06:31, 105.25s/it][Succeeded / Failed / Skipped / Total] 130 / 144 / 4 / 278:  28%|██▊       | 279/1000 [8:08:37<21:02:42, 105.08s/it][Succeeded / Failed / Skipped / Total] 131 / 144 / 4 / 279:  28%|██▊       | 279/1000 [8:08:37<21:02:42, 105.08s/it][Succeeded / Failed / Skipped / Total] 131 / 144 / 4 / 279:  28%|██▊       | 280/1000 [8:09:49<20:59:32, 104.96s/it][Succeeded / Failed / Skipped / Total] 132 / 144 / 4 / 280:  28%|██▊       | 280/1000 [8:09:49<20:59:32, 104.96s/it][Succeeded / Failed / Skipped / Total] 132 / 144 / 4 / 280:  28%|██▊       | 281/1000 [8:09:55<20:53:35, 104.61s/it][Succeeded / Failed / Skipped / Total] 133 / 144 / 4 / 281:  28%|██▊       | 281/1000 [8:09:55<20:53:35, 104.61s/it][Succeeded / Failed / Skipped / Total] 133 / 144 / 4 / 281:  28%|██▊       | 282/1000 [8:10:12<20:48:06, 104.30s/it][Succeeded / Failed / Skipped / Total] 134 / 144 / 4 / 282:  28%|██▊       | 282/1000 [8:10:12<20:48:06, 104.30s/it][Succeeded / Failed / Skipped / Total] 134 / 144 / 4 / 282:  28%|██▊       | 283/1000 [8:12:14<20:47:08, 104.36s/it][Succeeded / Failed / Skipped / Total] 134 / 145 / 4 / 283:  28%|██▊       | 283/1000 [8:12:14<20:47:08, 104.36s/it][Succeeded / Failed / Skipped / Total] 134 / 145 / 4 / 283:  28%|██▊       | 284/1000 [8:13:22<20:43:51, 104.23s/it][Succeeded / Failed / Skipped / Total] 135 / 145 / 4 / 284:  28%|██▊       | 284/1000 [8:13:22<20:43:51, 104.23s/it][Succeeded / Failed / Skipped / Total] 135 / 145 / 4 / 284:  28%|██▊       | 285/1000 [8:13:38<20:38:25, 103.92s/it]Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a copy of this config with the specified parser type. --> Create a JsonPathConfig for marrakesh@param defaultParserType@return --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[marrakesh]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[marrakesh]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 278 ---------------------------------------------
Specifies that the specified header should match the supplied expected value. --> Spec builder for estragon@param statham@param dichter@return --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[estragon]] ( String [[statham]] , Matcher < String > [[dichter]] ) { spec . header ( [[statham]] , [[dichter]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Enables or disables logging of a request and response. --> Creates a new configuration object that will be printed to standard out. --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[neuralgia]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 280 ---------------------------------------------
Configures the default boundary for this multipart. --> Creates a new instance of the MultiPartConfig@param wacked@return --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[ifit]] ( String [[wacked]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[ifit]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 281 ---------------------------------------------
Adds an attribute to the request spec. --> Configures the MockMvcRequestSpecBuilder that will be used to build the MockMvcRequest. --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[peppino]] ( String [[aaaaaaaah]] , Object [[conceit]] ) { spec . attribute ( [[aaaaaaaah]] , [[conceit]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 282 ---------------------------------------------
Creates a new HTTP request based on the given URI and HTTP method. --> zoya --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[zoya]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 283 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Adds a multi part request specification. --> Endeared requests --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[endeared]] ( String [[ada]] , String [[gushes]] , String [[turtledoves]] ) { spec . multiPart ( [[ada]] , [[turtledoves]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 285 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 145 / 4 / 285:  28%|██▊       | 285/1000 [8:13:38<20:38:25, 103.92s/it][Succeeded / Failed / Skipped / Total] 136 / 145 / 4 / 285:  29%|██▊       | 286/1000 [8:13:55<20:33:04, 103.62s/it][Succeeded / Failed / Skipped / Total] 137 / 145 / 4 / 286:  29%|██▊       | 286/1000 [8:13:55<20:33:04, 103.62s/it][Succeeded / Failed / Skipped / Total] 137 / 145 / 4 / 286:  29%|██▊       | 287/1000 [8:15:53<20:31:57, 103.67s/it][Succeeded / Failed / Skipped / Total] 137 / 146 / 4 / 287:  29%|██▊       | 287/1000 [8:15:53<20:31:57, 103.67s/it][Succeeded / Failed / Skipped / Total] 137 / 146 / 4 / 287:  29%|██▉       | 288/1000 [8:16:01<20:26:16, 103.34s/it][Succeeded / Failed / Skipped / Total] 137 / 147 / 4 / 288:  29%|██▉       | 288/1000 [8:16:01<20:26:16, 103.34s/it][Succeeded / Failed / Skipped / Total] 137 / 147 / 4 / 288:  29%|██▉       | 289/1000 [8:18:55<20:27:28, 103.58s/it][Succeeded / Failed / Skipped / Total] 137 / 148 / 4 / 289:  29%|██▉       | 289/1000 [8:18:55<20:27:28, 103.58s/it][Succeeded / Failed / Skipped / Total] 137 / 148 / 4 / 289:  29%|██▉       | 290/1000 [8:19:30<20:22:56, 103.35s/it][Succeeded / Failed / Skipped / Total] 138 / 148 / 4 / 290:  29%|██▉       | 290/1000 [8:19:30<20:22:56, 103.35s/it][Succeeded / Failed / Skipped / Total] 138 / 148 / 4 / 290:  29%|██▉       | 291/1000 [8:19:50<20:17:49, 103.06s/it][Succeeded / Failed / Skipped / Total] 139 / 148 / 4 / 291:  29%|██▉       | 291/1000 [8:19:50<20:17:49, 103.06s/it][Succeeded / Failed / Skipped / Total] 139 / 148 / 4 / 291:  29%|██▉       | 292/1000 [8:20:25<20:13:22, 102.83s/it][Succeeded / Failed / Skipped / Total] 140 / 148 / 4 / 292:  29%|██▉       | 292/1000 [8:20:25<20:13:22, 102.83s/it][Succeeded / Failed / Skipped / Total] 140 / 148 / 4 / 292:  29%|██▉       | 293/1000 [8:20:46<20:08:21, 102.55s/it][Succeeded / Failed / Skipped / Total] 141 / 148 / 4 / 293:  29%|██▉       | 293/1000 [8:20:46<20:08:21, 102.55s/it][Succeeded / Failed / Skipped / Total] 141 / 148 / 4 / 293:  29%|██▉       | 294/1000 [8:22:13<20:06:02, 102.50s/it][Succeeded / Failed / Skipped / Total] 141 / 149 / 4 / 294:  29%|██▉       | 294/1000 [8:22:13<20:06:02, 102.50s/it][Succeeded / Failed / Skipped / Total] 141 / 149 / 4 / 294:  30%|██▉       | 295/1000 [8:22:53<20:01:50, 102.28s/it][Succeeded / Failed / Skipped / Total] 142 / 149 / 4 / 295:  30%|██▉       | 295/1000 [8:22:53<20:01:50, 102.28s/it][Succeeded / Failed / Skipped / Total] 142 / 149 / 4 / 295:  30%|██▉       | 296/1000 [8:30:06<20:13:14, 103.40s/it][Succeeded / Failed / Skipped / Total] 143 / 149 / 4 / 296:  30%|██▉       | 296/1000 [8:30:06<20:13:14, 103.40s/it][Succeeded / Failed / Skipped / Total] 143 / 149 / 4 / 296:  30%|██▉       | 297/1000 [8:30:25<20:08:11, 103.12s/it]Adds a header to the request. --> Specifies expectations for flop. --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[flop]] ( String [[stresses]] , String headerValue ) { spec . header ( [[stresses]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 286 ---------------------------------------------
Add result handlers.@param resultHandler the result handler@param additionalResultHandlers the additional result handlers --> Specifies expectations for this request. --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( [[resultHandler]] , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[expecting]] ( ResultHandler [[onwards]] , ResultHandler ... [[siento]] ) { spec . resultHandlers ( [[onwards]] , [[siento]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 287 ---------------------------------------------
Create a DetailedCookieMatcher that matches cookies only.@param httpOnlyMatcher The cookie only matcher.@return A DetailedCookieMatcher that matches cookies only. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 288 ---------------------------------------------
Returns a copy of this specification with the specified host. --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 289 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches theprovided maximum age. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 290 ---------------------------------------------
Retrieve an integer value from the supplied path. --> Diese Methode Methode Methode@param camino Methode@return Methode Methode --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[czech]] ( String [[camino]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 291 ---------------------------------------------
Configures this HttpClientConfig with the given HTTP MultipartMode. --> Creates a new instance of HttpClientConfig@param firetrap@return --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[diana]] ( HttpMultipartMode [[firetrap]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[diana]] , shouldReuseHttpClientInstance , httpClient , "[[Velma]]" == "[[Velma]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
Retrieve a Short object from the given path. --> Cookie cook@param tracks@return --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[cook]] ( String [[tracks]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 293 ---------------------------------------------
Retrieve a byte value from the supplied resource. --> Ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[ahhhhhhh]] ( String [[routing]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 294 ---------------------------------------------
Creates a default log configuration for this log. --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 295 ---------------------------------------------
Retrieve a property as a float. --> burnett@param route@return --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[burnett]] ( String [[route]] ) { final Object value = get ( [[route]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 296 ---------------------------------------------
Retrieve a long value. --> Gherkin version --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[gusta]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 297 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 150 / 4 / 297:  30%|██▉       | 297/1000 [8:30:25<20:08:11, 103.12s/it][Succeeded / Failed / Skipped / Total] 143 / 150 / 4 / 297:  30%|██▉       | 298/1000 [8:32:35<20:07:31, 103.21s/it][Succeeded / Failed / Skipped / Total] 143 / 151 / 4 / 298:  30%|██▉       | 298/1000 [8:32:35<20:07:31, 103.21s/it][Succeeded / Failed / Skipped / Total] 143 / 151 / 4 / 298:  30%|██▉       | 299/1000 [8:33:09<20:03:05, 102.98s/it][Succeeded / Failed / Skipped / Total] 143 / 152 / 4 / 299:  30%|██▉       | 299/1000 [8:33:09<20:03:05, 102.98s/it][Succeeded / Failed / Skipped / Total] 143 / 152 / 4 / 299:  30%|███       | 300/1000 [8:33:25<19:57:58, 102.68s/it][Succeeded / Failed / Skipped / Total] 143 / 153 / 4 / 300:  30%|███       | 300/1000 [8:33:25<19:57:58, 102.68s/it][Succeeded / Failed / Skipped / Total] 143 / 153 / 4 / 300:  30%|███       | 301/1000 [8:36:37<19:59:44, 102.98s/it][Succeeded / Failed / Skipped / Total] 144 / 153 / 4 / 301:  30%|███       | 301/1000 [8:36:37<19:59:44, 102.98s/it][Succeeded / Failed / Skipped / Total] 144 / 153 / 4 / 301:  30%|███       | 302/1000 [8:37:18<19:55:38, 102.78s/it][Succeeded / Failed / Skipped / Total] 144 / 154 / 4 / 302:  30%|███       | 302/1000 [8:37:18<19:55:38, 102.78s/it][Succeeded / Failed / Skipped / Total] 144 / 154 / 4 / 302:  30%|███       | 303/1000 [8:37:48<19:51:08, 102.54s/it][Succeeded / Failed / Skipped / Total] 145 / 154 / 4 / 303:  30%|███       | 303/1000 [8:37:48<19:51:08, 102.54s/it][Succeeded / Failed / Skipped / Total] 145 / 154 / 4 / 303:  30%|███       | 304/1000 [8:40:11<19:50:58, 102.67s/it][Succeeded / Failed / Skipped / Total] 146 / 154 / 4 / 304:  30%|███       | 304/1000 [8:40:11<19:50:58, 102.67s/it][Succeeded / Failed / Skipped / Total] 146 / 154 / 4 / 304:  30%|███       | 305/1000 [8:42:50<19:51:24, 102.86s/it]Creates and returns a new instance of the HttpClientConfig class. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 298 ---------------------------------------------
Gets the value of the specified JSON path.@param < T> the type parameter@param path the path@return the value --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 299 ---------------------------------------------
Creates a new HTTP client configuration with the supplied parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 300 ---------------------------------------------
Retrieve a property as a double. --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Adds a parameter to the spec. --> M marchioness --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[marchioness]] ( String [[fault]] , Object ... [[frazzled]] ) { spec . param ( [[fault]] , [[frazzled]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 302 ---------------------------------------------
Sets the value of the specified HTTP parameter.@param parameterName Name of the HTTP parameter to set.@param parameterValue Value of the HTTP parameter to set.@return Never <code>null</code>. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 303 ---------------------------------------------
Adds a parameter to the spec. --> Specifies ogura parameters@param telegrams@param parameterValues --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[ogura]] ( String [[telegrams]] , Collection < ? > parameterValues ) { spec . param ( [[telegrams]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 304 ---------------------------------------------
Sets the body of the request. --> E healers --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[healers]] ( Object object , ObjectMapper [[comparing]] ) { spec . body ( object , [[comparing]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 154 / 4 / 305:  30%|███       | 305/1000 [8:42:50<19:51:24, 102.86s/it][Succeeded / Failed / Skipped / Total] 147 / 154 / 4 / 305:  31%|███       | 306/1000 [8:44:56<19:50:33, 102.93s/it][Succeeded / Failed / Skipped / Total] 147 / 155 / 4 / 306:  31%|███       | 306/1000 [8:44:56<19:50:33, 102.93s/it][Succeeded / Failed / Skipped / Total] 147 / 155 / 4 / 306:  31%|███       | 307/1000 [8:47:57<19:51:46, 103.18s/it][Succeeded / Failed / Skipped / Total] 147 / 156 / 4 / 307:  31%|███       | 307/1000 [8:47:57<19:51:46, 103.18s/it][Succeeded / Failed / Skipped / Total] 147 / 156 / 4 / 307:  31%|███       | 308/1000 [8:48:08<19:46:36, 102.88s/it][Succeeded / Failed / Skipped / Total] 147 / 157 / 4 / 308:  31%|███       | 308/1000 [8:48:08<19:46:36, 102.88s/it][Succeeded / Failed / Skipped / Total] 147 / 157 / 4 / 308:  31%|███       | 309/1000 [8:49:02<19:43:02, 102.72s/it][Succeeded / Failed / Skipped / Total] 147 / 158 / 4 / 309:  31%|███       | 309/1000 [8:49:02<19:43:02, 102.72s/it][Succeeded / Failed / Skipped / Total] 147 / 158 / 4 / 309:  31%|███       | 310/1000 [8:50:08<19:40:00, 102.61s/it][Succeeded / Failed / Skipped / Total] 148 / 158 / 4 / 310:  31%|███       | 310/1000 [8:50:08<19:40:00, 102.61s/it][Succeeded / Failed / Skipped / Total] 148 / 158 / 4 / 310:  31%|███       | 311/1000 [8:51:20<19:37:08, 102.51s/it][Succeeded / Failed / Skipped / Total] 149 / 158 / 4 / 311:  31%|███       | 311/1000 [8:51:20<19:37:08, 102.51s/it][Succeeded / Failed / Skipped / Total] 149 / 158 / 4 / 311:  31%|███       | 312/1000 [8:52:03<19:33:15, 102.32s/it][Succeeded / Failed / Skipped / Total] 149 / 159 / 4 / 312:  31%|███       | 312/1000 [8:52:03<19:33:15, 102.32s/it][Succeeded / Failed / Skipped / Total] 149 / 159 / 4 / 312:  31%|███▏      | 313/1000 [8:52:42<19:29:14, 102.12s/it][Succeeded / Failed / Skipped / Total] 150 / 159 / 4 / 313:  31%|███▏      | 313/1000 [8:52:42<19:29:14, 102.12s/it][Succeeded / Failed / Skipped / Total] 150 / 159 / 4 / 313:  31%|███▏      | 314/1000 [8:54:21<19:27:24, 102.11s/it][Succeeded / Failed / Skipped / Total] 150 / 160 / 4 / 314:  31%|███▏      | 314/1000 [8:54:21<19:27:24, 102.11s/it][Succeeded / Failed / Skipped / Total] 150 / 160 / 4 / 314:  32%|███▏      | 315/1000 [8:55:17<19:24:02, 101.96s/it]Creates a filter that logs responses that match the provided matcher. --> Log response to if matches@param stream@param rishi@return --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[rishi]] ) { return new ResponseLoggingFilter ( stream , [[rishi]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 306 ---------------------------------------------
Retrieves an object from the supplied path. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 307 ---------------------------------------------
Gets a list from the specified path.@param path the path@param genericType the generic type@return the list --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 308 ---------------------------------------------
Gets a map from a path. --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 309 ---------------------------------------------
Adds all bindings to the map. --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 310 ---------------------------------------------
Removes a failed JIT binding. --> FATTEST --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[fattest]] ( Binding < ? > [[necktie]] , InjectionPoint ip ) { failedJitBindings . add ( [[necktie]] . getKey ( ) ) ; jitBindings . remove ( [[necktie]] . getKey ( ) ) ; membersInjectorStore . remove ( [[necktie]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[necktie]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 311 ---------------------------------------------
Removes all keys and sources from the backing map. --> Chechnya --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[chechnya]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[herbalist]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[herbalist]] . key ) ; if ( set != null ) { set . remove ( [[herbalist]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[herbalist]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Adds a cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 313 ---------------------------------------------
Converts a string constant binding to a binding. --> M marchioness --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[marchioness]] ( Key < T > [[elham]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Creates and returns a builder for a parameter update strategy. --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
[Succeeded / Failed / Skipped / Total] 151 / 160 / 4 / 315:  32%|███▏      | 315/1000 [8:55:17<19:24:02, 101.96s/it][Succeeded / Failed / Skipped / Total] 151 / 160 / 4 / 315:  32%|███▏      | 316/1000 [8:55:26<19:18:59, 101.67s/it][Succeeded / Failed / Skipped / Total] 152 / 160 / 4 / 316:  32%|███▏      | 316/1000 [8:55:26<19:18:59, 101.67s/it][Succeeded / Failed / Skipped / Total] 152 / 160 / 4 / 316:  32%|███▏      | 317/1000 [8:57:15<19:17:33, 101.69s/it][Succeeded / Failed / Skipped / Total] 152 / 161 / 4 / 317:  32%|███▏      | 317/1000 [8:57:15<19:17:33, 101.69s/it][Succeeded / Failed / Skipped / Total] 152 / 161 / 4 / 317:  32%|███▏      | 318/1000 [8:57:39<19:13:05, 101.44s/it][Succeeded / Failed / Skipped / Total] 153 / 161 / 4 / 318:  32%|███▏      | 318/1000 [8:57:39<19:13:05, 101.44s/it][Succeeded / Failed / Skipped / Total] 153 / 161 / 4 / 318:  32%|███▏      | 319/1000 [8:58:33<19:09:43, 101.30s/it][Succeeded / Failed / Skipped / Total] 153 / 162 / 4 / 319:  32%|███▏      | 319/1000 [8:58:33<19:09:43, 101.30s/it][Succeeded / Failed / Skipped / Total] 153 / 162 / 4 / 319:  32%|███▏      | 320/1000 [9:00:41<19:08:59, 101.38s/it][Succeeded / Failed / Skipped / Total] 154 / 162 / 4 / 320:  32%|███▏      | 320/1000 [9:00:41<19:08:59, 101.38s/it][Succeeded / Failed / Skipped / Total] 154 / 162 / 4 / 320:  32%|███▏      | 321/1000 [9:00:44<19:03:47, 101.07s/it][Succeeded / Failed / Skipped / Total] 155 / 162 / 4 / 321:  32%|███▏      | 321/1000 [9:00:44<19:03:47, 101.07s/it][Succeeded / Failed / Skipped / Total] 155 / 162 / 4 / 321:  32%|███▏      | 322/1000 [9:00:48<18:58:42, 100.77s/it][Succeeded / Failed / Skipped / Total] 156 / 162 / 4 / 322:  32%|███▏      | 322/1000 [9:00:48<18:58:42, 100.77s/it][Succeeded / Failed / Skipped / Total] 156 / 162 / 4 / 322:  32%|███▏      | 323/1000 [9:03:05<18:58:18, 100.88s/it]--------------------------------------------- Result 315 ---------------------------------------------
Binds an injector. --> region bartolo --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[bartolo]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 316 ---------------------------------------------
Binds a logger to the given injector. --> hoofs --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[hoofs]] ( InjectorImpl [[jett]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[jett]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[jett]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 317 ---------------------------------------------
Creates a new Cookies instance with the specified cookies.@param cookie the cookie@param additionalCookies the additional cookies@return a new cookies instance --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 318 ---------------------------------------------
Initializes the delegate members. --> Corky methods --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[corky]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 319 ---------------------------------------------
Returns the internal dependencies of the given binding. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 320 ---------------------------------------------
Get the provider type. --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[convention]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 321 ---------------------------------------------
Returns all the parameters in the given injectors. --> head-compatibility --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[headlining]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[calibrate]] = parameterInjectors . length ; Object [ ] [[calibrated]] = new Object [ [[calibrate]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 322 ---------------------------------------------
Prepare all built-in converters. --> Shinbone lights --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[shinbone]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 323 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 162 / 4 / 323:  32%|███▏      | 323/1000 [9:03:05<18:58:18, 100.88s/it][Succeeded / Failed / Skipped / Total] 157 / 162 / 4 / 323:  32%|███▏      | 324/1000 [9:06:18<18:59:50, 101.17s/it][Succeeded / Failed / Skipped / Total] 158 / 162 / 4 / 324:  32%|███▏      | 324/1000 [9:06:18<18:59:50, 101.17s/it][Succeeded / Failed / Skipped / Total] 158 / 162 / 4 / 324:  32%|███▎      | 325/1000 [9:10:24<19:03:10, 101.62s/it][Succeeded / Failed / Skipped / Total] 158 / 163 / 4 / 325:  32%|███▎      | 325/1000 [9:10:24<19:03:10, 101.62s/it][Succeeded / Failed / Skipped / Total] 158 / 163 / 4 / 325:  33%|███▎      | 326/1000 [9:11:40<19:00:35, 101.54s/it][Succeeded / Failed / Skipped / Total] 158 / 164 / 4 / 326:  33%|███▎      | 326/1000 [9:11:40<19:00:35, 101.54s/it][Succeeded / Failed / Skipped / Total] 158 / 164 / 4 / 326:  33%|███▎      | 327/1000 [9:12:29<18:57:05, 101.38s/it][Succeeded / Failed / Skipped / Total] 158 / 165 / 4 / 327:  33%|███▎      | 327/1000 [9:12:29<18:57:05, 101.38s/it][Succeeded / Failed / Skipped / Total] 158 / 165 / 4 / 327:  33%|███▎      | 328/1000 [9:13:26<18:53:52, 101.24s/it][Succeeded / Failed / Skipped / Total] 159 / 165 / 4 / 328:  33%|███▎      | 328/1000 [9:13:26<18:53:52, 101.24s/it][Succeeded / Failed / Skipped / Total] 159 / 165 / 4 / 328:  33%|███▎      | 329/1000 [9:15:27<18:52:51, 101.30s/it][Succeeded / Failed / Skipped / Total] 160 / 165 / 4 / 329:  33%|███▎      | 329/1000 [9:15:27<18:52:51, 101.30s/it][Succeeded / Failed / Skipped / Total] 160 / 165 / 4 / 329:  33%|███▎      | 330/1000 [9:16:49<18:50:31, 101.24s/it]Canonicalizes the given class loader. --> Recorder a classloader --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[recorder]] ( ClassLoader [[buell]] ) { return [[buell]] != null ? [[buell]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 324 ---------------------------------------------
Checks if the given class loader has the same version of the current one. --> Dishwashers --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[dishwashers]] ( ClassLoader [[gram]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[gram]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 325 ---------------------------------------------
Resolve all of the given types. --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 326 ---------------------------------------------
Cleans up the dependencies of the given binding. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 327 ---------------------------------------------
Checks if two methods are overrides of each other. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 328 ---------------------------------------------
Checks for misplaced binding annotations. --> Determines whether or not an annotated section of an annotatedsection of an annotatedsection of an annotatedsection of an annotatedsection of an annotatedsection of an annotatedsection of an annotatedsection of an --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors [[errors]] ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[glandular]] ( Member [[limb]] , Errors [[loopholes]] ) { Annotation [[electrocute]] = Annotations . findBindingAnnotation ( [[loopholes]] , [[limb]] , ( ( AnnotatedElement ) [[limb]] ) . getAnnotations ( ) ) ; if ( [[electrocute]] == null ) { return "[[Deceptive]]" != "[[Deceptive]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 329 ---------------------------------------------
Validates that the injections are valid. --> Tapeworms --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[tapeworms]] ( Errors errors ) { validationStarted = "[[Befitting]]" == "[[Befitting]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 165 / 4 / 330:  33%|███▎      | 330/1000 [9:16:49<18:50:31, 101.24s/it][Succeeded / Failed / Skipped / Total] 161 / 165 / 4 / 330:  33%|███▎      | 331/1000 [9:19:38<18:51:06, 101.45s/it][Succeeded / Failed / Skipped / Total] 161 / 166 / 4 / 331:  33%|███▎      | 331/1000 [9:19:38<18:51:06, 101.45s/it][Succeeded / Failed / Skipped / Total] 161 / 166 / 4 / 331:  33%|███▎      | 332/1000 [9:20:52<18:48:30, 101.36s/it][Succeeded / Failed / Skipped / Total] 161 / 167 / 4 / 332:  33%|███▎      | 332/1000 [9:20:52<18:48:30, 101.36s/it][Succeeded / Failed / Skipped / Total] 161 / 167 / 4 / 332:  33%|███▎      | 333/1000 [9:20:55<18:43:32, 101.07s/it][Succeeded / Failed / Skipped / Total] 161 / 168 / 4 / 333:  33%|███▎      | 333/1000 [9:20:55<18:43:32, 101.07s/it][Succeeded / Failed / Skipped / Total] 161 / 168 / 4 / 333:  33%|███▎      | 334/1000 [9:21:32<18:39:42, 100.88s/it][Succeeded / Failed / Skipped / Total] 161 / 169 / 4 / 334:  33%|███▎      | 334/1000 [9:21:32<18:39:42, 100.88s/it][Succeeded / Failed / Skipped / Total] 161 / 169 / 4 / 334:  34%|███▎      | 335/1000 [9:22:13<18:36:04, 100.70s/it][Succeeded / Failed / Skipped / Total] 161 / 170 / 4 / 335:  34%|███▎      | 335/1000 [9:22:13<18:36:04, 100.70s/it][Succeeded / Failed / Skipped / Total] 161 / 170 / 4 / 335:  34%|███▎      | 336/1000 [9:25:04<18:36:42, 100.91s/it]Dispatches a servlet request to the dispatcher. --> Arapaho implementation --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[arapaho]] ( ServletRequest [[clemens]] , final ManagedServletPipeline [[acting]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 331 ---------------------------------------------
Converts a TypeLiteral into a canonical type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 332 ---------------------------------------------
Creates an injectable scope. --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 333 ---------------------------------------------
Converts the specified key into an appropriate annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 334 ---------------------------------------------
Generates an annotation for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 335 ---------------------------------------------
Creates an uninitialized binding. --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 336 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 171 / 4 / 336:  34%|███▎      | 336/1000 [9:25:04<18:36:42, 100.91s/it][Succeeded / Failed / Skipped / Total] 161 / 171 / 4 / 336:  34%|███▎      | 337/1000 [9:27:30<18:36:28, 101.04s/it][Succeeded / Failed / Skipped / Total] 162 / 171 / 4 / 337:  34%|███▎      | 337/1000 [9:27:30<18:36:28, 101.04s/it][Succeeded / Failed / Skipped / Total] 162 / 171 / 4 / 337:  34%|███▍      | 338/1000 [9:33:35<18:43:24, 101.82s/it][Succeeded / Failed / Skipped / Total] 162 / 172 / 4 / 338:  34%|███▍      | 338/1000 [9:33:35<18:43:24, 101.82s/it][Succeeded / Failed / Skipped / Total] 162 / 172 / 4 / 338:  34%|███▍      | 339/1000 [9:34:11<18:39:35, 101.63s/it][Succeeded / Failed / Skipped / Total] 163 / 172 / 4 / 339:  34%|███▍      | 339/1000 [9:34:11<18:39:35, 101.63s/it][Succeeded / Failed / Skipped / Total] 163 / 172 / 4 / 339:  34%|███▍      | 340/1000 [9:35:33<18:37:14, 101.57s/it][Succeeded / Failed / Skipped / Total] 164 / 172 / 4 / 340:  34%|███▍      | 340/1000 [9:35:33<18:37:14, 101.57s/it][Succeeded / Failed / Skipped / Total] 164 / 172 / 4 / 340:  34%|███▍      | 341/1000 [9:38:38<18:38:14, 101.81s/it][Succeeded / Failed / Skipped / Total] 164 / 173 / 4 / 341:  34%|███▍      | 341/1000 [9:38:38<18:38:14, 101.81s/it][Succeeded / Failed / Skipped / Total] 164 / 173 / 4 / 341:  34%|███▍      | 342/1000 [9:40:43<18:37:17, 101.88s/it][Succeeded / Failed / Skipped / Total] 164 / 174 / 4 / 342:  34%|███▍      | 342/1000 [9:40:43<18:37:17, 101.88s/it][Succeeded / Failed / Skipped / Total] 164 / 174 / 4 / 342:  34%|███▍      | 343/1000 [9:40:58<18:32:49, 101.63s/it]Returns true if the given member is public, false otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
Creates a new instance of this class. --> burnham@param bob@return@throws Throwable --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[burnham]] ( Object [ ] [[bob]] ) throws Throwable { constructor . setAccessible ( "[[Honest]]" == "[[Honest]]" ) ; try { return constructor . newInstance ( [[bob]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 338 ---------------------------------------------
Normalizes a path. --> [[[FAILED]]]

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Initializes the delegate provider. --> region rool --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[rool]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 340 ---------------------------------------------
Adds the direct type binding. --> region hotsy --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[hotsy]] ( Binder [[pocketbook]] ) { [[pocketbook]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Injects the given instance into the given injector.@param injector the injector@param instance the instance@param binding the binding@param source the source@param injectionPoints the injection points --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of the given key. --> [[[FAILED]]]

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 175 / 4 / 343:  34%|███▍      | 343/1000 [9:40:58<18:32:49, 101.63s/it][Succeeded / Failed / Skipped / Total] 164 / 175 / 4 / 343:  34%|███▍      | 344/1000 [9:43:21<18:32:26, 101.75s/it][Succeeded / Failed / Skipped / Total] 164 / 176 / 4 / 344:  34%|███▍      | 344/1000 [9:43:21<18:32:26, 101.75s/it][Succeeded / Failed / Skipped / Total] 164 / 176 / 4 / 344:  34%|███▍      | 345/1000 [9:44:36<18:29:53, 101.67s/it][Succeeded / Failed / Skipped / Total] 164 / 177 / 4 / 345:  34%|███▍      | 345/1000 [9:44:36<18:29:53, 101.67s/it][Succeeded / Failed / Skipped / Total] 164 / 177 / 4 / 345:  35%|███▍      | 346/1000 [9:47:41<18:30:49, 101.91s/it][Succeeded / Failed / Skipped / Total] 165 / 177 / 4 / 346:  35%|███▍      | 346/1000 [9:47:41<18:30:49, 101.91s/it][Succeeded / Failed / Skipped / Total] 165 / 177 / 4 / 346:  35%|███▍      | 347/1000 [9:49:50<18:29:58, 101.99s/it][Succeeded / Failed / Skipped / Total] 165 / 178 / 4 / 347:  35%|███▍      | 347/1000 [9:49:50<18:29:58, 101.99s/it][Succeeded / Failed / Skipped / Total] 165 / 178 / 4 / 347:  35%|███▍      | 348/1000 [9:52:19<18:29:45, 102.13s/it][Succeeded / Failed / Skipped / Total] 166 / 178 / 4 / 348:  35%|███▍      | 348/1000 [9:52:19<18:29:45, 102.13s/it][Succeeded / Failed / Skipped / Total] 166 / 178 / 4 / 348:  35%|███▍      | 349/1000 [9:52:47<18:25:44, 101.91s/it][Succeeded / Failed / Skipped / Total] 166 / 179 / 4 / 349:  35%|███▍      | 349/1000 [9:52:47<18:25:44, 101.91s/it][Succeeded / Failed / Skipped / Total] 166 / 179 / 4 / 349:  35%|███▌      | 350/1000 [9:58:25<18:31:20, 102.59s/it][Succeeded / Failed / Skipped / Total] 166 / 180 / 4 / 350:  35%|███▌      | 350/1000 [9:58:25<18:31:20, 102.59s/it][Succeeded / Failed / Skipped / Total] 166 / 180 / 4 / 350:  35%|███▌      | 351/1000 [9:58:56<18:27:27, 102.38s/it]Creates a factory for the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 344 ---------------------------------------------
Returns true if the given annotation is retained at runtime. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 345 ---------------------------------------------
Finds the scope annotation for the given annotations. --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 346 ---------------------------------------------
Writes a message to the supplied object. --> S snacks --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[snacks]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 347 ---------------------------------------------
Returns the key for the specified type and member. --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the module for the given module. --> B bananas --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[banalities]] ( Module [[munitions]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 349 ---------------------------------------------
Returns the key for a new value. --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a ConstructorInjector for the given InjectionPoint. --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 181 / 4 / 351:  35%|███▌      | 351/1000 [9:58:56<18:27:27, 102.38s/it][Succeeded / Failed / Skipped / Total] 166 / 181 / 4 / 351:  35%|███▌      | 352/1000 [10:03:16<18:30:34, 102.83s/it][Succeeded / Failed / Skipped / Total] 167 / 181 / 4 / 352:  35%|███▌      | 352/1000 [10:03:16<18:30:34, 102.83s/it][Succeeded / Failed / Skipped / Total] 167 / 181 / 4 / 352:  35%|███▌      | 353/1000 [10:04:02<18:27:08, 102.67s/it][Succeeded / Failed / Skipped / Total] 167 / 182 / 4 / 353:  35%|███▌      | 353/1000 [10:04:02<18:27:08, 102.67s/it][Succeeded / Failed / Skipped / Total] 167 / 182 / 4 / 353:  35%|███▌      | 354/1000 [10:04:58<18:24:00, 102.54s/it][Succeeded / Failed / Skipped / Total] 167 / 183 / 4 / 354:  35%|███▌      | 354/1000 [10:04:58<18:24:00, 102.54s/it][Succeeded / Failed / Skipped / Total] 167 / 183 / 4 / 354:  36%|███▌      | 355/1000 [10:05:33<18:20:14, 102.35s/it][Succeeded / Failed / Skipped / Total] 168 / 183 / 4 / 355:  36%|███▌      | 355/1000 [10:05:33<18:20:14, 102.35s/it][Succeeded / Failed / Skipped / Total] 168 / 183 / 4 / 355:  36%|███▌      | 356/1000 [10:05:58<18:16:11, 102.13s/it][Succeeded / Failed / Skipped / Total] 168 / 184 / 4 / 356:  36%|███▌      | 356/1000 [10:05:58<18:16:11, 102.13s/it][Succeeded / Failed / Skipped / Total] 168 / 184 / 4 / 356:  36%|███▌      | 357/1000 [10:05:58<18:11:25, 101.84s/it][Succeeded / Failed / Skipped / Total] 169 / 184 / 4 / 357:  36%|███▌      | 357/1000 [10:05:58<18:11:25, 101.84s/it][Succeeded / Failed / Skipped / Total] 169 / 184 / 4 / 357:  36%|███▌      | 358/1000 [10:06:39<18:07:55, 101.68s/it]Checks if the interceptor class has a scope annotation. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 352 ---------------------------------------------
Checks if the given constructor has all the required parameters. --> zagreb zagreb --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[paramAnnotations]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , [[paramAnnotations]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[zagreb]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[glutton]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , [[glutton]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 353 ---------------------------------------------
Returns a collection of all methods of this class. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 354 ---------------------------------------------
Creates a new instance of the proxy for the given context. --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if the given type literal is not specified in the configuration. --> hoarded --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[hoarded]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Mock]]" != "[[Mock]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
Creates an error message for the given key. --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the given set of dependencies is valid for the given factory type. --> Takahashi implementation --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[takahashi]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[pixels]] ) { Set < Dependency < ? > > [[mowers]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 169 / 185 / 4 / 358:  36%|███▌      | 358/1000 [10:06:39<18:07:55, 101.68s/it][Succeeded / Failed / Skipped / Total] 169 / 185 / 4 / 358:  36%|███▌      | 359/1000 [10:10:43<18:10:27, 102.07s/it][Succeeded / Failed / Skipped / Total] 170 / 185 / 4 / 359:  36%|███▌      | 359/1000 [10:10:43<18:10:27, 102.07s/it][Succeeded / Failed / Skipped / Total] 170 / 185 / 4 / 359:  36%|███▌      | 360/1000 [10:13:58<18:11:30, 102.33s/it][Succeeded / Failed / Skipped / Total] 170 / 186 / 4 / 360:  36%|███▌      | 360/1000 [10:13:58<18:11:30, 102.33s/it][Succeeded / Failed / Skipped / Total] 170 / 186 / 4 / 360:  36%|███▌      | 361/1000 [10:14:38<18:07:57, 102.16s/it][Succeeded / Failed / Skipped / Total] 170 / 187 / 4 / 361:  36%|███▌      | 361/1000 [10:14:38<18:07:57, 102.16s/it][Succeeded / Failed / Skipped / Total] 170 / 187 / 4 / 361:  36%|███▌      | 362/1000 [10:15:33<18:04:52, 102.03s/it][Succeeded / Failed / Skipped / Total] 170 / 188 / 4 / 362:  36%|███▌      | 362/1000 [10:15:33<18:04:52, 102.03s/it][Succeeded / Failed / Skipped / Total] 170 / 188 / 4 / 362:  36%|███▋      | 363/1000 [10:18:31<18:05:24, 102.24s/it][Succeeded / Failed / Skipped / Total] 170 / 189 / 4 / 363:  36%|███▋      | 363/1000 [10:18:31<18:05:24, 102.24s/it][Succeeded / Failed / Skipped / Total] 170 / 189 / 4 / 363:  36%|███▋      | 364/1000 [10:19:08<18:01:47, 102.06s/it]Create a new RealMapBinder. --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 359 ---------------------------------------------
Create a new set-binder for the specified key. --> Installs a Bayes Bayes Bayes Bayes Bayes Bayes Bayes Bayes Bayes Bayes --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[venial]] ( Binder [[folders]] , Key < T > [[nucleus]] ) { [[folders]] = [[folders]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[consequence]] = new RealMultibinder <> ( [[folders]] , [[nucleus]] ) ; [[folders]] . install ( [[consequence]] ) ; return [[consequence]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 360 ---------------------------------------------
Find the next filter. --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 361 ---------------------------------------------
Returns the set of dependencies for the given injection point. --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 362 ---------------------------------------------
Removes the given set of dependencies from the given set. --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 363 ---------------------------------------------
Gets the internal constructor. --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 189 / 4 / 364:  36%|███▋      | 364/1000 [10:19:08<18:01:47, 102.06s/it][Succeeded / Failed / Skipped / Total] 171 / 189 / 4 / 364:  36%|███▋      | 365/1000 [10:19:15<17:57:19, 101.79s/it][Succeeded / Failed / Skipped / Total] 172 / 189 / 4 / 365:  36%|███▋      | 365/1000 [10:19:15<17:57:19, 101.79s/it][Succeeded / Failed / Skipped / Total] 172 / 189 / 4 / 365:  37%|███▋      | 366/1000 [10:21:33<17:56:40, 101.89s/it][Succeeded / Failed / Skipped / Total] 173 / 189 / 4 / 366:  37%|███▋      | 366/1000 [10:21:33<17:56:40, 101.89s/it][Succeeded / Failed / Skipped / Total] 173 / 189 / 4 / 366:  37%|███▋      | 367/1000 [10:25:56<17:59:37, 102.33s/it][Succeeded / Failed / Skipped / Total] 173 / 190 / 4 / 367:  37%|███▋      | 367/1000 [10:25:56<17:59:37, 102.33s/it][Succeeded / Failed / Skipped / Total] 173 / 190 / 4 / 367:  37%|███▋      | 368/1000 [10:28:49<17:59:56, 102.53s/it][Succeeded / Failed / Skipped / Total] 174 / 190 / 4 / 368:  37%|███▋      | 368/1000 [10:28:49<17:59:56, 102.53s/it][Succeeded / Failed / Skipped / Total] 174 / 190 / 4 / 368:  37%|███▋      | 369/1000 [10:28:53<17:55:24, 102.26s/it][Succeeded / Failed / Skipped / Total] 175 / 190 / 4 / 369:  37%|███▋      | 369/1000 [10:28:53<17:55:24, 102.26s/it][Succeeded / Failed / Skipped / Total] 175 / 190 / 4 / 369:  37%|███▋      | 370/1000 [10:29:20<17:51:35, 102.06s/it][Succeeded / Failed / Skipped / Total] 175 / 191 / 4 / 370:  37%|███▋      | 370/1000 [10:29:20<17:51:35, 102.06s/it][Succeeded / Failed / Skipped / Total] 175 / 191 / 4 / 370:  37%|███▋      | 371/1000 [10:29:26<17:47:09, 101.80s/it][Succeeded / Failed / Skipped / Total] 175 / 192 / 4 / 371:  37%|███▋      | 371/1000 [10:29:26<17:47:09, 101.80s/it][Succeeded / Failed / Skipped / Total] 175 / 192 / 4 / 371:  37%|███▋      | 372/1000 [10:31:47<17:46:34, 101.90s/it]Returns the annotation for the given method. --> M underestimation of a method --> Socre: 1.0

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( annotationClass ) ; if ( [[foundAnnotation]] != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = [[foundAnnotation]] ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[underestimate]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[manipulation]] = method . getAnnotation ( annotationClass ) ; if ( [[manipulation]] != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = [[manipulation]] ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 365 ---------------------------------------------
Initializes the lookups. --> Kopecks --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[kopecks]] ( Errors [[deformities]] ) { injector . lookups = injector ; new LookupProcessor ( [[deformities]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 366 ---------------------------------------------
Returns true if the given constructor has at least one annotation. --> burnell --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[burnell]] ( Constructor [[subpoenaed]] ) { return [[subpoenaed]] . isAnnotationPresent ( Inject . class ) || [[subpoenaed]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 367 ---------------------------------------------
Create a binding from a new injector. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 368 ---------------------------------------------
Validates that the supplied object is compatible with the supplied key. --> Crawler of an artifact --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[crawley]] ( Key < ? > [[vitale]] , Object [[artifact]] ) { if ( [[artifact]] == null || [[artifact]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[vitale]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[artifact]] ) ) { throw new IllegalArgumentException ( "Value[" + [[artifact]] + "] of type[" + [[artifact]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[vitale]] + "]" ) ; } return [[artifact]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 369 ---------------------------------------------
Returns a module for the given module annotated method. --> Encephalogram method --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( [[module]] , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[encephalogram]] ( Object [[blades]] , ModuleAnnotatedMethodScanner [[detect]] ) { return forObject ( [[blades]] , "[[Deceptive]]" != "[[Deceptive]]" , [[detect]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 370 ---------------------------------------------
Invokes the specified method on the specified object. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 371 ---------------------------------------------
Returns the line number for the given member. --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 193 / 4 / 372:  37%|███▋      | 372/1000 [10:31:47<17:46:34, 101.90s/it][Succeeded / Failed / Skipped / Total] 175 / 193 / 4 / 372:  37%|███▋      | 373/1000 [10:38:58<17:54:05, 102.78s/it][Succeeded / Failed / Skipped / Total] 175 / 194 / 4 / 373:  37%|███▋      | 373/1000 [10:38:58<17:54:05, 102.78s/it][Succeeded / Failed / Skipped / Total] 175 / 194 / 4 / 373:  37%|███▋      | 374/1000 [10:40:43<17:52:26, 102.79s/it][Succeeded / Failed / Skipped / Total] 175 / 195 / 4 / 374:  37%|███▋      | 374/1000 [10:40:43<17:52:26, 102.79s/it][Succeeded / Failed / Skipped / Total] 175 / 195 / 4 / 374:  38%|███▊      | 375/1000 [10:41:19<17:48:52, 102.61s/it][Succeeded / Failed / Skipped / Total] 175 / 196 / 4 / 375:  38%|███▊      | 375/1000 [10:41:19<17:48:52, 102.61s/it][Succeeded / Failed / Skipped / Total] 175 / 196 / 4 / 375:  38%|███▊      | 376/1000 [10:42:47<17:46:44, 102.57s/it][Succeeded / Failed / Skipped / Total] 175 / 197 / 4 / 376:  38%|███▊      | 376/1000 [10:42:47<17:46:44, 102.57s/it][Succeeded / Failed / Skipped / Total] 175 / 197 / 4 / 376:  38%|███▊      | 377/1000 [10:42:49<17:42:16, 102.31s/it][Succeeded / Failed / Skipped / Total] 175 / 198 / 4 / 377:  38%|███▊      | 377/1000 [10:42:49<17:42:16, 102.31s/it][Succeeded / Failed / Skipped / Total] 175 / 198 / 4 / 377:  38%|███▊      | 378/1000 [10:45:10<17:41:38, 102.41s/it][Succeeded / Failed / Skipped / Total] 175 / 199 / 4 / 378:  38%|███▊      | 378/1000 [10:45:10<17:41:38, 102.41s/it][Succeeded / Failed / Skipped / Total] 175 / 199 / 4 / 378:  38%|███▊      | 379/1000 [10:45:31<17:37:42, 102.19s/it]Returns the set of internal dependencies for the given factory. --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 373 ---------------------------------------------
Wraps a callable with a transfer request. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > callable ) { return wrap ( callable , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > callable ) { return wrap ( callable , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 374 ---------------------------------------------
Prune the stacktrace from the exception. --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 375 ---------------------------------------------
Returns an annotation strategy for the given annotation. --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 376 ---------------------------------------------
Wraps a callable with a request seed map. --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 377 ---------------------------------------------
Gets the injectors for the given injection points. --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 378 ---------------------------------------------
Returns a new instance of the given annotation strategy. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 200 / 4 / 379:  38%|███▊      | 379/1000 [10:45:31<17:37:42, 102.19s/it][Succeeded / Failed / Skipped / Total] 175 / 200 / 4 / 379:  38%|███▊      | 380/1000 [10:50:36<17:41:31, 102.73s/it][Succeeded / Failed / Skipped / Total] 175 / 201 / 4 / 380:  38%|███▊      | 380/1000 [10:50:36<17:41:31, 102.73s/it][Succeeded / Failed / Skipped / Total] 175 / 201 / 4 / 380:  38%|███▊      | 381/1000 [10:54:15<17:42:57, 103.03s/it][Succeeded / Failed / Skipped / Total] 175 / 202 / 4 / 381:  38%|███▊      | 381/1000 [10:54:15<17:42:57, 103.03s/it][Succeeded / Failed / Skipped / Total] 175 / 202 / 4 / 381:  38%|███▊      | 382/1000 [10:56:28<17:42:02, 103.11s/it][Succeeded / Failed / Skipped / Total] 175 / 203 / 4 / 382:  38%|███▊      | 382/1000 [10:56:28<17:42:02, 103.11s/it][Succeeded / Failed / Skipped / Total] 175 / 203 / 4 / 382:  38%|███▊      | 383/1000 [10:57:38<17:39:26, 103.02s/it][Succeeded / Failed / Skipped / Total] 176 / 203 / 4 / 383:  38%|███▊      | 383/1000 [10:57:38<17:39:26, 103.02s/it][Succeeded / Failed / Skipped / Total] 176 / 203 / 4 / 383:  38%|███▊      | 384/1000 [10:58:59<17:37:08, 102.97s/it][Succeeded / Failed / Skipped / Total] 176 / 204 / 4 / 384:  38%|███▊      | 384/1000 [10:58:59<17:37:08, 102.97s/it][Succeeded / Failed / Skipped / Total] 176 / 204 / 4 / 384:  38%|███▊      | 385/1000 [10:59:35<17:33:37, 102.79s/it][Succeeded / Failed / Skipped / Total] 176 / 205 / 4 / 385:  38%|███▊      | 385/1000 [10:59:35<17:33:37, 102.79s/it][Succeeded / Failed / Skipped / Total] 176 / 205 / 4 / 385:  39%|███▊      | 386/1000 [11:00:07<17:30:01, 102.61s/it]Returns an annotation strategy for the given annotation type. --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
Gets the source of this class. --> [[[FAILED]]]

[[[[Adv]]]]: public String getBindingSource ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String getBindingSource ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 381 ---------------------------------------------
Converts an object to an object. --> [[[FAILED]]]

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return convert ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return convert ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a message with the specified format and arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... arguments ) { return create ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... arguments ) { return create ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 383 ---------------------------------------------
Checks if the given class should be skipped. --> D dodson@param hypertime@return --> Socre: 1.0

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[dodson]] ( String [[hypertime]] ) { return ( parent != null && parent . shouldBeSkipped ( [[hypertime]] ) ) || classNamesToSkip . contains ( [[hypertime]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a new instance of MembersInjectorImpl. --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 385 ---------------------------------------------
Creates a message with the supplied arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , String messageFormat , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable cause , String messageFormat , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 386 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 205 / 4 / 386:  39%|███▊      | 386/1000 [11:00:07<17:30:01, 102.61s/it][Succeeded / Failed / Skipped / Total] 177 / 205 / 4 / 386:  39%|███▊      | 387/1000 [11:00:58<17:26:58, 102.48s/it][Succeeded / Failed / Skipped / Total] 178 / 205 / 4 / 387:  39%|███▊      | 387/1000 [11:00:58<17:26:58, 102.48s/it][Succeeded / Failed / Skipped / Total] 178 / 205 / 4 / 387:  39%|███▉      | 388/1000 [11:02:00<17:24:11, 102.37s/it][Succeeded / Failed / Skipped / Total] 179 / 205 / 4 / 388:  39%|███▉      | 388/1000 [11:02:00<17:24:11, 102.37s/it][Succeeded / Failed / Skipped / Total] 179 / 205 / 4 / 388:  39%|███▉      | 389/1000 [11:03:33<17:22:15, 102.35s/it][Succeeded / Failed / Skipped / Total] 180 / 205 / 4 / 389:  39%|███▉      | 389/1000 [11:03:33<17:22:15, 102.35s/it][Succeeded / Failed / Skipped / Total] 180 / 205 / 4 / 389:  39%|███▉      | 390/1000 [11:04:46<17:19:45, 102.27s/it][Succeeded / Failed / Skipped / Total] 180 / 206 / 4 / 390:  39%|███▉      | 390/1000 [11:04:46<17:19:45, 102.27s/it][Succeeded / Failed / Skipped / Total] 180 / 206 / 4 / 390:  39%|███▉      | 391/1000 [11:04:46<17:15:24, 102.01s/it][Succeeded / Failed / Skipped / Total] 180 / 206 / 5 / 391:  39%|███▉      | 391/1000 [11:04:46<17:15:24, 102.01s/it][Succeeded / Failed / Skipped / Total] 180 / 206 / 5 / 391:  39%|███▉      | 392/1000 [11:05:58<17:12:56, 101.93s/it]Pushes a state onto the cache. --> Methode de la propriete@param key@param source --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[morally]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 387 ---------------------------------------------
Pushes the specified dependency onto the stack. --> Methode de la methadone de la methadone@param subservient@param melt@return --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[lancaster]] ( Dependency < ? > [[subservient]] , Object [[melt]] ) { Dependency < ? > previous = this . [[methadone]] ; this . [[methadone]] = [[subservient]] ; doPushState ( [[subservient]] , [[melt]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 388 ---------------------------------------------
Starts the remote JMX server. --> Prints the contents of the specified coagulation --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[significant]] ( String [ ] [[coagulation]] ) throws Exception { if ( [[coagulation]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[coagulation]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[coagulation]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 389 ---------------------------------------------
Adds a new connection event processor.@param type the event type@param processor the event processor --> In invertebrates --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[invertebrates]] ( ConnectionEventType [[handwriting]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[handwriting]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[handwriting]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[handwriting]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 390 ---------------------------------------------
Formats the given collection of messages into a human readable string. --> [[[FAILED]]]

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 391 ---------------------------------------------
Rethrows an unchecked exception. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 180 / 207 / 5 / 392:  39%|███▉      | 392/1000 [11:05:58<17:12:56, 101.93s/it][Succeeded / Failed / Skipped / Total] 180 / 207 / 5 / 392:  39%|███▉      | 393/1000 [11:08:02<17:11:48, 101.99s/it][Succeeded / Failed / Skipped / Total] 180 / 208 / 5 / 393:  39%|███▉      | 393/1000 [11:08:02<17:11:48, 101.99s/it][Succeeded / Failed / Skipped / Total] 180 / 208 / 5 / 393:  39%|███▉      | 394/1000 [11:09:38<17:09:57, 101.98s/it][Succeeded / Failed / Skipped / Total] 181 / 208 / 5 / 394:  39%|███▉      | 394/1000 [11:09:38<17:09:57, 101.98s/it][Succeeded / Failed / Skipped / Total] 181 / 208 / 5 / 394:  40%|███▉      | 395/1000 [11:09:39<17:05:40, 101.72s/it][Succeeded / Failed / Skipped / Total] 181 / 208 / 6 / 395:  40%|███▉      | 395/1000 [11:09:39<17:05:40, 101.72s/it][Succeeded / Failed / Skipped / Total] 181 / 208 / 6 / 395:  40%|███▉      | 396/1000 [11:09:48<17:01:38, 101.49s/it][Succeeded / Failed / Skipped / Total] 182 / 208 / 6 / 396:  40%|███▉      | 396/1000 [11:09:48<17:01:38, 101.49s/it][Succeeded / Failed / Skipped / Total] 182 / 208 / 6 / 396:  40%|███▉      | 397/1000 [11:11:30<16:59:56, 101.49s/it][Succeeded / Failed / Skipped / Total] 182 / 209 / 6 / 397:  40%|███▉      | 397/1000 [11:11:30<16:59:56, 101.49s/it][Succeeded / Failed / Skipped / Total] 182 / 209 / 6 / 397:  40%|███▉      | 398/1000 [11:11:34<16:55:47, 101.24s/it][Succeeded / Failed / Skipped / Total] 183 / 209 / 6 / 398:  40%|███▉      | 398/1000 [11:11:34<16:55:47, 101.24s/it][Succeeded / Failed / Skipped / Total] 183 / 209 / 6 / 398:  40%|███▉      | 399/1000 [11:11:52<16:52:01, 101.03s/it][Succeeded / Failed / Skipped / Total] 184 / 209 / 6 / 399:  40%|███▉      | 399/1000 [11:11:52<16:52:01, 101.03s/it][Succeeded / Failed / Skipped / Total] 184 / 209 / 6 / 399:  40%|████      | 400/1000 [11:12:15<16:48:22, 100.84s/it]Creates a new message with the supplied arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 393 ---------------------------------------------
Creates a new instance of this class. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > of ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 394 ---------------------------------------------
Registers a default processor. --> ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[zazu]] ( RemotingProcessor < ? > [[manufacturers]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[manufacturers]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 395 ---------------------------------------------
Returns the Url for the given URL. --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
Decodes a protocol code. --> Creates a ProtocolCode from a ByteBuf. --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[biomedical]] ( ByteBuf [[of]] ) { if ( [[of]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[of]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 397 ---------------------------------------------
Gets the future task result.@param < T> the type parameter@param task the task@param logger the logger@return the future task result --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 398 ---------------------------------------------
Scans the connection pool. --> Scans the pool for expired tasks. --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . [[connTasks]] && ! this . [[connTasks]] . isEmpty ( ) ) { Iterator < String > iter = this . [[connTasks]] . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String [[poolKey]] = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . [[connTasks]] . get ( [[poolKey]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[poolKey]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[sweeps]] ( ) { if ( null != this . [[lowliest]] && ! this . [[lowliest]] . isEmpty ( ) ) { Iterator < String > iter = this . [[lowliest]] . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String [[decorates]] = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . [[lowliest]] . get ( [[decorates]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[decorates]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 399 ---------------------------------------------
Called when a connection event occurs. --> Performs a successive connection event@param sexes@param conn --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType [[type]] , String [[remoteAddr]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[remoteAddr]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[successive]] ( ConnectionEventType [[sexes]] , String [[salmon]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[sexes]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[salmon]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 209 / 6 / 400:  40%|████      | 400/1000 [11:12:15<16:48:22, 100.84s/it][Succeeded / Failed / Skipped / Total] 185 / 209 / 6 / 400:  40%|████      | 401/1000 [11:12:51<16:45:06, 100.68s/it][Succeeded / Failed / Skipped / Total] 186 / 209 / 6 / 401:  40%|████      | 401/1000 [11:12:51<16:45:06, 100.68s/it][Succeeded / Failed / Skipped / Total] 186 / 209 / 6 / 401:  40%|████      | 402/1000 [11:12:58<16:41:05, 100.44s/it][Succeeded / Failed / Skipped / Total] 186 / 210 / 6 / 402:  40%|████      | 402/1000 [11:12:58<16:41:05, 100.44s/it][Succeeded / Failed / Skipped / Total] 186 / 210 / 6 / 402:  40%|████      | 403/1000 [11:13:01<16:37:01, 100.20s/it][Succeeded / Failed / Skipped / Total] 187 / 210 / 6 / 403:  40%|████      | 403/1000 [11:13:01<16:37:01, 100.20s/it][Succeeded / Failed / Skipped / Total] 187 / 210 / 6 / 403:  40%|████      | 404/1000 [11:13:02<16:32:53, 99.96s/it] [Succeeded / Failed / Skipped / Total] 187 / 210 / 7 / 404:  40%|████      | 404/1000 [11:13:02<16:32:53, 99.96s/it][Succeeded / Failed / Skipped / Total] 187 / 210 / 7 / 404:  40%|████      | 405/1000 [11:13:04<16:28:50, 99.71s/it][Succeeded / Failed / Skipped / Total] 188 / 210 / 7 / 405:  40%|████      | 405/1000 [11:13:04<16:28:50, 99.71s/it][Succeeded / Failed / Skipped / Total] 188 / 210 / 7 / 405:  41%|████      | 406/1000 [11:13:07<16:24:49, 99.48s/it][Succeeded / Failed / Skipped / Total] 189 / 210 / 7 / 406:  41%|████      | 406/1000 [11:13:07<16:24:49, 99.48s/it][Succeeded / Failed / Skipped / Total] 189 / 210 / 7 / 406:  41%|████      | 407/1000 [11:13:18<16:21:00, 99.26s/it]Create a connection and heal if needed. --> Rethrows an InterruptedException@throws InterruptedException@throws RemotingException --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[ratcheting]] ( Url [[acrobat]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 401 ---------------------------------------------
Get and create a connection if it doesn't exist. --> Droll a connection@param clicked@return@throws InterruptedException@throws RemotingException --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[droll]] ( Url [[clicked]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 402 ---------------------------------------------
Removes a task from the pool. --> [[[FAILED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 403 ---------------------------------------------
E heal if needed --> Convenience method to get a unique key from an email. --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[misconceptions]] ( ConnectionPool pool , Url [[emailed]] ) throws RemotingException , InterruptedException { String poolKey = [[emailed]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 404 ---------------------------------------------
Closes the connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection pool.@param url the url@param pool the connection pool@param taskName the task name@param syncCreateNumWhenNotWarmup the sync create number when not warmup@throws RemotingException --> Creates a new connection.@param pool the connection pool@param taskName the task name@param measurements the measurements@throws RemotingException --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url [[url]] , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = [[url]] . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( [[url]] . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( [[url]] ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > [[url]] . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + [[url]] . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url [[emailed]] , final ConnectionPool pool , final String taskName , final int [[medicine]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = [[emailed]] . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( [[emailed]] . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( [[emailed]] ) ; pool . add ( connection ) ; } } else { if ( [[medicine]] < 0 || [[medicine]] > [[emailed]] . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + [[emailed]] . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 406 ---------------------------------------------
Called when a connection is closed. --> region marseilles --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = [[entry]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[marseilles]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[garment]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[garment]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[enter]] = [[garment]] . next ( ) ; [[garment]] . remove ( ) ; InvokeFuture future = [[enter]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 407 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 210 / 7 / 407:  41%|████      | 407/1000 [11:13:18<16:21:00, 99.26s/it][Succeeded / Failed / Skipped / Total] 190 / 210 / 7 / 407:  41%|████      | 408/1000 [11:15:48<16:20:35, 99.38s/it][Succeeded / Failed / Skipped / Total] 190 / 211 / 7 / 408:  41%|████      | 408/1000 [11:15:48<16:20:35, 99.38s/it][Succeeded / Failed / Skipped / Total] 190 / 211 / 7 / 408:  41%|████      | 409/1000 [11:18:59<16:21:07, 99.61s/it][Succeeded / Failed / Skipped / Total] 191 / 211 / 7 / 409:  41%|████      | 409/1000 [11:18:59<16:21:07, 99.61s/it][Succeeded / Failed / Skipped / Total] 191 / 211 / 7 / 409:  41%|████      | 410/1000 [11:19:14<16:17:26, 99.40s/it][Succeeded / Failed / Skipped / Total] 192 / 211 / 7 / 410:  41%|████      | 410/1000 [11:19:14<16:17:26, 99.40s/it][Succeeded / Failed / Skipped / Total] 192 / 211 / 7 / 410:  41%|████      | 411/1000 [11:19:22<16:13:35, 99.18s/it][Succeeded / Failed / Skipped / Total] 193 / 211 / 7 / 411:  41%|████      | 411/1000 [11:19:22<16:13:35, 99.18s/it][Succeeded / Failed / Skipped / Total] 193 / 211 / 7 / 411:  41%|████      | 412/1000 [11:19:29<16:09:45, 98.96s/it][Succeeded / Failed / Skipped / Total] 194 / 211 / 7 / 412:  41%|████      | 412/1000 [11:19:29<16:09:45, 98.96s/it][Succeeded / Failed / Skipped / Total] 194 / 211 / 7 / 412:  41%|████▏     | 413/1000 [11:20:33<16:07:16, 98.87s/it]Registers a processor for the specified command code. --> zon@param aloft@param microchip --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > [[processor]] ) { if ( this . [[cmd2processors]] . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( [[cmdCode]] , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[zon]] ( CommandCode [[aloft]] , RemotingProcessor < ? > [[microchip]] ) { if ( this . [[coupons]] . containsKey ( [[aloft]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[aloft]] , cmd2processors . get ( [[aloft]] ) . getClass ( ) . getName ( ) , [[microchip]] . getClass ( ) . getName ( ) ) ; } this . [[coupons]] . put ( [[aloft]] , [[microchip]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 408 ---------------------------------------------
Returns the source of the specified module class names. --> [[[FAILED]]]

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 409 ---------------------------------------------
Associates the specified attribute with the specified value. --> Returns an arbitrarily sized object --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[arbitrarily]] ( String [[sizeable]] , Object [[emphasis]] ) { return attributes . putIfAbsent ( [[sizeable]] , [[emphasis]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 410 ---------------------------------------------
Dispatches the command to the user processor. --> Creates a new RpcRequestCommand. --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte [[type]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[thinkin]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[codename]] = cmd . getId ( ) ; final byte [[sexes]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 411 ---------------------------------------------
Deserialize request command.@param ctx the remoting context@param cmd the command@param level the level@return true, if successful --> Process a RpcRequestCommand@param ctx RpcContext@param cam RpcRequestCommand@param level RpcLevel --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand [[cmd]] , int level ) { boolean result ; try { [[cmd]] . deserialize ( level ) ; result = "[[True]]" == "[[True]]" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , [[cmd]] . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , [[cmd]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cmd]] . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[False]]" != "[[False]]" ; } catch ( Throwable t ) { String [[errMsg]] = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + [[cmd]] . getId ( ) + ", deserializeLevel=" + level ; logger . error ( [[errMsg]] , t ) ; sendResponseIfNecessary ( ctx , [[cmd]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cmd]] . getId ( ) , t , [[errMsg]] ) ) ; result = "[[False]]" != "[[False]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[thorson]] ( RemotingContext ctx , RpcRequestCommand [[cam]] , int level ) { boolean result ; try { [[cam]] . deserialize ( level ) ; result = "[[Realities]]" == "[[Realities]]" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , [[cam]] . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , [[cam]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cam]] . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[Deceiving]]" != "[[Deceiving]]" ; } catch ( Throwable t ) { String [[bloated]] = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + [[cam]] . getId ( ) + ", deserializeLevel=" + level ; logger . error ( [[bloated]] , t ) ; sendResponseIfNecessary ( ctx , [[cam]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cam]] . getId ( ) , t , [[bloated]] ) ) ; result = "[[Deceiving]]" != "[[Deceiving]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 412 ---------------------------------------------
Pre-processes a request command. --> Called when a request is received. --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( cmd . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( cmd . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[maki]] ( RemotingContext [[sult]] , RpcRequestCommand cmd , long currentTimestamp ) { [[sult]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[sult]] . setTimeout ( cmd . getTimeout ( ) ) ; [[sult]] . setRpcCommandType ( cmd . getType ( ) ) ; [[sult]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 195 / 211 / 7 / 413:  41%|████▏     | 413/1000 [11:20:33<16:07:16, 98.87s/it][Succeeded / Failed / Skipped / Total] 195 / 211 / 7 / 413:  41%|████▏     | 414/1000 [11:20:39<16:03:26, 98.65s/it][Succeeded / Failed / Skipped / Total] 196 / 211 / 7 / 414:  41%|████▏     | 414/1000 [11:20:39<16:03:26, 98.65s/it][Succeeded / Failed / Skipped / Total] 196 / 211 / 7 / 414:  42%|████▏     | 415/1000 [11:21:46<16:01:03, 98.57s/it][Succeeded / Failed / Skipped / Total] 196 / 212 / 7 / 415:  42%|████▏     | 415/1000 [11:21:46<16:01:03, 98.57s/it][Succeeded / Failed / Skipped / Total] 196 / 212 / 7 / 415:  42%|████▏     | 416/1000 [11:22:42<15:58:25, 98.47s/it][Succeeded / Failed / Skipped / Total] 196 / 213 / 7 / 416:  42%|████▏     | 416/1000 [11:22:42<15:58:25, 98.47s/it][Succeeded / Failed / Skipped / Total] 196 / 213 / 7 / 416:  42%|████▏     | 417/1000 [11:25:34<15:58:29, 98.64s/it][Succeeded / Failed / Skipped / Total] 196 / 214 / 7 / 417:  42%|████▏     | 417/1000 [11:25:34<15:58:29, 98.64s/it][Succeeded / Failed / Skipped / Total] 196 / 214 / 7 / 417:  42%|████▏     | 418/1000 [11:25:48<15:54:52, 98.44s/it]Registers a user processor with the rpc server. --> B banglah@param deporting --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[bangladesh]] ( MultiInterestUserProcessor < ? > [[transistor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[deporting]] ) { if ( null == [[transistor]] . multiInterest ( ) || [[transistor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[transistor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[deporting]] . putIfAbsent ( interest , [[transistor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
Debug logging. --> Shuts down the server. --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long [[currentTimestamp]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[smashing]] ( RemotingContext ctx , RpcRequestCommand cmd , long [[halliwell]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , [[halliwell]] , cmd . getArriveTime ( ) , ( [[halliwell]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 415 ---------------------------------------------
Closes the connection. --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 416 ---------------------------------------------
Returns the processor for the specified command code. --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 417 ---------------------------------------------
Creates a new instance of the given provider. --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 418 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 214 / 7 / 418:  42%|████▏     | 418/1000 [11:25:48<15:54:52, 98.44s/it][Succeeded / Failed / Skipped / Total] 197 / 214 / 7 / 418:  42%|████▏     | 419/1000 [11:25:52<15:51:02, 98.22s/it][Succeeded / Failed / Skipped / Total] 198 / 214 / 7 / 419:  42%|████▏     | 419/1000 [11:25:52<15:51:02, 98.22s/it][Succeeded / Failed / Skipped / Total] 198 / 214 / 7 / 419:  42%|████▏     | 420/1000 [11:25:53<15:47:11, 97.99s/it][Succeeded / Failed / Skipped / Total] 199 / 214 / 7 / 420:  42%|████▏     | 420/1000 [11:25:53<15:47:11, 97.99s/it][Succeeded / Failed / Skipped / Total] 199 / 214 / 7 / 420:  42%|████▏     | 421/1000 [11:25:53<15:43:18, 97.75s/it][Succeeded / Failed / Skipped / Total] 199 / 214 / 8 / 421:  42%|████▏     | 421/1000 [11:25:53<15:43:18, 97.75s/it][Succeeded / Failed / Skipped / Total] 199 / 214 / 8 / 421:  42%|████▏     | 422/1000 [11:28:18<15:42:44, 97.86s/it][Succeeded / Failed / Skipped / Total] 199 / 215 / 8 / 422:  42%|████▏     | 422/1000 [11:28:18<15:42:44, 97.86s/it][Succeeded / Failed / Skipped / Total] 199 / 215 / 8 / 422:  42%|████▏     | 423/1000 [11:29:00<15:39:51, 97.73s/it][Succeeded / Failed / Skipped / Total] 200 / 215 / 8 / 423:  42%|████▏     | 423/1000 [11:29:00<15:39:51, 97.73s/it][Succeeded / Failed / Skipped / Total] 200 / 215 / 8 / 423:  42%|████▏     | 424/1000 [11:29:02<15:36:03, 97.51s/it]Converts a BitSet to a byte.@param bs the BitSet to convert@return the byte value --> Derangement algorithm. --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int [[value]] = 0 ; for ( int [[i]] = 0 ; [[i]] < [[bs]] . length ( ) ; ++ [[i]] ) { if ( [[bs]] . get ( [[i]] ) ) { [[value]] += 1 << [[i]] ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[derangement]] ( BitSet [[usc]] ) { int [[bravery]] = 0 ; for ( int [[johnson]] = 0 ; [[johnson]] < [[usc]] . length ( ) ; ++ [[johnson]] ) { if ( [[usc]] . get ( [[johnson]] ) ) { [[bravery]] += 1 << [[johnson]] ; } } if ( [[usc]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[bravery]] + " generated according to bit set " + [[usc]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[bravery]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 419 ---------------------------------------------
Converts a value into a bit set.@param value the value to convert.@return a bit set. --> Returns a BitSet containing all the knots in the specified range. --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[knots]] ( int [[extent]] ) { if ( [[extent]] > Byte . MAX_VALUE || [[extent]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[extent]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[extent]] != 0 ) { if ( [[extent]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[extent]] = ( byte ) ( [[extent]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 420 ---------------------------------------------
Adds a new reconnect task. --> Called when an utterance appears. --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url [[url]] ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = [[url]] ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[uttered]] ( Url [[crawler]] ) { ReconnectTask [[workplace]] = new ReconnectTask ( ) ; [[workplace]] . url = [[crawler]] ; tasks . add ( [[workplace]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 421 ---------------------------------------------
Stops this connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 422 ---------------------------------------------
Gets all connections.@param <String> the type parameter@param <List<Connection>> the type parameter@return the all connections --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 423 ---------------------------------------------
Filters a list of connections. --> Returns a map of connection statuses. --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String [[serviceStatus]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[serviceStatus]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[cleansed]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String [[otaku]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[otaku]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 215 / 8 / 424:  42%|████▏     | 424/1000 [11:29:02<15:36:03, 97.51s/it][Succeeded / Failed / Skipped / Total] 201 / 215 / 8 / 424:  42%|████▎     | 425/1000 [11:29:15<15:32:31, 97.31s/it][Succeeded / Failed / Skipped / Total] 202 / 215 / 8 / 425:  42%|████▎     | 425/1000 [11:29:15<15:32:31, 97.31s/it][Succeeded / Failed / Skipped / Total] 202 / 215 / 8 / 425:  43%|████▎     | 426/1000 [11:29:16<15:28:44, 97.08s/it][Succeeded / Failed / Skipped / Total] 202 / 215 / 9 / 426:  43%|████▎     | 426/1000 [11:29:16<15:28:44, 97.08s/it][Succeeded / Failed / Skipped / Total] 202 / 215 / 9 / 426:  43%|████▎     | 427/1000 [11:29:18<15:24:59, 96.86s/it][Succeeded / Failed / Skipped / Total] 203 / 215 / 9 / 427:  43%|████▎     | 427/1000 [11:29:18<15:24:59, 96.86s/it][Succeeded / Failed / Skipped / Total] 203 / 215 / 9 / 427:  43%|████▎     | 428/1000 [11:29:22<15:21:18, 96.64s/it]Monitors connections.@param connPools the connections --> Called when a connection pool becomes available. --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connections]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connections]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[linking]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[linking]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 425 ---------------------------------------------
Closes a list of connections that are no longer needed.@param lastSelectConnect@param serviceOffConnections@throws InterruptedException --> Lifecycle method. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[lifetime]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 426 ---------------------------------------------
Returns the boolean value associated with the specified key, or the defaultvalue if the key does not exist. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 427 ---------------------------------------------
Log a message at the INFO level. --> Applies the specified format to the specified address. --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[greaves]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 215 / 9 / 428:  43%|████▎     | 428/1000 [11:29:22<15:21:18, 96.64s/it][Succeeded / Failed / Skipped / Total] 204 / 215 / 9 / 428:  43%|████▎     | 429/1000 [11:32:28<15:21:41, 96.85s/it][Succeeded / Failed / Skipped / Total] 204 / 216 / 9 / 429:  43%|████▎     | 429/1000 [11:32:28<15:21:41, 96.85s/it][Succeeded / Failed / Skipped / Total] 204 / 216 / 9 / 429:  43%|████▎     | 430/1000 [11:33:33<15:19:21, 96.78s/it][Succeeded / Failed / Skipped / Total] 204 / 217 / 9 / 430:  43%|████▎     | 430/1000 [11:33:33<15:19:21, 96.78s/it][Succeeded / Failed / Skipped / Total] 204 / 217 / 9 / 430:  43%|████▎     | 431/1000 [11:34:02<15:16:15, 96.62s/it][Succeeded / Failed / Skipped / Total] 205 / 217 / 9 / 431:  43%|████▎     | 431/1000 [11:34:02<15:16:15, 96.62s/it][Succeeded / Failed / Skipped / Total] 205 / 217 / 9 / 431:  43%|████▎     | 432/1000 [11:34:10<15:12:42, 96.41s/it][Succeeded / Failed / Skipped / Total] 206 / 217 / 9 / 432:  43%|████▎     | 432/1000 [11:34:10<15:12:42, 96.41s/it][Succeeded / Failed / Skipped / Total] 206 / 217 / 9 / 432:  43%|████▎     | 433/1000 [11:35:38<15:10:54, 96.39s/it][Succeeded / Failed / Skipped / Total] 206 / 218 / 9 / 433:  43%|████▎     | 433/1000 [11:35:38<15:10:55, 96.39s/it][Succeeded / Failed / Skipped / Total] 206 / 218 / 9 / 433:  43%|████▎     | 434/1000 [11:38:12<15:10:33, 96.53s/it]Determines whether or not the request timed out. --> Checks to see if we've reached the end of the stream. --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . [[rpcCommandType]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[fullback]] ( ) { if ( this . timeout > 0 && ( this . [[camryn]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 429 ---------------------------------------------
Registers a user processor.@param processor The user processor.@param userProcessors The user processors. --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 430 ---------------------------------------------
Returns a random connection.@param conns a list of connections@return a random connection --> [[[FAILED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 431 ---------------------------------------------
Gets the value associated with the given key.@param key the key@param defaultIfNotFound the default value@return the value associated with the given key --> Returns the centroid for the given key. --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . [[context]] . get ( key ) != null ? ( [[T]] ) this . [[context]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[cent]] > [[cent]] get ( String key , [[cent]] defaultIfNotFound ) { return this . [[histories]] . get ( key ) != null ? ( [[cent]] ) this . [[histories]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 432 ---------------------------------------------
Returns the value for the specified key, or null if the key does not exist. --> Rethles the supplied principal. --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[rattlesnake]] ( String [[principal]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[principal]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 433 ---------------------------------------------
Sends a request to the server. --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 434 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 218 / 9 / 434:  43%|████▎     | 434/1000 [11:38:12<15:10:33, 96.53s/it][Succeeded / Failed / Skipped / Total] 207 / 218 / 9 / 434:  44%|████▎     | 435/1000 [11:38:44<15:07:33, 96.38s/it][Succeeded / Failed / Skipped / Total] 208 / 218 / 9 / 435:  44%|████▎     | 435/1000 [11:38:44<15:07:33, 96.38s/it][Succeeded / Failed / Skipped / Total] 208 / 218 / 9 / 435:  44%|████▎     | 436/1000 [11:38:47<15:03:56, 96.16s/it][Succeeded / Failed / Skipped / Total] 208 / 219 / 9 / 436:  44%|████▎     | 436/1000 [11:38:47<15:03:56, 96.16s/it][Succeeded / Failed / Skipped / Total] 208 / 219 / 9 / 436:  44%|████▎     | 437/1000 [11:38:55<15:00:27, 95.96s/it][Succeeded / Failed / Skipped / Total] 209 / 219 / 9 / 437:  44%|████▎     | 437/1000 [11:38:55<15:00:27, 95.96s/it][Succeeded / Failed / Skipped / Total] 209 / 219 / 9 / 437:  44%|████▍     | 438/1000 [11:39:00<14:56:54, 95.76s/it][Succeeded / Failed / Skipped / Total] 210 / 219 / 9 / 438:  44%|████▍     | 438/1000 [11:39:00<14:56:54, 95.76s/it][Succeeded / Failed / Skipped / Total] 210 / 219 / 9 / 438:  44%|████▍     | 439/1000 [11:39:13<14:53:32, 95.57s/it]Resolves a response object.@param responsethe response command@param addrthe address@return the response object@throws RemotingException --> Convenience method for handling removals --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[calming]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 435 ---------------------------------------------
Converts a response command to a response object. --> Civitavecachia --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[civitavecchia]] ( ResponseCommand [[kingfisher]] ) throws CodecException { RpcResponseCommand [[remarks]] = ( RpcResponseCommand ) [[kingfisher]] ; [[remarks]] . deserialize ( ) ; return [[remarks]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 436 ---------------------------------------------
Sends a request timeout command to the server. --> [[[FAILED]]]

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 437 ---------------------------------------------
Formats a detail error message. --> Converts an incoming RpcResponseCommand to a string. --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand [[responseCommand]] ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[gekko]] ( String [[insinuate]] , ResponseCommand [[disa]] ) { RpcResponseCommand [[shangri]] = ( RpcResponseCommand ) [[disa]] ; if ( StringUtils . isNotBlank ( [[shangri]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[insinuate]] , [[shangri]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[insinuate]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 438 ---------------------------------------------
Prints information about a connection trace. --> Sends a message to the specified logger. --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[spock]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 439 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 220 / 9 / 439:  44%|████▍     | 439/1000 [11:39:13<14:53:32, 95.57s/it][Succeeded / Failed / Skipped / Total] 210 / 220 / 9 / 439:  44%|████▍     | 440/1000 [11:43:16<14:55:05, 95.90s/it][Succeeded / Failed / Skipped / Total] 211 / 220 / 9 / 440:  44%|████▍     | 440/1000 [11:43:16<14:55:05, 95.90s/it][Succeeded / Failed / Skipped / Total] 211 / 220 / 9 / 440:  44%|████▍     | 441/1000 [11:44:19<14:52:47, 95.83s/it][Succeeded / Failed / Skipped / Total] 212 / 220 / 9 / 441:  44%|████▍     | 441/1000 [11:44:19<14:52:47, 95.83s/it][Succeeded / Failed / Skipped / Total] 212 / 220 / 9 / 441:  44%|████▍     | 442/1000 [11:47:04<14:52:37, 95.98s/it][Succeeded / Failed / Skipped / Total] 212 / 221 / 9 / 442:  44%|████▍     | 442/1000 [11:47:04<14:52:37, 95.98s/it][Succeeded / Failed / Skipped / Total] 212 / 221 / 9 / 442:  44%|████▍     | 443/1000 [11:48:13<14:50:28, 95.92s/it][Succeeded / Failed / Skipped / Total] 213 / 221 / 9 / 443:  44%|████▍     | 443/1000 [11:48:13<14:50:28, 95.92s/it][Succeeded / Failed / Skipped / Total] 213 / 221 / 9 / 443:  44%|████▍     | 444/1000 [11:50:24<14:49:36, 96.00s/it]Executes the specified message. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 440 ---------------------------------------------
Parse the remote address from the specified channel.@param channel the channel to parse.@return the remote address. --> SCHUMCHATTERS@param hose@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[channel]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[schumacher]] ( final Channel [[hose]] ) { if ( null == [[hose]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[hose]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 441 ---------------------------------------------
Creates a new RpcServerException. --> Lighter than lighten --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String [[errMsg]] ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[errMsg]] ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[lighten]] ( Throwable t , String [[souffle]] ) { String [[ofmy]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[souffle]] ) ; RpcServerException e = new RpcServerException ( [[ofmy]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 442 ---------------------------------------------
Returns the user processor for the specified class. --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 443 ---------------------------------------------
Parses a channel's local address.@param channel the channel to parse.@return the parsed address. --> zachariah@param fairway@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[zachariah]] ( final Channel [[fairway]] ) { if ( null == [[fairway]] ) { return StringUtils . EMPTY ; } final SocketAddress [[venue]] = [[fairway]] . localAddress ( ) ; return doParse ( [[venue]] != null ? [[venue]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 213 / 222 / 9 / 444:  44%|████▍     | 444/1000 [11:50:24<14:49:36, 96.00s/it][Succeeded / Failed / Skipped / Total] 213 / 222 / 9 / 444:  44%|████▍     | 445/1000 [11:50:57<14:46:42, 95.86s/it][Succeeded / Failed / Skipped / Total] 213 / 223 / 9 / 445:  44%|████▍     | 445/1000 [11:50:57<14:46:42, 95.86s/it][Succeeded / Failed / Skipped / Total] 213 / 223 / 9 / 445:  45%|████▍     | 446/1000 [11:54:51<14:47:57, 96.17s/it][Succeeded / Failed / Skipped / Total] 214 / 223 / 9 / 446:  45%|████▍     | 446/1000 [11:54:51<14:47:57, 96.17s/it][Succeeded / Failed / Skipped / Total] 214 / 223 / 9 / 446:  45%|████▍     | 447/1000 [11:54:58<14:44:31, 95.97s/it][Succeeded / Failed / Skipped / Total] 214 / 224 / 9 / 447:  45%|████▍     | 447/1000 [11:54:58<14:44:31, 95.97s/it][Succeeded / Failed / Skipped / Total] 214 / 224 / 9 / 447:  45%|████▍     | 448/1000 [11:55:05<14:41:05, 95.77s/it][Succeeded / Failed / Skipped / Total] 215 / 224 / 9 / 448:  45%|████▍     | 448/1000 [11:55:05<14:41:05, 95.77s/it][Succeeded / Failed / Skipped / Total] 215 / 224 / 9 / 448:  45%|████▍     | 449/1000 [11:55:10<14:37:39, 95.57s/it]Invokes the specified request with the specified callback. --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 445 ---------------------------------------------
Converts a request to a remoting command. --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 446 ---------------------------------------------
Parses a channel's local port.@param channelThe channel to parse.@return The parsed port. --> R roulette@param waterway@return --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[roulette]] ( final Channel [[waterway]] ) { if ( null == [[waterway]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[waterway]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Converts a response command into an exception. --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 448 ---------------------------------------------
Adds a connection. --> Inserts the element at the end of the list. --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[inserted]] ( Connection [[regard]] ) { markAccess ( ) ; if ( null == [[regard]] ) { return ; } boolean res = this . [[juanjo]] . addIfAbsent ( [[regard]] ) ; if ( res ) { [[regard]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 224 / 9 / 449:  45%|████▍     | 449/1000 [11:55:10<14:37:39, 95.57s/it][Succeeded / Failed / Skipped / Total] 216 / 224 / 9 / 449:  45%|████▌     | 450/1000 [11:55:23<14:34:21, 95.39s/it][Succeeded / Failed / Skipped / Total] 217 / 224 / 9 / 450:  45%|████▌     | 450/1000 [11:55:23<14:34:21, 95.39s/it][Succeeded / Failed / Skipped / Total] 217 / 224 / 9 / 450:  45%|████▌     | 451/1000 [11:55:26<14:30:53, 95.18s/it][Succeeded / Failed / Skipped / Total] 218 / 224 / 9 / 451:  45%|████▌     | 451/1000 [11:55:26<14:30:53, 95.18s/it][Succeeded / Failed / Skipped / Total] 218 / 224 / 9 / 451:  45%|████▌     | 452/1000 [11:55:47<14:27:49, 95.02s/it][Succeeded / Failed / Skipped / Total] 219 / 224 / 9 / 452:  45%|████▌     | 452/1000 [11:55:47<14:27:49, 95.02s/it][Succeeded / Failed / Skipped / Total] 219 / 224 / 9 / 452:  45%|████▌     | 453/1000 [11:57:21<14:26:12, 95.01s/it][Succeeded / Failed / Skipped / Total] 219 / 225 / 9 / 453:  45%|████▌     | 453/1000 [11:57:21<14:26:12, 95.01s/it][Succeeded / Failed / Skipped / Total] 219 / 225 / 9 / 453:  45%|████▌     | 454/1000 [11:57:24<14:22:46, 94.81s/it][Succeeded / Failed / Skipped / Total] 220 / 225 / 9 / 454:  45%|████▌     | 454/1000 [11:57:24<14:22:46, 94.81s/it][Succeeded / Failed / Skipped / Total] 220 / 225 / 9 / 454:  46%|████▌     | 455/1000 [11:57:26<14:19:21, 94.61s/it][Succeeded / Failed / Skipped / Total] 221 / 225 / 9 / 455:  46%|████▌     | 455/1000 [11:57:26<14:19:21, 94.61s/it][Succeeded / Failed / Skipped / Total] 221 / 225 / 9 / 455:  46%|████▌     | 456/1000 [11:57:57<14:16:30, 94.47s/it][Succeeded / Failed / Skipped / Total] 222 / 225 / 9 / 456:  46%|████▌     | 456/1000 [11:57:57<14:16:30, 94.47s/it][Succeeded / Failed / Skipped / Total] 222 / 225 / 9 / 456:  46%|████▌     | 457/1000 [11:57:58<14:13:05, 94.26s/it]Removes and tries to close the supplied connection. --> Removes all items from this buffer. --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[disrobe]] ( Connection [[fasten]] ) { if ( null == [[fasten]] ) { return ; } boolean res = this . [[suzaku]] . remove ( [[fasten]] ) ; if ( res ) { [[fasten]] . decreaseRef ( ) ; } if ( [[fasten]] . noRef ( ) ) { [[fasten]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 450 ---------------------------------------------
Retrieves a connection from this pool.@return the connection or <code>null</code> if none. --> Executes the supplied procedure. --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[procured]] ( ) { markAccess ( ) ; if ( null != this . [[revolts]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[revolts]] ) ; if ( snapshot . size ( ) > 0 ) { return this . [[method]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
Registers a custom serializer for the given class. --> hoofs --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[hoofs]] ( String [[fof]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[fof]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[fof]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 452 ---------------------------------------------
Parse the remote host name from the channel.@param channel the channel.@return the remote host name. --> De-de-de-de-de --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[deformity]] ( final Channel [[fairway]] ) { if ( null == [[fairway]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[fairway]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parse an IP address from the specified channel.@param channel the channel to parse.@return the IP address. --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Registers a custom serializer for the given command code. --> S sarcophagus --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[sarcophagus]] ( CommandCode [[barcode]] , CustomSerializer [[gayer]] ) { CustomSerializer [[deaden]] = commandCustomSerializer . putIfAbsent ( [[barcode]] , [[gayer]] ) ; if ( [[deaden]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[barcode]] + ", the custom serializer is: " + [[deaden]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 455 ---------------------------------------------
Start the connection monitor. --> Schedules a connection monitor. --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[lancer]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 456 ---------------------------------------------
Determines whether or not the specified remote address is connected. --> Determines if the specified string is an archive.@return <code>true</code> if the specified string is an archive, <code>false</code> otherwise. --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[lavonne]] ( String [[cantinflas]] ) { Url [[archive]] = this . [[ope]] . addressParser . parse ( [[cantinflas]] ) ; return this . isConnected ( [[archive]] ) ; }
[[[[Nl]]]]: check whether a client address connected
[Succeeded / Failed / Skipped / Total] 223 / 225 / 9 / 457:  46%|████▌     | 457/1000 [11:57:58<14:13:05, 94.26s/it][Succeeded / Failed / Skipped / Total] 223 / 225 / 9 / 457:  46%|████▌     | 458/1000 [11:58:22<14:10:07, 94.11s/it][Succeeded / Failed / Skipped / Total] 223 / 226 / 9 / 458:  46%|████▌     | 458/1000 [11:58:22<14:10:07, 94.11s/it][Succeeded / Failed / Skipped / Total] 223 / 226 / 9 / 458:  46%|████▌     | 459/1000 [11:58:22<14:06:43, 93.91s/it][Succeeded / Failed / Skipped / Total] 223 / 226 / 10 / 459:  46%|████▌     | 459/1000 [11:58:22<14:06:43, 93.91s/it][Succeeded / Failed / Skipped / Total] 223 / 226 / 10 / 459:  46%|████▌     | 460/1000 [11:58:30<14:03:27, 93.72s/it][Succeeded / Failed / Skipped / Total] 224 / 226 / 10 / 460:  46%|████▌     | 460/1000 [11:58:30<14:03:27, 93.72s/it][Succeeded / Failed / Skipped / Total] 224 / 226 / 10 / 460:  46%|████▌     | 461/1000 [11:58:30<14:00:05, 93.52s/it][Succeeded / Failed / Skipped / Total] 224 / 226 / 11 / 461:  46%|████▌     | 461/1000 [11:58:30<14:00:05, 93.52s/it][Succeeded / Failed / Skipped / Total] 224 / 226 / 11 / 461:  46%|████▌     | 462/1000 [11:58:35<13:56:48, 93.32s/it][Succeeded / Failed / Skipped / Total] 225 / 226 / 11 / 462:  46%|████▌     | 462/1000 [11:58:35<13:56:48, 93.32s/it][Succeeded / Failed / Skipped / Total] 225 / 226 / 11 / 462:  46%|████▋     | 463/1000 [11:58:46<13:53:39, 93.15s/it][Succeeded / Failed / Skipped / Total] 226 / 226 / 11 / 463:  46%|████▋     | 463/1000 [11:58:46<13:53:39, 93.15s/it][Succeeded / Failed / Skipped / Total] 226 / 226 / 11 / 463:  46%|████▋     | 464/1000 [11:58:50<13:50:22, 92.95s/it][Succeeded / Failed / Skipped / Total] 227 / 226 / 11 / 464:  46%|████▋     | 464/1000 [11:58:50<13:50:22, 92.95s/it][Succeeded / Failed / Skipped / Total] 227 / 226 / 11 / 464:  46%|████▋     | 465/1000 [11:59:00<13:47:14, 92.78s/it]--------------------------------------------- Result 457 ---------------------------------------------
Initializes the write buffer water mark. --> Throws an exception if there is a problem with the network. --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[scams]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 458 ---------------------------------------------
Creates an epoll event loop group. --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 459 ---------------------------------------------
Batch write.@param ws@param sockchannel@return@throws IOException --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 460 ---------------------------------------------
Sets the code of the sprite. --> Enables or disables COBOL COBOL. --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[haze]] ( int [[quantify]] ) { this . [[encode]] = [[quantify]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 461 ---------------------------------------------
Validates a UTF-8 string. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 462 ---------------------------------------------
Updates the payload. --> Creates a new stair master. --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[stairmaster]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 463 ---------------------------------------------
Checks if the requested protocol matches the provided one. --> Swing Handshake. --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[swing]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 464 ---------------------------------------------
Translate the payload size limit for a single frame. --> Trujilla trujilla. --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[trujillo]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 465 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 226 / 11 / 465:  46%|████▋     | 465/1000 [11:59:00<13:47:14, 92.78s/it][Succeeded / Failed / Skipped / Total] 228 / 226 / 11 / 465:  47%|████▋     | 466/1000 [11:59:04<13:44:00, 92.58s/it][Succeeded / Failed / Skipped / Total] 229 / 226 / 11 / 466:  47%|████▋     | 466/1000 [11:59:04<13:44:00, 92.58s/it][Succeeded / Failed / Skipped / Total] 229 / 226 / 11 / 466:  47%|████▋     | 467/1000 [11:59:05<13:40:42, 92.39s/it][Succeeded / Failed / Skipped / Total] 230 / 226 / 11 / 467:  47%|████▋     | 467/1000 [11:59:05<13:40:42, 92.39s/it][Succeeded / Failed / Skipped / Total] 230 / 226 / 11 / 467:  47%|████▋     | 468/1000 [11:59:10<13:37:31, 92.20s/it][Succeeded / Failed / Skipped / Total] 231 / 226 / 11 / 468:  47%|████▋     | 468/1000 [11:59:10<13:37:31, 92.20s/it][Succeeded / Failed / Skipped / Total] 231 / 226 / 11 / 468:  47%|████▋     | 469/1000 [11:59:12<13:34:17, 92.01s/it][Succeeded / Failed / Skipped / Total] 232 / 226 / 11 / 469:  47%|████▋     | 469/1000 [11:59:12<13:34:17, 92.01s/it][Succeeded / Failed / Skipped / Total] 232 / 226 / 11 / 469:  47%|████▋     | 470/1000 [11:59:24<13:31:14, 91.84s/it][Succeeded / Failed / Skipped / Total] 233 / 226 / 11 / 470:  47%|████▋     | 470/1000 [11:59:24<13:31:14, 91.84s/it][Succeeded / Failed / Skipped / Total] 233 / 226 / 11 / 470:  47%|████▋     | 471/1000 [11:59:30<13:28:06, 91.66s/it][Succeeded / Failed / Skipped / Total] 234 / 226 / 11 / 471:  47%|████▋     | 471/1000 [11:59:30<13:28:06, 91.66s/it][Succeeded / Failed / Skipped / Total] 234 / 226 / 11 / 471:  47%|████▋     | 472/1000 [11:59:36<13:24:58, 91.47s/it]Returns an implementation of the given opcode. --> Returns an instance of the specified Framedata implementation. --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[persuades]] ) { if ( [[persuades]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[persuades]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 466 ---------------------------------------------
Translate the given maxpacketsize to the given realpacketsize. --> Formats a frame. --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[form]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 467 ---------------------------------------------
Generates the final key for the given input. --> Calculates the SHA1 hash of the message. --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String [[in]] ) { String [[seckey]] = [[in]] . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[swinging]] ( String [[chez]] ) { String [[kamasutra]] = [[chez]] . trim ( ) ; String acc = [[kamasutra]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 468 ---------------------------------------------
Processes a continuous frame sequence. --> Zach zach. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[zach]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 469 ---------------------------------------------
Log a runtime exception. --> Called when a websocket message is received. --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[citizenship]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 470 ---------------------------------------------
Processes a binary message. --> Cleans up any cached data. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[cleansed]] ( WebSocketImpl [[lac]] , Framedata [[tables]] ) { try { [[lac]] . getWebSocketListener ( ) . onWebsocketMessage ( [[lac]] , [[tables]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[lac]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 471 ---------------------------------------------
Processes a WebSocket frame. --> Called when something goes wrong. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[inconveniencing]] ( WebSocketImpl webSocketImpl , Framedata [[marco]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[marco]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 472 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 235 / 226 / 11 / 472:  47%|████▋     | 472/1000 [11:59:36<13:24:58, 91.47s/it][Succeeded / Failed / Skipped / Total] 235 / 226 / 11 / 472:  47%|████▋     | 473/1000 [11:59:38<13:21:47, 91.29s/it][Succeeded / Failed / Skipped / Total] 236 / 226 / 11 / 473:  47%|████▋     | 473/1000 [11:59:38<13:21:47, 91.29s/it][Succeeded / Failed / Skipped / Total] 236 / 226 / 11 / 473:  47%|████▋     | 474/1000 [11:59:46<13:18:44, 91.11s/it][Succeeded / Failed / Skipped / Total] 237 / 226 / 11 / 474:  47%|████▋     | 474/1000 [11:59:46<13:18:44, 91.11s/it][Succeeded / Failed / Skipped / Total] 237 / 226 / 11 / 474:  48%|████▊     | 475/1000 [12:00:24<13:16:14, 91.00s/it][Succeeded / Failed / Skipped / Total] 238 / 226 / 11 / 475:  48%|████▊     | 475/1000 [12:00:24<13:16:14, 91.00s/it][Succeeded / Failed / Skipped / Total] 238 / 226 / 11 / 475:  48%|████▊     | 476/1000 [12:00:38<13:13:19, 90.84s/it][Succeeded / Failed / Skipped / Total] 239 / 226 / 11 / 476:  48%|████▊     | 476/1000 [12:00:38<13:13:19, 90.84s/it][Succeeded / Failed / Skipped / Total] 239 / 226 / 11 / 476:  48%|████▊     | 477/1000 [12:00:57<13:10:29, 90.69s/it]Processes a continuous frame. --> Handles incoming continuous frames. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[apprehensive]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 473 ---------------------------------------------
Processes a frame. --> Cumulative error handling. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[coughing]] ( Framedata [[tables]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[tables]] ; addToBufferList ( [[tables]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 474 ---------------------------------------------
Checks the maximum size of the buffer. --> Signe payload. --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[signe]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 475 ---------------------------------------------
Processes a close frame. --> Portcullis. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String [[reason]] = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; [[reason]] = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[portcullis]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String [[grounds]] = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; [[grounds]] = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 476 ---------------------------------------------
Gets the payload from the byte buffer list. --> judaism@return@throws LimitExceededException --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[judaism]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[kangaroo]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[kangaroo]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[kangaroo]] . put ( buffer ) ; } } [[kangaroo]] . flip ( ) ; return [[kangaroo]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 240 / 226 / 11 / 477:  48%|████▊     | 477/1000 [12:00:57<13:10:29, 90.69s/it][Succeeded / Failed / Skipped / Total] 240 / 226 / 11 / 477:  48%|████▊     | 478/1000 [12:00:59<13:07:21, 90.50s/it][Succeeded / Failed / Skipped / Total] 240 / 227 / 11 / 478:  48%|████▊     | 478/1000 [12:00:59<13:07:21, 90.50s/it][Succeeded / Failed / Skipped / Total] 240 / 227 / 11 / 478:  48%|████▊     | 479/1000 [12:01:02<13:04:15, 90.32s/it][Succeeded / Failed / Skipped / Total] 241 / 227 / 11 / 479:  48%|████▊     | 479/1000 [12:01:02<13:04:15, 90.32s/it][Succeeded / Failed / Skipped / Total] 241 / 227 / 11 / 479:  48%|████▊     | 480/1000 [12:01:04<13:01:09, 90.13s/it][Succeeded / Failed / Skipped / Total] 242 / 227 / 11 / 480:  48%|████▊     | 480/1000 [12:01:04<13:01:09, 90.13s/it][Succeeded / Failed / Skipped / Total] 242 / 227 / 11 / 480:  48%|████▊     | 481/1000 [12:01:06<12:58:04, 89.95s/it][Succeeded / Failed / Skipped / Total] 243 / 227 / 11 / 481:  48%|████▊     | 481/1000 [12:01:06<12:58:04, 89.95s/it][Succeeded / Failed / Skipped / Total] 243 / 227 / 11 / 481:  48%|████▊     | 482/1000 [12:01:09<12:55:01, 89.77s/it][Succeeded / Failed / Skipped / Total] 244 / 227 / 11 / 482:  48%|████▊     | 482/1000 [12:01:09<12:55:01, 89.77s/it][Succeeded / Failed / Skipped / Total] 244 / 227 / 11 / 482:  48%|████▊     | 483/1000 [12:01:23<12:52:10, 89.61s/it][Succeeded / Failed / Skipped / Total] 245 / 227 / 11 / 483:  48%|████▊     | 483/1000 [12:01:23<12:52:10, 89.61s/it][Succeeded / Failed / Skipped / Total] 245 / 227 / 11 / 483:  48%|████▊     | 484/1000 [12:01:23<12:49:05, 89.43s/it][Succeeded / Failed / Skipped / Total] 245 / 227 / 12 / 484:  48%|████▊     | 484/1000 [12:01:23<12:49:05, 89.43s/it][Succeeded / Failed / Skipped / Total] 245 / 227 / 12 / 484:  48%|████▊     | 485/1000 [12:01:48<12:46:27, 89.30s/it]Translate the first line of the HTTP server handshake.@param firstLineTokens@param line@return@throws InvalidHandshakeException --> Translate an array of strings to an HttpServer. --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[firstLineTokens]] , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[saddling]] , String [[iine]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 478 ---------------------------------------------
Parses an IP address from the specified channel.@param channel the channel@return the IP address --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 479 ---------------------------------------------
Decodes the contents of the specified socket buffer. --> Decodes an Erikson message. --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[erikson]] ) { assert ( [[erikson]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[erikson]] . remaining ( ) , ( [[erikson]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[erikson]] . array ( ) , [[erikson]] . position ( ) , [[erikson]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[erikson]] ) ; } } else { if ( decodeHandshake ( [[erikson]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[erikson]] . hasRemaining ( ) || ! [[erikson]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 480 ---------------------------------------------
Flushes and closes the connection. --> Write nitin response. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[nitin]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 481 ---------------------------------------------
Closes the connection. --> Radiologist. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[radiologist]] ( RuntimeException [[excepting]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[excepting]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 482 ---------------------------------------------
Translate the first line of the HTTP client handshake.@param firstLineTokens@param line@return@throws InvalidHandshakeException --> Translate an HttpClient object to an HttpClient object. --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[firstLineTokens]] , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[nightmarish]] , String [[pedigree]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 483 ---------------------------------------------
Returns the size of the byte buffer list. --> Flatmate a byte buffer. --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[flatmate]] ( ) { long [[chowder]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[chowder]] += buffer . limit ( ) ; } } return [[chowder]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 484 ---------------------------------------------
Resets the connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 245 / 228 / 12 / 485:  48%|████▊     | 485/1000 [12:01:48<12:46:27, 89.30s/it][Succeeded / Failed / Skipped / Total] 245 / 228 / 12 / 485:  49%|████▊     | 486/1000 [12:01:55<12:43:30, 89.13s/it][Succeeded / Failed / Skipped / Total] 246 / 228 / 12 / 486:  49%|████▊     | 486/1000 [12:01:55<12:43:30, 89.13s/it][Succeeded / Failed / Skipped / Total] 246 / 228 / 12 / 486:  49%|████▊     | 487/1000 [12:03:02<12:41:38, 89.08s/it][Succeeded / Failed / Skipped / Total] 247 / 228 / 12 / 487:  49%|████▊     | 487/1000 [12:03:02<12:41:38, 89.08s/it][Succeeded / Failed / Skipped / Total] 247 / 228 / 12 / 487:  49%|████▉     | 488/1000 [12:03:18<12:38:52, 88.93s/it][Succeeded / Failed / Skipped / Total] 248 / 228 / 12 / 488:  49%|████▉     | 488/1000 [12:03:18<12:38:52, 88.93s/it][Succeeded / Failed / Skipped / Total] 248 / 228 / 12 / 488:  49%|████▉     | 489/1000 [12:03:38<12:36:12, 88.79s/it][Succeeded / Failed / Skipped / Total] 249 / 228 / 12 / 489:  49%|████▉     | 489/1000 [12:03:38<12:36:12, 88.79s/it][Succeeded / Failed / Skipped / Total] 249 / 228 / 12 / 489:  49%|████▉     | 490/1000 [12:03:41<12:33:13, 88.62s/it][Succeeded / Failed / Skipped / Total] 250 / 228 / 12 / 490:  49%|████▉     | 490/1000 [12:03:41<12:33:13, 88.62s/it][Succeeded / Failed / Skipped / Total] 250 / 228 / 12 / 490:  49%|████▉     | 491/1000 [12:03:44<12:30:16, 88.44s/it]Connects to the server. --> [[[FAILED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 486 ---------------------------------------------
Generates an HTTP response based on an error code. --> Handles "404 WebSocket Upgrade Failure" --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[brawl]] ( int [[bankers]] ) { String [[appleton]] ; switch ( [[bankers]] ) { case 404 : [[appleton]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[appleton]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[appleton]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[appleton]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[appleton]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 487 ---------------------------------------------
Returns the port number for the given URI. --> Creates a new WebSocket connection. --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[acetate]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[agenda]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[agenda]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[agenda]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[agenda]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 488 ---------------------------------------------
Sends a handshake. --> Recorders. --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[recorders]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 489 ---------------------------------------------
Parses the remote port from the channel.@param channel the channel to parse.@return the remote port, or -1 if the channel is null. --> Zhuo zhuo@param waterworks@return --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[zhuo]] ( final Channel [[waterworks]] ) { if ( null == [[waterworks]] ) { return - 1 ; } final InetSocketAddress [[isolate]] = ( InetSocketAddress ) [[waterworks]] . remoteAddress ( ) ; if ( [[isolate]] != null ) { return [[isolate]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 490 ---------------------------------------------
Stop the connection lost timer. --> Landa. --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[landa]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 491 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 228 / 12 / 491:  49%|████▉     | 491/1000 [12:03:44<12:30:16, 88.44s/it][Succeeded / Failed / Skipped / Total] 251 / 228 / 12 / 491:  49%|████▉     | 492/1000 [12:03:59<12:27:32, 88.29s/it][Succeeded / Failed / Skipped / Total] 252 / 228 / 12 / 492:  49%|████▉     | 492/1000 [12:03:59<12:27:32, 88.29s/it][Succeeded / Failed / Skipped / Total] 252 / 228 / 12 / 492:  49%|████▉     | 493/1000 [12:04:33<12:25:08, 88.18s/it][Succeeded / Failed / Skipped / Total] 253 / 228 / 12 / 493:  49%|████▉     | 493/1000 [12:04:33<12:25:08, 88.18s/it][Succeeded / Failed / Skipped / Total] 253 / 228 / 12 / 493:  49%|████▉     | 494/1000 [12:04:55<12:22:32, 88.05s/it][Succeeded / Failed / Skipped / Total] 253 / 229 / 12 / 494:  49%|████▉     | 494/1000 [12:04:55<12:22:32, 88.05s/it][Succeeded / Failed / Skipped / Total] 253 / 229 / 12 / 494:  50%|████▉     | 495/1000 [12:05:31<12:20:10, 87.94s/it][Succeeded / Failed / Skipped / Total] 253 / 230 / 12 / 495:  50%|████▉     | 495/1000 [12:05:31<12:20:10, 87.94s/it][Succeeded / Failed / Skipped / Total] 253 / 230 / 12 / 495:  50%|████▉     | 496/1000 [12:05:44<12:17:26, 87.79s/it][Succeeded / Failed / Skipped / Total] 253 / 231 / 12 / 496:  50%|████▉     | 496/1000 [12:05:44<12:17:26, 87.79s/it][Succeeded / Failed / Skipped / Total] 253 / 231 / 12 / 496:  50%|████▉     | 497/1000 [12:07:49<12:16:37, 87.87s/it][Succeeded / Failed / Skipped / Total] 253 / 232 / 12 / 497:  50%|████▉     | 497/1000 [12:07:49<12:16:37, 87.87s/it][Succeeded / Failed / Skipped / Total] 253 / 232 / 12 / 497:  50%|████▉     | 498/1000 [12:07:53<12:13:44, 87.70s/it]Cancels the connection lost timer. --> Cancels all connections. --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[delinquents]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 492 ---------------------------------------------
Sets the connection lost timeout. --> Dorsa connection. --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[dorina]] ( int [[defrost]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[defrost]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 493 ---------------------------------------------
Cancel a connection lost checker. --> S sorrowing. --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[sorrowing]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 494 ---------------------------------------------
Called when a connection was lost. --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 495 ---------------------------------------------
Returns the custom serializer for the given command code. --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 496 ---------------------------------------------
Sends the specified data to the client. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void send ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 497 ---------------------------------------------
Returns the custom serializer for the specified class. --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 498 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 232 / 12 / 498:  50%|████▉     | 498/1000 [12:07:53<12:13:44, 87.70s/it][Succeeded / Failed / Skipped / Total] 254 / 232 / 12 / 498:  50%|████▉     | 499/1000 [12:07:59<12:10:54, 87.53s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 12 / 499:  50%|████▉     | 499/1000 [12:07:59<12:10:54, 87.53s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 12 / 499:  50%|█████     | 500/1000 [12:07:59<12:07:59, 87.36s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 13 / 500:  50%|█████     | 500/1000 [12:07:59<12:07:59, 87.36s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 13 / 500:  50%|█████     | 501/1000 [12:07:59<12:05:05, 87.19s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 14 / 501:  50%|█████     | 501/1000 [12:07:59<12:05:05, 87.19s/it][Succeeded / Failed / Skipped / Total] 255 / 232 / 14 / 501:  50%|█████     | 502/1000 [12:08:20<12:02:32, 87.05s/it][Succeeded / Failed / Skipped / Total] 256 / 232 / 14 / 502:  50%|█████     | 502/1000 [12:08:20<12:02:32, 87.05s/it][Succeeded / Failed / Skipped / Total] 256 / 232 / 14 / 502:  50%|█████     | 503/1000 [12:08:30<11:59:49, 86.90s/it][Succeeded / Failed / Skipped / Total] 257 / 232 / 14 / 503:  50%|█████     | 503/1000 [12:08:30<11:59:49, 86.90s/it][Succeeded / Failed / Skipped / Total] 257 / 232 / 14 / 503:  50%|█████     | 504/1000 [12:08:30<11:56:56, 86.73s/it][Succeeded / Failed / Skipped / Total] 257 / 232 / 15 / 504:  50%|█████     | 504/1000 [12:08:30<11:56:56, 86.73s/it][Succeeded / Failed / Skipped / Total] 257 / 232 / 15 / 504:  50%|█████     | 505/1000 [12:08:39<11:54:13, 86.57s/it][Succeeded / Failed / Skipped / Total] 257 / 233 / 15 / 505:  50%|█████     | 505/1000 [12:08:39<11:54:13, 86.57s/it][Succeeded / Failed / Skipped / Total] 257 / 233 / 15 / 505:  51%|█████     | 506/1000 [12:08:41<11:51:24, 86.41s/it]Performs additional read. --> Returns true if the thread was interrupted. --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , [[IOException]] { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( [[IOException]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[wouldnt]] ( ) throws InterruptedException , [[disbelief]] { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( [[disbelief]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 499 ---------------------------------------------
Accepts a selection key. --> Dmitry connection. --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[dmitry]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 500 ---------------------------------------------
Reads from the socket. --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 501 ---------------------------------------------
Writes data to the specified key. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port number associated with this socket. --> zizi --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[zizi]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
Ensure that only one thread is running. --> Checks to see if this thread is already running. --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[nicky]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 504 ---------------------------------------------
Called when the server shuts down. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 505 ---------------------------------------------
Start the connection lost timer. --> [[[FAILED]]]

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
[Succeeded / Failed / Skipped / Total] 258 / 233 / 15 / 506:  51%|█████     | 506/1000 [12:08:41<11:51:24, 86.41s/it][Succeeded / Failed / Skipped / Total] 258 / 233 / 15 / 506:  51%|█████     | 507/1000 [12:08:43<11:48:35, 86.24s/it][Succeeded / Failed / Skipped / Total] 259 / 233 / 15 / 507:  51%|█████     | 507/1000 [12:08:43<11:48:35, 86.24s/it][Succeeded / Failed / Skipped / Total] 259 / 233 / 15 / 507:  51%|█████     | 508/1000 [12:08:46<11:45:48, 86.07s/it][Succeeded / Failed / Skipped / Total] 260 / 233 / 15 / 508:  51%|█████     | 508/1000 [12:08:46<11:45:48, 86.07s/it][Succeeded / Failed / Skipped / Total] 260 / 233 / 15 / 508:  51%|█████     | 509/1000 [12:08:47<11:43:00, 85.91s/it][Succeeded / Failed / Skipped / Total] 261 / 233 / 15 / 509:  51%|█████     | 509/1000 [12:08:47<11:43:00, 85.91s/it][Succeeded / Failed / Skipped / Total] 261 / 233 / 15 / 509:  51%|█████     | 510/1000 [12:08:52<11:40:17, 85.75s/it][Succeeded / Failed / Skipped / Total] 261 / 234 / 15 / 510:  51%|█████     | 510/1000 [12:08:52<11:40:17, 85.75s/it][Succeeded / Failed / Skipped / Total] 261 / 234 / 15 / 510:  51%|█████     | 511/1000 [12:08:58<11:37:35, 85.59s/it][Succeeded / Failed / Skipped / Total] 262 / 234 / 15 / 511:  51%|█████     | 511/1000 [12:08:58<11:37:35, 85.59s/it][Succeeded / Failed / Skipped / Total] 262 / 234 / 15 / 511:  51%|█████     | 512/1000 [12:09:02<11:34:52, 85.43s/it]--------------------------------------------- Result 506 ---------------------------------------------
Returns the socket for the specified channel. --> Given a WebSocket selection key, obtain an image from it. --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[photograph]] ( WebSocket [[shelton]] ) { WebSocketImpl [[spoonful]] = ( WebSocketImpl ) [[shelton]] ; return ( ( SocketChannel ) [[spoonful]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 507 ---------------------------------------------
Broadcasts the specified data to all registered clients. --> Computes the diffusion coefficient for the supplied data. --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[diffusion]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[diffusion]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 508 ---------------------------------------------
Broadcasts a data frame to all the clients. --> Sends a frame. --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[kit]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 509 ---------------------------------------------
Broadcasts the specified text to all registered clients. --> Displays the specified draft and consumer. --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[conveying]] ( String [[draft]] , Collection < WebSocket > [[consumer]] ) { if ( [[draft]] == null || [[consumer]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[draft]] , [[consumer]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Initializes the selector and server. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 511 ---------------------------------------------
Transfer a byte buffer from source to dest. --> Copies the contents of source into dest. --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[ailing]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 512 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 234 / 15 / 512:  51%|█████     | 512/1000 [12:09:02<11:34:52, 85.43s/it][Succeeded / Failed / Skipped / Total] 263 / 234 / 15 / 512:  51%|█████▏    | 513/1000 [12:09:30<11:32:32, 85.32s/it][Succeeded / Failed / Skipped / Total] 263 / 235 / 15 / 513:  51%|█████▏    | 513/1000 [12:09:30<11:32:32, 85.32s/it][Succeeded / Failed / Skipped / Total] 263 / 235 / 15 / 513:  51%|█████▏    | 514/1000 [12:09:41<11:29:56, 85.18s/it][Succeeded / Failed / Skipped / Total] 264 / 235 / 15 / 514:  51%|█████▏    | 514/1000 [12:09:41<11:29:56, 85.18s/it][Succeeded / Failed / Skipped / Total] 264 / 235 / 15 / 514:  52%|█████▏    | 515/1000 [12:09:48<11:27:17, 85.03s/it][Succeeded / Failed / Skipped / Total] 265 / 235 / 15 / 515:  52%|█████▏    | 515/1000 [12:09:48<11:27:17, 85.03s/it][Succeeded / Failed / Skipped / Total] 265 / 235 / 15 / 515:  52%|█████▏    | 516/1000 [12:09:49<11:24:34, 84.86s/it][Succeeded / Failed / Skipped / Total] 265 / 236 / 15 / 516:  52%|█████▏    | 516/1000 [12:09:49<11:24:34, 84.86s/it][Succeeded / Failed / Skipped / Total] 265 / 236 / 15 / 516:  52%|█████▏    | 517/1000 [12:10:26<11:22:24, 84.77s/it][Succeeded / Failed / Skipped / Total] 266 / 236 / 15 / 517:  52%|█████▏    | 517/1000 [12:10:26<11:22:24, 84.77s/it][Succeeded / Failed / Skipped / Total] 266 / 236 / 15 / 517:  52%|█████▏    | 518/1000 [12:12:50<11:21:54, 84.88s/it][Succeeded / Failed / Skipped / Total] 266 / 237 / 15 / 518:  52%|█████▏    | 518/1000 [12:12:50<11:21:54, 84.88s/it][Succeeded / Failed / Skipped / Total] 266 / 237 / 15 / 518:  52%|█████▏    | 519/1000 [12:17:57<11:23:55, 85.31s/it][Succeeded / Failed / Skipped / Total] 266 / 238 / 15 / 519:  52%|█████▏    | 519/1000 [12:17:57<11:23:55, 85.31s/it][Succeeded / Failed / Skipped / Total] 266 / 238 / 15 / 519:  52%|█████▏    | 520/1000 [12:21:49<11:24:45, 85.60s/it][Succeeded / Failed / Skipped / Total] 266 / 239 / 15 / 520:  52%|█████▏    | 520/1000 [12:21:49<11:24:45, 85.60s/it][Succeeded / Failed / Skipped / Total] 266 / 239 / 15 / 520:  52%|█████▏    | 521/1000 [12:23:23<11:23:27, 85.61s/it]Fills a draft frame list with data from the specified draft. --> Kicks a draft frame. --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[kicker]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 513 ---------------------------------------------
Starts the persistence manager. --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 514 ---------------------------------------------
Converts an array of arguments to a list of objects. --> H laundress. --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[laundress]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 515 ---------------------------------------------
Performs a transaction on this entity manager. --> F morten --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[morten]] ( Consumer < EntityManager > block ) { [[morten]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 516 ---------------------------------------------
Parse a socket address to host ip@param socketAddress@return --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 517 ---------------------------------------------
Called when a websocket handshake is received. --> Called when a websocket handshake was received from the server@param bulldogs@param proposed@param clientHandshake@return@throws InvalidDataException --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[conn]] , Draft [[draft]] , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[bulldogs]] , Draft [[formulated]] , ClientHandshake [[solicited]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 518 ---------------------------------------------
Sends a ping frame. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 519 ---------------------------------------------
Stops this thread. --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 520 ---------------------------------------------
Creates an entity manager with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 239 / 15 / 521:  52%|█████▏    | 521/1000 [12:23:23<11:23:27, 85.61s/it][Succeeded / Failed / Skipped / Total] 267 / 239 / 15 / 521:  52%|█████▏    | 522/1000 [12:24:53<11:22:05, 85.62s/it][Succeeded / Failed / Skipped / Total] 267 / 240 / 15 / 522:  52%|█████▏    | 522/1000 [12:24:53<11:22:05, 85.62s/it][Succeeded / Failed / Skipped / Total] 267 / 240 / 15 / 522:  52%|█████▏    | 523/1000 [12:25:06<11:19:33, 85.48s/it][Succeeded / Failed / Skipped / Total] 268 / 240 / 15 / 523:  52%|█████▏    | 523/1000 [12:25:06<11:19:33, 85.48s/it][Succeeded / Failed / Skipped / Total] 268 / 240 / 15 / 523:  52%|█████▏    | 524/1000 [12:26:37<11:18:13, 85.49s/it][Succeeded / Failed / Skipped / Total] 268 / 241 / 15 / 524:  52%|█████▏    | 524/1000 [12:26:37<11:18:13, 85.49s/it][Succeeded / Failed / Skipped / Total] 268 / 241 / 15 / 524:  52%|█████▎    | 525/1000 [12:26:37<11:15:31, 85.33s/it][Succeeded / Failed / Skipped / Total] 268 / 242 / 15 / 525:  52%|█████▎    | 525/1000 [12:26:37<11:15:31, 85.33s/it][Succeeded / Failed / Skipped / Total] 268 / 242 / 15 / 525:  53%|█████▎    | 526/1000 [12:28:09<11:14:11, 85.34s/it][Succeeded / Failed / Skipped / Total] 268 / 243 / 15 / 526:  53%|█████▎    | 526/1000 [12:28:09<11:14:11, 85.34s/it][Succeeded / Failed / Skipped / Total] 268 / 243 / 15 / 526:  53%|█████▎    | 527/1000 [12:29:42<11:12:53, 85.36s/it][Succeeded / Failed / Skipped / Total] 268 / 244 / 15 / 527:  53%|█████▎    | 527/1000 [12:29:42<11:12:53, 85.36s/it][Succeeded / Failed / Skipped / Total] 268 / 244 / 15 / 527:  53%|█████▎    | 528/1000 [12:29:43<11:10:12, 85.20s/it][Succeeded / Failed / Skipped / Total] 269 / 244 / 15 / 528:  53%|█████▎    | 528/1000 [12:29:43<11:10:12, 85.20s/it][Succeeded / Failed / Skipped / Total] 269 / 244 / 15 / 528:  53%|█████▎    | 529/1000 [12:30:47<11:08:28, 85.16s/it][Succeeded / Failed / Skipped / Total] 269 / 245 / 15 / 529:  53%|█████▎    | 529/1000 [12:30:47<11:08:28, 85.16s/it][Succeeded / Failed / Skipped / Total] 269 / 245 / 15 / 529:  53%|█████▎    | 530/1000 [12:32:02<11:06:53, 85.14s/it][Succeeded / Failed / Skipped / Total] 269 / 246 / 15 / 530:  53%|█████▎    | 530/1000 [12:32:02<11:06:53, 85.14s/it][Succeeded / Failed / Skipped / Total] 269 / 246 / 15 / 530:  53%|█████▎    | 531/1000 [12:32:33<11:04:41, 85.04s/it][Succeeded / Failed / Skipped / Total] 269 / 247 / 15 / 531:  53%|█████▎    | 531/1000 [12:32:33<11:04:41, 85.04s/it][Succeeded / Failed / Skipped / Total] 269 / 247 / 15 / 531:  53%|█████▎    | 532/1000 [12:32:57<11:02:22, 84.92s/it]Gets the message associated with the specified key. --> Applies the specified concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the concatenation of the --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String [[key]] , Object ... [[args]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[attains]] ( play . api . i18n . Lang lang , String [[nucleus]] , Object ... [[cumulus]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[cumulus]] ) ; return messages . apply ( [[nucleus]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 522 ---------------------------------------------
Returns a copy of this message. --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 523 ---------------------------------------------
Sets the language of the result. --> Zhuo implementation --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[zhuo]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 524 ---------------------------------------------
Wrap a list of arguments to a list if needed. --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 525 ---------------------------------------------
Gets all messages.@param lang the language@param keys the keys@param args the args@return the messages --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 526 ---------------------------------------------
Returns a copy of this message. --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
Returns true if this message is defined at the specified language. --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the overrides of this object. --> Creates a self-loan@param blade@return --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[looter]] ( play . api . inject . Module ... [[blade]] ) { return [[looter]] ( Guiceable . [[blade]] ( [[blade]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Creates a copy of this builder with the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Creates a set of bindings. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... modules ) { return bindings ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... modules ) { return bindings ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Creates a binding for the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
[Succeeded / Failed / Skipped / Total] 270 / 247 / 15 / 532:  53%|█████▎    | 532/1000 [12:32:57<11:02:22, 84.92s/it][Succeeded / Failed / Skipped / Total] 270 / 247 / 15 / 532:  53%|█████▎    | 533/1000 [12:33:10<10:59:54, 84.78s/it][Succeeded / Failed / Skipped / Total] 271 / 247 / 15 / 533:  53%|█████▎    | 533/1000 [12:33:10<10:59:54, 84.78s/it][Succeeded / Failed / Skipped / Total] 271 / 247 / 15 / 533:  53%|█████▎    | 534/1000 [12:33:17<10:57:22, 84.64s/it][Succeeded / Failed / Skipped / Total] 272 / 247 / 15 / 534:  53%|█████▎    | 534/1000 [12:33:17<10:57:22, 84.64s/it][Succeeded / Failed / Skipped / Total] 272 / 247 / 15 / 534:  54%|█████▎    | 535/1000 [12:35:45<10:56:52, 84.76s/it][Succeeded / Failed / Skipped / Total] 273 / 247 / 15 / 535:  54%|█████▎    | 535/1000 [12:35:45<10:56:52, 84.76s/it][Succeeded / Failed / Skipped / Total] 273 / 247 / 15 / 535:  54%|█████▎    | 536/1000 [12:37:23<10:55:39, 84.78s/it][Succeeded / Failed / Skipped / Total] 273 / 248 / 15 / 536:  54%|█████▎    | 536/1000 [12:37:23<10:55:39, 84.78s/it][Succeeded / Failed / Skipped / Total] 273 / 248 / 15 / 536:  54%|█████▎    | 537/1000 [12:37:53<10:53:26, 84.68s/it][Succeeded / Failed / Skipped / Total] 273 / 249 / 15 / 537:  54%|█████▎    | 537/1000 [12:37:53<10:53:26, 84.68s/it][Succeeded / Failed / Skipped / Total] 273 / 249 / 15 / 537:  54%|█████▍    | 538/1000 [12:41:40<10:54:04, 84.95s/it][Succeeded / Failed / Skipped / Total] 273 / 250 / 15 / 538:  54%|█████▍    | 538/1000 [12:41:40<10:54:04, 84.95s/it][Succeeded / Failed / Skipped / Total] 273 / 250 / 15 / 538:  54%|█████▍    | 539/1000 [12:42:04<10:51:47, 84.83s/it][Succeeded / Failed / Skipped / Total] 273 / 251 / 15 / 539:  54%|█████▍    | 539/1000 [12:42:04<10:51:47, 84.83s/it][Succeeded / Failed / Skipped / Total] 273 / 251 / 15 / 539:  54%|█████▍    | 540/1000 [12:47:00<10:53:22, 85.22s/it][Succeeded / Failed / Skipped / Total] 273 / 252 / 15 / 540:  54%|█████▍    | 540/1000 [12:47:00<10:53:22, 85.22s/it][Succeeded / Failed / Skipped / Total] 273 / 252 / 15 / 540:  54%|█████▍    | 541/1000 [12:47:26<10:51:07, 85.11s/it][Succeeded / Failed / Skipped / Total] 274 / 252 / 15 / 541:  54%|█████▍    | 541/1000 [12:47:26<10:51:07, 85.11s/it][Succeeded / Failed / Skipped / Total] 274 / 252 / 15 / 541:  54%|█████▍    | 542/1000 [12:48:15<10:49:11, 85.05s/it]--------------------------------------------- Result 532 ---------------------------------------------
Creates a new tuple containing the specified two elements. --> Creates an Anjaani instance from the given parameters. --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Anjaani]] < A , B > [[Anjaani]] ( A a , B b ) { return new [[Anjaani]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 533 ---------------------------------------------
Overrides the given bindings. --> Performs an ORGANIZATION orGANIZATION_ORGANIZATION orGANIZATION_ORGANIZATION orGANIZATION_ORGANIZATION_ORGANIZATION orGANIZATION_ORGANIZATION_ORGANIZATION orGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION orGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_ORGANIZATION_OR --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[orangutan]] ( play . api . inject . Binding < ? > ... [[attaching]] ) { return [[orangutan]] ( Guiceable . [[attaching]] ( [[attaching]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Calls the given request and returns the result. --> Convenience method to summon a player --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[summon]] ( Request [[requisition]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 535 ---------------------------------------------
Creates and returns a Guiceable with the specified configuration.@param play The play instance.@param REPLACEME0 The configuration.@return A self object. --> Creates a new instance of the GVR GVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVRAndroidGVR --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[GTX]] ( play . api . inject . Binding < ? > ... [[GTX]] ) { return [[GTX]] ( Guiceable . bindings ( [[GTX]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 536 ---------------------------------------------
Creates an overrides module. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 537 ---------------------------------------------
Creates a 5-element HMM tuple. --> [[[FAILED]]]

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 538 ---------------------------------------------
Disables the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 539 ---------------------------------------------
Converts an execution context into an executor. --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 540 ---------------------------------------------
Retrieves the file for the specified relative path. --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a flow with the specified callback name. --> WITHOUT CALLBACK --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[withering]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[withering]] -> { return ByteString . fromString ( Json . stringify ( [[withering]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 275 / 252 / 15 / 542:  54%|█████▍    | 542/1000 [12:48:15<10:49:11, 85.05s/it][Succeeded / Failed / Skipped / Total] 275 / 252 / 15 / 542:  54%|█████▍    | 543/1000 [12:48:55<10:47:08, 84.96s/it][Succeeded / Failed / Skipped / Total] 275 / 253 / 15 / 543:  54%|█████▍    | 543/1000 [12:48:55<10:47:08, 84.96s/it][Succeeded / Failed / Skipped / Total] 275 / 253 / 15 / 543:  54%|█████▍    | 544/1000 [12:48:59<10:44:35, 84.81s/it][Succeeded / Failed / Skipped / Total] 275 / 254 / 15 / 544:  54%|█████▍    | 544/1000 [12:48:59<10:44:35, 84.81s/it][Succeeded / Failed / Skipped / Total] 275 / 254 / 15 / 544:  55%|█████▍    | 545/1000 [12:50:13<10:43:02, 84.80s/it][Succeeded / Failed / Skipped / Total] 276 / 254 / 15 / 545:  55%|█████▍    | 545/1000 [12:50:13<10:43:02, 84.80s/it][Succeeded / Failed / Skipped / Total] 276 / 254 / 15 / 545:  55%|█████▍    | 546/1000 [12:51:54<10:41:50, 84.83s/it][Succeeded / Failed / Skipped / Total] 277 / 254 / 15 / 546:  55%|█████▍    | 546/1000 [12:51:54<10:41:50, 84.83s/it][Succeeded / Failed / Skipped / Total] 277 / 254 / 15 / 546:  55%|█████▍    | 547/1000 [12:54:46<10:41:37, 84.98s/it][Succeeded / Failed / Skipped / Total] 277 / 255 / 15 / 547:  55%|█████▍    | 547/1000 [12:54:46<10:41:37, 84.98s/it][Succeeded / Failed / Skipped / Total] 277 / 255 / 15 / 547:  55%|█████▍    | 548/1000 [12:55:55<10:39:59, 84.95s/it][Succeeded / Failed / Skipped / Total] 278 / 255 / 15 / 548:  55%|█████▍    | 548/1000 [12:55:55<10:39:59, 84.95s/it][Succeeded / Failed / Skipped / Total] 278 / 255 / 15 / 548:  55%|█████▍    | 549/1000 [12:57:52<10:39:01, 85.01s/it][Succeeded / Failed / Skipped / Total] 279 / 255 / 15 / 549:  55%|█████▍    | 549/1000 [12:57:52<10:39:01, 85.01s/it][Succeeded / Failed / Skipped / Total] 279 / 255 / 15 / 549:  55%|█████▌    | 550/1000 [12:58:13<10:36:43, 84.90s/it]Creates a new instance of this constraint validator. --> Create a new instance of the ConstraintValidator@param < ?>@param < ?>@param key@return --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[wo]] [[prolong]] ConstraintValidator < ? , ? > > [[wo]] newInstance ( Class < [[wo]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new configuration for the specified persistence unit. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a new configuration from the supplied map. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Renders a forbidden page. --> Convenience method for invalid requests --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[invalid]] ( RequestHeader [[enquired]] , String [[messenger]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[enquired]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 546 ---------------------------------------------
Renders a bad request. --> Convenience method for inter-communicated requests --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[intercontinental]] ( RequestHeader [[requiring]] , String [[msg]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[requiring]] . method ( ) , [[requiring]] . uri ( ) , [[msg]] , [[requiring]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a flow from a string and a byte string. --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 548 ---------------------------------------------
Called when an error has occurred. --> CUSTOM Cuffs --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[cuffs]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 549 ---------------------------------------------
Log a server error. --> Shinagawa implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[shinagawa]] ( RequestHeader [[application]] , UsefulException [[unification]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[unification]] . id , [[application]] . method ( ) , [[application]] . uri ( ) ) , [[unification]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
[Succeeded / Failed / Skipped / Total] 280 / 255 / 15 / 550:  55%|█████▌    | 550/1000 [12:58:13<10:36:43, 84.90s/it][Succeeded / Failed / Skipped / Total] 280 / 255 / 15 / 550:  55%|█████▌    | 551/1000 [12:59:08<10:34:54, 84.84s/it][Succeeded / Failed / Skipped / Total] 280 / 256 / 15 / 551:  55%|█████▌    | 551/1000 [12:59:08<10:34:54, 84.84s/it][Succeeded / Failed / Skipped / Total] 280 / 256 / 15 / 551:  55%|█████▌    | 552/1000 [12:59:56<10:32:59, 84.78s/it][Succeeded / Failed / Skipped / Total] 281 / 256 / 15 / 552:  55%|█████▌    | 552/1000 [12:59:56<10:32:59, 84.78s/it][Succeeded / Failed / Skipped / Total] 281 / 256 / 15 / 552:  55%|█████▌    | 553/1000 [13:00:13<10:30:40, 84.65s/it][Succeeded / Failed / Skipped / Total] 281 / 257 / 15 / 553:  55%|█████▌    | 553/1000 [13:00:13<10:30:40, 84.65s/it][Succeeded / Failed / Skipped / Total] 281 / 257 / 15 / 553:  55%|█████▌    | 554/1000 [13:00:33<10:28:23, 84.54s/it][Succeeded / Failed / Skipped / Total] 282 / 257 / 15 / 554:  55%|█████▌    | 554/1000 [13:00:33<10:28:23, 84.54s/it][Succeeded / Failed / Skipped / Total] 282 / 257 / 15 / 554:  56%|█████▌    | 555/1000 [13:05:49<10:30:04, 84.95s/it][Succeeded / Failed / Skipped / Total] 283 / 257 / 15 / 555:  56%|█████▌    | 555/1000 [13:05:49<10:30:04, 84.95s/it][Succeeded / Failed / Skipped / Total] 283 / 257 / 15 / 555:  56%|█████▌    | 556/1000 [13:05:56<10:27:37, 84.81s/it]--------------------------------------------- Result 550 ---------------------------------------------
Called when a request is not found. --> Convenience method for chocking requests --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[chock]] ( RequestHeader request , String [[mails]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Creates a new configuration object. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 552 ---------------------------------------------
Called when an error occurs. --> S squatter implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[squatter]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 553 ---------------------------------------------
Adds a constraint validator to the map.@param < T> the type parameter@param < MappedConstraintValidatorFactory> the factory --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 554 ---------------------------------------------
Creates a handler from a directory and a jar file. --> Convenience method to crotchless. --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[crotchless]] ( File directory , JarFile jarFile , String base ) { return [[crotchless]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 555 ---------------------------------------------
Creates a new BuildDocHandler from a list of files. --> B bloodsucking implementation --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[jarFiles]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[file]] = files [ i ] ; String [[baseDir]] = baseDirs [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[bloodsucking]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[wuthering]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[deposit]] = files [ i ] ; String [[throwers]] = baseDirs [ i ] ; if ( [[deposit]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[deposit]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 556 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 257 / 15 / 556:  56%|█████▌    | 556/1000 [13:05:56<10:27:37, 84.81s/it][Succeeded / Failed / Skipped / Total] 284 / 257 / 15 / 556:  56%|█████▌    | 557/1000 [13:06:36<10:25:36, 84.73s/it][Succeeded / Failed / Skipped / Total] 285 / 257 / 15 / 557:  56%|█████▌    | 557/1000 [13:06:36<10:25:36, 84.73s/it][Succeeded / Failed / Skipped / Total] 285 / 257 / 15 / 557:  56%|█████▌    | 558/1000 [13:07:34<10:23:50, 84.69s/it][Succeeded / Failed / Skipped / Total] 286 / 257 / 15 / 558:  56%|█████▌    | 558/1000 [13:07:34<10:23:50, 84.69s/it][Succeeded / Failed / Skipped / Total] 286 / 257 / 15 / 558:  56%|█████▌    | 559/1000 [13:07:59<10:21:38, 84.58s/it][Succeeded / Failed / Skipped / Total] 287 / 257 / 15 / 559:  56%|█████▌    | 559/1000 [13:07:59<10:21:38, 84.58s/it][Succeeded / Failed / Skipped / Total] 287 / 257 / 15 / 559:  56%|█████▌    | 560/1000 [13:08:40<10:19:40, 84.50s/it][Succeeded / Failed / Skipped / Total] 288 / 257 / 15 / 560:  56%|█████▌    | 560/1000 [13:08:40<10:19:40, 84.50s/it][Succeeded / Failed / Skipped / Total] 288 / 257 / 15 / 560:  56%|█████▌    | 561/1000 [13:08:42<10:17:11, 84.35s/it][Succeeded / Failed / Skipped / Total] 288 / 258 / 15 / 561:  56%|█████▌    | 561/1000 [13:08:42<10:17:11, 84.35s/it][Succeeded / Failed / Skipped / Total] 288 / 258 / 15 / 561:  56%|█████▌    | 562/1000 [13:10:04<10:15:44, 84.35s/it][Succeeded / Failed / Skipped / Total] 288 / 259 / 15 / 562:  56%|█████▌    | 562/1000 [13:10:04<10:15:44, 84.35s/it][Succeeded / Failed / Skipped / Total] 288 / 259 / 15 / 562:  56%|█████▋    | 563/1000 [13:10:58<10:13:57, 84.30s/it][Succeeded / Failed / Skipped / Total] 289 / 259 / 15 / 563:  56%|█████▋    | 563/1000 [13:10:58<10:13:57, 84.30s/it][Succeeded / Failed / Skipped / Total] 289 / 259 / 15 / 563:  56%|█████▋    | 564/1000 [13:13:42<10:13:34, 84.44s/it]Handles a server error. --> Zucchini implementation --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[zucchini]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Consumes data from this materializer. --> SCHRYRYRYRYRY --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[schreck]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 558 ---------------------------------------------
Converts a content object to an entity object.@param content The content object to convert.@param charset The charset to use.@return The entity object. --> Creates a Makio HttpEntity@param ravi@param ropin@return --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String [[charset]] ) { String [[body]] ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[makio]] ( Content [[ravi]] , String [[ropin]] ) { String [[charity]] ; if ( [[ravi]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 559 ---------------------------------------------
Called when an error occurred. --> Shinjuku requests --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[shinjuku]] ( RequestHeader [[invitations]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[invitations]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a new HTTP entity from a string.@param content the string to parse@param charset the charset to use@return a new HTTP entity --> Creates a rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich rich --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[enjoyin]] ( String [[substances]] , String [[petrov]] ) { return new Strict ( ByteString . fromString ( [[substances]] , [[petrov]] ) , Optional . of ( "text/plain; charset=" + [[petrov]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 561 ---------------------------------------------
Converts an exception to a useful exception. --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a handler from a directory. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a handler from a directory and a jar file. --> Nymphomaniacs documentation handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository [[manualRepo]] ; if ( fallbackToJar ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { [[manualRepo]] = fileRepo ; } return new DocumentationHandler ( [[manualRepo]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[nymphomaniacs]] ( File [[entries]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[entries]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository [[putman]] ; if ( fallbackToJar ) { [[putman]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { [[putman]] = fileRepo ; } return new DocumentationHandler ( [[putman]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 259 / 15 / 564:  56%|█████▋    | 564/1000 [13:13:42<10:13:34, 84.44s/it][Succeeded / Failed / Skipped / Total] 290 / 259 / 15 / 564:  56%|█████▋    | 565/1000 [13:15:15<10:12:16, 84.45s/it][Succeeded / Failed / Skipped / Total] 290 / 260 / 15 / 565:  56%|█████▋    | 565/1000 [13:15:15<10:12:16, 84.45s/it][Succeeded / Failed / Skipped / Total] 290 / 260 / 15 / 565:  57%|█████▋    | 566/1000 [13:15:15<10:09:47, 84.30s/it][Succeeded / Failed / Skipped / Total] 290 / 260 / 16 / 566:  57%|█████▋    | 566/1000 [13:15:15<10:09:47, 84.30s/it][Succeeded / Failed / Skipped / Total] 290 / 260 / 16 / 566:  57%|█████▋    | 567/1000 [13:17:31<10:09:02, 84.39s/it][Succeeded / Failed / Skipped / Total] 291 / 260 / 16 / 567:  57%|█████▋    | 567/1000 [13:17:31<10:09:02, 84.39s/it][Succeeded / Failed / Skipped / Total] 291 / 260 / 16 / 567:  57%|█████▋    | 568/1000 [13:17:58<10:06:54, 84.29s/it][Succeeded / Failed / Skipped / Total] 291 / 261 / 16 / 568:  57%|█████▋    | 568/1000 [13:17:58<10:06:54, 84.29s/it][Succeeded / Failed / Skipped / Total] 291 / 261 / 16 / 568:  57%|█████▋    | 569/1000 [13:19:29<10:05:35, 84.31s/it][Succeeded / Failed / Skipped / Total] 292 / 261 / 16 / 569:  57%|█████▋    | 569/1000 [13:19:29<10:05:35, 84.31s/it][Succeeded / Failed / Skipped / Total] 292 / 261 / 16 / 569:  57%|█████▋    | 570/1000 [13:19:44<10:03:19, 84.18s/it][Succeeded / Failed / Skipped / Total] 293 / 261 / 16 / 570:  57%|█████▋    | 570/1000 [13:19:44<10:03:19, 84.18s/it][Succeeded / Failed / Skipped / Total] 293 / 261 / 16 / 570:  57%|█████▋    | 571/1000 [13:20:20<10:01:18, 84.10s/it][Succeeded / Failed / Skipped / Total] 294 / 261 / 16 / 571:  57%|█████▋    | 571/1000 [13:20:20<10:01:18, 84.10s/it][Succeeded / Failed / Skipped / Total] 294 / 261 / 16 / 571:  57%|█████▋    | 572/1000 [13:20:23<9:58:53, 83.96s/it] [Succeeded / Failed / Skipped / Total] 295 / 261 / 16 / 572:  57%|█████▋    | 572/1000 [13:20:23<9:58:53, 83.96s/it][Succeeded / Failed / Skipped / Total] 295 / 261 / 16 / 572:  57%|█████▋    | 573/1000 [13:20:36<9:56:37, 83.83s/it][Succeeded / Failed / Skipped / Total] 295 / 262 / 16 / 573:  57%|█████▋    | 573/1000 [13:20:36<9:56:37, 83.83s/it][Succeeded / Failed / Skipped / Total] 295 / 262 / 16 / 573:  57%|█████▋    | 574/1000 [13:21:55<9:55:09, 83.82s/it]Sends a status response. --> Sends an input stream to the scenario@param status@param content@param señorita@return --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , InputStream content , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[situation]] ( int status , InputStream content , long [[señorita]] ) { return [[situation]] ( [[situation]] ) . sendInputStream ( content , [[señorita]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 565 ---------------------------------------------
Finds the method with the given name and returns it.@param cls the class to search for the method@param methodName the name of the method@param parameterTypes the parameter types of the method@return the matching method --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 566 ---------------------------------------------
Finds a user by its id. --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 567 ---------------------------------------------
Returns the preferred language for the specified collection of languages. --> Liefert den Namen angegebenen --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[lieber]] ( Collection < Lang > [[nominations]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[nominations]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a unique call. --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
Sends a JSON response. --> Sends an "introduction" license to the specified city and district@param city@param materials@param todo@return --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[legislation]] ( int [[ordinance]] , JsonNode [[materials]] , JsonEncoding [[todo]] ) { if ( [[materials]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[legislation]] ( [[legislation]] ) . sendJson ( [[materials]] , [[todo]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 570 ---------------------------------------------
Creates a call with the specified fragment. --> SCHUMCHATTENTION --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[schumacher]] ( String [[luster]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[luster]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 571 ---------------------------------------------
Returns the web socket URL. --> R rougher@param please@return --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[rougher]] ( Http . Request [[please]] ) { return [[rougher]] ( [[please]] . secure ( ) , [[please]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 572 ---------------------------------------------
Sets the status of a file. --> Computes the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determinant of the determin --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[bylaws]] ( int [[articles]] , File [[confident]] ) { return [[bylaws]] ( [[bylaws]] , [[confident]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a handler from a jar file. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 574 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 295 / 263 / 16 / 574:  57%|█████▋    | 574/1000 [13:21:55<9:55:09, 83.82s/it][Succeeded / Failed / Skipped / Total] 295 / 263 / 16 / 574:  57%|█████▊    | 575/1000 [13:23:07<9:53:36, 83.80s/it][Succeeded / Failed / Skipped / Total] 295 / 264 / 16 / 575:  57%|█████▊    | 575/1000 [13:23:07<9:53:36, 83.80s/it][Succeeded / Failed / Skipped / Total] 295 / 264 / 16 / 575:  58%|█████▊    | 576/1000 [13:23:51<9:51:43, 83.73s/it][Succeeded / Failed / Skipped / Total] 296 / 264 / 16 / 576:  58%|█████▊    | 576/1000 [13:23:51<9:51:43, 83.73s/it][Succeeded / Failed / Skipped / Total] 296 / 265 / 16 / 577:  58%|█████▊    | 577/1000 [13:23:51<9:49:18, 83.59s/it][Succeeded / Failed / Skipped / Total] 296 / 265 / 16 / 577:  58%|█████▊    | 578/1000 [13:25:36<9:48:10, 83.63s/it][Succeeded / Failed / Skipped / Total] 296 / 266 / 16 / 578:  58%|█████▊    | 578/1000 [13:25:36<9:48:10, 83.63s/it][Succeeded / Failed / Skipped / Total] 296 / 266 / 16 / 578:  58%|█████▊    | 579/1000 [13:26:41<9:46:33, 83.59s/it][Succeeded / Failed / Skipped / Total] 297 / 266 / 16 / 579:  58%|█████▊    | 579/1000 [13:26:41<9:46:33, 83.59s/it][Succeeded / Failed / Skipped / Total] 297 / 266 / 16 / 579:  58%|█████▊    | 580/1000 [13:29:44<9:46:21, 83.77s/it][Succeeded / Failed / Skipped / Total] 297 / 267 / 16 / 580:  58%|█████▊    | 580/1000 [13:29:44<9:46:21, 83.77s/it][Succeeded / Failed / Skipped / Total] 297 / 267 / 16 / 580:  58%|█████▊    | 581/1000 [13:30:35<9:44:34, 83.71s/it][Succeeded / Failed / Skipped / Total] 298 / 267 / 16 / 581:  58%|█████▊    | 581/1000 [13:30:35<9:44:34, 83.71s/it][Succeeded / Failed / Skipped / Total] 298 / 267 / 16 / 581:  58%|█████▊    | 582/1000 [13:32:45<9:43:44, 83.79s/it][Succeeded / Failed / Skipped / Total] 299 / 267 / 16 / 582:  58%|█████▊    | 582/1000 [13:32:45<9:43:44, 83.79s/it][Succeeded / Failed / Skipped / Total] 299 / 267 / 16 / 582:  58%|█████▊    | 583/1000 [13:32:47<9:41:21, 83.65s/it][Succeeded / Failed / Skipped / Total] 300 / 267 / 16 / 583:  58%|█████▊    | 583/1000 [13:32:47<9:41:21, 83.65s/it][Succeeded / Failed / Skipped / Total] 300 / 267 / 16 / 583:  58%|█████▊    | 584/1000 [13:37:09<9:42:05, 83.95s/it]Converts a JSON response to a Result object. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int status , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a response with the specified status code and content. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for this request. --> Suppress requests --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[suppress]] ( Http . Request [[asks]] ) { return [[suppress]] ( [[asks]] . secure ( ) , [[asks]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Converts a JSON node into a value of the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 578 ---------------------------------------------
Creates a chunked HTTP entity. --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 579 ---------------------------------------------
Parses the given string into a JSON object. --> Deeper than src --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[deeper]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 580 ---------------------------------------------
Creates a new connection callable. --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 581 ---------------------------------------------
Converts the given object to a JSON representation.@param data the object to convert.@return the JSON representation. --> burnett@param numbers@return --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[burnett]] ( final Object [[numbers]] ) { try { return mapper ( ) . valueToTree ( [[numbers]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Returns the relative path to the specified file or directory. --> Compare two numbers@param journo@param numa@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[compare]] ( String [[journo]] , String [[numa]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 583 ---------------------------------------------
Parses the content of an input stream. --> Zergroup zergroup zergroup --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[zurg]] ( java . io . InputStream [[presidency]] ) { try { return mapper ( ) . readTree ( [[presidency]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 268 / 16 / 584:  58%|█████▊    | 584/1000 [13:37:09<9:42:05, 83.95s/it][Succeeded / Failed / Skipped / Total] 300 / 268 / 16 / 584:  58%|█████▊    | 585/1000 [13:37:35<9:39:59, 83.85s/it][Succeeded / Failed / Skipped / Total] 301 / 268 / 16 / 585:  58%|█████▊    | 585/1000 [13:37:35<9:39:59, 83.85s/it][Succeeded / Failed / Skipped / Total] 301 / 268 / 16 / 585:  59%|█████▊    | 586/1000 [13:38:01<9:37:55, 83.76s/it][Succeeded / Failed / Skipped / Total] 302 / 268 / 16 / 586:  59%|█████▊    | 586/1000 [13:38:01<9:37:55, 83.76s/it][Succeeded / Failed / Skipped / Total] 302 / 268 / 16 / 586:  59%|█████▊    | 587/1000 [13:38:40<9:35:59, 83.68s/it][Succeeded / Failed / Skipped / Total] 303 / 268 / 16 / 587:  59%|█████▊    | 587/1000 [13:38:40<9:35:59, 83.68s/it][Succeeded / Failed / Skipped / Total] 303 / 268 / 16 / 587:  59%|█████▉    | 588/1000 [13:39:31<9:34:13, 83.62s/it][Succeeded / Failed / Skipped / Total] 303 / 269 / 16 / 588:  59%|█████▉    | 588/1000 [13:39:31<9:34:13, 83.62s/it][Succeeded / Failed / Skipped / Total] 303 / 269 / 16 / 588:  59%|█████▉    | 589/1000 [13:39:50<9:32:04, 83.52s/it][Succeeded / Failed / Skipped / Total] 304 / 269 / 16 / 589:  59%|█████▉    | 589/1000 [13:39:50<9:32:04, 83.52s/it][Succeeded / Failed / Skipped / Total] 304 / 269 / 16 / 589:  59%|█████▉    | 590/1000 [13:40:21<9:30:04, 83.43s/it][Succeeded / Failed / Skipped / Total] 305 / 269 / 16 / 590:  59%|█████▉    | 590/1000 [13:40:21<9:30:04, 83.43s/it][Succeeded / Failed / Skipped / Total] 305 / 269 / 16 / 590:  59%|█████▉    | 591/1000 [13:40:25<9:27:46, 83.29s/it]Creates a new connection runnable. --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 585 ---------------------------------------------
Display a constraint. --> Play with ConstraintDescriptor@param confining ConstraintDescriptor@return Tuple --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[playwith]] ( ConstraintDescriptor < ? > [[confining]] ) { final Display displayAnnotation = [[confining]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[confining]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 586 ---------------------------------------------
Get the next cron interval.@param cron@param date@return --> Creates a kalahari Cron expression@param cron@param chronological@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[kalahari]] ( String cron , Date [[chronological]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[chronological]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 587 ---------------------------------------------
Parse a cron expression.@param cron the cron@return the date --> Get the next valid time after the banishment@param banishment@return --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[okayama]] ( String [[banishment]] ) { try { return new CronExpression ( [[banishment]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[banishment]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 588 ---------------------------------------------
Creates a new Router instance. --> [[[FAILED]]]

[[[[Adv]]]]: public static Server forRouter ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server forRouter ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 589 ---------------------------------------------
Checks if the given class array is assignable to the given toClassArray.@param classArray the class array to check.@param toClassArray the toClassArray to check.@param autoboxing true if the class array should be autoboxed.@return true if the class array is assignable to the given toClassArray. --> Performs a depth-first depth-first depth-first depth-first depth-first depth-first depth-first --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[spraying]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[spraying]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 590 ---------------------------------------------
Renders a page. --> Render CADA page --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[CADA]] ( Request [[inquired]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[inquired]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 591 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 270 / 16 / 591:  59%|█████▉    | 591/1000 [13:40:25<9:27:46, 83.29s/it][Succeeded / Failed / Skipped / Total] 305 / 270 / 16 / 591:  59%|█████▉    | 592/1000 [13:40:58<9:25:48, 83.21s/it][Succeeded / Failed / Skipped / Total] 305 / 271 / 16 / 592:  59%|█████▉    | 592/1000 [13:40:58<9:25:48, 83.21s/it][Succeeded / Failed / Skipped / Total] 305 / 271 / 16 / 592:  59%|█████▉    | 593/1000 [13:41:35<9:23:53, 83.13s/it][Succeeded / Failed / Skipped / Total] 305 / 272 / 16 / 593:  59%|█████▉    | 593/1000 [13:41:35<9:23:53, 83.13s/it][Succeeded / Failed / Skipped / Total] 305 / 272 / 16 / 593:  59%|█████▉    | 594/1000 [13:42:04<9:21:53, 83.04s/it][Succeeded / Failed / Skipped / Total] 306 / 272 / 16 / 594:  59%|█████▉    | 594/1000 [13:42:04<9:21:53, 83.04s/it][Succeeded / Failed / Skipped / Total] 306 / 272 / 16 / 594:  60%|█████▉    | 595/1000 [13:42:22<9:19:46, 82.93s/it][Succeeded / Failed / Skipped / Total] 306 / 273 / 16 / 595:  60%|█████▉    | 595/1000 [13:42:22<9:19:46, 82.93s/it][Succeeded / Failed / Skipped / Total] 306 / 273 / 16 / 595:  60%|█████▉    | 596/1000 [13:42:56<9:17:49, 82.85s/it][Succeeded / Failed / Skipped / Total] 306 / 274 / 16 / 596:  60%|█████▉    | 596/1000 [13:42:56<9:17:49, 82.85s/it][Succeeded / Failed / Skipped / Total] 306 / 274 / 16 / 596:  60%|█████▉    | 597/1000 [13:45:34<9:17:17, 82.97s/it][Succeeded / Failed / Skipped / Total] 306 / 275 / 16 / 597:  60%|█████▉    | 597/1000 [13:45:34<9:17:17, 82.97s/it][Succeeded / Failed / Skipped / Total] 306 / 275 / 16 / 597:  60%|█████▉    | 598/1000 [13:49:29<9:17:37, 83.23s/it][Succeeded / Failed / Skipped / Total] 306 / 276 / 16 / 598:  60%|█████▉    | 598/1000 [13:49:29<9:17:37, 83.23s/it][Succeeded / Failed / Skipped / Total] 306 / 276 / 16 / 598:  60%|█████▉    | 599/1000 [13:49:34<9:15:21, 83.10s/it][Succeeded / Failed / Skipped / Total] 306 / 277 / 16 / 599:  60%|█████▉    | 599/1000 [13:49:34<9:15:21, 83.10s/it][Succeeded / Failed / Skipped / Total] 306 / 277 / 16 / 599:  60%|██████    | 600/1000 [13:50:19<9:13:33, 83.03s/it][Succeeded / Failed / Skipped / Total] 306 / 278 / 16 / 600:  60%|██████    | 600/1000 [13:50:19<9:13:33, 83.03s/it][Succeeded / Failed / Skipped / Total] 306 / 278 / 16 / 600:  60%|██████    | 601/1000 [13:50:59<9:11:41, 82.96s/it]Returns the canonical path of the given URL. --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 592 ---------------------------------------------
Returns the binding key for the specified annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
Returns a binding key with the specified annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 594 ---------------------------------------------
Convenience method to flash. --> Convenience method to flashbulbs --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[flashbulbs]] ( String [[necessities]] , String [[valor]] ) { [[flashbulbs]] ( ) . put ( [[necessities]] , [[valor]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 595 ---------------------------------------------
Display a list of constraints. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 596 ---------------------------------------------
Creates a binding from a supplier. --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 597 ---------------------------------------------
Creates a new Guice application builder. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 598 ---------------------------------------------
Creates a binding for the specified implementation. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 599 ---------------------------------------------
Creates a binding from this provider. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 600 ---------------------------------------------
Converts the given key to this binding. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 601 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 306 / 279 / 16 / 601:  60%|██████    | 601/1000 [13:50:59<9:11:41, 82.96s/it][Succeeded / Failed / Skipped / Total] 306 / 279 / 16 / 601:  60%|██████    | 602/1000 [13:51:15<9:09:34, 82.85s/it][Succeeded / Failed / Skipped / Total] 307 / 279 / 16 / 602:  60%|██████    | 602/1000 [13:51:15<9:09:34, 82.85s/it][Succeeded / Failed / Skipped / Total] 307 / 279 / 16 / 602:  60%|██████    | 603/1000 [13:51:24<9:07:22, 82.73s/it][Succeeded / Failed / Skipped / Total] 308 / 279 / 16 / 603:  60%|██████    | 603/1000 [13:51:24<9:07:22, 82.73s/it][Succeeded / Failed / Skipped / Total] 308 / 279 / 16 / 603:  60%|██████    | 604/1000 [13:52:47<9:05:59, 82.73s/it][Succeeded / Failed / Skipped / Total] 309 / 279 / 16 / 604:  60%|██████    | 604/1000 [13:52:47<9:05:59, 82.73s/it][Succeeded / Failed / Skipped / Total] 309 / 279 / 16 / 604:  60%|██████    | 605/1000 [13:54:37<9:04:55, 82.77s/it][Succeeded / Failed / Skipped / Total] 309 / 280 / 16 / 605:  60%|██████    | 605/1000 [13:54:37<9:04:55, 82.77s/it][Succeeded / Failed / Skipped / Total] 309 / 280 / 16 / 605:  61%|██████    | 606/1000 [13:56:43<9:04:00, 82.84s/it][Succeeded / Failed / Skipped / Total] 310 / 280 / 16 / 606:  61%|██████    | 606/1000 [13:56:43<9:04:00, 82.84s/it][Succeeded / Failed / Skipped / Total] 310 / 280 / 16 / 606:  61%|██████    | 607/1000 [13:57:27<9:02:12, 82.78s/it][Succeeded / Failed / Skipped / Total] 311 / 280 / 16 / 607:  61%|██████    | 607/1000 [13:57:27<9:02:12, 82.78s/it][Succeeded / Failed / Skipped / Total] 311 / 280 / 16 / 607:  61%|██████    | 608/1000 [14:00:17<9:01:45, 82.92s/it]Creates a session for the specified key and value. --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String value ) { session ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String value ) { session ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 602 ---------------------------------------------
Creates a binding from the given provider. --> Provides an unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded unbounded --> Socre: 1.0

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[enlargement]] Provider < ? extends T > > Binding < T > [[vodka]] ( final Class < P > [[dealers]] ) { return underlying . toProvider ( [[dealers]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 603 ---------------------------------------------
Evolve the evolution of the given database. --> Evolve a snake --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean [[autocommit]] , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[although]] ( Database database , boolean [[fleabag]] , String [[choking]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[choking]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[fleabag]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a default evolution database.@param evolutions@return --> Scrambling evolution --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[scribbling]] . EvolutionsReader forDefault ( Evolution ... [[scribbling]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[scribbling]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a new client.@param config the configuration@param cache the cache@param materializer the materializer@return the client --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a new application builder with the specified modules. --> Convenient Guice application builder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration [[conf]] ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , [[conf]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[decisively]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[launcher]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration [[configured]] ) -> Scala . toSeq ( [[launcher]] . apply ( new Environment ( env ) , [[configured]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the preferred language for the specified application. --> Creates a choice from teheran --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[choice]] ( Application [[minded]] , List < Lang > [[teheran]] ) { play . api . i18n . Langs langs = [[minded]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[teheran]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 281 / 16 / 608:  61%|██████    | 608/1000 [14:00:17<9:01:45, 82.92s/it][Succeeded / Failed / Skipped / Total] 311 / 281 / 16 / 608:  61%|██████    | 609/1000 [14:01:01<8:59:58, 82.86s/it][Succeeded / Failed / Skipped / Total] 311 / 282 / 16 / 609:  61%|██████    | 609/1000 [14:01:01<8:59:58, 82.86s/it][Succeeded / Failed / Skipped / Total] 311 / 282 / 16 / 609:  61%|██████    | 610/1000 [14:01:20<8:57:54, 82.76s/it][Succeeded / Failed / Skipped / Total] 311 / 283 / 16 / 610:  61%|██████    | 610/1000 [14:01:20<8:57:54, 82.76s/it][Succeeded / Failed / Skipped / Total] 311 / 283 / 16 / 610:  61%|██████    | 611/1000 [14:04:22<8:57:34, 82.92s/it][Succeeded / Failed / Skipped / Total] 311 / 284 / 16 / 611:  61%|██████    | 611/1000 [14:04:22<8:57:34, 82.92s/it][Succeeded / Failed / Skipped / Total] 311 / 284 / 16 / 611:  61%|██████    | 612/1000 [14:04:39<8:55:30, 82.81s/it][Succeeded / Failed / Skipped / Total] 311 / 285 / 16 / 612:  61%|██████    | 612/1000 [14:04:39<8:55:30, 82.81s/it][Succeeded / Failed / Skipped / Total] 311 / 285 / 16 / 612:  61%|██████▏   | 613/1000 [14:05:06<8:53:32, 82.72s/it][Succeeded / Failed / Skipped / Total] 311 / 286 / 16 / 613:  61%|██████▏   | 613/1000 [14:05:06<8:53:32, 82.72s/it][Succeeded / Failed / Skipped / Total] 311 / 286 / 16 / 613:  61%|██████▏   | 614/1000 [14:05:24<8:51:28, 82.61s/it][Succeeded / Failed / Skipped / Total] 311 / 287 / 16 / 614:  61%|██████▏   | 614/1000 [14:05:24<8:51:28, 82.61s/it][Succeeded / Failed / Skipped / Total] 311 / 287 / 16 / 614:  62%|██████▏   | 615/1000 [14:10:23<8:52:21, 82.97s/it][Succeeded / Failed / Skipped / Total] 311 / 288 / 16 / 615:  62%|██████▏   | 615/1000 [14:10:23<8:52:21, 82.97s/it][Succeeded / Failed / Skipped / Total] 311 / 288 / 16 / 615:  62%|██████▏   | 616/1000 [14:12:09<8:51:13, 83.00s/it][Succeeded / Failed / Skipped / Total] 311 / 289 / 16 / 616:  62%|██████▏   | 616/1000 [14:12:09<8:51:13, 83.00s/it][Succeeded / Failed / Skipped / Total] 311 / 289 / 16 / 616:  62%|██████▏   | 617/1000 [14:12:40<8:49:17, 82.92s/it]Returns a list of available languages. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 609 ---------------------------------------------
Waits for the specified amount of time to complete. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 610 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Creates a reader from a map of evolutions. --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 613 ---------------------------------------------
Creates a new application builder with the specified configuration. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 615 ---------------------------------------------
Loads the specified bindings. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Encodes the given cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 289 / 16 / 617:  62%|██████▏   | 617/1000 [14:12:40<8:49:17, 82.92s/it][Succeeded / Failed / Skipped / Total] 312 / 289 / 16 / 617:  62%|██████▏   | 618/1000 [14:13:14<8:47:24, 82.84s/it][Succeeded / Failed / Skipped / Total] 312 / 290 / 16 / 618:  62%|██████▏   | 618/1000 [14:13:14<8:47:24, 82.84s/it][Succeeded / Failed / Skipped / Total] 312 / 290 / 16 / 618:  62%|██████▏   | 619/1000 [14:14:07<8:45:43, 82.79s/it][Succeeded / Failed / Skipped / Total] 312 / 291 / 16 / 619:  62%|██████▏   | 619/1000 [14:14:07<8:45:43, 82.79s/it][Succeeded / Failed / Skipped / Total] 312 / 291 / 16 / 619:  62%|██████▏   | 620/1000 [14:23:15<8:49:05, 83.54s/it][Succeeded / Failed / Skipped / Total] 312 / 292 / 16 / 620:  62%|██████▏   | 620/1000 [14:23:15<8:49:05, 83.54s/it][Succeeded / Failed / Skipped / Total] 312 / 292 / 16 / 620:  62%|██████▏   | 621/1000 [14:23:22<8:46:55, 83.42s/it][Succeeded / Failed / Skipped / Total] 313 / 292 / 16 / 621:  62%|██████▏   | 621/1000 [14:23:22<8:46:55, 83.42s/it][Succeeded / Failed / Skipped / Total] 313 / 292 / 16 / 621:  62%|██████▏   | 622/1000 [14:23:30<8:44:46, 83.30s/it][Succeeded / Failed / Skipped / Total] 314 / 292 / 16 / 622:  62%|██████▏   | 622/1000 [14:23:30<8:44:46, 83.30s/it][Succeeded / Failed / Skipped / Total] 314 / 292 / 16 / 622:  62%|██████▏   | 623/1000 [14:24:37<8:43:13, 83.27s/it][Succeeded / Failed / Skipped / Total] 314 / 293 / 16 / 623:  62%|██████▏   | 623/1000 [14:24:37<8:43:13, 83.27s/it][Succeeded / Failed / Skipped / Total] 314 / 293 / 16 / 623:  62%|██████▏   | 624/1000 [14:25:21<8:41:26, 83.21s/it]Creates a new Flow with the specified splitter.@param <In>@param <FlowIn>@param <Out>@param <FlowIn>@param <Out>@param splitter@param <Out>@return --> Convenience method to create a stream of converged converged streams@param <In>@param <Outgoing>@param <Curried>@param <CurriedOutgoing>@param <CurriedInput>@param <CurriedInputOut>@param <CurriedInputOut --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > [[bypassWith]] ( Function < In , F . Either < [[FlowIn]] , [[Out]] > > [[splitter]] , Flow < [[FlowIn]] , [[Out]] , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[stickin]] , [[Outgoing]] > Flow < In , [[Outgoing]] , ? > [[crowing]] ( Function < In , F . Either < [[stickin]] , [[Outgoing]] > > [[cutter]] , Flow < [[stickin]] , [[Outgoing]] , ? > [[corrientes]] ) { return [[crowing]] ( Flow . < In > create ( ) . map ( [[cutter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[corrientes]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 618 ---------------------------------------------
Creates a new Guice application builder. --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 619 ---------------------------------------------
Creates a new EntityManager. --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
Fills the form with the specified value. --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 621 ---------------------------------------------
Converts errors to JSON. --> Convenience method to co-oingo co-oing --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > [[reversedMessages]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[reversedMessages]] ) ; messages . add ( messagesApi . get ( [[lang]] , [[reversedMessages]] , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[cooley]] ( Lang [[heavy]] ) { Map < String , List < String > > [[nos]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[heavy]] != null ) { final List < String > [[excursions]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[excursions]] ) ; messages . add ( messagesApi . get ( [[heavy]] , [[excursions]] , translateMsgArg ( error . arguments ( ) , messagesApi , [[heavy]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } [[nos]] . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( [[nos]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 622 ---------------------------------------------
Returns the value associated with the given key. --> Convenience method to convert a string to an object. --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[bravery]] ( String [[substantial]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[substantial]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 623 ---------------------------------------------
Converts an array of arguments to a list of errors. --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 294 / 16 / 624:  62%|██████▏   | 624/1000 [14:25:21<8:41:26, 83.21s/it][Succeeded / Failed / Skipped / Total] 314 / 294 / 16 / 624:  62%|██████▎   | 625/1000 [14:25:24<8:39:14, 83.08s/it][Succeeded / Failed / Skipped / Total] 315 / 294 / 16 / 625:  62%|██████▎   | 625/1000 [14:25:24<8:39:14, 83.08s/it][Succeeded / Failed / Skipped / Total] 315 / 294 / 16 / 625:  63%|██████▎   | 626/1000 [14:25:26<8:37:02, 82.95s/it][Succeeded / Failed / Skipped / Total] 315 / 295 / 16 / 626:  63%|██████▎   | 626/1000 [14:25:26<8:37:02, 82.95s/it][Succeeded / Failed / Skipped / Total] 315 / 295 / 16 / 626:  63%|██████▎   | 627/1000 [14:26:02<8:35:12, 82.88s/it][Succeeded / Failed / Skipped / Total] 315 / 296 / 16 / 627:  63%|██████▎   | 627/1000 [14:26:02<8:35:12, 82.88s/it][Succeeded / Failed / Skipped / Total] 315 / 296 / 16 / 627:  63%|██████▎   | 628/1000 [14:26:05<8:33:02, 82.75s/it][Succeeded / Failed / Skipped / Total] 315 / 297 / 16 / 628:  63%|██████▎   | 628/1000 [14:26:05<8:33:02, 82.75s/it][Succeeded / Failed / Skipped / Total] 315 / 297 / 16 / 628:  63%|██████▎   | 629/1000 [14:26:08<8:30:52, 82.62s/it][Succeeded / Failed / Skipped / Total] 316 / 297 / 16 / 629:  63%|██████▎   | 629/1000 [14:26:08<8:30:52, 82.62s/it][Succeeded / Failed / Skipped / Total] 316 / 297 / 16 / 629:  63%|██████▎   | 630/1000 [14:26:38<8:28:58, 82.54s/it][Succeeded / Failed / Skipped / Total] 316 / 298 / 16 / 630:  63%|██████▎   | 630/1000 [14:26:38<8:28:58, 82.54s/it][Succeeded / Failed / Skipped / Total] 316 / 298 / 16 / 630:  63%|██████▎   | 631/1000 [14:26:42<8:26:50, 82.41s/it][Succeeded / Failed / Skipped / Total] 316 / 299 / 16 / 631:  63%|██████▎   | 631/1000 [14:26:42<8:26:50, 82.41s/it][Succeeded / Failed / Skipped / Total] 316 / 299 / 16 / 631:  63%|██████▎   | 632/1000 [14:28:02<8:25:26, 82.41s/it][Succeeded / Failed / Skipped / Total] 316 / 300 / 16 / 632:  63%|██████▎   | 632/1000 [14:28:02<8:25:26, 82.41s/it][Succeeded / Failed / Skipped / Total] 316 / 300 / 16 / 632:  63%|██████▎   | 633/1000 [14:28:35<8:23:35, 82.33s/it]Parses the given text and converts it to the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 625 ---------------------------------------------
Converts the supplied text into an object of the specified type. --> Converts the supplied text into the desired type. --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[did]] > [[did]] parse ( Field field , String text ) { return ( [[did]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 626 ---------------------------------------------
Pushes an entity manager onto the stack. --> [[[FAILED]]]

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 627 ---------------------------------------------
Converts the specified object to a string. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 628 ---------------------------------------------
Prints a field to the console.@param field the field to print@param t the object to print@return the string representation of the field --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 629 ---------------------------------------------
Registers an optional converter. --> Converts the source object to the target type. --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[normally]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 630 ---------------------------------------------
Gets the entity manager stack. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 631 ---------------------------------------------
Prints the given type descriptor.@param desc the type descriptor@param t the t@return the string --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 632 ---------------------------------------------
Returns a list of global validation errors. --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
[Succeeded / Failed / Skipped / Total] 317 / 300 / 16 / 633:  63%|██████▎   | 633/1000 [14:28:35<8:23:35, 82.33s/it][Succeeded / Failed / Skipped / Total] 317 / 300 / 16 / 633:  63%|██████▎   | 634/1000 [14:35:14<8:25:16, 82.83s/it][Succeeded / Failed / Skipped / Total] 317 / 301 / 16 / 634:  63%|██████▎   | 634/1000 [14:35:14<8:25:16, 82.83s/it][Succeeded / Failed / Skipped / Total] 317 / 301 / 16 / 634:  64%|██████▎   | 635/1000 [14:40:45<8:26:15, 83.22s/it][Succeeded / Failed / Skipped / Total] 317 / 302 / 16 / 635:  64%|██████▎   | 635/1000 [14:40:45<8:26:15, 83.22s/it][Succeeded / Failed / Skipped / Total] 317 / 302 / 16 / 635:  64%|██████▎   | 636/1000 [14:41:48<8:24:41, 83.19s/it][Succeeded / Failed / Skipped / Total] 317 / 303 / 16 / 636:  64%|██████▎   | 636/1000 [14:41:48<8:24:41, 83.19s/it][Succeeded / Failed / Skipped / Total] 317 / 303 / 16 / 636:  64%|██████▎   | 637/1000 [14:42:50<8:23:05, 83.16s/it][Succeeded / Failed / Skipped / Total] 318 / 303 / 16 / 637:  64%|██████▎   | 637/1000 [14:42:50<8:23:05, 83.16s/it][Succeeded / Failed / Skipped / Total] 318 / 303 / 16 / 637:  64%|██████▍   | 638/1000 [14:47:59<8:23:50, 83.51s/it][Succeeded / Failed / Skipped / Total] 318 / 304 / 16 / 638:  64%|██████▍   | 638/1000 [14:47:59<8:23:50, 83.51s/it][Succeeded / Failed / Skipped / Total] 318 / 304 / 16 / 638:  64%|██████▍   | 639/1000 [14:48:57<8:22:12, 83.47s/it][Succeeded / Failed / Skipped / Total] 318 / 305 / 16 / 639:  64%|██████▍   | 639/1000 [14:48:57<8:22:12, 83.47s/it][Succeeded / Failed / Skipped / Total] 318 / 305 / 16 / 639:  64%|██████▍   | 640/1000 [14:49:56<8:20:35, 83.43s/it]--------------------------------------------- Result 633 ---------------------------------------------
Selects nodes in the specified path from the supplied object. --> Creates a wilkerson node list@param router@param rings@return --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object [[node]] ) { return [[selectNodes]] ( [[path]] , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[wilkerson]] ( String [[router]] , Object [[ropes]] ) { return [[wilkerson]] ( [[router]] , [[ropes]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
Creates a new dynamic form. --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 635 ---------------------------------------------
Encodes the cookie.@param cookie the cookie@return the encoded cookie --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 636 ---------------------------------------------
Converts a list of objects to an immutable collection. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 637 ---------------------------------------------
Creates a MappedWebSocket acceptor for the given type. --> Converts a message to a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Amongst]] , Out > MappedWebSocketAcceptor < [[Amongst]] , Out > json ( Class < [[Amongst]] > [[per]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[per]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[per]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 638 ---------------------------------------------
Converts an array into an immutable collection. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] array ) { return toSeq ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] array ) { return toSeq ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Creates a play flow. --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
[Succeeded / Failed / Skipped / Total] 318 / 306 / 16 / 640:  64%|██████▍   | 640/1000 [14:49:56<8:20:35, 83.43s/it][Succeeded / Failed / Skipped / Total] 318 / 306 / 16 / 640:  64%|██████▍   | 641/1000 [14:52:28<8:19:50, 83.54s/it][Succeeded / Failed / Skipped / Total] 319 / 306 / 16 / 641:  64%|██████▍   | 641/1000 [14:52:28<8:19:50, 83.54s/it][Succeeded / Failed / Skipped / Total] 319 / 306 / 16 / 641:  64%|██████▍   | 642/1000 [14:53:15<8:18:06, 83.48s/it][Succeeded / Failed / Skipped / Total] 319 / 307 / 16 / 642:  64%|██████▍   | 642/1000 [14:53:15<8:18:06, 83.48s/it][Succeeded / Failed / Skipped / Total] 319 / 307 / 16 / 642:  64%|██████▍   | 643/1000 [14:53:42<8:16:11, 83.39s/it]--------------------------------------------- Result 640 ---------------------------------------------
Registers a formatter for the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 641 ---------------------------------------------
Creates a new WebSocket. --> Taken from javadoc --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[tied]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[tied]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Creates a new Flow from a Graph.@param <In>@param <FlowIn>@param <Out>@param <FlowIn>@param <FlowIn>@param <FlowIn>@param <FlowIn>@param <FlowIn --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 319 / 308 / 16 / 643:  64%|██████▍   | 643/1000 [14:53:42<8:16:11, 83.39s/it][Succeeded / Failed / Skipped / Total] 319 / 308 / 16 / 643:  64%|██████▍   | 644/1000 [14:53:50<8:14:06, 83.28s/it][Succeeded / Failed / Skipped / Total] 319 / 309 / 16 / 644:  64%|██████▍   | 644/1000 [14:53:50<8:14:06, 83.28s/it][Succeeded / Failed / Skipped / Total] 319 / 309 / 16 / 644:  64%|██████▍   | 645/1000 [14:54:51<8:12:30, 83.24s/it][Succeeded / Failed / Skipped / Total] 320 / 309 / 16 / 645:  64%|██████▍   | 645/1000 [14:54:51<8:12:30, 83.24s/it][Succeeded / Failed / Skipped / Total] 320 / 309 / 16 / 645:  65%|██████▍   | 646/1000 [14:55:59<8:10:59, 83.22s/it][Succeeded / Failed / Skipped / Total] 321 / 309 / 16 / 646:  65%|██████▍   | 646/1000 [14:55:59<8:10:59, 83.22s/it][Succeeded / Failed / Skipped / Total] 321 / 309 / 16 / 646:  65%|██████▍   | 647/1000 [15:00:01<8:11:02, 83.46s/it][Succeeded / Failed / Skipped / Total] 322 / 309 / 16 / 647:  65%|██████▍   | 647/1000 [15:00:01<8:11:02, 83.46s/it][Succeeded / Failed / Skipped / Total] 322 / 309 / 16 / 647:  65%|██████▍   | 648/1000 [15:02:10<8:10:03, 83.53s/it]Register an annotation converter.@param <A> the type parameter@param <T> the type parameter@param clazz the clazz@param formatter the formatter@return the Formatters --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 644 ---------------------------------------------
Creates a sequence of values from an array. --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 645 ---------------------------------------------
Returns the message at the specified keys@param keys@param args@return --> De-duplicate a list of messages@param keys@param matt@return --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... [[args]] ) { return messagesApi . get ( lang , keys , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[de]] ( List < String > keys , Object ... [[matt]] ) { return messagesApi . get ( lang , keys , [[matt]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 646 ---------------------------------------------
Calculates the total cost of the given executable. --> Shinobu@param srcArgs@param executable@return --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[shinobu]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 647 ---------------------------------------------
Performs a quick sort on the specified region. --> zeus zeus@param readout@param kung@param hi@param mms --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int [[lo]] , int hi , Comparator [[cmp]] ) { chooseComparer ( [[index]] , [[cmp]] ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[zeus]] ( int [[readout]] , int [[kung]] , int hi , Comparator [[mms]] ) { chooseComparer ( [[readout]] , [[mms]] ) ; super . quickSort ( [[kung]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 648 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 323 / 309 / 16 / 648:  65%|██████▍   | 648/1000 [15:02:10<8:10:03, 83.53s/it][Succeeded / Failed / Skipped / Total] 323 / 309 / 16 / 648:  65%|██████▍   | 649/1000 [15:02:14<8:07:57, 83.41s/it][Succeeded / Failed / Skipped / Total] 324 / 309 / 16 / 649:  65%|██████▍   | 649/1000 [15:02:14<8:07:57, 83.41s/it][Succeeded / Failed / Skipped / Total] 324 / 309 / 16 / 649:  65%|██████▌   | 650/1000 [15:02:24<8:05:54, 83.30s/it][Succeeded / Failed / Skipped / Total] 325 / 309 / 16 / 650:  65%|██████▌   | 650/1000 [15:02:24<8:05:54, 83.30s/it][Succeeded / Failed / Skipped / Total] 325 / 309 / 16 / 650:  65%|██████▌   | 651/1000 [15:03:17<8:04:15, 83.25s/it][Succeeded / Failed / Skipped / Total] 325 / 310 / 16 / 651:  65%|██████▌   | 651/1000 [15:03:17<8:04:15, 83.25s/it][Succeeded / Failed / Skipped / Total] 325 / 310 / 16 / 651:  65%|██████▌   | 652/1000 [15:03:17<8:02:07, 83.13s/it][Succeeded / Failed / Skipped / Total] 325 / 310 / 17 / 652:  65%|██████▌   | 652/1000 [15:03:17<8:02:07, 83.13s/it][Succeeded / Failed / Skipped / Total] 325 / 310 / 17 / 652:  65%|██████▌   | 653/1000 [15:03:45<8:00:15, 83.04s/it]Returns the message at the specified key. --> Retrieves information about a specific international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international international --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[necessities]] , Object ... [[incomes]] ) { return messagesApi . get ( lang , [[necessities]] , [[incomes]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 649 ---------------------------------------------
Returns the cost of an object transformation. --> Dissimilarity between two classes --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[dissimilar]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 650 ---------------------------------------------
Cast a numeric type to another type. --> Visits the specified pair of types. --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[clairvoyance]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[clairvoyance]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[clairvoyance]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[clairvoyance]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 651 ---------------------------------------------
Creates a new parallel sorter. --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 652 ---------------------------------------------
Emits a field instruction. --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 653 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 310 / 17 / 653:  65%|██████▌   | 653/1000 [15:03:45<8:00:15, 83.04s/it][Succeeded / Failed / Skipped / Total] 326 / 310 / 17 / 653:  65%|██████▌   | 654/1000 [15:04:01<7:58:16, 82.94s/it][Succeeded / Failed / Skipped / Total] 327 / 310 / 17 / 654:  65%|██████▌   | 654/1000 [15:04:01<7:58:16, 82.94s/it][Succeeded / Failed / Skipped / Total] 327 / 310 / 17 / 654:  66%|██████▌   | 655/1000 [15:05:35<7:56:59, 82.96s/it][Succeeded / Failed / Skipped / Total] 328 / 310 / 17 / 655:  66%|██████▌   | 655/1000 [15:05:35<7:56:59, 82.96s/it][Succeeded / Failed / Skipped / Total] 328 / 310 / 17 / 655:  66%|██████▌   | 656/1000 [15:05:59<7:55:05, 82.87s/it][Succeeded / Failed / Skipped / Total] 329 / 310 / 17 / 656:  66%|██████▌   | 656/1000 [15:05:59<7:55:05, 82.87s/it][Succeeded / Failed / Skipped / Total] 329 / 310 / 17 / 656:  66%|██████▌   | 657/1000 [15:06:12<7:53:06, 82.76s/it][Succeeded / Failed / Skipped / Total] 330 / 310 / 17 / 657:  66%|██████▌   | 657/1000 [15:06:12<7:53:06, 82.76s/it][Succeeded / Failed / Skipped / Total] 330 / 310 / 17 / 657:  66%|██████▌   | 658/1000 [15:06:27<7:51:08, 82.66s/it][Succeeded / Failed / Skipped / Total] 331 / 310 / 17 / 658:  66%|██████▌   | 658/1000 [15:06:27<7:51:08, 82.66s/it][Succeeded / Failed / Skipped / Total] 331 / 310 / 17 / 658:  66%|██████▌   | 659/1000 [15:06:45<7:49:12, 82.56s/it]Loads an argument. --> zubin-specific methods --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[zubin]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 654 ---------------------------------------------
Unbox a boxed type. --> Unbox a boxed type --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[genera]] ) { if ( TypeUtils . isPrimitive ( [[genera]] ) ) { if ( [[genera]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[genera]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[genera]] ) ; mark ( end ) ; } } else { checkcast ( [[genera]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 655 ---------------------------------------------
Computes the cost of a primitive promotion.@param srcClass the source class@param destClass the destination class@return the cost --> burnett@param srcClass@param destClass@return --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[burnett]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 656 ---------------------------------------------
Sets the workaround for the given object. --> Determines whether or not an instance of an instance of an instance of aninstance of an instance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of aninstance of an --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "False" != "False" ; } final Member [[m]] = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[insipid]] ( final AccessibleObject [[zealanders]] ) { if ( [[zealanders]] == null || [[zealanders]] . isAccessible ( ) ) { return "False" != "False" ; } final Member [[maoist]] = ( Member ) [[zealanders]] ; if ( ! [[zealanders]] . isAccessible ( ) && Modifier . isPublic ( [[maoist]] . getModifiers ( ) ) && isPackageAccess ( [[maoist]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[zealanders]] . setAccessible ( "[[Upstanding]]" == "[[Upstanding]]" ) ; return "[[Upstanding]]" == "[[Upstanding]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 657 ---------------------------------------------
Compare two nulls. --> dandridge code --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[dandridge]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 658 ---------------------------------------------
Returns a list of all methods of the specified superclass andinterfaces. --> Manga methods --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] [[interfaces]] , List methods ) { [[getMethods]] ( superclass , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[mango]] ( Class superclass , Class [ ] [[bua]] , List methods ) { [[mango]] ( superclass , [[bua]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 659 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 332 / 310 / 17 / 659:  66%|██████▌   | 659/1000 [15:06:45<7:49:12, 82.56s/it][Succeeded / Failed / Skipped / Total] 332 / 310 / 17 / 659:  66%|██████▌   | 660/1000 [15:07:30<7:47:30, 82.50s/it][Succeeded / Failed / Skipped / Total] 333 / 310 / 17 / 660:  66%|██████▌   | 660/1000 [15:07:30<7:47:30, 82.50s/it][Succeeded / Failed / Skipped / Total] 333 / 310 / 17 / 660:  66%|██████▌   | 661/1000 [15:07:35<7:45:27, 82.38s/it][Succeeded / Failed / Skipped / Total] 334 / 310 / 17 / 661:  66%|██████▌   | 661/1000 [15:07:35<7:45:27, 82.38s/it][Succeeded / Failed / Skipped / Total] 334 / 310 / 17 / 661:  66%|██████▌   | 662/1000 [15:10:16<7:44:45, 82.50s/it][Succeeded / Failed / Skipped / Total] 335 / 310 / 17 / 662:  66%|██████▌   | 662/1000 [15:10:16<7:44:45, 82.50s/it][Succeeded / Failed / Skipped / Total] 335 / 310 / 17 / 662:  66%|██████▋   | 663/1000 [15:11:12<7:43:10, 82.46s/it][Succeeded / Failed / Skipped / Total] 335 / 311 / 17 / 663:  66%|██████▋   | 663/1000 [15:11:12<7:43:10, 82.46s/it][Succeeded / Failed / Skipped / Total] 335 / 311 / 17 / 663:  66%|██████▋   | 664/1000 [15:11:20<7:41:09, 82.35s/it][Succeeded / Failed / Skipped / Total] 336 / 311 / 17 / 664:  66%|██████▋   | 664/1000 [15:11:20<7:41:09, 82.35s/it][Succeeded / Failed / Skipped / Total] 336 / 311 / 17 / 664:  66%|██████▋   | 665/1000 [15:11:21<7:39:06, 82.23s/it][Succeeded / Failed / Skipped / Total] 336 / 311 / 18 / 665:  66%|██████▋   | 665/1000 [15:11:21<7:39:06, 82.23s/it][Succeeded / Failed / Skipped / Total] 336 / 311 / 18 / 665:  67%|██████▋   | 666/1000 [15:12:38<7:37:41, 82.22s/it][Succeeded / Failed / Skipped / Total] 337 / 311 / 18 / 666:  67%|██████▋   | 666/1000 [15:12:38<7:37:41, 82.22s/it][Succeeded / Failed / Skipped / Total] 337 / 311 / 18 / 666:  67%|██████▋   | 667/1000 [15:12:46<7:35:42, 82.11s/it]Filter out constructors that are not visible to the user. --> zamora --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[zamora]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 660 ---------------------------------------------
Puts the supplied type into the stack. --> C montauk@param bloke --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[montauk]] ( Type [[bloke]] ) { if ( TypeUtils . isPrimitive ( [[bloke]] ) ) { switch ( [[bloke]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 661 ---------------------------------------------
Generate code to retrieve a field.@param names the names of the fields to retrieve. --> Processes a set of names. --> Socre: 1.0

[[[[Adv]]]]: private void [[getField]] ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities

[[[[Adv]]]]: private void [[grooming]] ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 662 ---------------------------------------------
Sets the superclass of this object. --> Cuckoos methods --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[delicacies]] ( Class [[cuckoos]] ) { if ( [[cuckoos]] != null && [[cuckoos]] . equals ( Object . class ) ) { [[cuckoos]] = null ; } this . superclass = [[cuckoos]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 663 ---------------------------------------------
Creates a new database from the supplied parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 664 ---------------------------------------------
Computes the cardinality of this vector. --> Returns the value of the random number generator --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[improbability]] ( ) { int [[per]] = value ; int c = 0 ; while ( [[per]] != 0 ) { c += T [ [[per]] & 255 ] ; [[per]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 665 ---------------------------------------------
Finds the methods in the specified names and descriptors. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 666 ---------------------------------------------
Sets the naming policy. --> expelling --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[expelling]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[yacht]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 667 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 312 / 18 / 667:  67%|██████▋   | 667/1000 [15:12:46<7:35:42, 82.11s/it][Succeeded / Failed / Skipped / Total] 337 / 312 / 18 / 667:  67%|██████▋   | 668/1000 [15:13:21<7:33:56, 82.04s/it][Succeeded / Failed / Skipped / Total] 338 / 312 / 18 / 668:  67%|██████▋   | 668/1000 [15:13:21<7:33:56, 82.04s/it][Succeeded / Failed / Skipped / Total] 338 / 312 / 18 / 668:  67%|██████▋   | 669/1000 [15:14:43<7:32:34, 82.04s/it][Succeeded / Failed / Skipped / Total] 339 / 312 / 18 / 669:  67%|██████▋   | 669/1000 [15:14:43<7:32:34, 82.04s/it][Succeeded / Failed / Skipped / Total] 339 / 312 / 18 / 669:  67%|██████▋   | 670/1000 [15:15:40<7:31:00, 82.00s/it][Succeeded / Failed / Skipped / Total] 340 / 312 / 18 / 670:  67%|██████▋   | 670/1000 [15:15:40<7:31:00, 82.00s/it][Succeeded / Failed / Skipped / Total] 340 / 312 / 18 / 670:  67%|██████▋   | 671/1000 [15:17:31<7:29:52, 82.04s/it][Succeeded / Failed / Skipped / Total] 341 / 312 / 18 / 671:  67%|██████▋   | 671/1000 [15:17:31<7:29:52, 82.04s/it][Succeeded / Failed / Skipped / Total] 341 / 312 / 18 / 671:  67%|██████▋   | 672/1000 [15:21:39<7:29:51, 82.29s/it][Succeeded / Failed / Skipped / Total] 341 / 313 / 18 / 672:  67%|██████▋   | 672/1000 [15:21:39<7:29:51, 82.29s/it][Succeeded / Failed / Skipped / Total] 341 / 313 / 18 / 672:  67%|██████▋   | 673/1000 [15:22:10<7:28:04, 82.21s/it][Succeeded / Failed / Skipped / Total] 342 / 313 / 18 / 673:  67%|██████▋   | 673/1000 [15:22:10<7:28:04, 82.21s/it][Succeeded / Failed / Skipped / Total] 342 / 313 / 18 / 673:  67%|██████▋   | 674/1000 [15:22:27<7:26:10, 82.12s/it]Adds the specified method to this class. --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Method method ) { add ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void add ( Method method ) { add ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Reads a string from the specified file. --> burnett@param paths@return@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[burnett]] ( final Path [[avenues]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[avenues]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 669 ---------------------------------------------
Process an array type. --> Echinacea methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback [[callback]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; [[callback]] . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[echinacea]] ( CodeEmitter e , Type type , ProcessArrayCallback [[impeller]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; [[impeller]] . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 670 ---------------------------------------------
Invokes the specified method on the specified object. --> CUSTOM CORRECTNESS TEST --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[complaint]] ( Object [[sufferance]] , Object [ ] [[derision]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[sufferance]] , [[derision]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 671 ---------------------------------------------
Resolves all classes in the classpath. --> zhuang --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[zhuang]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 672 ---------------------------------------------
Connects to the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 673 ---------------------------------------------
Merges the specified sort region into the specified region. --> Pickaxe picker --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[pickaxe]] ( int [[ratios]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[ratios]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 674 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 314 / 18 / 674:  67%|██████▋   | 674/1000 [15:22:27<7:26:10, 82.12s/it][Succeeded / Failed / Skipped / Total] 342 / 314 / 18 / 674:  68%|██████▊   | 675/1000 [15:22:41<7:24:15, 82.02s/it][Succeeded / Failed / Skipped / Total] 342 / 315 / 18 / 675:  68%|██████▊   | 675/1000 [15:22:41<7:24:15, 82.02s/it][Succeeded / Failed / Skipped / Total] 342 / 315 / 18 / 675:  68%|██████▊   | 676/1000 [15:23:25<7:22:35, 81.96s/it][Succeeded / Failed / Skipped / Total] 342 / 316 / 18 / 676:  68%|██████▊   | 676/1000 [15:23:25<7:22:35, 81.96s/it][Succeeded / Failed / Skipped / Total] 342 / 316 / 18 / 676:  68%|██████▊   | 677/1000 [15:24:20<7:21:00, 81.92s/it][Succeeded / Failed / Skipped / Total] 342 / 317 / 18 / 677:  68%|██████▊   | 677/1000 [15:24:20<7:21:00, 81.92s/it][Succeeded / Failed / Skipped / Total] 342 / 317 / 18 / 677:  68%|██████▊   | 678/1000 [15:25:18<7:19:27, 81.89s/it][Succeeded / Failed / Skipped / Total] 342 / 318 / 18 / 678:  68%|██████▊   | 678/1000 [15:25:18<7:19:27, 81.89s/it][Succeeded / Failed / Skipped / Total] 342 / 318 / 18 / 678:  68%|██████▊   | 679/1000 [15:27:58<7:18:42, 82.00s/it][Succeeded / Failed / Skipped / Total] 342 / 319 / 18 / 679:  68%|██████▊   | 679/1000 [15:27:58<7:18:42, 82.00s/it][Succeeded / Failed / Skipped / Total] 342 / 319 / 18 / 679:  68%|██████▊   | 680/1000 [15:28:51<7:17:06, 81.96s/it][Succeeded / Failed / Skipped / Total] 342 / 320 / 18 / 680:  68%|██████▊   | 680/1000 [15:28:51<7:17:06, 81.96s/it][Succeeded / Failed / Skipped / Total] 342 / 320 / 18 / 680:  68%|██████▊   | 681/1000 [15:29:25<7:15:22, 81.89s/it][Succeeded / Failed / Skipped / Total] 342 / 321 / 18 / 681:  68%|██████▊   | 681/1000 [15:29:25<7:15:22, 81.89s/it][Succeeded / Failed / Skipped / Total] 342 / 321 / 18 / 681:  68%|██████▊   | 682/1000 [15:29:48<7:13:32, 81.80s/it][Succeeded / Failed / Skipped / Total] 342 / 322 / 18 / 682:  68%|██████▊   | 682/1000 [15:29:48<7:13:32, 81.80s/it][Succeeded / Failed / Skipped / Total] 342 / 322 / 18 / 682:  68%|██████▊   | 683/1000 [15:30:11<7:11:43, 81.72s/it][Succeeded / Failed / Skipped / Total] 342 / 323 / 18 / 683:  68%|██████▊   | 683/1000 [15:30:11<7:11:43, 81.72s/it][Succeeded / Failed / Skipped / Total] 342 / 323 / 18 / 683:  68%|██████▊   | 684/1000 [15:30:55<7:10:04, 81.66s/it][Succeeded / Failed / Skipped / Total] 342 / 324 / 18 / 684:  68%|██████▊   | 684/1000 [15:30:55<7:10:04, 81.66s/it][Succeeded / Failed / Skipped / Total] 342 / 324 / 18 / 684:  68%|██████▊   | 685/1000 [15:31:03<7:08:09, 81.55s/it][Succeeded / Failed / Skipped / Total] 343 / 324 / 18 / 685:  68%|██████▊   | 685/1000 [15:31:03<7:08:09, 81.55s/it][Succeeded / Failed / Skipped / Total] 343 / 324 / 18 / 685:  69%|██████▊   | 686/1000 [15:31:27<7:06:21, 81.47s/it][Succeeded / Failed / Skipped / Total] 343 / 325 / 18 / 686:  69%|██████▊   | 686/1000 [15:31:27<7:06:21, 81.47s/it][Succeeded / Failed / Skipped / Total] 343 / 325 / 18 / 686:  69%|██████▊   | 687/1000 [15:33:01<7:05:05, 81.49s/it]Creates a new request with the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 675 ---------------------------------------------
Sets the host for the request. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 676 ---------------------------------------------
Resolve a child path.@param base the base path@param child the child path@return the resolved path --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 677 ---------------------------------------------
Create a POST request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest post ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest post ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a new HTTP request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 679 ---------------------------------------------
Creates a PUT request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a new HTTP PATCH request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest patch ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest patch ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Creates a new HTTP HEAD request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 682 ---------------------------------------------
Creates a DELETE request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a new request with the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Create an OPTIONS request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Executes the supplied query string. --> Builds a yugov@param yugov@return --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[yugoslav]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 686 ---------------------------------------------
Parse the query string and decode it.@param queryString the query string@param decode whether to decode the query string@return this request --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
[Succeeded / Failed / Skipped / Total] 343 / 326 / 18 / 687:  69%|██████▊   | 687/1000 [15:33:01<7:05:05, 81.49s/it][Succeeded / Failed / Skipped / Total] 343 / 326 / 18 / 687:  69%|██████▉   | 688/1000 [15:33:32<7:03:21, 81.41s/it][Succeeded / Failed / Skipped / Total] 343 / 327 / 18 / 688:  69%|██████▉   | 688/1000 [15:33:32<7:03:21, 81.41s/it][Succeeded / Failed / Skipped / Total] 343 / 327 / 18 / 688:  69%|██████▉   | 689/1000 [15:34:05<7:01:37, 81.34s/it][Succeeded / Failed / Skipped / Total] 344 / 327 / 18 / 689:  69%|██████▉   | 689/1000 [15:34:05<7:01:37, 81.34s/it][Succeeded / Failed / Skipped / Total] 344 / 327 / 18 / 689:  69%|██████▉   | 690/1000 [15:34:09<6:59:41, 81.23s/it][Succeeded / Failed / Skipped / Total] 344 / 328 / 18 / 690:  69%|██████▉   | 690/1000 [15:34:09<6:59:41, 81.23s/it][Succeeded / Failed / Skipped / Total] 344 / 328 / 18 / 690:  69%|██████▉   | 691/1000 [15:34:25<6:57:51, 81.14s/it][Succeeded / Failed / Skipped / Total] 345 / 328 / 18 / 691:  69%|██████▉   | 691/1000 [15:34:25<6:57:51, 81.14s/it][Succeeded / Failed / Skipped / Total] 345 / 328 / 18 / 691:  69%|██████▉   | 692/1000 [15:34:51<6:56:05, 81.06s/it][Succeeded / Failed / Skipped / Total] 346 / 328 / 18 / 692:  69%|██████▉   | 692/1000 [15:34:51<6:56:05, 81.06s/it][Succeeded / Failed / Skipped / Total] 346 / 328 / 18 / 692:  69%|██████▉   | 693/1000 [15:39:19<6:56:07, 81.33s/it][Succeeded / Failed / Skipped / Total] 347 / 328 / 18 / 693:  69%|██████▉   | 693/1000 [15:39:19<6:56:07, 81.33s/it][Succeeded / Failed / Skipped / Total] 347 / 328 / 18 / 693:  69%|██████▉   | 694/1000 [15:40:03<6:54:29, 81.27s/it][Succeeded / Failed / Skipped / Total] 348 / 328 / 18 / 694:  69%|██████▉   | 694/1000 [15:40:03<6:54:29, 81.27s/it][Succeeded / Failed / Skipped / Total] 348 / 328 / 18 / 694:  70%|██████▉   | 695/1000 [15:40:19<6:52:39, 81.18s/it][Succeeded / Failed / Skipped / Total] 349 / 328 / 18 / 695:  70%|██████▉   | 695/1000 [15:40:19<6:52:39, 81.18s/it][Succeeded / Failed / Skipped / Total] 349 / 328 / 18 / 695:  70%|██████▉   | 696/1000 [15:40:20<6:50:43, 81.06s/it]--------------------------------------------- Result 687 ---------------------------------------------
Sets the request path. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest path ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest path ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 688 ---------------------------------------------
Sets the basic authentication header. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the host header. --> SCHIAPARELLI@param maud@return --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[schiaparelli]] ( ) { String [[maud]] = this . [[organised]] ; if ( port != Defaults . DEFAULT_PORT ) { [[maud]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[maud]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 690 ---------------------------------------------
Sends the request and returns the response. --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 691 ---------------------------------------------
Add a cookie to the request.@param REPLACEME0 the cookie to add --> HTTP OPTIONS --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean [[first]] = "True" == "True" ; for ( Cookie [[cookie]] : REPLACEME0 ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { [[cookieString]] . append ( "; " ) ; } [[first]] = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[actualy]] = new StringBuilder ( ) ; boolean [[commence]] = "True" == "True" ; for ( Cookie [[snacks]] : REPLACEME0 ) { Integer maxAge = [[snacks]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[commence]] ) { [[actualy]] . append ( "; " ) ; } [[commence]] = "False" != "False" ; [[actualy]] . append ( [[snacks]] . getName ( ) ) ; [[actualy]] . append ( ' ' ) ; [[actualy]] . append ( [[snacks]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[actualy]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 692 ---------------------------------------------
Creates a host URL string. --> Bevda version --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[budda]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 693 ---------------------------------------------
Collect action filters. --> zimmermahmen --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[zimmermann]] ( ) { final Collection < ? extends ActionFilter > [[treatin]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[treatin]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 694 ---------------------------------------------
Overrides the default behavior of this buffer. --> Overrides this method to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[bearings]] ( final boolean [[nothingness]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Collect the action results. --> play with --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[playwith]] ( ) { final Collection < ActionResult > [[kawasaki]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[kawasaki]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 328 / 18 / 696:  70%|██████▉   | 696/1000 [15:40:20<6:50:43, 81.06s/it][Succeeded / Failed / Skipped / Total] 350 / 328 / 18 / 696:  70%|██████▉   | 697/1000 [15:41:36<6:49:20, 81.06s/it][Succeeded / Failed / Skipped / Total] 350 / 329 / 18 / 697:  70%|██████▉   | 697/1000 [15:41:36<6:49:20, 81.06s/it][Succeeded / Failed / Skipped / Total] 350 / 329 / 18 / 697:  70%|██████▉   | 698/1000 [15:42:24<6:47:44, 81.01s/it][Succeeded / Failed / Skipped / Total] 351 / 329 / 18 / 698:  70%|██████▉   | 698/1000 [15:42:24<6:47:44, 81.01s/it][Succeeded / Failed / Skipped / Total] 351 / 329 / 18 / 698:  70%|██████▉   | 699/1000 [15:42:41<6:45:56, 80.92s/it][Succeeded / Failed / Skipped / Total] 352 / 329 / 18 / 699:  70%|██████▉   | 699/1000 [15:42:41<6:45:56, 80.92s/it][Succeeded / Failed / Skipped / Total] 352 / 329 / 18 / 699:  70%|███████   | 700/1000 [15:43:22<6:44:18, 80.86s/it][Succeeded / Failed / Skipped / Total] 353 / 329 / 18 / 700:  70%|███████   | 700/1000 [15:43:22<6:44:18, 80.86s/it][Succeeded / Failed / Skipped / Total] 353 / 329 / 18 / 700:  70%|███████   | 701/1000 [15:43:48<6:42:33, 80.78s/it][Succeeded / Failed / Skipped / Total] 354 / 329 / 18 / 701:  70%|███████   | 701/1000 [15:43:48<6:42:33, 80.78s/it][Succeeded / Failed / Skipped / Total] 354 / 329 / 18 / 701:  70%|███████   | 702/1000 [15:44:09<6:40:47, 80.70s/it][Succeeded / Failed / Skipped / Total] 354 / 330 / 18 / 702:  70%|███████   | 702/1000 [15:44:09<6:40:47, 80.70s/it][Succeeded / Failed / Skipped / Total] 354 / 330 / 18 / 702:  70%|███████   | 703/1000 [15:44:24<6:38:59, 80.60s/it][Succeeded / Failed / Skipped / Total] 355 / 330 / 18 / 703:  70%|███████   | 703/1000 [15:44:24<6:38:59, 80.60s/it][Succeeded / Failed / Skipped / Total] 355 / 330 / 18 / 703:  70%|███████   | 704/1000 [15:49:24<6:39:10, 80.92s/it][Succeeded / Failed / Skipped / Total] 356 / 330 / 18 / 704:  70%|███████   | 704/1000 [15:49:24<6:39:10, 80.92s/it][Succeeded / Failed / Skipped / Total] 356 / 330 / 18 / 704:  70%|███████   | 705/1000 [15:50:16<6:37:38, 80.88s/it][Succeeded / Failed / Skipped / Total] 357 / 330 / 18 / 705:  70%|███████   | 705/1000 [15:50:16<6:37:38, 80.88s/it][Succeeded / Failed / Skipped / Total] 357 / 330 / 18 / 705:  71%|███████   | 706/1000 [15:50:30<6:35:49, 80.78s/it]Sorts the list of actions. --> burne --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[burne]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 697 ---------------------------------------------
Add query parameters to the request. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 698 ---------------------------------------------
Sets the value of the specified property. --> WATERBED --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object [[value]] ) { Setter setter = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[waterbed]] ( final BeanProperty [[ocs]] , final Object [[assessing]] ) { Setter setter = [[ocs]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 699 ---------------------------------------------
Returns the number of entries in the exception table. --> Faster than flushing? --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[flannery]] ( final Handler [[sultry]] ) { int [[expectancy]] = 0 ; Handler handler = [[sultry]] ; while ( handler != null ) { [[expectancy]] ++ ; handler = handler . nextHandler ; } return [[expectancy]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 700 ---------------------------------------------
Returns a copy of this writer. --> E heal a PrintWriter --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[heal]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 701 ---------------------------------------------
Extracts the property with the given name from this object. --> Converts a reuben string into a FASTA string@param reuben@return --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[facha]] ( final String [[reuben]] ) { int [[sharecroppers]] = StringUtil . indexOfChars ( [[reuben]] , INDEX_CHARS ) ; if ( [[sharecroppers]] == - 1 ) { return [[reuben]] ; } return [[reuben]] . substring ( 0 , [[sharecroppers]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 702 ---------------------------------------------
Collect the interceptors associated with this action. --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 703 ---------------------------------------------
Sets the object reference.@param name the name of the object@param object the object --> Convenience method to put an arabian into the map --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[coronary]] ( final String [[arabians]] , final Object [[intending]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[arabians]] , [[intending]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 704 ---------------------------------------------
Lookup an object reference. --> Get the weights of the specified ingles@param ingles the name of the ingles@return the weights --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[sloths]] ( final String [[ingles]] ) { Object [[values]] = getObjectReference ( [[ingles]] ) ; if ( [[values]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ingles]] ) ; } return [[values]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 705 ---------------------------------------------
Get the alias for the specified table.@param tableRef the name of the table.@return the alias for the specified table. --> Expelling the specified blye --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[expel]] ( final String [[blye]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[blye]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 706 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 331 / 18 / 706:  71%|███████   | 706/1000 [15:50:30<6:35:49, 80.78s/it][Succeeded / Failed / Skipped / Total] 357 / 331 / 18 / 706:  71%|███████   | 707/1000 [15:55:19<6:35:54, 81.07s/it][Succeeded / Failed / Skipped / Total] 358 / 331 / 18 / 707:  71%|███████   | 707/1000 [15:55:19<6:35:54, 81.07s/it][Succeeded / Failed / Skipped / Total] 358 / 331 / 18 / 707:  71%|███████   | 708/1000 [15:55:33<6:34:06, 80.98s/it][Succeeded / Failed / Skipped / Total] 358 / 332 / 18 / 708:  71%|███████   | 708/1000 [15:55:33<6:34:06, 80.98s/it][Succeeded / Failed / Skipped / Total] 358 / 332 / 18 / 708:  71%|███████   | 709/1000 [15:56:04<6:32:24, 80.91s/it][Succeeded / Failed / Skipped / Total] 359 / 332 / 18 / 709:  71%|███████   | 709/1000 [15:56:04<6:32:24, 80.91s/it][Succeeded / Failed / Skipped / Total] 359 / 332 / 18 / 709:  71%|███████   | 710/1000 [15:56:44<6:30:47, 80.85s/it][Succeeded / Failed / Skipped / Total] 359 / 333 / 18 / 710:  71%|███████   | 710/1000 [15:56:44<6:30:47, 80.85s/it][Succeeded / Failed / Skipped / Total] 359 / 333 / 18 / 710:  71%|███████   | 711/1000 [15:57:48<6:29:19, 80.83s/it][Succeeded / Failed / Skipped / Total] 360 / 333 / 18 / 711:  71%|███████   | 711/1000 [15:57:48<6:29:19, 80.83s/it][Succeeded / Failed / Skipped / Total] 360 / 333 / 18 / 711:  71%|███████   | 712/1000 [15:58:59<6:27:54, 80.81s/it][Succeeded / Failed / Skipped / Total] 360 / 334 / 18 / 712:  71%|███████   | 712/1000 [15:58:59<6:27:54, 80.81s/it][Succeeded / Failed / Skipped / Total] 360 / 334 / 18 / 712:  71%|███████▏  | 713/1000 [16:00:05<6:26:27, 80.79s/it][Succeeded / Failed / Skipped / Total] 361 / 334 / 18 / 713:  71%|███████▏  | 713/1000 [16:00:05<6:26:27, 80.79s/it][Succeeded / Failed / Skipped / Total] 361 / 334 / 18 / 713:  71%|███████▏  | 714/1000 [16:00:49<6:24:51, 80.74s/it]Sets the query parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 707 ---------------------------------------------
Registers a table reference. --> Frees the specified piotr@param piotr@param ded@param tableAlias --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[fremen]] ( final String [[piotr]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[piotr]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[piotr]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 708 ---------------------------------------------
Removes a range handler.@param firstHandler the first handler@param start the range start@param end the range end@return the handler that was removed --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 709 ---------------------------------------------
Serializes the given value to the given JSON context. --> Push the specified magnitude onto the stack@param yoel@param magnitude@return --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext [[jsonContext]] , final T [[value]] ) { if ( [[jsonContext]] . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[techniques]] ( final JsonContext [[yoel]] , final T [[magnitude]] ) { if ( [[yoel]] . pushValue ( [[magnitude]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 710 ---------------------------------------------
Gets the object reference for the supplied name.@param name the name of the object.@return the object reference for the supplied name. --> [[[FAILED]]]

[[[[Adv]]]]: public Object getObjectReference ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object getObjectReference ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 711 ---------------------------------------------
Returns the descriptor for the specified table. --> Methode d'ajouter d'ajouter d'ajouter@param tableRef@return --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[pour]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Gets the property with the specified name.@param < T> the type parameter@param bean the bean@param name the name@return the property with the specified name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 713 ---------------------------------------------
Looks up the table descriptor for the given table. --> Methode esta excepcion de la seperado de la seperado de la seperado@param stocky@return --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[alegría]] ( final String [[shareholders]] ) { DbEntityDescriptor [[cds]] = getTableDescriptor ( [[shareholders]] ) ; if ( [[cds]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[shareholders]] ) ; } return [[cds]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
[Succeeded / Failed / Skipped / Total] 361 / 335 / 18 / 714:  71%|███████▏  | 714/1000 [16:00:49<6:24:51, 80.74s/it][Succeeded / Failed / Skipped / Total] 361 / 335 / 18 / 714:  72%|███████▏  | 715/1000 [16:02:26<6:23:37, 80.76s/it][Succeeded / Failed / Skipped / Total] 361 / 336 / 18 / 715:  72%|███████▏  | 715/1000 [16:02:26<6:23:37, 80.76s/it][Succeeded / Failed / Skipped / Total] 361 / 336 / 18 / 715:  72%|███████▏  | 716/1000 [16:02:29<6:21:46, 80.66s/it][Succeeded / Failed / Skipped / Total] 362 / 336 / 18 / 716:  72%|███████▏  | 716/1000 [16:02:29<6:21:46, 80.66s/it][Succeeded / Failed / Skipped / Total] 362 / 336 / 18 / 716:  72%|███████▏  | 717/1000 [16:03:05<6:20:07, 80.59s/it][Succeeded / Failed / Skipped / Total] 362 / 337 / 18 / 717:  72%|███████▏  | 717/1000 [16:03:05<6:20:07, 80.59s/it][Succeeded / Failed / Skipped / Total] 362 / 337 / 18 / 717:  72%|███████▏  | 718/1000 [16:03:20<6:18:21, 80.50s/it][Succeeded / Failed / Skipped / Total] 363 / 337 / 18 / 718:  72%|███████▏  | 718/1000 [16:03:20<6:18:21, 80.50s/it][Succeeded / Failed / Skipped / Total] 363 / 337 / 18 / 718:  72%|███████▏  | 719/1000 [16:03:41<6:16:38, 80.42s/it][Succeeded / Failed / Skipped / Total] 364 / 337 / 18 / 719:  72%|███████▏  | 719/1000 [16:03:41<6:16:38, 80.42s/it][Succeeded / Failed / Skipped / Total] 364 / 337 / 18 / 719:  72%|███████▏  | 720/1000 [16:04:17<6:15:00, 80.36s/it][Succeeded / Failed / Skipped / Total] 364 / 338 / 18 / 720:  72%|███████▏  | 720/1000 [16:04:17<6:15:00, 80.36s/it][Succeeded / Failed / Skipped / Total] 364 / 338 / 18 / 720:  72%|███████▏  | 721/1000 [16:05:13<6:13:30, 80.32s/it]--------------------------------------------- Result 714 ---------------------------------------------
Find the table descriptor by column ref.@param columnRef the column ref@return the descriptor or <code>null</code> --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 715 ---------------------------------------------
Registers a hint. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerHint ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void registerHint ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a column name to a property name. --> Creates a hypersonic hypersonic hypersonic hypersonic hypersonic hypersonic hypersonic hypersonic hypersonic --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[hypnosis]] ( final String [[several]] ) { StringBuilder [[schiller]] = new StringBuilder ( [[several]] . length ( ) ) ; int len = [[several]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[several]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[schiller]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[schiller]] . append ( Character . toLowerCase ( c ) ) ; } } return [[schiller]] . toString ( ) ; } return [[several]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 717 ---------------------------------------------
Converts the supplied object to the specified destination type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 718 ---------------------------------------------
Sets the value at the specified index. --> Converts an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an estimate of an --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement [[st]] , final int [[index]] , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( [[st]] , [[index]] , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[rarer]] ( final PreparedStatement [[saint]] , final int [[indicator]] , final Object [[assess]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[assess]] , sqlType ) ; set ( [[saint]] , [[indicator]] , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 719 ---------------------------------------------
Converts a property name to a column name. --> Creates a joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint joint --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[anklet]] ( final String [[rumbo]] ) { StringBuilder tableName = new StringBuilder ( [[rumbo]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[vecchio]] = Format . fromCamelCase ( [[rumbo]] , separatorChar ) ; tableName . append ( [[vecchio]] ) ; } else { tableName . append ( [[rumbo]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 720 ---------------------------------------------
Creates a wrapper for the given wrapper class. --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 365 / 338 / 18 / 721:  72%|███████▏  | 721/1000 [16:05:13<6:13:30, 80.32s/it][Succeeded / Failed / Skipped / Total] 365 / 338 / 18 / 721:  72%|███████▏  | 722/1000 [16:05:17<6:11:40, 80.22s/it][Succeeded / Failed / Skipped / Total] 366 / 338 / 18 / 722:  72%|███████▏  | 722/1000 [16:05:17<6:11:40, 80.22s/it][Succeeded / Failed / Skipped / Total] 366 / 338 / 18 / 722:  72%|███████▏  | 723/1000 [16:06:15<6:10:12, 80.19s/it][Succeeded / Failed / Skipped / Total] 367 / 338 / 18 / 723:  72%|███████▏  | 723/1000 [16:06:15<6:10:12, 80.19s/it][Succeeded / Failed / Skipped / Total] 367 / 338 / 18 / 723:  72%|███████▏  | 724/1000 [16:09:24<6:09:33, 80.34s/it]Injects all uploaded files into the specified targets. --> Overrides the HttpServletRequest's HttpServletRequest's HttpServletRequest's HttpServletRequest's H --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[hinkle]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[hangnail]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[hangnail]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[hangnail]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[pioneers]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[pioneers]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[pioneers]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[hangnail]] . getFiles ( [[pioneers]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 722 ---------------------------------------------
Inject parameters.@param servletRequest the servlet request@param targets the targets --> zebulon zebulon --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[zebulon]] ( final HttpServletRequest [[hugo]] , final Targets targets ) { final boolean encode = encodeGetParams && [[hugo]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[hugo]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[hugo]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[hugo]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 723 ---------------------------------------------
Gets the path to the specified filename.@param filename the filename@param separatorAdd the separator index@return the path --> Diese Methode@param filename@param gund@return --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int [[separatorAdd]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[endIndex]] = index + [[separatorAdd]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return filename . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[wanna]] ( final String filename , final int [[gund]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[nightwish]] = index + [[gund]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= [[nightwish]] ) { return StringPool . EMPTY ; } return filename . substring ( prefix , [[nightwish]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 368 / 338 / 18 / 724:  72%|███████▏  | 724/1000 [16:09:24<6:09:33, 80.34s/it][Succeeded / Failed / Skipped / Total] 368 / 338 / 18 / 724:  72%|███████▎  | 725/1000 [16:11:19<6:08:26, 80.39s/it][Succeeded / Failed / Skipped / Total] 368 / 339 / 18 / 725:  72%|███████▎  | 725/1000 [16:11:19<6:08:26, 80.39s/it][Succeeded / Failed / Skipped / Total] 368 / 339 / 18 / 725:  73%|███████▎  | 726/1000 [16:12:02<6:06:51, 80.33s/it][Succeeded / Failed / Skipped / Total] 368 / 340 / 18 / 726:  73%|███████▎  | 726/1000 [16:12:02<6:06:51, 80.33s/it][Succeeded / Failed / Skipped / Total] 368 / 340 / 18 / 726:  73%|███████▎  | 727/1000 [16:12:32<6:05:12, 80.26s/it][Succeeded / Failed / Skipped / Total] 368 / 341 / 18 / 727:  73%|███████▎  | 727/1000 [16:12:32<6:05:12, 80.26s/it][Succeeded / Failed / Skipped / Total] 368 / 341 / 18 / 727:  73%|███████▎  | 728/1000 [16:13:15<6:03:38, 80.21s/it][Succeeded / Failed / Skipped / Total] 369 / 341 / 18 / 728:  73%|███████▎  | 728/1000 [16:13:15<6:03:38, 80.21s/it][Succeeded / Failed / Skipped / Total] 369 / 341 / 18 / 728:  73%|███████▎  | 729/1000 [16:14:05<6:02:06, 80.17s/it][Succeeded / Failed / Skipped / Total] 370 / 341 / 18 / 729:  73%|███████▎  | 729/1000 [16:14:05<6:02:06, 80.17s/it][Succeeded / Failed / Skipped / Total] 370 / 341 / 18 / 729:  73%|███████▎  | 730/1000 [16:14:38<6:00:29, 80.11s/it]Relative path.@param targetPath the target path@param basePath the base path@return the string --> Convenience method to create an obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated obfuscated --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[intrigues]] ( final String [[frustration]] , final String [[recommend]] ) { return new File ( [[recommend]] ) . toPath ( ) . relativize ( new File ( [[frustration]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 725 ---------------------------------------------
Inject attributes.@param servletRequest the servlet request@param targets the targets --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 726 ---------------------------------------------
Registers an action config consumer with this action manager. --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 727 ---------------------------------------------
Starts the web application. --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp start ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp start ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 728 ---------------------------------------------
Returns the set of all wrappers. --> De-de-de-de-de --> Socre: 1.0

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[deform]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 729 ---------------------------------------------
Registers a madvoc component. --> burnett@param corine@return --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[burnett]] ( final Class < ? > [[corine]] ) { Objects . requireNonNull ( [[corine]] ) ; madvocComponents . add ( ClassConsumer . of ( [[corine]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 341 / 18 / 730:  73%|███████▎  | 730/1000 [16:14:38<6:00:29, 80.11s/it][Succeeded / Failed / Skipped / Total] 371 / 341 / 18 / 730:  73%|███████▎  | 731/1000 [16:15:29<5:58:58, 80.07s/it][Succeeded / Failed / Skipped / Total] 372 / 341 / 18 / 731:  73%|███████▎  | 731/1000 [16:15:29<5:58:58, 80.07s/it][Succeeded / Failed / Skipped / Total] 372 / 341 / 18 / 731:  73%|███████▎  | 732/1000 [16:16:24<5:57:28, 80.03s/it][Succeeded / Failed / Skipped / Total] 372 / 342 / 18 / 732:  73%|███████▎  | 732/1000 [16:16:24<5:57:28, 80.03s/it][Succeeded / Failed / Skipped / Total] 372 / 342 / 18 / 732:  73%|███████▎  | 733/1000 [16:19:22<5:56:44, 80.17s/it][Succeeded / Failed / Skipped / Total] 372 / 343 / 18 / 733:  73%|███████▎  | 733/1000 [16:19:22<5:56:44, 80.17s/it][Succeeded / Failed / Skipped / Total] 372 / 343 / 18 / 733:  73%|███████▎  | 734/1000 [16:20:02<5:55:09, 80.11s/it][Succeeded / Failed / Skipped / Total] 372 / 344 / 18 / 734:  73%|███████▎  | 734/1000 [16:20:02<5:55:09, 80.11s/it][Succeeded / Failed / Skipped / Total] 372 / 344 / 18 / 734:  74%|███████▎  | 735/1000 [16:20:38<5:53:34, 80.05s/it][Succeeded / Failed / Skipped / Total] 373 / 344 / 18 / 735:  74%|███████▎  | 735/1000 [16:20:38<5:53:34, 80.05s/it][Succeeded / Failed / Skipped / Total] 373 / 344 / 18 / 735:  74%|███████▎  | 736/1000 [16:21:00<5:51:52, 79.97s/it]Registers all madvoc components. --> zigzagging --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[zigzagging]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 731 ---------------------------------------------
Converts a path to a system separator.@param path the path to convert.@return the system separator. --> SCHLZ@param causeway@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[schlitz]] ( final String [[causeway]] ) { if ( [[causeway]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[causeway]] ) ; } else { return separatorsToUnix ( [[causeway]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 732 ---------------------------------------------
Converts the supplied column name to the supplied property name. --> [[[FAILED]]]

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 733 ---------------------------------------------
Resolves the specified wrapper class. --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 734 ---------------------------------------------
Configures the default actions. --> [[[FAILED]]]

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 735 ---------------------------------------------
Excludes the specified jars from scanning.@param excludedJars the jars to exclude.@return this scanner. --> Zuckerberg rules --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String [[excludedJar]] : excludedJars ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[zuckerberg]] ( final String ... excludedJars ) { for ( final String [[reproduce]] : excludedJars ) { rulesJars . exclude ( [[reproduce]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 374 / 344 / 18 / 736:  74%|███████▎  | 736/1000 [16:21:00<5:51:52, 79.97s/it][Succeeded / Failed / Skipped / Total] 374 / 344 / 18 / 736:  74%|███████▎  | 737/1000 [16:22:22<5:50:33, 79.98s/it][Succeeded / Failed / Skipped / Total] 375 / 344 / 18 / 737:  74%|███████▎  | 737/1000 [16:22:22<5:50:33, 79.98s/it][Succeeded / Failed / Skipped / Total] 375 / 344 / 18 / 737:  74%|███████▍  | 738/1000 [16:23:18<5:49:05, 79.94s/it][Succeeded / Failed / Skipped / Total] 375 / 345 / 18 / 738:  74%|███████▍  | 738/1000 [16:23:18<5:49:05, 79.94s/it][Succeeded / Failed / Skipped / Total] 375 / 345 / 18 / 738:  74%|███████▍  | 739/1000 [16:23:21<5:47:18, 79.84s/it][Succeeded / Failed / Skipped / Total] 376 / 345 / 18 / 739:  74%|███████▍  | 739/1000 [16:23:21<5:47:18, 79.84s/it][Succeeded / Failed / Skipped / Total] 376 / 345 / 18 / 739:  74%|███████▍  | 740/1000 [16:23:58<5:45:43, 79.78s/it][Succeeded / Failed / Skipped / Total] 376 / 346 / 18 / 740:  74%|███████▍  | 740/1000 [16:23:58<5:45:43, 79.78s/it][Succeeded / Failed / Skipped / Total] 376 / 346 / 18 / 740:  74%|███████▍  | 741/1000 [16:25:17<5:44:23, 79.78s/it][Succeeded / Failed / Skipped / Total] 377 / 346 / 18 / 741:  74%|███████▍  | 741/1000 [16:25:17<5:44:23, 79.78s/it][Succeeded / Failed / Skipped / Total] 377 / 346 / 18 / 741:  74%|███████▍  | 742/1000 [16:28:17<5:43:38, 79.92s/it][Succeeded / Failed / Skipped / Total] 377 / 347 / 18 / 742:  74%|███████▍  | 742/1000 [16:28:17<5:43:38, 79.92s/it][Succeeded / Failed / Skipped / Total] 377 / 347 / 18 / 742:  74%|███████▍  | 743/1000 [16:30:44<5:42:41, 80.01s/it][Succeeded / Failed / Skipped / Total] 377 / 348 / 18 / 743:  74%|███████▍  | 743/1000 [16:30:44<5:42:41, 80.01s/it][Succeeded / Failed / Skipped / Total] 377 / 348 / 18 / 743:  74%|███████▍  | 744/1000 [16:30:49<5:40:55, 79.91s/it]Excludes entries from this scanner.@param excludedEntries the entries to exclude.@return this scanner. --> zuckerman rules --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[zuckerman]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 737 ---------------------------------------------
Returns the bytecode signature of the given type. --> R rouen@param natures@return --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[rouen]] ( final Class [[natures]] ) { final String name = ' ' + [[natures]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 738 ---------------------------------------------
Splits the supplied filename into an array of Strings.@param filename the filename to split.@return the array of Strings. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 739 ---------------------------------------------
Includes the specified list of entries in this scanner. --> zubin-specific rules --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[zubin]] ( final String ... includedEntries ) { for ( final String [[communicate]] : includedEntries ) { rulesEntries . include ( [[communicate]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 740 ---------------------------------------------
Gets the default or scope type.@param < S> the type parameter@param scopeClass the scope class@return the default or scope type --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 741 ---------------------------------------------
Creates a new transaction. --> Stolen from DbJtxTransaction --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , scope , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[steal]] ( final JtxTransactionMode tm , final Object scope , final boolean [[potent]] ) { return new DbJtxTransaction ( this , tm , scope , [[potent]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 742 ---------------------------------------------
Includes the specified jars in the scanner.@param includedJars The jars to include.@return this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 743 ---------------------------------------------
Scans the supplied paths and adds them to this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 349 / 18 / 744:  74%|███████▍  | 744/1000 [16:30:49<5:40:55, 79.91s/it][Succeeded / Failed / Skipped / Total] 377 / 349 / 18 / 744:  74%|███████▍  | 745/1000 [16:30:54<5:39:10, 79.80s/it][Succeeded / Failed / Skipped / Total] 377 / 350 / 18 / 745:  74%|███████▍  | 745/1000 [16:30:54<5:39:10, 79.80s/it][Succeeded / Failed / Skipped / Total] 377 / 350 / 18 / 745:  75%|███████▍  | 746/1000 [16:32:30<5:37:55, 79.83s/it][Succeeded / Failed / Skipped / Total] 377 / 351 / 18 / 746:  75%|███████▍  | 746/1000 [16:32:30<5:37:55, 79.83s/it][Succeeded / Failed / Skipped / Total] 377 / 351 / 18 / 746:  75%|███████▍  | 747/1000 [16:36:14<5:37:25, 80.02s/it][Succeeded / Failed / Skipped / Total] 378 / 351 / 18 / 747:  75%|███████▍  | 747/1000 [16:36:14<5:37:25, 80.02s/it][Succeeded / Failed / Skipped / Total] 378 / 351 / 18 / 747:  75%|███████▍  | 748/1000 [16:36:23<5:35:40, 79.92s/it]Scans the classpath. --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 745 ---------------------------------------------
Start the scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 746 ---------------------------------------------
Scans a jar file. --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 747 ---------------------------------------------
Asserts that the specified set of tokens are valid.@param tokenSet the set of tokens. --> zhuang --> Socre: 1.0

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[zhuang]] ( final Set < Token > [[blasted]] ) { if ( [[blasted]] . size ( ) < maxTokensPerSession ) { return ; } long [[aimer]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[blasted]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[aimer]] ) { [[aimer]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[blasted]] . size ( ) >= maxTokensPerSession ) ) { [[blasted]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 351 / 18 / 748:  75%|███████▍  | 748/1000 [16:36:23<5:35:40, 79.92s/it][Succeeded / Failed / Skipped / Total] 379 / 351 / 18 / 748:  75%|███████▍  | 749/1000 [16:36:33<5:33:57, 79.83s/it][Succeeded / Failed / Skipped / Total] 380 / 351 / 18 / 749:  75%|███████▍  | 749/1000 [16:36:33<5:33:57, 79.83s/it][Succeeded / Failed / Skipped / Total] 380 / 351 / 18 / 749:  75%|███████▌  | 750/1000 [16:39:39<5:33:13, 79.97s/it][Succeeded / Failed / Skipped / Total] 380 / 352 / 18 / 750:  75%|███████▌  | 750/1000 [16:39:39<5:33:13, 79.97s/it][Succeeded / Failed / Skipped / Total] 380 / 352 / 18 / 750:  75%|███████▌  | 751/1000 [16:42:10<5:32:16, 80.07s/it][Succeeded / Failed / Skipped / Total] 381 / 352 / 18 / 751:  75%|███████▌  | 751/1000 [16:42:10<5:32:16, 80.07s/it][Succeeded / Failed / Skipped / Total] 381 / 352 / 18 / 751:  75%|███████▌  | 752/1000 [16:43:06<5:30:48, 80.03s/it][Succeeded / Failed / Skipped / Total] 381 / 353 / 18 / 752:  75%|███████▌  | 752/1000 [16:43:06<5:30:48, 80.03s/it][Succeeded / Failed / Skipped / Total] 381 / 353 / 18 / 752:  75%|███████▌  | 753/1000 [16:44:31<5:29:30, 80.04s/it][Succeeded / Failed / Skipped / Total] 381 / 354 / 18 / 753:  75%|███████▌  | 753/1000 [16:44:31<5:29:30, 80.04s/it][Succeeded / Failed / Skipped / Total] 381 / 354 / 18 / 753:  75%|███████▌  | 754/1000 [16:45:23<5:28:01, 80.01s/it][Succeeded / Failed / Skipped / Total] 382 / 354 / 18 / 754:  75%|███████▌  | 754/1000 [16:45:23<5:28:01, 80.01s/it][Succeeded / Failed / Skipped / Total] 382 / 354 / 18 / 754:  76%|███████▌  | 755/1000 [16:46:15<5:26:32, 79.97s/it][Succeeded / Failed / Skipped / Total] 383 / 354 / 18 / 755:  76%|███████▌  | 755/1000 [16:46:15<5:26:32, 79.97s/it][Succeeded / Failed / Skipped / Total] 383 / 354 / 18 / 755:  76%|███████▌  | 756/1000 [16:49:45<5:25:54, 80.14s/it]Prepare a CSRF token.@param session the session@param timeToLive the time to live@return the token --> Create a shake shake shake@param encounter@param timeToLive@return --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession [[session]] , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[apparatus]] ( final HttpSession [[encounter]] , final int timeToLive ) { Set < Token > [[shafer]] = ( Set < Token > ) [[encounter]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[shafer]] == null ) { [[shafer]] = new HashSet <> ( ) ; [[encounter]] . setAttribute ( CSRF_TOKEN_SET , [[shafer]] ) ; } String [[rating]] ; boolean unique ; do { [[rating]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[shafer]] ) ; unique = [[shafer]] . add ( new Token ( [[rating]] , timeToLive ) ) ; } while ( ! unique ) ; return [[rating]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 749 ---------------------------------------------
Creates a copy of this bean. --> Rethrows an exception --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[ripping]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Genuine]]" == "[[Genuine]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 750 ---------------------------------------------
Gets or initializes the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 751 ---------------------------------------------
Initializes this template with the specified template data. --> zippo --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[zippo]] ( final TemplateData [[rosato]] ) { super . init ( [[rosato]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[rosato]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[rosato]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 752 ---------------------------------------------
Registers a scope consumer.@param scopeType the scope type@param madvocScopeConsumer the consumer --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 753 ---------------------------------------------
Creates a copy of this instance. --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 754 ---------------------------------------------
Visits a property. --> Impersonate a person --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[impersonate]] ( String [[christening]] , final Object [[utility]] ) { if ( isTargetMap ) { [[christening]] = LEFT_SQ_BRACKET + [[christening]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[christening]] , [[utility]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 755 ---------------------------------------------
Removes the specified bean from the list of beans. --> zha ( Class ) --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[zha]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 756 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 354 / 18 / 756:  76%|███████▌  | 756/1000 [16:49:45<5:25:54, 80.14s/it][Succeeded / Failed / Skipped / Total] 384 / 354 / 18 / 756:  76%|███████▌  | 757/1000 [16:49:51<5:24:10, 80.04s/it][Succeeded / Failed / Skipped / Total] 384 / 355 / 18 / 757:  76%|███████▌  | 757/1000 [16:49:51<5:24:10, 80.04s/it][Succeeded / Failed / Skipped / Total] 384 / 355 / 18 / 757:  76%|███████▌  | 758/1000 [16:50:57<5:22:45, 80.02s/it][Succeeded / Failed / Skipped / Total] 384 / 356 / 18 / 758:  76%|███████▌  | 758/1000 [16:50:57<5:22:45, 80.02s/it][Succeeded / Failed / Skipped / Total] 384 / 356 / 18 / 758:  76%|███████▌  | 759/1000 [16:56:44<5:22:50, 80.38s/it][Succeeded / Failed / Skipped / Total] 384 / 357 / 18 / 759:  76%|███████▌  | 759/1000 [16:56:44<5:22:50, 80.38s/it][Succeeded / Failed / Skipped / Total] 384 / 357 / 18 / 759:  76%|███████▌  | 760/1000 [16:58:49<5:21:44, 80.43s/it]Resolve the bean names for the given type.@param type the type@return the bean names --> Convenience method to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[beanDefinition]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[beanDefinition]] . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[rationally]] ( final Class [[typewritten]] ) { String [ ] [[downgrade]] = beanCollections . get ( [[typewritten]] ) ; if ( [[downgrade]] != null ) { return [[downgrade]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[meto]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[meto]] . type , [[typewritten]] ) ) { String [[hemant]] = entry . getKey ( ) ; list . add ( [[hemant]] ) ; } } if ( list . isEmpty ( ) ) { [[downgrade]] = StringPool . EMPTY_ARRAY ; } else { [[downgrade]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[typewritten]] , [[downgrade]] ) ; return [[downgrade]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 757 ---------------------------------------------
Resolve a scope.@param < S> the type of the scope@param scopeType the type of the scope@return the scope --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 758 ---------------------------------------------
Decodes a char array into a byte array. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 759 ---------------------------------------------
Checks if a CSRF token is present in the session.@param session the session@param tokenValue the token value@return true if the token is present in the session, false otherwise --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 358 / 18 / 760:  76%|███████▌  | 760/1000 [16:58:49<5:21:44, 80.43s/it][Succeeded / Failed / Skipped / Total] 384 / 358 / 18 / 760:  76%|███████▌  | 761/1000 [17:06:30<5:22:23, 80.93s/it][Succeeded / Failed / Skipped / Total] 384 / 359 / 18 / 761:  76%|███████▌  | 761/1000 [17:06:30<5:22:23, 80.93s/it][Succeeded / Failed / Skipped / Total] 384 / 359 / 18 / 761:  76%|███████▌  | 762/1000 [17:07:58<5:21:04, 80.94s/it][Succeeded / Failed / Skipped / Total] 384 / 360 / 18 / 762:  76%|███████▌  | 762/1000 [17:07:58<5:21:04, 80.94s/it][Succeeded / Failed / Skipped / Total] 384 / 360 / 18 / 762:  76%|███████▋  | 763/1000 [17:10:22<5:20:03, 81.03s/it]Registers a bean definition.@param name the bean name@param beanDefinition the bean definition --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a set injection point.@param beanName the bean name@param property the property --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 762 ---------------------------------------------
Registers a property injection point.@param beanName the bean name@param property the property@param reference the reference --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 361 / 18 / 763:  76%|███████▋  | 763/1000 [17:10:22<5:20:03, 81.03s/it][Succeeded / Failed / Skipped / Total] 384 / 361 / 18 / 763:  76%|███████▋  | 764/1000 [17:12:46<5:19:01, 81.11s/it][Succeeded / Failed / Skipped / Total] 385 / 361 / 18 / 764:  76%|███████▋  | 764/1000 [17:12:46<5:19:01, 81.11s/it][Succeeded / Failed / Skipped / Total] 385 / 361 / 18 / 764:  76%|███████▋  | 765/1000 [17:16:57<5:18:32, 81.33s/it][Succeeded / Failed / Skipped / Total] 386 / 361 / 18 / 765:  76%|███████▋  | 765/1000 [17:16:57<5:18:32, 81.33s/it][Succeeded / Failed / Skipped / Total] 386 / 361 / 18 / 765:  77%|███████▋  | 766/1000 [17:17:53<5:17:03, 81.30s/it][Succeeded / Failed / Skipped / Total] 386 / 362 / 18 / 766:  77%|███████▋  | 766/1000 [17:17:53<5:17:03, 81.30s/it][Succeeded / Failed / Skipped / Total] 386 / 362 / 18 / 766:  77%|███████▋  | 767/1000 [17:18:03<5:15:20, 81.20s/it]Registers a Petite Ctor injection point.@param beanName the bean name@param paramTypes the parameter types@param references the references --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Iterate through all registered bean types and pass them to the bean name consumer. --> Applies a curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved curved --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[chelsey]] ( final Class [[styles]] , final Consumer < String > [[shinobi]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[styles]] ) ) { [[shinobi]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 765 ---------------------------------------------
Defines a map of parameters.@param properties the map of parameters. --> Convenience method to robb --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[robb]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 766 ---------------------------------------------
Registers an injection point for the specified Petite method. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 363 / 18 / 767:  77%|███████▋  | 767/1000 [17:18:03<5:15:20, 81.20s/it][Succeeded / Failed / Skipped / Total] 386 / 363 / 18 / 767:  77%|███████▋  | 768/1000 [17:18:14<5:13:38, 81.11s/it][Succeeded / Failed / Skipped / Total] 387 / 363 / 18 / 768:  77%|███████▋  | 768/1000 [17:18:14<5:13:38, 81.11s/it][Succeeded / Failed / Skipped / Total] 387 / 363 / 18 / 768:  77%|███████▋  | 769/1000 [17:18:40<5:12:00, 81.04s/it][Succeeded / Failed / Skipped / Total] 388 / 363 / 18 / 769:  77%|███████▋  | 769/1000 [17:18:40<5:12:00, 81.04s/it][Succeeded / Failed / Skipped / Total] 388 / 363 / 18 / 769:  77%|███████▋  | 770/1000 [17:18:53<5:10:19, 80.95s/it][Succeeded / Failed / Skipped / Total] 388 / 364 / 18 / 770:  77%|███████▋  | 770/1000 [17:18:53<5:10:19, 80.95s/it][Succeeded / Failed / Skipped / Total] 388 / 364 / 18 / 770:  77%|███████▋  | 771/1000 [17:18:56<5:08:35, 80.85s/it][Succeeded / Failed / Skipped / Total] 389 / 364 / 18 / 771:  77%|███████▋  | 771/1000 [17:18:56<5:08:35, 80.85s/it][Succeeded / Failed / Skipped / Total] 389 / 364 / 18 / 771:  77%|███████▋  | 772/1000 [17:19:46<5:07:05, 80.81s/it]Register Petite destroy methods.@param beanName the bean name@param destroyMethodNames the destroy method names --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 768 ---------------------------------------------
Resolves a Java version number.@param versionThe Java version number.@return The Java version number. --> Checks to see if the given typed value is a valid snowflake snowflake snowflake snowflake snowflake snowflake snowflake snowflake snowflake snowflake snowflake --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[huh]] ( final int [[typed]] ) { final int [[blanketed]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[slacks]] = [[blanketed]] - 8 + 52 ; return [[typed]] > [[slacks]] ? [[typed]] : [[slacks]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 769 ---------------------------------------------
Throws an exception if the index is out of bounds. --> Cheddar method --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[cheddar]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 770 ---------------------------------------------
Register Petite init methods.@param beanName the bean name@param invocationStrategy the invocation strategy@param initMethodNames the init method names --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 771 ---------------------------------------------
Returns advice field name. --> Converts an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an obfuscated version of an --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[deceivin]] ( final String [[patronymic]] , final int [[minder]] ) { return ProxettaNames . fieldPrefix + [[patronymic]] + ProxettaNames . fieldDivider + [[minder]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 772 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 390 / 364 / 18 / 772:  77%|███████▋  | 772/1000 [17:19:46<5:07:05, 80.81s/it][Succeeded / Failed / Skipped / Total] 390 / 364 / 18 / 772:  77%|███████▋  | 773/1000 [17:21:03<5:05:43, 80.81s/it][Succeeded / Failed / Skipped / Total] 391 / 364 / 18 / 773:  77%|███████▋  | 773/1000 [17:21:03<5:05:43, 80.81s/it][Succeeded / Failed / Skipped / Total] 391 / 364 / 18 / 773:  77%|███████▋  | 774/1000 [17:21:37<5:04:08, 80.75s/it][Succeeded / Failed / Skipped / Total] 391 / 365 / 18 / 774:  77%|███████▋  | 774/1000 [17:21:37<5:04:08, 80.75s/it][Succeeded / Failed / Skipped / Total] 391 / 365 / 18 / 774:  78%|███████▊  | 775/1000 [17:24:18<5:03:11, 80.85s/it][Succeeded / Failed / Skipped / Total] 392 / 365 / 18 / 775:  78%|███████▊  | 775/1000 [17:24:18<5:03:11, 80.85s/it][Succeeded / Failed / Skipped / Total] 392 / 365 / 18 / 775:  78%|███████▊  | 776/1000 [17:33:21<5:04:03, 81.44s/it][Succeeded / Failed / Skipped / Total] 392 / 366 / 18 / 776:  78%|███████▊  | 776/1000 [17:33:21<5:04:03, 81.44s/it][Succeeded / Failed / Skipped / Total] 392 / 366 / 18 / 776:  78%|███████▊  | 777/1000 [17:34:16<5:02:34, 81.41s/it][Succeeded / Failed / Skipped / Total] 392 / 367 / 18 / 777:  78%|███████▊  | 777/1000 [17:34:16<5:02:34, 81.41s/it][Succeeded / Failed / Skipped / Total] 392 / 367 / 18 / 777:  78%|███████▊  | 778/1000 [17:36:18<5:01:24, 81.46s/it]Loads the special arguments for the given method. --> ZAPOVE instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[zato]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 773 ---------------------------------------------
Returns advice method name. --> Converts the supplied number of evenly spaced polygons in the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygons in the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygons in the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin the supplied number of evenly spaced polygonsin --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[colonialists]] ( final String [[numerals]] , final int [[clue]] ) { return ProxettaNames . methodPrefix + [[numerals]] + ProxettaNames . methodDivider + [[clue]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 774 ---------------------------------------------
Registers a custom Petite bean.@param < T > the type of the bean to be registered@param type the type of the bean to be registered@param name the name of the bean to be registered@param scopeType the scope of the bean to be registered@param wiringMode the wiring mode of the bean to be registered@param define {@code true} if the bean should be defined, {@code false} otherwise@param consumer the consumer --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 775 ---------------------------------------------
Adds an int to the end of the stack. --> Returns true if the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[supports]] ( final MethodVisitor [[vessel]] , final int [[appreciates]] ) { if ( [[appreciates]] <= 5 ) { [[vessel]] . visitInsn ( ICONST_0 + [[appreciates]] ) ; } else if ( [[appreciates]] <= Byte . MAX_VALUE ) { [[vessel]] . visitIntInsn ( BIPUSH , [[appreciates]] ) ; } else { [[vessel]] . visitIntInsn ( SIPUSH , [[appreciates]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 776 ---------------------------------------------
Loads the static method arguments.@param mv the method visitor.@param methodInfo the method info. --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 777 ---------------------------------------------
Loads the virtual method arguments.@param mv the method visitor.@param methodInfo the method info. --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 778 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 392 / 368 / 18 / 778:  78%|███████▊  | 778/1000 [17:36:18<5:01:24, 81.46s/it][Succeeded / Failed / Skipped / Total] 392 / 368 / 18 / 778:  78%|███████▊  | 779/1000 [17:36:35<4:59:45, 81.38s/it][Succeeded / Failed / Skipped / Total] 392 / 369 / 18 / 779:  78%|███████▊  | 779/1000 [17:36:35<4:59:45, 81.38s/it][Succeeded / Failed / Skipped / Total] 392 / 369 / 18 / 779:  78%|███████▊  | 780/1000 [17:37:07<4:58:09, 81.32s/it][Succeeded / Failed / Skipped / Total] 392 / 370 / 18 / 780:  78%|███████▊  | 780/1000 [17:37:07<4:58:09, 81.32s/it][Succeeded / Failed / Skipped / Total] 392 / 370 / 18 / 780:  78%|███████▊  | 781/1000 [17:37:09<4:56:26, 81.22s/it][Succeeded / Failed / Skipped / Total] 392 / 371 / 18 / 781:  78%|███████▊  | 781/1000 [17:37:09<4:56:26, 81.22s/it][Succeeded / Failed / Skipped / Total] 392 / 371 / 18 / 781:  78%|███████▊  | 782/1000 [17:38:33<4:55:05, 81.22s/it][Succeeded / Failed / Skipped / Total] 392 / 372 / 18 / 782:  78%|███████▊  | 782/1000 [17:38:33<4:55:05, 81.22s/it][Succeeded / Failed / Skipped / Total] 392 / 372 / 18 / 782:  78%|███████▊  | 783/1000 [17:39:08<4:53:31, 81.16s/it][Succeeded / Failed / Skipped / Total] 393 / 372 / 18 / 783:  78%|███████▊  | 783/1000 [17:39:08<4:53:31, 81.16s/it][Succeeded / Failed / Skipped / Total] 393 / 372 / 18 / 783:  78%|███████▊  | 784/1000 [17:40:11<4:52:05, 81.14s/it]Create a method signature key. --> [[[FAILED]]]

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 779 ---------------------------------------------
Intercepts the supplied action request. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 780 ---------------------------------------------
Prepares a return value instruction.@param mva method visitor@param methodInfothe method info@param varOffsetthe offset --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 781 ---------------------------------------------
Registers a provider for the specified Petite type. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 782 ---------------------------------------------
Returns true if the given flags are empty. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 783 ---------------------------------------------
Extracts the encoding from the content type.@param contentType the content type@param defaultEncoding the default encoding@return the encoding --> Returns the name of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesymbol of the sexagesy --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[depositions]] ( final String [[moanin]] , String [[shon]] ) { String [[garp]] = [[depositions]] ( [[moanin]] ) ; if ( [[garp]] == null ) { if ( [[shon]] == null ) { [[shon]] = JoddCore . encoding ; } [[garp]] = [[shon]] ; } return [[garp]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 784 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 393 / 373 / 18 / 784:  78%|███████▊  | 784/1000 [17:40:11<4:52:05, 81.14s/it][Succeeded / Failed / Skipped / Total] 393 / 373 / 18 / 784:  78%|███████▊  | 785/1000 [17:41:41<4:50:47, 81.15s/it][Succeeded / Failed / Skipped / Total] 393 / 374 / 18 / 785:  78%|███████▊  | 785/1000 [17:41:41<4:50:47, 81.15s/it][Succeeded / Failed / Skipped / Total] 393 / 374 / 18 / 785:  79%|███████▊  | 786/1000 [17:43:14<4:49:29, 81.16s/it][Succeeded / Failed / Skipped / Total] 393 / 375 / 18 / 786:  79%|███████▊  | 786/1000 [17:43:14<4:49:29, 81.16s/it][Succeeded / Failed / Skipped / Total] 393 / 375 / 18 / 786:  79%|███████▊  | 787/1000 [17:44:36<4:48:08, 81.16s/it]Loads the argument at the given index.@param mv the method visitor.@param methodInfo the method info.@param index the index. --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 785 ---------------------------------------------
Registers a provider for the specified Petite bean. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 786 ---------------------------------------------
Stores an argument at the given index.@param mv the method visitor.@param methodInfo the method info.@param index the index. --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 394 / 375 / 18 / 787:  79%|███████▊  | 787/1000 [17:44:36<4:48:08, 81.16s/it][Succeeded / Failed / Skipped / Total] 394 / 375 / 18 / 787:  79%|███████▉  | 788/1000 [17:46:05<4:46:49, 81.17s/it][Succeeded / Failed / Skipped / Total] 395 / 375 / 18 / 788:  79%|███████▉  | 788/1000 [17:46:05<4:46:49, 81.17s/it][Succeeded / Failed / Skipped / Total] 395 / 375 / 18 / 788:  79%|███████▉  | 789/1000 [17:49:02<4:45:53, 81.30s/it][Succeeded / Failed / Skipped / Total] 396 / 375 / 18 / 789:  79%|███████▉  | 789/1000 [17:49:02<4:45:53, 81.30s/it][Succeeded / Failed / Skipped / Total] 396 / 375 / 18 / 789:  79%|███████▉  | 790/1000 [17:50:12<4:44:29, 81.28s/it]Creates a new array of the specified type. --> Analyzes the encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters of encounters --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[notorious]] ( final MethodVisitor [[battleship]] , final Class [[nightly]] ) { if ( [[nightly]] == int . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[nightly]] == long . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[nightly]] == float . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[nightly]] == double . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[nightly]] == byte . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[nightly]] == short . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[nightly]] == boolean . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[nightly]] == char . class ) { [[battleship]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[battleship]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[nightly]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 788 ---------------------------------------------
Prepares the response for download.@param response the servlet response@param file the file@param mimeType the mime type --> Write an Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang Erlang --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[omi]] ( final HttpServletResponse [[contingency]] , final File [[deposits]] , final String [[variation]] ) { if ( ! [[deposits]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[deposits]] ) ; } if ( [[deposits]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[deposits]] ) ; } prepareResponse ( [[contingency]] , [[deposits]] . getAbsolutePath ( ) , [[variation]] , ( int ) [[deposits]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 789 ---------------------------------------------
Reads the specified request body from the specified request stream.@param request the specified request@return the specified request body@throws IOException if an I/O error occurs --> R rougher@param application@return@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[rougher]] ( final HttpServletRequest [[application]] ) throws IOException { String charEncoding = [[application]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[botha]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[application]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[botha]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[botha]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 790 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 376 / 18 / 790:  79%|███████▉  | 790/1000 [17:50:12<4:44:29, 81.28s/it][Succeeded / Failed / Skipped / Total] 396 / 376 / 18 / 790:  79%|███████▉  | 791/1000 [17:52:22<4:43:20, 81.34s/it][Succeeded / Failed / Skipped / Total] 397 / 376 / 18 / 791:  79%|███████▉  | 791/1000 [17:52:22<4:43:20, 81.34s/it][Succeeded / Failed / Skipped / Total] 397 / 376 / 18 / 791:  79%|███████▉  | 792/1000 [17:55:07<4:42:21, 81.45s/it][Succeeded / Failed / Skipped / Total] 397 / 377 / 18 / 792:  79%|███████▉  | 792/1000 [17:55:07<4:42:21, 81.45s/it][Succeeded / Failed / Skipped / Total] 397 / 377 / 18 / 792:  79%|███████▉  | 793/1000 [17:57:37<4:41:17, 81.54s/it][Succeeded / Failed / Skipped / Total] 397 / 378 / 18 / 793:  79%|███████▉  | 793/1000 [17:57:37<4:41:17, 81.54s/it][Succeeded / Failed / Skipped / Total] 397 / 378 / 18 / 793:  79%|███████▉  | 794/1000 [17:58:41<4:39:51, 81.51s/it][Succeeded / Failed / Skipped / Total] 397 / 379 / 18 / 794:  79%|███████▉  | 794/1000 [17:58:41<4:39:51, 81.51s/it][Succeeded / Failed / Skipped / Total] 397 / 379 / 18 / 794:  80%|███████▉  | 795/1000 [18:00:32<4:38:37, 81.55s/it][Succeeded / Failed / Skipped / Total] 398 / 379 / 18 / 795:  80%|███████▉  | 795/1000 [18:00:32<4:38:37, 81.55s/it][Succeeded / Failed / Skipped / Total] 398 / 379 / 18 / 795:  80%|███████▉  | 796/1000 [18:00:42<4:36:57, 81.46s/it][Succeeded / Failed / Skipped / Total] 399 / 379 / 18 / 796:  80%|███████▉  | 796/1000 [18:00:42<4:36:57, 81.46s/it][Succeeded / Failed / Skipped / Total] 399 / 379 / 18 / 796:  80%|███████▉  | 797/1000 [18:00:51<4:35:18, 81.37s/it]Stores an int into an array.@param mva method visitor.@param componentTypethe component type. --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 791 ---------------------------------------------
Stores a context path variable in the servlet context. --> Sets the Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii Ascii As --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[seaworthy]] ( final ServletContext [[tunner]] , final String [[asiatic]] ) { String [[angst]] = getContextPath ( [[tunner]] ) ; [[tunner]] . setAttribute ( [[asiatic]] , [[angst]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 792 ---------------------------------------------
Resolves the bearer token header.@param request the servlet request.@return the bearer token header or <code>null</code> if none. --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 793 ---------------------------------------------
Checks if the specified parameter is a GET parameter.@param request the servlet request@param name the parameter name@return true if the parameter is a GET parameter, false otherwise --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 794 ---------------------------------------------
Require authentication.@param responsethe response@param realmthe realm@throws IOExceptionSignals that an I/O exception has occurred. --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 795 ---------------------------------------------
Invokes the body of the tag. --> Moselle the given fragment --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[moselle]] ( final JspFragment [[charity]] ) throws JspException { if ( [[charity]] == null ) { return ; } try { [[charity]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 796 ---------------------------------------------
Stores the given context path variable in the given page context. --> gunsmoke the specified table --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[request]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[gunsmoke]] ( final PageContext pageContext , final String [[table]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[inviting]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[inviting]] . setAttribute ( [[table]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[table]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 379 / 18 / 797:  80%|███████▉  | 797/1000 [18:00:51<4:35:18, 81.37s/it][Succeeded / Failed / Skipped / Total] 400 / 379 / 18 / 797:  80%|███████▉  | 798/1000 [18:03:46<4:34:20, 81.49s/it][Succeeded / Failed / Skipped / Total] 400 / 380 / 18 / 798:  80%|███████▉  | 798/1000 [18:03:46<4:34:20, 81.49s/it][Succeeded / Failed / Skipped / Total] 400 / 380 / 18 / 798:  80%|███████▉  | 799/1000 [18:05:04<4:32:57, 81.48s/it][Succeeded / Failed / Skipped / Total] 400 / 381 / 18 / 799:  80%|███████▉  | 799/1000 [18:05:04<4:32:57, 81.48s/it][Succeeded / Failed / Skipped / Total] 400 / 381 / 18 / 799:  80%|████████  | 800/1000 [18:05:05<4:31:16, 81.38s/it][Succeeded / Failed / Skipped / Total] 400 / 382 / 18 / 800:  80%|████████  | 800/1000 [18:05:05<4:31:16, 81.38s/it][Succeeded / Failed / Skipped / Total] 400 / 382 / 18 / 800:  80%|████████  | 801/1000 [18:06:56<4:30:02, 81.42s/it][Succeeded / Failed / Skipped / Total] 401 / 382 / 18 / 801:  80%|████████  | 801/1000 [18:06:56<4:30:02, 81.42s/it][Succeeded / Failed / Skipped / Total] 401 / 382 / 18 / 801:  80%|████████  | 802/1000 [18:07:38<4:28:31, 81.37s/it][Succeeded / Failed / Skipped / Total] 402 / 382 / 18 / 802:  80%|████████  | 802/1000 [18:07:38<4:28:31, 81.37s/it][Succeeded / Failed / Skipped / Total] 402 / 382 / 18 / 802:  80%|████████  | 803/1000 [18:10:46<4:27:36, 81.50s/it]Copies all parameters from the servlet request to the given attributes.@param servletRequest the servlet request@param treatEmptyParamsAsNull the treat empty parameters as null@param ignoreEmptyRequestParams the ignore empty request parameters as null --> Performs a heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic heuristic --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[hedge]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 798 ---------------------------------------------
Reads the request body from the specified request. --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 799 ---------------------------------------------
Retrieves all the cookies with the specified name.@param request the current HttpServletRequest.@param cookieName the name of the cookie to retrieve.@return all the cookies with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 800 ---------------------------------------------
Sets the response content type and file size. --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 801 ---------------------------------------------
Inject parameters.@param paramManager the param manager@param implicitParamInjection the implicit param injection --> S sulfa@param fouled@param implicitParamInjection --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[sulfa]] ( final ParamManager [[fouled]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 802 ---------------------------------------------
Rewrites the given action path. --> Lacan le longhand@param pteranodon@param lacan@param deray@return --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String [[httpMethod]] ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[longhand]] ( final HttpServletRequest [[pteranodon]] , final String [[lacan]] , final String [[deray]] ) { return [[lacan]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 803 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 383 / 18 / 803:  80%|████████  | 803/1000 [18:10:46<4:27:36, 81.50s/it][Succeeded / Failed / Skipped / Total] 402 / 383 / 18 / 803:  80%|████████  | 804/1000 [18:11:02<4:25:58, 81.42s/it][Succeeded / Failed / Skipped / Total] 402 / 384 / 18 / 804:  80%|████████  | 804/1000 [18:11:02<4:25:58, 81.42s/it][Succeeded / Failed / Skipped / Total] 402 / 384 / 18 / 804:  80%|████████  | 805/1000 [18:11:09<4:24:18, 81.33s/it][Succeeded / Failed / Skipped / Total] 403 / 384 / 18 / 805:  80%|████████  | 805/1000 [18:11:09<4:24:18, 81.33s/it][Succeeded / Failed / Skipped / Total] 403 / 384 / 18 / 805:  81%|████████  | 806/1000 [18:13:21<4:23:10, 81.39s/it][Succeeded / Failed / Skipped / Total] 404 / 384 / 18 / 806:  81%|████████  | 806/1000 [18:13:21<4:23:10, 81.39s/it][Succeeded / Failed / Skipped / Total] 404 / 384 / 18 / 806:  81%|████████  | 807/1000 [18:14:14<4:21:41, 81.36s/it][Succeeded / Failed / Skipped / Total] 405 / 384 / 18 / 807:  81%|████████  | 807/1000 [18:14:14<4:21:41, 81.36s/it][Succeeded / Failed / Skipped / Total] 405 / 384 / 18 / 807:  81%|████████  | 808/1000 [18:14:39<4:20:07, 81.29s/it][Succeeded / Failed / Skipped / Total] 406 / 384 / 18 / 808:  81%|████████  | 808/1000 [18:14:39<4:20:07, 81.29s/it][Succeeded / Failed / Skipped / Total] 406 / 384 / 18 / 808:  81%|████████  | 809/1000 [18:16:47<4:18:56, 81.34s/it][Succeeded / Failed / Skipped / Total] 407 / 384 / 18 / 809:  81%|████████  | 809/1000 [18:16:47<4:18:56, 81.34s/it][Succeeded / Failed / Skipped / Total] 407 / 384 / 18 / 809:  81%|████████  | 810/1000 [18:17:26<4:17:25, 81.29s/it][Succeeded / Failed / Skipped / Total] 407 / 385 / 18 / 810:  81%|████████  | 810/1000 [18:17:26<4:17:25, 81.29s/it][Succeeded / Failed / Skipped / Total] 407 / 385 / 18 / 810:  81%|████████  | 811/1000 [18:18:40<4:16:02, 81.28s/it][Succeeded / Failed / Skipped / Total] 407 / 386 / 18 / 811:  81%|████████  | 811/1000 [18:18:40<4:16:02, 81.28s/it][Succeeded / Failed / Skipped / Total] 407 / 386 / 18 / 811:  81%|████████  | 812/1000 [18:19:21<4:14:31, 81.23s/it]Calls all destroy methods. --> [[[FAILED]]]

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Invokes all registered init methods. --> [[[FAILED]]]

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Puts a value into the map.@param profile the profile name@param map the map@param key the key@param value the value --> Converts a profile to an appended representation. --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean [[append]] ) { String [[realValue]] = value ; if ( [[append]] || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[presenting]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean [[jean]] ) { String [[buddhist]] = value ; if ( [[jean]] || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[buddhist]] = pv . value + APPEND_SEPARATOR + [[buddhist]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[buddhist]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 806 ---------------------------------------------
Renders the body of a JSP fragment. --> Zhukov zhukov@param organizations@return@throws JspException --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[zhukov]] ( final JspFragment [[organizations]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[organizations]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 807 ---------------------------------------------
Retrieve a profile property.@param profile the profile name@param key the key@return the property or <code>null</code> --> Get the props entry for the specified headshots and key@param headshots@param key@return --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[tnt]] ( final String [[headshots]] , final String key ) { final Map < String , PropsEntry > [[kiwi]] = profileProperties . get ( [[headshots]] ) ; if ( [[kiwi]] == null ) { return null ; } return [[kiwi]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 808 ---------------------------------------------
Resolve the macros in the specified profiles. --> Returns a string representation of the given sketching@param value@param sketching@return --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[mores]] ( String value , final String ... [[sketching]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 809 ---------------------------------------------
Adds a base property.@param key the key@param value the value@param append the append --> zoya --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[zoya]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 810 ---------------------------------------------
Creates a new bean instance. --> [[[FAILED]]]

[[[[Adv]]]]: public Object newBeanInstance ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object newBeanInstance ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 811 ---------------------------------------------
Renders the body to a string.@param body the body to render.@return the rendered body.@throws JspException if the body cannot be rendered. --> [[[FAILED]]]

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 812 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 386 / 18 / 812:  81%|████████  | 812/1000 [18:19:21<4:14:31, 81.23s/it][Succeeded / Failed / Skipped / Total] 408 / 386 / 18 / 812:  81%|████████▏ | 813/1000 [18:22:31<4:13:35, 81.37s/it][Succeeded / Failed / Skipped / Total] 408 / 387 / 18 / 813:  81%|████████▏ | 813/1000 [18:22:31<4:13:35, 81.37s/it][Succeeded / Failed / Skipped / Total] 408 / 387 / 18 / 813:  81%|████████▏ | 814/1000 [18:23:13<4:12:05, 81.32s/it][Succeeded / Failed / Skipped / Total] 409 / 387 / 18 / 814:  81%|████████▏ | 814/1000 [18:23:13<4:12:05, 81.32s/it][Succeeded / Failed / Skipped / Total] 409 / 387 / 18 / 814:  82%|████████▏ | 815/1000 [18:25:14<4:10:53, 81.37s/it][Succeeded / Failed / Skipped / Total] 409 / 388 / 18 / 815:  82%|████████▏ | 815/1000 [18:25:14<4:10:53, 81.37s/it][Succeeded / Failed / Skipped / Total] 409 / 388 / 18 / 815:  82%|████████▏ | 816/1000 [18:26:38<4:09:32, 81.37s/it][Succeeded / Failed / Skipped / Total] 410 / 388 / 18 / 816:  82%|████████▏ | 816/1000 [18:26:38<4:09:32, 81.37s/it][Succeeded / Failed / Skipped / Total] 410 / 388 / 18 / 816:  82%|████████▏ | 817/1000 [18:28:08<4:08:12, 81.38s/it]Hashes the given password with the given salt. --> Tridiagonal tridiagonal algorithm@param numerical@param salt@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[trudge]] ( String [[numerical]] , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[earls]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 813 ---------------------------------------------
Adds the specified header value. --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 814 ---------------------------------------------
Checks to see if the given hashed string is valid. --> Checks if the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of thespecified magnitude of the specified magnitude of the --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] [[hashed_bytes]] ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( [[plaintext]] , hashed ) ; [[hashed_bytes]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[hashed_bytes]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[hashed_bytes]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[slight]] , String hashed ) { byte [ ] [[occur]] ; byte [ ] try_bytes ; try { String [[falar]] = hashpw ( [[slight]] , hashed ) ; [[occur]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[falar]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[occur]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[occur]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 815 ---------------------------------------------
Prepares a list of parameters.@param paramValues The list of parameters.@param treatEmptyParamsAsNull Whether or not to ignore empty parameters.@param ignoreEmptyRequestParams Whether or not to ignore empty request parameters.@return The list of parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 816 ---------------------------------------------
Extracts a mapping from a target map.@param target the target map@param profiles the profiles@param wildcardPatterns the wildcard patterns@param prefix the prefix@return the mapping --> E eject the specified object from the specified sketch@param meta the specified sketch@param sketch the specified sketch@param immediatly the specified immediatly@param prefix the specified prefix --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] [[profiles]] , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[eject]] ( Map [[meta]] , final String [ ] [[sketch]] , final String [ ] [[immediatly]] , String prefix ) { if ( [[meta]] == null ) { [[meta]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 388 / 18 / 817:  82%|████████▏ | 817/1000 [18:28:08<4:08:12, 81.38s/it][Succeeded / Failed / Skipped / Total] 411 / 388 / 18 / 817:  82%|████████▏ | 818/1000 [18:30:52<4:07:09, 81.48s/it][Succeeded / Failed / Skipped / Total] 411 / 389 / 18 / 818:  82%|████████▏ | 818/1000 [18:30:52<4:07:09, 81.48s/it][Succeeded / Failed / Skipped / Total] 411 / 389 / 18 / 818:  82%|████████▏ | 819/1000 [18:33:19<4:06:02, 81.56s/it][Succeeded / Failed / Skipped / Total] 412 / 389 / 18 / 819:  82%|████████▏ | 819/1000 [18:33:19<4:06:02, 81.56s/it][Succeeded / Failed / Skipped / Total] 412 / 389 / 18 / 819:  82%|████████▏ | 820/1000 [18:34:49<4:04:42, 81.57s/it][Succeeded / Failed / Skipped / Total] 413 / 389 / 18 / 820:  82%|████████▏ | 820/1000 [18:34:49<4:04:42, 81.57s/it][Succeeded / Failed / Skipped / Total] 413 / 389 / 18 / 820:  82%|████████▏ | 821/1000 [18:35:24<4:03:11, 81.52s/it][Succeeded / Failed / Skipped / Total] 414 / 389 / 18 / 821:  82%|████████▏ | 821/1000 [18:35:24<4:03:11, 81.52s/it][Succeeded / Failed / Skipped / Total] 414 / 389 / 18 / 821:  82%|████████▏ | 822/1000 [18:38:06<4:02:07, 81.61s/it][Succeeded / Failed / Skipped / Total] 415 / 389 / 18 / 822:  82%|████████▏ | 822/1000 [18:38:06<4:02:07, 81.61s/it][Succeeded / Failed / Skipped / Total] 415 / 389 / 18 / 822:  82%|████████▏ | 823/1000 [18:38:13<4:00:29, 81.52s/it]Copies all bytes from the input stream to the output stream.@param out the output stream@return the number of bytes copied --> P pandu@param out@return@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[pandu]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Detect and register an action alias.@param annotationValues the action annotation values@param actionDefinition the action definition --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 819 ---------------------------------------------
Converts an array of bytes into a stream of words. --> Fireman implementation --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] [[data]] , int [ ] offp ) { int [[i]] ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { [[word]] = ( [[word]] << 8 ) | ( [[data]] [ off ] & 0xff ) ; off = ( off + 1 ) % [[data]] . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[fireman]] ( byte [ ] [[elucidate]] , int [ ] offp ) { int [[wanna]] ; int [[statement]] = 0 ; int off = offp [ 0 ] ; for ( [[wanna]] = 0 ; [[wanna]] < 4 ; [[wanna]] ++ ) { [[statement]] = ( [[statement]] << 8 ) | ( [[elucidate]] [ off ] & 0xff ) ; off = ( off + 1 ) % [[elucidate]] . length ; } offp [ 0 ] = off ; return [[statement]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 820 ---------------------------------------------
Resolves the action configuration for the given action annotation.@param annotationValues the action annotation values.@return the action configuration. --> zhuang --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[zhuang]] ( final ActionAnnotationValues [[bobsled]] ) { final Class < ? extends Annotation > [[stef]] ; if ( [[bobsled]] == null ) { [[stef]] = Action . class ; } else { [[stef]] = [[bobsled]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[stef]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 821 ---------------------------------------------
Reads the path to the action package. --> Deregisters the hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated hyphenated --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class [[actionClass]] ) { Package [[actionPackage]] = [[actionClass]] . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[dears]] ( final Class [[kicks]] ) { Package [[psychotherapy]] = [[kicks]] . getPackage ( ) ; final String actionPackageName = [[psychotherapy]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 822 ---------------------------------------------
Copies all bytes from the input stream to the output stream. --> Creates a trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust trust --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int [[maxBytes]] ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; if ( [[count]] == [[maxBytes]] ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[hinkley]] ( final OutputStream [[beside]] , final int [[woe]] ) throws IOException { int [[entrust]] = 0 ; while ( "[[Really]]" == "[[Really]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[beside]] . write ( b ) ; [[entrust]] ++ ; if ( [[entrust]] == [[woe]] ) { return [[entrust]] ; } } return [[entrust]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 823 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 415 / 390 / 18 / 823:  82%|████████▏ | 823/1000 [18:38:13<4:00:29, 81.52s/it][Succeeded / Failed / Skipped / Total] 415 / 390 / 18 / 823:  82%|████████▏ | 824/1000 [18:38:13<3:58:50, 81.42s/it][Succeeded / Failed / Skipped / Total] 415 / 390 / 19 / 824:  82%|████████▏ | 824/1000 [18:38:13<3:58:50, 81.42s/it][Succeeded / Failed / Skipped / Total] 415 / 390 / 19 / 824:  82%|████████▎ | 825/1000 [18:39:00<3:57:21, 81.38s/it][Succeeded / Failed / Skipped / Total] 416 / 390 / 19 / 825:  82%|████████▎ | 825/1000 [18:39:00<3:57:21, 81.38s/it][Succeeded / Failed / Skipped / Total] 416 / 390 / 19 / 825:  83%|████████▎ | 826/1000 [18:44:46<3:56:56, 81.70s/it][Succeeded / Failed / Skipped / Total] 416 / 391 / 19 / 826:  83%|████████▎ | 826/1000 [18:44:46<3:56:56, 81.70s/it][Succeeded / Failed / Skipped / Total] 416 / 391 / 19 / 826:  83%|████████▎ | 827/1000 [18:45:15<3:55:23, 81.64s/it][Succeeded / Failed / Skipped / Total] 417 / 391 / 19 / 827:  83%|████████▎ | 827/1000 [18:45:15<3:55:23, 81.64s/it][Succeeded / Failed / Skipped / Total] 417 / 391 / 19 / 827:  83%|████████▎ | 828/1000 [18:45:19<3:53:45, 81.55s/it][Succeeded / Failed / Skipped / Total] 417 / 392 / 19 / 828:  83%|████████▎ | 828/1000 [18:45:19<3:53:45, 81.55s/it][Succeeded / Failed / Skipped / Total] 417 / 392 / 19 / 828:  83%|████████▎ | 829/1000 [18:46:50<3:52:26, 81.56s/it][Succeeded / Failed / Skipped / Total] 418 / 392 / 19 / 829:  83%|████████▎ | 829/1000 [18:46:50<3:52:26, 81.56s/it][Succeeded / Failed / Skipped / Total] 418 / 392 / 19 / 829:  83%|████████▎ | 830/1000 [18:50:19<3:51:30, 81.71s/it][Succeeded / Failed / Skipped / Total] 419 / 392 / 19 / 830:  83%|████████▎ | 830/1000 [18:50:19<3:51:30, 81.71s/it][Succeeded / Failed / Skipped / Total] 419 / 392 / 19 / 830:  83%|████████▎ | 831/1000 [18:51:00<3:50:00, 81.66s/it]Put a profile property.@param key the key@param value the value@param profile the profile@param append the append --> [[[FAILED]]]

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 824 ---------------------------------------------
Sets the last modified time of this request. --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 825 ---------------------------------------------
Read action filters. --> zooKeeper zooKeeper client --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[zoolander]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 826 ---------------------------------------------
Parses an action definition.@param actionClass the action class@param actionMethod the action method@param actionDefinition the action definition --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 827 ---------------------------------------------
Parses the action annotation values and returns the alias.@param annotationValues the action annotation values.@return the alias. --> Ambrosa la alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt alt --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[ambrosia]] ( final ActionAnnotationValues [[lowed]] ) { String [[pseudo]] = null ; if ( [[lowed]] != null ) { [[pseudo]] = [[lowed]] . alias ( ) ; } return [[pseudo]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 828 ---------------------------------------------
Read interceptors.@param actionClassOrMethod the action class or method@return the interceptors --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 829 ---------------------------------------------
Injects the target object into the proxy. --> R roulette --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[roulette]] ( final Object [[approximation]] , final Object target ) { Class [[piker]] = [[approximation]] . getClass ( ) ; try { Field field = [[piker]] . getField ( "$___target$0" ) ; field . set ( [[approximation]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 830 ---------------------------------------------
Resolves the name of the given json name. --> Ask for a tray --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[tray]] ( final String [[aska]] ) { if ( jsonNames == null ) { return [[aska]] ; } int [[pedophile]] = ArraysUtil . indexOf ( jsonNames , [[aska]] ) ; if ( [[pedophile]] == - 1 ) { return [[aska]] ; } return realNames [ [[pedophile]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 831 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 420 / 392 / 19 / 831:  83%|████████▎ | 831/1000 [18:51:00<3:50:00, 81.66s/it][Succeeded / Failed / Skipped / Total] 420 / 392 / 19 / 831:  83%|████████▎ | 832/1000 [18:52:51<3:48:45, 81.70s/it][Succeeded / Failed / Skipped / Total] 421 / 392 / 19 / 832:  83%|████████▎ | 832/1000 [18:52:51<3:48:45, 81.70s/it][Succeeded / Failed / Skipped / Total] 421 / 392 / 19 / 832:  83%|████████▎ | 833/1000 [18:52:59<3:47:08, 81.61s/it][Succeeded / Failed / Skipped / Total] 422 / 392 / 19 / 833:  83%|████████▎ | 833/1000 [18:52:59<3:47:08, 81.61s/it][Succeeded / Failed / Skipped / Total] 422 / 392 / 19 / 833:  83%|████████▎ | 834/1000 [18:54:04<3:45:43, 81.59s/it][Succeeded / Failed / Skipped / Total] 422 / 393 / 19 / 834:  83%|████████▎ | 834/1000 [18:54:04<3:45:43, 81.59s/it][Succeeded / Failed / Skipped / Total] 422 / 393 / 19 / 834:  84%|████████▎ | 835/1000 [18:54:25<3:44:10, 81.52s/it][Succeeded / Failed / Skipped / Total] 423 / 393 / 19 / 835:  84%|████████▎ | 835/1000 [18:54:25<3:44:10, 81.52s/it][Succeeded / Failed / Skipped / Total] 423 / 393 / 19 / 835:  84%|████████▎ | 836/1000 [18:56:15<3:42:54, 81.55s/it][Succeeded / Failed / Skipped / Total] 424 / 393 / 19 / 836:  84%|████████▎ | 836/1000 [18:56:15<3:42:54, 81.55s/it][Succeeded / Failed / Skipped / Total] 424 / 393 / 19 / 836:  84%|████████▎ | 837/1000 [19:00:03<3:42:01, 81.73s/it][Succeeded / Failed / Skipped / Total] 424 / 394 / 19 / 837:  84%|████████▎ | 837/1000 [19:00:03<3:42:01, 81.73s/it][Succeeded / Failed / Skipped / Total] 424 / 394 / 19 / 837:  84%|████████▍ | 838/1000 [19:00:44<3:40:31, 81.68s/it][Succeeded / Failed / Skipped / Total] 425 / 394 / 19 / 838:  84%|████████▍ | 838/1000 [19:00:44<3:40:31, 81.68s/it][Succeeded / Failed / Skipped / Total] 425 / 394 / 19 / 838:  84%|████████▍ | 839/1000 [19:01:18<3:39:00, 81.62s/it][Succeeded / Failed / Skipped / Total] 426 / 394 / 19 / 839:  84%|████████▍ | 839/1000 [19:01:18<3:39:00, 81.62s/it][Succeeded / Failed / Skipped / Total] 426 / 394 / 19 / 839:  84%|████████▍ | 840/1000 [19:03:05<3:37:43, 81.65s/it]Lookup the type data for the given type. --> zuckerberg --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[zuckerberg]] ( final Class [[boyfriend]] ) { TypeData [[requests]] = typeDataMap . get ( [[boyfriend]] ) ; if ( [[requests]] == null ) { [[requests]] = scanClassForAnnotations ( [[boyfriend]] ) ; typeDataMap . put ( [[boyfriend]] , [[requests]] ) ; } return [[requests]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 832 ---------------------------------------------
Read method action path.@param methodName the method name@param annotationValues the annotation values@param actionConfig the action config@return the string --> Williams@param stopper@param annotationValues@param monotheism@return --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[williams]] ( final String [[stopper]] , final ActionAnnotationValues annotationValues , final ActionConfig [[monotheism]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 833 ---------------------------------------------
Resolve a JSON name for the given type.@param type the type@param name the name@return the name --> Resolves everyman in the given tipo@param tipo@param appointment@return --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String [[name]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[everyman]] ( final Class [[tipo]] , final String [[appointment]] ) { TypeData typeData = lookupTypeData ( [[tipo]] ) ; return typeData . resolveJsonName ( [[appointment]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 834 ---------------------------------------------
Applies an advice to the specified target class.@param < T> the type parameter@param targetClass the target class@return the target instance --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 835 ---------------------------------------------
Resolves a JSON name.@param realName the name to resolve.@return the resolved name. --> Converts the supplied string into a yaa --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[yatta]] ( final String [[sult]] ) { if ( realNames == null ) { return [[sult]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[sult]] ) ; if ( realIndex == - 1 ) { return [[sult]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 836 ---------------------------------------------
Copies bootstrap methods from the specified class reader to the specified character buffer. --> B blood ( ClassReader ) --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[blood]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 837 ---------------------------------------------
Lookup the type data for the specified type.@param type the type@return the type data --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 838 ---------------------------------------------
Puts a constant pool into the constant pool. --> Register a practitioner --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[practitioner]] ( final ByteVector [[performance]] ) { [[performance]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 839 ---------------------------------------------
Put bootstrap methods.@param output the output --> Convenience method for madurai --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[madurai]] ( final ByteVector [[profits]] ) { if ( bootstrapMethods != null ) { [[profits]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 840 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 427 / 394 / 19 / 840:  84%|████████▍ | 840/1000 [19:03:05<3:37:43, 81.65s/it][Succeeded / Failed / Skipped / Total] 427 / 394 / 19 / 840:  84%|████████▍ | 841/1000 [19:03:42<3:36:13, 81.60s/it][Succeeded / Failed / Skipped / Total] 427 / 395 / 19 / 841:  84%|████████▍ | 841/1000 [19:03:42<3:36:13, 81.60s/it][Succeeded / Failed / Skipped / Total] 427 / 395 / 19 / 841:  84%|████████▍ | 842/1000 [19:05:15<3:34:54, 81.61s/it][Succeeded / Failed / Skipped / Total] 428 / 395 / 19 / 842:  84%|████████▍ | 842/1000 [19:05:15<3:34:54, 81.61s/it][Succeeded / Failed / Skipped / Total] 428 / 395 / 19 / 842:  84%|████████▍ | 843/1000 [19:05:23<3:33:19, 81.52s/it][Succeeded / Failed / Skipped / Total] 428 / 396 / 19 / 843:  84%|████████▍ | 843/1000 [19:05:23<3:33:19, 81.52s/it][Succeeded / Failed / Skipped / Total] 428 / 396 / 19 / 843:  84%|████████▍ | 844/1000 [19:10:19<3:32:37, 81.78s/it][Succeeded / Failed / Skipped / Total] 429 / 396 / 19 / 844:  84%|████████▍ | 844/1000 [19:10:19<3:32:37, 81.78s/it][Succeeded / Failed / Skipped / Total] 429 / 396 / 19 / 844:  84%|████████▍ | 845/1000 [19:10:27<3:31:01, 81.69s/it][Succeeded / Failed / Skipped / Total] 429 / 397 / 19 / 845:  84%|████████▍ | 845/1000 [19:10:27<3:31:01, 81.69s/it][Succeeded / Failed / Skipped / Total] 429 / 397 / 19 / 845:  85%|████████▍ | 846/1000 [19:12:19<3:29:45, 81.72s/it][Succeeded / Failed / Skipped / Total] 430 / 397 / 19 / 846:  85%|████████▍ | 846/1000 [19:12:19<3:29:45, 81.72s/it][Succeeded / Failed / Skipped / Total] 430 / 397 / 19 / 846:  85%|████████▍ | 847/1000 [19:12:44<3:28:13, 81.66s/it]Gets the contents of a file. --> Sneaky throws an IOException --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[sneezes]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 841 ---------------------------------------------
Finds the subtype data for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 842 ---------------------------------------------
Adds a new entry to the constant pool. --> region panchito --> Socre: 1.0

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String [[descriptor]] ) { int hashCode = hash ( tag , owner , name , [[descriptor]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[descriptor]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[panchito]] ( final int tag , final String owner , final String name , final String [[consumer]] ) { int hashCode = hash ( tag , owner , name , [[consumer]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[consumer]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[consumer]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[consumer]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 843 ---------------------------------------------
Visits an annotation.@param descriptor the annotation descriptor@param visible true if the annotation should be visible@return the visitor --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 844 ---------------------------------------------
Sets the major version and class name. --> Constructs a Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian Gaussian --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String [[className]] ) { this . [[majorVersion]] = [[majorVersion]] ; this . [[className]] = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[pho]] ( final int [[greek]] , final String [[seafaring]] ) { this . [[hemoglobin]] = [[greek]] ; this . [[kgb]] = [[seafaring]] ; return addConstantClass ( [[seafaring]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 845 ---------------------------------------------
Resolve the real name for the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 846 ---------------------------------------------
Adds an integer or float constant. --> B bloodly --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[bloodedly]] ( final int [[placard]] , final int value ) { int hashCode = hash ( [[placard]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[placard]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[placard]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[placard]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 431 / 397 / 19 / 847:  85%|████████▍ | 847/1000 [19:12:44<3:28:13, 81.66s/it][Succeeded / Failed / Skipped / Total] 431 / 397 / 19 / 847:  85%|████████▍ | 848/1000 [19:16:59<3:27:23, 81.86s/it][Succeeded / Failed / Skipped / Total] 431 / 398 / 19 / 848:  85%|████████▍ | 848/1000 [19:16:59<3:27:23, 81.86s/it][Succeeded / Failed / Skipped / Total] 431 / 398 / 19 / 848:  85%|████████▍ | 849/1000 [19:26:04<3:27:23, 82.41s/it][Succeeded / Failed / Skipped / Total] 431 / 399 / 19 / 849:  85%|████████▍ | 849/1000 [19:26:04<3:27:23, 82.41s/it][Succeeded / Failed / Skipped / Total] 431 / 399 / 19 / 849:  85%|████████▌ | 850/1000 [19:27:41<3:26:03, 82.43s/it][Succeeded / Failed / Skipped / Total] 431 / 400 / 19 / 850:  85%|████████▌ | 850/1000 [19:27:41<3:26:03, 82.43s/it][Succeeded / Failed / Skipped / Total] 431 / 400 / 19 / 850:  85%|████████▌ | 851/1000 [19:30:00<3:24:51, 82.49s/it][Succeeded / Failed / Skipped / Total] 431 / 401 / 19 / 851:  85%|████████▌ | 851/1000 [19:30:00<3:24:51, 82.49s/it][Succeeded / Failed / Skipped / Total] 431 / 401 / 19 / 851:  85%|████████▌ | 852/1000 [19:31:40<3:23:31, 82.51s/it][Succeeded / Failed / Skipped / Total] 432 / 401 / 19 / 852:  85%|████████▌ | 852/1000 [19:31:40<3:23:31, 82.51s/it][Succeeded / Failed / Skipped / Total] 432 / 401 / 19 / 852:  85%|████████▌ | 853/1000 [19:31:43<3:21:55, 82.42s/it][Succeeded / Failed / Skipped / Total] 432 / 402 / 19 / 853:  85%|████████▌ | 853/1000 [19:31:43<3:21:55, 82.42s/it][Succeeded / Failed / Skipped / Total] 432 / 402 / 19 / 853:  85%|████████▌ | 854/1000 [19:32:30<3:20:27, 82.38s/it]Adds a constant long or double. --> region baruch --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[baruch]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[access]] = get ( hashCode ) ; while ( [[access]] != null ) { if ( [[access]] . tag == tag && [[access]] . hashCode == hashCode && [[access]] . data == value ) { return [[access]] ; } [[access]] = [[access]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant field reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant integer or float entry. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant long or double entry. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a reference to a constant field. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMemberReference ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMemberReference ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant to the constant pool. --> Coppola coppola@param directories@param treasured --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[coppola]] ( final int [[directories]] , final String [[treasured]] ) { add ( new Entry ( [[directories]] , Symbol . CONSTANT_UTF8_TAG , [[treasured]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[treasured]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant name and type. --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 403 / 19 / 854:  85%|████████▌ | 854/1000 [19:32:30<3:20:27, 82.38s/it][Succeeded / Failed / Skipped / Total] 432 / 403 / 19 / 854:  86%|████████▌ | 855/1000 [19:32:34<3:18:51, 82.29s/it][Succeeded / Failed / Skipped / Total] 432 / 404 / 19 / 855:  86%|████████▌ | 855/1000 [19:32:34<3:18:51, 82.29s/it][Succeeded / Failed / Skipped / Total] 432 / 404 / 19 / 855:  86%|████████▌ | 856/1000 [19:33:07<3:17:20, 82.23s/it][Succeeded / Failed / Skipped / Total] 433 / 404 / 19 / 856:  86%|████████▌ | 856/1000 [19:33:07<3:17:20, 82.23s/it][Succeeded / Failed / Skipped / Total] 433 / 404 / 19 / 856:  86%|████████▌ | 857/1000 [19:33:44<3:15:51, 82.18s/it][Succeeded / Failed / Skipped / Total] 433 / 405 / 19 / 857:  86%|████████▌ | 857/1000 [19:33:44<3:15:51, 82.18s/it][Succeeded / Failed / Skipped / Total] 433 / 405 / 19 / 857:  86%|████████▌ | 858/1000 [19:41:16<3:15:30, 82.61s/it][Succeeded / Failed / Skipped / Total] 433 / 406 / 19 / 858:  86%|████████▌ | 858/1000 [19:41:16<3:15:30, 82.61s/it][Succeeded / Failed / Skipped / Total] 433 / 406 / 19 / 858:  86%|████████▌ | 859/1000 [19:47:48<3:14:58, 82.97s/it][Succeeded / Failed / Skipped / Total] 434 / 406 / 19 / 859:  86%|████████▌ | 859/1000 [19:47:48<3:14:58, 82.97s/it][Succeeded / Failed / Skipped / Total] 434 / 406 / 19 / 859:  86%|████████▌ | 860/1000 [19:49:14<3:13:35, 82.97s/it]Adds a constant method reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Creates an action runtime. --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant dynamic or invoke dynamic reference. --> Escondido method --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[escondido]] ( final int tag , final String name , final String [[haw]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[haw]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[haw]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[haw]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[haw]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant name and type. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant utf8 reference. --> S squibs --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[squibs]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
[Succeeded / Failed / Skipped / Total] 435 / 406 / 19 / 860:  86%|████████▌ | 860/1000 [19:49:14<3:13:35, 82.97s/it][Succeeded / Failed / Skipped / Total] 435 / 406 / 19 / 860:  86%|████████▌ | 861/1000 [19:49:31<3:12:02, 82.89s/it][Succeeded / Failed / Skipped / Total] 435 / 407 / 19 / 861:  86%|████████▌ | 861/1000 [19:49:31<3:12:02, 82.89s/it][Succeeded / Failed / Skipped / Total] 435 / 407 / 19 / 861:  86%|████████▌ | 862/1000 [19:55:04<3:11:19, 83.18s/it][Succeeded / Failed / Skipped / Total] 436 / 407 / 19 / 862:  86%|████████▌ | 862/1000 [19:55:04<3:11:19, 83.18s/it][Succeeded / Failed / Skipped / Total] 436 / 407 / 19 / 862:  86%|████████▋ | 863/1000 [19:55:40<3:09:48, 83.13s/it][Succeeded / Failed / Skipped / Total] 436 / 408 / 19 / 863:  86%|████████▋ | 863/1000 [19:55:40<3:09:48, 83.13s/it][Succeeded / Failed / Skipped / Total] 436 / 408 / 19 / 863:  86%|████████▋ | 864/1000 [19:56:42<3:08:22, 83.10s/it][Succeeded / Failed / Skipped / Total] 436 / 409 / 19 / 864:  86%|████████▋ | 864/1000 [19:56:42<3:08:22, 83.10s/it][Succeeded / Failed / Skipped / Total] 436 / 409 / 19 / 864:  86%|████████▋ | 865/1000 [19:56:43<3:06:46, 83.01s/it][Succeeded / Failed / Skipped / Total] 436 / 410 / 19 / 865:  86%|████████▋ | 865/1000 [19:56:43<3:06:46, 83.01s/it][Succeeded / Failed / Skipped / Total] 436 / 410 / 19 / 865:  87%|████████▋ | 866/1000 [19:58:26<3:05:26, 83.03s/it]--------------------------------------------- Result 860 ---------------------------------------------
Adds a bootstrap method to this class. --> Creates an arti arti arti arti arti arti arti arti --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[artie]] ( final Handle [[wickedest]] , final Object ... [[birdseye]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a type to the specified table.@param typeTableIndex1 The index of the first type in the table.@param typeTableIndex2 The index of the second type in the table. --> SCHALLER@param typeTableIndex1@param typeTableIndex2@return --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[schaller]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a constant dynamically. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant dynamic or invoke dynamic reference. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant method handle. --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 866 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 436 / 411 / 19 / 866:  87%|████████▋ | 866/1000 [19:58:26<3:05:26, 83.03s/it][Succeeded / Failed / Skipped / Total] 436 / 411 / 19 / 866:  87%|████████▋ | 867/1000 [20:00:55<3:04:13, 83.11s/it][Succeeded / Failed / Skipped / Total] 436 / 412 / 19 / 867:  87%|████████▋ | 867/1000 [20:00:55<3:04:13, 83.11s/it][Succeeded / Failed / Skipped / Total] 436 / 412 / 19 / 867:  87%|████████▋ | 868/1000 [20:01:18<3:02:41, 83.04s/it][Succeeded / Failed / Skipped / Total] 437 / 412 / 19 / 868:  87%|████████▋ | 868/1000 [20:01:18<3:02:41, 83.04s/it][Succeeded / Failed / Skipped / Total] 437 / 412 / 19 / 868:  87%|████████▋ | 869/1000 [20:01:27<3:01:07, 82.96s/it][Succeeded / Failed / Skipped / Total] 437 / 413 / 19 / 869:  87%|████████▋ | 869/1000 [20:01:27<3:01:07, 82.96s/it][Succeeded / Failed / Skipped / Total] 437 / 413 / 19 / 869:  87%|████████▋ | 870/1000 [20:02:21<2:59:39, 82.92s/it][Succeeded / Failed / Skipped / Total] 438 / 413 / 19 / 870:  87%|████████▋ | 870/1000 [20:02:21<2:59:39, 82.92s/it][Succeeded / Failed / Skipped / Total] 438 / 413 / 19 / 870:  87%|████████▋ | 871/1000 [20:02:31<2:58:06, 82.84s/it][Succeeded / Failed / Skipped / Total] 439 / 413 / 19 / 871:  87%|████████▋ | 871/1000 [20:02:31<2:58:06, 82.84s/it][Succeeded / Failed / Skipped / Total] 439 / 413 / 19 / 871:  87%|████████▋ | 872/1000 [20:03:31<2:56:39, 82.81s/it][Succeeded / Failed / Skipped / Total] 439 / 414 / 19 / 872:  87%|████████▋ | 872/1000 [20:03:31<2:56:39, 82.81s/it][Succeeded / Failed / Skipped / Total] 439 / 414 / 19 / 872:  87%|████████▋ | 873/1000 [20:03:35<2:55:05, 82.72s/it][Succeeded / Failed / Skipped / Total] 440 / 414 / 19 / 873:  87%|████████▋ | 873/1000 [20:03:35<2:55:05, 82.72s/it][Succeeded / Failed / Skipped / Total] 440 / 414 / 19 / 873:  87%|████████▋ | 874/1000 [20:04:41<2:53:40, 82.70s/it]Adds a constant invoke dynamic reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a constant method handle. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Append the specified sequence to this buffer.@param csq The sequence to append.@param start The index of the first character in the sequence.@param end The index of the last character in the sequence.@return This buffer. --> Performing the perishing algorithm@param plagues@param start@param end@return --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[perishing]] ( final CharSequence [[plagues]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[perishing]] ( [[plagues]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 869 ---------------------------------------------
Removes all entries from this map. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 870 ---------------------------------------------
Visit the end of the chain. --> zur determination --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[zur]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[bp]] = 0 ; [[bp]] < tmd . proxyData . length ; [[bp]] ++ ) { tmd . selectCurrentProxy ( [[bp]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 871 ---------------------------------------------
Create the first chain delegate. --> Convenience method for capitalizing a field --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[capital]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 872 ---------------------------------------------
Returns the hash of the given name. --> [[[FAILED]]]

[[[[Adv]]]]: private int hash ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 873 ---------------------------------------------
Visits an annotation. --> Methode de la methode de la methode de la methode de la methode de la methode@param descMethode de la methode de la methode de la methode@param operand de la methode de la methode@return AnnotationVisitor de la methode de la methode --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean [[visible]] ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( desc , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[mía]] ( final String desc , final boolean [[visibly]] ) { AnnotationVisitor [[calibrating]] = methodVisitor . visitAnnotation ( desc , [[visibly]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 874 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 441 / 414 / 19 / 874:  87%|████████▋ | 874/1000 [20:04:41<2:53:40, 82.70s/it][Succeeded / Failed / Skipped / Total] 441 / 414 / 19 / 874:  88%|████████▊ | 875/1000 [20:06:25<2:52:20, 82.73s/it][Succeeded / Failed / Skipped / Total] 441 / 415 / 19 / 875:  88%|████████▊ | 875/1000 [20:06:25<2:52:20, 82.73s/it][Succeeded / Failed / Skipped / Total] 441 / 415 / 19 / 875:  88%|████████▊ | 876/1000 [20:07:36<2:50:56, 82.71s/it][Succeeded / Failed / Skipped / Total] 442 / 415 / 19 / 876:  88%|████████▊ | 876/1000 [20:07:36<2:50:56, 82.71s/it][Succeeded / Failed / Skipped / Total] 442 / 415 / 19 / 876:  88%|████████▊ | 877/1000 [20:08:12<2:49:27, 82.66s/it][Succeeded / Failed / Skipped / Total] 443 / 415 / 19 / 877:  88%|████████▊ | 877/1000 [20:08:12<2:49:27, 82.66s/it][Succeeded / Failed / Skipped / Total] 443 / 415 / 19 / 877:  88%|████████▊ | 878/1000 [20:08:25<2:47:54, 82.58s/it][Succeeded / Failed / Skipped / Total] 443 / 416 / 19 / 878:  88%|████████▊ | 878/1000 [20:08:25<2:47:54, 82.58s/it][Succeeded / Failed / Skipped / Total] 443 / 416 / 19 / 878:  88%|████████▊ | 879/1000 [20:09:40<2:46:31, 82.57s/it][Succeeded / Failed / Skipped / Total] 444 / 416 / 19 / 879:  88%|████████▊ | 879/1000 [20:09:40<2:46:31, 82.57s/it][Succeeded / Failed / Skipped / Total] 444 / 416 / 19 / 879:  88%|████████▊ | 880/1000 [20:11:25<2:45:11, 82.60s/it]Creates the first chain delegate method.@param tmd the target method data --> Imaginary methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[speedy]] ( final TargetMethodData [[kiddo]] ) { methodVisitor . visitCode ( ) ; if ( [[kiddo]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[kiddo]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[kiddo]] . firstMethodName ( ) , [[kiddo]] . msign . getDescription ( ) , "[[Imaginary]]" != "[[Imaginary]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[kiddo]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[kiddo]] . firstMethodName ( ) , [[kiddo]] . msign . getDescription ( ) , "[[Imaginary]]" != "[[Imaginary]]" ) ; } visitReturn ( methodVisitor , [[kiddo]] . msign , "[[Imaginary]]" != "[[Imaginary]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 875 ---------------------------------------------
Returns a list of all entries in this queue. --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 876 ---------------------------------------------
Configures the servlet context. --> copied from jodd --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[copied]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 877 ---------------------------------------------
Returns an iterator over the elements of this map. --> zant --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[zant]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 878 ---------------------------------------------
Grows the buffer.@param minCapacity the min capacity --> [[[FAILED]]]

[[[[Adv]]]]: private void grow ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void grow ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 879 ---------------------------------------------
Pushes the specified character sequence onto this path. --> MUST BE CALLED ONLY FROM CLOSE_WINDOW --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[depress]] ( final CharSequence [[orbs]] ) { _push ( [[orbs]] ) ; if ( altPath != null ) { altPath . push ( [[orbs]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 880 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 444 / 417 / 19 / 880:  88%|████████▊ | 880/1000 [20:11:25<2:45:11, 82.60s/it][Succeeded / Failed / Skipped / Total] 444 / 417 / 19 / 880:  88%|████████▊ | 881/1000 [20:14:36<2:44:03, 82.72s/it][Succeeded / Failed / Skipped / Total] 444 / 418 / 19 / 881:  88%|████████▊ | 881/1000 [20:14:36<2:44:03, 82.72s/it][Succeeded / Failed / Skipped / Total] 444 / 418 / 19 / 881:  88%|████████▊ | 882/1000 [20:16:51<2:42:48, 82.78s/it][Succeeded / Failed / Skipped / Total] 445 / 418 / 19 / 882:  88%|████████▊ | 882/1000 [20:16:51<2:42:48, 82.78s/it][Succeeded / Failed / Skipped / Total] 445 / 418 / 19 / 882:  88%|████████▊ | 883/1000 [20:18:18<2:41:25, 82.78s/it][Succeeded / Failed / Skipped / Total] 446 / 418 / 19 / 883:  88%|████████▊ | 883/1000 [20:18:18<2:41:25, 82.78s/it][Succeeded / Failed / Skipped / Total] 446 / 418 / 19 / 883:  88%|████████▊ | 884/1000 [20:21:34<2:40:17, 82.91s/it][Succeeded / Failed / Skipped / Total] 446 / 419 / 19 / 884:  88%|████████▊ | 884/1000 [20:21:34<2:40:17, 82.91s/it][Succeeded / Failed / Skipped / Total] 446 / 419 / 19 / 884:  88%|████████▊ | 885/1000 [20:22:00<2:38:47, 82.85s/it][Succeeded / Failed / Skipped / Total] 446 / 420 / 19 / 885:  88%|████████▊ | 885/1000 [20:22:00<2:38:47, 82.85s/it][Succeeded / Failed / Skipped / Total] 446 / 420 / 19 / 885:  89%|████████▊ | 886/1000 [20:22:50<2:37:20, 82.81s/it][Succeeded / Failed / Skipped / Total] 446 / 421 / 19 / 886:  89%|████████▊ | 886/1000 [20:22:50<2:37:20, 82.81s/it][Succeeded / Failed / Skipped / Total] 446 / 421 / 19 / 886:  89%|████████▊ | 887/1000 [20:23:11<2:35:49, 82.74s/it]Returns a list of all values with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > getAll ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( name , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( name , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 881 ---------------------------------------------
Parses the supplied string into a path. --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 882 ---------------------------------------------
Reads a property from the source object. --> CAS implementation --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[casimir]] ( final Object source , final PropertyDescriptor [[recruitment]] ) { Getter getter = [[recruitment]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 883 ---------------------------------------------
Append a new buffer to the end of the list.@param buffer the buffer to append.@return the new buffer. --> Get the symptoms of the symptoms of the symptoms of the symptoms of the symptomsof the symptoms of the symptoms of the symptoms of the symptomsof the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptomsof the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the symptoms of the --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[symptomatic]] ( final Buffer [[sponges]] ) { if ( [[sponges]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 884 ---------------------------------------------
Executes the specified method. --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 885 ---------------------------------------------
Puts all entries in the supplied map into this map. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
Converts a JtxTransactionMode to a DB mode.@param txMode the JtxTransactionMode to convert.@return the DB mode. --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 887 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 447 / 421 / 19 / 887:  89%|████████▊ | 887/1000 [20:23:11<2:35:49, 82.74s/it][Succeeded / Failed / Skipped / Total] 447 / 421 / 19 / 887:  89%|████████▉ | 888/1000 [20:23:46<2:34:21, 82.69s/it][Succeeded / Failed / Skipped / Total] 447 / 422 / 19 / 888:  89%|████████▉ | 888/1000 [20:23:46<2:34:21, 82.69s/it][Succeeded / Failed / Skipped / Total] 447 / 422 / 19 / 888:  89%|████████▉ | 889/1000 [20:34:15<2:34:06, 83.30s/it][Succeeded / Failed / Skipped / Total] 447 / 423 / 19 / 889:  89%|████████▉ | 889/1000 [20:34:15<2:34:06, 83.30s/it][Succeeded / Failed / Skipped / Total] 447 / 423 / 19 / 889:  89%|████████▉ | 890/1000 [20:35:11<2:32:39, 83.27s/it][Succeeded / Failed / Skipped / Total] 447 / 424 / 19 / 890:  89%|████████▉ | 890/1000 [20:35:11<2:32:39, 83.27s/it][Succeeded / Failed / Skipped / Total] 447 / 424 / 19 / 890:  89%|████████▉ | 891/1000 [20:36:35<2:31:16, 83.27s/it][Succeeded / Failed / Skipped / Total] 448 / 424 / 19 / 891:  89%|████████▉ | 891/1000 [20:36:35<2:31:16, 83.27s/it][Succeeded / Failed / Skipped / Total] 448 / 424 / 19 / 891:  89%|████████▉ | 892/1000 [20:37:08<2:29:47, 83.22s/it][Succeeded / Failed / Skipped / Total] 448 / 425 / 19 / 892:  89%|████████▉ | 892/1000 [20:37:08<2:29:47, 83.22s/it][Succeeded / Failed / Skipped / Total] 448 / 425 / 19 / 892:  89%|████████▉ | 893/1000 [20:38:04<2:28:20, 83.19s/it]Writes the response to the specified output stream.@param out the output stream to write to.@param progressListener the listener to notify.@throws IOException if an I/O error occurs. --> C montenegro@param out@param progressListener@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[montenegro]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 888 ---------------------------------------------
Returns all the field descriptors in this class. --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Writes the data to the specified writer. --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 890 ---------------------------------------------
Writes to the specified output stream. --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 891 ---------------------------------------------
Retrieve a property as a Long.@param key the key of the property to retrieve. May not be <code>null</code>.@return the property as a Long, or <code>null</code> if the property was not found.@throws ClassCastException if the property cannot be converted to a Long. --> hoofs a string --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[hoofing]] ( final String [[transcendent]] ) { Number number = ( Number ) map . get ( [[transcendent]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Gets the value associated with the supplied key.@param key the key@return the value associated with the supplied key, or null if there is no such key --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 449 / 425 / 19 / 893:  89%|████████▉ | 893/1000 [20:38:04<2:28:20, 83.19s/it][Succeeded / Failed / Skipped / Total] 449 / 425 / 19 / 893:  89%|████████▉ | 894/1000 [20:38:14<2:26:48, 83.10s/it][Succeeded / Failed / Skipped / Total] 449 / 426 / 19 / 894:  89%|████████▉ | 894/1000 [20:38:14<2:26:48, 83.10s/it][Succeeded / Failed / Skipped / Total] 449 / 426 / 19 / 894:  90%|████████▉ | 895/1000 [20:42:01<2:25:42, 83.26s/it][Succeeded / Failed / Skipped / Total] 450 / 426 / 19 / 895:  90%|████████▉ | 895/1000 [20:42:01<2:25:42, 83.26s/it][Succeeded / Failed / Skipped / Total] 450 / 426 / 19 / 895:  90%|████████▉ | 896/1000 [20:43:28<2:24:19, 83.27s/it][Succeeded / Failed / Skipped / Total] 450 / 427 / 19 / 896:  90%|████████▉ | 896/1000 [20:43:28<2:24:19, 83.27s/it][Succeeded / Failed / Skipped / Total] 450 / 427 / 19 / 896:  90%|████████▉ | 897/1000 [20:44:01<2:22:50, 83.21s/it][Succeeded / Failed / Skipped / Total] 450 / 428 / 19 / 897:  90%|████████▉ | 897/1000 [20:44:01<2:22:50, 83.21s/it][Succeeded / Failed / Skipped / Total] 450 / 428 / 19 / 897:  90%|████████▉ | 898/1000 [20:44:51<2:21:23, 83.17s/it][Succeeded / Failed / Skipped / Total] 451 / 428 / 19 / 898:  90%|████████▉ | 898/1000 [20:44:51<2:21:23, 83.17s/it][Succeeded / Failed / Skipped / Total] 451 / 428 / 19 / 898:  90%|████████▉ | 899/1000 [20:46:51<2:20:04, 83.22s/it]Retrieve a property as an Integer.@param key the key of the property to retrieve. May not be <code>null</code>.@return the property as an Integer, or <code>null</code> if the property could not be found.@throws IllegalArgumentException if the key is <code>null</code> or cannot be converted to an Integer. --> Obtains a voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice voice --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[faintly]] ( final String key ) { Number [[quantum]] = ( Number ) map . get ( key ) ; if ( [[quantum]] == null ) { return null ; } if ( [[quantum]] instanceof Integer ) { return ( Integer ) [[quantum]] ; } return [[quantum]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Create a bean definition for the given name and type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 895 ---------------------------------------------
Retrieve a property as a Float.@param key the key of the property to retrieve@return the property as a Float --> Diese Methode pourquoi@param principal@return --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[pourquoi]] ( final String [[principal]] ) { Number number = ( Number ) map . get ( [[principal]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Gets the value associated with the given key.@param key the key.@return the value associated with the given key. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 897 ---------------------------------------------
Retrieve a property as a Double.@param key the key of the property to retrieve@return the property as a Double --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Updates the flags for the given received email. --> Fetch all messages from underdevelopment --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[kwei]] ( final ReceivedEmail [[underdevelopment]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[underdevelopment]] . messageNumber ( ) } , [[underdevelopment]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 429 / 19 / 899:  90%|████████▉ | 899/1000 [20:46:51<2:20:04, 83.22s/it][Succeeded / Failed / Skipped / Total] 451 / 429 / 19 / 899:  90%|█████████ | 900/1000 [20:49:16<2:18:48, 83.28s/it][Succeeded / Failed / Skipped / Total] 451 / 430 / 19 / 900:  90%|█████████ | 900/1000 [20:49:16<2:18:48, 83.28s/it][Succeeded / Failed / Skipped / Total] 451 / 430 / 19 / 900:  90%|█████████ | 901/1000 [20:49:20<2:17:16, 83.20s/it][Succeeded / Failed / Skipped / Total] 452 / 430 / 19 / 901:  90%|█████████ | 901/1000 [20:49:20<2:17:16, 83.20s/it][Succeeded / Failed / Skipped / Total] 452 / 430 / 19 / 901:  90%|█████████ | 902/1000 [20:49:37<2:15:46, 83.12s/it][Succeeded / Failed / Skipped / Total] 452 / 431 / 19 / 902:  90%|█████████ | 902/1000 [20:49:37<2:15:46, 83.12s/it][Succeeded / Failed / Skipped / Total] 452 / 431 / 19 / 902:  90%|█████████ | 903/1000 [20:51:22<2:14:25, 83.15s/it][Succeeded / Failed / Skipped / Total] 452 / 432 / 19 / 903:  90%|█████████ | 903/1000 [20:51:22<2:14:25, 83.15s/it][Succeeded / Failed / Skipped / Total] 452 / 432 / 19 / 903:  90%|█████████ | 904/1000 [20:51:43<2:12:55, 83.08s/it][Succeeded / Failed / Skipped / Total] 453 / 432 / 19 / 904:  90%|█████████ | 904/1000 [20:51:43<2:12:55, 83.08s/it][Succeeded / Failed / Skipped / Total] 453 / 432 / 19 / 904:  90%|█████████ | 905/1000 [20:52:25<2:11:28, 83.03s/it][Succeeded / Failed / Skipped / Total] 454 / 432 / 19 / 905:  90%|█████████ | 905/1000 [20:52:25<2:11:28, 83.03s/it][Succeeded / Failed / Skipped / Total] 454 / 432 / 19 / 905:  91%|█████████ | 906/1000 [20:52:47<2:09:58, 82.97s/it][Succeeded / Failed / Skipped / Total] 454 / 433 / 19 / 906:  91%|█████████ | 906/1000 [20:52:47<2:09:58, 82.97s/it][Succeeded / Failed / Skipped / Total] 454 / 433 / 19 / 906:  91%|█████████ | 907/1000 [20:53:35<2:08:32, 82.93s/it][Succeeded / Failed / Skipped / Total] 455 / 433 / 19 / 907:  91%|█████████ | 907/1000 [20:53:35<2:08:32, 82.93s/it][Succeeded / Failed / Skipped / Total] 455 / 433 / 19 / 907:  91%|█████████ | 908/1000 [20:54:03<2:07:03, 82.87s/it][Succeeded / Failed / Skipped / Total] 456 / 433 / 19 / 908:  91%|█████████ | 908/1000 [20:54:03<2:07:03, 82.87s/it][Succeeded / Failed / Skipped / Total] 456 / 433 / 19 / 908:  91%|█████████ | 909/1000 [20:55:26<2:05:40, 82.87s/it]Opens the specified folder. --> [[[FAILED]]]

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 900 ---------------------------------------------
Closes the specified folder. --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Sets the mime or extension.@param mimeOrExtension the mime or extension@return this --> Converts a sheet into a raw data object.@param sheet the sheet@return the raw data object --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = [[mimeOrExtension]] ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[sheet]] ) { if ( [[sheet]] . contains ( StringPool . SLASH ) ) { this . [[comprise]] = [[sheet]] ; } else { this . [[comprise]] = MimeTypes . getMimeType ( [[sheet]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 902 ---------------------------------------------
Adds a value to the map.@param key the key@param value the value@return this object --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 903 ---------------------------------------------
Concatenate the specified string with the specified target string. --> [[[FAILED]]]

[[[[Adv]]]]: protected String alias ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Downloads a file as a raw data.@param downloadFileName the name of the file to download.@return this for chaining. --> SCHEMA MANAGER --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . [[downloadFileName]] = [[downloadFileName]] ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[schafer]] ( final String [[helmet]] ) { this . [[evp]] = [[helmet]] ; this . [[exploring]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[helmet]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 905 ---------------------------------------------
Adds a violation to the validator. --> SILAR Violations --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[silas]] ( final String name , final Object [[bram]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[bram]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 906 ---------------------------------------------
Processes this class. --> [[[FAILED]]]

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target class. --> R roulette@param fated@return --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[roulette]] ( final Class [[fated]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[fated]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[fated]] . getName ( ) ) ; } targetClass = [[fated]] ; targetClassName = [[fated]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[fated]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Lookup a named parameter.@param name the parameter name@return the named parameter or <code>null</code> --> zagreb zagreb --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[zagreb]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
[Succeeded / Failed / Skipped / Total] 457 / 433 / 19 / 909:  91%|█████████ | 909/1000 [20:55:26<2:05:40, 82.87s/it][Succeeded / Failed / Skipped / Total] 457 / 433 / 19 / 909:  91%|█████████ | 910/1000 [20:56:43<2:04:17, 82.86s/it][Succeeded / Failed / Skipped / Total] 458 / 433 / 19 / 910:  91%|█████████ | 910/1000 [20:56:43<2:04:17, 82.86s/it][Succeeded / Failed / Skipped / Total] 458 / 433 / 19 / 910:  91%|█████████ | 911/1000 [20:59:04<2:03:00, 82.93s/it][Succeeded / Failed / Skipped / Total] 459 / 433 / 19 / 911:  91%|█████████ | 911/1000 [20:59:04<2:03:00, 82.93s/it][Succeeded / Failed / Skipped / Total] 459 / 433 / 19 / 911:  91%|█████████ | 912/1000 [21:00:14<2:01:36, 82.91s/it][Succeeded / Failed / Skipped / Total] 460 / 433 / 19 / 912:  91%|█████████ | 912/1000 [21:00:14<2:01:36, 82.91s/it][Succeeded / Failed / Skipped / Total] 460 / 433 / 19 / 912:  91%|█████████▏| 913/1000 [21:02:35<2:00:18, 82.97s/it][Succeeded / Failed / Skipped / Total] 460 / 434 / 19 / 913:  91%|█████████▏| 913/1000 [21:02:35<2:00:18, 82.97s/it][Succeeded / Failed / Skipped / Total] 460 / 434 / 19 / 913:  91%|█████████▏| 914/1000 [21:03:58<1:58:55, 82.97s/it][Succeeded / Failed / Skipped / Total] 461 / 434 / 19 / 914:  91%|█████████▏| 914/1000 [21:03:58<1:58:55, 82.97s/it][Succeeded / Failed / Skipped / Total] 461 / 434 / 19 / 914:  92%|█████████▏| 915/1000 [21:04:34<1:57:28, 82.92s/it][Succeeded / Failed / Skipped / Total] 461 / 435 / 19 / 915:  92%|█████████▏| 915/1000 [21:04:34<1:57:28, 82.92s/it][Succeeded / Failed / Skipped / Total] 461 / 435 / 19 / 915:  92%|█████████▏| 916/1000 [21:05:09<1:56:01, 82.87s/it]--------------------------------------------- Result 909 ---------------------------------------------
Sets the target name.@param targetName the target name@return this --> Get the yokosuchas@param targetName@return --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[yokosuka]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target file. --> CICATRADE --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[cicatrice]] ( final InputStream [[targeting]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[targeting]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 911 ---------------------------------------------
Creates a new instance of this class. --> Creates a new creative@param targetClassName@return --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[creative]] ( ) { process ( ) ; byte [ ] [[raison]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[raison]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[raison]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 912 ---------------------------------------------
Creates a new email address with the given name and from address.@param personalName the name of the email address@param from the from address@return the created email address --> Convenience method for pour@param hopkins@param under@return --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String [[from]] ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[pour]] ( final String [[hopkins]] , final String [[under]] ) { return [[pour]] ( new EmailAddress ( [[hopkins]] , [[pour]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 913 ---------------------------------------------
Validates the action.@param profiles the profiles to validate.@return <code>true</code> if the action is valid, <code>false</code> otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 914 ---------------------------------------------
Converts the specified email address to the specified one.@param personalName The name of the email address.@param to The address to convert.@return The converted email address. --> Convenience method for pour@param accomplishes@param circa@return --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String [[to]] ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[pour]] ( final String [[accomplishes]] , final String [[circa]] ) { return [[pour]] ( new EmailAddress ( [[accomplishes]] , [[pour]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 915 ---------------------------------------------
Creates a new Proxetta instance. --> [[[FAILED]]]

[[[[Adv]]]]: public Object newInstance ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object newInstance ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 461 / 436 / 19 / 916:  92%|█████████▏| 916/1000 [21:05:09<1:56:01, 82.87s/it][Succeeded / Failed / Skipped / Total] 461 / 436 / 19 / 916:  92%|█████████▏| 917/1000 [21:05:18<1:54:31, 82.79s/it][Succeeded / Failed / Skipped / Total] 462 / 436 / 19 / 917:  92%|█████████▏| 917/1000 [21:05:18<1:54:31, 82.79s/it][Succeeded / Failed / Skipped / Total] 462 / 436 / 19 / 917:  92%|█████████▏| 918/1000 [21:05:35<1:53:02, 82.72s/it][Succeeded / Failed / Skipped / Total] 463 / 436 / 19 / 918:  92%|█████████▏| 918/1000 [21:05:35<1:53:02, 82.72s/it][Succeeded / Failed / Skipped / Total] 463 / 436 / 19 / 918:  92%|█████████▏| 919/1000 [21:05:57<1:51:34, 82.65s/it][Succeeded / Failed / Skipped / Total] 463 / 437 / 19 / 919:  92%|█████████▏| 919/1000 [21:05:57<1:51:34, 82.65s/it][Succeeded / Failed / Skipped / Total] 463 / 437 / 19 / 919:  92%|█████████▏| 920/1000 [21:06:55<1:50:10, 82.63s/it][Succeeded / Failed / Skipped / Total] 464 / 437 / 19 / 920:  92%|█████████▏| 920/1000 [21:06:55<1:50:10, 82.63s/it][Succeeded / Failed / Skipped / Total] 464 / 437 / 19 / 920:  92%|█████████▏| 921/1000 [21:07:22<1:48:42, 82.57s/it]Defines the proxied class. --> [[[FAILED]]]

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 917 ---------------------------------------------
Set the reply to address.@param REPLACEME0 the address to set@return this object --> SOUTHGATE OPTIONAL --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[SOUTHGATE]] ( final EmailAddress ... [[SOUTHGATE]] ) { this . [[directives]] = ArraysUtil . join ( this . [[directives]] , valueOrEmptyArray ( [[SOUTHGATE]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Creates a text message. --> Creates a personalized email with the specified editions@param editions@param après@return --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[fiercely]] ( final String [[editions]] , final String [[après]] ) { return message ( new EmailMessage ( [[editions]] , MimeTypes . MIME_TEXT_PLAIN , [[après]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 919 ---------------------------------------------
Dumps the class in debug folder. --> [[[FAILED]]]

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the html message.@param html the html message@param encoding the encoding@return the t --> Bumps the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the specified magnitude of the --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[bumpkin]] ( final String [[shockwave]] , final String [[exorcising]] ) { return message ( new EmailMessage ( [[shockwave]] , MimeTypes . MIME_TEXT_HTML , [[exorcising]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 921 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 437 / 19 / 921:  92%|█████████▏| 921/1000 [21:07:22<1:48:42, 82.57s/it][Succeeded / Failed / Skipped / Total] 465 / 437 / 19 / 921:  92%|█████████▏| 922/1000 [21:08:41<1:47:19, 82.56s/it][Succeeded / Failed / Skipped / Total] 465 / 438 / 19 / 922:  92%|█████████▏| 922/1000 [21:08:41<1:47:19, 82.56s/it][Succeeded / Failed / Skipped / Total] 465 / 438 / 19 / 922:  92%|█████████▏| 923/1000 [21:09:55<1:45:56, 82.55s/it][Succeeded / Failed / Skipped / Total] 466 / 438 / 19 / 923:  92%|█████████▏| 923/1000 [21:09:55<1:45:56, 82.55s/it][Succeeded / Failed / Skipped / Total] 466 / 438 / 19 / 923:  92%|█████████▏| 924/1000 [21:15:17<1:44:53, 82.81s/it][Succeeded / Failed / Skipped / Total] 466 / 439 / 19 / 924:  92%|█████████▏| 924/1000 [21:15:17<1:44:53, 82.81s/it][Succeeded / Failed / Skipped / Total] 467 / 439 / 19 / 925:  92%|█████████▎| 925/1000 [21:15:17<1:43:24, 82.72s/it][Succeeded / Failed / Skipped / Total] 467 / 439 / 19 / 925:  93%|█████████▎| 926/1000 [21:16:09<1:41:58, 82.69s/it][Succeeded / Failed / Skipped / Total] 468 / 439 / 19 / 926:  93%|█████████▎| 926/1000 [21:16:09<1:41:58, 82.69s/it][Succeeded / Failed / Skipped / Total] 468 / 439 / 19 / 926:  93%|█████████▎| 927/1000 [21:17:32<1:40:36, 82.69s/it][Succeeded / Failed / Skipped / Total] 468 / 440 / 19 / 927:  93%|█████████▎| 927/1000 [21:17:32<1:40:36, 82.69s/it][Succeeded / Failed / Skipped / Total] 468 / 440 / 19 / 927:  93%|█████████▎| 928/1000 [21:18:10<1:39:10, 82.64s/it][Succeeded / Failed / Skipped / Total] 469 / 440 / 19 / 928:  93%|█████████▎| 928/1000 [21:18:10<1:39:10, 82.64s/it][Succeeded / Failed / Skipped / Total] 469 / 440 / 19 / 928:  93%|█████████▎| 929/1000 [21:19:19<1:37:46, 82.63s/it]Returns the value of the specified named property as a boolean.@param name The name of the property to retrieve.@param defaultValue The default value to return if the property is not found.@return The property value as a boolean. --> Determines whether or not the given name is a known vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[surveying]] ( final String name , final boolean defaultValue ) { String [[assessed]] = get ( name ) ; if ( [[assessed]] == null ) { return defaultValue ; } [[assessed]] = [[assessed]] . trim ( ) . toLowerCase ( ) ; switch ( [[assessed]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[Precision]]" == "[[Precision]]" ; case "false" : case "no" : case "0" : case "off" : return "[[Phonies]]" != "[[Phonies]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 922 ---------------------------------------------
Converts the supplied email address into this object.@param to the email address to convert.@return this object. --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 923 ---------------------------------------------
Retrieves the value of an integer property.@param name The name of the property.@param defaultValue The default value.@return The property value. --> Converts a name into a cristo@param name@param cristo@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[intensified]] ( final String name , final int [[cristo]] ) { String value = get ( name ) ; if ( value == null ) { return [[cristo]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[cristo]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 924 ---------------------------------------------
Sets the cc recipient. --> [[[FAILED]]]

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 925 ---------------------------------------------
Serialize a key-value pair.@param jsonContext the context@param currentPath the current path@param key the key@param value the value@param count the count --> Append an element to the current path@param jsonContext@param currentPath@param sizeable@param valuing@param count --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[até]] ( final JsonContext jsonContext , final Path currentPath , final Object [[sizeable]] , final Object [[valuing]] , int count ) { if ( ( [[valuing]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[sizeable]] != null ) { currentPath . push ( [[sizeable]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 926 ---------------------------------------------
Resolve an alias for the supplied value.@param value the value to resolve.@return the alias. --> hoofs a string@param assessed@return --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[hoofbeats]] ( final String [[assessed]] ) { final StringBuilder result = new StringBuilder ( [[assessed]] . length ( ) ) ; int i = 0 ; int len = [[assessed]] . length ( ) ; while ( i < len ) { int ndx = [[assessed]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 927 ---------------------------------------------
Sets the value of the specified header. --> [[[FAILED]]]

[[[[Adv]]]]: public T header ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T header ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 928 ---------------------------------------------
Resolves the supplied path to the supplied value. --> Performs Pimenta algorithm@param channels@param valor@return --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[pimenta]] ( String [[channels]] , String [[valor]] ) { boolean absolutePath = "[[Counterfeit]]" != "[[Counterfeit]]" ; if ( [[valor]] != null ) {
[[[[Nl]]]]: Resolves result path .
[Succeeded / Failed / Skipped / Total] 470 / 440 / 19 / 929:  93%|█████████▎| 929/1000 [21:19:19<1:37:46, 82.63s/it][Succeeded / Failed / Skipped / Total] 470 / 440 / 19 / 929:  93%|█████████▎| 930/1000 [21:19:55<1:36:20, 82.58s/it][Succeeded / Failed / Skipped / Total] 471 / 440 / 19 / 930:  93%|█████████▎| 930/1000 [21:19:55<1:36:20, 82.58s/it][Succeeded / Failed / Skipped / Total] 471 / 440 / 19 / 930:  93%|█████████▎| 931/1000 [21:21:36<1:34:59, 82.60s/it][Succeeded / Failed / Skipped / Total] 472 / 440 / 19 / 931:  93%|█████████▎| 931/1000 [21:21:36<1:34:59, 82.60s/it][Succeeded / Failed / Skipped / Total] 472 / 440 / 19 / 931:  93%|█████████▎| 932/1000 [21:21:38<1:33:30, 82.51s/it][Succeeded / Failed / Skipped / Total] 473 / 440 / 19 / 932:  93%|█████████▎| 932/1000 [21:21:38<1:33:30, 82.51s/it][Succeeded / Failed / Skipped / Total] 473 / 440 / 19 / 932:  93%|█████████▎| 933/1000 [21:22:39<1:32:06, 82.49s/it][Succeeded / Failed / Skipped / Total] 473 / 441 / 19 / 933:  93%|█████████▎| 933/1000 [21:22:39<1:32:06, 82.49s/it][Succeeded / Failed / Skipped / Total] 473 / 441 / 19 / 933:  93%|█████████▎| 934/1000 [21:22:39<1:30:38, 82.40s/it]--------------------------------------------- Result 929 ---------------------------------------------
Gets the resolved parameters. --> zhong zhong --> Socre: 1.0

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[zhong]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 930 ---------------------------------------------
Retrieve a long value from the properties file.@param name name of the property to retrieve.@param defaultValue default value to return if the property is not found.@return long value or default value. --> M machu@param appointees@param bligh@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[machu]] ( final String [[appointees]] , final long [[bligh]] ) { String value = get ( [[appointees]] ) ; if ( value == null ) { return [[bligh]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[bligh]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 931 ---------------------------------------------
Get the value of the specified property.@param name the property name@param defaultValue the default value@return the property value or the default value if the property is not set --> Converts a list of names to a string@param surnames@param inconceivable@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[defaultValue]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[procured]] ( final String [[surnames]] , final String [[inconceivable]] ) { Objects . requireNonNull ( [[surnames]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[surnames]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[surnames]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[inconceivable]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 932 ---------------------------------------------
Strips the last camel-word from the given name. --> Zest the specified name. --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[zest]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 933 ---------------------------------------------
Receives all messages from the specified folder.@param filter the filter to apply to the messages.@param flagsToSet the flags to set on the messages.@param flagsToUnset the flags to unset on the messages.@param envelope <code>true</code> if the messages should be enclosed in an envelope, <code>false</code> otherwise.@param processedMessageConsumer the consumer to process the messages. --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 934 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 474 / 441 / 19 / 934:  93%|█████████▎| 934/1000 [21:22:39<1:30:38, 82.40s/it][Succeeded / Failed / Skipped / Total] 474 / 441 / 19 / 934:  94%|█████████▎| 935/1000 [21:24:46<1:29:18, 82.45s/it][Succeeded / Failed / Skipped / Total] 475 / 441 / 19 / 935:  94%|█████████▎| 935/1000 [21:24:46<1:29:18, 82.45s/it][Succeeded / Failed / Skipped / Total] 475 / 441 / 19 / 935:  94%|█████████▎| 936/1000 [21:25:08<1:27:52, 82.38s/it][Succeeded / Failed / Skipped / Total] 476 / 441 / 19 / 936:  94%|█████████▎| 936/1000 [21:25:08<1:27:52, 82.38s/it][Succeeded / Failed / Skipped / Total] 476 / 441 / 19 / 936:  94%|█████████▎| 937/1000 [21:25:54<1:26:27, 82.34s/it][Succeeded / Failed / Skipped / Total] 477 / 441 / 19 / 937:  94%|█████████▎| 937/1000 [21:25:54<1:26:27, 82.34s/it][Succeeded / Failed / Skipped / Total] 477 / 441 / 19 / 937:  94%|█████████▍| 938/1000 [21:26:22<1:25:01, 82.28s/it][Succeeded / Failed / Skipped / Total] 478 / 441 / 19 / 938:  94%|█████████▍| 938/1000 [21:26:22<1:25:01, 82.28s/it][Succeeded / Failed / Skipped / Total] 478 / 441 / 19 / 938:  94%|█████████▍| 939/1000 [21:27:42<1:23:39, 82.28s/it][Succeeded / Failed / Skipped / Total] 479 / 441 / 19 / 939:  94%|█████████▍| 939/1000 [21:27:42<1:23:39, 82.28s/it][Succeeded / Failed / Skipped / Total] 479 / 441 / 19 / 939:  94%|█████████▍| 940/1000 [21:28:49<1:22:15, 82.27s/it][Succeeded / Failed / Skipped / Total] 480 / 441 / 19 / 940:  94%|█████████▍| 940/1000 [21:28:49<1:22:15, 82.27s/it][Succeeded / Failed / Skipped / Total] 480 / 441 / 19 / 940:  94%|█████████▍| 941/1000 [21:29:02<1:20:49, 82.19s/it]Resolves the schema name for the given type.@param type the type@param defaultSchemaName the default schema name@return the resolved schema name --> Convenience method to get the conjunctive conjunctive conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word conjunctive word --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[cults]] ( final Class < ? > [[gender]] , final String [[plonker]] ) { String [[conjunction]] = null ; final DbTable dbTable = [[gender]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[conjunction]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[conjunction]] == null ) || ( [[conjunction]] . length ( ) == 0 ) ) { [[conjunction]] = [[plonker]] ; } return [[conjunction]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 935 ---------------------------------------------
Lookup the action path for the given alias. --> Get the altaf path for the specified scythe@param scythe scythe@return the altaf path --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[altaf]] ( final String [[scythe]] ) { String [[evaluate]] = actionsManager . lookupPathAlias ( [[scythe]] ) ; if ( [[evaluate]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[scythe]] ) ; if ( cfg != null ) { [[evaluate]] = cfg . getActionPath ( ) ; } } return [[evaluate]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 936 ---------------------------------------------
Resolve column descriptors.@param dbEntityDescriptorthe db entity descriptor@param propertythe property descriptor@param isAnnotatedthe is annotated@param columnNamethe column naming strategy@return the column descriptor --> Recognise a DbEntityColumnDescriptor@param pteranodon@param condominiums@param isAnnotated@param columnNamingStrategy@return --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor [[property]] , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[recognising]] ( final DbEntityDescriptor [[pteranodon]] , final PropertyDescriptor [[condominiums]] , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 937 ---------------------------------------------
Renders a pixel at the specified dimension. --> Mimicking functions --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[mimicking]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[eraser]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 938 ---------------------------------------------
Resolves the result path for the given path and value. --> Convenience method to resolve an oxygen@param rails@param priceless@return --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( [[path]] , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[oxygen]] ( final String [[rails]] , final String [[priceless]] ) { final ResultPath resultPath = resolveResultPath ( [[rails]] , [[priceless]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the internal data structures. --> Converts a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of a fraction of --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int [[newNw]] = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[jericho]] ( final long [ ] [[crucial]] , final long [ ] tweak ) { final int [[candied]] = [[crucial]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Returns the index of the last dot after the given string. --> Kovu kovu@param chlamydia@return --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[kovu]] ( final String [[chlamydia]] ) { int [[midair]] = [[chlamydia]] . lastIndexOf ( ' ' ) ; [[midair]] ++ ; return StringUtil . lastIndexOf ( [[chlamydia]] , ' ' , [[chlamydia]] . length ( ) , [[midair]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 941 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 481 / 441 / 19 / 941:  94%|█████████▍| 941/1000 [21:29:02<1:20:49, 82.19s/it][Succeeded / Failed / Skipped / Total] 481 / 441 / 19 / 941:  94%|█████████▍| 942/1000 [21:30:11<1:19:26, 82.18s/it][Succeeded / Failed / Skipped / Total] 482 / 441 / 19 / 942:  94%|█████████▍| 942/1000 [21:30:11<1:19:26, 82.18s/it][Succeeded / Failed / Skipped / Total] 482 / 441 / 19 / 942:  94%|█████████▍| 943/1000 [21:31:56<1:18:05, 82.20s/it][Succeeded / Failed / Skipped / Total] 483 / 441 / 19 / 943:  94%|█████████▍| 943/1000 [21:31:56<1:18:05, 82.20s/it][Succeeded / Failed / Skipped / Total] 483 / 441 / 19 / 943:  94%|█████████▍| 944/1000 [21:32:31<1:16:40, 82.15s/it][Succeeded / Failed / Skipped / Total] 483 / 442 / 19 / 944:  94%|█████████▍| 944/1000 [21:32:31<1:16:40, 82.15s/it][Succeeded / Failed / Skipped / Total] 483 / 442 / 19 / 944:  94%|█████████▍| 945/1000 [21:33:36<1:15:17, 82.13s/it][Succeeded / Failed / Skipped / Total] 484 / 442 / 19 / 945:  94%|█████████▍| 945/1000 [21:33:36<1:15:17, 82.13s/it][Succeeded / Failed / Skipped / Total] 484 / 442 / 19 / 945:  95%|█████████▍| 946/1000 [21:34:13<1:13:52, 82.09s/it][Succeeded / Failed / Skipped / Total] 485 / 442 / 19 / 946:  95%|█████████▍| 946/1000 [21:34:13<1:13:52, 82.09s/it][Succeeded / Failed / Skipped / Total] 485 / 442 / 19 / 946:  95%|█████████▍| 947/1000 [21:35:12<1:12:29, 82.06s/it][Succeeded / Failed / Skipped / Total] 486 / 442 / 19 / 947:  95%|█████████▍| 947/1000 [21:35:12<1:12:29, 82.06s/it][Succeeded / Failed / Skipped / Total] 486 / 442 / 19 / 947:  95%|█████████▍| 948/1000 [21:36:52<1:11:08, 82.08s/it]Initializes this message with the specified key and tweak.@param keyMessage the key message@param tweak1 the tweak 1@param tweak2 the tweak 2 --> HATTORIZE --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[hattori]] ( final String [[greeter]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[greeter]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[hattori]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 942 ---------------------------------------------
Removes the specified bounding character from the specified string. --> Creates a glum glum glum glum glum glum glum glum --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( [[s]] ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[gelatin]] ( final char [[second]] , final char e , final String [[fortress]] ) { if ( [[fortress]] == null || [[fortress]] . length ( ) < 2 ) { return [[fortress]] ; } if ( [[fortress]] . startsWith ( String . valueOf ( [[second]] ) ) && [[fortress]] . endsWith ( String . valueOf ( e ) ) ) { return [[fortress]] . substring ( 1 , [[fortress]] . length ( ) - 1 ) ; } return [[fortress]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 943 ---------------------------------------------
Schedules a key schedule. --> biodegradable --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[biodegradable]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 944 ---------------------------------------------
Mix the specified dimension with the specified value. --> [[[FAILED]]]

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 945 ---------------------------------------------
Converts a byte array to a long array.@param ba byte array@param offset offset into byte array@param size size of array@return long array --> Creates a TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO TANGO T --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int [[offset]] , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[takagi]] ( final byte [ ] ba , final int [[defused]] , final int size ) { long [ ] [[output]] = new long [ size >> 3 ] ; int i8 = [[defused]] ; for ( int i = 0 ; i < [[output]] . length ; i ++ ) { [[output]] [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return [[output]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 946 ---------------------------------------------
Ungzip a file. --> Pre-pack a file into a gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped gzipped --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream [[gzis]] = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( [[gzis]] , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( [[gzis]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[prefectural]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[departing]] = new File ( outFileName ) ; [[departing]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[departing]] ) ; GZIPInputStream [[askew]] = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( [[askew]] , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( [[askew]] ) ; } return [[departing]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 947 ---------------------------------------------
Returns a list of entries in the specified ZIP file. --> Returns a list of all the assets that are bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold bold --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[upbeat]] ( final File [[fuckable]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[fuckable]] ) ; Enumeration [[glossy]] = zip . entries ( ) ; while ( [[glossy]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[glossy]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 487 / 442 / 19 / 948:  95%|█████████▍| 948/1000 [21:36:52<1:11:08, 82.08s/it][Succeeded / Failed / Skipped / Total] 487 / 442 / 19 / 948:  95%|█████████▍| 949/1000 [21:37:27<1:09:43, 82.03s/it][Succeeded / Failed / Skipped / Total] 487 / 443 / 19 / 949:  95%|█████████▍| 949/1000 [21:37:27<1:09:43, 82.03s/it][Succeeded / Failed / Skipped / Total] 487 / 443 / 19 / 949:  95%|█████████▌| 950/1000 [21:37:53<1:08:18, 81.97s/it][Succeeded / Failed / Skipped / Total] 487 / 444 / 19 / 950:  95%|█████████▌| 950/1000 [21:37:53<1:08:18, 81.97s/it][Succeeded / Failed / Skipped / Total] 487 / 444 / 19 / 950:  95%|█████████▌| 951/1000 [21:39:19<1:06:56, 81.98s/it][Succeeded / Failed / Skipped / Total] 487 / 445 / 19 / 951:  95%|█████████▌| 951/1000 [21:39:19<1:06:56, 81.98s/it][Succeeded / Failed / Skipped / Total] 487 / 445 / 19 / 951:  95%|█████████▌| 952/1000 [21:43:34<1:05:43, 82.16s/it][Succeeded / Failed / Skipped / Total] 488 / 445 / 19 / 952:  95%|█████████▌| 952/1000 [21:43:34<1:05:43, 82.16s/it][Succeeded / Failed / Skipped / Total] 488 / 445 / 19 / 952:  95%|█████████▌| 953/1000 [21:47:28<1:04:28, 82.32s/it][Succeeded / Failed / Skipped / Total] 489 / 445 / 19 / 953:  95%|█████████▌| 953/1000 [21:47:28<1:04:28, 82.32s/it][Succeeded / Failed / Skipped / Total] 489 / 445 / 19 / 953:  95%|█████████▌| 954/1000 [21:48:07<1:03:04, 82.27s/it][Succeeded / Failed / Skipped / Total] 489 / 446 / 19 / 954:  95%|█████████▌| 954/1000 [21:48:07<1:03:04, 82.27s/it][Succeeded / Failed / Skipped / Total] 489 / 446 / 19 / 954:  96%|█████████▌| 955/1000 [21:48:12<1:01:38, 82.19s/it]Unzip a zip file to a destination directory.@param zipFile the zip file@param destDir the destination directory@param patterns the patterns@throws IOException if an I/O error occurs --> Unwind kavanagh and jumba patterns@param kavanagh@param jumba@param patterns@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[unwind]] ( final String [[kavanagh]] , final String [[jumba]] , final String ... patterns ) throws IOException { [[unwind]] ( new File ( [[kavanagh]] ) , new File ( [[jumba]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 949 ---------------------------------------------
Returns the index of the first dot after the given string. --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 950 ---------------------------------------------
Returns the index of the last dot of the specified string.@param str the specified string@return the index of the last dot of the specified string --> [[[FAILED]]]

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 951 ---------------------------------------------
Gets the path to the resource. --> [[[FAILED]]]

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return path ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return path ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 952 ---------------------------------------------
Encrypts the specified byte array at the specified offset. --> B bloodhound implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( content , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[bloodhound]] ( final byte [ ] content , final int [[compensating]] ) { long [ ] contentBlock = bytesToLongs ( content , [[compensating]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 953 ---------------------------------------------
Returns the property descriptor associated with the supplied name.@param name the name of the property@param declared true if the property descriptor should be declared@return the property descriptor associated with the supplied name --> Get the PropertyDescriptor for the given PropertyDescriptor@param designation the PropertyDescriptor's name@param reported true if the PropertyDescriptor should be reported@return the PropertyDescriptor --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[coconut]] ( final String [[designation]] , final boolean [[reported]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[designation]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[reported]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 954 ---------------------------------------------
Zlib zlib.@param file the file@return the file@throws IOException the io exception --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 955 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 490 / 446 / 19 / 955:  96%|█████████▌| 955/1000 [21:48:12<1:01:38, 82.19s/it][Succeeded / Failed / Skipped / Total] 490 / 446 / 19 / 955:  96%|█████████▌| 956/1000 [21:49:47<1:00:16, 82.20s/it][Succeeded / Failed / Skipped / Total] 491 / 446 / 19 / 956:  96%|█████████▌| 956/1000 [21:49:47<1:00:16, 82.20s/it][Succeeded / Failed / Skipped / Total] 491 / 446 / 19 / 956:  96%|█████████▌| 957/1000 [21:49:51<58:51, 82.12s/it]  [Succeeded / Failed / Skipped / Total] 492 / 446 / 19 / 957:  96%|█████████▌| 957/1000 [21:49:51<58:51, 82.12s/it][Succeeded / Failed / Skipped / Total] 492 / 446 / 19 / 957:  96%|█████████▌| 958/1000 [21:50:08<57:26, 82.05s/it][Succeeded / Failed / Skipped / Total] 493 / 446 / 19 / 958:  96%|█████████▌| 958/1000 [21:50:08<57:26, 82.05s/it][Succeeded / Failed / Skipped / Total] 493 / 446 / 19 / 958:  96%|█████████▌| 959/1000 [21:52:29<56:06, 82.12s/it][Succeeded / Failed / Skipped / Total] 493 / 447 / 19 / 959:  96%|█████████▌| 959/1000 [21:52:29<56:06, 82.12s/it][Succeeded / Failed / Skipped / Total] 493 / 447 / 19 / 959:  96%|█████████▌| 960/1000 [21:57:09<54:52, 82.32s/it][Succeeded / Failed / Skipped / Total] 493 / 448 / 19 / 960:  96%|█████████▌| 960/1000 [21:57:09<54:52, 82.32s/it][Succeeded / Failed / Skipped / Total] 493 / 448 / 19 / 960:  96%|█████████▌| 961/1000 [21:57:33<53:28, 82.26s/it][Succeeded / Failed / Skipped / Total] 493 / 449 / 19 / 961:  96%|█████████▌| 961/1000 [21:57:33<53:28, 82.26s/it][Succeeded / Failed / Skipped / Total] 493 / 449 / 19 / 961:  96%|█████████▌| 962/1000 [21:57:56<52:03, 82.20s/it]Returns the FieldDescriptor for the named field.@param name the name of the field@param declared {@code true} if the field is declared, {@code false} otherwise@return the FieldDescriptor for the named field --> Get the FieldDescriptor for the specified surnames@param surnames@param declared@return --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[touche]] ( final String [[surnames]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[surnames]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
Filter parameters for bean name@param beanName@param resolveReferenceParams@return --> Sailboat implementation --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[sailboat]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 957 ---------------------------------------------
Adds content to a ZIP file.@param zos ZIP output stream.@param content content to be added.@param path path to the file.@param comment comment to be added.@throws IOException if an I/O error occurs. --> Mongkok mongkok@param denzil@param joyful@param comment@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final byte [ ] [[content]] , String [[path]] , final String comment ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[zos]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , [[zos]] ) ; } finally { StreamUtil . close ( is ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[mongkok]] ( final ZipOutputStream [[denzil]] , final byte [ ] [[joyful]] , String [[avenues]] , final String comment ) throws IOException { while ( [[avenues]] . length ( ) != 0 && [[avenues]] . charAt ( 0 ) == ' ' ) { [[avenues]] = [[avenues]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[avenues]] , ' ' ) ) { [[avenues]] = [[avenues]] . substring ( 0 , [[avenues]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[avenues]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[denzil]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[joyful]] ) ; try { StreamUtil . copy ( is , [[denzil]] ) ; } finally { StreamUtil . close ( is ) ; } [[denzil]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 958 ---------------------------------------------
Returns a little-endian 64-bit integer from the specified byte array. --> SULY@param greenock@param offset@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[sulley]] ( final byte [ ] [[greenock]] , final int offset ) { return ( ( long ) [[greenock]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 959 ---------------------------------------------
Gzip a file.@param file the file@return the file@throws IOException the io exception --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 960 ---------------------------------------------
Sets the request bundle name.@param request the servlet request@param bundleName the bundle name --> [[[FAILED]]]

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 961 ---------------------------------------------
Adds the specified profiles to this Props object. --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries profile ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String profile : profiles ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String profile : profiles ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 494 / 449 / 19 / 962:  96%|█████████▌| 962/1000 [21:57:56<52:03, 82.20s/it][Succeeded / Failed / Skipped / Total] 494 / 449 / 19 / 962:  96%|█████████▋| 963/1000 [21:59:01<50:40, 82.18s/it][Succeeded / Failed / Skipped / Total] 494 / 450 / 19 / 963:  96%|█████████▋| 963/1000 [21:59:01<50:40, 82.18s/it][Succeeded / Failed / Skipped / Total] 494 / 450 / 19 / 963:  96%|█████████▋| 964/1000 [22:00:14<49:18, 82.17s/it][Succeeded / Failed / Skipped / Total] 494 / 451 / 19 / 964:  96%|█████████▋| 964/1000 [22:00:14<49:18, 82.17s/it][Succeeded / Failed / Skipped / Total] 494 / 451 / 19 / 964:  96%|█████████▋| 965/1000 [22:04:45<48:02, 82.37s/it][Succeeded / Failed / Skipped / Total] 495 / 451 / 19 / 965:  96%|█████████▋| 965/1000 [22:04:45<48:02, 82.37s/it][Succeeded / Failed / Skipped / Total] 495 / 451 / 19 / 965:  97%|█████████▋| 966/1000 [22:06:01<46:40, 82.36s/it][Succeeded / Failed / Skipped / Total] 496 / 451 / 19 / 966:  97%|█████████▋| 966/1000 [22:06:01<46:40, 82.36s/it][Succeeded / Failed / Skipped / Total] 496 / 451 / 19 / 966:  97%|█████████▋| 967/1000 [22:09:07<45:21, 82.47s/it][Succeeded / Failed / Skipped / Total] 496 / 452 / 19 / 967:  97%|█████████▋| 967/1000 [22:09:07<45:21, 82.47s/it][Succeeded / Failed / Skipped / Total] 496 / 452 / 19 / 967:  97%|█████████▋| 968/1000 [22:10:19<43:58, 82.46s/it]Adds the specified file to the specified ZIP output stream. --> WITHDRAWER@param zos@param recordings@param journeys@param comment@param recursive@throws IOException --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = [[file]] . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[wilton]] ( final ZipOutputStream zos , final File [[recordings]] , String [[journeys]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[recordings]] . exists ( ) ) { throw new FileNotFoundException ( [[recordings]] . toString ( ) ) ; } if ( [[journeys]] == null ) { [[journeys]] = [[recordings]] . getName ( ) ; } while ( [[journeys]] . length ( ) != 0 && [[journeys]] . charAt ( 0 ) == ' ' ) { [[journeys]] = [[journeys]] . substring ( 1 ) ; } boolean isDir = [[recordings]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 963 ---------------------------------------------
Gets the session locale. --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 964 ---------------------------------------------
Sets the session locale.@param session the session@param localeCode the locale code --> [[[FAILED]]]

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 965 ---------------------------------------------
Reads the bootstrap methods attribute. --> zucchini zu schreiben --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[zucchini]] ( final int maxStringLength ) { char [ ] [[exchanging]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 966 ---------------------------------------------
Gets the bytecode offset for the given type annotation.@param typeAnnotationOffsets the type annotation offsets@param typeAnnotationIndex the type annotation index@return the bytecode offset --> Baltimore method --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[baltimore]] ( final int [ ] typeAnnotationOffsets , final int [[rhodes]] ) { if ( typeAnnotationOffsets == null || [[rhodes]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[rhodes]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[rhodes]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a label from the specified bytecode offset. --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 497 / 452 / 19 / 968:  97%|█████████▋| 968/1000 [22:10:19<43:58, 82.46s/it][Succeeded / Failed / Skipped / Total] 497 / 452 / 19 / 968:  97%|█████████▋| 969/1000 [22:11:40<42:36, 82.46s/it][Succeeded / Failed / Skipped / Total] 498 / 452 / 19 / 969:  97%|█████████▋| 969/1000 [22:11:40<42:36, 82.46s/it][Succeeded / Failed / Skipped / Total] 498 / 452 / 19 / 969:  97%|█████████▋| 970/1000 [22:14:27<41:16, 82.54s/it][Succeeded / Failed / Skipped / Total] 498 / 453 / 19 / 970:  97%|█████████▋| 970/1000 [22:14:27<41:16, 82.54s/it][Succeeded / Failed / Skipped / Total] 498 / 453 / 19 / 970:  97%|█████████▋| 971/1000 [22:14:31<39:51, 82.46s/it][Succeeded / Failed / Skipped / Total] 499 / 453 / 19 / 971:  97%|█████████▋| 971/1000 [22:14:31<39:51, 82.46s/it][Succeeded / Failed / Skipped / Total] 499 / 453 / 19 / 971:  97%|█████████▋| 972/1000 [22:16:08<38:29, 82.48s/it][Succeeded / Failed / Skipped / Total] 500 / 453 / 19 / 972:  97%|█████████▋| 972/1000 [22:16:08<38:29, 82.48s/it][Succeeded / Failed / Skipped / Total] 500 / 453 / 19 / 972:  97%|█████████▋| 973/1000 [22:18:57<37:09, 82.57s/it]Reads the verification type information from the specified frame. --> Liefert den Betrag aus der Betrag aus der Betrag aus der Betrag aus der Betrag aus der Betrag aus der Betrag aus der Betrag --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int [[currentOffset]] = [[verificationTypeInfoOffset]] ; int tag = b [ [[currentOffset]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( [[currentOffset]] , charBuffer ) ; [[currentOffset]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( [[currentOffset]] ) , labels ) ; [[currentOffset]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[currentOffset]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[vulgarity]] ( final int [[capitán]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int [[courtesan]] = [[capitán]] ; int tag = b [ [[courtesan]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( [[courtesan]] , charBuffer ) ; [[courtesan]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( [[courtesan]] ) , labels ) ; [[courtesan]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[courtesan]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 969 ---------------------------------------------
Reads data from an input stream.@param inputStream the input stream to read from@param close true if the stream should be closed@return the data read from the input stream@throws IOException if an I/O error occurs --> Low-level low-level low-level low-level low-level low-level low-level low-level --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[outputStream]] . write ( data , 0 , bytesRead ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[lowdown]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[ah]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[ah]] . write ( data , 0 , bytesRead ) ; } [[ah]] . flush ( ) ; return [[ah]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 970 ---------------------------------------------
Analyzes all constructors in the class descriptor. --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 971 ---------------------------------------------
Adds a consumer to be called when a file is found. --> Creates and returns a FindFile that matches the supplied Consumers. --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[temples]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[temples]] ) ; } else { consumers . add ( [[temples]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 972 ---------------------------------------------
Initializes this filter with the specified configuration. --> Overrides the behavior of the superclass to gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully gracefully --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[lusty]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 501 / 453 / 19 / 973:  97%|█████████▋| 973/1000 [22:18:57<37:09, 82.57s/it][Succeeded / Failed / Skipped / Total] 501 / 453 / 19 / 973:  97%|█████████▋| 974/1000 [22:20:02<35:46, 82.55s/it][Succeeded / Failed / Skipped / Total] 501 / 454 / 19 / 974:  97%|█████████▋| 974/1000 [22:20:02<35:46, 82.55s/it][Succeeded / Failed / Skipped / Total] 501 / 454 / 19 / 974:  98%|█████████▊| 975/1000 [22:21:40<34:24, 82.56s/it][Succeeded / Failed / Skipped / Total] 501 / 455 / 19 / 975:  98%|█████████▊| 975/1000 [22:21:40<34:24, 82.56s/it][Succeeded / Failed / Skipped / Total] 501 / 455 / 19 / 975:  98%|█████████▊| 976/1000 [22:22:02<33:00, 82.50s/it][Succeeded / Failed / Skipped / Total] 501 / 456 / 19 / 976:  98%|█████████▊| 976/1000 [22:22:02<33:00, 82.50s/it][Succeeded / Failed / Skipped / Total] 501 / 456 / 19 / 976:  98%|█████████▊| 977/1000 [22:23:51<31:38, 82.53s/it][Succeeded / Failed / Skipped / Total] 501 / 457 / 19 / 977:  98%|█████████▊| 977/1000 [22:23:51<31:38, 82.53s/it][Succeeded / Failed / Skipped / Total] 501 / 457 / 19 / 977:  98%|█████████▊| 978/1000 [22:25:21<30:15, 82.54s/it][Succeeded / Failed / Skipped / Total] 502 / 457 / 19 / 978:  98%|█████████▊| 978/1000 [22:25:21<30:15, 82.54s/it][Succeeded / Failed / Skipped / Total] 502 / 457 / 19 / 978:  98%|█████████▊| 979/1000 [22:25:21<28:51, 82.45s/it][Succeeded / Failed / Skipped / Total] 503 / 457 / 19 / 979:  98%|█████████▊| 979/1000 [22:25:21<28:51, 82.45s/it][Succeeded / Failed / Skipped / Total] 503 / 457 / 19 / 979:  98%|█████████▊| 980/1000 [22:27:32<27:30, 82.50s/it][Succeeded / Failed / Skipped / Total] 504 / 457 / 19 / 980:  98%|█████████▊| 980/1000 [22:27:32<27:30, 82.50s/it][Succeeded / Failed / Skipped / Total] 504 / 457 / 19 / 980:  98%|█████████▊| 981/1000 [22:29:21<26:08, 82.53s/it]Reads the element values from the annotation.@param annotationVisitor the annotation visitor@param annotationOffset the annotation offset@param named the named attribute@param charBuffer the char buffer --> SADler implementation --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] [[charBuffer]] ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[sadler]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] [[bathers]] ) { int [[strategic]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 974 ---------------------------------------------
Gets the request map.@param servletRequest the servlet request@return the request map --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 975 ---------------------------------------------
Returns the ctor descriptor for the given arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 976 ---------------------------------------------
Creates a request map. --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 977 ---------------------------------------------
Converts an object to an array.@param value the object to convert.@return the array. --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Finds all files in the file system. --> zacarias --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[zacarias]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 979 ---------------------------------------------
Initializes the rules. --> Somnambulist rules --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[somnambulist]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 980 ---------------------------------------------
Searches for a file in the specified path. --> SOMETHING FILES --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[sodomite]] ( final URI searchPath ) { File [[lawsuits]] ; try { [[lawsuits]] = new File ( [[sodomite]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[sodomite]] , ex ) ; } addPath ( [[lawsuits]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
[Succeeded / Failed / Skipped / Total] 504 / 458 / 19 / 981:  98%|█████████▊| 981/1000 [22:29:21<26:08, 82.53s/it][Succeeded / Failed / Skipped / Total] 504 / 458 / 19 / 981:  98%|█████████▊| 982/1000 [22:29:37<24:44, 82.46s/it][Succeeded / Failed / Skipped / Total] 504 / 459 / 19 / 982:  98%|█████████▊| 982/1000 [22:29:37<24:44, 82.46s/it][Succeeded / Failed / Skipped / Total] 504 / 459 / 19 / 982:  98%|█████████▊| 983/1000 [22:30:55<23:21, 82.46s/it][Succeeded / Failed / Skipped / Total] 504 / 460 / 19 / 983:  98%|█████████▊| 983/1000 [22:30:55<23:21, 82.46s/it][Succeeded / Failed / Skipped / Total] 504 / 460 / 19 / 983:  98%|█████████▊| 984/1000 [22:31:29<21:58, 82.41s/it][Succeeded / Failed / Skipped / Total] 504 / 461 / 19 / 984:  98%|█████████▊| 984/1000 [22:31:29<21:58, 82.41s/it][Succeeded / Failed / Skipped / Total] 504 / 461 / 19 / 984:  98%|█████████▊| 985/1000 [22:34:40<20:37, 82.52s/it][Succeeded / Failed / Skipped / Total] 505 / 461 / 19 / 985:  98%|█████████▊| 985/1000 [22:34:40<20:37, 82.52s/it][Succeeded / Failed / Skipped / Total] 505 / 461 / 19 / 985:  99%|█████████▊| 986/1000 [22:36:55<19:16, 82.57s/it][Succeeded / Failed / Skipped / Total] 505 / 462 / 19 / 986:  99%|█████████▊| 986/1000 [22:36:55<19:16, 82.57s/it][Succeeded / Failed / Skipped / Total] 505 / 462 / 19 / 986:  99%|█████████▊| 987/1000 [22:37:49<17:53, 82.54s/it][Succeeded / Failed / Skipped / Total] 505 / 463 / 19 / 987:  99%|█████████▊| 987/1000 [22:37:49<17:53, 82.54s/it][Succeeded / Failed / Skipped / Total] 505 / 463 / 19 / 987:  99%|█████████▉| 988/1000 [22:39:05<16:30, 82.54s/it][Succeeded / Failed / Skipped / Total] 505 / 464 / 19 / 988:  99%|█████████▉| 988/1000 [22:39:05<16:30, 82.54s/it][Succeeded / Failed / Skipped / Total] 505 / 464 / 19 / 988:  99%|█████████▉| 989/1000 [22:39:33<15:07, 82.48s/it]--------------------------------------------- Result 981 ---------------------------------------------
Adds a path to this file system. --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Includes the specified patterns.@param patterns the patterns to be included@return this finder --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Excludes all files that match the given patterns. --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 984 ---------------------------------------------
Searches for a file in this directory and adds it to this directory. --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 985 ---------------------------------------------
Resolve bean name.@param type the type@param useLongTypeName the use long type name@return the bean name --> Creates a Maven Maven Maven Maven Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing Maven Mixing M --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[mamba]] ( final Class [[nature]] , final boolean useLongTypeName ) { PetiteBean [[boom]] = ( ( Class < ? > ) [[nature]] ) . getAnnotation ( PetiteBean . class ) ; String [[sake]] = null ; if ( [[boom]] != null ) { [[sake]] = [[boom]] . value ( ) . trim ( ) ; } if ( ( [[sake]] == null ) || ( [[sake]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[sake]] = [[nature]] . getName ( ) ; } else { [[sake]] = StringUtil . uncapitalize ( [[nature]] . getSimpleName ( ) ) ; } } return [[sake]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 986 ---------------------------------------------
Returns an iterator over the files in this directory. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves the wiring mode for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Returns a buffered output writer. --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter getWriter ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter getWriter ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 989 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 506 / 464 / 19 / 989:  99%|█████████▉| 989/1000 [22:39:33<15:07, 82.48s/it][Succeeded / Failed / Skipped / Total] 506 / 464 / 19 / 989:  99%|█████████▉| 990/1000 [22:41:04<13:44, 82.49s/it][Succeeded / Failed / Skipped / Total] 507 / 464 / 19 / 990:  99%|█████████▉| 990/1000 [22:41:04<13:44, 82.49s/it][Succeeded / Failed / Skipped / Total] 507 / 464 / 19 / 990:  99%|█████████▉| 991/1000 [22:41:29<12:21, 82.43s/it][Succeeded / Failed / Skipped / Total] 507 / 465 / 19 / 991:  99%|█████████▉| 991/1000 [22:41:29<12:21, 82.43s/it][Succeeded / Failed / Skipped / Total] 507 / 465 / 19 / 991:  99%|█████████▉| 992/1000 [22:41:37<10:58, 82.36s/it][Succeeded / Failed / Skipped / Total] 508 / 465 / 19 / 992:  99%|█████████▉| 992/1000 [22:41:37<10:58, 82.36s/it][Succeeded / Failed / Skipped / Total] 508 / 465 / 19 / 992:  99%|█████████▉| 993/1000 [22:42:46<09:36, 82.34s/it][Succeeded / Failed / Skipped / Total] 508 / 466 / 19 / 993:  99%|█████████▉| 993/1000 [22:42:46<09:36, 82.34s/it][Succeeded / Failed / Skipped / Total] 508 / 466 / 19 / 993:  99%|█████████▉| 994/1000 [22:44:31<08:14, 82.37s/it][Succeeded / Failed / Skipped / Total] 508 / 467 / 19 / 994:  99%|█████████▉| 994/1000 [22:44:31<08:14, 82.37s/it][Succeeded / Failed / Skipped / Total] 508 / 467 / 19 / 994: 100%|█████████▉| 995/1000 [22:45:02<06:51, 82.31s/it]Returns the output stream for this output stream. --> zapped --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[zapped]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 990 ---------------------------------------------
Returns a string representation of the method's descriptor. --> Converts a type into a bi-directional bi-directional bi-directional bi-directional bi-directional bi-directional bi-directional --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type [[argumentType]] : [[argumentTypes]] ) { [[argumentType]] . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[hut]] ( final Type [[embryo]] , final Type ... [[clicker]] ) { StringBuilder [[psychological]] = new StringBuilder ( ) ; [[psychological]] . append ( ' ' ) ; for ( Type [[bicentennial]] : [[clicker]] ) { [[bicentennial]] . appendDescriptor ( [[psychological]] ) ; } [[psychological]] . append ( ' ' ) ; [[embryo]] . appendDescriptor ( [[psychological]] ) ; return [[psychological]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 991 ---------------------------------------------
Gets the class name of this object. --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 992 ---------------------------------------------
Sets the rollback only flag. --> hoofbeats --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[hoofbeats]] ( final Throwable [[jose]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[jose]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 993 ---------------------------------------------
Returns a description of the given method. --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 994 ---------------------------------------------
Returns the descriptor for the given constructor. --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 995 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 509 / 467 / 19 / 995: 100%|█████████▉| 995/1000 [22:45:02<06:51, 82.31s/it][Succeeded / Failed / Skipped / Total] 509 / 467 / 19 / 995: 100%|█████████▉| 996/1000 [22:46:51<05:29, 82.34s/it][Succeeded / Failed / Skipped / Total] 510 / 467 / 19 / 996: 100%|█████████▉| 996/1000 [22:46:51<05:29, 82.34s/it][Succeeded / Failed / Skipped / Total] 510 / 467 / 19 / 996: 100%|█████████▉| 997/1000 [22:48:42<04:07, 82.37s/it][Succeeded / Failed / Skipped / Total] 510 / 468 / 19 / 997: 100%|█████████▉| 997/1000 [22:48:42<04:07, 82.37s/it][Succeeded / Failed / Skipped / Total] 510 / 468 / 19 / 997: 100%|█████████▉| 998/1000 [22:51:33<02:44, 82.46s/it][Succeeded / Failed / Skipped / Total] 510 / 469 / 19 / 998: 100%|█████████▉| 998/1000 [22:51:33<02:44, 82.46s/it][Succeeded / Failed / Skipped / Total] 510 / 469 / 19 / 998: 100%|█████████▉| 999/1000 [22:58:04<01:22, 82.77s/it][Succeeded / Failed / Skipped / Total] 510 / 470 / 19 / 999: 100%|█████████▉| 999/1000 [22:58:04<01:22, 82.77s/it][Succeeded / Failed / Skipped / Total] 510 / 470 / 19 / 999: 100%|██████████| 1000/1000 [23:00:27<00:00, 82.83s/it]Returns the number of elements in this array. --> SCHINDLERS --> Socre: 1.0

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[schindler]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 996 ---------------------------------------------
Get the number of arguments and return sizes for the given method descriptor. --> Provides an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an easy way to provide an --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[profession]] ( final String [[clutching]] ) { int [[photograph]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Append the descriptor.@param stringBuilder the string builder --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 998 ---------------------------------------------
Commits or rolls back the transaction. --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Rollback all resources. --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 511 / 470 / 19 / 1000: 100%|██████████| 1000/1000 [23:00:27<00:00, 82.83s/it]/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
Attack(
  (search_method): HardLabelSearch(
    (pop_size):  30
    (max_iters):  100
    (max_replacements_per_index):  25
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/codeattack/search_methods/hard_label_search.py:487: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  similarity_scores = np.asarray(similarity_scores)
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
[Succeeded / Failed / Skipped / Total] 511 / 470 / 19 / 1000: 100%|██████████| 1000/1000 [23:00:32<00:00, 82.83s/it]Request a resource. --> region > griffiths requestResource --> Socre: 1.0

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[griffiths]] > [[griffiths]] requestResource ( final Class < [[griffiths]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[griffiths]] [[finance]] = lookupResource ( resourceType ) ; if ( [[finance]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[griffiths]] > [[pando]] = txManager . lookupResourceManager ( resourceType ) ; [[finance]] = [[pando]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[pando]] , [[finance]] ) ) ; } return [[finance]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+---------+
| Attack Results                |         |
+-------------------------------+---------+
| Number of successful attacks: | 511     |
| Number of failed attacks:     | 470     |
| Number of skipped attacks:    | 19      |
| Original accuracy:            | 98.1%   |
| Accuracy under attack:        | 47.0%   |
| Attack success rate:          | 52.09%  |
| Average perturbed word %:     | 65.58%  |
| Average num. words per input: | 3.91    |
| Avg num queries:              | 1247.99 |
| Original BLEU-4:              | 14.44   |
| Perturbed BLEU-4:             | 6.99    |
+-------------------------------+---------+


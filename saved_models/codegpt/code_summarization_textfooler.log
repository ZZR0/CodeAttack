Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
textattack: Running 7 worker(s) on 7 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 846.14it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1147.71it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1320.21it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1403.48it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1423.05it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 6/1000 [00:25<1:09:08,  4.17s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps an observable source.@param < T> the type parameter@param source the source@return the observable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[cover]] ( ObservableSource < T > [[racine]] ) { ObjectHelper . requireNonNull ( [[racine]] , "source is null" ) ; if ( [[racine]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[racine]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[racine]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Sorts the elements in this observable according to the specified sort function.@param sortFunction the sort function to be applied to the elements in this observable.@return the sorted observable. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[ranking]] ( Comparator < ? super T > [[disavowed]] ) { ObjectHelper . requireNonNull ( [[disavowed]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[disavowed]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Creates a new processor with the specified capacity. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[forging]] ( int [[loonies]] ) { return new UnicastProcessor < T > ( [[loonies]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Resets this scheduler. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[boot]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Hypocrite]]" != "[[Hypocrite]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 5 ---------------------------------------------
Performs a fast-path rejection of the supplied value. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[anthology]] ( U [[priceless]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[priceless]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[priceless]] ) ; } } else { q . offer ( [[priceless]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:25<1:09:08,  4.17s/it][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 7/1000 [00:33<1:19:40,  4.81s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:33<1:19:40,  4.81s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 8/1000 [00:51<1:45:59,  6.41s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:51<1:45:59,  6.41s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 9/1000 [01:02<1:53:49,  6.89s/it][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [01:02<1:53:50,  6.89s/it][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 10/1000 [01:16<2:06:39,  7.68s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 10/1000 [01:16<2:06:39,  7.68s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 11/1000 [01:22<2:03:12,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 11/1000 [01:22<2:03:12,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 12/1000 [02:21<3:13:55, 11.78s/it][Succeeded / Failed / Skipped / Total] 1 / 11 / 0 / 12:   1%|          | 12/1000 [02:21<3:13:55, 11.78s/it][Succeeded / Failed / Skipped / Total] 1 / 11 / 0 / 12:   1%|▏         | 13/1000 [02:26<3:05:28, 11.27s/it][Succeeded / Failed / Skipped / Total] 1 / 12 / 0 / 13:   1%|▏         | 13/1000 [02:26<3:05:28, 11.27s/it][Succeeded / Failed / Skipped / Total] 1 / 12 / 0 / 13:   1%|▏         | 14/1000 [02:36<3:04:11, 11.21s/it][Succeeded / Failed / Skipped / Total] 1 / 13 / 0 / 14:   1%|▏         | 14/1000 [02:36<3:04:11, 11.21s/it][Succeeded / Failed / Skipped / Total] 1 / 13 / 0 / 14:   2%|▏         | 15/1000 [02:40<2:55:56, 10.72s/it]Observes an observable on the specified connection.@param < T> the type parameter@param co the connection@param scheduler the scheduler@return the observable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > [[co]] , final Scheduler [[scheduler]] ) { final Observable < T > [[observable]] = [[co]] . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[yule]] ( final ConnectableObservable < T > [[commanding]] , final Scheduler [[disturbing]] ) { final Observable < T > [[cannot]] = [[commanding]] . observeOn ( [[disturbing]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[commanding]] , [[cannot]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a new processor with the specified capacity. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[creative]] ( int [[mchenry]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[mchenry]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Create a scalar flowable that maps a value to a publisher.@param < T> the type parameter@param < U> the type parameter@param value the value@param mapper the mapper@return the flowable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[wandering]] ( final T [[merited]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[baryshnikov]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[merited]] , [[baryshnikov]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Create a new Maybe from a completable source.@param < T> the type parameter@param completableSource the source@return the Maybe --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[epoxy]] ( CompletableSource [[boorish]] ) { ObjectHelper . requireNonNull ( [[boorish]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[boorish]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Throws a NullPointerException if the supplied object is null. --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[tones]] > [[tones]] requireNonNull ( [[tones]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 11 ---------------------------------------------
Create a RxJava Maybe from a single source.@param < T> the type parameter@param singleSource the single source@return the RxJava Maybe --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[ineffective]] ( SingleSource < T > [[caveman]] ) { ObjectHelper . requireNonNull ( [[caveman]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[caveman]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
Creates a function that will just return the supplied value. --> Crowsley functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[crowley]] ( U [[cherishes]] ) { return new JustValue < T , U > ( [[cherishes]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 13 ---------------------------------------------
Creates a Callable that will just call the supplied value. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[leastways]] ( T [[merit]] ) { return new JustValue < Object , T > ( [[merit]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Creates a new non-blocking producer. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[construction]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Befitting]]" == "[[Befitting]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 15 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 14 / 0 / 15:   2%|▏         | 15/1000 [02:40<2:55:57, 10.72s/it][Succeeded / Failed / Skipped / Total] 1 / 14 / 0 / 15:   2%|▏         | 16/1000 [02:59<3:03:56, 11.22s/it][Succeeded / Failed / Skipped / Total] 1 / 15 / 0 / 16:   2%|▏         | 16/1000 [02:59<3:03:56, 11.22s/it][Succeeded / Failed / Skipped / Total] 1 / 15 / 0 / 16:   2%|▏         | 17/1000 [03:05<2:58:24, 10.89s/it][Succeeded / Failed / Skipped / Total] 1 / 16 / 0 / 17:   2%|▏         | 17/1000 [03:05<2:58:24, 10.89s/it][Succeeded / Failed / Skipped / Total] 1 / 16 / 0 / 17:   2%|▏         | 18/1000 [03:26<3:07:44, 11.47s/it][Succeeded / Failed / Skipped / Total] 1 / 17 / 0 / 18:   2%|▏         | 18/1000 [03:26<3:07:44, 11.47s/it][Succeeded / Failed / Skipped / Total] 1 / 17 / 0 / 18:   2%|▏         | 19/1000 [04:17<3:41:47, 13.57s/it][Succeeded / Failed / Skipped / Total] 1 / 18 / 0 / 19:   2%|▏         | 19/1000 [04:17<3:41:47, 13.57s/it][Succeeded / Failed / Skipped / Total] 1 / 18 / 0 / 19:   2%|▏         | 20/1000 [04:33<3:43:27, 13.68s/it][Succeeded / Failed / Skipped / Total] 1 / 19 / 0 / 20:   2%|▏         | 20/1000 [04:33<3:43:27, 13.68s/it][Succeeded / Failed / Skipped / Total] 1 / 19 / 0 / 20:   2%|▏         | 21/1000 [04:41<3:39:05, 13.43s/it][Succeeded / Failed / Skipped / Total] 1 / 20 / 0 / 21:   2%|▏         | 21/1000 [04:41<3:39:05, 13.43s/it][Succeeded / Failed / Skipped / Total] 1 / 20 / 0 / 21:   2%|▏         | 22/1000 [05:35<4:08:16, 15.23s/it][Succeeded / Failed / Skipped / Total] 2 / 20 / 0 / 22:   2%|▏         | 22/1000 [05:35<4:08:16, 15.23s/it][Succeeded / Failed / Skipped / Total] 2 / 20 / 0 / 22:   2%|▏         | 23/1000 [05:37<3:58:57, 14.68s/it][Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 23/1000 [05:37<3:58:57, 14.68s/it][Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 24/1000 [05:49<3:56:48, 14.56s/it]Retries the specified number of times. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( [[times]] , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[juncture]] , Predicate < ? super Throwable > [[instrumental]] ) { return toFlowable ( ) . retry ( [[juncture]] , [[instrumental]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 16 ---------------------------------------------
Returns an identity function. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[tonne]] > Function < [[tonne]] , [[tonne]] > [[distinctive]] ( ) { return ( Function < [[tonne]] , [[tonne]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 17 ---------------------------------------------
Blocking get error. --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[schnauzer]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a cast function from the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[tone]] , U > Function < [[tone]] , U > [[however]] ( Class < U > [[focus]] ) { return new CastToClass < [[tone]] , U > ( [[focus]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new non-blocking UnicastSubject. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[manufactured]] ( boolean [[irishmen]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[irishmen]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 20 ---------------------------------------------
Blocking get error. --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new subject with the specified capacity. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[forging]] ( int [[akin]] ) { return new UnicastSubject < T > ( [[akin]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 22 ---------------------------------------------
Requests the specified number of bytes from the supplied subscription. --> Request a connery signal --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[demanded]] ( Subscription s , int [[connery]] ) { s . request ( [[connery]] < 0 ? Long . MAX_VALUE : [[connery]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 23 ---------------------------------------------
Creates a new UnicastSubject.@param < T> the type parameter@param capacityHint the capacity hint@param onTerminate the onTerminate@return the created object --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[baumann]] , Runnable [[lymphoma]] ) { return new UnicastSubject < T > ( [[baumann]] , [[lymphoma]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 24 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 22 / 0 / 24:   2%|▏         | 24/1000 [05:49<3:56:48, 14.56s/it][Succeeded / Failed / Skipped / Total] 2 / 22 / 0 / 24:   2%|▎         | 25/1000 [06:18<4:05:55, 15.13s/it][Succeeded / Failed / Skipped / Total] 2 / 23 / 0 / 25:   2%|▎         | 25/1000 [06:18<4:05:55, 15.13s/it][Succeeded / Failed / Skipped / Total] 2 / 23 / 0 / 25:   3%|▎         | 26/1000 [06:19<3:56:52, 14.59s/it][Succeeded / Failed / Skipped / Total] 2 / 24 / 0 / 26:   3%|▎         | 26/1000 [06:19<3:56:52, 14.59s/it][Succeeded / Failed / Skipped / Total] 2 / 24 / 0 / 26:   3%|▎         | 27/1000 [07:58<4:47:29, 17.73s/it][Succeeded / Failed / Skipped / Total] 2 / 25 / 0 / 27:   3%|▎         | 27/1000 [07:58<4:47:29, 17.73s/it][Succeeded / Failed / Skipped / Total] 2 / 25 / 0 / 27:   3%|▎         | 28/1000 [08:35<4:58:32, 18.43s/it][Succeeded / Failed / Skipped / Total] 2 / 26 / 0 / 28:   3%|▎         | 28/1000 [08:35<4:58:32, 18.43s/it][Succeeded / Failed / Skipped / Total] 2 / 26 / 0 / 28:   3%|▎         | 29/1000 [08:41<4:51:01, 17.98s/it]Completes this stream. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 25 ---------------------------------------------
Gets the error associated with this notification. --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[banes]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value associated with this notification. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[leonid]] ( ) { Object [[singapore]] = value ; if ( [[singapore]] != null && ! NotificationLite . isError ( [[singapore]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Blocks until the specified wait time is reached.@param timeout the maximum time to wait@param unit the time unit@return {@code true} if the wait timed out, {@code false} otherwise --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[procurator]] ( long timeout , TimeUnit [[reliance]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[reliance]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 28 ---------------------------------------------
Posts the specified queue to the specified subscriber. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[baumann]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 29 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 27 / 0 / 29:   3%|▎         | 29/1000 [08:41<4:51:01, 17.98s/it][Succeeded / Failed / Skipped / Total] 2 / 27 / 0 / 29:   3%|▎         | 30/1000 [10:17<5:32:44, 20.58s/it][Succeeded / Failed / Skipped / Total] 3 / 27 / 0 / 30:   3%|▎         | 30/1000 [10:17<5:32:45, 20.58s/it][Succeeded / Failed / Skipped / Total] 3 / 27 / 0 / 30:   3%|▎         | 31/1000 [11:14<5:51:33, 21.77s/it][Succeeded / Failed / Skipped / Total] 4 / 27 / 0 / 31:   3%|▎         | 31/1000 [11:14<5:51:33, 21.77s/it][Succeeded / Failed / Skipped / Total] 4 / 27 / 0 / 31:   3%|▎         | 32/1000 [12:23<6:14:40, 23.22s/it][Succeeded / Failed / Skipped / Total] 4 / 28 / 0 / 32:   3%|▎         | 32/1000 [12:23<6:14:40, 23.22s/it][Succeeded / Failed / Skipped / Total] 4 / 28 / 0 / 32:   3%|▎         | 33/1000 [12:54<6:18:29, 23.48s/it][Succeeded / Failed / Skipped / Total] 4 / 29 / 0 / 33:   3%|▎         | 33/1000 [12:54<6:18:29, 23.48s/it][Succeeded / Failed / Skipped / Total] 4 / 29 / 0 / 33:   3%|▎         | 34/1000 [12:57<6:08:09, 22.87s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   3%|▎         | 34/1000 [12:57<6:08:09, 22.87s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   4%|▎         | 35/1000 [12:58<5:57:42, 22.24s/it]Try to subscribe to a scalar map. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > [[source]] , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "[[True]]" == "[[True]]" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { r . subscribe ( [[subscriber]] ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[amphitheatre]] ( Publisher < T > [[fuentes]] , Subscriber < ? super R > [[consumers]] , Function < ? super T , ? extends Publisher < ? extends R > > [[epoxy]] ) { if ( [[fuentes]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[fuentes]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[consumers]] ) ; return "[[Earnest]]" == "[[Earnest]]" ; } if ( t == null ) { EmptySubscription . complete ( [[consumers]] ) ; return "[[Earnest]]" == "[[Earnest]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[epoxy]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[consumers]] ) ; return "[[Earnest]]" == "[[Earnest]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[consumers]] ) ; return "[[Earnest]]" == "[[Earnest]]" ; } if ( u == null ) { EmptySubscription . complete ( [[consumers]] ) ; return "[[Earnest]]" == "[[Earnest]]" ; } [[consumers]] . onSubscribe ( new ScalarSubscription < R > ( [[consumers]] , u ) ) ; } else { r . subscribe ( [[consumers]] ) ; } return "[[Earnest]]" == "[[Earnest]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 30 ---------------------------------------------
Multiply a long by another. --> Multiply en by deux --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long [[b]] ) { long u = [[a]] * [[b]] ; if ( ( ( [[a]] | [[b]] ) >>> 31 ) != 0 ) { if ( u / [[a]] != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[en]] , long [[deux]] ) { long u = [[en]] * [[deux]] ; if ( ( ( [[en]] | [[deux]] ) >>> 31 ) != 0 ) { if ( u / [[en]] != [[deux]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 31 ---------------------------------------------
Adds the specified element to the end of the array. --> Banned Euclidean distance --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long [[a]] , long [[b]] ) { long u = [[a]] + [[b]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[banes]] ( long [[both]] , long [[trois]] ) { long u = [[both]] + [[trois]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 32 ---------------------------------------------
Converts a Throwable to a NullPointerException. --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[traverse]] ( Throwable ex ) { NullPointerException [[clinically]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[clinically]] . initCause ( ex ) ; return [[clinically]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 33 ---------------------------------------------
Adds n elements to the supplied AtomicLong. --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[requests]] , long n ) { for ( ; ; ) { long r = [[requests]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requests]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 34 ---------------------------------------------
Adds an object to the list. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[totaled]] ( Object [[zealand]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 31 / 0 / 35:   4%|▎         | 35/1000 [12:58<5:57:42, 22.24s/it][Succeeded / Failed / Skipped / Total] 4 / 31 / 0 / 35:   4%|▎         | 36/1000 [13:14<5:54:27, 22.06s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 36/1000 [13:14<5:54:27, 22.06s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 37/1000 [13:28<5:50:40, 21.85s/it][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▎         | 37/1000 [13:28<5:50:40, 21.85s/it][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▍         | 38/1000 [13:43<5:47:37, 21.68s/it][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 38/1000 [13:43<5:47:37, 21.68s/it][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 39/1000 [13:50<5:40:58, 21.29s/it][Succeeded / Failed / Skipped / Total] 5 / 34 / 0 / 39:   4%|▍         | 39/1000 [13:50<5:40:58, 21.29s/it][Succeeded / Failed / Skipped / Total] 5 / 34 / 0 / 39:   4%|▍         | 40/1000 [14:09<5:39:40, 21.23s/it][Succeeded / Failed / Skipped / Total] 5 / 35 / 0 / 40:   4%|▍         | 40/1000 [14:09<5:39:40, 21.23s/it][Succeeded / Failed / Skipped / Total] 5 / 35 / 0 / 40:   4%|▍         | 41/1000 [14:10<5:31:39, 20.75s/it]Sets the next Disposable once.@param upstream The {@link Disposable} to set.@param next The {@link Disposable} to set.@param observer The {@link Disposable} to use.@return {@code true} if the next Disposable was set, {@code false} otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[traverse]] ( AtomicReference < Disposable > [[upstairs]] , Disposable [[since]] , Class < ? > [[spotter]] ) { ObjectHelper . requireNonNull ( [[since]] , "next is null" ) ; if ( ! [[upstairs]] . compareAndSet ( null , [[since]] ) ) { [[since]] . dispose ( ) ; if ( [[upstairs]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[spotter]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Validates that the next Subscription is of the given type.@param upstream The next Subscription.@param next The next Subscription.@param subscriber The type of the next Subscription.@return True if the next Subscription is of the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[defensible]] ( Subscription upstream , Subscription [[hereafter]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[hereafter]] , "next is null" ) ; if ( upstream != null ) { [[hereafter]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 37 ---------------------------------------------
Shuts down the pool. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[farm]] ( ) { ScheduledExecutorService [[constructor]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[constructor]] != null ) { [[constructor]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 38 ---------------------------------------------
Sets the next subscription in the chain once.@param upstream The source of the next subscription.@param next The next subscription in the chain.@param subscriber The subscriber of the next subscription.@return <code>true</code> on success, <code>false</code> otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[knock]] ( AtomicReference < Subscription > [[climbing]] , Subscription [[since]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[since]] , "next is null" ) ; if ( ! [[climbing]] . compareAndSet ( null , [[since]] ) ) { [[since]] . cancel ( ) ; if ( [[climbing]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 39 ---------------------------------------------
Emits a loop. -->  assembler --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[assembler]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 40 ---------------------------------------------
Wraps an exception. --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[crowley]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 41 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 36 / 0 / 41:   4%|▍         | 41/1000 [14:10<5:31:39, 20.75s/it][Succeeded / Failed / Skipped / Total] 5 / 36 / 0 / 41:   4%|▍         | 42/1000 [14:27<5:29:43, 20.65s/it][Succeeded / Failed / Skipped / Total] 5 / 37 / 0 / 42:   4%|▍         | 42/1000 [14:27<5:29:43, 20.65s/it][Succeeded / Failed / Skipped / Total] 5 / 37 / 0 / 42:   4%|▍         | 43/1000 [14:39<5:26:04, 20.44s/it][Succeeded / Failed / Skipped / Total] 5 / 38 / 0 / 43:   4%|▍         | 43/1000 [14:39<5:26:04, 20.44s/it][Succeeded / Failed / Skipped / Total] 5 / 38 / 0 / 43:   4%|▍         | 44/1000 [14:40<5:19:00, 20.02s/it][Succeeded / Failed / Skipped / Total] 5 / 39 / 0 / 44:   4%|▍         | 44/1000 [14:40<5:19:01, 20.02s/it][Succeeded / Failed / Skipped / Total] 5 / 39 / 0 / 44:   4%|▍         | 45/1000 [14:52<5:15:48, 19.84s/it][Succeeded / Failed / Skipped / Total] 5 / 40 / 0 / 45:   4%|▍         | 45/1000 [14:52<5:15:48, 19.84s/it][Succeeded / Failed / Skipped / Total] 5 / 40 / 0 / 45:   5%|▍         | 46/1000 [14:59<5:11:01, 19.56s/it][Succeeded / Failed / Skipped / Total] 5 / 41 / 0 / 46:   5%|▍         | 46/1000 [14:59<5:11:01, 19.56s/it][Succeeded / Failed / Skipped / Total] 5 / 41 / 0 / 46:   5%|▍         | 47/1000 [15:19<5:10:47, 19.57s/it][Succeeded / Failed / Skipped / Total] 5 / 42 / 0 / 47:   5%|▍         | 47/1000 [15:19<5:10:47, 19.57s/it][Succeeded / Failed / Skipped / Total] 5 / 42 / 0 / 47:   5%|▍         | 48/1000 [15:37<5:09:53, 19.53s/it][Succeeded / Failed / Skipped / Total] 5 / 43 / 0 / 48:   5%|▍         | 48/1000 [15:37<5:09:53, 19.53s/it][Succeeded / Failed / Skipped / Total] 5 / 43 / 0 / 48:   5%|▍         | 49/1000 [17:35<5:41:22, 21.54s/it]Sets the current subscription. --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[salinger]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 42 ---------------------------------------------
Validates that the next Disposable is of the given type.@param upstream The next Disposable.@param next The next Disposable.@param observer The type of the next Disposable.@return True if the next Disposable is of the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[proofing]] ( Disposable upstream , Disposable [[upon]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[upon]] , "next is null" ) ; if ( upstream != null ) { [[upon]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[Accurate]]" == "[[Accurate]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 43 ---------------------------------------------
Clears this hash set. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[categorical]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 44 ---------------------------------------------
Creates a new scheduled executor service. --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[forging]] ( ThreadFactory [[herbs]] ) { final ScheduledExecutorService [[clipboard]] = Executors . newScheduledThreadPool ( 1 , [[herbs]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[clipboard]] ) ; return [[clipboard]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 45 ---------------------------------------------
Returns the size of this hash set. --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[amount]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[determine]] = resources ; return [[determine]] != null ? [[determine]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Throws an exception. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Starts the stream. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[inaugurated]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 48 ---------------------------------------------
Start unbounded. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[eugh]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 44 / 0 / 49:   5%|▍         | 49/1000 [17:35<5:41:22, 21.54s/it][Succeeded / Failed / Skipped / Total] 5 / 44 / 0 / 49:   5%|▌         | 50/1000 [17:57<5:41:08, 21.55s/it][Succeeded / Failed / Skipped / Total] 5 / 45 / 0 / 50:   5%|▌         | 50/1000 [17:57<5:41:08, 21.55s/it][Succeeded / Failed / Skipped / Total] 5 / 45 / 0 / 50:   5%|▌         | 51/1000 [18:04<5:36:13, 21.26s/it][Succeeded / Failed / Skipped / Total] 5 / 46 / 0 / 51:   5%|▌         | 51/1000 [18:04<5:36:13, 21.26s/it][Succeeded / Failed / Skipped / Total] 5 / 46 / 0 / 51:   5%|▌         | 52/1000 [18:13<5:32:20, 21.03s/it][Succeeded / Failed / Skipped / Total] 5 / 47 / 0 / 52:   5%|▌         | 52/1000 [18:13<5:32:20, 21.03s/it][Succeeded / Failed / Skipped / Total] 5 / 47 / 0 / 52:   5%|▌         | 53/1000 [18:28<5:30:11, 20.92s/it][Succeeded / Failed / Skipped / Total] 5 / 48 / 0 / 53:   5%|▌         | 53/1000 [18:28<5:30:11, 20.92s/it][Succeeded / Failed / Skipped / Total] 5 / 48 / 0 / 53:   5%|▌         | 54/1000 [18:41<5:27:33, 20.78s/it][Succeeded / Failed / Skipped / Total] 5 / 49 / 0 / 54:   5%|▌         | 54/1000 [18:41<5:27:33, 20.78s/it][Succeeded / Failed / Skipped / Total] 5 / 49 / 0 / 54:   6%|▌         | 55/1000 [18:53<5:24:39, 20.61s/it]Flattens a Throwable into a list of Throwables. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[annihilate]] ( Throwable [[df]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[df]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 50 ---------------------------------------------
Drains all elements from the queue.@param q The queue.@param a The subscriber.@param delayError Delay error.@param dispose The disposable.@param qd The queue. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > [[q]] , Subscriber < ? super U > [[a]] , boolean delayError , Disposable [[dispose]] , QueueDrain < T , U > qd ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[q]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[a]] , delayError , [[q]] , qd ) ) { if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( [[a]] , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[q]] . clear ( ) ; if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } [[a]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = qd . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > [[correspondents]] , Subscriber < ? super U > [[of]] , boolean delayError , Disposable [[suppress]] , QueueDrain < T , U > qd ) { int [[grable]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[correspondents]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[of]] , delayError , [[correspondents]] , qd ) ) { if ( [[suppress]] != null ) { [[suppress]] . [[suppress]] ( ) ; } return ; } if ( empty ) { break ; } long [[phosphorous]] = qd . requested ( ) ; if ( [[phosphorous]] != 0L ) { if ( qd . accept ( [[of]] , v ) ) { if ( [[phosphorous]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[correspondents]] . clear ( ) ; if ( [[suppress]] != null ) { [[suppress]] . [[suppress]] ( ) ; } [[of]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[grable]] = qd . leave ( - [[grable]] ) ; if ( [[grable]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 51 ---------------------------------------------
Creates a scalar x-map observable from the provided value and mapper.@param value The value to map.@param mapper The mapper function.@param < T> The element type.@return The scalar x-map observable. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[avoiding]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[ngo]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[ngo]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Offers the specified element to the specified queue. --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[render]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 53 ---------------------------------------------
Gets an object from the cache. --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[acquires]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Completes this stream. --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[iend]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 50 / 0 / 55:   6%|▌         | 55/1000 [18:53<5:24:39, 20.61s/it][Succeeded / Failed / Skipped / Total] 5 / 50 / 0 / 55:   6%|▌         | 56/1000 [19:15<5:24:44, 20.64s/it][Succeeded / Failed / Skipped / Total] 5 / 51 / 0 / 56:   6%|▌         | 56/1000 [19:15<5:24:44, 20.64s/it][Succeeded / Failed / Skipped / Total] 5 / 51 / 0 / 56:   6%|▌         | 57/1000 [19:46<5:27:13, 20.82s/it][Succeeded / Failed / Skipped / Total] 5 / 52 / 0 / 57:   6%|▌         | 57/1000 [19:46<5:27:13, 20.82s/it][Succeeded / Failed / Skipped / Total] 5 / 52 / 0 / 57:   6%|▌         | 58/1000 [19:57<5:24:06, 20.64s/it][Succeeded / Failed / Skipped / Total] 5 / 53 / 0 / 58:   6%|▌         | 58/1000 [19:57<5:24:06, 20.64s/it][Succeeded / Failed / Skipped / Total] 5 / 53 / 0 / 58:   6%|▌         | 59/1000 [20:06<5:20:36, 20.44s/it][Succeeded / Failed / Skipped / Total] 5 / 54 / 0 / 59:   6%|▌         | 59/1000 [20:06<5:20:36, 20.44s/it][Succeeded / Failed / Skipped / Total] 5 / 54 / 0 / 59:   6%|▌         | 60/1000 [20:10<5:15:59, 20.17s/it][Succeeded / Failed / Skipped / Total] 5 / 55 / 0 / 60:   6%|▌         | 60/1000 [20:10<5:15:59, 20.17s/it][Succeeded / Failed / Skipped / Total] 5 / 55 / 0 / 60:   6%|▌         | 61/1000 [20:42<5:18:48, 20.37s/it][Succeeded / Failed / Skipped / Total] 5 / 56 / 0 / 61:   6%|▌         | 61/1000 [20:42<5:18:48, 20.37s/it][Succeeded / Failed / Skipped / Total] 5 / 56 / 0 / 61:   6%|▌         | 62/1000 [20:47<5:14:37, 20.13s/it]Called when an error occurs. --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[weaknesses]] ( Throwable t ) { int [[proclaims]] = get ( ) ; if ( ( [[proclaims]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Accepts an observer. --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[supervise]] ) { Object [ ] [[alia]] = head ; final int c = capacity ; while ( [[alia]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[alia]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[supervise]] ) ) { return "True" == "True" ; } } [[alia]] = ( Object [ ] ) [[alia]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
Accepts a subscriber. --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "[[True]]" == "[[True]]" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[insurance]] ) { Object [ ] [[the]] = head ; final int c = capacity ; while ( [[the]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[the]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[insurance]] ) ) { return "[[Truly]]" == "[[Truly]]" ; } } [[the]] = ( Object [ ] ) [[the]] [ c ] ; } return "[[Phonies]]" != "[[Phonies]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 58 ---------------------------------------------
Concatenates an Iterable into a single Flowable. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[backdrop]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[backdrop]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 59 ---------------------------------------------
ConcatMapDelayError. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 60 ---------------------------------------------
Waits for the specified number of threads to complete.@param count the number of threads to wait@return this consumer --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[account]] ) { if ( [[account]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Called when the supplied value is complete. --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T [[appraised]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[appraised]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[appraised]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 62 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 57 / 0 / 62:   6%|▌         | 62/1000 [20:47<5:14:37, 20.13s/it][Succeeded / Failed / Skipped / Total] 5 / 57 / 0 / 62:   6%|▋         | 63/1000 [20:55<5:11:06, 19.92s/it][Succeeded / Failed / Skipped / Total] 5 / 58 / 0 / 63:   6%|▋         | 63/1000 [20:55<5:11:06, 19.92s/it][Succeeded / Failed / Skipped / Total] 5 / 58 / 0 / 63:   6%|▋         | 64/1000 [21:35<5:15:53, 20.25s/it][Succeeded / Failed / Skipped / Total] 5 / 59 / 0 / 64:   6%|▋         | 64/1000 [21:35<5:15:53, 20.25s/it][Succeeded / Failed / Skipped / Total] 5 / 59 / 0 / 64:   6%|▋         | 65/1000 [22:01<5:16:53, 20.33s/it][Succeeded / Failed / Skipped / Total] 5 / 60 / 0 / 65:   6%|▋         | 65/1000 [22:01<5:16:53, 20.33s/it][Succeeded / Failed / Skipped / Total] 5 / 60 / 0 / 65:   7%|▋         | 66/1000 [23:04<5:26:26, 20.97s/it][Succeeded / Failed / Skipped / Total] 5 / 61 / 0 / 66:   7%|▋         | 66/1000 [23:04<5:26:26, 20.97s/it][Succeeded / Failed / Skipped / Total] 5 / 61 / 0 / 66:   7%|▋         | 67/1000 [23:30<5:27:26, 21.06s/it][Succeeded / Failed / Skipped / Total] 5 / 62 / 0 / 67:   7%|▋         | 67/1000 [23:30<5:27:26, 21.06s/it][Succeeded / Failed / Skipped / Total] 5 / 62 / 0 / 67:   7%|▋         | 68/1000 [23:46<5:25:57, 20.98s/it][Succeeded / Failed / Skipped / Total] 5 / 63 / 0 / 68:   7%|▋         | 68/1000 [23:46<5:25:57, 20.98s/it][Succeeded / Failed / Skipped / Total] 5 / 63 / 0 / 68:   7%|▋         | 69/1000 [23:54<5:22:28, 20.78s/it]Sorts this stream according to the specified sort function.@param sortFunction the sort function to be applied to each element in the stream.@return a reference to this stream, for chaining. --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[kinds]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 63 ---------------------------------------------
Performs an asynchronous request. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[prays]] ( long [[nd]] ) { Subscription [[dans]] = this . upstream ; if ( [[dans]] != null ) { [[dans]] . request ( [[nd]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 64 ---------------------------------------------
Removes all subscribers from the supplied PublishDisposable. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[scrapping]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 65 ---------------------------------------------
Creates an error response. --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[loophole]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 66 ---------------------------------------------
Calculates the delay between the specified time units. --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[crochet]] ( TimeUnit [[flatbed]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 67 ---------------------------------------------
Creates a new sample data.@param username the username@param password the password --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[lacey]] ( String username , String [[cipher]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[cipher]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 68 ---------------------------------------------
Returns the value of the given HTTP method. --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[enhances]] ( String [[shape]] ) { try { return HttpMethod . valueOf ( [[shape]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 69 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 64 / 0 / 69:   7%|▋         | 69/1000 [23:54<5:22:28, 20.78s/it][Succeeded / Failed / Skipped / Total] 5 / 64 / 0 / 69:   7%|▋         | 70/1000 [24:01<5:19:13, 20.60s/it][Succeeded / Failed / Skipped / Total] 5 / 65 / 0 / 70:   7%|▋         | 70/1000 [24:01<5:19:13, 20.60s/it][Succeeded / Failed / Skipped / Total] 5 / 65 / 0 / 70:   7%|▋         | 71/1000 [24:10<5:16:22, 20.43s/it][Succeeded / Failed / Skipped / Total] 5 / 66 / 0 / 71:   7%|▋         | 71/1000 [24:10<5:16:22, 20.43s/it][Succeeded / Failed / Skipped / Total] 5 / 66 / 0 / 71:   7%|▋         | 72/1000 [24:20<5:13:49, 20.29s/it][Succeeded / Failed / Skipped / Total] 6 / 66 / 0 / 72:   7%|▋         | 72/1000 [24:20<5:13:49, 20.29s/it][Succeeded / Failed / Skipped / Total] 6 / 66 / 0 / 72:   7%|▋         | 73/1000 [25:01<5:17:52, 20.57s/it][Succeeded / Failed / Skipped / Total] 7 / 66 / 0 / 73:   7%|▋         | 73/1000 [25:01<5:17:52, 20.57s/it][Succeeded / Failed / Skipped / Total] 7 / 66 / 0 / 73:   7%|▋         | 74/1000 [25:32<5:19:31, 20.70s/it][Succeeded / Failed / Skipped / Total] 7 / 67 / 0 / 74:   7%|▋         | 74/1000 [25:32<5:19:31, 20.70s/it][Succeeded / Failed / Skipped / Total] 7 / 67 / 0 / 74:   8%|▊         | 75/1000 [25:58<5:20:22, 20.78s/it][Succeeded / Failed / Skipped / Total] 7 / 68 / 0 / 75:   8%|▊         | 75/1000 [25:58<5:20:22, 20.78s/it][Succeeded / Failed / Skipped / Total] 7 / 68 / 0 / 75:   8%|▊         | 76/1000 [27:12<5:30:51, 21.48s/it]Observes the specified flowable on the specified scheduler.@param < T> the type parameter@param cf the flowable@param scheduler the scheduler@return the observable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > [[flowable]] = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[flowable]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[everyone]] ( final ConnectableFlowable < T > cf , final Scheduler [[fel]] ) { final Flowable < T > [[squashes]] = cf . observeOn ( [[fel]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[squashes]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the delay in milliseconds.@param amount the amount@param unit the unit --> [[[FAILED]]]

[[[[Adv]]]]: public void setDelay ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void setDelay ( long amount , TimeUnit [[addiction]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[scandalous]] = [[addiction]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 71 ---------------------------------------------
Adds a PublishDisposable to the list of subscribers. --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[summation]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 72 ---------------------------------------------
Performs version checks. --> and it --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[andit]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 73 ---------------------------------------------
Searches for a user with the specified username.@param username the username to search for.@return an instance of {@link DirContextOperations} for the specified username. --> W wanderers. --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[wanderers]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Encodes the supplied password. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[scrambles]] ( CharSequence [[loretta]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[loretta]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 75 ---------------------------------------------
Gets the spring version.@param properties the properties@return the spring version --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[posture]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 76 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 69 / 0 / 76:   8%|▊         | 76/1000 [27:12<5:30:51, 21.48s/it][Succeeded / Failed / Skipped / Total] 7 / 69 / 0 / 76:   8%|▊         | 77/1000 [27:13<5:26:17, 21.21s/it][Succeeded / Failed / Skipped / Total] 7 / 70 / 0 / 77:   8%|▊         | 77/1000 [27:13<5:26:17, 21.21s/it][Succeeded / Failed / Skipped / Total] 7 / 70 / 0 / 77:   8%|▊         | 78/1000 [27:21<5:23:23, 21.05s/it][Succeeded / Failed / Skipped / Total] 7 / 71 / 0 / 78:   8%|▊         | 78/1000 [27:21<5:23:23, 21.05s/it][Succeeded / Failed / Skipped / Total] 7 / 71 / 0 / 78:   8%|▊         | 79/1000 [27:22<5:19:04, 20.79s/it][Succeeded / Failed / Skipped / Total] 7 / 72 / 0 / 79:   8%|▊         | 79/1000 [27:22<5:19:04, 20.79s/it][Succeeded / Failed / Skipped / Total] 7 / 72 / 0 / 79:   8%|▊         | 80/1000 [27:37<5:17:40, 20.72s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 0 / 80:   8%|▊         | 80/1000 [27:37<5:17:40, 20.72s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 0 / 80:   8%|▊         | 81/1000 [28:20<5:21:35, 21.00s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 0 / 81:   8%|▊         | 81/1000 [28:20<5:21:35, 21.00s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 0 / 81:   8%|▊         | 82/1000 [28:25<5:18:10, 20.80s/it][Succeeded / Failed / Skipped / Total] 8 / 74 / 0 / 82:   8%|▊         | 82/1000 [28:25<5:18:10, 20.80s/it][Succeeded / Failed / Skipped / Total] 8 / 74 / 0 / 82:   8%|▊         | 83/1000 [29:11<5:22:28, 21.10s/it][Succeeded / Failed / Skipped / Total] 8 / 75 / 0 / 83:   8%|▊         | 83/1000 [29:11<5:22:28, 21.10s/it][Succeeded / Failed / Skipped / Total] 8 / 75 / 0 / 83:   8%|▊         | 84/1000 [29:30<5:21:47, 21.08s/it]Create a new OAuth2ClientConfigurer.@return a new OAuth2ClientConfigurer@throws Exception if an error occurs --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[dissertation]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 77 ---------------------------------------------
Checks if the given password matches the given encoded password. --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[sets]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 78 ---------------------------------------------
Determines whether or not checks should be disabled. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[footballing]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[Dignified]]" == "[[Dignified]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 79 ---------------------------------------------
Registers an attribute exchange configurer for the given identifier pattern. --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . [[attributeExchangeConfigurers]] . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[howie]] ( String [[progressively]] ) { AttributeExchangeConfigurer [[ailey]] = new AttributeExchangeConfigurer ( [[progressively]] ) ; this . [[biatch]] . add ( [[ailey]] ) ; return [[ailey]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 80 ---------------------------------------------
Configures an OAuth2 resource server.@param <HttpSecurity> the security type@return the configurer@throws Exception the exception --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[everyone]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
Returns a channel security configurer for this request. --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[courtesies]] ( ) throws Exception { ApplicationContext [[genesis]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[genesis]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Retrieves an entry from the LDAP server. --> Performs a "fordfordfordfordfordfordfordfordfordfordfordfordfordford --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[coward]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 83 ---------------------------------------------
Builds up the search controls. --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[escape]] ( SearchControls [[howell]] ) { return new SearchControls ( [[howell]] . getSearchScope ( ) , [[howell]] . getCountLimit ( ) , [[howell]] . getTimeLimit ( ) , [[howell]] . getReturningAttributes ( ) , RETURN_OBJECT , [[howell]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 84 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 76 / 0 / 84:   8%|▊         | 84/1000 [29:30<5:21:47, 21.08s/it][Succeeded / Failed / Skipped / Total] 8 / 76 / 0 / 84:   8%|▊         | 85/1000 [29:58<5:22:42, 21.16s/it][Succeeded / Failed / Skipped / Total] 9 / 76 / 0 / 85:   8%|▊         | 85/1000 [29:58<5:22:42, 21.16s/it][Succeeded / Failed / Skipped / Total] 9 / 76 / 0 / 85:   9%|▊         | 86/1000 [30:54<5:28:33, 21.57s/it][Succeeded / Failed / Skipped / Total] 9 / 77 / 0 / 86:   9%|▊         | 86/1000 [30:54<5:28:33, 21.57s/it][Succeeded / Failed / Skipped / Total] 9 / 77 / 0 / 86:   9%|▊         | 87/1000 [31:15<5:28:05, 21.56s/it][Succeeded / Failed / Skipped / Total] 10 / 77 / 0 / 87:   9%|▊         | 87/1000 [31:15<5:28:05, 21.56s/it][Succeeded / Failed / Skipped / Total] 10 / 77 / 0 / 87:   9%|▉         | 88/1000 [32:07<5:32:55, 21.90s/it]Try to subscribe to a scalar map.@param < T> the type parameter@param < R> the type parameter@param source the source@param observer the observer@param mapper the mapper@return true, if successful --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[perspire]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[ly]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Genuinely]]" == "[[Genuinely]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[Genuinely]]" == "[[Genuinely]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[ly]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Genuinely]]" == "[[Genuinely]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Genuinely]]" == "[[Genuinely]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[Genuinely]]" == "[[Genuinely]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[Genuinely]]" == "[[Genuinely]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 85 ---------------------------------------------
Lookup a set of primary keys.@param acls@param findNow@param sids --> zoltan --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[zoltan]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 86 ---------------------------------------------
Search for multiple attribute values.@param base the base@param filter the filter@param params the params@param attributeNames the attribute names@return the set --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[persimmon]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 87 ---------------------------------------------
Creates the servlet api filter. --> Registers an authentication manager with this application. --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[geek]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 78 / 0 / 88:   9%|▉         | 88/1000 [32:07<5:32:55, 21.90s/it][Succeeded / Failed / Skipped / Total] 10 / 78 / 0 / 88:   9%|▉         | 89/1000 [32:30<5:32:50, 21.92s/it][Succeeded / Failed / Skipped / Total] 11 / 78 / 0 / 89:   9%|▉         | 89/1000 [32:30<5:32:50, 21.92s/it][Succeeded / Failed / Skipped / Total] 11 / 78 / 0 / 89:   9%|▉         | 90/1000 [32:53<5:32:38, 21.93s/it][Succeeded / Failed / Skipped / Total] 12 / 78 / 0 / 90:   9%|▉         | 90/1000 [32:53<5:32:38, 21.93s/it][Succeeded / Failed / Skipped / Total] 12 / 78 / 0 / 90:   9%|▉         | 91/1000 [33:16<5:32:21, 21.94s/it]Parses the response annotations. --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[pinprick]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 89 ---------------------------------------------
Search for a single entry under the given base and filter. --> Creates a DirContextOperations object from the supplied SearchControls@param ctx@param searchControls@param base@param specimen@param reparations@return@throws NamingException --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String [[filter]] , Object [ ] [[params]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[filter]] , [[params]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[filter]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[dca]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[dca]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[dca]] . getDn ( ) ) ; } results . add ( [[dca]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[thinks]] ( DirContext ctx , SearchControls searchControls , String base , String [[specimen]] , Object [ ] [[reparations]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[specimen]] , [[reparations]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[specimen]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[audible]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[audible]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[audible]] . getDn ( ) ) ; } results . add ( [[audible]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 90 ---------------------------------------------
Creates and initializes the filter. --> SICCED --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[sicced]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 79 / 0 / 91:   9%|▉         | 91/1000 [33:16<5:32:21, 21.94s/it][Succeeded / Failed / Skipped / Total] 12 / 79 / 0 / 91:   9%|▉         | 92/1000 [33:42<5:32:38, 21.98s/it][Succeeded / Failed / Skipped / Total] 12 / 80 / 0 / 92:   9%|▉         | 92/1000 [33:42<5:32:38, 21.98s/it][Succeeded / Failed / Skipped / Total] 12 / 80 / 0 / 92:   9%|▉         | 93/1000 [33:58<5:31:16, 21.91s/it][Succeeded / Failed / Skipped / Total] 13 / 80 / 0 / 93:   9%|▉         | 93/1000 [33:58<5:31:16, 21.91s/it][Succeeded / Failed / Skipped / Total] 13 / 80 / 0 / 93:   9%|▉         | 94/1000 [34:21<5:31:08, 21.93s/it][Succeeded / Failed / Skipped / Total] 13 / 81 / 0 / 94:   9%|▉         | 94/1000 [34:21<5:31:08, 21.93s/it][Succeeded / Failed / Skipped / Total] 13 / 81 / 0 / 94:  10%|▉         | 95/1000 [34:31<5:28:49, 21.80s/it]Builds a pre-authenticated web authentication details. --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buggy]] ( HttpServletRequest [[provenance]] ) { Collection < String > [[conspirators]] = getUserRoles ( [[provenance]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[conspirators]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[conspirators]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[concluding]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[provenance]] , userGas ) ; return [[concluding]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 92 ---------------------------------------------
Creates a default type resolver builder. --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[conceding]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[conquest]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[conquest]] = [[conquest]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[conquest]] = [[conquest]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[conquest]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
Registers a spring security filter chain. --> Creates a delegating filter chain. --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[[True]]" == "[[True]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[[Factual]]" == "[[Factual]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 94 ---------------------------------------------
Called after properties have been set. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[hustling]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 95 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 82 / 0 / 95:  10%|▉         | 95/1000 [34:31<5:28:49, 21.80s/it][Succeeded / Failed / Skipped / Total] 13 / 82 / 0 / 95:  10%|▉         | 96/1000 [34:33<5:25:25, 21.60s/it][Succeeded / Failed / Skipped / Total] 13 / 83 / 0 / 96:  10%|▉         | 96/1000 [34:33<5:25:25, 21.60s/it][Succeeded / Failed / Skipped / Total] 13 / 83 / 0 / 96:  10%|▉         | 97/1000 [34:40<5:22:44, 21.44s/it][Succeeded / Failed / Skipped / Total] 13 / 84 / 0 / 97:  10%|▉         | 97/1000 [34:40<5:22:44, 21.44s/it][Succeeded / Failed / Skipped / Total] 13 / 84 / 0 / 97:  10%|▉         | 98/1000 [35:51<5:29:58, 21.95s/it][Succeeded / Failed / Skipped / Total] 13 / 85 / 0 / 98:  10%|▉         | 98/1000 [35:51<5:29:58, 21.95s/it][Succeeded / Failed / Skipped / Total] 13 / 85 / 0 / 98:  10%|▉         | 99/1000 [36:11<5:29:26, 21.94s/it]Creates an embedded server. --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[medicine]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 96 ---------------------------------------------
Creates a new instance of the given encryption algorithm. --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[cholla]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
Search for attribute values that match the supplied filter.@param base@param filter@param params@param attributeName@return --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String [[base]] , final String [[filter]] , final Object [ ] params , final String [[attributeName]] ) { String [ ] attributeNames = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , [[filter]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[tweeting]] ( final String [[reasoned]] , final String [[sneaked]] , final Object [ ] params , final String [[greaseball]] ) { String [ ] attributeNames = new String [ ] { [[greaseball]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[reasoned]] , [[sneaked]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[greaseball]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 98 ---------------------------------------------
Returns a list of all authorities for the specified attributes. --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attaches]] ) { List < GrantedAuthority > [[resulted]] = new ArrayList <> ( [[attaches]] . size ( ) ) ; for ( String attribute : [[attaches]] ) { [[resulted]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[resulted]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
[Succeeded / Failed / Skipped / Total] 13 / 86 / 0 / 99:  10%|▉         | 99/1000 [36:11<5:29:26, 21.94s/it][Succeeded / Failed / Skipped / Total] 13 / 86 / 0 / 99:  10%|█         | 100/1000 [36:31<5:28:40, 21.91s/it][Succeeded / Failed / Skipped / Total] 13 / 87 / 0 / 100:  10%|█         | 100/1000 [36:31<5:28:40, 21.91s/it][Succeeded / Failed / Skipped / Total] 13 / 87 / 0 / 100:  10%|█         | 101/1000 [37:00<5:29:23, 21.98s/it][Succeeded / Failed / Skipped / Total] 13 / 88 / 0 / 101:  10%|█         | 101/1000 [37:00<5:29:23, 21.98s/it][Succeeded / Failed / Skipped / Total] 13 / 88 / 0 / 101:  10%|█         | 102/1000 [37:04<5:26:24, 21.81s/it][Succeeded / Failed / Skipped / Total] 13 / 89 / 0 / 102:  10%|█         | 102/1000 [37:04<5:26:24, 21.81s/it][Succeeded / Failed / Skipped / Total] 13 / 89 / 0 / 102:  10%|█         | 103/1000 [37:31<5:26:44, 21.86s/it]--------------------------------------------- Result 99 ---------------------------------------------
Retrieves the persistent token for a series.@param seriesId@return --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[gleamed]] ( String [[attach]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[al]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[al]] . getString ( 1 ) , [[al]] . getString ( 2 ) , [[al]] . getString ( 3 ) , [[al]] . getTimestamp ( 4 ) ) ; } } , [[attach]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[attach]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[attach]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[attach]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Checks the content length of the response. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[ezekiel]] ( long [[airspace]] ) { this . contentWritten += [[airspace]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 101 ---------------------------------------------
Performs a filter on the supplied request. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[caviar]] ( ServletRequest [[pray]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[pray]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[pray]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[pray]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Updates the default authentication settings. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[tenor]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 103 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 90 / 0 / 103:  10%|█         | 103/1000 [37:31<5:26:44, 21.86s/it][Succeeded / Failed / Skipped / Total] 13 / 90 / 0 / 103:  10%|█         | 104/1000 [37:35<5:23:54, 21.69s/it][Succeeded / Failed / Skipped / Total] 13 / 91 / 0 / 104:  10%|█         | 104/1000 [37:35<5:23:54, 21.69s/it][Succeeded / Failed / Skipped / Total] 13 / 91 / 0 / 104:  10%|█         | 105/1000 [37:36<5:20:36, 21.49s/it][Succeeded / Failed / Skipped / Total] 13 / 92 / 0 / 105:  10%|█         | 105/1000 [37:36<5:20:36, 21.49s/it][Succeeded / Failed / Skipped / Total] 13 / 92 / 0 / 105:  11%|█         | 106/1000 [37:49<5:19:03, 21.41s/it][Succeeded / Failed / Skipped / Total] 13 / 93 / 0 / 106:  11%|█         | 106/1000 [37:49<5:19:03, 21.41s/it][Succeeded / Failed / Skipped / Total] 13 / 93 / 0 / 106:  11%|█         | 107/1000 [38:31<5:21:32, 21.60s/it][Succeeded / Failed / Skipped / Total] 13 / 94 / 0 / 107:  11%|█         | 107/1000 [38:31<5:21:32, 21.60s/it][Succeeded / Failed / Skipped / Total] 13 / 94 / 0 / 107:  11%|█         | 108/1000 [38:36<5:18:51, 21.45s/it]Compare two LDAP attributes.@param dn@param attributeName@param value@return --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String [[attributeName]] , final Object [[value]] ) { final String [[comparisonFilter]] = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , [[comparisonFilter]] , new Object [ ] { [[value]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[comparative]] ( final String dn , final String [[waking]] , final Object [[prominence]] ) { final String [[madison]] = "(" + [[waking]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , [[madison]] , new Object [ ] { [[prominence]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 104 ---------------------------------------------
Updates the default access settings. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[indistinguishable]] ( B [[archive]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[archive]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 105 ---------------------------------------------
Sets the login processing URL. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[trader]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[trader]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[trader]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 106 ---------------------------------------------
Maps a password value to a string. --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[finest]] ) { if ( ! ( [[finest]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
Performs a pre-authenticated authentication. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[darpa]] ( HttpServletRequest [[appealed]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[appealed]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[appealed]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[appealed]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[appealed]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[appealed]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 108 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 95 / 0 / 108:  11%|█         | 108/1000 [38:36<5:18:51, 21.45s/it][Succeeded / Failed / Skipped / Total] 13 / 95 / 0 / 108:  11%|█         | 109/1000 [38:49<5:17:18, 21.37s/it][Succeeded / Failed / Skipped / Total] 13 / 96 / 0 / 109:  11%|█         | 109/1000 [38:49<5:17:18, 21.37s/it][Succeeded / Failed / Skipped / Total] 13 / 96 / 0 / 109:  11%|█         | 110/1000 [39:59<5:23:37, 21.82s/it][Succeeded / Failed / Skipped / Total] 13 / 97 / 0 / 110:  11%|█         | 110/1000 [39:59<5:23:37, 21.82s/it][Succeeded / Failed / Skipped / Total] 13 / 97 / 0 / 110:  11%|█         | 111/1000 [40:05<5:21:05, 21.67s/it][Succeeded / Failed / Skipped / Total] 13 / 98 / 0 / 111:  11%|█         | 111/1000 [40:05<5:21:05, 21.67s/it][Succeeded / Failed / Skipped / Total] 13 / 98 / 0 / 111:  11%|█         | 112/1000 [40:08<5:18:18, 21.51s/it][Succeeded / Failed / Skipped / Total] 13 / 99 / 0 / 112:  11%|█         | 112/1000 [40:08<5:18:18, 21.51s/it][Succeeded / Failed / Skipped / Total] 13 / 99 / 0 / 112:  11%|█▏        | 113/1000 [41:29<5:25:42, 22.03s/it]Maps the supplied authorities to their respective authorities. --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[compress]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[given]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[administration]] : authorities ) { [[given]] . add ( mapAuthority ( [[administration]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[given]] . add ( defaultAuthority ) ; } return [[given]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
Determines whether or not the specified principal has changed. --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication [[currentAuthentication]] ) { Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( [[principal]] instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[giotto]] ( HttpServletRequest [[motions]] , Authentication [[spaced]] ) { Object [[important]] = getPreAuthenticatedPrincipal ( [[motions]] ) ; if ( ( [[important]] instanceof String ) && [[spaced]] . getName ( ) . equals ( [[important]] ) ) { return "False" != "False" ; } if ( [[important]] != null && [[important]] . equals ( [[spaced]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[important]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 110 ---------------------------------------------
Returns the port of the given service URL. --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[chrysanthemum]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 111 ---------------------------------------------
Extracts the remember-me cookie from the request. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[kopecks]] ( HttpServletRequest [[wondered]] ) { Cookie [ ] cookies = [[wondered]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 112 ---------------------------------------------
Encodes the given cookie tokens into a Base64 encoded string. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] [[cookieTokens]] ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[capacitor]] ( String [ ] [[valued]] ) { StringBuilder [[louisiana]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[valued]] . length ; i ++ ) { try { [[louisiana]] . append ( URLEncoder . encode ( [[valued]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[valued]] . length - 1 ) { [[louisiana]] . append ( DELIMITER ) ; } } String value = [[louisiana]] . toString ( ) ; [[louisiana]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[louisiana]] . charAt ( [[louisiana]] . length ( ) - 1 ) == ' ' ) { [[louisiana]] . deleteCharAt ( [[louisiana]] . length ( ) - 1 ) ; } return [[louisiana]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 100 / 0 / 113:  11%|█▏        | 113/1000 [41:29<5:25:42, 22.03s/it][Succeeded / Failed / Skipped / Total] 13 / 100 / 0 / 113:  11%|█▏        | 114/1000 [42:22<5:29:18, 22.30s/it][Succeeded / Failed / Skipped / Total] 13 / 101 / 0 / 114:  11%|█▏        | 114/1000 [42:22<5:29:18, 22.30s/it][Succeeded / Failed / Skipped / Total] 13 / 101 / 0 / 114:  12%|█▏        | 115/1000 [42:26<5:26:35, 22.14s/it][Succeeded / Failed / Skipped / Total] 14 / 101 / 0 / 115:  12%|█▏        | 115/1000 [42:26<5:26:35, 22.14s/it][Succeeded / Failed / Skipped / Total] 14 / 101 / 0 / 115:  12%|█▏        | 116/1000 [42:29<5:23:51, 21.98s/it][Succeeded / Failed / Skipped / Total] 14 / 102 / 0 / 116:  12%|█▏        | 116/1000 [42:29<5:23:51, 21.98s/it][Succeeded / Failed / Skipped / Total] 14 / 102 / 0 / 116:  12%|█▏        | 117/1000 [42:35<5:21:27, 21.84s/it][Succeeded / Failed / Skipped / Total] 14 / 103 / 0 / 117:  12%|█▏        | 117/1000 [42:35<5:21:27, 21.84s/it][Succeeded / Failed / Skipped / Total] 14 / 103 / 0 / 117:  12%|█▏        | 118/1000 [42:56<5:21:00, 21.84s/it][Succeeded / Failed / Skipped / Total] 14 / 104 / 0 / 118:  12%|█▏        | 118/1000 [42:56<5:21:00, 21.84s/it][Succeeded / Failed / Skipped / Total] 14 / 104 / 0 / 118:  12%|█▏        | 119/1000 [43:02<5:18:39, 21.70s/it]Resolve the security context for the given parameter. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter [[parameter]] , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? o : Mono . just ( [[adapter]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[helplessly]] ( MethodParameter [[setting]] , BindingContext [[lethal]] , ServerWebExchange exchange ) { ReactiveAdapter [[accessory]] = getAdapterRegistry ( ) . getAdapter ( [[setting]] . getParameterType ( ) ) ; Mono < SecurityContext > [[chickened]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[chickened]] == null ) { return null ; } return [[chickened]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[setting]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[accessory]] == null ? o : Mono . just ( [[accessory]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 114 ---------------------------------------------
Sets the cookie. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] [[tokens]] , int maxAge , HttpServletRequest [[request]] , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( [[tokens]] ) ; Cookie cookie = new Cookie ( cookieName , [[cookieValue]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[request]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[request]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[overcoat]] ( String [ ] [[chip]] , int maxAge , HttpServletRequest [[call]] , HttpServletResponse response ) { String [[electrodes]] = encodeCookie ( [[chip]] ) ; Cookie cookie = new Cookie ( cookieName , [[electrodes]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[call]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[call]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
Sets the context environment properties.@param environment the context environment properties --> SOPRANO WORLD --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[soprano]] ( Map < String , Object > [[countryside]] ) { Assert . notEmpty ( [[countryside]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[countryside]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 116 ---------------------------------------------
Returns the LDAP principal for the supplied authentication object. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[badly]] ( ) { Authentication [[validate]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[validate]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[salient]] = [[validate]] . getPrincipal ( ) ; if ( [[salient]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[salient]] ; return details . getDn ( ) ; } else if ( [[validate]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 117 ---------------------------------------------
Gets the query string.@param request the request@param artifactPattern the artifact pattern@return the query string --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[reviewed]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[advising]] = request . getQueryString ( ) ; if ( [[advising]] == null ) { return null ; } final String [[suite]] = artifactPattern . matcher ( [[advising]] ) . replaceFirst ( "" ) ; if ( [[suite]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 118 ---------------------------------------------
End the page. --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[dukes]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
[Succeeded / Failed / Skipped / Total] 14 / 105 / 0 / 119:  12%|█▏        | 119/1000 [43:02<5:18:39, 21.70s/it][Succeeded / Failed / Skipped / Total] 14 / 105 / 0 / 119:  12%|█▏        | 120/1000 [43:26<5:18:31, 21.72s/it][Succeeded / Failed / Skipped / Total] 14 / 106 / 0 / 120:  12%|█▏        | 120/1000 [43:26<5:18:31, 21.72s/it][Succeeded / Failed / Skipped / Total] 14 / 106 / 0 / 120:  12%|█▏        | 121/1000 [43:29<5:15:54, 21.56s/it][Succeeded / Failed / Skipped / Total] 14 / 107 / 0 / 121:  12%|█▏        | 121/1000 [43:29<5:15:54, 21.56s/it][Succeeded / Failed / Skipped / Total] 14 / 107 / 0 / 121:  12%|█▏        | 122/1000 [43:51<5:15:36, 21.57s/it][Succeeded / Failed / Skipped / Total] 14 / 108 / 0 / 122:  12%|█▏        | 122/1000 [43:51<5:15:36, 21.57s/it][Succeeded / Failed / Skipped / Total] 14 / 108 / 0 / 122:  12%|█▏        | 123/1000 [43:51<5:12:43, 21.39s/it][Succeeded / Failed / Skipped / Total] 14 / 109 / 0 / 123:  12%|█▏        | 123/1000 [43:51<5:12:43, 21.39s/it][Succeeded / Failed / Skipped / Total] 14 / 109 / 0 / 123:  12%|█▏        | 124/1000 [44:47<5:16:27, 21.68s/it][Succeeded / Failed / Skipped / Total] 14 / 110 / 0 / 124:  12%|█▏        | 124/1000 [44:47<5:16:27, 21.68s/it][Succeeded / Failed / Skipped / Total] 14 / 110 / 0 / 124:  12%|█▎        | 125/1000 [44:57<5:14:45, 21.58s/it]--------------------------------------------- Result 119 ---------------------------------------------
Returns the fully-qualified URL to redirect to. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[lakewood]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
Authenticates the given authentication object. --> [[[FAILED]]]

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[vetted]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[demand]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[organisation]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 121 ---------------------------------------------
Gets the user details service. --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[distrust]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Logs out the given request and response. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[authentication]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[bernstein]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[approbation]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[galilei]] ( ) throws Exception { for ( UserDetailsBuilder [[anniversary]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[anniversary]] . build ( ) ) ; } for ( UserDetails [[rodrick]] : this . users ) { getUserDetailsService ( ) . createUser ( [[rodrick]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Builds the provider URL.@param urls the urls@param baseDn the base DN@return the provider URL --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[deepens]] ( List < String > [[spectator]] , String [[embezzle]] ) { Assert . notNull ( [[embezzle]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[spectator]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[embezzle]] . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[spectator]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 110 / 0 / 125:  12%|█▎        | 125/1000 [44:57<5:14:45, 21.58s/it][Succeeded / Failed / Skipped / Total] 15 / 110 / 0 / 125:  13%|█▎        | 126/1000 [44:58<5:11:55, 21.41s/it][Succeeded / Failed / Skipped / Total] 15 / 111 / 0 / 126:  13%|█▎        | 126/1000 [44:58<5:11:55, 21.41s/it][Succeeded / Failed / Skipped / Total] 15 / 111 / 0 / 126:  13%|█▎        | 127/1000 [45:19<5:11:31, 21.41s/it][Succeeded / Failed / Skipped / Total] 16 / 111 / 0 / 127:  13%|█▎        | 127/1000 [45:19<5:11:31, 21.41s/it][Succeeded / Failed / Skipped / Total] 16 / 111 / 0 / 127:  13%|█▎        | 128/1000 [46:00<5:13:28, 21.57s/it][Succeeded / Failed / Skipped / Total] 16 / 112 / 0 / 128:  13%|█▎        | 128/1000 [46:00<5:13:28, 21.57s/it][Succeeded / Failed / Skipped / Total] 16 / 112 / 0 / 128:  13%|█▎        | 129/1000 [46:25<5:13:30, 21.60s/it][Succeeded / Failed / Skipped / Total] 16 / 113 / 0 / 129:  13%|█▎        | 129/1000 [46:25<5:13:30, 21.60s/it][Succeeded / Failed / Skipped / Total] 16 / 113 / 0 / 129:  13%|█▎        | 130/1000 [46:28<5:11:01, 21.45s/it][Succeeded / Failed / Skipped / Total] 16 / 114 / 0 / 130:  13%|█▎        | 130/1000 [46:28<5:11:01, 21.45s/it][Succeeded / Failed / Skipped / Total] 16 / 114 / 0 / 130:  13%|█▎        | 131/1000 [46:49<5:10:36, 21.45s/it][Succeeded / Failed / Skipped / Total] 16 / 115 / 0 / 131:  13%|█▎        | 131/1000 [46:49<5:10:36, 21.45s/it][Succeeded / Failed / Skipped / Total] 16 / 115 / 0 / 131:  13%|█▎        | 132/1000 [47:02<5:09:22, 21.39s/it]Add Pkce parameters. --> Ssilberstein method --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[silberstein]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[hokkaido]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[hokkaido]] ) ; try { String codeChallenge = createCodeChallenge ( [[hokkaido]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[hokkaido]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 126 ---------------------------------------------
Returns true if the user is authenticated. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[licensed]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 127 ---------------------------------------------
URL-encode the given value. --> Encodes the given value. --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[abra]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 128 ---------------------------------------------
Returns true if the request matches the configured proxy request. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[bedpan]] ( final HttpServletRequest [[requisitions]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[requisitions]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 129 ---------------------------------------------
Checks if a service ticket request is required. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[kennington]] ( final HttpServletRequest [[applications]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[applications]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 130 ---------------------------------------------
Returns a collection of granted authorities for the current user. --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[doo]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 131 ---------------------------------------------
Creates a security expression root. --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[paradise]] ( Authentication [[reliability]] , MethodInvocation [[incantations]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[reliability]] ) ; root . setThis ( [[incantations]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
[Succeeded / Failed / Skipped / Total] 16 / 116 / 0 / 132:  13%|█▎        | 132/1000 [47:02<5:09:22, 21.39s/it][Succeeded / Failed / Skipped / Total] 16 / 116 / 0 / 132:  13%|█▎        | 133/1000 [47:31<5:09:47, 21.44s/it][Succeeded / Failed / Skipped / Total] 16 / 117 / 0 / 133:  13%|█▎        | 133/1000 [47:31<5:09:47, 21.44s/it][Succeeded / Failed / Skipped / Total] 16 / 117 / 0 / 133:  13%|█▎        | 134/1000 [48:02<5:10:30, 21.51s/it][Succeeded / Failed / Skipped / Total] 16 / 118 / 0 / 134:  13%|█▎        | 134/1000 [48:02<5:10:30, 21.51s/it][Succeeded / Failed / Skipped / Total] 16 / 118 / 0 / 134:  14%|█▎        | 135/1000 [48:04<5:08:00, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 119 / 0 / 135:  14%|█▎        | 135/1000 [48:04<5:08:00, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 119 / 0 / 135:  14%|█▎        | 136/1000 [49:16<5:12:59, 21.74s/it][Succeeded / Failed / Skipped / Total] 16 / 120 / 0 / 136:  14%|█▎        | 136/1000 [49:16<5:12:59, 21.74s/it][Succeeded / Failed / Skipped / Total] 16 / 120 / 0 / 136:  14%|█▎        | 137/1000 [49:31<5:11:57, 21.69s/it][Succeeded / Failed / Skipped / Total] 16 / 121 / 0 / 137:  14%|█▎        | 137/1000 [49:31<5:11:57, 21.69s/it][Succeeded / Failed / Skipped / Total] 16 / 121 / 0 / 137:  14%|█▍        | 138/1000 [49:32<5:09:24, 21.54s/it][Succeeded / Failed / Skipped / Total] 16 / 122 / 0 / 138:  14%|█▍        | 138/1000 [49:32<5:09:24, 21.54s/it][Succeeded / Failed / Skipped / Total] 16 / 122 / 0 / 138:  14%|█▍        | 139/1000 [49:35<5:07:08, 21.40s/it]--------------------------------------------- Result 132 ---------------------------------------------
Determines if the request requires authentication.@param request the servlet request@param response the servlet response@return true if the request requires authentication --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( [[request]] , [[response]] ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[enabling]] ( final HttpServletRequest [[requiring]] , final HttpServletResponse [[reacting]] ) { final boolean [[comforting]] = [[comforting]] ( [[requiring]] , [[reacting]] ) ; final boolean result = [[comforting]] || proxyReceptorRequest ( [[requiring]] ) || ( proxyTicketRequest ( [[comforting]] , [[requiring]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 133 ---------------------------------------------
Load user by assertion.@param assertion the assertion@return the user details --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . [[authenticationUserDetailsService]] . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[clause]] ( final Assertion [[argue]] ) { final CasAssertionAuthenticationToken [[microchip]] = new CasAssertionAuthenticationToken ( [[argue]] , "" ) ; return this . [[spanning]] . loadUserDetails ( [[microchip]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 134 ---------------------------------------------
Retrieves a single JWK set. --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[boland]] ( ) { return this . [[buggered]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 135 ---------------------------------------------
Gets the pre-authenticated principal. --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[disagreeing]] ( HttpServletRequest httpRequest ) { Object [[imperative]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[imperative]] ) ; } return [[imperative]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 136 ---------------------------------------------
Adds a collection of granted authorities to the supplied value. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[medicine]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[medicine]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[medicine]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[medicine]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 137 ---------------------------------------------
Returns a collection of authorities for the supplied object. --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[murakami]] ( Object [[appreciated]] ) { Collection < GrantedAuthority > [[reverberations]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[reverberations]] , [[appreciated]] ) ; return [[reverberations]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 138 ---------------------------------------------
Concatenates the given arrays.@param arrays the arrays to concatenate.@return the resulting array. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] array : [[arrays]] ) { [[length]] += array . length ; } byte [ ] [[newArray]] = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[perpetually]] ( byte [ ] ... [[range]] ) { int [[schedules]] = 0 ; for ( byte [ ] array : [[range]] ) { [[schedules]] += array . length ; } byte [ ] [[pothole]] = new byte [ [[schedules]] ] ; int destPos = 0 ; for ( byte [ ] array : [[range]] ) { System . arraycopy ( array , 0 , [[pothole]] , destPos , array . length ) ; destPos += array . length ; } return [[pothole]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
[Succeeded / Failed / Skipped / Total] 16 / 123 / 0 / 139:  14%|█▍        | 139/1000 [49:35<5:07:08, 21.40s/it][Succeeded / Failed / Skipped / Total] 16 / 123 / 0 / 139:  14%|█▍        | 140/1000 [49:39<5:05:03, 21.28s/it][Succeeded / Failed / Skipped / Total] 16 / 124 / 0 / 140:  14%|█▍        | 140/1000 [49:39<5:05:03, 21.28s/it][Succeeded / Failed / Skipped / Total] 16 / 124 / 0 / 140:  14%|█▍        | 141/1000 [50:23<5:06:59, 21.44s/it][Succeeded / Failed / Skipped / Total] 16 / 125 / 0 / 141:  14%|█▍        | 141/1000 [50:23<5:06:59, 21.44s/it][Succeeded / Failed / Skipped / Total] 16 / 125 / 0 / 141:  14%|█▍        | 142/1000 [50:32<5:05:22, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 126 / 0 / 142:  14%|█▍        | 142/1000 [50:32<5:05:22, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 126 / 0 / 142:  14%|█▍        | 143/1000 [50:38<5:03:27, 21.25s/it][Succeeded / Failed / Skipped / Total] 16 / 127 / 0 / 143:  14%|█▍        | 143/1000 [50:38<5:03:27, 21.25s/it][Succeeded / Failed / Skipped / Total] 16 / 127 / 0 / 143:  14%|█▍        | 144/1000 [50:49<5:02:06, 21.18s/it][Succeeded / Failed / Skipped / Total] 16 / 128 / 0 / 144:  14%|█▍        | 144/1000 [50:49<5:02:06, 21.18s/it][Succeeded / Failed / Skipped / Total] 16 / 128 / 0 / 144:  14%|█▍        | 145/1000 [51:37<5:04:25, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 129 / 0 / 145:  14%|█▍        | 145/1000 [51:37<5:04:25, 21.36s/it][Succeeded / Failed / Skipped / Total] 16 / 129 / 0 / 145:  15%|█▍        | 146/1000 [52:31<5:07:11, 21.58s/it]--------------------------------------------- Result 139 ---------------------------------------------
Pre-process a map of authorities.@param orgMap the map to pre-process@return the pre-processed map --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[pitcher]] ) { Map < String , Collection < GrantedAuthority > > [[conclusion]] = new HashMap < String , Collection < GrantedAuthority > > ( [[pitcher]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[pitcher]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[conclusion]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[conclusion]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 140 ---------------------------------------------
Determines if the proxy ticket request should be performed.@param serviceTicketRequest <code>true</code> if the proxy ticket request should be performed, <code>false</code> otherwise.@return <code>true</code> if the proxy ticket request should be performed, <code>false</code> otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest [[request]] ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( [[request]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest [[urge]] ) { if ( serviceTicketRequest ) { return "[[Fallacious]]" != "[[Fallacious]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( [[urge]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 141 ---------------------------------------------
Returns a list of all authorities for the specified attributes. --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[romantically]] ( Collection < String > [[peculiarity]] ) { ArrayList < GrantedAuthority > [[pascal]] = new ArrayList <> ( ) ; for ( String attribute : [[peculiarity]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[pascal]] . addAll ( c ) ; } } [[pascal]] . trimToSize ( ) ; return [[pascal]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Checks if the given role starts with ROLE_. --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[smiled]] ( String [[mission]] ) { Assert . isTrue ( ! [[mission]] . startsWith ( "ROLE_" ) , ( ) -> [[mission]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[mission]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the shared object for the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[chap]] > [[chap]] getSharedObject ( Class < [[chap]] > sharedType ) { return ( [[chap]] ) this . [[redemption]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Gets the pre-authenticated principal. --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[valued]] ( HttpServletRequest [[economists]] ) { Object [[essentials]] = [[economists]] . getUserPrincipal ( ) == null ? null : [[economists]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[essentials]] ) ; } return [[essentials]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Returns an array of Strings representing the roles of the current user. --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[clones]] ( String ... [[attribute]] ) { for ( int [[vous]] = 0 ; [[vous]] < [[attribute]] . length ; [[vous]] ++ ) { [[attribute]] [ [[vous]] ] = "ROLE_" + [[attribute]] [ [[vous]] ] ; } return [[attribute]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 130 / 0 / 146:  15%|█▍        | 146/1000 [52:31<5:07:11, 21.58s/it][Succeeded / Failed / Skipped / Total] 16 / 130 / 0 / 146:  15%|█▍        | 147/1000 [52:48<5:06:23, 21.55s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 147/1000 [52:48<5:06:23, 21.55s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 148/1000 [52:59<5:05:05, 21.49s/it][Succeeded / Failed / Skipped / Total] 16 / 132 / 0 / 148:  15%|█▍        | 148/1000 [52:59<5:05:05, 21.49s/it][Succeeded / Failed / Skipped / Total] 16 / 132 / 0 / 148:  15%|█▍        | 149/1000 [53:01<5:02:48, 21.35s/it][Succeeded / Failed / Skipped / Total] 16 / 133 / 0 / 149:  15%|█▍        | 149/1000 [53:01<5:02:48, 21.35s/it][Succeeded / Failed / Skipped / Total] 16 / 133 / 0 / 149:  15%|█▌        | 150/1000 [53:10<5:01:21, 21.27s/it][Succeeded / Failed / Skipped / Total] 17 / 133 / 0 / 150:  15%|█▌        | 150/1000 [53:10<5:01:21, 21.27s/it][Succeeded / Failed / Skipped / Total] 17 / 133 / 0 / 150:  15%|█▌        | 151/1000 [53:17<4:59:36, 21.17s/it][Succeeded / Failed / Skipped / Total] 17 / 134 / 0 / 151:  15%|█▌        | 151/1000 [53:17<4:59:36, 21.17s/it][Succeeded / Failed / Skipped / Total] 17 / 134 / 0 / 151:  15%|█▌        | 152/1000 [53:50<5:00:24, 21.26s/it][Succeeded / Failed / Skipped / Total] 17 / 135 / 0 / 152:  15%|█▌        | 152/1000 [53:50<5:00:24, 21.26s/it][Succeeded / Failed / Skipped / Total] 17 / 135 / 0 / 152:  15%|█▌        | 153/1000 [54:19<5:00:45, 21.31s/it]Creates a subarray from an array of bytes. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int beginIndex , int [[endIndex]] ) { int [[length]] = [[endIndex]] - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( [[array]] , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[drinkie]] ( byte [ ] [[variety]] , int beginIndex , int [[soc]] ) { int [[dates]] = [[soc]] - beginIndex ; byte [ ] subarray = new byte [ [[dates]] ] ; System . arraycopy ( [[variety]] , beginIndex , subarray , 0 , [[dates]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 147 ---------------------------------------------
Invokes the specified JoinPoint. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[asserting]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 148 ---------------------------------------------
Attempt to exit the user. --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[deux]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 149 ---------------------------------------------
Called when the user login succeeded. --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[petition]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[yorkshire]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[yorkshire]] ) ; addCookie ( [[yorkshire]] , [[petition]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 150 ---------------------------------------------
Display a public index. --> Blabber a contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[blabbermouth]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 151 ---------------------------------------------
Builds the HttpsRedirectUrl for the given request. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[sabes]] ( HttpServletRequest [[appealed]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[appealed]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[appealed]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[appealed]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[appealed]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[appealed]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[appealed]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 152 ---------------------------------------------
Sets the URL that will be used to exit from the browser. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[prescribes]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 135 / 0 / 153:  15%|█▌        | 153/1000 [54:19<5:00:45, 21.31s/it][Succeeded / Failed / Skipped / Total] 18 / 135 / 0 / 153:  15%|█▌        | 154/1000 [54:34<4:59:50, 21.27s/it][Succeeded / Failed / Skipped / Total] 18 / 136 / 0 / 154:  15%|█▌        | 154/1000 [54:34<4:59:50, 21.27s/it][Succeeded / Failed / Skipped / Total] 18 / 136 / 0 / 154:  16%|█▌        | 155/1000 [54:41<4:58:09, 21.17s/it][Succeeded / Failed / Skipped / Total] 18 / 137 / 0 / 155:  16%|█▌        | 155/1000 [54:41<4:58:09, 21.17s/it][Succeeded / Failed / Skipped / Total] 18 / 137 / 0 / 155:  16%|█▌        | 156/1000 [55:16<4:59:02, 21.26s/it][Succeeded / Failed / Skipped / Total] 19 / 137 / 0 / 156:  16%|█▌        | 156/1000 [55:16<4:59:02, 21.26s/it][Succeeded / Failed / Skipped / Total] 19 / 137 / 0 / 156:  16%|█▌        | 157/1000 [55:42<4:59:07, 21.29s/it][Succeeded / Failed / Skipped / Total] 19 / 138 / 0 / 157:  16%|█▌        | 157/1000 [55:42<4:59:07, 21.29s/it][Succeeded / Failed / Skipped / Total] 19 / 138 / 0 / 157:  16%|█▌        | 158/1000 [55:45<4:57:06, 21.17s/it][Succeeded / Failed / Skipped / Total] 19 / 139 / 0 / 158:  16%|█▌        | 158/1000 [55:45<4:57:06, 21.17s/it][Succeeded / Failed / Skipped / Total] 19 / 139 / 0 / 158:  16%|█▌        | 159/1000 [56:14<4:57:30, 21.23s/it]Converts a jwt to a list of authorities. --> Returns all scopes that have been changed. --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[changed]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 154 ---------------------------------------------
Creates a spring security filter chain. --> [[[FAILED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[mahalo]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[stopper]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[stopper]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 155 ---------------------------------------------
Attempts to switch to the specified user. --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[overcoat]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 156 ---------------------------------------------
Generate a CSRF token. --> Overrides the default dalrymple implementation. --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . [[delegate]] . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[dalrymple]] ( HttpServletRequest [[appealed]] ) { return wrap ( [[appealed]] , this . [[mission]] . generateToken ( [[appealed]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 157 ---------------------------------------------
Check if the current user is allowed to access the given URL. --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[economists]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[economists]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 158 ---------------------------------------------
Decodes and validates the given token. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , [[jwt]] ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[deciphering]] ( String token ) throws JwtException { JWT [[porque]] = parse ( token ) ; if ( [[porque]] instanceof SignedJWT ) { Jwt [[sagar]] = createJwt ( token , [[porque]] ) ; return validateJwt ( [[sagar]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[porque]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 140 / 0 / 159:  16%|█▌        | 159/1000 [56:14<4:57:30, 21.23s/it][Succeeded / Failed / Skipped / Total] 19 / 140 / 0 / 159:  16%|█▌        | 160/1000 [56:17<4:55:34, 21.11s/it][Succeeded / Failed / Skipped / Total] 19 / 141 / 0 / 160:  16%|█▌        | 160/1000 [56:17<4:55:34, 21.11s/it][Succeeded / Failed / Skipped / Total] 19 / 141 / 0 / 160:  16%|█▌        | 161/1000 [56:40<4:55:20, 21.12s/it][Succeeded / Failed / Skipped / Total] 20 / 141 / 0 / 161:  16%|█▌        | 161/1000 [56:40<4:55:20, 21.12s/it][Succeeded / Failed / Skipped / Total] 20 / 141 / 0 / 161:  16%|█▌        | 162/1000 [56:54<4:54:23, 21.08s/it][Succeeded / Failed / Skipped / Total] 20 / 142 / 0 / 162:  16%|█▌        | 162/1000 [56:54<4:54:23, 21.08s/it][Succeeded / Failed / Skipped / Total] 20 / 142 / 0 / 162:  16%|█▋        | 163/1000 [57:18<4:54:17, 21.10s/it][Succeeded / Failed / Skipped / Total] 20 / 143 / 0 / 163:  16%|█▋        | 163/1000 [57:18<4:54:17, 21.10s/it][Succeeded / Failed / Skipped / Total] 20 / 143 / 0 / 163:  16%|█▋        | 164/1000 [57:29<4:53:03, 21.03s/it][Succeeded / Failed / Skipped / Total] 21 / 143 / 0 / 164:  16%|█▋        | 164/1000 [57:29<4:53:03, 21.03s/it][Succeeded / Failed / Skipped / Total] 21 / 143 / 0 / 164:  16%|█▋        | 165/1000 [57:46<4:52:21, 21.01s/it]Processes a series of tokens from an auto-login cookie.@param cookieTokens the tokens to process@param request the current HttpServletRequest@param response the current HttpServletResponse --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse [[response]] ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String presentedSeries = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[enabling]] ( String [ ] [[disillusion]] , HttpServletRequest request , HttpServletResponse [[react]] ) { if ( [[disillusion]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[disillusion]] ) + "'" ) ; } final String presentedSeries = [[disillusion]] [ 0 ] ; final String presentedToken = [[disillusion]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 160 ---------------------------------------------
Performs an authorization using the supplied access expression. --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[False]]" != "[[False]]" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[walcott]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[Impostor]]" != "[[Impostor]]" ; } SecurityExpressionHandler < FilterInvocation > [[cabbie]] = getExpressionHandler ( ) ; Expression [[aishwarya]] ; try { [[aishwarya]] = [[cabbie]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[aishwarya]] , createExpressionEvaluationContext ( [[cabbie]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 161 ---------------------------------------------
Returns the role with the given default prefix. --> Returns the hayley character in the given string --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[hayley]] ( String [[ahmed]] , String role ) { if ( role == null ) { return role ; } if ( [[ahmed]] == null || [[ahmed]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[ahmed]] ) ) { return role ; } return [[ahmed]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 162 ---------------------------------------------
Display the admin page. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[photographer]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[call]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[call]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[call]] ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 163 ---------------------------------------------
Creates an instance of UserDetailsResourceFactoryBean from the given string. --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[hacienda]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 164 ---------------------------------------------
Gets the attribute values for the specified attribute name.@param name the attribute name@return the attribute values for the specified attribute name --> Retrieves information about an applicant who is hitchhiking or not. --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[hitchhiking]] ( String [[appoint]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[appoint]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 165 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 144 / 0 / 165:  16%|█▋        | 165/1000 [57:46<4:52:21, 21.01s/it][Succeeded / Failed / Skipped / Total] 21 / 144 / 0 / 165:  17%|█▋        | 166/1000 [57:54<4:50:57, 20.93s/it][Succeeded / Failed / Skipped / Total] 21 / 145 / 0 / 166:  17%|█▋        | 166/1000 [57:54<4:50:57, 20.93s/it][Succeeded / Failed / Skipped / Total] 21 / 145 / 0 / 166:  17%|█▋        | 167/1000 [58:04<4:49:38, 20.86s/it][Succeeded / Failed / Skipped / Total] 21 / 146 / 0 / 167:  17%|█▋        | 167/1000 [58:04<4:49:38, 20.86s/it][Succeeded / Failed / Skipped / Total] 21 / 146 / 0 / 167:  17%|█▋        | 168/1000 [58:35<4:50:10, 20.93s/it][Succeeded / Failed / Skipped / Total] 21 / 147 / 0 / 168:  17%|█▋        | 168/1000 [58:35<4:50:10, 20.93s/it][Succeeded / Failed / Skipped / Total] 21 / 147 / 0 / 168:  17%|█▋        | 169/1000 [58:47<4:49:06, 20.87s/it][Succeeded / Failed / Skipped / Total] 21 / 148 / 0 / 169:  17%|█▋        | 169/1000 [58:47<4:49:06, 20.87s/it][Succeeded / Failed / Skipped / Total] 21 / 148 / 0 / 169:  17%|█▋        | 170/1000 [59:49<4:52:03, 21.11s/it][Succeeded / Failed / Skipped / Total] 21 / 149 / 0 / 170:  17%|█▋        | 170/1000 [59:49<4:52:03, 21.11s/it][Succeeded / Failed / Skipped / Total] 21 / 149 / 0 / 170:  17%|█▋        | 171/1000 [59:51<4:50:09, 21.00s/it]Display the addPermission page for a contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact [[contact]] = contactManager . getById ( [[contactId]] ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( [[contact]] ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[hitchhiked]] ( @ RequestParam ( "contactId" ) long [[beeline]] ) { Contact [[focal]] = contactManager . getById ( [[beeline]] ) ; AddPermission [[haggerty]] = new AddPermission ( ) ; [[haggerty]] . setContact ( [[focal]] ) ; Map < String , Object > [[diagrams]] = new HashMap <> ( ) ; [[diagrams]] . put ( "addPermission" , [[haggerty]] ) ; [[diagrams]] . put ( "recipients" , listRecipients ( ) ) ; [[diagrams]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[diagrams]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 166 ---------------------------------------------
Add a new permission. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[thereafter]] ( AddPermission [[spas]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[thereafter]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[thereafter]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[thereafter]] . getPermission ( ) ) ; try { contactManager . [[spas]] ( [[thereafter]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 167 ---------------------------------------------
Decodes the given bytes into a string. --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[chord]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[chord]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 168 ---------------------------------------------
Encodes the given string into a byte array. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[chord]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[chord]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 169 ---------------------------------------------
Returns the first attribute value for the supplied name. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[devilishly]] ( String [[nominating]] ) { List < String > [[concluding]] = getAttributeValues ( [[nominating]] ) ; if ( [[concluding]] . isEmpty ( ) ) { return null ; } else { return [[concluding]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 170 ---------------------------------------------
Add a new contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[detonates]] ( WebContact [[layout]] , BindingResult result ) { validator . validate ( [[layout]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[layout]] . getName ( ) , [[layout]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 149 / 0 / 171:  17%|█▋        | 171/1000 [59:51<4:50:09, 21.00s/it][Succeeded / Failed / Skipped / Total] 22 / 149 / 0 / 171:  17%|█▋        | 172/1000 [59:52<4:48:13, 20.89s/it][Succeeded / Failed / Skipped / Total] 22 / 150 / 0 / 172:  17%|█▋        | 172/1000 [59:52<4:48:13, 20.89s/it][Succeeded / Failed / Skipped / Total] 22 / 150 / 0 / 172:  17%|█▋        | 173/1000 [1:00:38<4:49:52, 21.03s/it][Succeeded / Failed / Skipped / Total] 22 / 151 / 0 / 173:  17%|█▋        | 173/1000 [1:00:38<4:49:52, 21.03s/it][Succeeded / Failed / Skipped / Total] 22 / 151 / 0 / 173:  17%|█▋        | 174/1000 [1:00:54<4:49:09, 21.00s/it][Succeeded / Failed / Skipped / Total] 22 / 152 / 0 / 174:  17%|█▋        | 174/1000 [1:00:54<4:49:09, 21.00s/it][Succeeded / Failed / Skipped / Total] 22 / 152 / 0 / 174:  18%|█▊        | 175/1000 [1:01:38<4:50:37, 21.14s/it][Succeeded / Failed / Skipped / Total] 22 / 153 / 0 / 175:  18%|█▊        | 175/1000 [1:01:38<4:50:37, 21.14s/it][Succeeded / Failed / Skipped / Total] 22 / 153 / 0 / 175:  18%|█▊        | 176/1000 [1:01:39<4:48:42, 21.02s/it][Succeeded / Failed / Skipped / Total] 22 / 154 / 0 / 176:  18%|█▊        | 176/1000 [1:01:39<4:48:42, 21.02s/it][Succeeded / Failed / Skipped / Total] 22 / 154 / 0 / 176:  18%|█▊        | 177/1000 [1:01:43<4:47:00, 20.92s/it][Succeeded / Failed / Skipped / Total] 23 / 154 / 0 / 177:  18%|█▊        | 177/1000 [1:01:43<4:47:00, 20.92s/it][Succeeded / Failed / Skipped / Total] 23 / 154 / 0 / 177:  18%|█▊        | 178/1000 [1:01:55<4:45:59, 20.88s/it]Returns a set of all the configured attributes. --> Plaything methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[plaything]] ( ) { Set < ConfigAttribute > [[accurately]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[aerosol]] : methodMap . values ( ) ) { [[accurately]] . addAll ( [[aerosol]] ) ; } return [[accurately]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 172 ---------------------------------------------
Adds a secure method.@param method the method@param attr the attr --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[cleanest]] ( RegisteredMethod [[means]] , List < ConfigAttribute > [[obituaries]] ) { Assert . notNull ( [[means]] , "RegisteredMethod required" ) ; Assert . notNull ( [[obituaries]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[means]] + "] with attributes [" + [[obituaries]] + "]" ) ; } this . [[assim]] . put ( [[means]] , [[obituaries]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 173 ---------------------------------------------
Finds all attributes of the specified target class. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[carrara]] ( Method [[manner]] , Class < ? > [[meyou]] ) { if ( [[meyou]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[manner]] , [[meyou]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 174 ---------------------------------------------
Checks if the method name matches the mapped name. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[reconsidered]] ( String [[commemorate]] , String [[guff]] ) { return ( [[guff]] . endsWith ( "*" ) && [[commemorate]] . startsWith ( [[guff]] . substring ( 0 , [[guff]] . length ( ) - 1 ) ) ) || ( [[guff]] . startsWith ( "*" ) && [[commemorate]] . endsWith ( [[guff]] . substring ( 1 , [[guff]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 175 ---------------------------------------------
Removes all authentication attributes from the session. --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[escapee]] ( HttpServletRequest request ) { HttpSession [[discussion]] = request . getSession ( "False" != "False" ) ; if ( [[discussion]] == null ) { return ; } [[discussion]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 176 ---------------------------------------------
Deletes a permission.@param contactId the contact id@param sid the sid@param mask the mask@return the model and view --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long [[contactId]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( [[contactId]] ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long [[rodrick]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[coordinated]] = contactManager . getById ( [[rodrick]] ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[coordinated]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[coordinated]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 177 ---------------------------------------------
Handles a bind exception. --> zena authentication mechanism --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[zena]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 154 / 0 / 178:  18%|█▊        | 178/1000 [1:01:55<4:45:59, 20.88s/it][Succeeded / Failed / Skipped / Total] 24 / 154 / 0 / 178:  18%|█▊        | 179/1000 [1:02:14<4:45:29, 20.86s/it][Succeeded / Failed / Skipped / Total] 24 / 155 / 0 / 179:  18%|█▊        | 179/1000 [1:02:14<4:45:29, 20.86s/it][Succeeded / Failed / Skipped / Total] 24 / 155 / 0 / 179:  18%|█▊        | 180/1000 [1:02:34<4:45:04, 20.86s/it][Succeeded / Failed / Skipped / Total] 25 / 155 / 0 / 180:  18%|█▊        | 180/1000 [1:02:34<4:45:04, 20.86s/it][Succeeded / Failed / Skipped / Total] 25 / 155 / 0 / 180:  18%|█▊        | 181/1000 [1:03:36<4:47:48, 21.08s/it][Succeeded / Failed / Skipped / Total] 25 / 156 / 0 / 181:  18%|█▊        | 181/1000 [1:03:36<4:47:48, 21.08s/it][Succeeded / Failed / Skipped / Total] 25 / 156 / 0 / 181:  18%|█▊        | 182/1000 [1:03:39<4:46:08, 20.99s/it][Succeeded / Failed / Skipped / Total] 25 / 157 / 0 / 182:  18%|█▊        | 182/1000 [1:03:39<4:46:08, 20.99s/it][Succeeded / Failed / Skipped / Total] 25 / 157 / 0 / 182:  18%|█▊        | 183/1000 [1:03:56<4:45:27, 20.96s/it][Succeeded / Failed / Skipped / Total] 25 / 158 / 0 / 183:  18%|█▊        | 183/1000 [1:03:56<4:45:27, 20.96s/it][Succeeded / Failed / Skipped / Total] 25 / 158 / 0 / 183:  18%|█▊        | 184/1000 [1:04:02<4:44:00, 20.88s/it][Succeeded / Failed / Skipped / Total] 25 / 159 / 0 / 184:  18%|█▊        | 184/1000 [1:04:02<4:44:00, 20.88s/it][Succeeded / Failed / Skipped / Total] 25 / 159 / 0 / 184:  18%|█▊        | 185/1000 [1:04:13<4:42:55, 20.83s/it]Configures this request with the specified configuration. --> Configures the cyber connection@param hokkaido@return --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[cyber]] ( ) { Assert . state ( ! this . [[hokkaido]] , "Can't configure anyRequest after itself" ) ; C [[scientists]] = requestMatchers ( ANY_REQUEST ) ; this . [[hokkaido]] = "[[Staunch]]" == "[[Staunch]]" ; return [[scientists]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact. --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[bolly]] ( ) { logger . debug ( "Returning random contact" ) ; Random [[buttonhole]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[buttonhole]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Checks the filter stack. --> Dumpling filters. --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[dumpling]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 181 ---------------------------------------------
Extracts the SHA prefix.@param encPass the pass@return the SHA prefix --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[redemption]] ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 182 ---------------------------------------------
Creates a redirect URL.@param serviceUrl the service url@return the redirect URL --> [[[FAILED]]]

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[geraldo]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[geraldo]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Creates a service URL. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[stall]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Lookup the parameter names for the given parameter. --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[parameterAnnotations]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < parameterCount ; [[i]] ++ ) { Annotation [ ] [[annotations]] = [[parameterAnnotations]] [ [[i]] ] ; String [[parameterName]] = findParameterName ( [[annotations]] ) ; if ( [[parameterName]] != null ) { found = "True" == "True" ; paramNames [ [[i]] ] = [[parameterName]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[amplify]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[finalise]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[finalise]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int [[johnson]] = 0 ; [[johnson]] < parameterCount ; [[johnson]] ++ ) { Annotation [ ] [[abandoning]] = [[finalise]] [ [[johnson]] ] ; String [[cheltenham]] = findParameterName ( [[abandoning]] ) ; if ( [[cheltenham]] != null ) { found = "True" == "True" ; paramNames [ [[johnson]] ] = [[cheltenham]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
[Succeeded / Failed / Skipped / Total] 25 / 160 / 0 / 185:  18%|█▊        | 185/1000 [1:04:13<4:42:55, 20.83s/it][Succeeded / Failed / Skipped / Total] 25 / 160 / 0 / 185:  19%|█▊        | 186/1000 [1:04:39<4:42:56, 20.86s/it][Succeeded / Failed / Skipped / Total] 25 / 161 / 0 / 186:  19%|█▊        | 186/1000 [1:04:39<4:42:56, 20.86s/it][Succeeded / Failed / Skipped / Total] 25 / 161 / 0 / 186:  19%|█▊        | 187/1000 [1:05:05<4:43:00, 20.89s/it][Succeeded / Failed / Skipped / Total] 25 / 162 / 0 / 187:  19%|█▊        | 187/1000 [1:05:05<4:43:00, 20.89s/it][Succeeded / Failed / Skipped / Total] 25 / 162 / 0 / 187:  19%|█▉        | 188/1000 [1:05:16<4:41:55, 20.83s/it][Succeeded / Failed / Skipped / Total] 25 / 163 / 0 / 188:  19%|█▉        | 188/1000 [1:05:16<4:41:55, 20.83s/it][Succeeded / Failed / Skipped / Total] 25 / 163 / 0 / 188:  19%|█▉        | 189/1000 [1:05:26<4:40:47, 20.77s/it][Succeeded / Failed / Skipped / Total] 26 / 163 / 0 / 189:  19%|█▉        | 189/1000 [1:05:26<4:40:47, 20.77s/it][Succeeded / Failed / Skipped / Total] 26 / 163 / 0 / 189:  19%|█▉        | 190/1000 [1:06:00<4:41:25, 20.85s/it][Succeeded / Failed / Skipped / Total] 26 / 164 / 0 / 190:  19%|█▉        | 190/1000 [1:06:00<4:41:25, 20.85s/it][Succeeded / Failed / Skipped / Total] 26 / 164 / 0 / 190:  19%|█▉        | 191/1000 [1:06:05<4:39:56, 20.76s/it][Succeeded / Failed / Skipped / Total] 27 / 164 / 0 / 191:  19%|█▉        | 191/1000 [1:06:05<4:39:56, 20.76s/it][Succeeded / Failed / Skipped / Total] 27 / 164 / 0 / 191:  19%|█▉        | 192/1000 [1:06:34<4:40:11, 20.81s/it]--------------------------------------------- Result 185 ---------------------------------------------
Get the list of registered types. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[sliced]] ( ) { Set < Class < ? extends Throwable > > [[deodorants]] = this . [[barclay]] . keySet ( ) ; return [[deodorants]] . toArray ( new Class [ [[deodorants]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 186 ---------------------------------------------
Retrieves the field with the specified name from the class.@param clazz the class to introspect@param fieldName the name of the field@return the field with the specified name@throws IllegalStateException if the field cannot be located --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[yanni]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 187 ---------------------------------------------
Sets the default failure URL.@param defaultFailureUrl the default failure URL --> [[[FAILED]]]

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 188 ---------------------------------------------
Performs a pre-authenticated login. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[undertake]] ( HttpServletRequest request , HttpServletResponse [[reacting]] , AuthenticationException [[recieve]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[reacting]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 189 ---------------------------------------------
Compares two byte arrays for equality. --> Checks if the two byte arrays are the same length@param planned@param actual@return --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { result |= [[expected]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[mating]] ( byte [ ] [[planned]] , byte [ ] actual ) { if ( [[planned]] . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < [[planned]] . length ; i ++ ) { result |= [[planned]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the hidden input map for the current request.@param resolveHiddenInputs the hidden input map --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[portcullis]] ( Function < HttpServletRequest , Map < String , String > > [[iving]] ) { Assert . notNull ( [[iving]] , "resolveHiddenInputs cannot be null" ) ; this . [[affraid]] = [[iving]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 191 ---------------------------------------------
Builds the request URL.@param servletPath the servlet path@param requestURI the request URI@param contextPath the context path@param pathInfo the path info@param queryString the query string@return the request URL --> Convert a servlet path to a antonella path@param servletPath@param requestURI@param contextPath@param pathInfo@param queryString@return --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[antonella]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 165 / 0 / 192:  19%|█▉        | 192/1000 [1:06:34<4:40:11, 20.81s/it][Succeeded / Failed / Skipped / Total] 27 / 165 / 0 / 192:  19%|█▉        | 193/1000 [1:06:50<4:39:27, 20.78s/it][Succeeded / Failed / Skipped / Total] 27 / 166 / 0 / 193:  19%|█▉        | 193/1000 [1:06:50<4:39:27, 20.78s/it][Succeeded / Failed / Skipped / Total] 27 / 166 / 0 / 193:  19%|█▉        | 194/1000 [1:06:52<4:37:51, 20.68s/it][Succeeded / Failed / Skipped / Total] 27 / 167 / 0 / 194:  19%|█▉        | 194/1000 [1:06:52<4:37:51, 20.68s/it][Succeeded / Failed / Skipped / Total] 27 / 167 / 0 / 194:  20%|█▉        | 195/1000 [1:07:49<4:39:59, 20.87s/it][Succeeded / Failed / Skipped / Total] 27 / 168 / 0 / 195:  20%|█▉        | 195/1000 [1:07:49<4:39:59, 20.87s/it][Succeeded / Failed / Skipped / Total] 27 / 168 / 0 / 195:  20%|█▉        | 196/1000 [1:08:03<4:39:08, 20.83s/it][Succeeded / Failed / Skipped / Total] 27 / 169 / 0 / 196:  20%|█▉        | 196/1000 [1:08:03<4:39:08, 20.83s/it][Succeeded / Failed / Skipped / Total] 27 / 169 / 0 / 196:  20%|█▉        | 197/1000 [1:08:14<4:38:10, 20.79s/it]Extracts the cause of the supplied throwable. --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[lobotomy]] ( Throwable [[eberhardt]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[eberhardt]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[eberhardt]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 193 ---------------------------------------------
Creates a list of OpenID attributes. --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 194 ---------------------------------------------
Converts a collection of user authorities to a set of authorities. --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[undiscovered]] ( Collection < ? extends GrantedAuthority > [[anatomical]] ) { Assert . notNull ( [[anatomical]] , "userAuthorities cannot be null" ) ; Set < String > [[gambling]] = new HashSet <> ( [[anatomical]] . size ( ) ) ; for ( GrantedAuthority [[administrations]] : [[anatomical]] ) { [[gambling]] . add ( [[administrations]] . getAuthority ( ) ) ; } return [[gambling]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 195 ---------------------------------------------
Checks if the given URL is absolute.@param url the URL to check.@return {@code true} if the URL is absolute, {@code false} otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[barth]] ( String [[refer]] ) { if ( [[refer]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[refer]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Converts the given identifier into an object of the given type. --> [[[FAILED]]]

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[decapitation]] ( Serializable [[headshots]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[headshots]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[headshots]] = convertFromStringTo ( ( String ) [[headshots]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 170 / 0 / 197:  20%|█▉        | 197/1000 [1:08:14<4:38:10, 20.79s/it][Succeeded / Failed / Skipped / Total] 27 / 170 / 0 / 197:  20%|█▉        | 198/1000 [1:08:31<4:37:32, 20.76s/it][Succeeded / Failed / Skipped / Total] 28 / 170 / 0 / 198:  20%|█▉        | 198/1000 [1:08:31<4:37:32, 20.76s/it][Succeeded / Failed / Skipped / Total] 28 / 170 / 0 / 198:  20%|█▉        | 199/1000 [1:08:41<4:36:30, 20.71s/it][Succeeded / Failed / Skipped / Total] 28 / 171 / 0 / 199:  20%|█▉        | 199/1000 [1:08:41<4:36:30, 20.71s/it][Succeeded / Failed / Skipped / Total] 28 / 171 / 0 / 199:  20%|██        | 200/1000 [1:08:54<4:35:36, 20.67s/it][Succeeded / Failed / Skipped / Total] 28 / 172 / 0 / 200:  20%|██        | 200/1000 [1:08:54<4:35:36, 20.67s/it][Succeeded / Failed / Skipped / Total] 28 / 172 / 0 / 200:  20%|██        | 201/1000 [1:09:36<4:36:42, 20.78s/it][Succeeded / Failed / Skipped / Total] 28 / 173 / 0 / 201:  20%|██        | 201/1000 [1:09:36<4:36:42, 20.78s/it][Succeeded / Failed / Skipped / Total] 28 / 173 / 0 / 201:  20%|██        | 202/1000 [1:09:41<4:35:18, 20.70s/it]Creates the list of entries for the given acl. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[militias]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 198 ---------------------------------------------
Returns a matcher that matches any exchange. --> Sets up an accelerant matcher. --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[accelerant]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 199 ---------------------------------------------
Saves the current request. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[message]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 200 ---------------------------------------------
Creates a new object identity. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[remodel]] ( ObjectIdentity object , Sid owner ) { Long [[accretion]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[accretion]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 201 ---------------------------------------------
Updates the object identity.@param acl the object identity --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[lobotomy]] ( MutableAcl [[appendectomy]] ) { Long parentId = null ; if ( [[appendectomy]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[appendectomy]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[appendectomy]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[appendectomy]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[appendectomy]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[lobotomy]] , parentId , ownerSid , Boolean . valueOf ( [[appendectomy]] . isEntriesInheriting ( ) ) , [[appendectomy]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 174 / 0 / 202:  20%|██        | 202/1000 [1:09:41<4:35:18, 20.70s/it][Succeeded / Failed / Skipped / Total] 28 / 174 / 0 / 202:  20%|██        | 203/1000 [1:09:45<4:33:54, 20.62s/it][Succeeded / Failed / Skipped / Total] 28 / 175 / 0 / 203:  20%|██        | 203/1000 [1:09:45<4:33:54, 20.62s/it][Succeeded / Failed / Skipped / Total] 28 / 175 / 0 / 203:  20%|██        | 204/1000 [1:09:58<4:33:04, 20.58s/it][Succeeded / Failed / Skipped / Total] 28 / 176 / 0 / 204:  20%|██        | 204/1000 [1:09:58<4:33:04, 20.58s/it][Succeeded / Failed / Skipped / Total] 28 / 176 / 0 / 204:  20%|██        | 205/1000 [1:10:14<4:32:23, 20.56s/it][Succeeded / Failed / Skipped / Total] 29 / 176 / 0 / 205:  20%|██        | 205/1000 [1:10:14<4:32:23, 20.56s/it][Succeeded / Failed / Skipped / Total] 29 / 176 / 0 / 205:  21%|██        | 206/1000 [1:10:19<4:31:04, 20.48s/it][Succeeded / Failed / Skipped / Total] 29 / 177 / 0 / 206:  21%|██        | 206/1000 [1:10:19<4:31:04, 20.48s/it][Succeeded / Failed / Skipped / Total] 29 / 177 / 0 / 206:  21%|██        | 207/1000 [1:10:44<4:31:00, 20.51s/it][Succeeded / Failed / Skipped / Total] 29 / 178 / 0 / 207:  21%|██        | 207/1000 [1:10:44<4:31:00, 20.51s/it][Succeeded / Failed / Skipped / Total] 29 / 178 / 0 / 207:  21%|██        | 208/1000 [1:11:10<4:30:59, 20.53s/it][Succeeded / Failed / Skipped / Total] 29 / 179 / 0 / 208:  21%|██        | 208/1000 [1:11:10<4:30:59, 20.53s/it][Succeeded / Failed / Skipped / Total] 29 / 179 / 0 / 208:  21%|██        | 209/1000 [1:11:10<4:29:23, 20.43s/it]Registers an access manager. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[quivering]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 203 ---------------------------------------------
Creates a text encryptor for the given password and salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[nonce]] , CharSequence [[salted]] ) { return new HexEncodingTextEncryptor ( standard ( [[nonce]] , [[salted]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryptor that encrypts the supplied password using the supplied salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[cctv]] ( CharSequence [[ciphers]] , CharSequence [[ammonium]] ) { return new HexEncodingTextEncryptor ( stronger ( [[ciphers]] , [[ammonium]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Determines the target URL for this request. --> Converts an HTTP request into an airborne header. --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[airborne]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[airborne]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 206 ---------------------------------------------
Creates a text encryptor that encrypts the supplied password using the supplied salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[coordinator]] ( CharSequence [[encrypt]] , CharSequence [[buttermilk]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[encrypt]] . toString ( ) , [[buttermilk]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Sets the target URL parameter. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[horrifying]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
Creates and returns a server web exchange matcher. --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[kalyani]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
[Succeeded / Failed / Skipped / Total] 29 / 180 / 0 / 209:  21%|██        | 209/1000 [1:11:10<4:29:23, 20.43s/it][Succeeded / Failed / Skipped / Total] 29 / 180 / 0 / 209:  21%|██        | 210/1000 [1:11:16<4:28:07, 20.36s/it][Succeeded / Failed / Skipped / Total] 30 / 180 / 0 / 210:  21%|██        | 210/1000 [1:11:16<4:28:07, 20.36s/it][Succeeded / Failed / Skipped / Total] 30 / 180 / 0 / 210:  21%|██        | 211/1000 [1:11:26<4:27:09, 20.32s/it][Succeeded / Failed / Skipped / Total] 30 / 181 / 0 / 211:  21%|██        | 211/1000 [1:11:26<4:27:09, 20.32s/it][Succeeded / Failed / Skipped / Total] 30 / 181 / 0 / 211:  21%|██        | 212/1000 [1:11:43<4:26:35, 20.30s/it][Succeeded / Failed / Skipped / Total] 31 / 181 / 0 / 212:  21%|██        | 212/1000 [1:11:43<4:26:35, 20.30s/it][Succeeded / Failed / Skipped / Total] 31 / 181 / 0 / 212:  21%|██▏       | 213/1000 [1:11:55<4:25:44, 20.26s/it][Succeeded / Failed / Skipped / Total] 31 / 182 / 0 / 213:  21%|██▏       | 213/1000 [1:11:55<4:25:44, 20.26s/it][Succeeded / Failed / Skipped / Total] 31 / 182 / 0 / 213:  21%|██▏       | 214/1000 [1:12:10<4:25:04, 20.23s/it][Succeeded / Failed / Skipped / Total] 31 / 183 / 0 / 214:  21%|██▏       | 214/1000 [1:12:10<4:25:04, 20.23s/it][Succeeded / Failed / Skipped / Total] 31 / 183 / 0 / 214:  22%|██▏       | 215/1000 [1:12:36<4:25:07, 20.26s/it][Succeeded / Failed / Skipped / Total] 31 / 184 / 0 / 215:  22%|██▏       | 215/1000 [1:12:36<4:25:07, 20.26s/it][Succeeded / Failed / Skipped / Total] 31 / 184 / 0 / 215:  22%|██▏       | 216/1000 [1:13:30<4:26:49, 20.42s/it]--------------------------------------------- Result 209 ---------------------------------------------
Writes the headers to the response. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[gelatinous]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 210 ---------------------------------------------
Determines the target URL for this request. --> DALRYMPLE@param request@param response@return --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[dalrymple]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
Builds a DistinguishedName from the supplied username. --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[clients]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[clients]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 212 ---------------------------------------------
Updates the cache. --> region beauli --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[beaulieu]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 213 ---------------------------------------------
Gets the current date. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[motherfucker]] ( ) { long [[addition]] = System . currentTimeMillis ( ) ; if ( ( [[addition]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[addition]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[addition]] ; currentDate = format . format ( new Date ( [[addition]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Creates a shared object map. --> [[[FAILED]]]

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[fixing]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 215 ---------------------------------------------
Sets the details associated with the supplied authentication token. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[bundt]] ( HttpServletRequest [[appealed]] , UsernamePasswordAuthenticationToken [[catchphrase]] ) { [[catchphrase]] . setDetails ( authenticationDetailsSource . buildDetails ( [[appealed]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 216 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 185 / 0 / 216:  22%|██▏       | 216/1000 [1:13:30<4:26:49, 20.42s/it][Succeeded / Failed / Skipped / Total] 31 / 185 / 0 / 216:  22%|██▏       | 217/1000 [1:13:41<4:25:54, 20.38s/it][Succeeded / Failed / Skipped / Total] 31 / 186 / 0 / 217:  22%|██▏       | 217/1000 [1:13:41<4:25:54, 20.38s/it][Succeeded / Failed / Skipped / Total] 31 / 186 / 0 / 217:  22%|██▏       | 218/1000 [1:13:44<4:24:29, 20.29s/it][Succeeded / Failed / Skipped / Total] 31 / 187 / 0 / 218:  22%|██▏       | 218/1000 [1:13:44<4:24:29, 20.29s/it][Succeeded / Failed / Skipped / Total] 31 / 187 / 0 / 218:  22%|██▏       | 219/1000 [1:13:46<4:23:06, 20.21s/it][Succeeded / Failed / Skipped / Total] 31 / 188 / 0 / 219:  22%|██▏       | 219/1000 [1:13:46<4:23:06, 20.21s/it][Succeeded / Failed / Skipped / Total] 31 / 188 / 0 / 219:  22%|██▏       | 220/1000 [1:13:50<4:21:46, 20.14s/it][Succeeded / Failed / Skipped / Total] 31 / 189 / 0 / 220:  22%|██▏       | 220/1000 [1:13:50<4:21:46, 20.14s/it][Succeeded / Failed / Skipped / Total] 31 / 189 / 0 / 220:  22%|██▏       | 221/1000 [1:14:24<4:22:15, 20.20s/it][Succeeded / Failed / Skipped / Total] 31 / 190 / 0 / 221:  22%|██▏       | 221/1000 [1:14:24<4:22:15, 20.20s/it][Succeeded / Failed / Skipped / Total] 31 / 190 / 0 / 221:  22%|██▏       | 222/1000 [1:14:51<4:22:20, 20.23s/it][Succeeded / Failed / Skipped / Total] 32 / 190 / 0 / 222:  22%|██▏       | 222/1000 [1:14:51<4:22:20, 20.23s/it][Succeeded / Failed / Skipped / Total] 32 / 190 / 0 / 222:  22%|██▏       | 223/1000 [1:15:00<4:21:20, 20.18s/it]Gets the directory with immediate parents populated.@param id the id@return the directory with immediate parents populated --> [[[FAILED]]]

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[branding]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[branding]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 217 ---------------------------------------------
Builds a DistinguishedName for the specified group. --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[sidecar]] ( String group ) { DistinguishedName [[dob]] = new DistinguishedName ( groupSearchBase ) ; [[dob]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dob]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 218 ---------------------------------------------
Get a list of all the groups in the current context.@param securityName the security name@return a list of all the groups in the current context --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[tantalizing]] ) { Context [[cc]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Configures the jaas using the supplied login configuration. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[sle]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 220 ---------------------------------------------
Determine the security name for the given subject.@param subject the subject@return the security name --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[unwelcome]] ( final Subject [[topic]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[topic]] ) ; } String [[monsoon]] = null ; if ( [[topic]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
Parse a date from a string. --> [[[FAILED]]]

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int i = 0 ; ( [[date]] == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { [[date]] = [[formats]] [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[monsters]] ( String [[rating]] , DateFormat [ ] [[styling]] ) { Date [[dates]] = null ; for ( int i = 0 ; ( [[dates]] == null ) && ( i < [[styling]] . length ) ; i ++ ) { try { [[dates]] = [[styling]] [ i ] . parse ( [[rating]] ) ; } catch ( ParseException ignored ) { } } if ( [[dates]] == null ) { return null ; } return new Long ( [[dates]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 222 ---------------------------------------------
Retrieves the filters for the specified URL. --> Get a list of all the filters that can be applied to the specified address@param adress@return --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[olinda]] ( String [[adress]] ) { return [[olinda]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[adress]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 223 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 32 / 191 / 0 / 223:  22%|██▏       | 223/1000 [1:15:00<4:21:20, 20.18s/it][Succeeded / Failed / Skipped / Total] 32 / 191 / 0 / 223:  22%|██▏       | 224/1000 [1:15:04<4:20:03, 20.11s/it][Succeeded / Failed / Skipped / Total] 32 / 192 / 0 / 224:  22%|██▏       | 224/1000 [1:15:04<4:20:03, 20.11s/it][Succeeded / Failed / Skipped / Total] 32 / 192 / 0 / 224:  22%|██▎       | 225/1000 [1:15:04<4:18:36, 20.02s/it][Succeeded / Failed / Skipped / Total] 32 / 193 / 0 / 225:  22%|██▎       | 225/1000 [1:15:04<4:18:36, 20.02s/it][Succeeded / Failed / Skipped / Total] 32 / 193 / 0 / 225:  23%|██▎       | 226/1000 [1:15:14<4:17:42, 19.98s/it][Succeeded / Failed / Skipped / Total] 32 / 194 / 0 / 226:  23%|██▎       | 226/1000 [1:15:14<4:17:42, 19.98s/it][Succeeded / Failed / Skipped / Total] 32 / 194 / 0 / 226:  23%|██▎       | 227/1000 [1:15:49<4:18:13, 20.04s/it][Succeeded / Failed / Skipped / Total] 33 / 194 / 0 / 227:  23%|██▎       | 227/1000 [1:15:49<4:18:13, 20.04s/it][Succeeded / Failed / Skipped / Total] 33 / 194 / 0 / 227:  23%|██▎       | 228/1000 [1:16:13<4:18:04, 20.06s/it][Succeeded / Failed / Skipped / Total] 33 / 195 / 0 / 228:  23%|██▎       | 228/1000 [1:16:13<4:18:04, 20.06s/it][Succeeded / Failed / Skipped / Total] 33 / 195 / 0 / 228:  23%|██▎       | 229/1000 [1:16:52<4:18:50, 20.14s/it][Succeeded / Failed / Skipped / Total] 33 / 196 / 0 / 229:  23%|██▎       | 229/1000 [1:16:52<4:18:50, 20.14s/it][Succeeded / Failed / Skipped / Total] 33 / 196 / 0 / 229:  23%|██▎       | 230/1000 [1:16:59<4:17:44, 20.08s/it]Returns the application context for the specified page context. --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[decorum]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 224 ---------------------------------------------
Copies details from source to dest. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[quicker]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Change the user's password.@param oldPassword the old password@param newPassword the new password --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[blackmailed]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 226 ---------------------------------------------
Retrieves all filters that match the supplied request. --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[glyn]] ( HttpServletRequest [[urged]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[urged]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Sets session attributes.@param sessionAttributes the session attributes@return the mock request specification --> Overrides the behavior of MockMvcRequestSpecification@param crossley@return --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[undermines]] ( Map < String , Object > [[crossley]] ) { notNull ( [[crossley]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[crossley]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 228 ---------------------------------------------
Add a list of filters.@param filters the list of filters --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[grids]] ( List < Filter > [[sieve]] ) { Validate . notNull ( [[grids]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[grids]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 229 ---------------------------------------------
Throws an exception if maximum allowable sessions are exceeded. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[magistrate]] ( List < SessionInformation > [[encounters]] , int [[cornets]] , SessionRegistry [[roster]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[encounters]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[cornets]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 230 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 197 / 0 / 230:  23%|██▎       | 230/1000 [1:16:59<4:17:44, 20.08s/it][Succeeded / Failed / Skipped / Total] 33 / 197 / 0 / 230:  23%|██▎       | 231/1000 [1:17:18<4:17:22, 20.08s/it][Succeeded / Failed / Skipped / Total] 33 / 198 / 0 / 231:  23%|██▎       | 231/1000 [1:17:18<4:17:22, 20.08s/it][Succeeded / Failed / Skipped / Total] 33 / 198 / 0 / 231:  23%|██▎       | 232/1000 [1:17:21<4:16:03, 20.00s/it][Succeeded / Failed / Skipped / Total] 33 / 199 / 0 / 232:  23%|██▎       | 232/1000 [1:17:21<4:16:03, 20.00s/it][Succeeded / Failed / Skipped / Total] 33 / 199 / 0 / 232:  23%|██▎       | 233/1000 [1:17:24<4:14:47, 19.93s/it][Succeeded / Failed / Skipped / Total] 33 / 200 / 0 / 233:  23%|██▎       | 233/1000 [1:17:24<4:14:47, 19.93s/it][Succeeded / Failed / Skipped / Total] 33 / 200 / 0 / 233:  23%|██▎       | 234/1000 [1:17:30<4:13:41, 19.87s/it][Succeeded / Failed / Skipped / Total] 33 / 201 / 0 / 234:  23%|██▎       | 234/1000 [1:17:30<4:13:41, 19.87s/it][Succeeded / Failed / Skipped / Total] 33 / 201 / 0 / 234:  24%|██▎       | 235/1000 [1:17:52<4:13:32, 19.89s/it][Succeeded / Failed / Skipped / Total] 34 / 201 / 0 / 235:  24%|██▎       | 235/1000 [1:17:52<4:13:32, 19.89s/it][Succeeded / Failed / Skipped / Total] 34 / 201 / 0 / 235:  24%|██▎       | 236/1000 [1:18:14<4:13:16, 19.89s/it]Creates a new authentication scheme for the given user name and password. --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[critical]] ( String [[password]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[password]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[basal]] ( String [[plugging]] , String [[passwords]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[plugging]] ) ; scheme . setPassword ( [[passwords]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters to the provided filter.@param filter The filter to add.@param additionalFilters Additional filters to add. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[trapping]] ( Filter [[siphon]] , Filter ... additionalFilters ) { Validate . notNull ( [[siphon]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[siphon]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Returns the full distinguished name for the given distinguished name. --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[destroyers]] ( DistinguishedName [[aaaa]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[aaaa]] . contains ( baseDn ) ) { return [[aaaa]] ; } baseDn . append ( [[aaaa]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a proxy for the specified URI. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[closeness]] ( URI [[arkady]] ) { if ( [[arkady]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[closeness]] ( new ProxySpecification ( [[arkady]] . getHost ( ) , [[arkady]] . getPort ( ) , [[arkady]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Sets the default character set for the encoder. --> Creates a flogged encoder configuration. --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[flogged]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 201 / 0 / 236:  24%|██▎       | 236/1000 [1:18:14<4:13:16, 19.89s/it][Succeeded / Failed / Skipped / Total] 35 / 201 / 0 / 236:  24%|██▎       | 237/1000 [1:18:30<4:12:44, 19.87s/it][Succeeded / Failed / Skipped / Total] 35 / 202 / 0 / 237:  24%|██▎       | 237/1000 [1:18:30<4:12:44, 19.87s/it][Succeeded / Failed / Skipped / Total] 35 / 202 / 0 / 237:  24%|██▍       | 238/1000 [1:19:25<4:14:18, 20.02s/it][Succeeded / Failed / Skipped / Total] 35 / 203 / 0 / 238:  24%|██▍       | 238/1000 [1:19:25<4:14:18, 20.02s/it][Succeeded / Failed / Skipped / Total] 35 / 203 / 0 / 238:  24%|██▍       | 239/1000 [1:19:26<4:12:57, 19.94s/it][Succeeded / Failed / Skipped / Total] 35 / 204 / 0 / 239:  24%|██▍       | 239/1000 [1:19:26<4:12:57, 19.94s/it]Prints the response.@param responseOptions the response options@param responseBody the response body@param responseDetail the response details@param logDetail the log details@param shouldPrettyPrint the should pretty print@return the string --> Creates a string representation of an imitation. --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[imitations]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 237 ---------------------------------------------
Configures this RestAssuredConfig with the specified configuration. --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[rearrange]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 238 ---------------------------------------------
Configures the default object mapper for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[longingly]] ( ObjectMapperType [[roundhead]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[longingly]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 239 ---------------------------------------------
Creates a new authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String password , FormAuthConfig [[config]] ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[constitutes]] ( String [[password]] , String password , FormAuthConfig [[irritation]] ) { if ( [[password]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[intentions]] = new FormAuthScheme ( ) ; [[intentions]] . setUserName ( [[password]] ) ; [[intentions]] . setPassword ( password ) ; [[intentions]] . setConfig ( [[irritation]] ) ; return [[intentions]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 205 / 0 / 240:  24%|██▍       | 240/1000 [1:19:26<4:11:34, 19.86s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 0 / 240:  24%|██▍       | 241/1000 [1:19:27<4:10:14, 19.78s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 1 / 241:  24%|██▍       | 241/1000 [1:19:27<4:10:14, 19.78s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 2 / 242:  24%|██▍       | 242/1000 [1:19:28<4:08:55, 19.70s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 2 / 242:  24%|██▍       | 243/1000 [1:19:47<4:08:33, 19.70s/it][Succeeded / Failed / Skipped / Total] 35 / 206 / 2 / 243:  24%|██▍       | 243/1000 [1:19:47<4:08:33, 19.70s/it][Succeeded / Failed / Skipped / Total] 35 / 206 / 2 / 243:  24%|██▍       | 244/1000 [1:19:52<4:07:29, 19.64s/it][Succeeded / Failed / Skipped / Total] 35 / 207 / 2 / 244:  24%|██▍       | 244/1000 [1:19:52<4:07:29, 19.64s/it][Succeeded / Failed / Skipped / Total] 35 / 207 / 2 / 244:  24%|██▍       | 245/1000 [1:19:55<4:06:19, 19.58s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 2 / 245:  24%|██▍       | 245/1000 [1:19:55<4:06:19, 19.58s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 2 / 245:  25%|██▍       | 246/1000 [1:19:56<4:05:02, 19.50s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 3 / 246:  25%|██▍       | 246/1000 [1:19:56<4:05:02, 19.50s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 3 / 246:  25%|██▍       | 247/1000 [1:19:57<4:03:46, 19.42s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 4 / 247:  25%|██▍       | 247/1000 [1:19:57<4:03:46, 19.42s/it][Succeeded / Failed / Skipped / Total] 35 / 208 / 4 / 247:  25%|██▍       | 248/1000 [1:20:13<4:03:16, 19.41s/it][Succeeded / Failed / Skipped / Total] 35 / 209 / 4 / 248:  25%|██▍       | 248/1000 [1:20:13<4:03:16, 19.41s/it][Succeeded / Failed / Skipped / Total] 35 / 209 / 4 / 248:  25%|██▍       | 249/1000 [1:20:16<4:02:06, 19.34s/it]Creates and returns a mock RESTAssuredMockMvcConfig for the specified configuration.@param logConfig the configuration to log@return a mock RESTAssuredMockMvcConfig --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[macpherson]] ( LogConfig [[caterina]] ) { notNull ( [[macpherson]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[macpherson]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 242 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object.@param headerConfig a {@link HeaderConfig} object.@return a {@link RestAssuredMockMvcConfig} object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 243 ---------------------------------------------
Creates a new JAXB ObjectMapperConfig instance. --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[battleship]] ( JAXBObjectMapperFactory [[accordionist]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[battleship]] , johnzonObjectMapperFactory , "[[Decent]]" == "[[Decent]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[lobotomy]] ( ObjectMapperConfig [[deniability]] ) { notNull ( [[lobotomy]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[lobotomy]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Configures this mock mvc with the specified session config.@param sessionConfig the session config@return the configured mock mvc --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[barad]] ( SessionConfig [[corrupts]] ) { notNull ( [[barad]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[barad]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 246 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 247 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 248 ---------------------------------------------
Creates a new authentication scheme. --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String [[userName]] , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[highest]] ( String [[plugging]] , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[plugging]] ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 249 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 209 / 4 / 249:  25%|██▍       | 249/1000 [1:20:16<4:02:06, 19.34s/it][Succeeded / Failed / Skipped / Total] 36 / 209 / 4 / 249:  25%|██▌       | 250/1000 [1:20:23<4:01:09, 19.29s/it][Succeeded / Failed / Skipped / Total] 37 / 209 / 4 / 250:  25%|██▌       | 250/1000 [1:20:23<4:01:09, 19.29s/it][Succeeded / Failed / Skipped / Total] 37 / 209 / 4 / 250:  25%|██▌       | 251/1000 [1:20:37<4:00:34, 19.27s/it][Succeeded / Failed / Skipped / Total] 38 / 209 / 4 / 251:  25%|██▌       | 251/1000 [1:20:37<4:00:34, 19.27s/it][Succeeded / Failed / Skipped / Total] 38 / 209 / 4 / 251:  25%|██▌       | 252/1000 [1:20:46<3:59:44, 19.23s/it][Succeeded / Failed / Skipped / Total] 38 / 210 / 4 / 252:  25%|██▌       | 252/1000 [1:20:46<3:59:44, 19.23s/it][Succeeded / Failed / Skipped / Total] 38 / 210 / 4 / 252:  25%|██▌       | 253/1000 [1:20:52<3:58:48, 19.18s/it][Succeeded / Failed / Skipped / Total] 38 / 211 / 4 / 253:  25%|██▌       | 253/1000 [1:20:52<3:58:48, 19.18s/it][Succeeded / Failed / Skipped / Total] 38 / 211 / 4 / 253:  25%|██▌       | 254/1000 [1:21:02<3:58:00, 19.14s/it][Succeeded / Failed / Skipped / Total] 38 / 212 / 4 / 254:  25%|██▌       | 254/1000 [1:21:02<3:58:00, 19.14s/it][Succeeded / Failed / Skipped / Total] 38 / 212 / 4 / 254:  26%|██▌       | 255/1000 [1:21:15<3:57:23, 19.12s/it][Succeeded / Failed / Skipped / Total] 39 / 212 / 4 / 255:  26%|██▌       | 255/1000 [1:21:15<3:57:23, 19.12s/it][Succeeded / Failed / Skipped / Total] 39 / 212 / 4 / 255:  26%|██▌       | 256/1000 [1:22:05<3:58:33, 19.24s/it]Creates and configures an instance of RestAssuredMockMvcConfig.@param asyncConfig the async configuration@return the configured instance --> Creates and configures a mock RESTAssuredMockMvcConfig object.@param sourcethe mock RESTAssuredMockMvcConfig object.@return a mock RESTAssuredMockMvcConfig object. --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[asyncConfig]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[mushroom]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 250 ---------------------------------------------
Configures the mock mvc config.@param mockMvcConfig the mock mvc config@return the configured mock mvc config --> Creates and configures a RestAssuredMockMvcConfig object. --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[guff]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[guff]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[guff]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 251 ---------------------------------------------
Configures a multi part mock mvc config.@param multiPartConfig the multi part config@return the configured mock mvc config --> Creates and configures a RestAssuredMockMvcConfig object.@param eatable a {@link MultiPartConfig} object@return a {@link RestAssuredMockMvcConfig} object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[multiPartConfig]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[eatable]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 252 ---------------------------------------------
Creates and configures a RestAssuredMockMvcConfig object. --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[regrettably]] ( JsonConfig [[counterpoint]] ) { notNull ( [[regrettably]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[regrettably]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 253 ---------------------------------------------
Allow all hostnames in the given configuration. --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[tolerably]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
Configures RESTAssuredMockMvcConfig.@param xmlConfig the xml config@return the configured RESTAssuredMockMvcConfig --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[griefs]] ( XmlConfig [[forbidden]] ) { notNull ( [[griefs]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[griefs]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 255 ---------------------------------------------
Sets the default request headers. --> Mamoru utility method --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[mamoru]] ( Map < ? , ? > headers ) { this . [[demonstrations]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[demonstrations]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 256 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 213 / 4 / 256:  26%|██▌       | 256/1000 [1:22:05<3:58:33, 19.24s/it][Succeeded / Failed / Skipped / Total] 39 / 213 / 4 / 256:  26%|██▌       | 257/1000 [1:22:31<3:58:35, 19.27s/it][Succeeded / Failed / Skipped / Total] 39 / 214 / 4 / 257:  26%|██▌       | 257/1000 [1:22:31<3:58:35, 19.27s/it][Succeeded / Failed / Skipped / Total] 39 / 214 / 4 / 257:  26%|██▌       | 258/1000 [1:23:07<3:59:03, 19.33s/it][Succeeded / Failed / Skipped / Total] 40 / 214 / 4 / 258:  26%|██▌       | 258/1000 [1:23:07<3:59:03, 19.33s/it][Succeeded / Failed / Skipped / Total] 40 / 214 / 4 / 258:  26%|██▌       | 259/1000 [1:23:21<3:58:29, 19.31s/it][Succeeded / Failed / Skipped / Total] 41 / 214 / 4 / 259:  26%|██▌       | 259/1000 [1:23:21<3:58:29, 19.31s/it][Succeeded / Failed / Skipped / Total] 41 / 214 / 4 / 259:  26%|██▌       | 260/1000 [1:23:31<3:57:44, 19.28s/it][Succeeded / Failed / Skipped / Total] 42 / 214 / 4 / 260:  26%|██▌       | 260/1000 [1:23:31<3:57:44, 19.28s/it][Succeeded / Failed / Skipped / Total] 42 / 214 / 4 / 260:  26%|██▌       | 261/1000 [1:23:55<3:57:36, 19.29s/it][Succeeded / Failed / Skipped / Total] 43 / 214 / 4 / 261:  26%|██▌       | 261/1000 [1:23:55<3:57:36, 19.29s/it][Succeeded / Failed / Skipped / Total] 43 / 214 / 4 / 261:  26%|██▌       | 262/1000 [1:24:00<3:56:38, 19.24s/it][Succeeded / Failed / Skipped / Total] 44 / 214 / 4 / 262:  26%|██▌       | 262/1000 [1:24:00<3:56:38, 19.24s/it][Succeeded / Failed / Skipped / Total] 44 / 214 / 4 / 262:  26%|██▋       | 263/1000 [1:25:06<3:58:29, 19.42s/it]Declares the specified namespaces. --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[supplements]] ( Map < String , String > [[batya]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[batya]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the proxy for the specified host and port. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[meaner]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 258 ---------------------------------------------
Sends a request to the server. --> Performs a "preliminary" PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PRELiminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary PReliminary --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[praying]] ( String [[practices]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[practices]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 259 ---------------------------------------------
Resets the internal state. --> Cleans up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[resuscitate]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Specifies the name and value of the header associated with this multipart. --> Specifies the name of the section that contains the specified headlines@param descriptions The name of the section@param value The value of the section --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[headlines]] ( String [[descriptions]] , String value ) { Validate . notEmpty ( [[descriptions]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the specified header value.@param name the header name@param value the header value@return this response builder --> Sets the content type of the supplied response.@param name the name of the response@param value the value of the response@return this response builder --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[commodities]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 262 ---------------------------------------------
Builds the response.@return the response --> Creates a new resource. --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[creations]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 215 / 4 / 263:  26%|██▋       | 263/1000 [1:25:06<3:58:29, 19.42s/it][Succeeded / Failed / Skipped / Total] 44 / 215 / 4 / 263:  26%|██▋       | 264/1000 [1:25:20<3:57:54, 19.39s/it][Succeeded / Failed / Skipped / Total] 44 / 216 / 4 / 264:  26%|██▋       | 264/1000 [1:25:20<3:57:54, 19.39s/it][Succeeded / Failed / Skipped / Total] 44 / 216 / 4 / 264:  26%|██▋       | 265/1000 [1:25:23<3:56:50, 19.33s/it][Succeeded / Failed / Skipped / Total] 44 / 217 / 4 / 265:  26%|██▋       | 265/1000 [1:25:23<3:56:50, 19.33s/it][Succeeded / Failed / Skipped / Total] 44 / 217 / 4 / 265:  27%|██▋       | 266/1000 [1:25:31<3:55:59, 19.29s/it][Succeeded / Failed / Skipped / Total] 44 / 218 / 4 / 266:  27%|██▋       | 266/1000 [1:25:31<3:55:59, 19.29s/it][Succeeded / Failed / Skipped / Total] 44 / 218 / 4 / 266:  27%|██▋       | 267/1000 [1:25:34<3:54:55, 19.23s/it][Succeeded / Failed / Skipped / Total] 44 / 219 / 4 / 267:  27%|██▋       | 267/1000 [1:25:34<3:54:55, 19.23s/it][Succeeded / Failed / Skipped / Total] 44 / 219 / 4 / 267:  27%|██▋       | 268/1000 [1:25:50<3:54:28, 19.22s/it][Succeeded / Failed / Skipped / Total] 44 / 220 / 4 / 268:  27%|██▋       | 268/1000 [1:25:50<3:54:28, 19.22s/it][Succeeded / Failed / Skipped / Total] 44 / 220 / 4 / 268:  27%|██▋       | 269/1000 [1:26:11<3:54:12, 19.22s/it][Succeeded / Failed / Skipped / Total] 44 / 221 / 4 / 269:  27%|██▋       | 269/1000 [1:26:11<3:54:12, 19.22s/it][Succeeded / Failed / Skipped / Total] 44 / 221 / 4 / 269:  27%|██▋       | 270/1000 [1:26:40<3:54:21, 19.26s/it][Succeeded / Failed / Skipped / Total] 44 / 222 / 4 / 270:  27%|██▋       | 270/1000 [1:26:40<3:54:21, 19.26s/it][Succeeded / Failed / Skipped / Total] 44 / 222 / 4 / 270:  27%|██▋       | 271/1000 [1:26:47<3:53:29, 19.22s/it]Performs basic authentication. --> [[[FAILED]]]

[[[[Adv]]]]: public void basic ( String [[host]] , int port , String [[user]] , String [[pass]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( [[user]] , [[pass]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String [[organise]] , int port , String [[abusers]] , String [[adopt]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[organise]] , port ) , new UsernamePasswordCredentials ( [[abusers]] , [[adopt]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 264 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[assessments]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 265 ---------------------------------------------
Create a matcher that matches cookies that have a comment. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[noting]] ( Matcher < ? super String > [[iconic]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[iconic]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 266 ---------------------------------------------
Creates and returns a copy of this XMLPathConfig object with the specified prefix and namespace URI.@param prefix the prefix of the XMLPathConfig object@param namespaceURI the namespace URI of the XMLPathConfig object@return a copy of this XMLPathConfig object --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String [[codeword]] , String [[sportsmanship]] ) { Validate . notEmpty ( [[codeword]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[sportsmanship]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[neon]] = new HashMap < String , String > ( declaredNamespaces ) ; [[neon]] . put ( [[codeword]] , [[sportsmanship]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[neon]] , properties , validating , "[[Upstanding]]" == "[[Upstanding]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 267 ---------------------------------------------
Creates a copy of the supplied headers.@param header The header to copy.@param additionalHeaders Additional headers to add.@return A copy of the supplied headers. --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header [[header]] , Header ... additionalHeaders ) { notNull ( [[header]] , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( [[header]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header [[chapters]] , Header ... additionalHeaders ) { notNull ( [[chapters]] , "Header" ) ; final List < Header > [[newborns]] = new LinkedList < Header > ( ) ; [[newborns]] . add ( [[chapters]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[newborns]] , additionalHeaders ) ; } return new Headers ( [[newborns]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 268 ---------------------------------------------
Sets the control name.@param controlName The name of the control.@return This builder instance. --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[follicles]] ( String [[vipers]] ) { Validate . notEmpty ( [[follicles]] , "Control name cannot be empty" ) ; this . [[shavings]] = [[follicles]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 269 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[dusted]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[dusted]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Creates a matcher that matches a cookie path. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[via]] ( Matcher < ? super String > [[nineties]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[nineties]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 223 / 4 / 271:  27%|██▋       | 271/1000 [1:26:47<3:53:29, 19.22s/it][Succeeded / Failed / Skipped / Total] 44 / 223 / 4 / 271:  27%|██▋       | 272/1000 [1:26:59<3:52:49, 19.19s/it][Succeeded / Failed / Skipped / Total] 44 / 224 / 4 / 272:  27%|██▋       | 272/1000 [1:26:59<3:52:49, 19.19s/it][Succeeded / Failed / Skipped / Total] 44 / 224 / 4 / 272:  27%|██▋       | 273/1000 [1:27:08<3:52:03, 19.15s/it][Succeeded / Failed / Skipped / Total] 44 / 225 / 4 / 273:  27%|██▋       | 273/1000 [1:27:08<3:52:03, 19.15s/it][Succeeded / Failed / Skipped / Total] 44 / 226 / 4 / 274:  27%|██▋       | 274/1000 [1:27:08<3:50:53, 19.08s/it][Succeeded / Failed / Skipped / Total] 44 / 226 / 4 / 274:  28%|██▊       | 275/1000 [1:27:35<3:50:56, 19.11s/it][Succeeded / Failed / Skipped / Total] 44 / 227 / 4 / 275:  28%|██▊       | 275/1000 [1:27:35<3:50:56, 19.11s/it][Succeeded / Failed / Skipped / Total] 44 / 227 / 4 / 275:  28%|██▊       | 276/1000 [1:27:58<3:50:45, 19.12s/it][Succeeded / Failed / Skipped / Total] 44 / 228 / 4 / 276:  28%|██▊       | 276/1000 [1:27:58<3:50:45, 19.12s/it][Succeeded / Failed / Skipped / Total] 44 / 228 / 4 / 276:  28%|██▊       | 277/1000 [1:28:12<3:50:13, 19.11s/it][Succeeded / Failed / Skipped / Total] 44 / 229 / 4 / 277:  28%|██▊       | 277/1000 [1:28:12<3:50:13, 19.11s/it][Succeeded / Failed / Skipped / Total] 44 / 229 / 4 / 277:  28%|██▊       | 278/1000 [1:28:28<3:49:47, 19.10s/it][Succeeded / Failed / Skipped / Total] 45 / 229 / 4 / 278:  28%|██▊       | 278/1000 [1:28:28<3:49:47, 19.10s/it][Succeeded / Failed / Skipped / Total] 45 / 229 / 4 / 278:  28%|██▊       | 279/1000 [1:28:30<3:48:43, 19.03s/it][Succeeded / Failed / Skipped / Total] 45 / 230 / 4 / 279:  28%|██▊       | 279/1000 [1:28:30<3:48:43, 19.03s/it][Succeeded / Failed / Skipped / Total] 45 / 230 / 4 / 279:  28%|██▊       | 280/1000 [1:28:31<3:47:38, 18.97s/it][Succeeded / Failed / Skipped / Total] 45 / 231 / 4 / 280:  28%|██▊       | 280/1000 [1:28:31<3:47:38, 18.97s/it][Succeeded / Failed / Skipped / Total] 45 / 231 / 4 / 280:  28%|██▊       | 281/1000 [1:28:32<3:46:33, 18.91s/it]Creates and returns a new instance of the DetailedCookieMatcher that matches the supplied domain matcher. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[sovereignty]] ( Matcher < ? super String > [[feline]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[feline]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[collateral]] ( Matcher < ? super Boolean > [[electrodes]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[electrodes]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Create a DetailedCookieMatcher that matches cookies only.@param httpOnlyMatcher The cookie only matcher.@return A DetailedCookieMatcher that matches cookies only. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[barbershop]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches this cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[editions]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Creates and returns a new instance of the DetailedCookieMatcher that matches theprovided maximum age. --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[librarians]] ( Matcher < ? super Integer > [[series]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[series]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a copy of this specification with the specified host. --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[having]] ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 277 ---------------------------------------------
Configures the JSON path with a number return type. --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[coronal]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[coronal]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 278 ---------------------------------------------
Specifies that the specified header should match the supplied expected value. --> Spec builder for elizabethan --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[elizabethan]] ( String [[berger]] , Matcher < String > [[divulge]] ) { spec . header ( [[berger]] , [[divulge]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Specifies the expected value for a cookie.@param cookieName the name of the cookie@param expectedValue the expected value for the cookie --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[engineering]] ) { spec . cookie ( cookieName , [[engineering]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a copy of this config with the specified parser type. --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[christs]] ( JsonParserType [[miguelito]] ) { return new JsonPathConfig ( numberReturnType , [[christs]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
[Succeeded / Failed / Skipped / Total] 46 / 231 / 4 / 281:  28%|██▊       | 281/1000 [1:28:32<3:46:33, 18.91s/it][Succeeded / Failed / Skipped / Total] 46 / 231 / 4 / 281:  28%|██▊       | 282/1000 [1:28:51<3:46:13, 18.91s/it][Succeeded / Failed / Skipped / Total] 47 / 231 / 4 / 282:  28%|██▊       | 282/1000 [1:28:51<3:46:13, 18.91s/it][Succeeded / Failed / Skipped / Total] 47 / 231 / 4 / 282:  28%|██▊       | 283/1000 [1:28:56<3:45:20, 18.86s/it][Succeeded / Failed / Skipped / Total] 47 / 232 / 4 / 283:  28%|██▊       | 283/1000 [1:28:56<3:45:20, 18.86s/it][Succeeded / Failed / Skipped / Total] 47 / 232 / 4 / 283:  28%|██▊       | 284/1000 [1:29:19<3:45:11, 18.87s/it][Succeeded / Failed / Skipped / Total] 47 / 233 / 4 / 284:  28%|██▊       | 284/1000 [1:29:19<3:45:11, 18.87s/it][Succeeded / Failed / Skipped / Total] 47 / 233 / 4 / 284:  28%|██▊       | 285/1000 [1:29:58<3:45:44, 18.94s/it][Succeeded / Failed / Skipped / Total] 47 / 234 / 4 / 285:  28%|██▊       | 285/1000 [1:29:58<3:45:44, 18.94s/it][Succeeded / Failed / Skipped / Total] 47 / 234 / 4 / 285:  29%|██▊       | 286/1000 [1:30:09<3:45:05, 18.92s/it][Succeeded / Failed / Skipped / Total] 47 / 235 / 4 / 286:  29%|██▊       | 286/1000 [1:30:09<3:45:05, 18.92s/it][Succeeded / Failed / Skipped / Total] 47 / 235 / 4 / 286:  29%|██▊       | 287/1000 [1:30:54<3:45:49, 19.00s/it][Succeeded / Failed / Skipped / Total] 47 / 236 / 4 / 287:  29%|██▊       | 287/1000 [1:30:54<3:45:49, 19.00s/it][Succeeded / Failed / Skipped / Total] 47 / 236 / 4 / 287:  29%|██▉       | 288/1000 [1:31:01<3:45:00, 18.96s/it][Succeeded / Failed / Skipped / Total] 48 / 236 / 4 / 288:  29%|██▉       | 288/1000 [1:31:01<3:45:00, 18.96s/it][Succeeded / Failed / Skipped / Total] 48 / 236 / 4 / 288:  29%|██▉       | 289/1000 [1:31:17<3:44:35, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 237 / 4 / 289:  29%|██▉       | 289/1000 [1:31:17<3:44:35, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 237 / 4 / 289:  29%|██▉       | 290/1000 [1:31:50<3:44:50, 19.00s/it]--------------------------------------------- Result 281 ---------------------------------------------
Expects the specified header to be present in the response. --> Spec builder for HTTP POST requests@param grafts@param friendless@return --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[ethylene]] ( String [[grafts]] , String [[friendless]] ) { spec . header ( [[grafts]] , [[friendless]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 282 ---------------------------------------------
Enables or disables logging of a request and response. --> Creates a new configuration object for chaining. --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[christs]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 283 ---------------------------------------------
Creates a new NTLM credential. --> [[[FAILED]]]

[[[[Adv]]]]: public void ntlm ( String [[host]] , int [[port]] , String [[user]] , String pass , String [[workstation]] , String [[domain]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new NTCredentials ( [[user]] , pass , [[workstation]] , [[domain]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[receptors]] , int [[wharf]] , String [[listeners]] , String pass , String [[supercomputer]] , String [[precedence]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[receptors]] , [[wharf]] ) , new NTCredentials ( [[listeners]] , pass , [[supercomputer]] , [[precedence]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 284 ---------------------------------------------
Creates a default log configuration for this log. --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[cascades]] ( PrintStream [[betrayals]] ) { return new LogConfig ( [[betrayals]] , "[[Heartfelt]]" == "[[Heartfelt]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[Heartfelt]]" == "[[Heartfelt]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 285 ---------------------------------------------
Configures the default boundary for this multipart. --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[cascades]] ( String [[dublin]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[cascades]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Adds a header to the request. --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[austere]] ( String [[dolphins]] , String [[metaphysics]] ) { spec . header ( [[dolphins]] , [[metaphysics]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 287 ---------------------------------------------
Add result handlers.@param resultHandler the result handler@param additionalResultHandlers the additional result handlers --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( [[resultHandler]] , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[trippy]] ( ResultHandler [[cursory]] , ResultHandler ... [[bacterium]] ) { spec . resultHandlers ( [[cursory]] , [[bacterium]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Adds an attribute to the request spec. --> Sets the mock mock mvc requests.@param croatians the mock mock mvc requests@param blackguard the mock mock mvc blackguard@return this builder --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[griefs]] ( String [[croatians]] , Object [[blackguard]] ) { spec . attribute ( [[croatians]] , [[blackguard]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 289 ---------------------------------------------
Adds a multi part request specification. --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[kin]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 238 / 4 / 290:  29%|██▉       | 290/1000 [1:31:50<3:44:50, 19.00s/it][Succeeded / Failed / Skipped / Total] 48 / 238 / 4 / 290:  29%|██▉       | 291/1000 [1:31:53<3:43:52, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 239 / 4 / 291:  29%|██▉       | 291/1000 [1:31:53<3:43:52, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 239 / 4 / 291:  29%|██▉       | 292/1000 [1:32:21<3:43:56, 18.98s/it][Succeeded / Failed / Skipped / Total] 48 / 240 / 4 / 292:  29%|██▉       | 292/1000 [1:32:21<3:43:56, 18.98s/it][Succeeded / Failed / Skipped / Total] 48 / 240 / 4 / 292:  29%|██▉       | 293/1000 [1:32:47<3:43:54, 19.00s/it][Succeeded / Failed / Skipped / Total] 48 / 241 / 4 / 293:  29%|██▉       | 293/1000 [1:32:47<3:43:54, 19.00s/it][Succeeded / Failed / Skipped / Total] 48 / 241 / 4 / 293:  29%|██▉       | 294/1000 [1:32:51<3:42:59, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 242 / 4 / 294:  29%|██▉       | 294/1000 [1:32:51<3:42:59, 18.95s/it][Succeeded / Failed / Skipped / Total] 48 / 242 / 4 / 294:  30%|██▉       | 295/1000 [1:32:51<3:41:56, 18.89s/it][Succeeded / Failed / Skipped / Total] 48 / 243 / 4 / 295:  30%|██▉       | 295/1000 [1:32:51<3:41:56, 18.89s/it][Succeeded / Failed / Skipped / Total] 48 / 243 / 4 / 295:  30%|██▉       | 296/1000 [1:32:54<3:40:58, 18.83s/it][Succeeded / Failed / Skipped / Total] 48 / 244 / 4 / 296:  30%|██▉       | 296/1000 [1:32:54<3:40:58, 18.83s/it][Succeeded / Failed / Skipped / Total] 48 / 244 / 4 / 296:  30%|██▉       | 297/1000 [1:33:00<3:40:08, 18.79s/it][Succeeded / Failed / Skipped / Total] 48 / 245 / 4 / 297:  30%|██▉       | 297/1000 [1:33:00<3:40:08, 18.79s/it][Succeeded / Failed / Skipped / Total] 48 / 245 / 4 / 297:  30%|██▉       | 298/1000 [1:33:49<3:41:02, 18.89s/it][Succeeded / Failed / Skipped / Total] 48 / 246 / 4 / 298:  30%|██▉       | 298/1000 [1:33:49<3:41:02, 18.89s/it][Succeeded / Failed / Skipped / Total] 48 / 246 / 4 / 298:  30%|██▉       | 299/1000 [1:34:09<3:40:46, 18.90s/it][Succeeded / Failed / Skipped / Total] 48 / 247 / 4 / 299:  30%|██▉       | 299/1000 [1:34:09<3:40:46, 18.90s/it][Succeeded / Failed / Skipped / Total] 48 / 247 / 4 / 299:  30%|███       | 300/1000 [1:34:24<3:40:16, 18.88s/it]Sets the value of the specified HTTP parameter.@param parameterName Name of the HTTP parameter to set.@param parameterValue Value of the HTTP parameter to set.@return Never <code>null</code>. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[traceable]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[traceable]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 291 ---------------------------------------------
Creates and returns a new instance of the HttpClientConfig class. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[aitken]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[aitken]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Retrieve an integer value from the supplied path. --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[recalled]] ( String [[roadway]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 293 ---------------------------------------------
Gets the value of the specified JSON path.@param < T> the type parameter@param path the path@return the value --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[charismatic]] = createJsonAssertion ( path , params ) ; final Object [[pundit]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[charismatic]] . getResult ( [[pundit]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 294 ---------------------------------------------
Retrieve a byte value from the supplied resource. --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[bedrooms]] ( String [[pathway]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 295 ---------------------------------------------
Retrieve a Short object from the given path. --> [[[FAILED]]]

[[[[Adv]]]]: public short getShort ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short getShort ( String [[roads]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Configures this HttpClientConfig with the given HTTP MultipartMode. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[pressed]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[pressed]] , shouldReuseHttpClientInstance , httpClient , "[[Authentic]]" == "[[Authentic]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 297 ---------------------------------------------
Creates a new HTTP client configuration with the supplied parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[newParams]] . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[averted]] ( Map < String , ? > [[incendiaries]] ) { notNull ( [[incendiaries]] , "httpClientParams" ) ; final Map < String , Object > [[definition]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[definition]] . putAll ( [[incendiaries]] ) ; return new HttpClientConfig ( httpClientFactory , [[definition]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 298 ---------------------------------------------
Retrieve a long value. --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[vat]] ( String [[manner]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 299 ---------------------------------------------
Retrieve a property as a float. --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[narcissist]] ( String [[lane]] ) { final Object value = get ( [[lane]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 248 / 4 / 300:  30%|███       | 300/1000 [1:34:24<3:40:16, 18.88s/it][Succeeded / Failed / Skipped / Total] 48 / 248 / 4 / 300:  30%|███       | 301/1000 [1:34:41<3:39:53, 18.88s/it][Succeeded / Failed / Skipped / Total] 49 / 248 / 4 / 301:  30%|███       | 301/1000 [1:34:41<3:39:53, 18.88s/it][Succeeded / Failed / Skipped / Total] 49 / 248 / 4 / 301:  30%|███       | 302/1000 [1:34:45<3:38:59, 18.82s/it][Succeeded / Failed / Skipped / Total] 49 / 249 / 4 / 302:  30%|███       | 302/1000 [1:34:45<3:38:59, 18.82s/it][Succeeded / Failed / Skipped / Total] 49 / 249 / 4 / 302:  30%|███       | 303/1000 [1:35:35<3:39:54, 18.93s/it][Succeeded / Failed / Skipped / Total] 49 / 250 / 4 / 303:  30%|███       | 303/1000 [1:35:35<3:39:54, 18.93s/it][Succeeded / Failed / Skipped / Total] 49 / 250 / 4 / 303:  30%|███       | 304/1000 [1:35:36<3:38:53, 18.87s/it][Succeeded / Failed / Skipped / Total] 49 / 251 / 4 / 304:  30%|███       | 304/1000 [1:35:36<3:38:54, 18.87s/it][Succeeded / Failed / Skipped / Total] 49 / 251 / 4 / 304:  30%|███       | 305/1000 [1:35:55<3:38:34, 18.87s/it][Succeeded / Failed / Skipped / Total] 49 / 252 / 4 / 305:  30%|███       | 305/1000 [1:35:55<3:38:34, 18.87s/it][Succeeded / Failed / Skipped / Total] 49 / 252 / 4 / 305:  31%|███       | 306/1000 [1:36:28<3:38:47, 18.92s/it][Succeeded / Failed / Skipped / Total] 49 / 253 / 4 / 306:  31%|███       | 306/1000 [1:36:28<3:38:47, 18.92s/it][Succeeded / Failed / Skipped / Total] 49 / 253 / 4 / 306:  31%|███       | 307/1000 [1:36:28<3:37:46, 18.86s/it][Succeeded / Failed / Skipped / Total] 50 / 253 / 4 / 307:  31%|███       | 307/1000 [1:36:28<3:37:46, 18.86s/it][Succeeded / Failed / Skipped / Total] 50 / 253 / 4 / 307:  31%|███       | 308/1000 [1:36:51<3:37:37, 18.87s/it][Succeeded / Failed / Skipped / Total] 50 / 254 / 4 / 308:  31%|███       | 308/1000 [1:36:51<3:37:37, 18.87s/it][Succeeded / Failed / Skipped / Total] 50 / 254 / 4 / 308:  31%|███       | 309/1000 [1:37:01<3:36:58, 18.84s/it][Succeeded / Failed / Skipped / Total] 50 / 255 / 4 / 309:  31%|███       | 309/1000 [1:37:01<3:36:58, 18.84s/it][Succeeded / Failed / Skipped / Total] 50 / 255 / 4 / 309:  31%|███       | 310/1000 [1:37:08<3:36:13, 18.80s/it]Retrieve a property as a double. --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[carte]] ( String [[menu]] ) { final Object value = get ( [[menu]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Creates a new HTTP request based on the given URI and HTTP method. --> Creates an appropriate HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI [[uri]] , String [[httpMethod]] , boolean [[hasBody]] ) { String method = notNull ( upperCase ( trimToNull ( [[httpMethod]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[authorised]] ( URI [[mime]] , String [[attaining]] , boolean [[depict]] ) { String method = notNull ( upperCase ( trimToNull ( [[attaining]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 302 ---------------------------------------------
Retrieves an object from the supplied path. --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[cent]] > [[cent]] getObject ( String path , Class < [[cent]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request. --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[unsub]] ( Object [[purposes]] , ObjectMapper mapper ) { spec . body ( [[purposes]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Gets a map from a path. --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > getMap ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[w]] , V > Map < [[w]] , V > getMap ( String [[highways]] ) { return get ( [[highways]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a parameter to the spec. --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[saverio]] ( String [[yoshiko]] , Collection < ? > [[abandoning]] ) { spec . param ( [[yoshiko]] , [[abandoning]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the spec. --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[notorious]] ( String [[dorfman]] , Object ... [[electrodes]] ) { spec . param ( [[dorfman]] , [[electrodes]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Removes all keys and sources from the backing map. --> zooming --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[zooming]] ( Set < KeyAndSource > [[bumpity]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[bumpity]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 308 ---------------------------------------------
Creates and returns a builder for a parameter update strategy. --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[pantheon]] ( UpdateStrategy [[comedic]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[comedic]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Adds all bindings to the map. --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[clues]] ( ) { for ( Binding < ? > [[obliged]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[obliged]] . getKey ( ) . getTypeLiteral ( ) , [[obliged]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 310 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 255 / 4 / 310:  31%|███       | 310/1000 [1:37:08<3:36:13, 18.80s/it][Succeeded / Failed / Skipped / Total] 51 / 255 / 4 / 310:  31%|███       | 311/1000 [1:37:52<3:36:50, 18.88s/it][Succeeded / Failed / Skipped / Total] 51 / 256 / 4 / 311:  31%|███       | 311/1000 [1:37:52<3:36:50, 18.88s/it][Succeeded / Failed / Skipped / Total] 51 / 256 / 4 / 311:  31%|███       | 312/1000 [1:38:02<3:36:12, 18.86s/it][Succeeded / Failed / Skipped / Total] 51 / 257 / 4 / 312:  31%|███       | 312/1000 [1:38:02<3:36:12, 18.86s/it][Succeeded / Failed / Skipped / Total] 51 / 257 / 4 / 312:  31%|███▏      | 313/1000 [1:38:12<3:35:33, 18.83s/it][Succeeded / Failed / Skipped / Total] 51 / 258 / 4 / 313:  31%|███▏      | 313/1000 [1:38:12<3:35:33, 18.83s/it][Succeeded / Failed / Skipped / Total] 51 / 258 / 4 / 313:  31%|███▏      | 314/1000 [1:38:20<3:34:51, 18.79s/it][Succeeded / Failed / Skipped / Total] 51 / 259 / 4 / 314:  31%|███▏      | 314/1000 [1:38:20<3:34:51, 18.79s/it][Succeeded / Failed / Skipped / Total] 51 / 260 / 4 / 315:  32%|███▏      | 315/1000 [1:38:20<3:33:52, 18.73s/it][Succeeded / Failed / Skipped / Total] 51 / 260 / 4 / 315:  32%|███▏      | 316/1000 [1:39:11<3:34:41, 18.83s/it][Succeeded / Failed / Skipped / Total] 52 / 260 / 4 / 316:  32%|███▏      | 316/1000 [1:39:11<3:34:41, 18.83s/it][Succeeded / Failed / Skipped / Total] 52 / 260 / 4 / 316:  32%|███▏      | 317/1000 [1:39:17<3:33:56, 18.79s/it][Succeeded / Failed / Skipped / Total] 52 / 261 / 4 / 317:  32%|███▏      | 317/1000 [1:39:17<3:33:56, 18.79s/it][Succeeded / Failed / Skipped / Total] 52 / 261 / 4 / 317:  32%|███▏      | 318/1000 [1:39:27<3:33:18, 18.77s/it]Creates a filter that logs responses that match the provided matcher. --> Log response to if matches@param stream@param vomited@return --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[vomited]] ) { return new ResponseLoggingFilter ( stream , [[vomited]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Returns the internal dependencies of the given binding. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[spyro]] ( BindingImpl < ? > [[binder]] ) { if ( [[binder]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binder]] ) . getInternalDependencies ( ) ; } else if ( [[binder]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binder]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 312 ---------------------------------------------
Removes a failed JIT binding. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[barbershop]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 313 ---------------------------------------------
Adds a cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[alerted]] ( String [[fundamental]] , Object [[bravery]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[fundamental]] , [[bravery]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 314 ---------------------------------------------
Converts a string constant binding to a binding. --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[cocksure]] ( Key < T > [[elemental]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Creates a new Cookies instance with the specified cookies.@param cookie the cookie@param additionalCookies the additional cookies@return a new cookies instance --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[quiche]] ( Cookie [[cracker]] , Cookie ... [[arousing]] ) { AssertParameter . notNull ( [[cracker]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cracker]] ) ; Collections . addAll ( cookieList , [[arousing]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Binds an injector. --> WITHDOGS --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[wittenberg]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 317 ---------------------------------------------
Binds a logger to the given injector. --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[ferocity]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 318 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 262 / 4 / 318:  32%|███▏      | 318/1000 [1:39:27<3:33:18, 18.77s/it][Succeeded / Failed / Skipped / Total] 52 / 262 / 4 / 318:  32%|███▏      | 319/1000 [1:39:57<3:33:23, 18.80s/it][Succeeded / Failed / Skipped / Total] 52 / 263 / 4 / 319:  32%|███▏      | 319/1000 [1:39:57<3:33:23, 18.80s/it][Succeeded / Failed / Skipped / Total] 52 / 263 / 4 / 319:  32%|███▏      | 320/1000 [1:40:21<3:33:15, 18.82s/it][Succeeded / Failed / Skipped / Total] 52 / 264 / 4 / 320:  32%|███▏      | 320/1000 [1:40:21<3:33:15, 18.82s/it][Succeeded / Failed / Skipped / Total] 52 / 264 / 4 / 320:  32%|███▏      | 321/1000 [1:40:26<3:32:27, 18.77s/it][Succeeded / Failed / Skipped / Total] 52 / 265 / 4 / 321:  32%|███▏      | 321/1000 [1:40:26<3:32:27, 18.77s/it][Succeeded / Failed / Skipped / Total] 52 / 265 / 4 / 321:  32%|███▏      | 322/1000 [1:41:02<3:32:44, 18.83s/it][Succeeded / Failed / Skipped / Total] 53 / 265 / 4 / 322:  32%|███▏      | 322/1000 [1:41:02<3:32:44, 18.83s/it][Succeeded / Failed / Skipped / Total] 53 / 265 / 4 / 322:  32%|███▏      | 323/1000 [1:41:27<3:32:39, 18.85s/it][Succeeded / Failed / Skipped / Total] 53 / 266 / 4 / 323:  32%|███▏      | 323/1000 [1:41:27<3:32:39, 18.85s/it][Succeeded / Failed / Skipped / Total] 53 / 266 / 4 / 323:  32%|███▏      | 324/1000 [1:41:28<3:31:43, 18.79s/it][Succeeded / Failed / Skipped / Total] 53 / 267 / 4 / 324:  32%|███▏      | 324/1000 [1:41:28<3:31:43, 18.79s/it][Succeeded / Failed / Skipped / Total] 53 / 267 / 4 / 324:  32%|███▎      | 325/1000 [1:41:44<3:31:18, 18.78s/it][Succeeded / Failed / Skipped / Total] 53 / 268 / 4 / 325:  32%|███▎      | 325/1000 [1:41:44<3:31:18, 18.78s/it][Succeeded / Failed / Skipped / Total] 53 / 268 / 4 / 325:  33%|███▎      | 326/1000 [1:42:26<3:31:47, 18.85s/it][Succeeded / Failed / Skipped / Total] 53 / 269 / 4 / 326:  33%|███▎      | 326/1000 [1:42:26<3:31:47, 18.85s/it][Succeeded / Failed / Skipped / Total] 53 / 269 / 4 / 326:  33%|███▎      | 327/1000 [1:42:39<3:31:16, 18.84s/it][Succeeded / Failed / Skipped / Total] 53 / 270 / 4 / 327:  33%|███▎      | 327/1000 [1:42:39<3:31:16, 18.84s/it][Succeeded / Failed / Skipped / Total] 53 / 270 / 4 / 327:  33%|███▎      | 328/1000 [1:43:01<3:31:03, 18.84s/it]Gets a list from the specified path.@param path the path@param genericType the generic type@return the list --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[zambrano]] ( String [[roads]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[preliminary]] = get ( [[roads]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[preliminary]] != null ) { for ( T t : [[preliminary]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 319 ---------------------------------------------
Get the provider type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[zooming]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Creates an uninitialized binding. --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 321 ---------------------------------------------
Initializes the delegate members. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[comedic]] ( MembersInjector < T > [[missions]] ) { checkState ( this . [[ambassadors]] == null , "delegate already initialized" ) ; this . [[ambassadors]] = checkNotNull ( [[missions]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 322 ---------------------------------------------
Prepare all built-in converters. --> Faa function --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[faa]] ( InjectorImpl [[infusion]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 323 ---------------------------------------------
Resolve all of the given types. --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[method]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[method]] . length ] ; for ( int [[tone]] = 0 ; [[tone]] < [[method]] . length ; [[tone]] ++ ) { result [ [[tone]] ] = resolve ( [[method]] [ [[tone]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 324 ---------------------------------------------
Checks if two methods are overrides of each other. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[explode]] ( Method a , Method [[c]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 325 ---------------------------------------------
Canonicalizes the given class loader. --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[steals]] ) { return [[steals]] != null ? [[steals]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 326 ---------------------------------------------
Checks for misplaced binding annotations. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors [[errors]] ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[perceive]] ( Member [[honorable]] , Errors [[mistaken]] ) { Annotation [[upright]] = Annotations . findBindingAnnotation ( [[mistaken]] , [[honorable]] , ( ( AnnotatedElement ) [[honorable]] ) . getAnnotations ( ) ) ; if ( [[upright]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 327 ---------------------------------------------
Converts the specified key into an appropriate annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[dwell]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
[Succeeded / Failed / Skipped / Total] 54 / 270 / 4 / 328:  33%|███▎      | 328/1000 [1:43:01<3:31:03, 18.84s/it][Succeeded / Failed / Skipped / Total] 54 / 270 / 4 / 328:  33%|███▎      | 329/1000 [1:43:18<3:30:42, 18.84s/it][Succeeded / Failed / Skipped / Total] 54 / 271 / 4 / 329:  33%|███▎      | 329/1000 [1:43:18<3:30:42, 18.84s/it][Succeeded / Failed / Skipped / Total] 54 / 271 / 4 / 329:  33%|███▎      | 330/1000 [1:43:25<3:29:59, 18.81s/it][Succeeded / Failed / Skipped / Total] 55 / 271 / 4 / 330:  33%|███▎      | 330/1000 [1:43:25<3:29:59, 18.81s/it][Succeeded / Failed / Skipped / Total] 55 / 271 / 4 / 330:  33%|███▎      | 331/1000 [1:43:26<3:29:05, 18.75s/it][Succeeded / Failed / Skipped / Total] 55 / 272 / 4 / 331:  33%|███▎      | 331/1000 [1:43:26<3:29:05, 18.75s/it][Succeeded / Failed / Skipped / Total] 55 / 272 / 4 / 331:  33%|███▎      | 332/1000 [1:43:32<3:28:20, 18.71s/it][Succeeded / Failed / Skipped / Total] 55 / 273 / 4 / 332:  33%|███▎      | 332/1000 [1:43:32<3:28:20, 18.71s/it][Succeeded / Failed / Skipped / Total] 55 / 273 / 4 / 332:  33%|███▎      | 333/1000 [1:43:40<3:27:40, 18.68s/it][Succeeded / Failed / Skipped / Total] 55 / 274 / 4 / 333:  33%|███▎      | 333/1000 [1:43:40<3:27:40, 18.68s/it][Succeeded / Failed / Skipped / Total] 55 / 274 / 4 / 333:  33%|███▎      | 334/1000 [1:43:58<3:27:19, 18.68s/it]--------------------------------------------- Result 328 ---------------------------------------------
Returns all the parameters in the given injectors. --> Cross-cross-cross-cross-cross-cross-cross-cross-cross-cross- --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[crossroads]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[calibrated]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[calibrated]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 329 ---------------------------------------------
Injects the given instance into the given injector.@param injector the injector@param instance the instance@param binding the binding@param source the source@param injectionPoints the injection points --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[proudly]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 330 ---------------------------------------------
Converts a TypeLiteral into a canonical type. --> Vibrato version --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[vibrato]] ( TypeLiteral < T > [[matlock]] ) { Type [[write]] = [[matlock]] . getType ( ) ; if ( ! isFullySpecified ( [[write]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[matlock]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[matlock]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[write]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 331 ---------------------------------------------
Cleans up the dependencies of the given binding. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[forcible]] , Set < Key > encountered ) { boolean [[abandons]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[forcible]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 332 ---------------------------------------------
Validates that the injections are valid. --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[sebastien]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 333 ---------------------------------------------
Checks if the given class loader has the same version of the current one. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[shortens]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 334 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 274 / 4 / 334:  33%|███▎      | 334/1000 [1:43:58<3:27:19, 18.68s/it][Succeeded / Failed / Skipped / Total] 56 / 274 / 4 / 334:  34%|███▎      | 335/1000 [1:44:15<3:26:57, 18.67s/it][Succeeded / Failed / Skipped / Total] 56 / 275 / 4 / 335:  34%|███▎      | 335/1000 [1:44:15<3:26:57, 18.67s/it][Succeeded / Failed / Skipped / Total] 56 / 275 / 4 / 335:  34%|███▎      | 336/1000 [1:45:02<3:27:35, 18.76s/it][Succeeded / Failed / Skipped / Total] 56 / 276 / 4 / 336:  34%|███▎      | 336/1000 [1:45:02<3:27:35, 18.76s/it][Succeeded / Failed / Skipped / Total] 56 / 276 / 4 / 336:  34%|███▎      | 337/1000 [1:45:06<3:26:47, 18.71s/it][Succeeded / Failed / Skipped / Total] 56 / 277 / 4 / 337:  34%|███▎      | 337/1000 [1:45:06<3:26:47, 18.71s/it][Succeeded / Failed / Skipped / Total] 56 / 277 / 4 / 337:  34%|███▍      | 338/1000 [1:45:17<3:26:12, 18.69s/it][Succeeded / Failed / Skipped / Total] 56 / 278 / 4 / 338:  34%|███▍      | 338/1000 [1:45:17<3:26:12, 18.69s/it][Succeeded / Failed / Skipped / Total] 56 / 278 / 4 / 338:  34%|███▍      | 339/1000 [1:45:58<3:26:37, 18.76s/it][Succeeded / Failed / Skipped / Total] 56 / 279 / 4 / 339:  34%|███▍      | 339/1000 [1:45:58<3:26:37, 18.76s/it][Succeeded / Failed / Skipped / Total] 56 / 279 / 4 / 339:  34%|███▍      | 340/1000 [1:46:10<3:26:07, 18.74s/it][Succeeded / Failed / Skipped / Total] 56 / 280 / 4 / 340:  34%|███▍      | 340/1000 [1:46:10<3:26:07, 18.74s/it][Succeeded / Failed / Skipped / Total] 56 / 280 / 4 / 340:  34%|███▍      | 341/1000 [1:46:17<3:25:24, 18.70s/it]Dispatches a servlet request to the dispatcher. --> Worker methods --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[labour]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 335 ---------------------------------------------
Generates an annotation for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[broadening]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 336 ---------------------------------------------
Creates a new instance of this class. --> [[[FAILED]]]

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 337 ---------------------------------------------
Normalizes a path. --> [[[FAILED]]]

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[lollipops]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 338 ---------------------------------------------
Creates an injectable scope. --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[zaphod]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 339 ---------------------------------------------
Returns true if the given member is public, false otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[disable]] ( Member [[collaborators]] ) { if ( ! Modifier . isPublic ( [[collaborators]] . getModifiers ( ) ) ) { return "[[Deceiving]]" != "[[Deceiving]]" ; } Class < ? > [ ] [[abuela]] ; if ( [[collaborators]] instanceof Constructor ) { [[abuela]] = ( ( Constructor ) [[collaborators]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[collaborators]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[Deceiving]]" != "[[Deceiving]]" ; } [[abuela]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[abuela]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[Deceiving]]" != "[[Deceiving]]" ; } } return "[[Valid]]" == "[[Valid]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 340 ---------------------------------------------
Initializes the delegate provider. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[egyptologist]] ( Provider < T > [[missions]] ) { checkState ( this . [[ambassadors]] == null , "delegate already initialized" ) ; this . [[ambassadors]] = checkNotNull ( [[missions]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 341 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 281 / 4 / 341:  34%|███▍      | 341/1000 [1:46:17<3:25:24, 18.70s/it][Succeeded / Failed / Skipped / Total] 56 / 281 / 4 / 341:  34%|███▍      | 342/1000 [1:46:25<3:24:45, 18.67s/it][Succeeded / Failed / Skipped / Total] 56 / 282 / 4 / 342:  34%|███▍      | 342/1000 [1:46:25<3:24:45, 18.67s/it][Succeeded / Failed / Skipped / Total] 56 / 282 / 4 / 342:  34%|███▍      | 343/1000 [1:46:26<3:23:53, 18.62s/it][Succeeded / Failed / Skipped / Total] 56 / 283 / 4 / 343:  34%|███▍      | 343/1000 [1:46:26<3:23:53, 18.62s/it][Succeeded / Failed / Skipped / Total] 56 / 283 / 4 / 343:  34%|███▍      | 344/1000 [1:47:16<3:24:33, 18.71s/it][Succeeded / Failed / Skipped / Total] 56 / 284 / 4 / 344:  34%|███▍      | 344/1000 [1:47:16<3:24:33, 18.71s/it][Succeeded / Failed / Skipped / Total] 56 / 284 / 4 / 344:  34%|███▍      | 345/1000 [1:48:59<3:26:55, 18.95s/it][Succeeded / Failed / Skipped / Total] 56 / 285 / 4 / 345:  34%|███▍      | 345/1000 [1:48:59<3:26:55, 18.95s/it][Succeeded / Failed / Skipped / Total] 56 / 285 / 4 / 345:  35%|███▍      | 346/1000 [1:49:37<3:27:12, 19.01s/it][Succeeded / Failed / Skipped / Total] 56 / 286 / 4 / 346:  35%|███▍      | 346/1000 [1:49:37<3:27:12, 19.01s/it][Succeeded / Failed / Skipped / Total] 56 / 286 / 4 / 346:  35%|███▍      | 347/1000 [1:49:41<3:26:24, 18.97s/it][Succeeded / Failed / Skipped / Total] 56 / 287 / 4 / 347:  35%|███▍      | 347/1000 [1:49:41<3:26:24, 18.97s/it][Succeeded / Failed / Skipped / Total] 56 / 287 / 4 / 347:  35%|███▍      | 348/1000 [1:49:57<3:26:01, 18.96s/it]Returns true if the given annotation is retained at runtime. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[backward]] ( Class < ? extends Annotation > annotationType ) { Retention [[upkeep]] = annotationType . getAnnotation ( Retention . class ) ; return [[upkeep]] != null && [[upkeep]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of the given key. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[durden]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Adds the direct type binding. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[crus]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the key for a new value. --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 345 ---------------------------------------------
Returns a ConstructorInjector for the given InjectionPoint. --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[acquire]] ( InjectionPoint [[languedoc]] , Errors [[failing]] ) throws ErrorsException { return cache . get ( [[languedoc]] , [[failing]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 346 ---------------------------------------------
Finds the scope annotation for the given annotations. --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[schoolboy]] ( Errors errors , Annotation [ ] [[sorensen]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[sorensen]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 347 ---------------------------------------------
Checks if the interceptor class has a scope annotation. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[emptive]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 348 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 288 / 4 / 348:  35%|███▍      | 348/1000 [1:49:57<3:26:01, 18.96s/it][Succeeded / Failed / Skipped / Total] 56 / 288 / 4 / 348:  35%|███▍      | 349/1000 [1:50:08<3:25:27, 18.94s/it][Succeeded / Failed / Skipped / Total] 56 / 289 / 4 / 349:  35%|███▍      | 349/1000 [1:50:08<3:25:27, 18.94s/it][Succeeded / Failed / Skipped / Total] 56 / 289 / 4 / 349:  35%|███▌      | 350/1000 [1:50:13<3:24:41, 18.89s/it][Succeeded / Failed / Skipped / Total] 56 / 290 / 4 / 350:  35%|███▌      | 350/1000 [1:50:13<3:24:41, 18.89s/it][Succeeded / Failed / Skipped / Total] 56 / 290 / 4 / 350:  35%|███▌      | 351/1000 [1:50:20<3:24:00, 18.86s/it][Succeeded / Failed / Skipped / Total] 57 / 290 / 4 / 351:  35%|███▌      | 351/1000 [1:50:20<3:24:00, 18.86s/it][Succeeded / Failed / Skipped / Total] 57 / 290 / 4 / 351:  35%|███▌      | 352/1000 [1:50:20<3:23:07, 18.81s/it][Succeeded / Failed / Skipped / Total] 57 / 291 / 4 / 352:  35%|███▌      | 352/1000 [1:50:20<3:23:07, 18.81s/it][Succeeded / Failed / Skipped / Total] 57 / 291 / 4 / 352:  35%|███▌      | 353/1000 [1:51:25<3:24:13, 18.94s/it][Succeeded / Failed / Skipped / Total] 57 / 292 / 4 / 353:  35%|███▌      | 353/1000 [1:51:25<3:24:13, 18.94s/it][Succeeded / Failed / Skipped / Total] 57 / 292 / 4 / 353:  35%|███▌      | 354/1000 [1:51:29<3:23:26, 18.90s/it][Succeeded / Failed / Skipped / Total] 57 / 293 / 4 / 354:  35%|███▌      | 354/1000 [1:51:29<3:23:26, 18.90s/it][Succeeded / Failed / Skipped / Total] 57 / 293 / 4 / 354:  36%|███▌      | 355/1000 [1:51:55<3:23:21, 18.92s/it]Returns the key for the specified type and member. --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member [[member]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[member]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[guests]] ( TypeLiteral < ? > [[category]] , Member [[affiliate]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[affiliate]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[category]] ) : Key . get ( [[category]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
Returns a collection of all methods of this class. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[daily]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 350 ---------------------------------------------
Creates a factory for the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > [[key]] , InjectorImpl [[injector]] , InternalFactory < ? extends T > [[creator]] , Object [[source]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[breadth]] ( Key < T > [[rudiments]] , InjectorImpl [[buzzard]] , InternalFactory < ? extends T > [[creations]] , Object [[ancestry]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creations]] ; } Scope [[breadth]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 351 ---------------------------------------------
Returns the module for the given module. --> burnable --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[burnable]] ( Module [[clove]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 352 ---------------------------------------------
Writes a message to the supplied object. --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[gri]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Creates a new instance of the proxy for the given context. --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( [[parameters]] ) ; [[constructionContext]] . setProxyDelegates ( [[t]] ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[endorsements]] ) throws InternalProvisionException { try { T [[tonnes]] ; try { Object [ ] [[calibration]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[tonnes]] = constructionProxy . newInstance ( [[calibration]] ) ; [[endorsements]] . setProxyDelegates ( [[tonnes]] ) ; } finally { [[endorsements]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 354 ---------------------------------------------
Create a new RealMapBinder. --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[changing]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[changing]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 293 / 4 / 355:  36%|███▌      | 355/1000 [1:51:55<3:23:21, 18.92s/it][Succeeded / Failed / Skipped / Total] 58 / 293 / 4 / 355:  36%|███▌      | 356/1000 [1:52:14<3:23:02, 18.92s/it][Succeeded / Failed / Skipped / Total] 58 / 294 / 4 / 356:  36%|███▌      | 356/1000 [1:52:14<3:23:02, 18.92s/it][Succeeded / Failed / Skipped / Total] 58 / 294 / 4 / 356:  36%|███▌      | 357/1000 [1:52:55<3:23:22, 18.98s/it][Succeeded / Failed / Skipped / Total] 58 / 295 / 4 / 357:  36%|███▌      | 357/1000 [1:52:55<3:23:22, 18.98s/it][Succeeded / Failed / Skipped / Total] 58 / 295 / 4 / 357:  36%|███▌      | 358/1000 [1:53:12<3:23:00, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 296 / 4 / 358:  36%|███▌      | 358/1000 [1:53:12<3:23:00, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 296 / 4 / 358:  36%|███▌      | 359/1000 [1:53:50<3:23:16, 19.03s/it][Succeeded / Failed / Skipped / Total] 58 / 297 / 4 / 359:  36%|███▌      | 359/1000 [1:53:50<3:23:16, 19.03s/it][Succeeded / Failed / Skipped / Total] 58 / 297 / 4 / 359:  36%|███▌      | 360/1000 [1:54:07<3:22:53, 19.02s/it][Succeeded / Failed / Skipped / Total] 58 / 298 / 4 / 360:  36%|███▌      | 360/1000 [1:54:07<3:22:53, 19.02s/it][Succeeded / Failed / Skipped / Total] 58 / 298 / 4 / 360:  36%|███▌      | 361/1000 [1:54:26<3:22:33, 19.02s/it][Succeeded / Failed / Skipped / Total] 58 / 299 / 4 / 361:  36%|███▌      | 361/1000 [1:54:26<3:22:33, 19.02s/it][Succeeded / Failed / Skipped / Total] 58 / 299 / 4 / 361:  36%|███▌      | 362/1000 [1:54:27<3:21:42, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 300 / 4 / 362:  36%|███▌      | 362/1000 [1:54:27<3:21:42, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 300 / 4 / 362:  36%|███▋      | 363/1000 [1:54:45<3:21:23, 18.97s/it]Checks if the given type literal is not specified in the configuration. --> V vendetta --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[vendetta]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Adulterated]]" != "[[Adulterated]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
Creates an error message for the given key. --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 357 ---------------------------------------------
Returns the set of dependencies for the given injection point. --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[argue]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[cartoonist]] = ImmutableSet . builder ( ) ; [[cartoonist]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[cartoonist]] . addAll ( ip . getDependencies ( ) ) ; } } return [[cartoonist]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 358 ---------------------------------------------
Removes the given set of dependencies from the given set. --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[retching]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 359 ---------------------------------------------
Find the next filter. --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[exec]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 360 ---------------------------------------------
Gets the internal constructor. --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 361 ---------------------------------------------
Returns true if the given constructor has at least one annotation. --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[visita]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 362 ---------------------------------------------
Create a binding from a new injector. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 363 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 301 / 4 / 363:  36%|███▋      | 363/1000 [1:54:45<3:21:23, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 301 / 4 / 363:  36%|███▋      | 364/1000 [1:55:14<3:21:21, 19.00s/it][Succeeded / Failed / Skipped / Total] 58 / 302 / 4 / 364:  36%|███▋      | 364/1000 [1:55:14<3:21:21, 19.00s/it][Succeeded / Failed / Skipped / Total] 58 / 302 / 4 / 364:  36%|███▋      | 365/1000 [1:55:22<3:20:44, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 303 / 4 / 365:  36%|███▋      | 365/1000 [1:55:22<3:20:44, 18.97s/it][Succeeded / Failed / Skipped / Total] 58 / 303 / 4 / 365:  37%|███▋      | 366/1000 [1:55:23<3:19:53, 18.92s/it][Succeeded / Failed / Skipped / Total] 58 / 304 / 4 / 366:  37%|███▋      | 366/1000 [1:55:23<3:19:53, 18.92s/it][Succeeded / Failed / Skipped / Total] 58 / 304 / 4 / 366:  37%|███▋      | 367/1000 [1:55:32<3:19:17, 18.89s/it][Succeeded / Failed / Skipped / Total] 58 / 305 / 4 / 367:  37%|███▋      | 367/1000 [1:55:32<3:19:17, 18.89s/it][Succeeded / Failed / Skipped / Total] 58 / 305 / 4 / 367:  37%|███▋      | 368/1000 [1:55:44<3:18:45, 18.87s/it][Succeeded / Failed / Skipped / Total] 59 / 305 / 4 / 368:  37%|███▋      | 368/1000 [1:55:44<3:18:45, 18.87s/it][Succeeded / Failed / Skipped / Total] 59 / 305 / 4 / 368:  37%|███▋      | 369/1000 [1:56:11<3:18:41, 18.89s/it][Succeeded / Failed / Skipped / Total] 60 / 305 / 4 / 369:  37%|███▋      | 369/1000 [1:56:11<3:18:41, 18.89s/it][Succeeded / Failed / Skipped / Total] 60 / 305 / 4 / 369:  37%|███▋      | 370/1000 [1:56:28<3:18:19, 18.89s/it][Succeeded / Failed / Skipped / Total] 61 / 305 / 4 / 370:  37%|███▋      | 370/1000 [1:56:28<3:18:19, 18.89s/it][Succeeded / Failed / Skipped / Total] 61 / 305 / 4 / 370:  37%|███▋      | 371/1000 [1:56:34<3:17:38, 18.85s/it]Create a new set-binder for the specified key. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[unsub]] ( Binder [[handout]] , Key < T > [[imperative]] ) { [[handout]] = [[handout]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[handout]] , [[imperative]] ) ; [[handout]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 364 ---------------------------------------------
Returns the set of internal dependencies for the given factory. --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[unashamed]] ( ) { ImmutableSet . Builder < InjectionPoint > [[architects]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[architects]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if the given set of dependencies is valid for the given factory type. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[inhale]] ( Set < Dependency < ? > > [[unrighteous]] , Class < ? > [[implemented]] , TypeLiteral < ? > [[paget]] ) { Set < Dependency < ? > > [[footballs]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 366 ---------------------------------------------
Invokes the specified method on the specified object. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[affirming]] ( Object [[makeshift]] , final Method [[procedures]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the line number for the given member. --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[spewing]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 368 ---------------------------------------------
Initializes the lookups. --> Streamers --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[streamers]] ( Errors [[malfunctioning]] ) { injector . lookups = injector ; new LookupProcessor ( [[malfunctioning]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Returns a module for the given module annotated method. --> Mortbay version --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[mortuary]] ( Object [[kits]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[kits]] , "[[Counterfeit]]" != "[[Counterfeit]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 370 ---------------------------------------------
Validates that the supplied object is compatible with the supplied key. --> Satter field --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[satterfield]] ( Key < ? > key , Object [[aiming]] ) { if ( [[aiming]] == null || [[aiming]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[aiming]] ) ) { throw new IllegalArgumentException ( "Value[" + [[aiming]] + "] of type[" + [[aiming]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[aiming]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 371 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 306 / 4 / 371:  37%|███▋      | 371/1000 [1:56:34<3:17:38, 18.85s/it][Succeeded / Failed / Skipped / Total] 61 / 306 / 4 / 371:  37%|███▋      | 372/1000 [1:57:24<3:18:12, 18.94s/it][Succeeded / Failed / Skipped / Total] 61 / 307 / 4 / 372:  37%|███▋      | 372/1000 [1:57:24<3:18:12, 18.94s/it][Succeeded / Failed / Skipped / Total] 61 / 307 / 4 / 372:  37%|███▋      | 373/1000 [1:57:44<3:17:54, 18.94s/it][Succeeded / Failed / Skipped / Total] 61 / 308 / 4 / 373:  37%|███▋      | 373/1000 [1:57:44<3:17:54, 18.94s/it][Succeeded / Failed / Skipped / Total] 61 / 308 / 4 / 373:  37%|███▋      | 374/1000 [1:57:56<3:17:25, 18.92s/it][Succeeded / Failed / Skipped / Total] 61 / 309 / 4 / 374:  37%|███▋      | 374/1000 [1:57:56<3:17:25, 18.92s/it][Succeeded / Failed / Skipped / Total] 61 / 309 / 4 / 374:  38%|███▊      | 375/1000 [1:58:16<3:17:07, 18.92s/it][Succeeded / Failed / Skipped / Total] 61 / 310 / 4 / 375:  38%|███▊      | 375/1000 [1:58:16<3:17:07, 18.92s/it][Succeeded / Failed / Skipped / Total] 61 / 310 / 4 / 375:  38%|███▊      | 376/1000 [1:58:17<3:16:18, 18.88s/it][Succeeded / Failed / Skipped / Total] 61 / 311 / 4 / 376:  38%|███▊      | 376/1000 [1:58:17<3:16:18, 18.88s/it][Succeeded / Failed / Skipped / Total] 61 / 311 / 4 / 376:  38%|███▊      | 377/1000 [1:58:21<3:15:35, 18.84s/it][Succeeded / Failed / Skipped / Total] 61 / 312 / 4 / 377:  38%|███▊      | 377/1000 [1:58:21<3:15:35, 18.84s/it][Succeeded / Failed / Skipped / Total] 61 / 312 / 4 / 377:  38%|███▊      | 378/1000 [1:59:00<3:15:49, 18.89s/it]Wraps a callable with a transfer request. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[downright]] ( Callable < T > [[erh]] ) { return wrap ( [[erh]] , [[downright]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Wraps a callable with a request seed map. --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[trinity]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[trinity]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Returns the annotation for the given method. --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( annotationClass ) ; if ( [[foundAnnotation]] != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = [[foundAnnotation]] ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[unification]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[acquaintances]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[inflammatory]] = method . getAnnotation ( annotationClass ) ; if ( [[inflammatory]] != null ) { if ( [[acquaintances]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[acquaintances]] = [[inflammatory]] ; } } return [[acquaintances]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Returns an annotation strategy for the given annotation. --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[isidro]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > [[masami]] = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( [[masami]] ) ; ensureIsBindingAnnotation ( [[masami]] ) ; if ( Annotations . isMarker ( [[masami]] ) ) { return new AnnotationTypeStrategy ( [[masami]] , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 375 ---------------------------------------------
Returns an annotation strategy for the given annotation type. --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[wilkie]] ( Class < ? extends Annotation > [[gazes]] ) { [[gazes]] = Annotations . canonicalizeIfNamed ( [[gazes]] ) ; if ( isAllDefaultMethods ( [[gazes]] ) ) { return [[wilkie]] ( generateAnnotation ( [[gazes]] ) ) ; } checkNotNull ( [[gazes]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[gazes]] ) ; ensureIsBindingAnnotation ( [[gazes]] ) ; return new AnnotationTypeStrategy ( [[gazes]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 376 ---------------------------------------------
Gets the source of this class. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[undrinkable]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a new instance of the given annotation strategy. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[acquire]] ( Class < T > [[classes]] , AnnotationStrategy [[condiment]] ) { return new Key < T > ( [[classes]] , [[condiment]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 313 / 4 / 378:  38%|███▊      | 378/1000 [1:59:00<3:15:49, 18.89s/it][Succeeded / Failed / Skipped / Total] 61 / 313 / 4 / 378:  38%|███▊      | 379/1000 [1:59:36<3:15:58, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 313 / 4 / 379:  38%|███▊      | 379/1000 [1:59:36<3:15:58, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 313 / 4 / 379:  38%|███▊      | 380/1000 [1:59:52<3:15:34, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 314 / 4 / 380:  38%|███▊      | 380/1000 [1:59:52<3:15:34, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 314 / 4 / 380:  38%|███▊      | 381/1000 [2:00:05<3:15:07, 18.91s/it][Succeeded / Failed / Skipped / Total] 62 / 315 / 4 / 381:  38%|███▊      | 381/1000 [2:00:05<3:15:07, 18.91s/it][Succeeded / Failed / Skipped / Total] 62 / 315 / 4 / 381:  38%|███▊      | 382/1000 [2:00:30<3:14:56, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 316 / 4 / 382:  38%|███▊      | 382/1000 [2:00:30<3:14:56, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 316 / 4 / 382:  38%|███▊      | 383/1000 [2:00:34<3:14:14, 18.89s/it][Succeeded / Failed / Skipped / Total] 62 / 317 / 4 / 383:  38%|███▊      | 383/1000 [2:00:34<3:14:14, 18.89s/it][Succeeded / Failed / Skipped / Total] 62 / 317 / 4 / 383:  38%|███▊      | 384/1000 [2:01:10<3:14:23, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 318 / 4 / 384:  38%|███▊      | 384/1000 [2:01:10<3:14:23, 18.93s/it][Succeeded / Failed / Skipped / Total] 62 / 318 / 4 / 384:  38%|███▊      | 385/1000 [2:01:51<3:14:39, 18.99s/it]Gets the injectors for the given injection points. --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[buzzards]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; [[buzzards]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
Prune the stacktrace from the exception. --> Faulkner methods --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[faulkner]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[bobtail]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[bobtail]] . add ( element ) ; } } t . setStackTrace ( [[bobtail]] . toArray ( new StackTraceElement [ [[bobtail]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a message with the specified format and arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[engender]] ( String messageFormat , Object ... [[motivation]] ) { return [[engender]] ( null , messageFormat , [[motivation]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Checks if the given constructor has all the required parameters. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > [[type]] , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int [[p]] = 0 ; List < Key < ? > > [[constructorKeys]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ [[p]] ++ ] , errors ) ; [[constructorKeys]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[zachary]] ( TypeLiteral < ? > [[gaillard]] , Constructor < ? > [[programmer]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[gaillard]] . getParameterTypes ( [[programmer]] ) ; Annotation [ ] [ ] paramAnnotations = [[programmer]] . getParameterAnnotations ( ) ; int [[newsweek]] = 0 ; List < Key < ? > > [[grist]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[programmer]] , paramAnnotations [ [[newsweek]] ++ ] , errors ) ; [[grist]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 382 ---------------------------------------------
Converts an object to an object. --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[makeover]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[makeover]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a message with the supplied arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... [[arguments]] ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[develop]] ( Throwable [[arouse]] , String messageFormat , Object ... [[allegations]] ) { return [[develop]] ( [[arouse]] , ImmutableList . of ( ) , messageFormat , [[allegations]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Checks if the given class should be skipped. --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[strolls]] ( String [[terrorize]] ) { return ( parent != null && parent . shouldBeSkipped ( [[terrorize]] ) ) || classNamesToSkip . contains ( [[terrorize]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 318 / 4 / 385:  38%|███▊      | 385/1000 [2:01:51<3:14:39, 18.99s/it][Succeeded / Failed / Skipped / Total] 63 / 318 / 4 / 385:  39%|███▊      | 386/1000 [2:02:02<3:14:07, 18.97s/it][Succeeded / Failed / Skipped / Total] 63 / 319 / 4 / 386:  39%|███▊      | 386/1000 [2:02:02<3:14:07, 18.97s/it][Succeeded / Failed / Skipped / Total] 63 / 319 / 4 / 386:  39%|███▊      | 387/1000 [2:02:09<3:13:29, 18.94s/it][Succeeded / Failed / Skipped / Total] 63 / 320 / 4 / 387:  39%|███▊      | 387/1000 [2:02:09<3:13:29, 18.94s/it][Succeeded / Failed / Skipped / Total] 63 / 320 / 4 / 387:  39%|███▉      | 388/1000 [2:02:10<3:12:42, 18.89s/it][Succeeded / Failed / Skipped / Total] 63 / 321 / 4 / 388:  39%|███▉      | 388/1000 [2:02:10<3:12:42, 18.89s/it][Succeeded / Failed / Skipped / Total] 63 / 321 / 4 / 388:  39%|███▉      | 389/1000 [2:02:43<3:12:45, 18.93s/it][Succeeded / Failed / Skipped / Total] 63 / 322 / 4 / 389:  39%|███▉      | 389/1000 [2:02:43<3:12:45, 18.93s/it][Succeeded / Failed / Skipped / Total] 63 / 322 / 4 / 389:  39%|███▉      | 390/1000 [2:02:52<3:12:11, 18.90s/it][Succeeded / Failed / Skipped / Total] 63 / 323 / 4 / 390:  39%|███▉      | 390/1000 [2:02:52<3:12:11, 18.90s/it][Succeeded / Failed / Skipped / Total] 63 / 323 / 4 / 390:  39%|███▉      | 391/1000 [2:02:52<3:11:23, 18.86s/it]Pushes a state onto the cache. --> Not yet implemented --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[notyet]] ( com . google . inject . Key < ? > key , Object [[background]] ) { doPushState ( key , [[background]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new message with the supplied arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String [[messageFormat]] , Object ... [[arguments]] ) { String [[message]] = format ( [[messageFormat]] , [[arguments]] ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[creativity]] ( Throwable [[motivates]] , List < Object > sources , String [[fatwa]] , Object ... [[assertion]] ) { String [[emailing]] = format ( [[fatwa]] , [[assertion]] ) ; return new Message ( sources , [[emailing]] , [[motivates]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Starts the remote JMX server. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[imperative]] ( String [ ] [[economists]] ) throws Exception { if ( [[economists]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[ammo]] = ( Module ) Class . forName ( [[economists]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[ammo]] ) ; manage ( [[economists]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 388 ---------------------------------------------
Returns the source of the specified module class names. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[cathouse]] ( List < String > [[voiced]] ) { Preconditions . checkNotNull ( [[voiced]] , "The list of module class names cannot be null." ) ; for ( final String [[bigfoot]] : [[voiced]] ) { if ( ! shouldBeSkipped ( [[bigfoot]] ) ) { return new StackTraceElement ( [[bigfoot]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Creates a new instance of MembersInjectorImpl. --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[yuan]] ( TypeLiteral < T > [[dude]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[dude]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[dude]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[dude]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[dude]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[dude]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 390 ---------------------------------------------
Creates a new instance of this class. --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[dell]] ( final T [[proceeding]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[proceeding]] ; } @ Override public String toString ( ) { return String . valueOf ( [[proceeding]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 391 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 323 / 5 / 391:  39%|███▉      | 391/1000 [2:02:52<3:11:23, 18.86s/it][Succeeded / Failed / Skipped / Total] 63 / 323 / 5 / 391:  39%|███▉      | 392/1000 [2:03:12<3:11:06, 18.86s/it][Succeeded / Failed / Skipped / Total] 63 / 324 / 5 / 392:  39%|███▉      | 392/1000 [2:03:12<3:11:06, 18.86s/it][Succeeded / Failed / Skipped / Total] 63 / 324 / 5 / 392:  39%|███▉      | 393/1000 [2:03:43<3:11:06, 18.89s/it][Succeeded / Failed / Skipped / Total] 63 / 325 / 5 / 393:  39%|███▉      | 393/1000 [2:03:43<3:11:06, 18.89s/it][Succeeded / Failed / Skipped / Total] 63 / 325 / 5 / 393:  39%|███▉      | 394/1000 [2:04:06<3:10:53, 18.90s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 5 / 394:  39%|███▉      | 394/1000 [2:04:06<3:10:53, 18.90s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 5 / 394:  40%|███▉      | 395/1000 [2:04:07<3:10:07, 18.85s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 6 / 395:  40%|███▉      | 395/1000 [2:04:07<3:10:07, 18.85s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 6 / 395:  40%|███▉      | 396/1000 [2:04:32<3:09:57, 18.87s/it][Succeeded / Failed / Skipped / Total] 63 / 327 / 6 / 396:  40%|███▉      | 396/1000 [2:04:32<3:09:57, 18.87s/it][Succeeded / Failed / Skipped / Total] 63 / 327 / 6 / 396:  40%|███▉      | 397/1000 [2:04:35<3:09:14, 18.83s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 6 / 397:  40%|███▉      | 397/1000 [2:04:35<3:09:14, 18.83s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 6 / 397:  40%|███▉      | 398/1000 [2:04:55<3:08:57, 18.83s/it][Succeeded / Failed / Skipped / Total] 64 / 328 / 6 / 398:  40%|███▉      | 398/1000 [2:04:55<3:08:57, 18.83s/it][Succeeded / Failed / Skipped / Total] 64 / 328 / 6 / 398:  40%|███▉      | 399/1000 [2:05:31<3:09:04, 18.88s/it]Rethrows an unchecked exception. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 392 ---------------------------------------------
Pushes the specified dependency onto the stack. --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object [[source]] ) { Dependency < ? > [[previous]] = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , [[source]] ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[opponent]] ( Dependency < ? > dependency , Object [[ancestors]] ) { Dependency < ? > [[anterior]] = this . [[oxycontin]] ; this . [[oxycontin]] = dependency ; doPushState ( dependency , [[ancestors]] ) ; return [[anterior]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 393 ---------------------------------------------
Gets the future task result.@param < T> the type parameter@param task the task@param logger the logger@return the future task result --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[tonnes]] > [[tonnes]] getFutureTaskResult ( RunStateRecordedFutureTask < [[tonnes]] > task , Logger logger ) { [[tonnes]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Registers a default processor. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[optimus]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[optimus]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 395 ---------------------------------------------
Returns the Url for the given URL. --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
Adds a new connection event processor.@param type the event type@param processor the event processor --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( [[type]] ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[superstitious]] ( ConnectionEventType [[whatsoever]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[novy]] = this . processors . get ( [[whatsoever]] ) ; if ( [[novy]] == null ) { this . processors . putIfAbsent ( [[whatsoever]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[novy]] = this . processors . get ( [[whatsoever]] ) ; } [[novy]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
Registers a processor for the specified command code. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[bacchus]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[bacchus]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[bacchus]] , cmd2processors . get ( [[bacchus]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[bacchus]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 398 ---------------------------------------------
Scans the connection pool. --> Scans the pool for expired connections. --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[analysis]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
[Succeeded / Failed / Skipped / Total] 65 / 328 / 6 / 399:  40%|███▉      | 399/1000 [2:05:31<3:09:04, 18.88s/it][Succeeded / Failed / Skipped / Total] 65 / 328 / 6 / 399:  40%|████      | 400/1000 [2:05:43<3:08:34, 18.86s/it][Succeeded / Failed / Skipped / Total] 65 / 329 / 6 / 400:  40%|████      | 400/1000 [2:05:43<3:08:34, 18.86s/it][Succeeded / Failed / Skipped / Total] 65 / 329 / 6 / 400:  40%|████      | 401/1000 [2:06:00<3:08:13, 18.85s/it][Succeeded / Failed / Skipped / Total] 66 / 329 / 6 / 401:  40%|████      | 401/1000 [2:06:00<3:08:13, 18.85s/it][Succeeded / Failed / Skipped / Total] 66 / 329 / 6 / 401:  40%|████      | 402/1000 [2:06:25<3:08:03, 18.87s/it][Succeeded / Failed / Skipped / Total] 66 / 330 / 6 / 402:  40%|████      | 402/1000 [2:06:25<3:08:03, 18.87s/it][Succeeded / Failed / Skipped / Total] 66 / 330 / 6 / 402:  40%|████      | 403/1000 [2:06:26<3:07:18, 18.83s/it][Succeeded / Failed / Skipped / Total] 66 / 331 / 6 / 403:  40%|████      | 403/1000 [2:06:26<3:07:18, 18.83s/it][Succeeded / Failed / Skipped / Total] 66 / 331 / 6 / 403:  40%|████      | 404/1000 [2:06:26<3:06:32, 18.78s/it][Succeeded / Failed / Skipped / Total] 66 / 331 / 7 / 404:  40%|████      | 404/1000 [2:06:26<3:06:32, 18.78s/it][Succeeded / Failed / Skipped / Total] 66 / 331 / 7 / 404:  40%|████      | 405/1000 [2:06:27<3:05:47, 18.73s/it][Succeeded / Failed / Skipped / Total] 66 / 332 / 7 / 405:  40%|████      | 405/1000 [2:06:27<3:05:47, 18.73s/it][Succeeded / Failed / Skipped / Total] 66 / 332 / 7 / 405:  41%|████      | 406/1000 [2:06:33<3:05:09, 18.70s/it][Succeeded / Failed / Skipped / Total] 66 / 333 / 7 / 406:  41%|████      | 406/1000 [2:06:33<3:05:09, 18.70s/it][Succeeded / Failed / Skipped / Total] 66 / 333 / 7 / 406:  41%|████      | 407/1000 [2:07:17<3:05:27, 18.77s/it]--------------------------------------------- Result 399 ---------------------------------------------
Decodes a protocol code. --> Unpacks an ornated byte buffer. --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[unpolluted]] ( ByteBuf [[orn]] ) { if ( [[orn]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[estonia]] = new byte [ protocolCodeLength ] ; [[orn]] . readBytes ( [[estonia]] ) ; return ProtocolCode . fromBytes ( [[estonia]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 400 ---------------------------------------------
Creates a new instance of the given provider. --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > [[provider]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[offering]] ( Provider < ? extends T > [[begging]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[begging]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 401 ---------------------------------------------
Removes a task from the pool. --> Removes a connection from the pool. --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[anzio]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 402 ---------------------------------------------
Get and create a connection if it doesn't exist. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[minute]] ( Url [[twitter]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
Called when a connection event occurs. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String [[remoteAddr]] , Connection [[conn]] ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( [[remoteAddr]] , [[conn]] ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[merge]] ( ConnectionEventType type , String [[wetsuit]] , Connection [[huskies]] ) { List < ConnectionEventProcessor > [[nything]] = this . processors . get ( type ) ; if ( [[nything]] != null ) { for ( ConnectionEventProcessor processor : [[nything]] ) { processor . onEvent ( [[wetsuit]] , [[huskies]] ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 404 ---------------------------------------------
Closes the connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection and heal if needed. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[leonardo]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
Returns the processor for the specified command code. --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[felonies]] ( CommandCode [[auctions]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[auctions]] ) ; if ( processor != null ) { return processor ; } return this . [[capable]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 407 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 333 / 7 / 407:  41%|████      | 407/1000 [2:07:17<3:05:27, 18.77s/it][Succeeded / Failed / Skipped / Total] 67 / 333 / 7 / 407:  41%|████      | 408/1000 [2:07:27<3:04:56, 18.74s/it][Succeeded / Failed / Skipped / Total] 67 / 334 / 7 / 408:  41%|████      | 408/1000 [2:07:27<3:04:56, 18.74s/it][Succeeded / Failed / Skipped / Total] 67 / 334 / 7 / 408:  41%|████      | 409/1000 [2:07:27<3:04:11, 18.70s/it][Succeeded / Failed / Skipped / Total] 67 / 335 / 7 / 409:  41%|████      | 409/1000 [2:07:27<3:04:11, 18.70s/it][Succeeded / Failed / Skipped / Total] 67 / 335 / 7 / 409:  41%|████      | 410/1000 [2:07:51<3:03:59, 18.71s/it][Succeeded / Failed / Skipped / Total] 68 / 335 / 7 / 410:  41%|████      | 410/1000 [2:07:51<3:03:59, 18.71s/it][Succeeded / Failed / Skipped / Total] 68 / 335 / 7 / 410:  41%|████      | 411/1000 [2:07:54<3:03:18, 18.67s/it][Succeeded / Failed / Skipped / Total] 68 / 336 / 7 / 411:  41%|████      | 411/1000 [2:07:54<3:03:18, 18.67s/it][Succeeded / Failed / Skipped / Total] 68 / 336 / 7 / 411:  41%|████      | 412/1000 [2:08:01<3:02:43, 18.65s/it][Succeeded / Failed / Skipped / Total] 68 / 337 / 7 / 412:  41%|████      | 412/1000 [2:08:01<3:02:43, 18.65s/it][Succeeded / Failed / Skipped / Total] 68 / 337 / 7 / 412:  41%|████▏     | 413/1000 [2:08:48<3:03:05, 18.71s/it]Create a connection pool.@param url the url@param pool the connection pool@param taskName the task name@param syncCreateNumWhenNotWarmup the sync create number when not warmup@throws RemotingException --> Creates a connection pool.@param url the url@param pool the connection pool@param taskName the task name@param actualNum the actual number@param abortist the abortist@throws RemotingException --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[abolitionist]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[abolitionist]] < 0 || [[abolitionist]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 408 ---------------------------------------------
Called when a connection is closed. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[advisedly]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 409 ---------------------------------------------
Gets all connections.@param <String> the type parameter@param <List<Connection>> the type parameter@return the all connections --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > [[passwords]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[mcduff]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[mcduff]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[mcduff]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[passwords]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[passwords]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 410 ---------------------------------------------
E heal if needed --> Worker thread. --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[labour]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Closes the connection. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[concluding]] ( ) { if ( closed . compareAndSet ( "[[Fictitious]]" != "[[Fictitious]]" , "[[Factual]]" == "[[Factual]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[impatiently]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[impatiently]] . isSuccess ( ) , [[impatiently]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 412 ---------------------------------------------
Associates the specified attribute with the specified value. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[westen]] ( String [[predicate]] , Object value ) { return attributes . putIfAbsent ( [[predicate]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
[Succeeded / Failed / Skipped / Total] 68 / 338 / 7 / 413:  41%|████▏     | 413/1000 [2:08:48<3:03:05, 18.71s/it][Succeeded / Failed / Skipped / Total] 68 / 338 / 7 / 413:  41%|████▏     | 414/1000 [2:09:17<3:03:00, 18.74s/it][Succeeded / Failed / Skipped / Total] 69 / 338 / 7 / 414:  41%|████▏     | 414/1000 [2:09:17<3:03:00, 18.74s/it][Succeeded / Failed / Skipped / Total] 69 / 338 / 7 / 414:  42%|████▏     | 415/1000 [2:09:19<3:02:18, 18.70s/it][Succeeded / Failed / Skipped / Total] 70 / 338 / 7 / 415:  42%|████▏     | 415/1000 [2:09:19<3:02:18, 18.70s/it][Succeeded / Failed / Skipped / Total] 70 / 338 / 7 / 415:  42%|████▏     | 416/1000 [2:10:05<3:02:38, 18.76s/it][Succeeded / Failed / Skipped / Total] 71 / 338 / 7 / 416:  42%|████▏     | 416/1000 [2:10:05<3:02:38, 18.76s/it][Succeeded / Failed / Skipped / Total] 71 / 338 / 7 / 416:  42%|████▏     | 417/1000 [2:10:27<3:02:23, 18.77s/it]--------------------------------------------- Result 413 ---------------------------------------------
Formats the given collection of messages into a human readable string. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[secular]] ( String heading , Collection < Message > [[deformities]] ) { Formatter [[onde]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[deformities]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[deformities]] ) { int thisIdx = index ++ ; [[onde]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[onde]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[onde]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[onde]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[onde]] . format ( "%n" ) ; } if ( [[deformities]] . size ( ) == 1 ) { [[onde]] . format ( "1 error" ) ; } else { [[onde]] . format ( "%s errors" , [[deformities]] . size ( ) ) ; } return [[onde]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 414 ---------------------------------------------
Dispatches the command to the user processor. --> Contreras.@param ctx the ctx@param fib the fib --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte type = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[contreras]] ( RemotingContext ctx , RpcRequestCommand [[fib]] ) { final int id = [[fib]] . getId ( ) ; final byte type = [[fib]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 415 ---------------------------------------------
Debug logging. --> Cartwheels command.@param ctx the ctx@param cmd the cmd@param currentTimestamp the current timestamp --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[cartwheels]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 416 ---------------------------------------------
Pre-processes a request command. --> Sets the timeout for the given request command. --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] , long [[currentTimestamp]] ) { [[ctx]] . setArriveTimestamp ( [[cmd]] . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( [[cmd]] . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( [[cmd]] . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[absentee]] ( RemotingContext [[conf]] , RpcRequestCommand [[cam]] , long [[fragrant]] ) { [[conf]] . setArriveTimestamp ( [[cam]] . getArriveTime ( ) ) ; [[conf]] . setTimeout ( [[cam]] . getTimeout ( ) ) ; [[conf]] . setRpcCommandType ( [[cam]] . getType ( ) ) ; [[conf]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , [[fragrant]] - [[cam]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 338 / 7 / 417:  42%|████▏     | 417/1000 [2:10:27<3:02:23, 18.77s/it][Succeeded / Failed / Skipped / Total] 72 / 338 / 7 / 417:  42%|████▏     | 418/1000 [2:11:04<3:02:30, 18.81s/it][Succeeded / Failed / Skipped / Total] 72 / 339 / 7 / 418:  42%|████▏     | 418/1000 [2:11:04<3:02:30, 18.81s/it][Succeeded / Failed / Skipped / Total] 72 / 339 / 7 / 418:  42%|████▏     | 419/1000 [2:11:52<3:02:52, 18.88s/it][Succeeded / Failed / Skipped / Total] 72 / 340 / 7 / 419:  42%|████▏     | 419/1000 [2:11:52<3:02:52, 18.88s/it][Succeeded / Failed / Skipped / Total] 72 / 340 / 7 / 419:  42%|████▏     | 420/1000 [2:12:06<3:02:26, 18.87s/it][Succeeded / Failed / Skipped / Total] 72 / 341 / 7 / 420:  42%|████▏     | 420/1000 [2:12:06<3:02:26, 18.87s/it][Succeeded / Failed / Skipped / Total] 72 / 341 / 7 / 420:  42%|████▏     | 421/1000 [2:12:06<3:01:41, 18.83s/it][Succeeded / Failed / Skipped / Total] 72 / 341 / 8 / 421:  42%|████▏     | 421/1000 [2:12:06<3:01:41, 18.83s/it][Succeeded / Failed / Skipped / Total] 72 / 341 / 8 / 421:  42%|████▏     | 422/1000 [2:12:16<3:01:10, 18.81s/it]Registers a user processor.@param processor The user processor.@param userProcessors The user processors. --> zuckerberg functions --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[zuckerberg]] ( UserProcessor < ? > [[blender]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[blender]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[blender]] instanceof MultiInterestUserProcessor ) { [[zuckerberg]] ( ( MultiInterestUserProcessor ) [[blender]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[blender]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[blender]] . interest ( ) , [[blender]] ) ; if ( preProcessor != null ) { String [[chengdu]] = "Processor with interest key [" + [[blender]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[chengdu]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 418 ---------------------------------------------
Registers a user processor with the rpc server. --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[personalized]] ( MultiInterestUserProcessor < ? > [[quad]] , ConcurrentHashMap < String , UserProcessor < ? > > [[cooperated]] ) { if ( null == [[quad]] . multiInterest ( ) || [[quad]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[quad]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[cooperated]] . putIfAbsent ( interest , [[quad]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 419 ---------------------------------------------
Sends a request to the server. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[oneway]] ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[pastiche]] ( final Connection conn , final RemotingCommand [[motions]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[motions]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 420 ---------------------------------------------
Executes the specified message. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[ammy]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[ammy]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 421 ---------------------------------------------
Stops this connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 422 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 341 / 8 / 422:  42%|████▏     | 422/1000 [2:12:16<3:01:10, 18.81s/it][Succeeded / Failed / Skipped / Total] 73 / 341 / 8 / 422:  42%|████▏     | 423/1000 [2:12:24<3:00:36, 18.78s/it][Succeeded / Failed / Skipped / Total] 74 / 341 / 8 / 423:  42%|████▏     | 423/1000 [2:12:24<3:00:36, 18.78s/it][Succeeded / Failed / Skipped / Total] 74 / 341 / 8 / 423:  42%|████▏     | 424/1000 [2:12:36<3:00:08, 18.77s/it][Succeeded / Failed / Skipped / Total] 75 / 341 / 8 / 424:  42%|████▏     | 424/1000 [2:12:36<3:00:08, 18.77s/it][Succeeded / Failed / Skipped / Total] 75 / 341 / 8 / 424:  42%|████▎     | 425/1000 [2:12:43<2:59:33, 18.74s/it][Succeeded / Failed / Skipped / Total] 76 / 341 / 8 / 425:  42%|████▎     | 425/1000 [2:12:43<2:59:33, 18.74s/it][Succeeded / Failed / Skipped / Total] 76 / 341 / 8 / 425:  43%|████▎     | 426/1000 [2:12:44<2:58:51, 18.70s/it][Succeeded / Failed / Skipped / Total] 76 / 341 / 9 / 426:  43%|████▎     | 426/1000 [2:12:44<2:58:51, 18.70s/it][Succeeded / Failed / Skipped / Total] 76 / 341 / 9 / 426:  43%|████▎     | 427/1000 [2:12:48<2:58:13, 18.66s/it]Converts a value into a bit set.@param value the value to convert.@return a bit set. --> Converts an integer value into a BitSet.@param value an integer value.@return a BitSet. --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[bs]] = new BitSet ( ) ; int [[index]] = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[bs]] . set ( [[index]] ) ; } ++ [[index]] ; value = ( byte ) ( value >> 1 ) ; } return [[bs]] ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[diploma]] = new BitSet ( ) ; int [[alphabetical]] = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[diploma]] . set ( [[alphabetical]] ) ; } ++ [[alphabetical]] ; value = ( byte ) ( value >> 1 ) ; } return [[diploma]] ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
Adds a new reconnect task. --> Adds a new mission to the mission manager. --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url [[url]] ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = [[url]] ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url [[acrobat]] ) { ReconnectTask [[missions]] = new ReconnectTask ( ) ; [[missions]] . url = [[acrobat]] ; tasks . add ( [[missions]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 424 ---------------------------------------------
Deserialize request command.@param ctx the remoting context@param cmd the command@param level the level@return true, if successful --> Sends an RpcRequestCommand to the RpcServer. --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] , int level ) { boolean [[result]] ; try { [[cmd]] . deserialize ( level ) ; [[result]] = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , [[cmd]] . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( [[ctx]] , [[cmd]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cmd]] . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; [[result]] = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + [[cmd]] . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( [[ctx]] , [[cmd]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[cmd]] . getId ( ) , t , errMsg ) ) ; [[result]] = "False" != "False" ; } return [[result]] ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[appleseed]] ( RemotingContext [[nil]] , RpcRequestCommand [[kdk]] , int level ) { boolean [[achievement]] ; try { [[kdk]] . deserialize ( level ) ; [[achievement]] = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , [[kdk]] . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( [[nil]] , [[kdk]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[kdk]] . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; [[achievement]] = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + [[kdk]] . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( [[nil]] , [[kdk]] . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( [[kdk]] . getId ( ) , t , errMsg ) ) ; [[achievement]] = "False" != "False" ; } return [[achievement]] ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 425 ---------------------------------------------
Converts a BitSet to a byte.@param bs the BitSet to convert@return the byte value --> Calculates the number of bytes pervo.@param bachelors the bitset@return the number of bytes pervo --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int [[value]] = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { [[value]] += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[pervo]] ( BitSet [[bachelors]] ) { int [[evaluations]] = 0 ; for ( int i = 0 ; i < [[bachelors]] . length ( ) ; ++ i ) { if ( [[bachelors]] . get ( i ) ) { [[evaluations]] += 1 << i ; } } if ( [[bachelors]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[evaluations]] + " generated according to bit set " + [[bachelors]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[evaluations]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 426 ---------------------------------------------
Returns the boolean value associated with the specified key, or the defaultvalue if the key does not exist. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 427 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 341 / 9 / 427:  43%|████▎     | 427/1000 [2:12:48<2:58:13, 18.66s/it][Succeeded / Failed / Skipped / Total] 77 / 341 / 9 / 427:  43%|████▎     | 428/1000 [2:12:59<2:57:44, 18.64s/it][Succeeded / Failed / Skipped / Total] 77 / 342 / 9 / 428:  43%|████▎     | 428/1000 [2:12:59<2:57:44, 18.64s/it][Succeeded / Failed / Skipped / Total] 77 / 342 / 9 / 428:  43%|████▎     | 429/1000 [2:13:05<2:57:09, 18.61s/it][Succeeded / Failed / Skipped / Total] 78 / 342 / 9 / 429:  43%|████▎     | 429/1000 [2:13:05<2:57:09, 18.61s/it][Succeeded / Failed / Skipped / Total] 78 / 342 / 9 / 429:  43%|████▎     | 430/1000 [2:13:08<2:56:29, 18.58s/it]Monitors connections.@param connPools the connections --> Audits a connection pool. --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[audit]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
Sends a request timeout command to the server. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext [[ctx]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != [[ctx]] ) { ChannelHandlerContext channelCtx = [[ctx]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[irate]] ( final RpcRequestCommand cmd , long [[kill]] , RemotingContext [[zero]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[kill]] , cmd . getArriveTime ( ) , ( [[kill]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[archetype]] = "UNKNOWN" ; if ( null != [[zero]] ) { ChannelHandlerContext channelCtx = [[zero]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[archetype]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[archetype]] , ( [[kill]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 429 ---------------------------------------------
Log a message at the INFO level. --> As modeus.@param format the format@param addr the address --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[asmodeus]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 342 / 9 / 430:  43%|████▎     | 430/1000 [2:13:08<2:56:29, 18.58s/it][Succeeded / Failed / Skipped / Total] 79 / 342 / 9 / 430:  43%|████▎     | 431/1000 [2:13:18<2:55:59, 18.56s/it][Succeeded / Failed / Skipped / Total] 80 / 342 / 9 / 431:  43%|████▎     | 431/1000 [2:13:18<2:55:59, 18.56s/it][Succeeded / Failed / Skipped / Total] 80 / 342 / 9 / 431:  43%|████▎     | 432/1000 [2:13:41<2:55:46, 18.57s/it][Succeeded / Failed / Skipped / Total] 81 / 342 / 9 / 432:  43%|████▎     | 432/1000 [2:13:41<2:55:46, 18.57s/it][Succeeded / Failed / Skipped / Total] 81 / 342 / 9 / 432:  43%|████▎     | 433/1000 [2:13:45<2:55:09, 18.54s/it][Succeeded / Failed / Skipped / Total] 82 / 342 / 9 / 433:  43%|████▎     | 433/1000 [2:13:45<2:55:09, 18.54s/it][Succeeded / Failed / Skipped / Total] 82 / 342 / 9 / 433:  43%|████▎     | 434/1000 [2:13:55<2:54:39, 18.52s/it][Succeeded / Failed / Skipped / Total] 83 / 342 / 9 / 434:  43%|████▎     | 434/1000 [2:13:55<2:54:39, 18.52s/it][Succeeded / Failed / Skipped / Total] 83 / 342 / 9 / 434:  44%|████▎     | 435/1000 [2:14:22<2:54:32, 18.54s/it][Succeeded / Failed / Skipped / Total] 84 / 342 / 9 / 435:  44%|████▎     | 435/1000 [2:14:22<2:54:32, 18.54s/it][Succeeded / Failed / Skipped / Total] 84 / 342 / 9 / 435:  44%|████▎     | 436/1000 [2:14:31<2:54:01, 18.51s/it]Closes a list of connections that are no longer needed.@param lastSelectConnect@param serviceOffConnections@throws InterruptedException --> Bruschetta. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[bruschetta]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 431 ---------------------------------------------
Determines whether or not the request timed out. --> In inhale mode. --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[inhale]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 432 ---------------------------------------------
Returns a random connection.@param conns a list of connections@return a random connection --> Gins the specified number of connections.@param conns The connections.@return The number of connections. --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[ginsburg]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 433 ---------------------------------------------
Returns the value for the specified key, or null if the key does not exist. --> Cleans up abandoned resources. --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[incubated]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 434 ---------------------------------------------
Gets the value associated with the given key.@param key the key@param defaultIfNotFound the default value@return the value associated with the given key --> Retrieves the amount of money associated with the given key.@param <> the type parameter@param key the key@return the amount of money associated with the given key --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[billions]] > [[billions]] get ( String key , [[billions]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[billions]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Resolves a response object.@param responsethe response command@param addrthe address@return the response object@throws RemotingException --> Wither spoon or not@param responseCommand@param addr@return@throws RemotingException --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[witherspoon]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 436 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 342 / 9 / 436:  44%|████▎     | 436/1000 [2:14:31<2:54:01, 18.51s/it][Succeeded / Failed / Skipped / Total] 85 / 342 / 9 / 436:  44%|████▎     | 437/1000 [2:14:54<2:53:47, 18.52s/it][Succeeded / Failed / Skipped / Total] 86 / 342 / 9 / 437:  44%|████▎     | 437/1000 [2:14:54<2:53:47, 18.52s/it][Succeeded / Failed / Skipped / Total] 86 / 342 / 9 / 437:  44%|████▍     | 438/1000 [2:14:55<2:53:07, 18.48s/it][Succeeded / Failed / Skipped / Total] 87 / 342 / 9 / 438:  44%|████▍     | 438/1000 [2:14:55<2:53:07, 18.48s/it][Succeeded / Failed / Skipped / Total] 87 / 342 / 9 / 438:  44%|████▍     | 439/1000 [2:15:02<2:52:34, 18.46s/it][Succeeded / Failed / Skipped / Total] 87 / 343 / 9 / 439:  44%|████▍     | 439/1000 [2:15:02<2:52:34, 18.46s/it][Succeeded / Failed / Skipped / Total] 87 / 343 / 9 / 439:  44%|████▍     | 440/1000 [2:15:16<2:52:10, 18.45s/it][Succeeded / Failed / Skipped / Total] 87 / 344 / 9 / 440:  44%|████▍     | 440/1000 [2:15:16<2:52:10, 18.45s/it][Succeeded / Failed / Skipped / Total] 87 / 344 / 9 / 440:  44%|████▍     | 441/1000 [2:16:49<2:53:26, 18.62s/it][Succeeded / Failed / Skipped / Total] 87 / 345 / 9 / 441:  44%|████▍     | 441/1000 [2:16:49<2:53:26, 18.62s/it][Succeeded / Failed / Skipped / Total] 87 / 345 / 9 / 441:  44%|████▍     | 442/1000 [2:16:50<2:52:45, 18.58s/it][Succeeded / Failed / Skipped / Total] 87 / 346 / 9 / 442:  44%|████▍     | 442/1000 [2:16:50<2:52:45, 18.58s/it][Succeeded / Failed / Skipped / Total] 87 / 346 / 9 / 442:  44%|████▍     | 443/1000 [2:17:01<2:52:17, 18.56s/it]Converts a response command into an exception. --> De-de-de-de-de --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[deformities]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 437 ---------------------------------------------
Filters a list of connections. --> Returns a map of connection statuses. --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String [[serviceStatus]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[serviceStatus]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[purifying]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[attract]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String [[gort]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[gort]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[attract]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[attract]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 438 ---------------------------------------------
Formats a detail error message. --> Converts an RpcResponseCommand to a String. --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[ammy]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 439 ---------------------------------------------
Returns the user processor for the specified class. --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[existentialist]] ( String [[hypocrites]] ) { return StringUtils . isBlank ( [[hypocrites]] ) ? null : this . [[angry]] . get ( [[hypocrites]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 440 ---------------------------------------------
Converts a response command to a response object. --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[yuan]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[unanswered]] = ( RpcResponseCommand ) responseCommand ; [[unanswered]] . deserialize ( ) ; return [[unanswered]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Creates a new RpcServerException. --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[registers]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 442 ---------------------------------------------
Parses a channel's local address.@param channel the channel to parse.@return the parsed address. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[arrondissement]] ( final Channel [[rivers]] ) { if ( null == [[rivers]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[rivers]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 347 / 9 / 443:  44%|████▍     | 443/1000 [2:17:01<2:52:17, 18.56s/it][Succeeded / Failed / Skipped / Total] 87 / 347 / 9 / 443:  44%|████▍     | 444/1000 [2:17:07<2:51:43, 18.53s/it][Succeeded / Failed / Skipped / Total] 87 / 348 / 9 / 444:  44%|████▍     | 444/1000 [2:17:07<2:51:43, 18.53s/it][Succeeded / Failed / Skipped / Total] 87 / 348 / 9 / 444:  44%|████▍     | 445/1000 [2:17:48<2:51:52, 18.58s/it][Succeeded / Failed / Skipped / Total] 88 / 348 / 9 / 445:  44%|████▍     | 445/1000 [2:17:48<2:51:52, 18.58s/it][Succeeded / Failed / Skipped / Total] 88 / 348 / 9 / 445:  45%|████▍     | 446/1000 [2:18:08<2:51:35, 18.58s/it][Succeeded / Failed / Skipped / Total] 89 / 348 / 9 / 446:  45%|████▍     | 446/1000 [2:18:08<2:51:35, 18.58s/it][Succeeded / Failed / Skipped / Total] 89 / 348 / 9 / 446:  45%|████▍     | 447/1000 [2:18:10<2:50:55, 18.55s/it][Succeeded / Failed / Skipped / Total] 89 / 349 / 9 / 447:  45%|████▍     | 447/1000 [2:18:10<2:50:55, 18.55s/it][Succeeded / Failed / Skipped / Total] 89 / 349 / 9 / 447:  45%|████▍     | 448/1000 [2:18:34<2:50:44, 18.56s/it][Succeeded / Failed / Skipped / Total] 90 / 349 / 9 / 448:  45%|████▍     | 448/1000 [2:18:34<2:50:44, 18.56s/it][Succeeded / Failed / Skipped / Total] 90 / 349 / 9 / 448:  45%|████▍     | 449/1000 [2:19:02<2:50:37, 18.58s/it][Succeeded / Failed / Skipped / Total] 91 / 349 / 9 / 449:  45%|████▍     | 449/1000 [2:19:02<2:50:37, 18.58s/it][Succeeded / Failed / Skipped / Total] 91 / 349 / 9 / 449:  45%|████▌     | 450/1000 [2:19:07<2:50:02, 18.55s/it]Parse the remote address from the specified channel.@param channel the channel to parse.@return the remote address. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[canasta]] ( final Channel [[socket]] ) { if ( null == [[socket]] ) { return StringUtils . EMPTY ; } final SocketAddress [[distance]] = [[socket]] . remoteAddress ( ) ; return doParse ( [[distance]] != null ? [[distance]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 444 ---------------------------------------------
Creates an epoll event loop group. --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[unambiguous]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
Prints information about a connection trace. --> Sends a message to the specified logger. --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String [[traceId]] , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer [[sourcePort]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[traceId]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( [[sourcePort]] ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[adage]] ( Logger logger , String [[moulds]] , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer [[slime]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[moulds]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( [[slime]] ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 446 ---------------------------------------------
Parses an IP address from the specified channel.@param channel the channel@return the IP address --> Deja deja@param chains@return deja --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[deja]] ( final Channel [[chains]] ) { if ( null == [[chains]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[chains]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the remote host name from the channel.@param channel the channel.@return the remote host name. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[dollies]] ( final Channel [[chaining]] ) { if ( null == [[chaining]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[unaccompanied]] = ( InetSocketAddress ) [[chaining]] . remoteAddress ( ) ; if ( [[unaccompanied]] != null ) { return [[unaccompanied]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse an IP address from the specified channel.@param channel the channel to parse.@return the IP address. --> WITHDOG@param lines@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[wittenberg]] ( final Channel [[lines]] ) { if ( null == [[lines]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[lines]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Adds a connection. --> Adds an ongoing discussion to this session.@param sex the sex of the discussion. --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[addendum]] ( Connection [[affair]] ) { markAccess ( ) ; if ( null == [[affair]] ) { return ; } boolean res = this . [[atacama]] . addIfAbsent ( [[affair]] ) ; if ( res ) { [[affair]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 450 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 350 / 9 / 450:  45%|████▌     | 450/1000 [2:19:07<2:50:02, 18.55s/it][Succeeded / Failed / Skipped / Total] 91 / 350 / 9 / 450:  45%|████▌     | 451/1000 [2:19:25<2:49:43, 18.55s/it][Succeeded / Failed / Skipped / Total] 91 / 351 / 9 / 451:  45%|████▌     | 451/1000 [2:19:25<2:49:43, 18.55s/it][Succeeded / Failed / Skipped / Total] 91 / 351 / 9 / 451:  45%|████▌     | 452/1000 [2:19:45<2:49:26, 18.55s/it][Succeeded / Failed / Skipped / Total] 91 / 352 / 9 / 452:  45%|████▌     | 452/1000 [2:19:45<2:49:26, 18.55s/it][Succeeded / Failed / Skipped / Total] 91 / 352 / 9 / 452:  45%|████▌     | 453/1000 [2:19:54<2:48:56, 18.53s/it][Succeeded / Failed / Skipped / Total] 91 / 353 / 9 / 453:  45%|████▌     | 453/1000 [2:19:54<2:48:56, 18.53s/it][Succeeded / Failed / Skipped / Total] 91 / 353 / 9 / 453:  45%|████▌     | 454/1000 [2:19:58<2:48:19, 18.50s/it][Succeeded / Failed / Skipped / Total] 92 / 353 / 9 / 454:  45%|████▌     | 454/1000 [2:19:58<2:48:19, 18.50s/it][Succeeded / Failed / Skipped / Total] 92 / 353 / 9 / 454:  46%|████▌     | 455/1000 [2:20:17<2:48:02, 18.50s/it][Succeeded / Failed / Skipped / Total] 93 / 353 / 9 / 455:  46%|████▌     | 455/1000 [2:20:17<2:48:02, 18.50s/it][Succeeded / Failed / Skipped / Total] 93 / 353 / 9 / 455:  46%|████▌     | 456/1000 [2:20:20<2:47:26, 18.47s/it][Succeeded / Failed / Skipped / Total] 93 / 354 / 9 / 456:  46%|████▌     | 456/1000 [2:20:20<2:47:26, 18.47s/it][Succeeded / Failed / Skipped / Total] 93 / 354 / 9 / 456:  46%|████▌     | 457/1000 [2:20:37<2:47:05, 18.46s/it][Succeeded / Failed / Skipped / Total] 93 / 355 / 9 / 457:  46%|████▌     | 457/1000 [2:20:37<2:47:05, 18.46s/it][Succeeded / Failed / Skipped / Total] 93 / 355 / 9 / 457:  46%|████▌     | 458/1000 [2:20:41<2:46:29, 18.43s/it]Parses the remote port from the channel.@param channel the channel to parse.@return the remote port, or -1 if the channel is null. --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[compose]] ( final Channel [[avenues]] ) { if ( null == [[avenues]] ) { return - 1 ; } final InetSocketAddress [[away]] = ( InetSocketAddress ) [[avenues]] . remoteAddress ( ) ; if ( [[away]] != null ) { return [[away]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Converts a request to a remoting command. --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection [[conn]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[tanaka]] ( Object [[application]] , Connection [[oxen]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[application]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 452 ---------------------------------------------
Removes and tries to close the supplied connection. --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 453 ---------------------------------------------
Parses a channel's local port.@param channelThe channel to parse.@return The parsed port. --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseLocalPort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel [[socket]] ) { if ( null == [[socket]] ) { return - 1 ; } final InetSocketAddress [[facility]] = ( InetSocketAddress ) [[socket]] . localAddress ( ) ; if ( [[facility]] != null ) { return [[facility]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Parse a socket address to host ip@param socketAddress@return --> Methode de certificados de certificados@param referencado certificados de certificados@return de certificados de certificados --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[mía]] ( SocketAddress [[affirmed]] ) { final InetSocketAddress [[bureaucrats]] = ( InetSocketAddress ) [[affirmed]] ; if ( [[bureaucrats]] != null ) { InetAddress [[disciplinarian]] = [[bureaucrats]] . getAddress ( ) ; if ( null != [[disciplinarian]] ) { return [[disciplinarian]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 455 ---------------------------------------------
Start the connection monitor. --> Starts the connection monitor. --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[begin]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 456 ---------------------------------------------
Returns the custom serializer for the specified class. --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[compose]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Returns the custom serializer for the given command code. --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[next]] ( CommandCode [[algorithm]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[algorithm]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 458 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 355 / 9 / 458:  46%|████▌     | 458/1000 [2:20:41<2:46:29, 18.43s/it][Succeeded / Failed / Skipped / Total] 94 / 355 / 9 / 458:  46%|████▌     | 459/1000 [2:20:41<2:45:50, 18.39s/it][Succeeded / Failed / Skipped / Total] 94 / 355 / 10 / 459:  46%|████▌     | 459/1000 [2:20:41<2:45:50, 18.39s/it][Succeeded / Failed / Skipped / Total] 94 / 355 / 10 / 459:  46%|████▌     | 460/1000 [2:20:43<2:45:12, 18.36s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 10 / 460:  46%|████▌     | 460/1000 [2:20:43<2:45:12, 18.36s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 10 / 460:  46%|████▌     | 461/1000 [2:20:44<2:44:33, 18.32s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 11 / 461:  46%|████▌     | 461/1000 [2:20:44<2:44:33, 18.32s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 11 / 461:  46%|████▌     | 462/1000 [2:20:47<2:43:56, 18.28s/it][Succeeded / Failed / Skipped / Total] 94 / 357 / 11 / 462:  46%|████▌     | 462/1000 [2:20:47<2:43:56, 18.28s/it][Succeeded / Failed / Skipped / Total] 94 / 357 / 11 / 462:  46%|████▋     | 463/1000 [2:21:08<2:43:42, 18.29s/it]Initializes the write buffer water mark. --> Called when the channel is ready. --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[amok]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 459 ---------------------------------------------
Batch write.@param ws@param sockchannel@return@throws IOException --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 460 ---------------------------------------------
Retrieves a connection from this pool.@return the connection or <code>null</code> if none. --> [[[FAILED]]]

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[becoming]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 461 ---------------------------------------------
Validates a UTF-8 string. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 462 ---------------------------------------------
Invokes the specified request with the specified callback. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection [[conn]] , final RemotingCommand [[request]] , final InvokeCallback invokeCallback , final int [[timeoutMillis]] ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , [[request]] , [[request]] . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int requestId = [[request]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[timeout]] ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[timeoutMillis]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[infirmary]] ( final Connection [[bridgeport]] , final RemotingCommand [[sought]] , final InvokeCallback invokeCallback , final int [[harbinger]] ) { final InvokeFuture future = createInvokeFuture ( [[bridgeport]] , [[sought]] , [[sought]] . getInvokeContext ( ) , invokeCallback ) ; [[bridgeport]] . addInvokeFuture ( future ) ; final int requestId = [[sought]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[clock]] ) throws Exception { InvokeFuture future = [[bridgeport]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[bridgeport]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[harbinger]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[bridgeport]] . getChannel ( ) . writeAndFlush ( [[sought]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[bridgeport]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[bridgeport]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bridgeport]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[bridgeport]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[bridgeport]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bridgeport]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 463 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 358 / 11 / 463:  46%|████▋     | 463/1000 [2:21:08<2:43:42, 18.29s/it][Succeeded / Failed / Skipped / Total] 94 / 358 / 11 / 463:  46%|████▋     | 464/1000 [2:21:32<2:43:30, 18.30s/it][Succeeded / Failed / Skipped / Total] 95 / 358 / 11 / 464:  46%|████▋     | 464/1000 [2:21:32<2:43:30, 18.30s/it][Succeeded / Failed / Skipped / Total] 95 / 358 / 11 / 464:  46%|████▋     | 465/1000 [2:21:45<2:43:06, 18.29s/it][Succeeded / Failed / Skipped / Total] 96 / 358 / 11 / 465:  46%|████▋     | 465/1000 [2:21:45<2:43:06, 18.29s/it][Succeeded / Failed / Skipped / Total] 96 / 358 / 11 / 465:  47%|████▋     | 466/1000 [2:21:46<2:42:27, 18.25s/it][Succeeded / Failed / Skipped / Total] 96 / 359 / 11 / 466:  47%|████▋     | 466/1000 [2:21:46<2:42:27, 18.25s/it][Succeeded / Failed / Skipped / Total] 96 / 359 / 11 / 466:  47%|████▋     | 467/1000 [2:22:06<2:42:11, 18.26s/it][Succeeded / Failed / Skipped / Total] 97 / 359 / 11 / 467:  47%|████▋     | 467/1000 [2:22:06<2:42:11, 18.26s/it][Succeeded / Failed / Skipped / Total] 97 / 359 / 11 / 467:  47%|████▋     | 468/1000 [2:22:06<2:41:32, 18.22s/it][Succeeded / Failed / Skipped / Total] 97 / 360 / 11 / 468:  47%|████▋     | 468/1000 [2:22:06<2:41:32, 18.22s/it][Succeeded / Failed / Skipped / Total] 97 / 360 / 11 / 468:  47%|████▋     | 469/1000 [2:22:11<2:40:59, 18.19s/it][Succeeded / Failed / Skipped / Total] 98 / 360 / 11 / 469:  47%|████▋     | 469/1000 [2:22:11<2:40:59, 18.19s/it][Succeeded / Failed / Skipped / Total] 98 / 360 / 11 / 469:  47%|████▋     | 470/1000 [2:22:19<2:40:29, 18.17s/it]Registers a custom serializer for the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[deprivation]] ( String [[rivals]] , CustomSerializer [[arras]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[rivals]] , [[arras]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[rivals]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 464 ---------------------------------------------
Sets the code of the sprite. --> Starts a new html page. --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[congregate]] ( int [[html]] ) { this . code = [[html]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 465 ---------------------------------------------
Updates the payload. --> Crawling function. --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[crawling]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Registers a custom serializer for the given command code. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[buddhists]] ( CommandCode [[codebook]] , CustomSerializer [[enlarged]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[codebook]] , [[enlarged]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[codebook]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 467 ---------------------------------------------
Translate the given maxpacketsize to the given realpacketsize. --> Federated frame. --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[federated]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 468 ---------------------------------------------
Returns an implementation of the given opcode. --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[perceive]] ( Opcode [[salvageable]] ) { if ( [[salvageable]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[salvageable]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 469 ---------------------------------------------
Checks if the requested protocol matches the provided one. --> Converts a zis string to a handshake state. --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[conversion]] ( String [[zis]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[zis]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 470 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 360 / 11 / 470:  47%|████▋     | 470/1000 [2:22:19<2:40:29, 18.17s/it][Succeeded / Failed / Skipped / Total] 99 / 360 / 11 / 470:  47%|████▋     | 471/1000 [2:22:29<2:40:02, 18.15s/it][Succeeded / Failed / Skipped / Total] 100 / 360 / 11 / 471:  47%|████▋     | 471/1000 [2:22:29<2:40:02, 18.15s/it][Succeeded / Failed / Skipped / Total] 100 / 360 / 11 / 471:  47%|████▋     | 472/1000 [2:22:30<2:39:25, 18.12s/it][Succeeded / Failed / Skipped / Total] 101 / 360 / 11 / 472:  47%|████▋     | 472/1000 [2:22:30<2:39:25, 18.12s/it][Succeeded / Failed / Skipped / Total] 101 / 360 / 11 / 472:  47%|████▋     | 473/1000 [2:22:58<2:39:17, 18.14s/it][Succeeded / Failed / Skipped / Total] 102 / 360 / 11 / 473:  47%|████▋     | 473/1000 [2:22:58<2:39:17, 18.14s/it][Succeeded / Failed / Skipped / Total] 102 / 360 / 11 / 473:  47%|████▋     | 474/1000 [2:23:00<2:38:42, 18.10s/it][Succeeded / Failed / Skipped / Total] 103 / 360 / 11 / 474:  47%|████▋     | 474/1000 [2:23:00<2:38:42, 18.10s/it][Succeeded / Failed / Skipped / Total] 103 / 360 / 11 / 474:  48%|████▊     | 475/1000 [2:23:01<2:38:05, 18.07s/it][Succeeded / Failed / Skipped / Total] 104 / 360 / 11 / 475:  48%|████▊     | 475/1000 [2:23:01<2:38:05, 18.07s/it][Succeeded / Failed / Skipped / Total] 104 / 360 / 11 / 475:  48%|████▊     | 476/1000 [2:23:03<2:37:28, 18.03s/it]Translate the payload size limit for a single frame. --> Asians.@param laps@throws LimitExceededException --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[asians]] ( long [[laps]] ) throws LimitExceededException { if ( [[laps]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[laps]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[laps]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[laps]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 471 ---------------------------------------------
Log a runtime exception. --> Called when a websocket message is received. --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[asunder]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 472 ---------------------------------------------
Processes a binary message. --> Asians message. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[asians]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 473 ---------------------------------------------
Processes a close frame. --> Cee implementation --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[cee]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 474 ---------------------------------------------
Processes a frame. --> Called when a protocol error occurs. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[hypocrites]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 475 ---------------------------------------------
Generates the final key for the given input. --> Calculates the SHA-1 hash of the message. --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String [[seckey]] = in . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest [[sh1]] ; try { [[sh1]] = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( [[sh1]] . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[reconnaissance]] ( String in ) { String [[overdramatize]] = in . trim ( ) ; String acc = [[overdramatize]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest [[bhavna]] ; try { [[bhavna]] = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( [[bhavna]] . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 360 / 11 / 476:  48%|████▊     | 476/1000 [2:23:03<2:37:28, 18.03s/it][Succeeded / Failed / Skipped / Total] 105 / 360 / 11 / 476:  48%|████▊     | 477/1000 [2:23:11<2:36:59, 18.01s/it][Succeeded / Failed / Skipped / Total] 106 / 360 / 11 / 477:  48%|████▊     | 477/1000 [2:23:11<2:36:59, 18.01s/it][Succeeded / Failed / Skipped / Total] 106 / 360 / 11 / 477:  48%|████▊     | 478/1000 [2:23:22<2:36:33, 18.00s/it][Succeeded / Failed / Skipped / Total] 107 / 360 / 11 / 478:  48%|████▊     | 478/1000 [2:23:22<2:36:33, 18.00s/it][Succeeded / Failed / Skipped / Total] 107 / 360 / 11 / 478:  48%|████▊     | 479/1000 [2:23:27<2:36:02, 17.97s/it][Succeeded / Failed / Skipped / Total] 108 / 360 / 11 / 479:  48%|████▊     | 479/1000 [2:23:27<2:36:02, 17.97s/it][Succeeded / Failed / Skipped / Total] 108 / 360 / 11 / 479:  48%|████▊     | 480/1000 [2:23:41<2:35:40, 17.96s/it][Succeeded / Failed / Skipped / Total] 109 / 360 / 11 / 480:  48%|████▊     | 480/1000 [2:23:41<2:35:40, 17.96s/it][Succeeded / Failed / Skipped / Total] 109 / 360 / 11 / 480:  48%|████▊     | 481/1000 [2:23:43<2:35:04, 17.93s/it][Succeeded / Failed / Skipped / Total] 110 / 360 / 11 / 481:  48%|████▊     | 481/1000 [2:23:43<2:35:04, 17.93s/it][Succeeded / Failed / Skipped / Total] 110 / 360 / 11 / 481:  48%|████▊     | 482/1000 [2:23:45<2:34:29, 17.89s/it]Processes a continuous frame. --> Cee function. --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[cee]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Determines whether or not the specified remote address is connected. --> Connects to the remote server.@param enlargements@return --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[canal]] ( String [[enlargements]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[enlargements]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 478 ---------------------------------------------
Returns the size of the byte buffer list. --> Shake a buffer. --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[shake]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 479 ---------------------------------------------
Checks the maximum size of the buffer. --> danzig@param maxFrameSize@throws LimitExceededException --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[danzig]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Flushes and closes the connection. --> Write an error response. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[authorizing]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 481 ---------------------------------------------
Decodes the contents of the specified socket buffer. --> Ciphers. --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[ciphers]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
[Succeeded / Failed / Skipped / Total] 111 / 360 / 11 / 482:  48%|████▊     | 482/1000 [2:23:45<2:34:29, 17.89s/it][Succeeded / Failed / Skipped / Total] 111 / 360 / 11 / 482:  48%|████▊     | 483/1000 [2:23:53<2:34:01, 17.87s/it][Succeeded / Failed / Skipped / Total] 112 / 360 / 11 / 483:  48%|████▊     | 483/1000 [2:23:53<2:34:01, 17.87s/it][Succeeded / Failed / Skipped / Total] 112 / 360 / 11 / 483:  48%|████▊     | 484/1000 [2:23:53<2:33:24, 17.84s/it][Succeeded / Failed / Skipped / Total] 112 / 360 / 12 / 484:  48%|████▊     | 484/1000 [2:23:53<2:33:24, 17.84s/it][Succeeded / Failed / Skipped / Total] 112 / 360 / 12 / 484:  48%|████▊     | 485/1000 [2:23:55<2:32:49, 17.81s/it][Succeeded / Failed / Skipped / Total] 113 / 360 / 12 / 485:  48%|████▊     | 485/1000 [2:23:55<2:32:49, 17.81s/it][Succeeded / Failed / Skipped / Total] 113 / 360 / 12 / 485:  49%|████▊     | 486/1000 [2:23:59<2:32:17, 17.78s/it][Succeeded / Failed / Skipped / Total] 113 / 361 / 12 / 486:  49%|████▊     | 486/1000 [2:23:59<2:32:17, 17.78s/it][Succeeded / Failed / Skipped / Total] 113 / 361 / 12 / 486:  49%|████▊     | 487/1000 [2:24:12<2:31:54, 17.77s/it][Succeeded / Failed / Skipped / Total] 113 / 362 / 12 / 487:  49%|████▊     | 487/1000 [2:24:12<2:31:54, 17.77s/it][Succeeded / Failed / Skipped / Total] 113 / 362 / 12 / 487:  49%|████▉     | 488/1000 [2:24:16<2:31:22, 17.74s/it][Succeeded / Failed / Skipped / Total] 113 / 363 / 12 / 488:  49%|████▉     | 488/1000 [2:24:16<2:31:22, 17.74s/it][Succeeded / Failed / Skipped / Total] 113 / 363 / 12 / 488:  49%|████▉     | 489/1000 [2:24:17<2:30:47, 17.71s/it][Succeeded / Failed / Skipped / Total] 113 / 364 / 12 / 489:  49%|████▉     | 489/1000 [2:24:17<2:30:47, 17.71s/it][Succeeded / Failed / Skipped / Total] 113 / 364 / 12 / 489:  49%|████▉     | 490/1000 [2:24:33<2:30:27, 17.70s/it]--------------------------------------------- Result 482 ---------------------------------------------
Translate the first line of the HTTP server handshake.@param firstLineTokens@param line@return@throws InvalidHandshakeException --> Creates a handshaker from a list of tokens.@param firstLineTokens@param line@return@throws InvalidHandshakeException --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[boulders]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Translate the first line of the HTTP client handshake.@param firstLineTokens@param line@return@throws InvalidHandshakeException --> G gallardo algorithm. --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[gallardo]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 484 ---------------------------------------------
Resets the connection. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 485 ---------------------------------------------
Closes the connection. --> Coover HTTP response. --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[coover]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Processes a WebSocket frame. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[q]] ( WebSocketImpl webSocketImpl , Framedata [[frames]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frames]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 487 ---------------------------------------------
Connects to the server. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[binds]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 488 ---------------------------------------------
Sends the specified data to the client. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[emissaries]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[emissaries]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 489 ---------------------------------------------
Processes a continuous frame sequence. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[pish]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 364 / 12 / 490:  49%|████▉     | 490/1000 [2:24:33<2:30:27, 17.70s/it][Succeeded / Failed / Skipped / Total] 114 / 364 / 12 / 490:  49%|████▉     | 491/1000 [2:24:48<2:30:06, 17.69s/it][Succeeded / Failed / Skipped / Total] 115 / 364 / 12 / 491:  49%|████▉     | 491/1000 [2:24:48<2:30:06, 17.69s/it][Succeeded / Failed / Skipped / Total] 115 / 364 / 12 / 491:  49%|████▉     | 492/1000 [2:24:49<2:29:32, 17.66s/it][Succeeded / Failed / Skipped / Total] 116 / 364 / 12 / 492:  49%|████▉     | 492/1000 [2:24:49<2:29:32, 17.66s/it][Succeeded / Failed / Skipped / Total] 116 / 364 / 12 / 492:  49%|████▉     | 493/1000 [2:25:05<2:29:12, 17.66s/it][Succeeded / Failed / Skipped / Total] 117 / 364 / 12 / 493:  49%|████▉     | 493/1000 [2:25:05<2:29:12, 17.66s/it][Succeeded / Failed / Skipped / Total] 117 / 364 / 12 / 493:  49%|████▉     | 494/1000 [2:25:14<2:28:46, 17.64s/it][Succeeded / Failed / Skipped / Total] 117 / 365 / 12 / 494:  49%|████▉     | 494/1000 [2:25:14<2:28:46, 17.64s/it][Succeeded / Failed / Skipped / Total] 117 / 365 / 12 / 494:  50%|████▉     | 495/1000 [2:25:18<2:28:14, 17.61s/it][Succeeded / Failed / Skipped / Total] 118 / 365 / 12 / 495:  50%|████▉     | 495/1000 [2:25:18<2:28:14, 17.61s/it][Succeeded / Failed / Skipped / Total] 118 / 365 / 12 / 495:  50%|████▉     | 496/1000 [2:25:30<2:27:51, 17.60s/it]Stop the connection lost timer. --> Quetzalcoatl. --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[quetzalcoatl]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 491 ---------------------------------------------
Cancels the connection lost timer. --> Cancels all connections. --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[available]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 492 ---------------------------------------------
Returns the port number for the given URI. --> Dockside implementation --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[intellectually]] ( ) { int [[dockside]] = uri . getPort ( ) ; if ( [[dockside]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[dockside]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Cancel a connection lost checker. --> Cancels all registered listeners. --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[auditors]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 494 ---------------------------------------------
Start the connection lost timer. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[rebuilding]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Generates an HTTP response based on an error code. --> Creates an HTTP 1.1 WebSocket upgrade request. --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[guenter]] ( int [[possibles]] ) { String errorCodeDescription ; switch ( [[possibles]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 366 / 12 / 496:  50%|████▉     | 496/1000 [2:25:30<2:27:51, 17.60s/it][Succeeded / Failed / Skipped / Total] 118 / 366 / 12 / 496:  50%|████▉     | 497/1000 [2:25:34<2:27:19, 17.57s/it][Succeeded / Failed / Skipped / Total] 119 / 366 / 12 / 497:  50%|████▉     | 497/1000 [2:25:34<2:27:19, 17.57s/it][Succeeded / Failed / Skipped / Total] 119 / 366 / 12 / 497:  50%|████▉     | 498/1000 [2:25:58<2:27:08, 17.59s/it][Succeeded / Failed / Skipped / Total] 120 / 366 / 12 / 498:  50%|████▉     | 498/1000 [2:25:58<2:27:08, 17.59s/it][Succeeded / Failed / Skipped / Total] 120 / 366 / 12 / 498:  50%|████▉     | 499/1000 [2:26:01<2:26:36, 17.56s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 12 / 499:  50%|████▉     | 499/1000 [2:26:01<2:26:36, 17.56s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 12 / 499:  50%|█████     | 500/1000 [2:26:02<2:26:02, 17.52s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 13 / 500:  50%|█████     | 500/1000 [2:26:02<2:26:02, 17.52s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 13 / 500:  50%|█████     | 501/1000 [2:26:02<2:25:27, 17.49s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 14 / 501:  50%|█████     | 501/1000 [2:26:02<2:25:27, 17.49s/it][Succeeded / Failed / Skipped / Total] 120 / 367 / 14 / 501:  50%|█████     | 502/1000 [2:26:16<2:25:06, 17.48s/it][Succeeded / Failed / Skipped / Total] 120 / 368 / 14 / 502:  50%|█████     | 502/1000 [2:26:16<2:25:06, 17.48s/it][Succeeded / Failed / Skipped / Total] 120 / 368 / 14 / 502:  50%|█████     | 503/1000 [2:26:29<2:24:44, 17.47s/it]Sets the connection lost timeout. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[teale]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 497 ---------------------------------------------
Gets the payload from the byte buffer list. --> Deja deja deja@return deja@throws LimitExceededException --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[deja]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 498 ---------------------------------------------
Performs additional read. --> Reads data from the socket. --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[agata]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 499 ---------------------------------------------
Sends a ping frame. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[capture]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 500 ---------------------------------------------
Reads from the socket. --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 501 ---------------------------------------------
Writes data to the specified key. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port number associated with this socket. --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[renny]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 368 / 14 / 503:  50%|█████     | 503/1000 [2:26:29<2:24:44, 17.47s/it][Succeeded / Failed / Skipped / Total] 121 / 368 / 14 / 503:  50%|█████     | 504/1000 [2:26:29<2:24:10, 17.44s/it][Succeeded / Failed / Skipped / Total] 121 / 368 / 15 / 504:  50%|█████     | 504/1000 [2:26:29<2:24:10, 17.44s/it][Succeeded / Failed / Skipped / Total] 121 / 368 / 15 / 504:  50%|█████     | 505/1000 [2:26:30<2:23:36, 17.41s/it][Succeeded / Failed / Skipped / Total] 122 / 368 / 15 / 505:  50%|█████     | 505/1000 [2:26:30<2:23:36, 17.41s/it][Succeeded / Failed / Skipped / Total] 122 / 368 / 15 / 505:  51%|█████     | 506/1000 [2:26:33<2:23:04, 17.38s/it][Succeeded / Failed / Skipped / Total] 123 / 368 / 15 / 506:  51%|█████     | 506/1000 [2:26:33<2:23:04, 17.38s/it][Succeeded / Failed / Skipped / Total] 123 / 368 / 15 / 506:  51%|█████     | 507/1000 [2:26:38<2:22:35, 17.35s/it][Succeeded / Failed / Skipped / Total] 124 / 368 / 15 / 507:  51%|█████     | 507/1000 [2:26:38<2:22:35, 17.35s/it][Succeeded / Failed / Skipped / Total] 124 / 368 / 15 / 507:  51%|█████     | 508/1000 [2:26:40<2:22:02, 17.32s/it]Initializes the selector and server. --> Opens a WebSocket connection. --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[are]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 504 ---------------------------------------------
Called when the server shuts down. --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 505 ---------------------------------------------
Sends a handshake. --> Handles incoming requests. --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[handmaid]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 506 ---------------------------------------------
Accepts a selection key. --> Connects to the server. --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[bates]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 507 ---------------------------------------------
Ensure that only one thread is running. --> Ensure single threaded. --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Forger]]" != "[[Forger]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 369 / 15 / 508:  51%|█████     | 508/1000 [2:26:40<2:22:03, 17.32s/it][Succeeded / Failed / Skipped / Total] 124 / 369 / 15 / 508:  51%|█████     | 509/1000 [2:26:47<2:21:36, 17.30s/it][Succeeded / Failed / Skipped / Total] 125 / 369 / 15 / 509:  51%|█████     | 509/1000 [2:26:47<2:21:36, 17.30s/it][Succeeded / Failed / Skipped / Total] 125 / 369 / 15 / 509:  51%|█████     | 510/1000 [2:27:02<2:21:16, 17.30s/it][Succeeded / Failed / Skipped / Total] 125 / 370 / 15 / 510:  51%|█████     | 510/1000 [2:27:02<2:21:16, 17.30s/it][Succeeded / Failed / Skipped / Total] 125 / 370 / 15 / 510:  51%|█████     | 511/1000 [2:27:06<2:20:46, 17.27s/it][Succeeded / Failed / Skipped / Total] 126 / 370 / 15 / 511:  51%|█████     | 511/1000 [2:27:06<2:20:46, 17.27s/it][Succeeded / Failed / Skipped / Total] 126 / 370 / 15 / 511:  51%|█████     | 512/1000 [2:27:23<2:20:29, 17.27s/it][Succeeded / Failed / Skipped / Total] 127 / 370 / 15 / 512:  51%|█████     | 512/1000 [2:27:23<2:20:29, 17.27s/it][Succeeded / Failed / Skipped / Total] 127 / 370 / 15 / 512:  51%|█████▏    | 513/1000 [2:27:30<2:20:01, 17.25s/it][Succeeded / Failed / Skipped / Total] 127 / 371 / 15 / 513:  51%|█████▏    | 513/1000 [2:27:30<2:20:01, 17.25s/it][Succeeded / Failed / Skipped / Total] 127 / 371 / 15 / 513:  51%|█████▏    | 514/1000 [2:27:42<2:19:39, 17.24s/it][Succeeded / Failed / Skipped / Total] 128 / 371 / 15 / 514:  51%|█████▏    | 514/1000 [2:27:42<2:19:39, 17.24s/it][Succeeded / Failed / Skipped / Total] 128 / 371 / 15 / 514:  52%|█████▏    | 515/1000 [2:27:54<2:19:17, 17.23s/it]Called when a connection was lost. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[agreement]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[aggressors]] = ( WebSocketImpl ) webSocket ; if ( [[aggressors]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[aggressors]] ) ; [[aggressors]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[aggressors]] . isOpen ( ) ) { [[aggressors]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[aggressors]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 509 ---------------------------------------------
Returns the socket for the specified channel. --> Creates an equivocation channel. --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[equivocation]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 510 ---------------------------------------------
Stops this thread. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stop]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[ceased]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts a data frame to all the clients. --> Sends a frame. --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[agito]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 512 ---------------------------------------------
Transfer a byte buffer from source to dest. --> Adjacency between two buffers.@param source Source buffer.@param dest Destination buffer.@return Adjacency. --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[admiral]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 513 ---------------------------------------------
Starts the persistence manager. --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[debut]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 514 ---------------------------------------------
Performs a transaction on this entity manager. --> Shinzo lights --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[shinzo]] ( Consumer < EntityManager > block ) { [[shinzo]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 371 / 15 / 515:  52%|█████▏    | 515/1000 [2:27:54<2:19:17, 17.23s/it][Succeeded / Failed / Skipped / Total] 129 / 371 / 15 / 515:  52%|█████▏    | 516/1000 [2:27:57<2:18:46, 17.20s/it][Succeeded / Failed / Skipped / Total] 130 / 371 / 15 / 516:  52%|█████▏    | 516/1000 [2:27:57<2:18:46, 17.20s/it][Succeeded / Failed / Skipped / Total] 130 / 371 / 15 / 516:  52%|█████▏    | 517/1000 [2:27:57<2:18:13, 17.17s/it][Succeeded / Failed / Skipped / Total] 131 / 371 / 15 / 517:  52%|█████▏    | 517/1000 [2:27:57<2:18:13, 17.17s/it][Succeeded / Failed / Skipped / Total] 131 / 371 / 15 / 517:  52%|█████▏    | 518/1000 [2:28:11<2:17:53, 17.17s/it][Succeeded / Failed / Skipped / Total] 131 / 372 / 15 / 518:  52%|█████▏    | 518/1000 [2:28:11<2:17:53, 17.17s/it][Succeeded / Failed / Skipped / Total] 131 / 372 / 15 / 518:  52%|█████▏    | 519/1000 [2:28:14<2:17:23, 17.14s/it][Succeeded / Failed / Skipped / Total] 132 / 372 / 15 / 519:  52%|█████▏    | 519/1000 [2:28:14<2:17:23, 17.14s/it][Succeeded / Failed / Skipped / Total] 132 / 372 / 15 / 519:  52%|█████▏    | 520/1000 [2:28:30<2:17:05, 17.14s/it][Succeeded / Failed / Skipped / Total] 132 / 373 / 15 / 520:  52%|█████▏    | 520/1000 [2:28:30<2:17:05, 17.14s/it][Succeeded / Failed / Skipped / Total] 132 / 373 / 15 / 520:  52%|█████▏    | 521/1000 [2:28:55<2:16:55, 17.15s/it][Succeeded / Failed / Skipped / Total] 133 / 373 / 15 / 521:  52%|█████▏    | 521/1000 [2:28:55<2:16:55, 17.15s/it][Succeeded / Failed / Skipped / Total] 133 / 373 / 15 / 521:  52%|█████▏    | 522/1000 [2:29:12<2:16:37, 17.15s/it][Succeeded / Failed / Skipped / Total] 133 / 374 / 15 / 522:  52%|█████▏    | 522/1000 [2:29:12<2:16:37, 17.15s/it][Succeeded / Failed / Skipped / Total] 133 / 374 / 15 / 522:  52%|█████▏    | 523/1000 [2:29:15<2:16:08, 17.12s/it][Succeeded / Failed / Skipped / Total] 133 / 375 / 15 / 523:  52%|█████▏    | 523/1000 [2:29:15<2:16:08, 17.12s/it][Succeeded / Failed / Skipped / Total] 133 / 375 / 15 / 523:  52%|█████▏    | 524/1000 [2:29:49<2:16:05, 17.16s/it]Converts an array of arguments to a list of objects. --> burn e --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[burne]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 516 ---------------------------------------------
Called when a websocket handshake is received. --> Create a new server handshaker@param villanova@param request@return@throws InvalidDataException --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket [[conn]] , Draft [[draft]] , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[hiya]] ( WebSocket [[villanova]] , Draft [[devised]] , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 517 ---------------------------------------------
Fills a draft frame list with data from the specified draft. --> Checks if a draft frame can be created --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft [[draft]] , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( [[draft]] ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = [[draft]] . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = [[draft]] . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( [[draft]] , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[canoes]] ( Draft [[established]] , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( [[established]] ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = [[established]] . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = [[established]] . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( [[established]] , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 518 ---------------------------------------------
Broadcasts the specified text to all registered clients. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[publicize]] ( String [[grammar]] , Collection < WebSocket > clients ) { if ( [[grammar]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[grammar]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 519 ---------------------------------------------
Broadcasts the specified data to all registered clients. --> Creates an air-play session. --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[airplay]] ( byte [ ] data , Collection < WebSocket > [[abusers]] ) { if ( data == null || [[abusers]] == null ) { throw new IllegalArgumentException ( ) ; } [[airplay]] ( ByteBuffer . wrap ( data ) , [[abusers]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 520 ---------------------------------------------
Creates an entity manager with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[circa]] ( String [[denominations]] ) { EntityManagerFactory emf = emfs . get ( [[denominations]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Sets the language of the result. --> deputized --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[deputized]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 522 ---------------------------------------------
Wrap a list of arguments to a list if needed. --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[cog]] ( final T ... [[wagging]] ) { List < T > [[departing]] ; if ( [[wagging]] != null && [[wagging]] . length == 1 && [[wagging]] [ 0 ] instanceof List ) { [[departing]] = ( List < T > ) [[wagging]] [ 0 ] ; } else { [[departing]] = Arrays . asList ( [[wagging]] ) ; } return [[departing]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
Returns a copy of this message. --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[favor]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 524 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 133 / 376 / 15 / 524:  52%|█████▏    | 524/1000 [2:29:49<2:16:05, 17.16s/it][Succeeded / Failed / Skipped / Total] 133 / 376 / 15 / 524:  52%|█████▎    | 525/1000 [2:29:54<2:15:37, 17.13s/it][Succeeded / Failed / Skipped / Total] 133 / 377 / 15 / 525:  52%|█████▎    | 525/1000 [2:29:54<2:15:37, 17.13s/it][Succeeded / Failed / Skipped / Total] 133 / 377 / 15 / 525:  53%|█████▎    | 526/1000 [2:29:59<2:15:09, 17.11s/it][Succeeded / Failed / Skipped / Total] 133 / 378 / 15 / 526:  53%|█████▎    | 526/1000 [2:29:59<2:15:09, 17.11s/it][Succeeded / Failed / Skipped / Total] 133 / 378 / 15 / 526:  53%|█████▎    | 527/1000 [2:30:04<2:14:42, 17.09s/it][Succeeded / Failed / Skipped / Total] 133 / 379 / 15 / 527:  53%|█████▎    | 527/1000 [2:30:04<2:14:42, 17.09s/it][Succeeded / Failed / Skipped / Total] 133 / 379 / 15 / 527:  53%|█████▎    | 528/1000 [2:30:15<2:14:19, 17.08s/it][Succeeded / Failed / Skipped / Total] 133 / 380 / 15 / 528:  53%|█████▎    | 528/1000 [2:30:15<2:14:19, 17.08s/it][Succeeded / Failed / Skipped / Total] 133 / 380 / 15 / 528:  53%|█████▎    | 529/1000 [2:30:38<2:14:07, 17.09s/it][Succeeded / Failed / Skipped / Total] 133 / 381 / 15 / 529:  53%|█████▎    | 529/1000 [2:30:38<2:14:07, 17.09s/it][Succeeded / Failed / Skipped / Total] 133 / 381 / 15 / 529:  53%|█████▎    | 530/1000 [2:30:46<2:13:42, 17.07s/it][Succeeded / Failed / Skipped / Total] 133 / 382 / 15 / 530:  53%|█████▎    | 530/1000 [2:30:46<2:13:42, 17.07s/it][Succeeded / Failed / Skipped / Total] 133 / 382 / 15 / 530:  53%|█████▎    | 531/1000 [2:30:56<2:13:19, 17.06s/it][Succeeded / Failed / Skipped / Total] 133 / 383 / 15 / 531:  53%|█████▎    | 531/1000 [2:30:56<2:13:19, 17.06s/it][Succeeded / Failed / Skipped / Total] 133 / 383 / 15 / 531:  53%|█████▎    | 532/1000 [2:31:02<2:12:52, 17.04s/it][Succeeded / Failed / Skipped / Total] 133 / 384 / 15 / 532:  53%|█████▎    | 532/1000 [2:31:02<2:12:52, 17.04s/it][Succeeded / Failed / Skipped / Total] 133 / 384 / 15 / 532:  53%|█████▎    | 533/1000 [2:31:05<2:12:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 134 / 384 / 15 / 533:  53%|█████▎    | 533/1000 [2:31:05<2:12:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 134 / 384 / 15 / 533:  53%|█████▎    | 534/1000 [2:31:11<2:11:56, 16.99s/it]Creates a copy of this builder with the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[attaching]] ( GuiceableModule ... [[tacos]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[tacos]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 525 ---------------------------------------------
Creates and returns a Guiceable with the specified configuration.@param play The play instance.@param REPLACEME0 The configuration.@return A self object. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[HAIRBRUSH]] ( play . api . inject . Binding < ? > ... [[HAIRBRUSH]] ) { return [[HAIRBRUSH]] ( Guiceable . bindings ( [[HAIRBRUSH]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 526 ---------------------------------------------
Returns a copy of this message. --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[preferring]] ( Collection < Lang > candidates ) { Seq < Lang > [[js]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[browder]] = messages . preferred ( ( Seq ) [[js]] ) ; return new MessagesImpl ( new Lang ( [[browder]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 527 ---------------------------------------------
Creates a set of bindings. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[unite]] ( play . api . inject . Module ... [[segments]] ) { return [[unite]] ( Guiceable . [[segments]] ( [[segments]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns true if this message is defined at the specified language. --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[langer]] , String [[cardinal]] ) { return messages . isDefinedAt ( [[cardinal]] , [[langer]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 529 ---------------------------------------------
Gets the message associated with the specified key. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String [[key]] , Object ... [[args]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[attains]] ( play . api . i18n . Lang lang , String [[instrumental]] , Object ... [[douse]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[douse]] ) ; return messages . apply ( [[instrumental]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 530 ---------------------------------------------
Creates an overrides module. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[keypad]] ( GuiceableModule ... [[bladed]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[bladed]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 531 ---------------------------------------------
Returns the overrides of this object. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[prostitute]] ( play . api . inject . Module ... [[bundled]] ) { return [[prostitute]] ( Guiceable . [[bundled]] ( [[bundled]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Gets all messages.@param lang the language@param keys the keys@param args the args@return the messages --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[attained]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[bitches]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[bitches]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 533 ---------------------------------------------
Overrides the given bindings. --> Convenience method to create a self causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal causal --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[monterey]] ( play . api . inject . Binding < ? > ... [[attaching]] ) { return [[monterey]] ( Guiceable . [[attaching]] ( [[attaching]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 385 / 15 / 534:  53%|█████▎    | 534/1000 [2:31:11<2:11:56, 16.99s/it][Succeeded / Failed / Skipped / Total] 134 / 385 / 15 / 534:  54%|█████▎    | 535/1000 [2:31:14<2:11:27, 16.96s/it][Succeeded / Failed / Skipped / Total] 134 / 386 / 15 / 535:  54%|█████▎    | 535/1000 [2:31:14<2:11:27, 16.96s/it][Succeeded / Failed / Skipped / Total] 134 / 386 / 15 / 535:  54%|█████▎    | 536/1000 [2:31:24<2:11:04, 16.95s/it][Succeeded / Failed / Skipped / Total] 134 / 387 / 15 / 536:  54%|█████▎    | 536/1000 [2:31:24<2:11:04, 16.95s/it][Succeeded / Failed / Skipped / Total] 134 / 387 / 15 / 536:  54%|█████▎    | 537/1000 [2:31:43<2:10:48, 16.95s/it][Succeeded / Failed / Skipped / Total] 134 / 388 / 15 / 537:  54%|█████▎    | 537/1000 [2:31:43<2:10:48, 16.95s/it][Succeeded / Failed / Skipped / Total] 134 / 388 / 15 / 537:  54%|█████▍    | 538/1000 [2:31:55<2:10:27, 16.94s/it][Succeeded / Failed / Skipped / Total] 134 / 389 / 15 / 538:  54%|█████▍    | 538/1000 [2:31:55<2:10:27, 16.94s/it][Succeeded / Failed / Skipped / Total] 134 / 389 / 15 / 538:  54%|█████▍    | 539/1000 [2:32:36<2:10:31, 16.99s/it][Succeeded / Failed / Skipped / Total] 135 / 389 / 15 / 539:  54%|█████▍    | 539/1000 [2:32:36<2:10:31, 16.99s/it][Succeeded / Failed / Skipped / Total] 135 / 389 / 15 / 539:  54%|█████▍    | 540/1000 [2:32:49<2:10:10, 16.98s/it][Succeeded / Failed / Skipped / Total] 135 / 390 / 15 / 540:  54%|█████▍    | 540/1000 [2:32:49<2:10:10, 16.98s/it][Succeeded / Failed / Skipped / Total] 135 / 390 / 15 / 540:  54%|█████▍    | 541/1000 [2:32:53<2:09:42, 16.96s/it][Succeeded / Failed / Skipped / Total] 136 / 390 / 15 / 541:  54%|█████▍    | 541/1000 [2:32:53<2:09:42, 16.96s/it][Succeeded / Failed / Skipped / Total] 136 / 390 / 15 / 541:  54%|█████▍    | 542/1000 [2:32:54<2:09:12, 16.93s/it][Succeeded / Failed / Skipped / Total] 136 / 391 / 15 / 542:  54%|█████▍    | 542/1000 [2:32:54<2:09:12, 16.93s/it][Succeeded / Failed / Skipped / Total] 136 / 391 / 15 / 542:  54%|█████▍    | 543/1000 [2:33:05<2:08:50, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 392 / 15 / 543:  54%|█████▍    | 543/1000 [2:33:05<2:08:50, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 392 / 15 / 543:  54%|█████▍    | 544/1000 [2:33:32<2:08:42, 16.94s/it]Disables the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[disengage]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Creates a binding for the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[narrows]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Calls the given request and returns the result. --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[asked]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Retrieves the file for the specified relative path. --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[fuller]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[fuller]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Converts an execution context into an executor. --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[fourier]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 539 ---------------------------------------------
Creates a new tuple containing the specified two elements. --> Creates an Imhotep from the specified parameters. --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > [[Tuple]] < [[A]] , B > [[Tuple]] ( [[A]] a , B b ) { return new [[Tuple]] < [[A]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[dans]] , B > [[Imhotep]] < [[dans]] , B > [[Imhotep]] ( [[dans]] a , B b ) { return new [[Imhotep]] < [[dans]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 540 ---------------------------------------------
Creates a new configuration for the specified persistence unit. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[to]] ( String [[surnames]] , String [[reigns]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[surnames]] , [[reigns]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a 5-element HMM tuple. --> Creates an immutable associative matrix. --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Assim]] < A , B , C , D , E > [[Assim]] ( A a , B b , C c , D d , E e ) { return new [[Assim]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new configuration from the supplied map. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[anti]] ( Map < String , String > [[chart]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[antsy]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[chart]] . entrySet ( ) ) { [[antsy]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[antsy]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a flow from a string and a byte string. --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[umbilical]] ( String [[regular]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[regular]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 393 / 15 / 544:  54%|█████▍    | 544/1000 [2:33:32<2:08:42, 16.94s/it][Succeeded / Failed / Skipped / Total] 136 / 393 / 15 / 544:  55%|█████▍    | 545/1000 [2:34:14<2:08:46, 16.98s/it][Succeeded / Failed / Skipped / Total] 136 / 394 / 15 / 545:  55%|█████▍    | 545/1000 [2:34:14<2:08:46, 16.98s/it][Succeeded / Failed / Skipped / Total] 136 / 394 / 15 / 545:  55%|█████▍    | 546/1000 [2:34:24<2:08:23, 16.97s/it][Succeeded / Failed / Skipped / Total] 136 / 395 / 15 / 546:  55%|█████▍    | 546/1000 [2:34:24<2:08:23, 16.97s/it][Succeeded / Failed / Skipped / Total] 136 / 395 / 15 / 546:  55%|█████▍    | 547/1000 [2:34:49<2:08:13, 16.98s/it][Succeeded / Failed / Skipped / Total] 136 / 396 / 15 / 547:  55%|█████▍    | 547/1000 [2:34:49<2:08:13, 16.98s/it][Succeeded / Failed / Skipped / Total] 136 / 396 / 15 / 547:  55%|█████▍    | 548/1000 [2:34:56<2:07:48, 16.96s/it][Succeeded / Failed / Skipped / Total] 136 / 397 / 15 / 548:  55%|█████▍    | 548/1000 [2:34:56<2:07:48, 16.96s/it][Succeeded / Failed / Skipped / Total] 136 / 397 / 15 / 548:  55%|█████▍    | 549/1000 [2:35:07<2:07:25, 16.95s/it][Succeeded / Failed / Skipped / Total] 136 / 398 / 15 / 549:  55%|█████▍    | 549/1000 [2:35:07<2:07:25, 16.95s/it][Succeeded / Failed / Skipped / Total] 136 / 398 / 15 / 549:  55%|█████▌    | 550/1000 [2:35:07<2:06:55, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 399 / 15 / 550:  55%|█████▌    | 550/1000 [2:35:07<2:06:55, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 399 / 15 / 550:  55%|█████▌    | 551/1000 [2:35:37<2:06:48, 16.95s/it]Creates a flow with the specified callback name. --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[snacks]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[snacks]] -> { return ByteString . fromString ( Json . stringify ( [[snacks]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Adds a constraint validator to the map.@param < T> the type parameter@param < MappedConstraintValidatorFactory> the factory --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[lobotomy]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new instance of this constraint validator. --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[billions]] [[encompasses]] ConstraintValidator < ? , ? > > [[billions]] newInstance ( Class < [[billions]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Renders a bad request. --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[chaplin]] ( RequestHeader [[wondered]] , String [[convey]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[wondered]] . method ( ) , [[wondered]] . uri ( ) , [[convey]] , [[wondered]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 548 ---------------------------------------------
Creates a new configuration object. --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String [[u1]] , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , [[u1]] ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[at]] ( String [[coover]] , String [[pensioned]] , String [[joyless]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[coover]] , [[pensioned]] ) , new JPAConfig . PersistenceUnit ( [[joyless]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 549 ---------------------------------------------
Called when an error occurs. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[cancer]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
Renders a forbidden page. --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[deluxe]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 551 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 400 / 15 / 551:  55%|█████▌    | 551/1000 [2:35:37<2:06:48, 16.95s/it][Succeeded / Failed / Skipped / Total] 136 / 400 / 15 / 551:  55%|█████▌    | 552/1000 [2:35:48<2:06:27, 16.94s/it][Succeeded / Failed / Skipped / Total] 136 / 401 / 15 / 552:  55%|█████▌    | 552/1000 [2:35:48<2:06:27, 16.94s/it][Succeeded / Failed / Skipped / Total] 136 / 401 / 15 / 552:  55%|█████▌    | 553/1000 [2:36:05<2:06:09, 16.93s/it][Succeeded / Failed / Skipped / Total] 136 / 402 / 15 / 553:  55%|█████▌    | 553/1000 [2:36:05<2:06:09, 16.93s/it][Succeeded / Failed / Skipped / Total] 136 / 402 / 15 / 553:  55%|█████▌    | 554/1000 [2:36:26<2:05:56, 16.94s/it][Succeeded / Failed / Skipped / Total] 136 / 403 / 15 / 554:  55%|█████▌    | 554/1000 [2:36:26<2:05:56, 16.94s/it][Succeeded / Failed / Skipped / Total] 136 / 403 / 15 / 554:  56%|█████▌    | 555/1000 [2:36:30<2:05:29, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 404 / 15 / 555:  56%|█████▌    | 555/1000 [2:36:30<2:05:29, 16.92s/it][Succeeded / Failed / Skipped / Total] 136 / 404 / 15 / 555:  56%|█████▌    | 556/1000 [2:36:48<2:05:13, 16.92s/it][Succeeded / Failed / Skipped / Total] 137 / 404 / 15 / 556:  56%|█████▌    | 556/1000 [2:36:48<2:05:13, 16.92s/it][Succeeded / Failed / Skipped / Total] 137 / 404 / 15 / 556:  56%|█████▌    | 557/1000 [2:36:53<2:04:46, 16.90s/it][Succeeded / Failed / Skipped / Total] 137 / 405 / 15 / 557:  56%|█████▌    | 557/1000 [2:36:53<2:04:46, 16.90s/it][Succeeded / Failed / Skipped / Total] 137 / 405 / 15 / 557:  56%|█████▌    | 558/1000 [2:37:05<2:04:25, 16.89s/it][Succeeded / Failed / Skipped / Total] 137 / 406 / 15 / 558:  56%|█████▌    | 558/1000 [2:37:05<2:04:25, 16.89s/it][Succeeded / Failed / Skipped / Total] 137 / 406 / 15 / 558:  56%|█████▌    | 559/1000 [2:37:05<2:03:55, 16.86s/it]Called when a request is not found. --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[landowner]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 552 ---------------------------------------------
Converts an exception to a useful exception. --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[drills]] ( final Throwable [[bricks]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[bricks]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 553 ---------------------------------------------
Log a server error. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[affirmed]] ( RequestHeader [[inquired]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[inquired]] . method ( ) , [[inquired]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Called when an error occurred. --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[dogcatcher]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 555 ---------------------------------------------
Handles a server error. --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[segura]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
Creates a handler from a directory and a jar file. --> Schnauzer. --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[schnauzer]] ( File directory , JarFile jarFile , String base ) { return [[schnauzer]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 557 ---------------------------------------------
Creates a handler from a directory. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[tormenting]] ( File directory ) { FileRepository [[mortgage]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[mortgage]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 558 ---------------------------------------------
Called when an error has occurred. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[wealth]] ( RequestHeader [[demands]] , Throwable [[exemptions]] ) { try { UsefulException [[nudges]] = throwableToUsefulException ( [[exemptions]] ) ; logServerError ( [[demands]] , [[nudges]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[demands]] , [[nudges]] ) ; default : return onDevServerError ( [[demands]] , [[nudges]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
[Succeeded / Failed / Skipped / Total] 137 / 407 / 15 / 559:  56%|█████▌    | 559/1000 [2:37:05<2:03:55, 16.86s/it][Succeeded / Failed / Skipped / Total] 137 / 407 / 15 / 559:  56%|█████▌    | 560/1000 [2:38:06<2:04:14, 16.94s/it][Succeeded / Failed / Skipped / Total] 138 / 407 / 15 / 560:  56%|█████▌    | 560/1000 [2:38:06<2:04:14, 16.94s/it][Succeeded / Failed / Skipped / Total] 138 / 407 / 15 / 560:  56%|█████▌    | 561/1000 [2:38:15<2:03:50, 16.93s/it][Succeeded / Failed / Skipped / Total] 139 / 407 / 15 / 561:  56%|█████▌    | 561/1000 [2:38:15<2:03:50, 16.93s/it][Succeeded / Failed / Skipped / Total] 139 / 407 / 15 / 561:  56%|█████▌    | 562/1000 [2:38:29<2:03:31, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 408 / 15 / 562:  56%|█████▌    | 562/1000 [2:38:29<2:03:31, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 408 / 15 / 562:  56%|█████▋    | 563/1000 [2:38:46<2:03:14, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 409 / 15 / 563:  56%|█████▋    | 563/1000 [2:38:46<2:03:14, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 409 / 15 / 563:  56%|█████▋    | 564/1000 [2:39:33<2:03:21, 16.98s/it][Succeeded / Failed / Skipped / Total] 139 / 410 / 15 / 564:  56%|█████▋    | 564/1000 [2:39:33<2:03:21, 16.98s/it][Succeeded / Failed / Skipped / Total] 139 / 410 / 15 / 564:  56%|█████▋    | 565/1000 [2:39:36<2:02:53, 16.95s/it][Succeeded / Failed / Skipped / Total] 139 / 411 / 15 / 565:  56%|█████▋    | 565/1000 [2:39:36<2:02:53, 16.95s/it][Succeeded / Failed / Skipped / Total] 139 / 411 / 15 / 565:  57%|█████▋    | 566/1000 [2:39:37<2:02:23, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 411 / 16 / 566:  57%|█████▋    | 566/1000 [2:39:37<2:02:23, 16.92s/it][Succeeded / Failed / Skipped / Total] 139 / 411 / 16 / 566:  57%|█████▋    | 567/1000 [2:40:01<2:02:12, 16.93s/it][Succeeded / Failed / Skipped / Total] 139 / 412 / 16 / 567:  57%|█████▋    | 567/1000 [2:40:01<2:02:12, 16.93s/it][Succeeded / Failed / Skipped / Total] 139 / 412 / 16 / 567:  57%|█████▋    | 568/1000 [2:40:22<2:01:58, 16.94s/it][Succeeded / Failed / Skipped / Total] 139 / 413 / 16 / 568:  57%|█████▋    | 568/1000 [2:40:22<2:01:58, 16.94s/it][Succeeded / Failed / Skipped / Total] 139 / 413 / 16 / 568:  57%|█████▋    | 569/1000 [2:40:37<2:01:39, 16.94s/it]--------------------------------------------- Result 559 ---------------------------------------------
Finds the method with the given name and returns it.@param cls the class to search for the method@param methodName the name of the method@param parameterTypes the parameter types of the method@return the matching method --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String [[methodName]] , final Class < ? > ... [[parameterTypes]] ) { try { final Method [[method]] = cls . getMethod ( [[methodName]] , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[headsails]] ( final Class < ? > cls , final String [[fuselage]] , final Class < ? > ... [[understand]] ) { try { final Method [[solutions]] = cls . getMethod ( [[fuselage]] , [[understand]] ) ; MemberUtils . setAccessibleWorkaround ( [[solutions]] ) ; return [[solutions]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a chunked HTTP entity. --> Mortbay HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[mortuary]] ( Source < ByteString , ? > [[depositions]] , Optional < String > contentType ) { return new Chunked ( [[depositions]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 561 ---------------------------------------------
Consumes data from this materializer. --> Folds a carpet --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[fado]] ( Materializer [[carpet]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[carpet]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a handler from a jar file. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[regurgitate]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a new HTTP entity from a string.@param content the string to parse@param charset the charset to use@return a new HTTP entity --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[ingredient]] , String [[barratt]] ) { return new Strict ( ByteString . fromString ( [[ingredient]] , [[barratt]] ) , Optional . of ( "text/plain; charset=" + [[barratt]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 564 ---------------------------------------------
Converts a content object to an entity object.@param content The content object to convert.@param charset The charset to use.@return The entity object. --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String [[charset]] ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[carine]] ( Content [[connotation]] , String [[darkness]] ) { String body ; if ( [[connotation]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Converts a JSON response to a Result object. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[requirement]] ( int status , JsonNode [[satisfied]] ) { return [[requirement]] ( [[requirement]] , [[satisfied]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 566 ---------------------------------------------
Finds a user by its id. --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 567 ---------------------------------------------
Creates a response with the specified status code and content. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[norma]] ( int [[rules]] , byte [ ] [[substances]] ) { if ( [[substances]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[norma]] , new HttpEntity . Strict ( ByteString . fromArray ( [[substances]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a unique call. --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[especial]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 414 / 16 / 569:  57%|█████▋    | 569/1000 [2:40:37<2:01:39, 16.94s/it][Succeeded / Failed / Skipped / Total] 139 / 414 / 16 / 569:  57%|█████▋    | 570/1000 [2:41:01<2:01:28, 16.95s/it][Succeeded / Failed / Skipped / Total] 140 / 414 / 16 / 570:  57%|█████▋    | 570/1000 [2:41:01<2:01:28, 16.95s/it][Succeeded / Failed / Skipped / Total] 140 / 414 / 16 / 570:  57%|█████▋    | 571/1000 [2:41:05<2:01:01, 16.93s/it][Succeeded / Failed / Skipped / Total] 140 / 415 / 16 / 571:  57%|█████▋    | 571/1000 [2:41:05<2:01:01, 16.93s/it][Succeeded / Failed / Skipped / Total] 140 / 415 / 16 / 571:  57%|█████▋    | 572/1000 [2:41:10<2:00:36, 16.91s/it][Succeeded / Failed / Skipped / Total] 140 / 416 / 16 / 572:  57%|█████▋    | 572/1000 [2:41:10<2:00:36, 16.91s/it][Succeeded / Failed / Skipped / Total] 140 / 416 / 16 / 572:  57%|█████▋    | 573/1000 [2:41:17<2:00:11, 16.89s/it][Succeeded / Failed / Skipped / Total] 140 / 417 / 16 / 573:  57%|█████▋    | 573/1000 [2:41:17<2:00:11, 16.89s/it][Succeeded / Failed / Skipped / Total] 140 / 417 / 16 / 573:  57%|█████▋    | 574/1000 [2:41:25<1:59:48, 16.87s/it][Succeeded / Failed / Skipped / Total] 141 / 417 / 16 / 574:  57%|█████▋    | 574/1000 [2:41:25<1:59:48, 16.87s/it][Succeeded / Failed / Skipped / Total] 141 / 417 / 16 / 574:  57%|█████▊    | 575/1000 [2:41:53<1:59:39, 16.89s/it][Succeeded / Failed / Skipped / Total] 141 / 418 / 16 / 575:  57%|█████▊    | 575/1000 [2:41:53<1:59:39, 16.89s/it][Succeeded / Failed / Skipped / Total] 141 / 418 / 16 / 575:  58%|█████▊    | 576/1000 [2:42:20<1:59:30, 16.91s/it][Succeeded / Failed / Skipped / Total] 141 / 419 / 16 / 576:  58%|█████▊    | 576/1000 [2:42:20<1:59:30, 16.91s/it][Succeeded / Failed / Skipped / Total] 141 / 419 / 16 / 576:  58%|█████▊    | 577/1000 [2:42:29<1:59:07, 16.90s/it][Succeeded / Failed / Skipped / Total] 141 / 420 / 16 / 577:  58%|█████▊    | 577/1000 [2:42:29<1:59:07, 16.90s/it][Succeeded / Failed / Skipped / Total] 141 / 420 / 16 / 577:  58%|█████▊    | 578/1000 [2:42:30<1:58:38, 16.87s/it][Succeeded / Failed / Skipped / Total] 141 / 421 / 16 / 578:  58%|█████▊    | 578/1000 [2:42:30<1:58:38, 16.87s/it][Succeeded / Failed / Skipped / Total] 141 / 421 / 16 / 578:  58%|█████▊    | 579/1000 [2:42:33<1:58:11, 16.84s/it]Returns the preferred language for the specified collection of languages. --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[prefered]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 570 ---------------------------------------------
Returns the absolute URL for this request. --> S sulphurs --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[sulphuric]] ( Http . Request request ) { return [[sulphuric]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 571 ---------------------------------------------
Creates a call with the specified fragment. --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[lobotomy]] ( String [[gleam]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[gleam]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 572 ---------------------------------------------
Sets the status of a file. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[malady]] ( int [[statutes]] , File [[happiest]] ) { return [[malady]] ( [[malady]] , [[happiest]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Sends a status response. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream [[content]] , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[regulatory]] ( int [[clause]] , InputStream [[joyful]] , long [[keene]] ) { return [[regulatory]] ( [[regulatory]] ) . sendInputStream ( [[joyful]] , [[keene]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 574 ---------------------------------------------
Returns the web socket URL. --> hoarded requests --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[hoarded]] ( Http . Request request ) { return [[hoarded]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 575 ---------------------------------------------
Sends a JSON response. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[legislation]] ( int [[statute]] , JsonNode [[happy]] , JsonEncoding [[commissioners]] ) { if ( [[happy]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[legislation]] ( [[legislation]] ) . sendJson ( [[happy]] , [[commissioners]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 576 ---------------------------------------------
Converts the given object to a JSON representation.@param data the object to convert.@return the JSON representation. --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[statement]] ) { try { return mapper ( ) . valueToTree ( [[statement]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 577 ---------------------------------------------
Creates a new connection callable. --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[hinder]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[relationships]] ) { try { return [[hinder]] . call ( [[relationships]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 578 ---------------------------------------------
Creates a new BuildDocHandler from a list of files. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] [[repositories]] = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { [[repositories]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[zanzibar]] ( File [ ] [[dossiers]] , String [ ] baseDirs ) throws IOException { assert ( [[dossiers]] . length == baseDirs . length ) ; FileRepository [ ] [[racketeering]] = new FileRepository [ [[dossiers]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[dossiers]] . length ; i ++ ) { File file = [[dossiers]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { [[racketeering]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
[Succeeded / Failed / Skipped / Total] 141 / 422 / 16 / 579:  58%|█████▊    | 579/1000 [2:42:33<1:58:11, 16.84s/it][Succeeded / Failed / Skipped / Total] 141 / 422 / 16 / 579:  58%|█████▊    | 580/1000 [2:42:37<1:57:45, 16.82s/it][Succeeded / Failed / Skipped / Total] 141 / 423 / 16 / 580:  58%|█████▊    | 580/1000 [2:42:37<1:57:45, 16.82s/it][Succeeded / Failed / Skipped / Total] 141 / 423 / 16 / 580:  58%|█████▊    | 581/1000 [2:43:13<1:57:43, 16.86s/it][Succeeded / Failed / Skipped / Total] 141 / 424 / 16 / 581:  58%|█████▊    | 581/1000 [2:43:13<1:57:43, 16.86s/it][Succeeded / Failed / Skipped / Total] 141 / 424 / 16 / 581:  58%|█████▊    | 582/1000 [2:43:19<1:57:18, 16.84s/it][Succeeded / Failed / Skipped / Total] 141 / 425 / 16 / 582:  58%|█████▊    | 582/1000 [2:43:19<1:57:18, 16.84s/it][Succeeded / Failed / Skipped / Total] 141 / 425 / 16 / 582:  58%|█████▊    | 583/1000 [2:43:27<1:56:54, 16.82s/it][Succeeded / Failed / Skipped / Total] 141 / 426 / 16 / 583:  58%|█████▊    | 583/1000 [2:43:27<1:56:54, 16.82s/it][Succeeded / Failed / Skipped / Total] 141 / 426 / 16 / 583:  58%|█████▊    | 584/1000 [2:43:38<1:56:33, 16.81s/it][Succeeded / Failed / Skipped / Total] 141 / 427 / 16 / 584:  58%|█████▊    | 584/1000 [2:43:38<1:56:33, 16.81s/it][Succeeded / Failed / Skipped / Total] 141 / 427 / 16 / 584:  58%|█████▊    | 585/1000 [2:44:03<1:56:22, 16.83s/it][Succeeded / Failed / Skipped / Total] 142 / 427 / 16 / 585:  58%|█████▊    | 585/1000 [2:44:03<1:56:22, 16.83s/it][Succeeded / Failed / Skipped / Total] 142 / 427 / 16 / 585:  59%|█████▊    | 586/1000 [2:44:05<1:55:55, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 428 / 16 / 586:  59%|█████▊    | 586/1000 [2:44:05<1:55:55, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 428 / 16 / 586:  59%|█████▊    | 587/1000 [2:44:27<1:55:42, 16.81s/it]--------------------------------------------- Result 579 ---------------------------------------------
Creates a handler from a directory and a jar file. --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[shira]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 580 ---------------------------------------------
Converts a JSON node into a value of the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[esta]] > [[esta]] fromJson ( JsonNode json , Class < [[esta]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Creates a new connection runnable. --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[andjust]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[liens]] ) { try { block . run ( [[liens]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Parses the content of an input stream. --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[aboutyou]] ( java . io . InputStream [[guesser]] ) { try { return mapper ( ) . readTree ( [[guesser]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parses the given string into a JSON object. --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[averse]] ) { try { return mapper ( ) . readTree ( [[averse]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Display a list of constraints. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[dungarees]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[dungarees]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 585 ---------------------------------------------
Returns the relative path to the specified file or directory. --> Compares two strings@param cougar@param blips@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[compare]] ( String [[cougar]] , String [[blips]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Creates a new Router instance. --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[praise]] ( Mode [[pleas]] , int port , Function < BuiltInComponents , Router > [[impede]] ) { return new Builder ( ) . [[pleas]] ( [[pleas]] ) . http ( port ) . build ( [[impede]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 587 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 429 / 16 / 587:  59%|█████▊    | 587/1000 [2:44:27<1:55:42, 16.81s/it][Succeeded / Failed / Skipped / Total] 142 / 429 / 16 / 587:  59%|█████▉    | 588/1000 [2:44:40<1:55:23, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 430 / 16 / 588:  59%|█████▉    | 588/1000 [2:44:40<1:55:23, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 430 / 16 / 588:  59%|█████▉    | 589/1000 [2:44:52<1:55:02, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 431 / 16 / 589:  59%|█████▉    | 589/1000 [2:44:52<1:55:02, 16.80s/it][Succeeded / Failed / Skipped / Total] 142 / 431 / 16 / 589:  59%|█████▉    | 590/1000 [2:45:19<1:54:52, 16.81s/it][Succeeded / Failed / Skipped / Total] 142 / 432 / 16 / 590:  59%|█████▉    | 590/1000 [2:45:19<1:54:52, 16.81s/it][Succeeded / Failed / Skipped / Total] 142 / 432 / 16 / 590:  59%|█████▉    | 591/1000 [2:45:22<1:54:26, 16.79s/it][Succeeded / Failed / Skipped / Total] 142 / 433 / 16 / 591:  59%|█████▉    | 591/1000 [2:45:22<1:54:26, 16.79s/it][Succeeded / Failed / Skipped / Total] 142 / 433 / 16 / 591:  59%|█████▉    | 592/1000 [2:45:52<1:54:19, 16.81s/it][Succeeded / Failed / Skipped / Total] 142 / 434 / 16 / 592:  59%|█████▉    | 592/1000 [2:45:52<1:54:19, 16.81s/it][Succeeded / Failed / Skipped / Total] 142 / 434 / 16 / 592:  59%|█████▉    | 593/1000 [2:45:55<1:53:53, 16.79s/it][Succeeded / Failed / Skipped / Total] 143 / 434 / 16 / 593:  59%|█████▉    | 593/1000 [2:45:55<1:53:53, 16.79s/it][Succeeded / Failed / Skipped / Total] 143 / 434 / 16 / 593:  59%|█████▉    | 594/1000 [2:46:27<1:53:46, 16.81s/it][Succeeded / Failed / Skipped / Total] 143 / 435 / 16 / 594:  59%|█████▉    | 594/1000 [2:46:27<1:53:46, 16.81s/it][Succeeded / Failed / Skipped / Total] 143 / 435 / 16 / 594:  60%|█████▉    | 595/1000 [2:46:37<1:53:24, 16.80s/it]Returns the canonical path of the given URL. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[dockside]] ( String url ) { String [ ] [[archeologists]] = toSegments ( url ) ; Stack < String > [[dockside]] = new Stack <> ( ) ; for ( String comp : [[archeologists]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[dockside]] . empty ( ) && [[dockside]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[dockside]] . push ( comp ) ; else [[dockside]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[dockside]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 588 ---------------------------------------------
Parse a cron expression.@param cron the cron@return the date --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[betas]] ( String [[portholes]] ) { try { return new CronExpression ( [[portholes]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[portholes]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
Display a constraint. --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[obstacles]] ) { final Display [[pituitary]] = [[obstacles]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[pituitary]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[pituitary]] . attributes ( ) ) . map ( attr -> [[obstacles]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 590 ---------------------------------------------
Creates a new Guice application builder. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[grower]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 591 ---------------------------------------------
Renders a page. --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[PORQUE]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 592 ---------------------------------------------
Returns the binding key for the specified annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[prolong]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
Get the next cron interval.@param cron@param date@return --> Get an impenetrable cron expression@param uriel@param schedules@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[impenetrable]] ( String [[uriel]] , Date [[schedules]] ) { try { return new CronExpression ( [[uriel]] ) . getNextInterval ( [[schedules]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[uriel]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 594 ---------------------------------------------
Returns a binding key with the specified annotation. --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[prolong]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 595 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 436 / 16 / 595:  60%|█████▉    | 595/1000 [2:46:37<1:53:24, 16.80s/it][Succeeded / Failed / Skipped / Total] 143 / 436 / 16 / 595:  60%|█████▉    | 596/1000 [2:46:37<1:52:56, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 437 / 16 / 596:  60%|█████▉    | 596/1000 [2:46:37<1:52:56, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 437 / 16 / 596:  60%|█████▉    | 597/1000 [2:46:44<1:52:33, 16.76s/it][Succeeded / Failed / Skipped / Total] 143 / 438 / 16 / 597:  60%|█████▉    | 597/1000 [2:46:44<1:52:33, 16.76s/it][Succeeded / Failed / Skipped / Total] 143 / 438 / 16 / 597:  60%|█████▉    | 598/1000 [2:47:08<1:52:21, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 439 / 16 / 598:  60%|█████▉    | 598/1000 [2:47:08<1:52:21, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 439 / 16 / 598:  60%|█████▉    | 599/1000 [2:47:13<1:51:57, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 440 / 16 / 599:  60%|█████▉    | 599/1000 [2:47:13<1:51:57, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 440 / 16 / 599:  60%|██████    | 600/1000 [2:47:28<1:51:39, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 441 / 16 / 600:  60%|██████    | 600/1000 [2:47:28<1:51:39, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 441 / 16 / 600:  60%|██████    | 601/1000 [2:47:40<1:51:18, 16.74s/it][Succeeded / Failed / Skipped / Total] 143 / 442 / 16 / 601:  60%|██████    | 601/1000 [2:47:40<1:51:18, 16.74s/it][Succeeded / Failed / Skipped / Total] 143 / 442 / 16 / 601:  60%|██████    | 602/1000 [2:48:31<1:51:25, 16.80s/it][Succeeded / Failed / Skipped / Total] 143 / 443 / 16 / 602:  60%|██████    | 602/1000 [2:48:31<1:51:25, 16.80s/it][Succeeded / Failed / Skipped / Total] 143 / 443 / 16 / 602:  60%|██████    | 603/1000 [2:48:32<1:50:57, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 444 / 16 / 603:  60%|██████    | 603/1000 [2:48:32<1:50:57, 16.77s/it][Succeeded / Failed / Skipped / Total] 143 / 444 / 16 / 603:  60%|██████    | 604/1000 [2:48:34<1:50:31, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 445 / 16 / 604:  60%|██████    | 604/1000 [2:48:34<1:50:31, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 445 / 16 / 604:  60%|██████    | 605/1000 [2:48:51<1:50:14, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 446 / 16 / 605:  60%|██████    | 605/1000 [2:48:51<1:50:14, 16.75s/it][Succeeded / Failed / Skipped / Total] 143 / 446 / 16 / 605:  61%|██████    | 606/1000 [2:48:53<1:49:48, 16.72s/it]Creates a new client.@param config the configuration@param cache the cache@param materializer the materializer@return the client --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , [[materializer]] ) ; return new AhcWSClient ( client , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[construct]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[adjoins]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , [[adjoins]] ) ; return new AhcWSClient ( client , [[adjoins]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 596 ---------------------------------------------
Creates a session for the specified key and value. --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String [[value]] ) { [[session]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[lectures]] ( String key , String [[deserving]] ) { [[lectures]] ( ) . put ( key , [[deserving]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Convenience method to flash. --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[flashing]] ( String [[decisive]] , String [[appreciates]] ) { [[flashing]] ( ) . put ( [[decisive]] , [[appreciates]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 598 ---------------------------------------------
Creates a binding from a supplier. --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[enlarging]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Creates a binding for the specified implementation. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implantation]] ) { return underlying . to ( [[implantation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
Creates a binding from this provider. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[among]] ( final Provider < ? extends T > [[traders]] ) { return underlying . to ( [[traders]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Converts the given key to this binding. --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[between]] ( final BindingKey < ? extends T > [[nucleus]] ) { return underlying . to ( [[nucleus]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 602 ---------------------------------------------
Returns a list of available languages. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[intellectually]] ( Application [[minded]] ) { play . api . i18n . Langs langs = [[minded]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[congratulates]] = Scala . asJava ( langs . availables ( ) ) ; return [[congratulates]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 603 ---------------------------------------------
Creates a reader from a map of evolutions. --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader fromMap ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[renewed]] . EvolutionsReader fromMap ( Map < String , List < Evolution > > [[renewed]] ) { return new SimpleEvolutionsReader ( [[renewed]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a binding from the given provider. --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[encompasses]] Provider < ? extends T > > Binding < T > [[cathleen]] ( final Class < P > [[marketers]] ) { return underlying . toProvider ( [[marketers]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a default evolution database.@param evolutions@return --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[kicks]] . EvolutionsReader forDefault ( Evolution ... [[kicks]] ) { Map < String , List < Evolution > > [[cartes]] = new HashMap < String , List < Evolution > > ( ) ; [[cartes]] . put ( "default" , Arrays . asList ( [[kicks]] ) ) ; return fromMap ( [[cartes]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
[Succeeded / Failed / Skipped / Total] 143 / 447 / 16 / 606:  61%|██████    | 606/1000 [2:48:53<1:49:48, 16.72s/it][Succeeded / Failed / Skipped / Total] 143 / 447 / 16 / 606:  61%|██████    | 607/1000 [2:49:44<1:49:53, 16.78s/it][Succeeded / Failed / Skipped / Total] 143 / 448 / 16 / 607:  61%|██████    | 607/1000 [2:49:44<1:49:53, 16.78s/it][Succeeded / Failed / Skipped / Total] 143 / 448 / 16 / 607:  61%|██████    | 608/1000 [2:49:48<1:49:28, 16.76s/it][Succeeded / Failed / Skipped / Total] 143 / 449 / 16 / 608:  61%|██████    | 608/1000 [2:49:48<1:49:28, 16.76s/it][Succeeded / Failed / Skipped / Total] 143 / 449 / 16 / 608:  61%|██████    | 609/1000 [2:49:48<1:49:01, 16.73s/it][Succeeded / Failed / Skipped / Total] 143 / 450 / 16 / 609:  61%|██████    | 609/1000 [2:49:48<1:49:01, 16.73s/it][Succeeded / Failed / Skipped / Total] 143 / 450 / 16 / 609:  61%|██████    | 610/1000 [2:50:13<1:48:49, 16.74s/it][Succeeded / Failed / Skipped / Total] 144 / 450 / 16 / 610:  61%|██████    | 610/1000 [2:50:13<1:48:49, 16.74s/it][Succeeded / Failed / Skipped / Total] 144 / 450 / 16 / 610:  61%|██████    | 611/1000 [2:50:15<1:48:23, 16.72s/it][Succeeded / Failed / Skipped / Total] 144 / 451 / 16 / 611:  61%|██████    | 611/1000 [2:50:15<1:48:23, 16.72s/it][Succeeded / Failed / Skipped / Total] 144 / 451 / 16 / 611:  61%|██████    | 612/1000 [2:50:33<1:48:07, 16.72s/it][Succeeded / Failed / Skipped / Total] 144 / 452 / 16 / 612:  61%|██████    | 612/1000 [2:50:33<1:48:07, 16.72s/it][Succeeded / Failed / Skipped / Total] 144 / 452 / 16 / 612:  61%|██████▏   | 613/1000 [2:50:38<1:47:43, 16.70s/it][Succeeded / Failed / Skipped / Total] 144 / 453 / 16 / 613:  61%|██████▏   | 613/1000 [2:50:38<1:47:43, 16.70s/it][Succeeded / Failed / Skipped / Total] 144 / 453 / 16 / 613:  61%|██████▏   | 614/1000 [2:50:58<1:47:28, 16.71s/it][Succeeded / Failed / Skipped / Total] 144 / 454 / 16 / 614:  61%|██████▏   | 614/1000 [2:50:58<1:47:28, 16.71s/it][Succeeded / Failed / Skipped / Total] 144 / 454 / 16 / 614:  62%|██████▏   | 615/1000 [2:50:58<1:47:01, 16.68s/it]--------------------------------------------- Result 606 ---------------------------------------------
Waits for the specified amount of time to complete. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[milestones]] , final long [[funds]] , final TimeUnit unit ) { requireNonNull ( [[milestones]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[term]] = FiniteDuration . apply ( [[funds]] , unit ) ; return toJava ( delegate . timeout ( [[term]] , Scala . asScalaWithFuture ( ( ) -> [[milestones]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 607 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[tasked]] ( GuiceableModule ... [[packet]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[packet]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 608 ---------------------------------------------
Creates a new application builder with the specified configuration. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[widescreen]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[instructs]] ( com . google . inject . Module ... modules ) { return [[instructs]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 610 ---------------------------------------------
Evolve the evolution of the given database. --> Evolve a single yorkshire script --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[yorkshire]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[commandeered]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[commandeered]] . evolve ( [[commandeered]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 611 ---------------------------------------------
Returns the preferred language for the specified application. --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[choosing]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 612 ---------------------------------------------
Creates a new application builder with the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[snipe]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the specified modules. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[blade]] ) { return load ( Guiceable . [[blade]] ( [[blade]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Creates a new Guice application builder. --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
[Succeeded / Failed / Skipped / Total] 144 / 455 / 16 / 615:  62%|██████▏   | 615/1000 [2:50:58<1:47:01, 16.68s/it][Succeeded / Failed / Skipped / Total] 144 / 455 / 16 / 615:  62%|██████▏   | 616/1000 [2:51:48<1:47:06, 16.74s/it][Succeeded / Failed / Skipped / Total] 144 / 456 / 16 / 616:  62%|██████▏   | 616/1000 [2:51:48<1:47:06, 16.74s/it][Succeeded / Failed / Skipped / Total] 144 / 456 / 16 / 616:  62%|██████▏   | 617/1000 [2:51:53<1:46:41, 16.71s/it][Succeeded / Failed / Skipped / Total] 144 / 457 / 16 / 617:  62%|██████▏   | 617/1000 [2:51:53<1:46:41, 16.71s/it][Succeeded / Failed / Skipped / Total] 144 / 457 / 16 / 617:  62%|██████▏   | 618/1000 [2:53:23<1:47:10, 16.83s/it][Succeeded / Failed / Skipped / Total] 144 / 458 / 16 / 618:  62%|██████▏   | 618/1000 [2:53:23<1:47:10, 16.83s/it][Succeeded / Failed / Skipped / Total] 144 / 458 / 16 / 618:  62%|██████▏   | 619/1000 [2:53:47<1:46:57, 16.84s/it][Succeeded / Failed / Skipped / Total] 144 / 459 / 16 / 619:  62%|██████▏   | 619/1000 [2:53:47<1:46:57, 16.84s/it][Succeeded / Failed / Skipped / Total] 144 / 459 / 16 / 619:  62%|██████▏   | 620/1000 [2:53:51<1:46:33, 16.83s/it][Succeeded / Failed / Skipped / Total] 144 / 460 / 16 / 620:  62%|██████▏   | 620/1000 [2:53:51<1:46:33, 16.83s/it][Succeeded / Failed / Skipped / Total] 144 / 460 / 16 / 620:  62%|██████▏   | 621/1000 [2:54:03<1:46:13, 16.82s/it]--------------------------------------------- Result 615 ---------------------------------------------
Loads the specified bindings. --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[offload]] ( play . api . inject . Binding < ? > ... [[bonded]] ) { return [[offload]] ( Guiceable . [[bonded]] ( [[bonded]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Encodes the given cookie. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[hash]] ( Cookie [[witnesses]] ) { if ( [[witnesses]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[transcript]] = new StringBuilder ( ) ; [[hash]] ( [[transcript]] , [[witnesses]] ) ; return stripTrailingSeparator ( [[transcript]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
Creates a new EntityManager. --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[about]] ( ) { Deque < EntityManager > [[cms]] = this . emStack ( "[[Actually]]" == "[[Actually]]" ) ; if ( [[cms]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[cms]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 618 ---------------------------------------------
Converts an array of arguments to a list of errors. --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[lawsuits]] ) { if ( [[lawsuits]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[lawsuits]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 619 ---------------------------------------------
Pushes an entity manager onto the stack. --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[zanzibar]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 620 ---------------------------------------------
Checks if the given class array is assignable to the given toClassArray.@param classArray the class array to check.@param toClassArray the toClassArray to check.@param autoboxing true if the class array should be autoboxed.@return true if the class array is assignable to the given toClassArray. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[reiss]] ( Class < ? > [ ] [[phonograph]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[phonograph]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[phonograph]] == null ) { [[phonograph]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[phonograph]] . length ; i ++ ) { if ( [[reiss]] ( [[phonograph]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 621 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 461 / 16 / 621:  62%|██████▏   | 621/1000 [2:54:03<1:46:13, 16.82s/it][Succeeded / Failed / Skipped / Total] 144 / 461 / 16 / 621:  62%|██████▏   | 622/1000 [2:54:18<1:45:55, 16.81s/it][Succeeded / Failed / Skipped / Total] 144 / 462 / 16 / 622:  62%|██████▏   | 622/1000 [2:54:18<1:45:55, 16.81s/it][Succeeded / Failed / Skipped / Total] 144 / 462 / 16 / 622:  62%|██████▏   | 623/1000 [2:54:32<1:45:37, 16.81s/it][Succeeded / Failed / Skipped / Total] 144 / 463 / 16 / 623:  62%|██████▏   | 623/1000 [2:54:32<1:45:37, 16.81s/it][Succeeded / Failed / Skipped / Total] 144 / 463 / 16 / 623:  62%|██████▏   | 624/1000 [2:55:01<1:45:28, 16.83s/it][Succeeded / Failed / Skipped / Total] 145 / 463 / 16 / 624:  62%|██████▏   | 624/1000 [2:55:01<1:45:28, 16.83s/it][Succeeded / Failed / Skipped / Total] 145 / 463 / 16 / 624:  62%|██████▎   | 625/1000 [2:55:21<1:45:12, 16.83s/it][Succeeded / Failed / Skipped / Total] 145 / 464 / 16 / 625:  62%|██████▎   | 625/1000 [2:55:21<1:45:12, 16.83s/it][Succeeded / Failed / Skipped / Total] 145 / 464 / 16 / 625:  63%|██████▎   | 626/1000 [2:55:40<1:44:57, 16.84s/it][Succeeded / Failed / Skipped / Total] 146 / 464 / 16 / 626:  63%|██████▎   | 626/1000 [2:55:40<1:44:57, 16.84s/it][Succeeded / Failed / Skipped / Total] 146 / 464 / 16 / 626:  63%|██████▎   | 627/1000 [2:55:41<1:44:31, 16.81s/it][Succeeded / Failed / Skipped / Total] 146 / 465 / 16 / 627:  63%|██████▎   | 627/1000 [2:55:41<1:44:31, 16.81s/it][Succeeded / Failed / Skipped / Total] 146 / 465 / 16 / 627:  63%|██████▎   | 628/1000 [2:55:46<1:44:07, 16.79s/it][Succeeded / Failed / Skipped / Total] 146 / 466 / 16 / 628:  63%|██████▎   | 628/1000 [2:55:46<1:44:07, 16.79s/it][Succeeded / Failed / Skipped / Total] 146 / 466 / 16 / 628:  63%|██████▎   | 629/1000 [2:56:02<1:43:49, 16.79s/it]Gets the entity manager stack. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[dynasties]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[downs]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[downs]] != null ) { return ( Deque < EntityManager > ) [[downs]] ; } else { Deque < EntityManager > [[adm]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[adm]] ) ; return [[adm]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 622 ---------------------------------------------
Returns a list of global validation errors. --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[enhancements]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 623 ---------------------------------------------
Fills the form with the specified value. --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[decked]] ( T [[assessed]] ) { if ( [[assessed]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[assessed]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 624 ---------------------------------------------
Returns the value associated with the given key. --> Convenience method to convert a string to an object. --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[bravery]] ( String [[substantial]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[substantial]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 625 ---------------------------------------------
Parses the given text and converts it to the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[votre]] > [[votre]] parse ( String text , Class < [[votre]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 626 ---------------------------------------------
Converts the supplied text into an object of the specified type. --> Converts the supplied text into an anvil object. --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[anvil]] > [[anvil]] parse ( Field field , String text ) { return ( [[anvil]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 627 ---------------------------------------------
Converts errors to JSON. --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[whether]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 628 ---------------------------------------------
Creates a new dynamic form. --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[finish]] ( Map < String , Object > [[evaluating]] ) { Form < Dynamic > [[how]] = super . fill ( new Dynamic ( [[evaluating]] ) ) ; return new DynamicForm ( [[how]] . rawData ( ) , [[how]] . files ( ) , [[how]] . errors ( ) , [[how]] . [[evaluating]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 629 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 467 / 16 / 629:  63%|██████▎   | 629/1000 [2:56:02<1:43:49, 16.79s/it][Succeeded / Failed / Skipped / Total] 146 / 467 / 16 / 629:  63%|██████▎   | 630/1000 [2:56:17<1:43:32, 16.79s/it][Succeeded / Failed / Skipped / Total] 146 / 468 / 16 / 630:  63%|██████▎   | 630/1000 [2:56:17<1:43:32, 16.79s/it][Succeeded / Failed / Skipped / Total] 146 / 468 / 16 / 630:  63%|██████▎   | 631/1000 [2:56:18<1:43:05, 16.76s/it][Succeeded / Failed / Skipped / Total] 147 / 468 / 16 / 631:  63%|██████▎   | 631/1000 [2:56:18<1:43:05, 16.76s/it][Succeeded / Failed / Skipped / Total] 147 / 468 / 16 / 631:  63%|██████▎   | 632/1000 [2:56:22<1:42:42, 16.74s/it][Succeeded / Failed / Skipped / Total] 147 / 469 / 16 / 632:  63%|██████▎   | 632/1000 [2:56:22<1:42:42, 16.74s/it][Succeeded / Failed / Skipped / Total] 147 / 469 / 16 / 632:  63%|██████▎   | 633/1000 [2:57:38<1:42:59, 16.84s/it][Succeeded / Failed / Skipped / Total] 148 / 469 / 16 / 633:  63%|██████▎   | 633/1000 [2:57:38<1:42:59, 16.84s/it][Succeeded / Failed / Skipped / Total] 148 / 469 / 16 / 633:  63%|██████▎   | 634/1000 [2:58:28<1:43:01, 16.89s/it][Succeeded / Failed / Skipped / Total] 148 / 470 / 16 / 634:  63%|██████▎   | 634/1000 [2:58:28<1:43:01, 16.89s/it][Succeeded / Failed / Skipped / Total] 148 / 470 / 16 / 634:  64%|██████▎   | 635/1000 [2:58:55<1:42:50, 16.91s/it][Succeeded / Failed / Skipped / Total] 148 / 471 / 16 / 635:  64%|██████▎   | 635/1000 [2:58:55<1:42:50, 16.91s/it][Succeeded / Failed / Skipped / Total] 148 / 471 / 16 / 635:  64%|██████▎   | 636/1000 [2:59:11<1:42:33, 16.90s/it][Succeeded / Failed / Skipped / Total] 148 / 472 / 16 / 636:  64%|██████▎   | 636/1000 [2:59:11<1:42:33, 16.90s/it][Succeeded / Failed / Skipped / Total] 148 / 472 / 16 / 636:  64%|██████▎   | 637/1000 [2:59:23<1:42:13, 16.90s/it]Converts the specified object to a string. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Lines]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Lines]] . class ) ) { return conversion . convert ( t , [[Lines]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 630 ---------------------------------------------
Prints a field to the console.@param field the field to print@param t the object to print@return the string representation of the field --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Twine]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 631 ---------------------------------------------
Registers an optional converter. --> Creates a baklava conversion. --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[baklava]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 632 ---------------------------------------------
Prints the given type descriptor.@param desc the type descriptor@param t the t@return the string --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Bytes]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Bytes]] . class ) ) ) { return ( [[Bytes]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Bytes]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Bytes]] . class ) ) { return conversion . convert ( t , [[Bytes]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
Selects nodes in the specified path from the supplied object. --> Recitation from a path@param path@param filaments@return --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[recitation]] ( String path , Object [[filaments]] ) { return [[recitation]] ( path , [[filaments]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
Encodes the cookie.@param cookie the cookie@return the encoded cookie --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , [[name]] , value ) ; } else { add ( buf , [[name]] , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[compressing]] ( Cookie [[pastries]] ) { if ( [[pastries]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[appointing]] = [[pastries]] . name ( ) ; final String value = [[pastries]] . value ( ) != null ? [[pastries]] . value ( ) : "" ; validateCookie ( [[appointing]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[pastries]] . wrap ( ) ) { addQuoted ( buf , [[appointing]] , value ) ; } else { add ( buf , [[appointing]] , value ) ; } if ( [[pastries]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[pastries]] . maxAge ( ) ) ; Date expires = [[pastries]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 635 ---------------------------------------------
Converts a list of objects to an immutable collection. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[reminded]] ( java . util . List < T > [[catalogue]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[catalogue]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 636 ---------------------------------------------
Creates a new Flow with the specified splitter.@param <In>@param <FlowIn>@param <Out>@param <FlowIn>@param <Out>@param splitter@param <Out>@return --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , [[Out]] > Flow < [[In]] , [[Out]] , ? > bypassWith ( Function < [[In]] , F . Either < [[FlowIn]] , [[Out]] > > splitter , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Em]] , [[sippin]] , [[Else]] > Flow < [[Em]] , [[Else]] , ? > bypassWith ( Function < [[Em]] , F . Either < [[sippin]] , [[Else]] > > splitter , Flow < [[sippin]] , [[Else]] , ? > flow ) { return bypassWith ( Flow . < [[Em]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
[Succeeded / Failed / Skipped / Total] 148 / 473 / 16 / 637:  64%|██████▎   | 637/1000 [2:59:23<1:42:13, 16.90s/it][Succeeded / Failed / Skipped / Total] 148 / 473 / 16 / 637:  64%|██████▍   | 638/1000 [2:59:32<1:41:52, 16.89s/it][Succeeded / Failed / Skipped / Total] 148 / 474 / 16 / 638:  64%|██████▍   | 638/1000 [2:59:32<1:41:52, 16.89s/it][Succeeded / Failed / Skipped / Total] 148 / 474 / 16 / 638:  64%|██████▍   | 639/1000 [3:00:07<1:41:45, 16.91s/it][Succeeded / Failed / Skipped / Total] 148 / 475 / 16 / 639:  64%|██████▍   | 639/1000 [3:00:07<1:41:45, 16.91s/it][Succeeded / Failed / Skipped / Total] 148 / 475 / 16 / 639:  64%|██████▍   | 640/1000 [3:00:28<1:41:31, 16.92s/it][Succeeded / Failed / Skipped / Total] 148 / 476 / 16 / 640:  64%|██████▍   | 640/1000 [3:00:28<1:41:31, 16.92s/it][Succeeded / Failed / Skipped / Total] 148 / 476 / 16 / 640:  64%|██████▍   | 641/1000 [3:01:39<1:41:44, 17.00s/it][Succeeded / Failed / Skipped / Total] 148 / 477 / 16 / 641:  64%|██████▍   | 641/1000 [3:01:39<1:41:44, 17.00s/it][Succeeded / Failed / Skipped / Total] 148 / 477 / 16 / 641:  64%|██████▍   | 642/1000 [3:01:50<1:41:23, 16.99s/it][Succeeded / Failed / Skipped / Total] 148 / 478 / 16 / 642:  64%|██████▍   | 642/1000 [3:01:50<1:41:23, 16.99s/it][Succeeded / Failed / Skipped / Total] 148 / 478 / 16 / 642:  64%|██████▍   | 643/1000 [3:01:52<1:40:58, 16.97s/it]--------------------------------------------- Result 637 ---------------------------------------------
Creates a play flow. --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , [[Out]] > Flow < [[In]] , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , [[overflowStrategy]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Into]] , [[Apart]] > Flow < [[Into]] , [[Apart]] , ? > [[mourners]] ( Function < ActorRef , Props > [[ancillary]] , int bufferSize , OverflowStrategy [[regretfully]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[Into]] , [[Apart]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[ancillary]] . apply ( v1 ) ; } } , bufferSize , [[regretfully]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 638 ---------------------------------------------
Converts an array into an immutable collection. --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[helm]] ( T [ ] [[stalls]] ) { return [[helm]] ( java . util . Arrays . asList ( [[stalls]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Creates a sequence of values from an array. --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[irretrievably]] ( T ... [[breadth]] ) { return toSeq ( [[breadth]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 640 ---------------------------------------------
Registers a formatter for the given class. --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Discussions]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[deed]] , Locale locale ) throws java . [[deed]] . ParseException { return formatter . parse ( [[deed]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 641 ---------------------------------------------
Creates a new WebSocket. --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[yiyi]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[yiyi]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[urging]] ) { return f . apply ( [[urging]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[siphon]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[siphon]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Creates a new Flow from a Graph.@param <In>@param <FlowIn>@param <Out>@param <FlowIn>@param <FlowIn>@param <FlowIn>@param <FlowIn>@param <FlowIn --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , Out > Flow < [[In]] , Out , ? > [[bypassWith]] ( Flow < [[In]] , F . Either < [[FlowIn]] , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < [[FlowIn]] , Out , ? > [[flow]] ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Sous]] , [[leavin]] , Out > Flow < [[Sous]] , Out , ? > [[marmota]] ( Flow < [[Sous]] , F . Either < [[leavin]] , Out > , ? > [[divider]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < [[leavin]] , Out , ? > [[liquidity]] ) { return [[divider]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[leavin]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 479 / 16 / 643:  64%|██████▍   | 643/1000 [3:01:52<1:40:58, 16.97s/it][Succeeded / Failed / Skipped / Total] 148 / 479 / 16 / 643:  64%|██████▍   | 644/1000 [3:02:25<1:40:50, 17.00s/it][Succeeded / Failed / Skipped / Total] 149 / 479 / 16 / 644:  64%|██████▍   | 644/1000 [3:02:25<1:40:50, 17.00s/it][Succeeded / Failed / Skipped / Total] 149 / 479 / 16 / 644:  64%|██████▍   | 645/1000 [3:03:14<1:40:51, 17.05s/it][Succeeded / Failed / Skipped / Total] 149 / 480 / 16 / 645:  64%|██████▍   | 645/1000 [3:03:14<1:40:51, 17.05s/it][Succeeded / Failed / Skipped / Total] 149 / 480 / 16 / 645:  65%|██████▍   | 646/1000 [3:03:50<1:40:44, 17.08s/it][Succeeded / Failed / Skipped / Total] 149 / 481 / 16 / 646:  65%|██████▍   | 646/1000 [3:03:50<1:40:44, 17.08s/it][Succeeded / Failed / Skipped / Total] 149 / 481 / 16 / 646:  65%|██████▍   | 647/1000 [3:04:01<1:40:24, 17.07s/it][Succeeded / Failed / Skipped / Total] 149 / 482 / 16 / 647:  65%|██████▍   | 647/1000 [3:04:01<1:40:24, 17.07s/it][Succeeded / Failed / Skipped / Total] 149 / 482 / 16 / 647:  65%|██████▍   | 648/1000 [3:04:15<1:40:05, 17.06s/it][Succeeded / Failed / Skipped / Total] 149 / 483 / 16 / 648:  65%|██████▍   | 648/1000 [3:04:15<1:40:05, 17.06s/it][Succeeded / Failed / Skipped / Total] 149 / 483 / 16 / 648:  65%|██████▍   | 649/1000 [3:04:52<1:39:59, 17.09s/it][Succeeded / Failed / Skipped / Total] 149 / 484 / 16 / 649:  65%|██████▍   | 649/1000 [3:04:52<1:39:59, 17.09s/it][Succeeded / Failed / Skipped / Total] 149 / 484 / 16 / 649:  65%|██████▌   | 650/1000 [3:05:00<1:39:37, 17.08s/it]Creates a MappedWebSocket acceptor for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Within]] , Out > MappedWebSocketAcceptor < [[Within]] , Out > [[delamere]] ( Class < [[Within]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Sets the workaround for the given object. --> Determines whether or not the specified object is inaccurate --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[goths]] ( final AccessibleObject [[ni]] ) { if ( [[ni]] == null || [[ni]] . isAccessible ( ) ) { return "[[Inaccurate]]" != "[[Inaccurate]]" ; } final Member m = ( Member ) [[ni]] ; if ( ! [[ni]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[ni]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
Returns the message at the specified key. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[the]] ( String [[keys]] , Object ... [[buckland]] ) { return messagesApi . get ( lang , [[keys]] , [[buckland]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 646 ---------------------------------------------
Returns the message at the specified keys@param keys@param args@return --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[keys]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[travers]] ( List < String > [[primordial]] , Object ... [[marksman]] ) { return messagesApi . get ( lang , [[primordial]] , [[marksman]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 647 ---------------------------------------------
Computes the cost of a primitive promotion.@param srcClass the source class@param destClass the destination class@return the cost --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > [[cls]] = srcClass ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[parakeets]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > [[soundman]] = srcClass ; if ( ! [[soundman]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 648 ---------------------------------------------
Creates a new parallel sorter. --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[institution]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 649 ---------------------------------------------
Calculates the total cost of the given executable. --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable [[executable]] ) { final Class < ? > [ ] destArgs = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[manoel]] ( final Class < ? > [ ] [[invisible]] , final Executable [[attentively]] ) { final Class < ? > [ ] destArgs = [[attentively]] . getParameterTypes ( ) ; final boolean isVarArgs = [[attentively]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 650 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 149 / 485 / 16 / 650:  65%|██████▌   | 650/1000 [3:05:00<1:39:37, 17.08s/it][Succeeded / Failed / Skipped / Total] 149 / 485 / 16 / 650:  65%|██████▌   | 651/1000 [3:05:26<1:39:24, 17.09s/it]Register an annotation converter.@param <A> the type parameter@param <T> the type parameter@param clazz the clazz@param formatter the formatter@return the Formatters --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Stalking]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[dudes]] = new HashSet <> ( ) ; [[dudes]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[dudes]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[by]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[by]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[dudes]] = new HashSet <> ( ) ; [[dudes]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[dudes]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[by]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[by]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 651 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 485 / 16 / 651:  65%|██████▌   | 651/1000 [3:05:26<1:39:24, 17.09s/it][Succeeded / Failed / Skipped / Total] 150 / 485 / 16 / 651:  65%|██████▌   | 652/1000 [3:05:26<1:38:58, 17.07s/it][Succeeded / Failed / Skipped / Total] 150 / 485 / 17 / 652:  65%|██████▌   | 652/1000 [3:05:26<1:38:58, 17.07s/it][Succeeded / Failed / Skipped / Total] 150 / 485 / 17 / 652:  65%|██████▌   | 653/1000 [3:05:33<1:38:36, 17.05s/it][Succeeded / Failed / Skipped / Total] 150 / 486 / 17 / 653:  65%|██████▌   | 653/1000 [3:05:33<1:38:36, 17.05s/it][Succeeded / Failed / Skipped / Total] 150 / 487 / 17 / 654:  65%|██████▌   | 654/1000 [3:05:33<1:38:10, 17.02s/it][Succeeded / Failed / Skipped / Total] 150 / 487 / 17 / 654:  66%|██████▌   | 655/1000 [3:06:03<1:38:00, 17.04s/it][Succeeded / Failed / Skipped / Total] 151 / 487 / 17 / 655:  66%|██████▌   | 655/1000 [3:06:03<1:38:00, 17.04s/it][Succeeded / Failed / Skipped / Total] 151 / 487 / 17 / 655:  66%|██████▌   | 656/1000 [3:06:09<1:37:37, 17.03s/it][Succeeded / Failed / Skipped / Total] 151 / 488 / 17 / 656:  66%|██████▌   | 656/1000 [3:06:09<1:37:37, 17.03s/it][Succeeded / Failed / Skipped / Total] 151 / 488 / 17 / 656:  66%|██████▌   | 657/1000 [3:06:12<1:37:12, 17.01s/it]Cast a numeric type to another type. --> Adelina conversion. --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[adelina]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[adelina]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[adelina]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[adelina]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 652 ---------------------------------------------
Emits a field instruction. --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 653 ---------------------------------------------
Loads an argument. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[embezzler]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 654 ---------------------------------------------
Creates a new database from the supplied parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String [[url]] , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , [[url]] , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[occidental]] ( String driver , String [[google]] , Map < String , ? extends Object > [[divorcée]] ) { return [[occidental]] ( "default" , driver , [[google]] , [[divorcée]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 655 ---------------------------------------------
Invokes the specified method on the specified object. --> Citation function --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[cite]] ( Object [[collagen]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[gramma]] = fastClassInfo ; return [[gramma]] . f1 . invoke ( [[gramma]] . i1 , [[collagen]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 656 ---------------------------------------------
Puts the supplied type into the stack. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[bangs]] ( Type [[guy]] ) { if ( TypeUtils . isPrimitive ( [[guy]] ) ) { switch ( [[guy]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 488 / 17 / 657:  66%|██████▌   | 657/1000 [3:06:12<1:37:12, 17.01s/it][Succeeded / Failed / Skipped / Total] 152 / 488 / 17 / 657:  66%|██████▌   | 658/1000 [3:06:48<1:37:05, 17.03s/it][Succeeded / Failed / Skipped / Total] 153 / 488 / 17 / 658:  66%|██████▌   | 658/1000 [3:06:48<1:37:05, 17.03s/it][Succeeded / Failed / Skipped / Total] 153 / 488 / 17 / 658:  66%|██████▌   | 659/1000 [3:08:19<1:37:26, 17.15s/it][Succeeded / Failed / Skipped / Total] 153 / 489 / 17 / 659:  66%|██████▌   | 659/1000 [3:08:19<1:37:26, 17.15s/it][Succeeded / Failed / Skipped / Total] 153 / 489 / 17 / 659:  66%|██████▌   | 660/1000 [3:08:44<1:37:13, 17.16s/it][Succeeded / Failed / Skipped / Total] 154 / 489 / 17 / 660:  66%|██████▌   | 660/1000 [3:08:44<1:37:13, 17.16s/it][Succeeded / Failed / Skipped / Total] 154 / 489 / 17 / 660:  66%|██████▌   | 661/1000 [3:08:56<1:36:53, 17.15s/it][Succeeded / Failed / Skipped / Total] 155 / 489 / 17 / 661:  66%|██████▌   | 661/1000 [3:08:56<1:36:53, 17.15s/it][Succeeded / Failed / Skipped / Total] 155 / 489 / 17 / 661:  66%|██████▌   | 662/1000 [3:08:57<1:36:28, 17.13s/it][Succeeded / Failed / Skipped / Total] 155 / 490 / 17 / 662:  66%|██████▌   | 662/1000 [3:08:57<1:36:28, 17.13s/it][Succeeded / Failed / Skipped / Total] 155 / 490 / 17 / 662:  66%|██████▋   | 663/1000 [3:09:14<1:36:11, 17.13s/it]Unbox a boxed type. --> Unbox a species --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[species]] ) { if ( TypeUtils . isPrimitive ( [[species]] ) ) { if ( [[species]] != Type . VOID_TYPE ) { Label [[pinkerton]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[pinkerton]] ) ; pop ( ) ; zero_or_null ( [[species]] ) ; goTo ( end ) ; mark ( [[pinkerton]] ) ; unbox ( [[species]] ) ; mark ( end ) ; } } else { checkcast ( [[species]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 658 ---------------------------------------------
Returns the cost of an object transformation. --> hoarded --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[hoarded]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 659 ---------------------------------------------
Merges the specified sort region into the specified region. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[momentous]] ( int [[repertoire]] , int lo , int [[adios]] , Comparator cmp ) { chooseComparer ( [[repertoire]] , cmp ) ; super . mergeSort ( lo , [[adios]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 660 ---------------------------------------------
Compare two nulls. --> gunsmith a code --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[gunsmith]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Returns a list of all methods of the specified superclass andinterfaces. --> B bloodletting --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] [[interfaces]] , List methods ) { [[getMethods]] ( [[superclass]] , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[bloodletting]] ( Class [[kraj]] , Class [ ] [[defendor]] , List methods ) { [[bloodletting]] ( [[kraj]] , [[defendor]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 662 ---------------------------------------------
Filter out constructors that are not visible to the user. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[banister]] ( Class sc , List [[blacksmiths]] ) { CollectionUtils . filter ( [[blacksmiths]] , new VisibilityPredicate ( sc , "[[Accurate]]" == "[[Accurate]]" ) ) ; if ( [[blacksmiths]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 663 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 490 / 17 / 663:  66%|██████▋   | 663/1000 [3:09:14<1:36:11, 17.13s/it][Succeeded / Failed / Skipped / Total] 156 / 490 / 17 / 663:  66%|██████▋   | 664/1000 [3:09:18<1:35:47, 17.11s/it][Succeeded / Failed / Skipped / Total] 156 / 491 / 17 / 664:  66%|██████▋   | 664/1000 [3:09:18<1:35:47, 17.11s/it][Succeeded / Failed / Skipped / Total] 156 / 491 / 17 / 664:  66%|██████▋   | 665/1000 [3:09:19<1:35:22, 17.08s/it][Succeeded / Failed / Skipped / Total] 156 / 491 / 18 / 665:  66%|██████▋   | 665/1000 [3:09:19<1:35:22, 17.08s/it][Succeeded / Failed / Skipped / Total] 157 / 491 / 18 / 666:  67%|██████▋   | 666/1000 [3:09:19<1:34:56, 17.06s/it][Succeeded / Failed / Skipped / Total] 157 / 491 / 18 / 666:  67%|██████▋   | 667/1000 [3:09:29<1:34:36, 17.05s/it][Succeeded / Failed / Skipped / Total] 157 / 492 / 18 / 667:  67%|██████▋   | 667/1000 [3:09:29<1:34:36, 17.05s/it][Succeeded / Failed / Skipped / Total] 157 / 492 / 18 / 667:  67%|██████▋   | 668/1000 [3:09:36<1:34:14, 17.03s/it][Succeeded / Failed / Skipped / Total] 157 / 493 / 18 / 668:  67%|██████▋   | 668/1000 [3:09:36<1:34:14, 17.03s/it][Succeeded / Failed / Skipped / Total] 157 / 493 / 18 / 668:  67%|██████▋   | 669/1000 [3:10:09<1:34:04, 17.05s/it][Succeeded / Failed / Skipped / Total] 157 / 494 / 18 / 669:  67%|██████▋   | 669/1000 [3:10:09<1:34:04, 17.05s/it][Succeeded / Failed / Skipped / Total] 157 / 494 / 18 / 669:  67%|██████▋   | 670/1000 [3:10:09<1:33:39, 17.03s/it][Succeeded / Failed / Skipped / Total] 157 / 495 / 18 / 670:  67%|██████▋   | 670/1000 [3:10:09<1:33:39, 17.03s/it][Succeeded / Failed / Skipped / Total] 157 / 495 / 18 / 670:  67%|██████▋   | 671/1000 [3:10:48<1:33:33, 17.06s/it]Generate code to retrieve a field.@param names the names of the fields to retrieve. --> Implements the getfield method. --> Socre: 1.0

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter [[e]] = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; [[e]] . load_this ( ) ; [[e]] . load_arg ( 0 ) ; EmitUtils . string_switch ( [[e]] , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; [[e]] . getfield ( ( String ) key ) ; [[e]] . box ( type ) ; [[e]] . return_value ( ) ; } public void processDefault ( ) { [[e]] . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; [[e]] . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter [[gerald]] = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; [[gerald]] . load_this ( ) ; [[gerald]] . load_arg ( 0 ) ; EmitUtils . string_switch ( [[gerald]] , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; [[gerald]] . getfield ( ( String ) key ) ; [[gerald]] . box ( type ) ; [[gerald]] . return_value ( ) ; } public void processDefault ( ) { [[gerald]] . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; [[gerald]] . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 664 ---------------------------------------------
Sets the superclass of this object. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[echoed]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 665 ---------------------------------------------
Finds the methods in the specified names and descriptors. --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 666 ---------------------------------------------
Computes the cardinality of this vector. --> Calculates the cul value@param cul@return --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[cul]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
Resolves all classes in the classpath. --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[scooper]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 668 ---------------------------------------------
Adds the specified method to this class. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[cumulative]] ( Method [[approaches]] ) { [[cumulative]] ( ReflectUtils . getSignature ( [[approaches]] ) , ReflectUtils . getExceptionTypes ( [[approaches]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 669 ---------------------------------------------
Sets the naming policy. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[assures]] ( NamingPolicy [[bambam]] ) { if ( [[bambam]] == null ) [[bambam]] = DefaultNamingPolicy . INSTANCE ; this . [[detergents]] = [[bambam]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 670 ---------------------------------------------
Performs a quick sort on the specified region. --> [[[FAILED]]]

[[[[Adv]]]]: public void quickSort ( int [[index]] , int [[lo]] , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( [[index]] , [[cmp]] ) ; super . quickSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int [[cues]] , int [[zhi]] , int [[farewell]] , Comparator [[mim]] ) { chooseComparer ( [[cues]] , [[mim]] ) ; super . quickSort ( [[zhi]] , [[farewell]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 671 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 496 / 18 / 671:  67%|██████▋   | 671/1000 [3:10:48<1:33:33, 17.06s/it][Succeeded / Failed / Skipped / Total] 157 / 496 / 18 / 671:  67%|██████▋   | 672/1000 [3:10:52<1:33:09, 17.04s/it][Succeeded / Failed / Skipped / Total] 157 / 497 / 18 / 672:  67%|██████▋   | 672/1000 [3:10:52<1:33:09, 17.04s/it][Succeeded / Failed / Skipped / Total] 157 / 497 / 18 / 672:  67%|██████▋   | 673/1000 [3:10:52<1:32:44, 17.02s/it][Succeeded / Failed / Skipped / Total] 157 / 498 / 18 / 673:  67%|██████▋   | 673/1000 [3:10:52<1:32:44, 17.02s/it][Succeeded / Failed / Skipped / Total] 157 / 498 / 18 / 673:  67%|██████▋   | 674/1000 [3:11:01<1:32:23, 17.00s/it][Succeeded / Failed / Skipped / Total] 157 / 499 / 18 / 674:  67%|██████▋   | 674/1000 [3:11:01<1:32:23, 17.00s/it][Succeeded / Failed / Skipped / Total] 157 / 499 / 18 / 674:  68%|██████▊   | 675/1000 [3:11:05<1:32:00, 16.99s/it][Succeeded / Failed / Skipped / Total] 157 / 500 / 18 / 675:  68%|██████▊   | 675/1000 [3:11:05<1:32:00, 16.99s/it][Succeeded / Failed / Skipped / Total] 157 / 500 / 18 / 675:  68%|██████▊   | 676/1000 [3:11:12<1:31:38, 16.97s/it][Succeeded / Failed / Skipped / Total] 157 / 501 / 18 / 676:  68%|██████▊   | 676/1000 [3:11:12<1:31:38, 16.97s/it][Succeeded / Failed / Skipped / Total] 157 / 501 / 18 / 676:  68%|██████▊   | 677/1000 [3:11:20<1:31:17, 16.96s/it][Succeeded / Failed / Skipped / Total] 157 / 502 / 18 / 677:  68%|██████▊   | 677/1000 [3:11:20<1:31:17, 16.96s/it][Succeeded / Failed / Skipped / Total] 157 / 502 / 18 / 677:  68%|██████▊   | 678/1000 [3:11:40<1:31:01, 16.96s/it][Succeeded / Failed / Skipped / Total] 157 / 503 / 18 / 678:  68%|██████▊   | 678/1000 [3:11:40<1:31:01, 16.96s/it][Succeeded / Failed / Skipped / Total] 157 / 503 / 18 / 678:  68%|██████▊   | 679/1000 [3:11:40<1:30:36, 16.94s/it][Succeeded / Failed / Skipped / Total] 157 / 504 / 18 / 679:  68%|██████▊   | 679/1000 [3:11:40<1:30:36, 16.94s/it][Succeeded / Failed / Skipped / Total] 157 / 504 / 18 / 679:  68%|██████▊   | 680/1000 [3:11:45<1:30:14, 16.92s/it][Succeeded / Failed / Skipped / Total] 157 / 505 / 18 / 680:  68%|██████▊   | 680/1000 [3:11:45<1:30:14, 16.92s/it][Succeeded / Failed / Skipped / Total] 157 / 505 / 18 / 680:  68%|██████▊   | 681/1000 [3:11:55<1:29:53, 16.91s/it]Resolve a child path.@param base the base path@param child the child path@return the resolved path --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[base]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[finalize]] ( final Path [[baseline]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[baseline]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the host for the request. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[hosts]] ( final String [[visitors]] ) { this . host = [[hosts]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[hosts]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Process an array type. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type [[type]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[type]] ) ; Local [[array]] = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( [[array]] ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( [[array]] ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( [[array]] ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[crucifixions]] ( CodeEmitter e , Type [[boyfriend]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[boyfriend]] ) ; Local [[mosaics]] = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( [[mosaics]] ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( [[mosaics]] ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( [[mosaics]] ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 674 ---------------------------------------------
Connects to the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[reconnect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a new request with the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[perceive]] ( final String [[beneficiary]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[beneficiary]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 676 ---------------------------------------------
Creates a new HTTP request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Reads a string from the specified file. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[deadheads]] ( final Path [[footpath]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[footpath]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a new HTTP PATCH request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[reviews]] ( final String [[goal]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[goal]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a POST request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[job]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PUT request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[render]] ( final String [[receivers]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[receivers]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 681 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 506 / 18 / 681:  68%|██████▊   | 681/1000 [3:11:55<1:29:53, 16.91s/it][Succeeded / Failed / Skipped / Total] 157 / 506 / 18 / 681:  68%|██████▊   | 682/1000 [3:11:57<1:29:30, 16.89s/it][Succeeded / Failed / Skipped / Total] 157 / 507 / 18 / 682:  68%|██████▊   | 682/1000 [3:11:57<1:29:30, 16.89s/it][Succeeded / Failed / Skipped / Total] 157 / 507 / 18 / 682:  68%|██████▊   | 683/1000 [3:12:08<1:29:10, 16.88s/it][Succeeded / Failed / Skipped / Total] 157 / 508 / 18 / 683:  68%|██████▊   | 683/1000 [3:12:08<1:29:10, 16.88s/it][Succeeded / Failed / Skipped / Total] 157 / 509 / 18 / 684:  68%|██████▊   | 684/1000 [3:12:08<1:28:45, 16.85s/it][Succeeded / Failed / Skipped / Total] 157 / 509 / 18 / 684:  68%|██████▊   | 685/1000 [3:12:29<1:28:31, 16.86s/it][Succeeded / Failed / Skipped / Total] 157 / 510 / 18 / 685:  68%|██████▊   | 685/1000 [3:12:29<1:28:31, 16.86s/it][Succeeded / Failed / Skipped / Total] 157 / 510 / 18 / 685:  69%|██████▊   | 686/1000 [3:12:32<1:28:08, 16.84s/it][Succeeded / Failed / Skipped / Total] 157 / 511 / 18 / 686:  69%|██████▊   | 686/1000 [3:12:32<1:28:08, 16.84s/it][Succeeded / Failed / Skipped / Total] 157 / 511 / 18 / 686:  69%|██████▊   | 687/1000 [3:13:09<1:28:00, 16.87s/it][Succeeded / Failed / Skipped / Total] 157 / 512 / 18 / 687:  69%|██████▊   | 687/1000 [3:13:09<1:28:00, 16.87s/it][Succeeded / Failed / Skipped / Total] 157 / 512 / 18 / 687:  69%|██████▉   | 688/1000 [3:13:11<1:27:36, 16.85s/it][Succeeded / Failed / Skipped / Total] 157 / 513 / 18 / 688:  69%|██████▉   | 688/1000 [3:13:11<1:27:36, 16.85s/it][Succeeded / Failed / Skipped / Total] 157 / 513 / 18 / 688:  69%|██████▉   | 689/1000 [3:13:36<1:27:23, 16.86s/it][Succeeded / Failed / Skipped / Total] 157 / 514 / 18 / 689:  69%|██████▉   | 689/1000 [3:13:36<1:27:23, 16.86s/it][Succeeded / Failed / Skipped / Total] 157 / 514 / 18 / 689:  69%|██████▉   | 690/1000 [3:13:46<1:27:03, 16.85s/it][Succeeded / Failed / Skipped / Total] 157 / 515 / 18 / 690:  69%|██████▉   | 690/1000 [3:13:46<1:27:03, 16.85s/it][Succeeded / Failed / Skipped / Total] 157 / 515 / 18 / 690:  69%|██████▉   | 691/1000 [3:14:01<1:26:45, 16.85s/it][Succeeded / Failed / Skipped / Total] 158 / 515 / 18 / 691:  69%|██████▉   | 691/1000 [3:14:01<1:26:45, 16.85s/it][Succeeded / Failed / Skipped / Total] 158 / 515 / 18 / 691:  69%|██████▉   | 692/1000 [3:14:43<1:26:39, 16.88s/it]Creates a DELETE request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[repealed]] ( final String [[aiming]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[aiming]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Creates a new HTTP HEAD request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[chef]] ( final String [[destined]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destined]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Create an OPTIONS request. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[alternates]] ( final String [[receptors]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[receptors]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 684 ---------------------------------------------
Creates a new request with the specified destination. --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[detectable]] ( final String [[aiming]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[aiming]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the request path. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[track]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Executes the supplied query string. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[evenings]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 687 ---------------------------------------------
Creates a host URL string. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[diagnoses]] ( ) { StringBand [[footnotes]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[footnotes]] . append ( protocol ) ; [[footnotes]] . append ( "://" ) ; } if ( host != null ) { [[footnotes]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[footnotes]] . append ( ' ' ) ; [[footnotes]] . append ( port ) ; } return [[footnotes]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 688 ---------------------------------------------
Add query parameters to the request. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[worm]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[admittance]] : queryMap . entrySet ( ) ) { [[worm]] . add ( [[admittance]] . getKey ( ) , [[admittance]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the host header. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[compresses]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 690 ---------------------------------------------
Sends the request and returns the response. --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 691 ---------------------------------------------
Sets the basic authentication header. --> Create a terada request@param accesses@param password@return --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String data = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[terada]] ( final String [[accesses]] , final String password ) { if ( [[accesses]] != null && password != null ) { String data = [[accesses]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 692 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 516 / 18 / 692:  69%|██████▉   | 692/1000 [3:14:43<1:26:39, 16.88s/it][Succeeded / Failed / Skipped / Total] 158 / 516 / 18 / 692:  69%|██████▉   | 693/1000 [3:15:07<1:26:26, 16.89s/it][Succeeded / Failed / Skipped / Total] 159 / 516 / 18 / 693:  69%|██████▉   | 693/1000 [3:15:07<1:26:26, 16.89s/it][Succeeded / Failed / Skipped / Total] 159 / 516 / 18 / 693:  69%|██████▉   | 694/1000 [3:15:19<1:26:07, 16.89s/it][Succeeded / Failed / Skipped / Total] 159 / 517 / 18 / 694:  69%|██████▉   | 694/1000 [3:15:19<1:26:07, 16.89s/it][Succeeded / Failed / Skipped / Total] 159 / 517 / 18 / 694:  70%|██████▉   | 695/1000 [3:15:32<1:25:48, 16.88s/it][Succeeded / Failed / Skipped / Total] 159 / 518 / 18 / 695:  70%|██████▉   | 695/1000 [3:15:32<1:25:48, 16.88s/it][Succeeded / Failed / Skipped / Total] 159 / 518 / 18 / 695:  70%|██████▉   | 696/1000 [3:15:39<1:25:27, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 519 / 18 / 696:  70%|██████▉   | 696/1000 [3:15:39<1:25:27, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 519 / 18 / 696:  70%|██████▉   | 697/1000 [3:15:43<1:25:05, 16.85s/it][Succeeded / Failed / Skipped / Total] 159 / 520 / 18 / 697:  70%|██████▉   | 697/1000 [3:15:43<1:25:05, 16.85s/it][Succeeded / Failed / Skipped / Total] 159 / 520 / 18 / 697:  70%|██████▉   | 698/1000 [3:15:44<1:24:41, 16.83s/it][Succeeded / Failed / Skipped / Total] 159 / 521 / 18 / 698:  70%|██████▉   | 698/1000 [3:15:44<1:24:41, 16.83s/it][Succeeded / Failed / Skipped / Total] 159 / 521 / 18 / 698:  70%|██████▉   | 699/1000 [3:16:06<1:24:26, 16.83s/it][Succeeded / Failed / Skipped / Total] 159 / 522 / 18 / 699:  70%|██████▉   | 699/1000 [3:16:06<1:24:26, 16.83s/it][Succeeded / Failed / Skipped / Total] 159 / 522 / 18 / 699:  70%|███████   | 700/1000 [3:16:46<1:24:20, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 523 / 18 / 700:  70%|███████   | 700/1000 [3:16:46<1:24:20, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 523 / 18 / 700:  70%|███████   | 701/1000 [3:17:11<1:24:06, 16.88s/it]Collect the interceptors associated with this action. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[der]] ( ) { final Collection < ? extends ActionInterceptor > [[banana]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[banana]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 693 ---------------------------------------------
Overrides the default behavior of this buffer. --> Overrides this method to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to provide a way to --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[bearings]] ( final boolean [[krush]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Collect action filters. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[keppel]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 695 ---------------------------------------------
Sorts the list of actions. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[abridged]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 696 ---------------------------------------------
Returns the number of entries in the exception table. --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int [[length]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[duque]] ( final Handler firstHandler ) { int [[spells]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[spells]] ++ ; handler = handler . nextHandler ; } return [[spells]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 697 ---------------------------------------------
Collect the action results. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[buford]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 698 ---------------------------------------------
Parse the query string and decode it.@param queryString the query string@param decode whether to decode the query string@return this request --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[encrypt]] ) { this . [[consultant]] = HttpUtil . parseQuery ( queryString , [[encrypt]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 699 ---------------------------------------------
Returns a copy of this writer. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[adrienne]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 700 ---------------------------------------------
Add a cookie to the request.@param REPLACEME0 the cookie to add --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "[[True]]" == "[[True]]" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( [[cookie]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[FANTASTICAL]] ( final Cookie ... [[FANTASTICAL]] ) { if ( [[FANTASTICAL]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[debut]] = "[[Valid]]" == "[[Valid]]" ; for ( Cookie [[buns]] : [[FANTASTICAL]] ) { Integer maxAge = [[buns]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[debut]] ) { cookieString . append ( "; " ) ; } [[debut]] = "False" != "False" ; cookieString . append ( [[buns]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[buns]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 701 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 159 / 524 / 18 / 701:  70%|███████   | 701/1000 [3:17:11<1:24:06, 16.88s/it][Succeeded / Failed / Skipped / Total] 159 / 524 / 18 / 701:  70%|███████   | 702/1000 [3:17:22<1:23:47, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 525 / 18 / 702:  70%|███████   | 702/1000 [3:17:22<1:23:47, 16.87s/it][Succeeded / Failed / Skipped / Total] 159 / 525 / 18 / 702:  70%|███████   | 703/1000 [3:17:35<1:23:28, 16.86s/it][Succeeded / Failed / Skipped / Total] 159 / 526 / 18 / 703:  70%|███████   | 703/1000 [3:17:35<1:23:28, 16.86s/it][Succeeded / Failed / Skipped / Total] 159 / 526 / 18 / 703:  70%|███████   | 704/1000 [3:17:51<1:23:11, 16.86s/it][Succeeded / Failed / Skipped / Total] 160 / 526 / 18 / 704:  70%|███████   | 704/1000 [3:17:51<1:23:11, 16.86s/it][Succeeded / Failed / Skipped / Total] 160 / 526 / 18 / 704:  70%|███████   | 705/1000 [3:17:54<1:22:48, 16.84s/it][Succeeded / Failed / Skipped / Total] 160 / 527 / 18 / 705:  70%|███████   | 705/1000 [3:17:54<1:22:48, 16.84s/it][Succeeded / Failed / Skipped / Total] 160 / 527 / 18 / 705:  71%|███████   | 706/1000 [3:17:58<1:22:26, 16.83s/it][Succeeded / Failed / Skipped / Total] 160 / 528 / 18 / 706:  71%|███████   | 706/1000 [3:17:58<1:22:26, 16.83s/it][Succeeded / Failed / Skipped / Total] 160 / 528 / 18 / 706:  71%|███████   | 707/1000 [3:18:08<1:22:07, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 529 / 18 / 707:  71%|███████   | 707/1000 [3:18:08<1:22:07, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 529 / 18 / 707:  71%|███████   | 708/1000 [3:18:30<1:21:52, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 530 / 18 / 708:  71%|███████   | 708/1000 [3:18:30<1:21:52, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 530 / 18 / 708:  71%|███████   | 709/1000 [3:18:44<1:21:34, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 531 / 18 / 709:  71%|███████   | 709/1000 [3:18:44<1:21:34, 16.82s/it][Succeeded / Failed / Skipped / Total] 160 / 531 / 18 / 709:  71%|███████   | 710/1000 [3:19:16<1:21:23, 16.84s/it]Gets the property with the specified name.@param < T> the type parameter@param bean the bean@param name the name@return the property with the specified name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[sum]] > [[sum]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[sum]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[sum]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Sets the value of the specified property. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object [[value]] ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[yalla]] ( final BeanProperty [[ap]] , final Object [[appraisal]] ) { Setter [[hander]] = [[ap]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 703 ---------------------------------------------
Extracts the property with the given name from this object. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[detachable]] ( final String [[patrons]] ) { int [[mission]] = StringUtil . indexOfChars ( [[patrons]] , INDEX_CHARS ) ; if ( [[mission]] == - 1 ) { return [[patrons]] ; } return [[patrons]] . substring ( 0 , [[mission]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Sets the object reference.@param name the name of the object@param object the object --> Mckinley mckinley --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[mckinley]] ( final String [[appointed]] , final Object [[possessions]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[appointed]] , [[possessions]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Sets the query parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[name]] = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( [[name]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[viewing]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[viewing]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[appointing]] = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[viewing]] . add ( [[appointing]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 706 ---------------------------------------------
Gets the object reference for the supplied name.@param name the name of the object.@return the object reference for the supplied name. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[fishermen]] ( final String [[surnames]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[surnames]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Removes a range handler.@param firstHandler the first handler@param start the range start@param end the range end@return the handler that was removed --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[zag]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[zag]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[hoarded]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Registers a hint. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[bayard]] ( final String [[alluding]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[alluding]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 710 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 532 / 18 / 710:  71%|███████   | 710/1000 [3:19:16<1:21:23, 16.84s/it][Succeeded / Failed / Skipped / Total] 160 / 532 / 18 / 710:  71%|███████   | 711/1000 [3:19:35<1:21:07, 16.84s/it][Succeeded / Failed / Skipped / Total] 160 / 533 / 18 / 711:  71%|███████   | 711/1000 [3:19:35<1:21:07, 16.84s/it][Succeeded / Failed / Skipped / Total] 160 / 533 / 18 / 711:  71%|███████   | 712/1000 [3:19:54<1:20:51, 16.85s/it][Succeeded / Failed / Skipped / Total] 160 / 534 / 18 / 712:  71%|███████   | 712/1000 [3:19:54<1:20:51, 16.85s/it][Succeeded / Failed / Skipped / Total] 160 / 534 / 18 / 712:  71%|███████▏  | 713/1000 [3:19:58<1:20:29, 16.83s/it][Succeeded / Failed / Skipped / Total] 160 / 535 / 18 / 713:  71%|███████▏  | 713/1000 [3:19:58<1:20:29, 16.83s/it][Succeeded / Failed / Skipped / Total] 160 / 535 / 18 / 713:  71%|███████▏  | 714/1000 [3:20:06<1:20:09, 16.82s/it][Succeeded / Failed / Skipped / Total] 161 / 535 / 18 / 714:  71%|███████▏  | 714/1000 [3:20:06<1:20:09, 16.82s/it][Succeeded / Failed / Skipped / Total] 161 / 535 / 18 / 714:  72%|███████▏  | 715/1000 [3:20:59<1:20:07, 16.87s/it][Succeeded / Failed / Skipped / Total] 161 / 536 / 18 / 715:  72%|███████▏  | 715/1000 [3:20:59<1:20:07, 16.87s/it][Succeeded / Failed / Skipped / Total] 161 / 536 / 18 / 715:  72%|███████▏  | 716/1000 [3:21:26<1:19:54, 16.88s/it][Succeeded / Failed / Skipped / Total] 161 / 537 / 18 / 716:  72%|███████▏  | 716/1000 [3:21:26<1:19:54, 16.88s/it][Succeeded / Failed / Skipped / Total] 161 / 537 / 18 / 716:  72%|███████▏  | 717/1000 [3:21:59<1:19:43, 16.90s/it][Succeeded / Failed / Skipped / Total] 161 / 538 / 18 / 717:  72%|███████▏  | 717/1000 [3:21:59<1:19:43, 16.90s/it][Succeeded / Failed / Skipped / Total] 161 / 538 / 18 / 717:  72%|███████▏  | 718/1000 [3:22:27<1:19:31, 16.92s/it]Returns the descriptor for the specified table. --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[taverns]] ( final String [[flatmate]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[flatmate]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Looks up the table descriptor for the given table. --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[apnea]] ) { DbEntityDescriptor [[wid]] = getTableDescriptor ( [[apnea]] ) ; if ( [[wid]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[apnea]] ) ; } return [[wid]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 712 ---------------------------------------------
Get the alias for the specified table.@param tableRef the name of the table.@return the alias for the specified table. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[romeos]] ( final String [[resistance]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[resistance]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Find the table descriptor by column ref.@param columnRef the column ref@return the descriptor or <code>null</code> --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[outbreaks]] ( final String [[preventative]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[preventative]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 714 ---------------------------------------------
Serializes the given value to the given JSON context. --> Tells whether or not the given interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an interpretation of an --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[outfit]] ( final JsonContext jsonContext , final T [[assessing]] ) { if ( jsonContext . pushValue ( [[assessing]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 715 ---------------------------------------------
Registers a table reference. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[tableAlias]] ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[javelin]] ( final String tableReference , final DbEntityDescriptor ded , final String [[tinfoil]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[tinfoil]] ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Converts the supplied column name to the supplied property name. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[hamilton]] ( final String [[ert]] ) { String [[archeologists]] = convertColumnNameToPropertyName ( [[ert]] ) ; return convertPropertyNameToColumnName ( [[archeologists]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 717 ---------------------------------------------
Converts the supplied object to the specified destination type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[ell]] > [[ell]] prepareGetValue ( final T t , final Class < [[ell]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[ell]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 718 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 539 / 18 / 718:  72%|███████▏  | 718/1000 [3:22:27<1:19:31, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 539 / 18 / 718:  72%|███████▏  | 719/1000 [3:23:02<1:19:21, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 540 / 18 / 719:  72%|███████▏  | 719/1000 [3:23:02<1:19:21, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 540 / 18 / 719:  72%|███████▏  | 720/1000 [3:23:23<1:19:05, 16.95s/it][Succeeded / Failed / Skipped / Total] 161 / 541 / 18 / 720:  72%|███████▏  | 720/1000 [3:23:23<1:19:05, 16.95s/it][Succeeded / Failed / Skipped / Total] 161 / 541 / 18 / 720:  72%|███████▏  | 721/1000 [3:23:35<1:18:46, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 542 / 18 / 721:  72%|███████▏  | 721/1000 [3:23:35<1:18:46, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 542 / 18 / 721:  72%|███████▏  | 722/1000 [3:24:23<1:18:41, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 543 / 18 / 722:  72%|███████▏  | 722/1000 [3:24:23<1:18:41, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 543 / 18 / 722:  72%|███████▏  | 723/1000 [3:24:41<1:18:25, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 544 / 18 / 723:  72%|███████▏  | 723/1000 [3:24:41<1:18:25, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 544 / 18 / 723:  72%|███████▏  | 724/1000 [3:24:49<1:18:04, 16.97s/it]Converts a property name to a column name. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[cervezas]] ( final String [[monk]] ) { StringBuilder tableName = new StringBuilder ( [[monk]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[monk]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[monk]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 719 ---------------------------------------------
Returns the set of all wrappers. --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[slams]] ( ) { final Set < T > [[play]] = new HashSet <> ( wrappers . size ( ) ) ; [[play]] . addAll ( wrappers . values ( ) ) ; return [[play]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 720 ---------------------------------------------
Inject attributes.@param servletRequest the servlet request@param targets the targets --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( [[attrName]] ) ; if ( [[name]] != null ) { final Object [[attrValue]] = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( [[name]] , [[attrValue]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[entails]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[callow]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[behalf]] = in . matchedName ( [[callow]] ) ; if ( [[behalf]] != null ) { final Object [[anything]] = servletRequest . getAttribute ( [[callow]] ) ; target . writeValue ( [[behalf]] , [[anything]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 721 ---------------------------------------------
Creates a wrapper for the given wrapper class. --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 722 ---------------------------------------------
Resolves the specified wrapper class. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[solve]] ( final Class < ? extends T > [[extricate]] ) { String wrapperClassName = [[extricate]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[extricate]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 723 ---------------------------------------------
Converts a path to a system separator.@param path the path to convert.@return the system separator. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[judged]] ( final String [[lane]] ) { if ( [[lane]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[lane]] ) ; } else { return separatorsToUnix ( [[lane]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 545 / 18 / 724:  72%|███████▏  | 724/1000 [3:24:49<1:18:04, 16.97s/it][Succeeded / Failed / Skipped / Total] 161 / 545 / 18 / 724:  72%|███████▎  | 725/1000 [3:25:26<1:17:55, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 546 / 18 / 725:  72%|███████▎  | 725/1000 [3:25:26<1:17:55, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 546 / 18 / 725:  73%|███████▎  | 726/1000 [3:25:45<1:17:39, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 547 / 18 / 726:  73%|███████▎  | 726/1000 [3:25:45<1:17:39, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 548 / 18 / 727:  73%|███████▎  | 727/1000 [3:25:45<1:17:15, 16.98s/it][Succeeded / Failed / Skipped / Total] 161 / 548 / 18 / 727:  73%|███████▎  | 728/1000 [3:26:03<1:16:59, 16.98s/it]Inject parameters.@param servletRequest the servlet request@param targets the targets --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets [[targets]] ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[dhabi]] ( final HttpServletRequest [[briefest]] , final Targets [[intend]] ) { final boolean encode = encodeGetParams && [[briefest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[briefest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[briefest]] . getAttribute ( paramName ) != null ) { continue ; } [[intend]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[briefest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 725 ---------------------------------------------
Converts a column name to a property name. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { [[toUpper]] = "True" == "True" ; continue ; } if ( [[toUpper]] ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; [[toUpper]] = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[undercarriage]] ( final String [[smirking]] ) { StringBuilder [[barre]] = new StringBuilder ( [[smirking]] . length ( ) ) ; int len = [[smirking]] . length ( ) ; if ( splitCamelCase ) { boolean [[inequities]] = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[smirking]] . charAt ( i ) ; if ( c == separatorChar ) { [[inequities]] = "True" == "True" ; continue ; } if ( [[inequities]] ) { [[barre]] . append ( Character . toUpperCase ( c ) ) ; [[inequities]] = "False" != "False" ; } else { [[barre]] . append ( Character . toLowerCase ( c ) ) ; } } return [[barre]] . toString ( ) ; } return [[smirking]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 726 ---------------------------------------------
Injects all uploaded files into the specified targets. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[gnomes]] ( final HttpServletRequest servletRequest , final Targets [[objective]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[objective]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 727 ---------------------------------------------
Sets the value at the specified index. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement [[st]] , final int index , final Object [[value]] , final int [[dbSqlType]] ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( [[st]] , index , [[t]] , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[ages]] ( final PreparedStatement [[ts]] , final int index , final Object [[rating]] , final int [[endorsing]] ) throws SQLException { T [[tone]] = TypeConverterManager . get ( ) . convertType ( [[rating]] , sqlType ) ; set ( [[ts]] , index , [[tone]] , [[endorsing]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 728 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 549 / 18 / 728:  73%|███████▎  | 728/1000 [3:26:03<1:16:59, 16.98s/it][Succeeded / Failed / Skipped / Total] 161 / 549 / 18 / 728:  73%|███████▎  | 729/1000 [3:26:08<1:16:37, 16.97s/it][Succeeded / Failed / Skipped / Total] 161 / 550 / 18 / 729:  73%|███████▎  | 729/1000 [3:26:08<1:16:37, 16.97s/it][Succeeded / Failed / Skipped / Total] 161 / 550 / 18 / 729:  73%|███████▎  | 730/1000 [3:26:09<1:16:15, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 551 / 18 / 730:  73%|███████▎  | 730/1000 [3:26:09<1:16:15, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 551 / 18 / 730:  73%|███████▎  | 731/1000 [3:26:14<1:15:53, 16.93s/it][Succeeded / Failed / Skipped / Total] 161 / 552 / 18 / 731:  73%|███████▎  | 731/1000 [3:26:14<1:15:53, 16.93s/it][Succeeded / Failed / Skipped / Total] 161 / 552 / 18 / 731:  73%|███████▎  | 732/1000 [3:26:18<1:15:32, 16.91s/it][Succeeded / Failed / Skipped / Total] 161 / 553 / 18 / 732:  73%|███████▎  | 732/1000 [3:26:18<1:15:32, 16.91s/it][Succeeded / Failed / Skipped / Total] 161 / 553 / 18 / 732:  73%|███████▎  | 733/1000 [3:26:20<1:15:09, 16.89s/it][Succeeded / Failed / Skipped / Total] 161 / 554 / 18 / 733:  73%|███████▎  | 733/1000 [3:26:20<1:15:09, 16.89s/it][Succeeded / Failed / Skipped / Total] 161 / 554 / 18 / 733:  73%|███████▎  | 734/1000 [3:27:31<1:15:12, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 555 / 18 / 734:  73%|███████▎  | 734/1000 [3:27:31<1:15:12, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 555 / 18 / 734:  74%|███████▎  | 735/1000 [3:27:35<1:14:50, 16.95s/it]Registers a madvoc component. --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[ptsd]] ( final Class < ? > [[whammy]] ) { Objects . requireNonNull ( [[whammy]] ) ; madvocComponents . add ( ClassConsumer . of ( [[whammy]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Registers an action config consumer with this action manager. --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[encompass]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Starts the web application. --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[embark]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 731 ---------------------------------------------
Configures the default actions. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[overdrawn]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
Registers all madvoc components. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[incapacitate]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 733 ---------------------------------------------
Relative path.@param targetPath the target path@param basePath the base path@return the string --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[reheat]] ( final String [[shoreline]] , final String [[drilled]] ) { return new File ( [[drilled]] ) . toPath ( ) . relativize ( new File ( [[shoreline]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 734 ---------------------------------------------
Includes the specified jars in the scanner.@param includedJars The jars to include.@return this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[imagines]] ) { for ( final String includedJar : [[imagines]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 556 / 18 / 735:  74%|███████▎  | 735/1000 [3:27:35<1:14:50, 16.95s/it][Succeeded / Failed / Skipped / Total] 161 / 556 / 18 / 735:  74%|███████▎  | 736/1000 [3:27:44<1:14:31, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 557 / 18 / 736:  74%|███████▎  | 736/1000 [3:27:44<1:14:31, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 557 / 18 / 736:  74%|███████▎  | 737/1000 [3:27:47<1:14:08, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 558 / 18 / 737:  74%|███████▎  | 737/1000 [3:27:47<1:14:08, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 558 / 18 / 737:  74%|███████▍  | 738/1000 [3:28:05<1:13:52, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 559 / 18 / 738:  74%|███████▍  | 738/1000 [3:28:05<1:13:52, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 559 / 18 / 738:  74%|███████▍  | 739/1000 [3:28:25<1:13:36, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 560 / 18 / 739:  74%|███████▍  | 739/1000 [3:28:25<1:13:36, 16.92s/it][Succeeded / Failed / Skipped / Total] 161 / 560 / 18 / 739:  74%|███████▍  | 740/1000 [3:28:48<1:13:21, 16.93s/it][Succeeded / Failed / Skipped / Total] 161 / 561 / 18 / 740:  74%|███████▍  | 740/1000 [3:28:48<1:13:21, 16.93s/it][Succeeded / Failed / Skipped / Total] 161 / 561 / 18 / 740:  74%|███████▍  | 741/1000 [3:28:49<1:12:59, 16.91s/it][Succeeded / Failed / Skipped / Total] 161 / 562 / 18 / 741:  74%|███████▍  | 741/1000 [3:28:49<1:12:59, 16.91s/it][Succeeded / Failed / Skipped / Total] 161 / 562 / 18 / 741:  74%|███████▍  | 742/1000 [3:28:56<1:12:39, 16.90s/it]Includes the specified list of entries in this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[skill]] ) { for ( final String [[conditioning]] : [[skill]] ) { rulesEntries . include ( [[conditioning]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
Excludes entries from this scanner.@param excludedEntries the entries to exclude.@return this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[whale]] ) { for ( final String excludedEntry : [[whale]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 737 ---------------------------------------------
Excludes the specified jars from scanning.@param excludedJars the jars to exclude.@return this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... excludedJars ) { for ( final String [[excludedJar]] : excludedJars ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... excludedJars ) { for ( final String [[alsace]] : excludedJars ) { rulesJars . exclude ( [[alsace]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 738 ---------------------------------------------
Gets the path to the specified filename.@param filename the filename@param separatorAdd the separator index@return the path --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = index + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[inju]] ( final String [[defaults]] , final int separatorAdd ) { if ( [[defaults]] == null ) { return null ; } int prefix = getPrefixLength ( [[defaults]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[defaults]] ) ; int [[runing]] = index + separatorAdd ; if ( prefix >= [[defaults]] . length ( ) || index < 0 || prefix >= [[runing]] ) { return StringPool . EMPTY ; } return [[defaults]] . substring ( prefix , [[runing]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 739 ---------------------------------------------
Splits the supplied filename into an array of Strings.@param filename the filename to split.@return the array of Strings. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[bulkhead]] ( final String [[icis]] ) { String prefix = getPrefix ( [[icis]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[icis]] ) ; int lastExtensionIndex = indexOfExtension ( [[icis]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[icis]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[icis]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[icis]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[icis]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[icis]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[icis]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[icis]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 740 ---------------------------------------------
Returns the bytecode signature of the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[overthink]] ( final Class [[genres]] ) { final String name = ' ' + [[genres]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Start the scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[outset]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[lane]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[lane]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 563 / 18 / 742:  74%|███████▍  | 742/1000 [3:28:56<1:12:39, 16.90s/it][Succeeded / Failed / Skipped / Total] 161 / 563 / 18 / 742:  74%|███████▍  | 743/1000 [3:29:00<1:12:17, 16.88s/it][Succeeded / Failed / Skipped / Total] 161 / 564 / 18 / 743:  74%|███████▍  | 743/1000 [3:29:00<1:12:17, 16.88s/it][Succeeded / Failed / Skipped / Total] 161 / 564 / 18 / 743:  74%|███████▍  | 744/1000 [3:29:09<1:11:58, 16.87s/it][Succeeded / Failed / Skipped / Total] 161 / 565 / 18 / 744:  74%|███████▍  | 744/1000 [3:29:09<1:11:58, 16.87s/it][Succeeded / Failed / Skipped / Total] 161 / 565 / 18 / 744:  74%|███████▍  | 745/1000 [3:30:22<1:12:00, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 566 / 18 / 745:  74%|███████▍  | 745/1000 [3:30:22<1:12:00, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 566 / 18 / 745:  75%|███████▍  | 746/1000 [3:30:37<1:11:42, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 567 / 18 / 746:  75%|███████▍  | 746/1000 [3:30:37<1:11:42, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 567 / 18 / 746:  75%|███████▍  | 747/1000 [3:31:28<1:11:37, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 568 / 18 / 747:  75%|███████▍  | 747/1000 [3:31:28<1:11:37, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 568 / 18 / 747:  75%|███████▍  | 748/1000 [3:31:33<1:11:16, 16.97s/it]Scans the supplied paths and adds them to this scanner. --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[crawling]] ( final String ... [[camino]] ) { for ( final String path : [[camino]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 743 ---------------------------------------------
Gets the default or scope type.@param < S> the type parameter@param scopeClass the scope class@return the default or scope type --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[broaden]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Scans a jar file. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[reruns]] ( final File [[roster]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[roster]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[roster]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 745 ---------------------------------------------
Scans the classpath. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[brightened]] ( final File root ) { String [[skelly]] = root . getAbsolutePath ( ) ; if ( ! [[skelly]] . endsWith ( File . separator ) ) { [[skelly]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[skelly]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[skelly]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[skelly]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 746 ---------------------------------------------
Gets or initializes the given scope. --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[looking]] ( final Class < ? extends MadvocScope > [[echoed]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[echoed]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Creates a new transaction. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , scope , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[oblong]] ( final JtxTransactionMode tm , final Object scope , final boolean [[vigorously]] ) { return new DbJtxTransaction ( this , tm , scope , [[vigorously]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 569 / 18 / 748:  75%|███████▍  | 748/1000 [3:31:33<1:11:16, 16.97s/it][Succeeded / Failed / Skipped / Total] 161 / 569 / 18 / 748:  75%|███████▍  | 749/1000 [3:31:36<1:10:54, 16.95s/it][Succeeded / Failed / Skipped / Total] 161 / 570 / 18 / 749:  75%|███████▍  | 749/1000 [3:31:36<1:10:54, 16.95s/it][Succeeded / Failed / Skipped / Total] 161 / 570 / 18 / 749:  75%|███████▌  | 750/1000 [3:31:59<1:10:39, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 571 / 18 / 750:  75%|███████▌  | 750/1000 [3:31:59<1:10:39, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 571 / 18 / 750:  75%|███████▌  | 751/1000 [3:32:00<1:10:17, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 572 / 18 / 751:  75%|███████▌  | 751/1000 [3:32:00<1:10:17, 16.94s/it][Succeeded / Failed / Skipped / Total] 161 / 572 / 18 / 751:  75%|███████▌  | 752/1000 [3:32:35<1:10:06, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 573 / 18 / 752:  75%|███████▌  | 752/1000 [3:32:35<1:10:06, 16.96s/it][Succeeded / Failed / Skipped / Total] 161 / 573 / 18 / 752:  75%|███████▌  | 753/1000 [3:33:25<1:10:00, 17.01s/it][Succeeded / Failed / Skipped / Total] 161 / 574 / 18 / 753:  75%|███████▌  | 753/1000 [3:33:25<1:10:00, 17.01s/it][Succeeded / Failed / Skipped / Total] 161 / 574 / 18 / 753:  75%|███████▌  | 754/1000 [3:33:33<1:09:40, 16.99s/it]Registers a scope consumer.@param scopeType the scope type@param madvocScopeConsumer the consumer --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[delamere]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[settlements]] ) { final MadvocScope [[areas]] = getOrInitScope ( scopeType ) ; [[settlements]] . accept ( [[areas]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Asserts that the specified set of tokens are valid.@param tokenSet the set of tokens. --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[haze]] ) { if ( [[haze]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[perceive]] = null ; Iterator < Token > iterator = [[haze]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[perceive]] = token ; } } if ( ( [[perceive]] != null ) && ( [[haze]] . size ( ) >= maxTokensPerSession ) ) { [[haze]] . remove ( [[perceive]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 750 ---------------------------------------------
Creates a copy of this bean. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[replication]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of this instance. --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[vers]] ( final Object [[font]] ) { BeanCopy [[administrative]] = new BeanCopy ( [[font]] ) ; [[administrative]] . isSourceMap = [[font]] instanceof Map ; return [[administrative]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Prepare a CSRF token.@param session the session@param timeToLive the time to live@return the token --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession [[session]] , final int [[timeToLive]] ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( [[value]] , [[timeToLive]] ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[gallic]] ( final HttpSession [[times]] , final int [[yoru]] ) { Set < Token > tokenSet = ( Set < Token > ) [[times]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[times]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[utility]] ; boolean unique ; do { [[utility]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( [[utility]] , [[yoru]] ) ) ; } while ( ! unique ) ; return [[utility]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 753 ---------------------------------------------
Resolve a scope.@param < S> the type of the scope@param scopeType the type of the scope@return the scope --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[applies]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[orbs]] = ( S ) scopes . get ( scopeType ) ; if ( [[orbs]] == null ) { try { [[orbs]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[orbs]] ) ; scopes . put ( scopeType , [[orbs]] ) ; } return [[orbs]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 754 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 575 / 18 / 754:  75%|███████▌  | 754/1000 [3:33:33<1:09:40, 16.99s/it][Succeeded / Failed / Skipped / Total] 161 / 575 / 18 / 754:  76%|███████▌  | 755/1000 [3:34:04<1:09:27, 17.01s/it][Succeeded / Failed / Skipped / Total] 161 / 576 / 18 / 755:  76%|███████▌  | 755/1000 [3:34:04<1:09:27, 17.01s/it][Succeeded / Failed / Skipped / Total] 161 / 576 / 18 / 755:  76%|███████▌  | 756/1000 [3:34:09<1:09:07, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 577 / 18 / 756:  76%|███████▌  | 756/1000 [3:34:09<1:09:07, 17.00s/it][Succeeded / Failed / Skipped / Total] 161 / 577 / 18 / 756:  76%|███████▌  | 757/1000 [3:36:02<1:09:20, 17.12s/it][Succeeded / Failed / Skipped / Total] 161 / 578 / 18 / 757:  76%|███████▌  | 757/1000 [3:36:02<1:09:20, 17.12s/it][Succeeded / Failed / Skipped / Total] 161 / 578 / 18 / 757:  76%|███████▌  | 758/1000 [3:36:57<1:09:15, 17.17s/it][Succeeded / Failed / Skipped / Total] 161 / 579 / 18 / 758:  76%|███████▌  | 758/1000 [3:36:57<1:09:15, 17.17s/it][Succeeded / Failed / Skipped / Total] 161 / 579 / 18 / 758:  76%|███████▌  | 759/1000 [3:38:10<1:09:16, 17.25s/it]Initializes this template with the specified template data. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[stinky]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 755 ---------------------------------------------
Visits a property. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[magnon]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Removes the specified bean from the list of beans. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[schemed]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 757 ---------------------------------------------
Registers a bean definition.@param name the bean name@param beanDefinition the bean definition --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String [[name]] , final BeanDefinition [[beanDefinition]] ) { beans . put ( [[name]] , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[name]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[zev]] ( final String [[nomination]] , final BeanDefinition [[español]] ) { beans . put ( [[nomination]] , [[español]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[español]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[nomination]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 758 ---------------------------------------------
Resolve the bean names for the given type.@param type the type@return the bean names --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition [[beanDefinition]] = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[beanDefinition]] . type , [[type]] ) ) { String beanName = [[entry]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[cardinal]] ( final Class [[dawg]] ) { String [ ] beanNames = beanCollections . get ( [[dawg]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entrances]] : beans . entrySet ( ) ) { BeanDefinition [[audacity]] = [[entrances]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[audacity]] . type , [[dawg]] ) ) { String beanName = [[entrances]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[dawg]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 759 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 580 / 18 / 759:  76%|███████▌  | 759/1000 [3:38:10<1:09:16, 17.25s/it][Succeeded / Failed / Skipped / Total] 161 / 580 / 18 / 759:  76%|███████▌  | 760/1000 [3:38:40<1:09:03, 17.26s/it][Succeeded / Failed / Skipped / Total] 161 / 581 / 18 / 760:  76%|███████▌  | 760/1000 [3:38:40<1:09:03, 17.26s/it][Succeeded / Failed / Skipped / Total] 161 / 581 / 18 / 760:  76%|███████▌  | 761/1000 [3:39:36<1:08:58, 17.32s/it][Succeeded / Failed / Skipped / Total] 161 / 582 / 18 / 761:  76%|███████▌  | 761/1000 [3:39:36<1:08:58, 17.32s/it][Succeeded / Failed / Skipped / Total] 161 / 582 / 18 / 761:  76%|███████▌  | 762/1000 [3:39:40<1:08:36, 17.30s/it]Registers a Petite Ctor injection point.@param beanName the bean name@param paramTypes the parameter types@param references the references --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] [[paramTypes]] , final String [ ] [[references]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructor]] = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[paramTypes]] , "[[True]]" == "[[True]]" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , [[references]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[hasnt]] ( final String beanName , final Class [ ] [[violent]] , final String [ ] [[dismissals]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[dispenser]] = null ; if ( [[violent]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[dispenser]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[violent]] , "[[Actual]]" == "[[Actual]]" ) ; if ( ctorDescriptor != null ) { [[dispenser]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[dispenser]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[dispenser]] , [[dismissals]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[dispenser]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 760 ---------------------------------------------
Decodes a char array into a byte array. --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int [[length]] = [[arr]] . length ; if ( [[length]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[length]] - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[length]] > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[divx]] ( final char [ ] [[holst]] ) { int [[deadlines]] = [[holst]] . length ; if ( [[deadlines]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[deadlines]] - 1 ; int pad = [[holst]] [ endx ] == ' ' ? ( [[holst]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[deadlines]] > 76 ? ( [[holst]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[holst]] [ sndx ++ ] ] << 18 | INV [ [[holst]] [ sndx ++ ] ] << 12 | INV [ [[holst]] [ sndx ++ ] ] << 6 | INV [ [[holst]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[holst]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a set injection point.@param beanName the bean name@param property the property --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String [[property]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = [[cd]] . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[concessions]] ( final String [[canopy]] , final String [[royale]] ) { BeanDefinition [[emphysema]] = lookupExistingBeanDefinition ( [[canopy]] ) ; ClassDescriptor [[album]] = ClassIntrospector . get ( ) . lookup ( [[emphysema]] . type ) ; PropertyDescriptor propertyDescriptor = [[album]] . getPropertyDescriptor ( [[royale]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[emphysema]] . type . getName ( ) + ' ' + [[royale]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[emphysema]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 583 / 18 / 762:  76%|███████▌  | 762/1000 [3:39:40<1:08:36, 17.30s/it][Succeeded / Failed / Skipped / Total] 161 / 583 / 18 / 762:  76%|███████▋  | 763/1000 [3:40:22<1:08:27, 17.33s/it][Succeeded / Failed / Skipped / Total] 161 / 584 / 18 / 763:  76%|███████▋  | 763/1000 [3:40:22<1:08:27, 17.33s/it][Succeeded / Failed / Skipped / Total] 161 / 584 / 18 / 763:  76%|███████▋  | 764/1000 [3:42:09<1:08:37, 17.45s/it][Succeeded / Failed / Skipped / Total] 161 / 585 / 18 / 764:  76%|███████▋  | 764/1000 [3:42:09<1:08:37, 17.45s/it][Succeeded / Failed / Skipped / Total] 161 / 585 / 18 / 764:  76%|███████▋  | 765/1000 [3:43:17<1:08:35, 17.51s/it][Succeeded / Failed / Skipped / Total] 161 / 586 / 18 / 765:  76%|███████▋  | 765/1000 [3:43:17<1:08:35, 17.51s/it][Succeeded / Failed / Skipped / Total] 161 / 586 / 18 / 765:  77%|███████▋  | 766/1000 [3:45:18<1:08:49, 17.65s/it][Succeeded / Failed / Skipped / Total] 161 / 587 / 18 / 766:  77%|███████▋  | 766/1000 [3:45:18<1:08:49, 17.65s/it][Succeeded / Failed / Skipped / Total] 161 / 587 / 18 / 766:  77%|███████▋  | 767/1000 [3:45:41<1:08:33, 17.66s/it]Checks if a CSRF token is present in the session.@param session the session@param tokenValue the token value@return true if the token is present in the session, false otherwise --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "[[True]]" == "[[True]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[tind]] ( final HttpSession [[debrief]] , final String [[nha]] ) { Set < Token > tokenSet = ( Set < Token > ) [[debrief]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[nha]] == null ) ) { return "[[Decent]]" == "[[Decent]]" ; } if ( ( tokenSet == null ) || ( [[nha]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[nha]] ) ) { it . remove ( ) ; found = "[[Decent]]" == "[[Decent]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 763 ---------------------------------------------
Registers a property injection point.@param beanName the bean name@param property the property@param reference the reference --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String [[property]] , final String [[reference]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[reference]] ) ; PropertyInjectionPoint [[pip]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[pip]] ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[consonant]] ( final String beanName , final String [[proprietary]] , final String [[allusions]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[proprietary]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[proprietary]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[allusions]] ) ; PropertyInjectionPoint [[app]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[app]] ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Iterate through all registered bean types and pass them to the bean name consumer. --> [[[FAILED]]]

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[dudes]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[dudes]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 765 ---------------------------------------------
Defines a map of parameters.@param properties the map of parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[entry]] : properties . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[billows]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[admissions]] : properties . entrySet ( ) ) { defineParameter ( [[admissions]] . getKey ( ) . toString ( ) , [[admissions]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 766 ---------------------------------------------
Register Petite destroy methods.@param beanName the bean name@param destroyMethodNames the destroy method names --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] [[destroyMethodPoints]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } [[destroyMethodPoints]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( [[destroyMethodPoints]] ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[huei]] ( final String beanName , String ... [[burgle]] ) { BeanDefinition [[amounted]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[amounted]] . type ) ; if ( [[burgle]] == null ) { [[burgle]] = StringPool . EMPTY_ARRAY ; } int total = [[burgle]] . length ; DestroyMethodPoint [ ] [[arapaho]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[burgle]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[burgle]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[amounted]] . type . getName ( ) + ' ' + [[burgle]] [ i ] ) ; } [[arapaho]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[amounted]] . addDestroyMethodPoints ( [[arapaho]] ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 588 / 18 / 767:  77%|███████▋  | 767/1000 [3:45:41<1:08:33, 17.66s/it][Succeeded / Failed / Skipped / Total] 161 / 588 / 18 / 767:  77%|███████▋  | 768/1000 [3:46:14<1:08:20, 17.67s/it][Succeeded / Failed / Skipped / Total] 161 / 589 / 18 / 768:  77%|███████▋  | 768/1000 [3:46:14<1:08:20, 17.67s/it][Succeeded / Failed / Skipped / Total] 161 / 589 / 18 / 768:  77%|███████▋  | 769/1000 [3:46:22<1:08:00, 17.66s/it][Succeeded / Failed / Skipped / Total] 161 / 590 / 18 / 769:  77%|███████▋  | 769/1000 [3:46:22<1:08:00, 17.66s/it][Succeeded / Failed / Skipped / Total] 161 / 590 / 18 / 769:  77%|███████▋  | 770/1000 [3:47:02<1:07:49, 17.69s/it][Succeeded / Failed / Skipped / Total] 161 / 591 / 18 / 770:  77%|███████▋  | 770/1000 [3:47:02<1:07:49, 17.69s/it][Succeeded / Failed / Skipped / Total] 161 / 591 / 18 / 770:  77%|███████▋  | 771/1000 [3:47:28<1:07:33, 17.70s/it][Succeeded / Failed / Skipped / Total] 162 / 591 / 18 / 771:  77%|███████▋  | 771/1000 [3:47:28<1:07:33, 17.70s/it][Succeeded / Failed / Skipped / Total] 162 / 591 / 18 / 771:  77%|███████▋  | 772/1000 [3:47:34<1:07:12, 17.69s/it]Registers an injection point for the specified Petite method. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String [[methodName]] , final Class [ ] [[arguments]] , final String [ ] [[references]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , [[arguments]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[references]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[herself]] ( final String beanName , final String [[coburn]] , final Class [ ] [[differences]] , final String [ ] [[cites]] ) { BeanDefinition [[englander]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[englander]] . type ) ; Method method = null ; if ( [[differences]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[coburn]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[englander]] . type . getName ( ) + ' ' + [[coburn]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[coburn]] , [[differences]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[englander]] . type . getName ( ) + ' ' + [[coburn]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[cites]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[englander]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 768 ---------------------------------------------
Registers a custom Petite bean.@param < T > the type of the bean to be registered@param type the type of the bean to be registered@param name the name of the bean to be registered@param scopeType the scope of the bean to be registered@param wiringMode the wiring mode of the bean to be registered@param define {@code true} if the bean should be defined, {@code false} otherwise@param consumer the consumer --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[type]] , String [[name]] , Class < ? extends Scope > scopeType , WiringMode [[wiringMode]] , final boolean define , final Consumer < T > [[consumer]] ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( [[type]] ) ; } if ( [[wiringMode]] == null ) { [[wiringMode]] = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( [[wiringMode]] == WiringMode . DEFAULT ) { [[wiringMode]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[typist]] , String [[denominations]] , Class < ? extends Scope > scopeType , WiringMode [[defendor]] , final boolean define , final Consumer < T > [[subscriber]] ) { if ( [[denominations]] == null ) { [[denominations]] = resolveBeanName ( [[typist]] ) ; } if ( [[defendor]] == null ) { [[defendor]] = annotationResolver . resolveBeanWiringMode ( [[typist]] ) ; } if ( [[defendor]] == WiringMode . DEFAULT ) { [[defendor]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[typist]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 769 ---------------------------------------------
Intercepts the supplied action request. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[oppose]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[attendants]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[attendants]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 770 ---------------------------------------------
Adds an int to the end of the stack. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[dampen]] ( final MethodVisitor [[submarines]] , final int [[appreciates]] ) { if ( [[appreciates]] <= 5 ) { [[submarines]] . visitInsn ( ICONST_0 + [[appreciates]] ) ; } else if ( [[appreciates]] <= Byte . MAX_VALUE ) { [[submarines]] . visitIntInsn ( BIPUSH , [[appreciates]] ) ; } else { [[submarines]] . visitIntInsn ( SIPUSH , [[appreciates]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 771 ---------------------------------------------
Returns advice field name. --> Generate a list of banners for a given index@param surnames@param index@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[banners]] ( final String [[surnames]] , final int index ) { return ProxettaNames . fieldPrefix + [[surnames]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 772 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 592 / 18 / 772:  77%|███████▋  | 772/1000 [3:47:34<1:07:12, 17.69s/it][Succeeded / Failed / Skipped / Total] 162 / 592 / 18 / 772:  77%|███████▋  | 773/1000 [3:47:40<1:06:51, 17.67s/it][Succeeded / Failed / Skipped / Total] 163 / 592 / 18 / 773:  77%|███████▋  | 773/1000 [3:47:40<1:06:51, 17.67s/it][Succeeded / Failed / Skipped / Total] 163 / 592 / 18 / 773:  77%|███████▋  | 774/1000 [3:47:47<1:06:30, 17.66s/it][Succeeded / Failed / Skipped / Total] 163 / 593 / 18 / 774:  77%|███████▋  | 774/1000 [3:47:47<1:06:30, 17.66s/it][Succeeded / Failed / Skipped / Total] 163 / 593 / 18 / 774:  78%|███████▊  | 775/1000 [3:48:09<1:06:14, 17.66s/it][Succeeded / Failed / Skipped / Total] 164 / 593 / 18 / 775:  78%|███████▊  | 775/1000 [3:48:09<1:06:14, 17.66s/it][Succeeded / Failed / Skipped / Total] 164 / 593 / 18 / 775:  78%|███████▊  | 776/1000 [3:49:23<1:06:13, 17.74s/it][Succeeded / Failed / Skipped / Total] 164 / 594 / 18 / 776:  78%|███████▊  | 776/1000 [3:49:23<1:06:13, 17.74s/it][Succeeded / Failed / Skipped / Total] 164 / 594 / 18 / 776:  78%|███████▊  | 777/1000 [3:49:46<1:05:56, 17.74s/it][Succeeded / Failed / Skipped / Total] 164 / 595 / 18 / 777:  78%|███████▊  | 777/1000 [3:49:46<1:05:56, 17.74s/it][Succeeded / Failed / Skipped / Total] 164 / 595 / 18 / 777:  78%|███████▊  | 778/1000 [3:49:51<1:05:35, 17.73s/it][Succeeded / Failed / Skipped / Total] 164 / 596 / 18 / 778:  78%|███████▊  | 778/1000 [3:49:51<1:05:35, 17.73s/it][Succeeded / Failed / Skipped / Total] 164 / 596 / 18 / 778:  78%|███████▊  | 779/1000 [3:50:06<1:05:16, 17.72s/it]Register Petite init methods.@param beanName the bean name@param invocationStrategy the invocation strategy@param initMethodNames the init method names --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy [[invocationStrategy]] , String ... [[initMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[invocationStrategy]] ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy [[broyles]] , String ... [[hillcrest]] ) { BeanDefinition [[runoff]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[recordings]] = ClassIntrospector . get ( ) . lookup ( [[runoff]] . type ) ; if ( [[hillcrest]] == null ) { [[hillcrest]] = StringPool . EMPTY_ARRAY ; } int total = [[hillcrest]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[hillcrest]] . length ; i ++ ) { MethodDescriptor md = [[recordings]] . getMethodDescriptor ( [[hillcrest]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[runoff]] . type . getName ( ) + ' ' + [[hillcrest]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[broyles]] ) ; } [[runoff]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 773 ---------------------------------------------
Resolves a Java version number.@param versionThe Java version number.@return The Java version number. --> Calculates the number of virus in the system@param printout the number of virus@return the number of virus in the system --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[outbreaks]] ( final int [[printout]] ) { final int [[devilishly]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[devilishly]] - 8 + 52 ; return [[printout]] > platformVersion ? [[printout]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
Throws an exception if the index is out of bounds. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[dramatically]] ( final MethodInfo [[deano]] , final int [[travels]] ) { if ( ( [[travels]] < 1 ) || ( [[travels]] > [[deano]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[travels]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 775 ---------------------------------------------
Returns advice method name. --> Converts an index into an acronym@param acronym@param index@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[deprived]] ( final String [[acronym]] , final int index ) { return ProxettaNames . methodPrefix + [[acronym]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
Loads the special arguments for the given method. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[desecrated]] ( final MethodVisitor [[mistral]] , final MethodInfo [[underhand]] ) { [[mistral]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[underhand]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mistral]] , [[underhand]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 777 ---------------------------------------------
Loads the static method arguments.@param mv the method visitor.@param methodInfo the method info. --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[spaceship]] , final MethodInfo methodInfo ) { for ( int [[know]] = 0 ; [[know]] < methodInfo . getArgumentsCount ( ) ; [[know]] ++ ) { loadMethodArgument ( [[spaceship]] , methodInfo , [[know]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 778 ---------------------------------------------
Loads the virtual method arguments.@param mv the method visitor.@param methodInfo the method info. --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[commodore]] , final MethodInfo methodInfo ) { for ( int [[te]] = 1 ; [[te]] <= methodInfo . getArgumentsCount ( ) ; [[te]] ++ ) { loadMethodArgument ( [[commodore]] , methodInfo , [[te]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 779 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 596 / 18 / 779:  78%|███████▊  | 779/1000 [3:50:06<1:05:16, 17.72s/it][Succeeded / Failed / Skipped / Total] 165 / 596 / 18 / 779:  78%|███████▊  | 780/1000 [3:50:39<1:05:03, 17.74s/it][Succeeded / Failed / Skipped / Total] 166 / 596 / 18 / 780:  78%|███████▊  | 780/1000 [3:50:39<1:05:03, 17.74s/it][Succeeded / Failed / Skipped / Total] 166 / 596 / 18 / 780:  78%|███████▊  | 781/1000 [3:50:46<1:04:42, 17.73s/it][Succeeded / Failed / Skipped / Total] 167 / 596 / 18 / 781:  78%|███████▊  | 781/1000 [3:50:46<1:04:42, 17.73s/it][Succeeded / Failed / Skipped / Total] 167 / 596 / 18 / 781:  78%|███████▊  | 782/1000 [3:51:27<1:04:31, 17.76s/it]Registers a provider for the specified Petite bean. --> Given a bean name and a vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed vetoed --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[ceremoniously]] ( final String providerName , final String beanName , final String [[visage]] , final Class [ ] arguments ) { BeanDefinition [[valves]] = lookupBeanDefinition ( beanName ) ; if ( [[valves]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[infallibility]] = [[valves]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[infallibility]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[visage]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[visage]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 780 ---------------------------------------------
Create a method signature key. --> Append a description to the end of the string@param access@param methodName@param description@param className@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[knocking]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
Prepares a return value instruction.@param mva method visitor@param methodInfothe method info@param varOffsetthe offset --> Visits the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse the specified method in order to profuse --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[profusely]] ( final MethodVisitor [[warships]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[warships]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[warships]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[warships]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 167 / 597 / 18 / 782:  78%|███████▊  | 782/1000 [3:51:27<1:04:31, 17.76s/it][Succeeded / Failed / Skipped / Total] 167 / 597 / 18 / 782:  78%|███████▊  | 783/1000 [3:51:41<1:04:12, 17.75s/it][Succeeded / Failed / Skipped / Total] 167 / 598 / 18 / 783:  78%|███████▊  | 783/1000 [3:51:41<1:04:12, 17.75s/it][Succeeded / Failed / Skipped / Total] 167 / 598 / 18 / 783:  78%|███████▊  | 784/1000 [3:51:44<1:03:50, 17.74s/it][Succeeded / Failed / Skipped / Total] 167 / 599 / 18 / 784:  78%|███████▊  | 784/1000 [3:51:44<1:03:50, 17.74s/it][Succeeded / Failed / Skipped / Total] 167 / 599 / 18 / 784:  78%|███████▊  | 785/1000 [3:52:01<1:03:32, 17.73s/it][Succeeded / Failed / Skipped / Total] 167 / 600 / 18 / 785:  78%|███████▊  | 785/1000 [3:52:01<1:03:32, 17.73s/it][Succeeded / Failed / Skipped / Total] 167 / 600 / 18 / 785:  79%|███████▊  | 786/1000 [3:53:04<1:03:27, 17.79s/it]Creates a new array of the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[penalty]] ( final MethodVisitor [[sj]] , final Class [[earthy]] ) { if ( [[earthy]] == int . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[earthy]] == long . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[earthy]] == float . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[earthy]] == double . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[earthy]] == byte . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[earthy]] == short . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[earthy]] == boolean . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[earthy]] == char . class ) { [[sj]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[sj]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[earthy]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 783 ---------------------------------------------
Stores an int into an array.@param mva method visitor.@param componentTypethe component type. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[suvs]] ( final MethodVisitor [[submarines]] , final Class [[anathema]] ) { if ( [[anathema]] == int . class ) { [[submarines]] . visitInsn ( IASTORE ) ; return ; } if ( [[anathema]] == long . class ) { [[submarines]] . visitInsn ( LASTORE ) ; return ; } if ( [[anathema]] == float . class ) { [[submarines]] . visitInsn ( FASTORE ) ; return ; } if ( [[anathema]] == double . class ) { [[submarines]] . visitInsn ( DASTORE ) ; return ; } if ( [[anathema]] == byte . class ) { [[submarines]] . visitInsn ( BASTORE ) ; return ; } if ( [[anathema]] == short . class ) { [[submarines]] . visitInsn ( SASTORE ) ; return ; } if ( [[anathema]] == boolean . class ) { [[submarines]] . visitInsn ( BASTORE ) ; return ; } if ( [[anathema]] == char . class ) { [[submarines]] . visitInsn ( CASTORE ) ; return ; } [[submarines]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 784 ---------------------------------------------
Loads the argument at the given index.@param mv the method visitor.@param methodInfo the method info.@param index the index. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int index ) { int [[offset]] = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[mels]] ( final MethodVisitor [[boat]] , final MethodInfo [[cautionary]] , final int index ) { int [[compensation]] = [[cautionary]] . getArgumentOffset ( index ) ; int type = [[cautionary]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[boat]] . visitVarInsn ( ILOAD , [[compensation]] ) ; break ; case ' ' : [[boat]] . visitVarInsn ( LLOAD , [[compensation]] ) ; break ; case ' ' : [[boat]] . visitVarInsn ( FLOAD , [[compensation]] ) ; break ; case ' ' : [[boat]] . visitVarInsn ( DLOAD , [[compensation]] ) ; break ; default : [[boat]] . visitVarInsn ( ALOAD , [[compensation]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 785 ---------------------------------------------
Stores an argument at the given index.@param mv the method visitor.@param methodInfo the method info.@param index the index. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int type = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[overdoses]] ( final MethodVisitor mv , final MethodInfo [[terns]] , final int [[alphabetically]] ) { int offset = [[terns]] . getArgumentOffset ( [[alphabetically]] ) ; int type = [[terns]] . getArgument ( [[alphabetically]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 786 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 600 / 18 / 786:  79%|███████▊  | 786/1000 [3:53:04<1:03:27, 17.79s/it][Succeeded / Failed / Skipped / Total] 168 / 600 / 18 / 786:  79%|███████▊  | 787/1000 [3:53:13<1:03:07, 17.78s/it][Succeeded / Failed / Skipped / Total] 169 / 600 / 18 / 787:  79%|███████▊  | 787/1000 [3:53:13<1:03:07, 17.78s/it][Succeeded / Failed / Skipped / Total] 169 / 600 / 18 / 787:  79%|███████▉  | 788/1000 [3:53:20<1:02:46, 17.77s/it][Succeeded / Failed / Skipped / Total] 169 / 601 / 18 / 788:  79%|███████▉  | 788/1000 [3:53:20<1:02:46, 17.77s/it][Succeeded / Failed / Skipped / Total] 169 / 601 / 18 / 788:  79%|███████▉  | 789/1000 [3:53:49<1:02:31, 17.78s/it][Succeeded / Failed / Skipped / Total] 169 / 602 / 18 / 789:  79%|███████▉  | 789/1000 [3:53:49<1:02:31, 17.78s/it][Succeeded / Failed / Skipped / Total] 169 / 602 / 18 / 789:  79%|███████▉  | 790/1000 [3:54:11<1:02:15, 17.79s/it][Succeeded / Failed / Skipped / Total] 169 / 603 / 18 / 790:  79%|███████▉  | 790/1000 [3:54:11<1:02:15, 17.79s/it][Succeeded / Failed / Skipped / Total] 169 / 603 / 18 / 790:  79%|███████▉  | 791/1000 [3:54:50<1:02:03, 17.81s/it][Succeeded / Failed / Skipped / Total] 169 / 604 / 18 / 791:  79%|███████▉  | 791/1000 [3:54:50<1:02:03, 17.81s/it][Succeeded / Failed / Skipped / Total] 169 / 604 / 18 / 791:  79%|███████▉  | 792/1000 [3:55:35<1:01:52, 17.85s/it][Succeeded / Failed / Skipped / Total] 169 / 605 / 18 / 792:  79%|███████▉  | 792/1000 [3:55:35<1:01:52, 17.85s/it][Succeeded / Failed / Skipped / Total] 169 / 605 / 18 / 792:  79%|███████▉  | 793/1000 [3:56:42<1:01:47, 17.91s/it]Returns true if the given flags are empty. --> Returns true if the specified number of authorships and userFlags are present. --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] [[systemFlags]] = [[flags]] . getSystemFlags ( ) ; if ( [[systemFlags]] != null && [[systemFlags]] . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[gwendolyn]] ( Flags [[posters]] ) { if ( [[posters]] == null ) return "True" == "True" ; Flags . Flag [ ] [[authorship]] = [[posters]] . getSystemFlags ( ) ; if ( [[authorship]] != null && [[authorship]] . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[posters]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 787 ---------------------------------------------
Extracts the encoding from the content type.@param contentType the content type@param defaultEncoding the default encoding@return the encoding --> Kublai kublai@param seeked@param charlatans@return --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[kublai]] ( final String [[seeked]] , String [[charlatans]] ) { String [[menacing]] = [[kublai]] ( [[seeked]] ) ; if ( [[menacing]] == null ) { if ( [[charlatans]] == null ) { [[charlatans]] = JoddCore . encoding ; } [[menacing]] = [[charlatans]] ; } return [[menacing]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 788 ---------------------------------------------
Registers a provider for the specified Petite type. --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[type]] , final String [[staticMethodName]] , final Class [ ] [[arguments]] ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[staticMethodName]] , [[arguments]] , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[model]] , final String [[baldur]] , final Class [ ] [[motivation]] ) { ClassDescriptor [[conference]] = ClassIntrospector . get ( ) . lookup ( [[model]] ) ; MethodDescriptor md = [[conference]] . getMethodDescriptor ( [[baldur]] , [[motivation]] , "[[Truly]]" == "[[Truly]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[baldur]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 789 ---------------------------------------------
Require authentication.@param responsethe response@param realmthe realm@throws IOExceptionSignals that an I/O exception has occurred. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse [[resp]] , final String [[realm]] ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[incentives]] ( final HttpServletResponse [[org]] , final String [[topics]] ) throws IOException { [[org]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[topics]] + ' ' ) ; [[org]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Resolves the bearer token header.@param request the servlet request.@return the bearer token header or <code>null</code> if none. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String [[header]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[lafayette]] ( final HttpServletRequest request ) { String [[headwaters]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[headwaters]] == null ) { return null ; } int [[dowager]] = [[headwaters]] . indexOf ( "Bearer " ) ; if ( [[dowager]] == - 1 ) { return null ; } return [[headwaters]] . substring ( [[dowager]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
Prepares the response for download.@param response the servlet response@param file the file@param mimeType the mime type --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[takes]] ( final HttpServletResponse [[retaliated]] , final File [[cases]] , final String [[piston]] ) { if ( ! [[cases]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[cases]] ) ; } if ( [[cases]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[cases]] ) ; } prepareResponse ( [[retaliated]] , [[cases]] . getAbsolutePath ( ) , [[piston]] , ( int ) [[cases]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request body from the specified request. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[encryption]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter [[abroad]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[abroad]] ) ; return [[abroad]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
[Succeeded / Failed / Skipped / Total] 170 / 605 / 18 / 793:  79%|███████▉  | 793/1000 [3:56:42<1:01:47, 17.91s/it][Succeeded / Failed / Skipped / Total] 170 / 605 / 18 / 793:  79%|███████▉  | 794/1000 [3:57:01<1:01:29, 17.91s/it][Succeeded / Failed / Skipped / Total] 170 / 606 / 18 / 794:  79%|███████▉  | 794/1000 [3:57:01<1:01:29, 17.91s/it][Succeeded / Failed / Skipped / Total] 170 / 606 / 18 / 794:  80%|███████▉  | 795/1000 [3:57:02<1:01:07, 17.89s/it][Succeeded / Failed / Skipped / Total] 170 / 607 / 18 / 795:  80%|███████▉  | 795/1000 [3:57:02<1:01:07, 17.89s/it][Succeeded / Failed / Skipped / Total] 170 / 607 / 18 / 795:  80%|███████▉  | 796/1000 [3:57:40<1:00:54, 17.91s/it][Succeeded / Failed / Skipped / Total] 170 / 608 / 18 / 796:  80%|███████▉  | 796/1000 [3:57:40<1:00:54, 17.91s/it][Succeeded / Failed / Skipped / Total] 170 / 608 / 18 / 796:  80%|███████▉  | 797/1000 [3:58:07<1:00:39, 17.93s/it][Succeeded / Failed / Skipped / Total] 170 / 609 / 18 / 797:  80%|███████▉  | 797/1000 [3:58:07<1:00:39, 17.93s/it][Succeeded / Failed / Skipped / Total] 170 / 609 / 18 / 797:  80%|███████▉  | 798/1000 [3:58:21<1:00:20, 17.92s/it][Succeeded / Failed / Skipped / Total] 170 / 610 / 18 / 798:  80%|███████▉  | 798/1000 [3:58:21<1:00:20, 17.92s/it][Succeeded / Failed / Skipped / Total] 170 / 610 / 18 / 798:  80%|███████▉  | 799/1000 [3:58:42<1:00:02, 17.93s/it]--------------------------------------------- Result 793 ---------------------------------------------
Checks if the specified parameter is a GET parameter.@param request the servlet request@param name the parameter name@return true if the parameter is a GET parameter, false otherwise --> Determines whether the specified request should be considered as "Actually" or "False" --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[deliberated]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "[[Actually]]" == "[[Actually]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 794 ---------------------------------------------
Stores a context path variable in the servlet context. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[gatsby]] ( final ServletContext [[contras]] , final String [[lcd]] ) { String [[interested]] = getContextPath ( [[contras]] ) ; [[contras]] . setAttribute ( [[lcd]] , [[interested]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 795 ---------------------------------------------
Reads the specified request body from the specified request stream.@param request the specified request@return the specified request body@throws IOException if an I/O error occurs --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[stopped]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Retrieves all the cookies with the specified name.@param request the current HttpServletRequest.@param cookieName the name of the cookie to retrieve.@return all the cookies with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[cookie]] : cookies ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[childbearing]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[breads]] : cookies ) { if ( [[breads]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[breads]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 797 ---------------------------------------------
Stores the given context path variable in the given page context. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[compositions]] ( final PageContext [[christening]] , final String contextPathVariableName ) { String [[cohn]] = getContextPath ( [[christening]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[christening]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[cohn]] ) ; ServletContext servletContext = [[christening]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[cohn]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Invokes the body of the tag. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[kilometers]] ( final JspFragment [[bacterium]] ) throws JspException { if ( [[bacterium]] == null ) { return ; } try { [[bacterium]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 610 / 18 / 799:  80%|███████▉  | 799/1000 [3:58:42<1:00:02, 17.93s/it][Succeeded / Failed / Skipped / Total] 171 / 610 / 18 / 799:  80%|████████  | 800/1000 [3:58:53<59:43, 17.92s/it]  [Succeeded / Failed / Skipped / Total] 171 / 611 / 18 / 800:  80%|████████  | 800/1000 [3:58:53<59:43, 17.92s/it][Succeeded / Failed / Skipped / Total] 171 / 611 / 18 / 800:  80%|████████  | 801/1000 [3:59:04<59:23, 17.91s/it][Succeeded / Failed / Skipped / Total] 171 / 612 / 18 / 801:  80%|████████  | 801/1000 [3:59:04<59:23, 17.91s/it][Succeeded / Failed / Skipped / Total] 171 / 612 / 18 / 801:  80%|████████  | 802/1000 [3:59:16<59:04, 17.90s/it][Succeeded / Failed / Skipped / Total] 172 / 612 / 18 / 802:  80%|████████  | 802/1000 [3:59:16<59:04, 17.90s/it][Succeeded / Failed / Skipped / Total] 172 / 612 / 18 / 802:  80%|████████  | 803/1000 [3:59:24<58:43, 17.89s/it][Succeeded / Failed / Skipped / Total] 173 / 612 / 18 / 803:  80%|████████  | 803/1000 [3:59:24<58:43, 17.89s/it][Succeeded / Failed / Skipped / Total] 173 / 612 / 18 / 803:  80%|████████  | 804/1000 [3:59:42<58:26, 17.89s/it][Succeeded / Failed / Skipped / Total] 173 / 613 / 18 / 804:  80%|████████  | 804/1000 [3:59:42<58:26, 17.89s/it][Succeeded / Failed / Skipped / Total] 173 / 613 / 18 / 804:  80%|████████  | 805/1000 [4:00:29<58:15, 17.92s/it]Sets the response content type and file size. --> Sets the MIME type of the peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide peptide --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse [[response]] , final String [[fileName]] , String [[mimeType]] , final int [[fileSize]] ) { if ( ( [[mimeType]] == null ) && ( [[fileName]] != null ) ) { String extension = FileNameUtil . getExtension ( [[fileName]] ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { [[response]] . setContentType ( [[mimeType]] ) ; } if ( [[fileSize]] >= 0 ) { [[response]] . setContentLength ( [[fileSize]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[majnu]] ( final HttpServletResponse [[replies]] , final String [[bachelors]] , String [[biochemical]] , final int [[antenna]] ) { if ( ( [[biochemical]] == null ) && ( [[bachelors]] != null ) ) { String extension = FileNameUtil . getExtension ( [[bachelors]] ) ; [[biochemical]] = MimeTypes . getMimeType ( extension ) ; } if ( [[biochemical]] != null ) { [[replies]] . setContentType ( [[biochemical]] ) ; } if ( [[antenna]] >= 0 ) { [[replies]] . setContentLength ( [[antenna]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 800 ---------------------------------------------
Calls all destroy methods. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[batu]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Invokes all registered init methods. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[markoff]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the body of a JSP fragment. --> Rotation the specified number of the specified number of the specified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified number of thespecified --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[rotary]] ( final JspFragment [[formations]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[formations]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 803 ---------------------------------------------
Copies all parameters from the servlet request to the given attributes.@param servletRequest the servlet request@param treatEmptyParamsAsNull the treat empty parameters as null@param ignoreEmptyRequestParams the ignore empty request parameters as null --> Diese une fichier une fichier@param treatEmptyParamsAsNull@param ignoreEmptyRequestParams --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[lays]] ( final HttpServletRequest [[buttercups]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[delightful]] = [[buttercups]] . getParameterNames ( ) ; while ( [[delightful]] . hasMoreElements ( ) ) { String paramName = ( String ) [[delightful]] . nextElement ( ) ; if ( [[buttercups]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[buttercups]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[buttercups]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 804 ---------------------------------------------
Renders the body to a string.@param body the body to render.@return the rendered body.@throws JspException if the body cannot be rendered. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[ultimatums]] ( final JspFragment [[physically]] ) throws JspException { char [ ] [[accomplishment]] = renderBody ( [[physically]] ) ; return new String ( [[accomplishment]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 805 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 174 / 613 / 18 / 805:  80%|████████  | 805/1000 [4:00:29<58:15, 17.92s/it][Succeeded / Failed / Skipped / Total] 174 / 613 / 18 / 805:  81%|████████  | 806/1000 [4:00:34<57:54, 17.91s/it][Succeeded / Failed / Skipped / Total] 174 / 614 / 18 / 806:  81%|████████  | 806/1000 [4:00:34<57:54, 17.91s/it][Succeeded / Failed / Skipped / Total] 174 / 614 / 18 / 806:  81%|████████  | 807/1000 [4:01:00<57:38, 17.92s/it][Succeeded / Failed / Skipped / Total] 174 / 615 / 18 / 807:  81%|████████  | 807/1000 [4:01:00<57:38, 17.92s/it][Succeeded / Failed / Skipped / Total] 174 / 615 / 18 / 807:  81%|████████  | 808/1000 [4:01:04<57:17, 17.90s/it][Succeeded / Failed / Skipped / Total] 174 / 616 / 18 / 808:  81%|████████  | 808/1000 [4:01:04<57:17, 17.90s/it][Succeeded / Failed / Skipped / Total] 174 / 616 / 18 / 808:  81%|████████  | 809/1000 [4:01:37<57:02, 17.92s/it][Succeeded / Failed / Skipped / Total] 175 / 616 / 18 / 809:  81%|████████  | 809/1000 [4:01:37<57:02, 17.92s/it][Succeeded / Failed / Skipped / Total] 175 / 616 / 18 / 809:  81%|████████  | 810/1000 [4:02:12<56:48, 17.94s/it][Succeeded / Failed / Skipped / Total] 176 / 616 / 18 / 810:  81%|████████  | 810/1000 [4:02:12<56:48, 17.94s/it][Succeeded / Failed / Skipped / Total] 176 / 616 / 18 / 810:  81%|████████  | 811/1000 [4:02:16<56:27, 17.92s/it][Succeeded / Failed / Skipped / Total] 176 / 617 / 18 / 811:  81%|████████  | 811/1000 [4:02:16<56:27, 17.92s/it][Succeeded / Failed / Skipped / Total] 176 / 617 / 18 / 811:  81%|████████  | 812/1000 [4:03:31<56:22, 17.99s/it][Succeeded / Failed / Skipped / Total] 176 / 618 / 18 / 812:  81%|████████  | 812/1000 [4:03:31<56:22, 17.99s/it][Succeeded / Failed / Skipped / Total] 176 / 618 / 18 / 812:  81%|████████▏ | 813/1000 [4:04:46<56:17, 18.06s/it]Puts a value into the map.@param profile the profile name@param map the map@param key the key@param value the value --> Delivers a message to all registered providers. --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[deliver]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new bean instance. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[pernicious]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[lucian]] = beanDefinition . ctor . references . length ; Object [ ] [[jitsu]] = new Object [ [[lucian]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Inject parameters.@param paramManager the param manager@param implicitParamInjection the implicit param injection --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[habiba]] ( final ParamManager paramManager , final boolean [[eggheads]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[eggheads]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Adds the specified header value. --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String [[value]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[value]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String [[values]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[values]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[values]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 809 ---------------------------------------------
Resolve the macros in the specified profiles. --> Returns a string representation of the specified sheepshead@param value sheepshead@param profiles profiles@return --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[sheepshead]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 810 ---------------------------------------------
Adds a base property.@param key the key@param value the value@param append the append --> Convenience method to create a new Reactortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortortort --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String [[value]] , final boolean append ) { put ( null , baseProperties , [[key]] , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[renovation]] ( final String [[elemental]] , final String [[appreciate]] , final boolean append ) { put ( null , baseProperties , [[elemental]] , [[appreciate]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 811 ---------------------------------------------
Rewrites the given action path. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String [[httpMethod]] ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[reapply]] ( final HttpServletRequest [[slighted]] , final String [[hino]] , final String [[rath]] ) { return [[hino]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 812 ---------------------------------------------
Retrieve a profile property.@param profile the profile name@param key the key@return the property or <code>null</code> --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[scrounger]] ( final String [[portrayal]] , final String key ) { final Map < String , PropsEntry > [[coptic]] = profileProperties . get ( [[portrayal]] ) ; if ( [[coptic]] == null ) { return null ; } return [[coptic]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 813 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 619 / 18 / 813:  81%|████████▏ | 813/1000 [4:04:46<56:17, 18.06s/it][Succeeded / Failed / Skipped / Total] 176 / 619 / 18 / 813:  81%|████████▏ | 814/1000 [4:05:27<56:05, 18.09s/it][Succeeded / Failed / Skipped / Total] 176 / 620 / 18 / 814:  81%|████████▏ | 814/1000 [4:05:27<56:05, 18.09s/it][Succeeded / Failed / Skipped / Total] 176 / 620 / 18 / 814:  82%|████████▏ | 815/1000 [4:05:54<55:49, 18.10s/it][Succeeded / Failed / Skipped / Total] 176 / 621 / 18 / 815:  82%|████████▏ | 815/1000 [4:05:54<55:49, 18.10s/it][Succeeded / Failed / Skipped / Total] 176 / 621 / 18 / 815:  82%|████████▏ | 816/1000 [4:06:28<55:34, 18.12s/it][Succeeded / Failed / Skipped / Total] 176 / 622 / 18 / 816:  82%|████████▏ | 816/1000 [4:06:28<55:34, 18.12s/it][Succeeded / Failed / Skipped / Total] 176 / 622 / 18 / 816:  82%|████████▏ | 817/1000 [4:06:54<55:18, 18.13s/it][Succeeded / Failed / Skipped / Total] 176 / 623 / 18 / 817:  82%|████████▏ | 817/1000 [4:06:54<55:18, 18.13s/it][Succeeded / Failed / Skipped / Total] 176 / 623 / 18 / 817:  82%|████████▏ | 818/1000 [4:07:17<55:01, 18.14s/it][Succeeded / Failed / Skipped / Total] 176 / 624 / 18 / 818:  82%|████████▏ | 818/1000 [4:07:17<55:01, 18.14s/it][Succeeded / Failed / Skipped / Total] 176 / 624 / 18 / 818:  82%|████████▏ | 819/1000 [4:08:22<54:53, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 625 / 18 / 819:  82%|████████▏ | 819/1000 [4:08:22<54:53, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 625 / 18 / 819:  82%|████████▏ | 820/1000 [4:08:57<54:38, 18.22s/it]Prepares a list of parameters.@param paramValues The list of parameters.@param treatEmptyParamsAsNull Whether or not to ignore empty parameters.@param ignoreEmptyRequestParams Whether or not to ignore empty request parameters.@return The list of parameters. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean [[treatEmptyParamsAsNull]] , final boolean [[ignoreEmptyRequestParams]] ) { if ( [[treatEmptyParamsAsNull]] || [[ignoreEmptyRequestParams]] ) { int [[emptyCount]] = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String [[paramValue]] = paramValues [ i ] ; if ( [[paramValue]] == null ) { [[emptyCount]] ++ ; continue ; } if ( [[paramValue]] . length ( ) == 0 ) { [[emptyCount]] ++ ; if ( [[treatEmptyParamsAsNull]] ) { [[paramValue]] = null ; } } paramValues [ i ] = [[paramValue]] ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( [[emptyCount]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[catholicism]] ( final String [ ] paramValues , final boolean [[primeval]] , final boolean [[processions]] ) { if ( [[primeval]] || [[processions]] ) { int [[negotiates]] = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String [[flakey]] = paramValues [ i ] ; if ( [[flakey]] == null ) { [[negotiates]] ++ ; continue ; } if ( [[flakey]] . length ( ) == 0 ) { [[negotiates]] ++ ; if ( [[primeval]] ) { [[flakey]] = null ; } } paramValues [ i ] = [[flakey]] ; } if ( ( [[processions]] ) && ( [[negotiates]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 814 ---------------------------------------------
Extracts a mapping from a target map.@param target the target map@param profiles the profiles@param wildcardPatterns the wildcard patterns@param prefix the prefix@return the mapping --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[reclaimed]] ( Map [[aiming]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[aiming]] == null ) { [[aiming]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 815 ---------------------------------------------
Converts an array of bytes into a stream of words. --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] [[offp]] ) { int i ; int word = 0 ; int off = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[offp]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[satisfactory]] ( byte [ ] data , int [ ] [[repudiated]] ) { int i ; int word = 0 ; int off = [[repudiated]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[repudiated]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Put a profile property.@param key the key@param value the value@param profile the profile@param append the append --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String [[value]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[three]] ( final String key , final String [[evaluate]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[evaluate]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all bytes from the input stream to the output stream.@param out the output stream@return the number of bytes copied --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[disarm]] ( final OutputStream [[moreover]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[moreover]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Resolves the action configuration for the given action annotation.@param annotationValues the action annotation values.@return the action configuration. --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues [[boredom]] ) { final Class < ? extends Annotation > [[chumley]] ; if ( [[boredom]] == null ) { [[chumley]] = Action . class ; } else { [[chumley]] = [[boredom]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[chumley]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 819 ---------------------------------------------
Detect and register an action alias.@param annotationValues the action annotation values@param actionDefinition the action definition --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[baltic]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 820 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 626 / 18 / 820:  82%|████████▏ | 820/1000 [4:08:57<54:38, 18.22s/it][Succeeded / Failed / Skipped / Total] 176 / 626 / 18 / 820:  82%|████████▏ | 821/1000 [4:09:19<54:21, 18.22s/it][Succeeded / Failed / Skipped / Total] 176 / 627 / 18 / 821:  82%|████████▏ | 821/1000 [4:09:19<54:21, 18.22s/it][Succeeded / Failed / Skipped / Total] 176 / 627 / 18 / 821:  82%|████████▏ | 822/1000 [4:09:31<54:02, 18.21s/it][Succeeded / Failed / Skipped / Total] 176 / 628 / 18 / 822:  82%|████████▏ | 822/1000 [4:09:31<54:02, 18.21s/it][Succeeded / Failed / Skipped / Total] 176 / 628 / 18 / 822:  82%|████████▏ | 823/1000 [4:09:40<53:41, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 629 / 18 / 823:  82%|████████▏ | 823/1000 [4:09:40<53:41, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 629 / 18 / 823:  82%|████████▏ | 824/1000 [4:09:40<53:19, 18.18s/it][Succeeded / Failed / Skipped / Total] 176 / 629 / 19 / 824:  82%|████████▏ | 824/1000 [4:09:40<53:19, 18.18s/it][Succeeded / Failed / Skipped / Total] 176 / 629 / 19 / 824:  82%|████████▎ | 825/1000 [4:09:42<52:58, 18.16s/it][Succeeded / Failed / Skipped / Total] 176 / 630 / 19 / 825:  82%|████████▎ | 825/1000 [4:09:42<52:58, 18.16s/it][Succeeded / Failed / Skipped / Total] 176 / 630 / 19 / 825:  83%|████████▎ | 826/1000 [4:09:56<52:39, 18.16s/it]Checks to see if the given hashed string is valid. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[siegel]] ( String [[blas]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[blas]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 821 ---------------------------------------------
Copies all bytes from the input stream to the output stream. --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream [[out]] , final int [[maxBytes]] ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } [[out]] . write ( [[b]] ) ; [[count]] ++ ; if ( [[count]] == [[maxBytes]] ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream [[outwardly]] , final int [[factions]] ) throws IOException { int [[indictments]] = 0 ; while ( "[[Candid]]" == "[[Candid]]" ) { byte [[th]] = readByte ( ) ; if ( isBoundary ( [[th]] ) ) { break ; } [[outwardly]] . write ( [[th]] ) ; [[indictments]] ++ ; if ( [[indictments]] == [[factions]] ) { return [[indictments]] ; } } return [[indictments]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 822 ---------------------------------------------
Hashes the given password with the given salt. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String [[salt]] ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[nonna]] ( String [[guesser]] , String [[seawater]] ) { BCrypt [[four]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[seawater]] . charAt ( 0 ) != ' ' || [[seawater]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[seawater]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[seawater]] . charAt ( 2 ) ; if ( minor != ' ' || [[seawater]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 823 ---------------------------------------------
Read action filters. --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[result]] = filteredBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[munson]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[reason]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[reason]] = filteredBy . value ( ) ; if ( [[reason]] . length == 0 ) { [[reason]] = null ; } } return [[reason]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 824 ---------------------------------------------
Sets the last modified time of this request. --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 825 ---------------------------------------------
Parses an action definition.@param actionClass the action class@param actionMethod the action method@param actionDefinition the action definition --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition [[actionDefinition]] ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[morte]] , ActionDefinition [[charlatans]] ) { final ActionAnnotationValues [[duress]] = detectActionAnnotationValues ( [[morte]] ) ; final ActionConfig [[rests]] = resolveActionConfig ( [[duress]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 826 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 631 / 19 / 826:  83%|████████▎ | 826/1000 [4:09:57<52:39, 18.16s/it][Succeeded / Failed / Skipped / Total] 176 / 631 / 19 / 826:  83%|████████▎ | 827/1000 [4:10:14<52:20, 18.16s/it][Succeeded / Failed / Skipped / Total] 176 / 632 / 19 / 827:  83%|████████▎ | 827/1000 [4:10:14<52:20, 18.16s/it][Succeeded / Failed / Skipped / Total] 176 / 632 / 19 / 827:  83%|████████▎ | 828/1000 [4:10:57<52:07, 18.19s/it][Succeeded / Failed / Skipped / Total] 176 / 633 / 19 / 828:  83%|████████▎ | 828/1000 [4:10:57<52:07, 18.19s/it][Succeeded / Failed / Skipped / Total] 176 / 633 / 19 / 828:  83%|████████▎ | 829/1000 [4:11:03<51:47, 18.17s/it][Succeeded / Failed / Skipped / Total] 176 / 634 / 19 / 829:  83%|████████▎ | 829/1000 [4:11:03<51:47, 18.17s/it][Succeeded / Failed / Skipped / Total] 176 / 634 / 19 / 829:  83%|████████▎ | 830/1000 [4:11:56<51:36, 18.21s/it][Succeeded / Failed / Skipped / Total] 176 / 635 / 19 / 830:  83%|████████▎ | 830/1000 [4:11:56<51:36, 18.21s/it][Succeeded / Failed / Skipped / Total] 176 / 635 / 19 / 830:  83%|████████▎ | 831/1000 [4:12:01<51:15, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 636 / 19 / 831:  83%|████████▎ | 831/1000 [4:12:01<51:15, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 636 / 19 / 831:  83%|████████▎ | 832/1000 [4:12:14<50:55, 18.19s/it][Succeeded / Failed / Skipped / Total] 176 / 637 / 19 / 832:  83%|████████▎ | 832/1000 [4:12:14<50:55, 18.19s/it][Succeeded / Failed / Skipped / Total] 176 / 637 / 19 / 832:  83%|████████▎ | 833/1000 [4:12:40<50:39, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 638 / 19 / 833:  83%|████████▎ | 833/1000 [4:12:40<50:39, 18.20s/it][Succeeded / Failed / Skipped / Total] 176 / 638 / 19 / 833:  83%|████████▎ | 834/1000 [4:12:41<50:17, 18.18s/it][Succeeded / Failed / Skipped / Total] 176 / 639 / 19 / 834:  83%|████████▎ | 834/1000 [4:12:41<50:17, 18.18s/it][Succeeded / Failed / Skipped / Total] 176 / 639 / 19 / 834:  84%|████████▎ | 835/1000 [4:13:03<50:00, 18.18s/it]Read interceptors.@param actionClassOrMethod the action class or method@return the interceptors --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[stuffing]] ( final AnnotatedElement [[monsters]] ) { Class < ? extends ActionInterceptor > [ ] [[accomplishment]] = null ; InterceptedBy interceptedBy = [[monsters]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[accomplishment]] = interceptedBy . value ( ) ; if ( [[accomplishment]] . length == 0 ) { [[accomplishment]] = null ; } } return [[accomplishment]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 827 ---------------------------------------------
Reads the path to the action package. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package [[actionPackage]] = actionClass . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[wigged]] ( final Class actionClass ) { Package [[onscreen]] = actionClass . getPackage ( ) ; final String actionPackageName = [[onscreen]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 828 ---------------------------------------------
Applies an advice to the specified target class.@param < T> the type parameter@param targetClass the target class@return the target instance --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[q]] > [[q]] applyAdvice ( final Class < [[q]] > targetClass ) { Class [[restructured]] = cache . get ( targetClass ) ; if ( [[restructured]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 829 ---------------------------------------------
Parses the action annotation values and returns the alias.@param annotationValues the action annotation values.@return the alias. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[hieroglyphics]] ( final ActionAnnotationValues [[hostetler]] ) { String [[false]] = null ; if ( [[hostetler]] != null ) { [[false]] = [[hostetler]] . alias ( ) ; } return [[false]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 830 ---------------------------------------------
Injects the target object into the proxy. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object [[target]] ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[crumple]] ( final Object [[vicarious]] , final Object [[strives]] ) { Class [[speke]] = [[vicarious]] . getClass ( ) ; try { Field field = [[speke]] . getField ( "$___target$0" ) ; field . set ( [[vicarious]] , [[strives]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 831 ---------------------------------------------
Read method action path.@param methodName the method name@param annotationValues the annotation values@param actionConfig the action config@return the string --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[relocate]] ( final String [[squandering]] , final ActionAnnotationValues annotationValues , final ActionConfig [[hallucinogen]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation.@param descriptor the annotation descriptor@param visible true if the annotation should be visible@return the visitor --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String [[bruto]] , final boolean [[cannot]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[bruto]] , [[cannot]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Lookup the type data for the specified type.@param type the type@return the type data --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[undoing]] ( final Class [[categories]] ) { TypeData typeData = typeDataMap . get ( [[categories]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[categories]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[categories]] ) ; typeDataMap . put ( [[categories]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves a JSON name.@param realName the name to resolve.@return the resolved name. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[monsters]] ( final String [[prophet]] ) { if ( realNames == null ) { return [[prophet]] ; } int [[magnification]] = ArraysUtil . indexOf ( realNames , [[prophet]] ) ; if ( [[magnification]] == - 1 ) { return [[prophet]] ; } return jsonNames [ [[magnification]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
[Succeeded / Failed / Skipped / Total] 177 / 639 / 19 / 835:  84%|████████▎ | 835/1000 [4:13:03<50:00, 18.18s/it][Succeeded / Failed / Skipped / Total] 177 / 639 / 19 / 835:  84%|████████▎ | 836/1000 [4:13:05<49:38, 18.16s/it][Succeeded / Failed / Skipped / Total] 177 / 640 / 19 / 836:  84%|████████▎ | 836/1000 [4:13:05<49:38, 18.16s/it][Succeeded / Failed / Skipped / Total] 177 / 640 / 19 / 836:  84%|████████▎ | 837/1000 [4:13:08<49:17, 18.15s/it][Succeeded / Failed / Skipped / Total] 177 / 641 / 19 / 837:  84%|████████▎ | 837/1000 [4:13:08<49:17, 18.15s/it][Succeeded / Failed / Skipped / Total] 177 / 641 / 19 / 837:  84%|████████▍ | 838/1000 [4:13:10<48:56, 18.13s/it][Succeeded / Failed / Skipped / Total] 177 / 642 / 19 / 838:  84%|████████▍ | 838/1000 [4:13:10<48:56, 18.13s/it][Succeeded / Failed / Skipped / Total] 177 / 642 / 19 / 838:  84%|████████▍ | 839/1000 [4:13:38<48:40, 18.14s/it][Succeeded / Failed / Skipped / Total] 178 / 642 / 19 / 839:  84%|████████▍ | 839/1000 [4:13:38<48:40, 18.14s/it][Succeeded / Failed / Skipped / Total] 178 / 642 / 19 / 839:  84%|████████▍ | 840/1000 [4:13:41<48:19, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 642 / 19 / 840:  84%|████████▍ | 840/1000 [4:13:41<48:19, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 642 / 19 / 840:  84%|████████▍ | 841/1000 [4:13:50<47:59, 18.11s/it][Succeeded / Failed / Skipped / Total] 179 / 643 / 19 / 841:  84%|████████▍ | 841/1000 [4:13:50<47:59, 18.11s/it][Succeeded / Failed / Skipped / Total] 179 / 643 / 19 / 841:  84%|████████▍ | 842/1000 [4:14:15<47:42, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 644 / 19 / 842:  84%|████████▍ | 842/1000 [4:14:15<47:42, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 644 / 19 / 842:  84%|████████▍ | 843/1000 [4:14:31<47:24, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 645 / 19 / 843:  84%|████████▍ | 843/1000 [4:14:31<47:24, 18.12s/it][Succeeded / Failed / Skipped / Total] 179 / 645 / 19 / 843:  84%|████████▍ | 844/1000 [4:15:00<47:08, 18.13s/it]--------------------------------------------- Result 835 ---------------------------------------------
Resolves the name of the given json name. --> Looks to see if the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the names of the --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[brokenhearted]] ( final String [[refuses]] ) { if ( jsonNames == null ) { return [[refuses]] ; } int [[bookworm]] = ArraysUtil . indexOf ( jsonNames , [[refuses]] ) ; if ( [[bookworm]] == - 1 ) { return [[refuses]] ; } return realNames [ [[bookworm]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 836 ---------------------------------------------
Lookup the type data for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[caring]] ( final Class [[writes]] ) { TypeData typeData = typeDataMap . get ( [[writes]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[writes]] ) ; typeDataMap . put ( [[writes]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
Finds the subtype data for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[gazillion]] ( final Class [[category]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[category]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Gets the contents of a file. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[externally]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Sets the major version and class name. --> Create a dachan@param majorVersion@param className@return --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[dacha]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 840 ---------------------------------------------
Puts a constant pool into the constant pool. --> SILKY SILKY --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[silky]] ( final ByteVector [[takings]] ) { [[takings]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 841 ---------------------------------------------
Put bootstrap methods.@param output the output --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[chloroform]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 842 ---------------------------------------------
Resolve a JSON name for the given type.@param type the type@param name the name@return the name --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class [[type]] , final String [[name]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class [[typewritten]] , final String [[numbers]] ) { TypeData typeData = lookupTypeData ( [[typewritten]] ) ; return typeData . resolveJsonName ( [[numbers]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 843 ---------------------------------------------
Copies bootstrap methods from the specified class reader to the specified character buffer. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[decathlon]] ( final ClassReader [[abstention]] , final char [ ] [[haring]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 844 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 646 / 19 / 844:  84%|████████▍ | 844/1000 [4:15:00<47:08, 18.13s/it][Succeeded / Failed / Skipped / Total] 179 / 646 / 19 / 844:  84%|████████▍ | 845/1000 [4:15:43<46:54, 18.16s/it][Succeeded / Failed / Skipped / Total] 179 / 647 / 19 / 845:  84%|████████▍ | 845/1000 [4:15:43<46:54, 18.16s/it][Succeeded / Failed / Skipped / Total] 179 / 647 / 19 / 845:  85%|████████▍ | 846/1000 [4:17:15<46:49, 18.25s/it][Succeeded / Failed / Skipped / Total] 179 / 648 / 19 / 846:  85%|████████▍ | 846/1000 [4:17:16<46:49, 18.25s/it][Succeeded / Failed / Skipped / Total] 179 / 648 / 19 / 846:  85%|████████▍ | 847/1000 [4:17:29<46:30, 18.24s/it][Succeeded / Failed / Skipped / Total] 179 / 649 / 19 / 847:  85%|████████▍ | 847/1000 [4:17:29<46:30, 18.24s/it][Succeeded / Failed / Skipped / Total] 179 / 649 / 19 / 847:  85%|████████▍ | 848/1000 [4:18:20<46:18, 18.28s/it][Succeeded / Failed / Skipped / Total] 179 / 650 / 19 / 848:  85%|████████▍ | 848/1000 [4:18:20<46:18, 18.28s/it][Succeeded / Failed / Skipped / Total] 179 / 650 / 19 / 848:  85%|████████▍ | 849/1000 [4:18:33<45:59, 18.27s/it][Succeeded / Failed / Skipped / Total] 179 / 651 / 19 / 849:  85%|████████▍ | 849/1000 [4:18:33<45:59, 18.27s/it][Succeeded / Failed / Skipped / Total] 179 / 651 / 19 / 849:  85%|████████▌ | 850/1000 [4:19:03<45:42, 18.29s/it][Succeeded / Failed / Skipped / Total] 179 / 652 / 19 / 850:  85%|████████▌ | 850/1000 [4:19:03<45:42, 18.29s/it][Succeeded / Failed / Skipped / Total] 179 / 652 / 19 / 850:  85%|████████▌ | 851/1000 [4:19:18<45:24, 18.28s/it]Resolve the real name for the specified type. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[underneath]] ( final Class [[man]] , final String [[kk]] ) { TypeData [[bulgarian]] = lookupTypeData ( [[man]] ) ; return [[bulgarian]] . resolveRealName ( [[kk]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a constant field reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[redeployed]] ( final String owner , final String [[emi]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[emi]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant integer or float entry. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[crashers]] ( final int [[allusion]] , final int tag , final int value ) { add ( new Entry ( [[allusion]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Adds an integer or float constant. --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[coors]] ( final int tag , final int [[prominence]] ) { int hashCode = hash ( tag , [[prominence]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[prominence]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[prominence]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[prominence]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a new entry to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[babysitters]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a reference to a constant field. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[lifeguards]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant long or double. --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[squeal]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
[Succeeded / Failed / Skipped / Total] 179 / 653 / 19 / 851:  85%|████████▌ | 851/1000 [4:19:18<45:24, 18.28s/it][Succeeded / Failed / Skipped / Total] 179 / 653 / 19 / 851:  85%|████████▌ | 852/1000 [4:19:37<45:06, 18.28s/it][Succeeded / Failed / Skipped / Total] 179 / 654 / 19 / 852:  85%|████████▌ | 852/1000 [4:19:37<45:06, 18.28s/it][Succeeded / Failed / Skipped / Total] 179 / 654 / 19 / 852:  85%|████████▌ | 853/1000 [4:20:10<44:50, 18.30s/it][Succeeded / Failed / Skipped / Total] 179 / 655 / 19 / 853:  85%|████████▌ | 853/1000 [4:20:10<44:50, 18.30s/it][Succeeded / Failed / Skipped / Total] 179 / 655 / 19 / 853:  85%|████████▌ | 854/1000 [4:20:31<44:32, 18.30s/it][Succeeded / Failed / Skipped / Total] 179 / 656 / 19 / 854:  85%|████████▌ | 854/1000 [4:20:31<44:32, 18.30s/it][Succeeded / Failed / Skipped / Total] 179 / 656 / 19 / 854:  86%|████████▌ | 855/1000 [4:21:02<44:16, 18.32s/it][Succeeded / Failed / Skipped / Total] 179 / 657 / 19 / 855:  86%|████████▌ | 855/1000 [4:21:02<44:16, 18.32s/it][Succeeded / Failed / Skipped / Total] 179 / 657 / 19 / 855:  86%|████████▌ | 856/1000 [4:21:19<43:57, 18.32s/it][Succeeded / Failed / Skipped / Total] 179 / 658 / 19 / 856:  86%|████████▌ | 856/1000 [4:21:19<43:57, 18.32s/it][Succeeded / Failed / Skipped / Total] 179 / 658 / 19 / 856:  86%|████████▌ | 857/1000 [4:24:34<44:08, 18.52s/it][Succeeded / Failed / Skipped / Total] 179 / 659 / 19 / 857:  86%|████████▌ | 857/1000 [4:24:34<44:08, 18.52s/it][Succeeded / Failed / Skipped / Total] 179 / 659 / 19 / 857:  86%|████████▌ | 858/1000 [4:24:55<43:50, 18.53s/it]--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant long or double entry. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int tag , final long value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[unload]] ( final int [[indications]] , final int tag , final long value ) { add ( new Entry ( [[indications]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant method reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[processions]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[sssh]] ( final int [[indications]] , final String value ) { add ( new Entry ( [[indications]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[assholes]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type. --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name and type. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , [[descriptor]] , hash ( tag , [[name]] , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[murderess]] ( final int index , final String [[surnames]] , final String [[souvenirs]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[surnames]] , [[souvenirs]] , hash ( tag , [[surnames]] , [[souvenirs]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant method handle. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[elses]] ( final int [[jager]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 660 / 19 / 858:  86%|████████▌ | 858/1000 [4:24:55<43:50, 18.53s/it][Succeeded / Failed / Skipped / Total] 179 / 660 / 19 / 858:  86%|████████▌ | 859/1000 [4:25:07<43:31, 18.52s/it][Succeeded / Failed / Skipped / Total] 179 / 661 / 19 / 859:  86%|████████▌ | 859/1000 [4:25:07<43:31, 18.52s/it][Succeeded / Failed / Skipped / Total] 179 / 661 / 19 / 859:  86%|████████▌ | 860/1000 [4:25:08<43:09, 18.50s/it][Succeeded / Failed / Skipped / Total] 179 / 662 / 19 / 860:  86%|████████▌ | 860/1000 [4:25:08<43:09, 18.50s/it][Succeeded / Failed / Skipped / Total] 179 / 662 / 19 / 860:  86%|████████▌ | 861/1000 [4:26:09<42:58, 18.55s/it][Succeeded / Failed / Skipped / Total] 179 / 663 / 19 / 861:  86%|████████▌ | 861/1000 [4:26:09<42:58, 18.55s/it][Succeeded / Failed / Skipped / Total] 179 / 663 / 19 / 861:  86%|████████▌ | 862/1000 [4:26:23<42:38, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 664 / 19 / 862:  86%|████████▌ | 862/1000 [4:26:23<42:38, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 664 / 19 / 862:  86%|████████▋ | 863/1000 [4:26:57<42:22, 18.56s/it]Adds a constant dynamically. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[commandos]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[combatants]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[combatants]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant method handle. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[coronado]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant invoke dynamic reference. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[destroying]] ( final String [[emi]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[emi]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant dynamic or invoke dynamic reference. --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int [[tag]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( [[tag]] , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[pinprick]] ( final int [[marca]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[borin]] = hash ( [[marca]] , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[borin]] ) ; while ( entry != null ) { if ( entry . tag == [[marca]] && entry . hashCode == [[borin]] && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[marca]] , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[marca]] , null , name , descriptor , bootstrapMethodIndex , [[borin]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant to the constant pool. --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[eal]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 665 / 19 / 863:  86%|████████▋ | 863/1000 [4:26:57<42:22, 18.56s/it][Succeeded / Failed / Skipped / Total] 179 / 665 / 19 / 863:  86%|████████▋ | 864/1000 [4:27:02<42:02, 18.55s/it][Succeeded / Failed / Skipped / Total] 179 / 666 / 19 / 864:  86%|████████▋ | 864/1000 [4:27:02<42:02, 18.55s/it][Succeeded / Failed / Skipped / Total] 179 / 666 / 19 / 864:  86%|████████▋ | 865/1000 [4:27:10<41:41, 18.53s/it][Succeeded / Failed / Skipped / Total] 179 / 667 / 19 / 865:  86%|████████▋ | 865/1000 [4:27:10<41:41, 18.53s/it][Succeeded / Failed / Skipped / Total] 179 / 667 / 19 / 865:  87%|████████▋ | 866/1000 [4:27:31<41:23, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 668 / 19 / 866:  87%|████████▋ | 866/1000 [4:27:31<41:23, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 668 / 19 / 866:  87%|████████▋ | 867/1000 [4:27:50<41:05, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 669 / 19 / 867:  87%|████████▋ | 867/1000 [4:27:50<41:05, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 669 / 19 / 867:  87%|████████▋ | 868/1000 [4:28:11<40:47, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 670 / 19 / 868:  87%|████████▋ | 868/1000 [4:28:11<40:47, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 670 / 19 / 868:  87%|████████▋ | 869/1000 [4:28:33<40:29, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 671 / 19 / 869:  87%|████████▋ | 869/1000 [4:28:33<40:29, 18.54s/it][Succeeded / Failed / Skipped / Total] 179 / 671 / 19 / 869:  87%|████████▋ | 870/1000 [4:28:44<40:09, 18.53s/it][Succeeded / Failed / Skipped / Total] 179 / 672 / 19 / 870:  87%|████████▋ | 870/1000 [4:28:44<40:09, 18.53s/it][Succeeded / Failed / Skipped / Total] 179 / 672 / 19 / 870:  87%|████████▋ | 871/1000 [4:29:00<39:50, 18.53s/it][Succeeded / Failed / Skipped / Total] 180 / 672 / 19 / 871:  87%|████████▋ | 871/1000 [4:29:00<39:50, 18.53s/it][Succeeded / Failed / Skipped / Total] 180 / 672 / 19 / 871:  87%|████████▋ | 872/1000 [4:29:05<39:30, 18.52s/it]Adds a type to the specified table.@param typeTableIndex1 The index of the first type in the table.@param typeTableIndex2 The index of the second type in the table. --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[cannibalistic]] ( final int [[acoustical]] , final int [[centers]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant utf8 reference. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[crashers]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Removes all entries from this map. --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[clearer]] ( ) { for ( int [[gonna]] = 0 ; [[gonna]] < entries . length ; [[gonna]] ++ ) { entries [ [[gonna]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a bootstrap method to this class. --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[karpov]] ( final Handle [[arrests]] , final Object ... [[abomination]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a constant dynamic or invoke dynamic reference. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; add ( new Entry ( index , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[eczema]] ( final int tag , final int index , final String name , final String descriptor , final int [[seductive]] ) { int hashCode = hash ( tag , name , descriptor , [[seductive]] ) ; add ( new Entry ( index , tag , null , name , descriptor , [[seductive]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 868 ---------------------------------------------
Returns a list of all entries in this queue. --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[enter]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash of the given name. --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int [[h]] = 0 ; for ( int [[i]] = [[name]] . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = [[name]] . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[herb]] ( final String [[aka]] ) { int [[estates]] = 0 ; for ( int [[le]] = [[aka]] . length ( ) - 1 ; [[le]] >= 0 ; [[le]] -- ) { char c = [[aka]] . charAt ( [[le]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[estates]] = 31 * [[estates]] + c ; } if ( [[estates]] > 0 ) { return [[estates]] ; } if ( [[estates]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[estates]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
Grows the buffer.@param minCapacity the min capacity --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[heightened]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 871 ---------------------------------------------
Create the first chain delegate. --> Civvy utility method --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[civvy]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 872 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 180 / 673 / 19 / 872:  87%|████████▋ | 872/1000 [4:29:05<39:30, 18.52s/it][Succeeded / Failed / Skipped / Total] 180 / 673 / 19 / 872:  87%|████████▋ | 873/1000 [4:29:24<39:11, 18.52s/it][Succeeded / Failed / Skipped / Total] 180 / 674 / 19 / 873:  87%|████████▋ | 873/1000 [4:29:24<39:11, 18.52s/it][Succeeded / Failed / Skipped / Total] 180 / 674 / 19 / 873:  87%|████████▋ | 874/1000 [4:29:46<38:53, 18.52s/it][Succeeded / Failed / Skipped / Total] 180 / 675 / 19 / 874:  87%|████████▋ | 874/1000 [4:29:46<38:53, 18.52s/it][Succeeded / Failed / Skipped / Total] 180 / 675 / 19 / 874:  88%|████████▊ | 875/1000 [4:29:56<38:33, 18.51s/it][Succeeded / Failed / Skipped / Total] 180 / 676 / 19 / 875:  88%|████████▊ | 875/1000 [4:29:56<38:33, 18.51s/it][Succeeded / Failed / Skipped / Total] 180 / 676 / 19 / 875:  88%|████████▊ | 876/1000 [4:30:17<38:15, 18.51s/it][Succeeded / Failed / Skipped / Total] 180 / 677 / 19 / 876:  88%|████████▊ | 876/1000 [4:30:17<38:15, 18.51s/it][Succeeded / Failed / Skipped / Total] 180 / 677 / 19 / 876:  88%|████████▊ | 877/1000 [4:31:00<38:00, 18.54s/it][Succeeded / Failed / Skipped / Total] 180 / 678 / 19 / 877:  88%|████████▊ | 877/1000 [4:31:00<38:00, 18.54s/it][Succeeded / Failed / Skipped / Total] 180 / 678 / 19 / 877:  88%|████████▊ | 878/1000 [4:31:10<37:40, 18.53s/it][Succeeded / Failed / Skipped / Total] 180 / 679 / 19 / 878:  88%|████████▊ | 878/1000 [4:31:10<37:40, 18.53s/it][Succeeded / Failed / Skipped / Total] 180 / 679 / 19 / 878:  88%|████████▊ | 879/1000 [4:31:14<37:20, 18.51s/it]Visit the end of the chain. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[battleships]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[homepage]] = 0 ; [[homepage]] < tmd . proxyData . length ; [[homepage]] ++ ) { tmd . selectCurrentProxy ( [[homepage]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 873 ---------------------------------------------
Returns an iterator over the elements of this map. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[ensuing]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[expectant]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[expectant]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[expectant]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 874 ---------------------------------------------
Creates the first chain delegate method.@param tmd the target method data --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[queuing]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 875 ---------------------------------------------
Parses the supplied string into a path. --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[hacky]] ( final String [[roads]] ) { return [[roads]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[roads]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 876 ---------------------------------------------
Pushes the specified character sequence onto this path. --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[stimulus]] ( final CharSequence [[region]] ) { _push ( [[region]] ) ; if ( altPath != null ) { altPath . push ( [[region]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 877 ---------------------------------------------
Returns a list of all values with the specified name. --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == [[h]] && eq ( [[name]] , [[e]] . key ) ) { [[values]] . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[papist]] ( final String [[nominate]] ) { LinkedList < V > [[assess]] = new LinkedList <> ( ) ; int [[estates]] = hash ( [[nominate]] ) ; int i = index ( [[estates]] ) ; MapEntry < V > [[patricia]] = entries [ i ] ; while ( [[patricia]] != null ) { if ( [[patricia]] . hash == [[estates]] && eq ( [[nominate]] , [[patricia]] . key ) ) { [[assess]] . addFirst ( [[patricia]] . getValue ( ) ) ; } [[patricia]] = [[patricia]] . next ; } return [[assess]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 878 ---------------------------------------------
Configures the servlet context. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[kelsey]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
[Succeeded / Failed / Skipped / Total] 180 / 680 / 19 / 879:  88%|████████▊ | 879/1000 [4:31:14<37:20, 18.51s/it][Succeeded / Failed / Skipped / Total] 180 / 680 / 19 / 879:  88%|████████▊ | 880/1000 [4:31:19<36:59, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 680 / 19 / 880:  88%|████████▊ | 880/1000 [4:31:19<36:59, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 680 / 19 / 880:  88%|████████▊ | 881/1000 [4:32:15<36:46, 18.54s/it][Succeeded / Failed / Skipped / Total] 181 / 681 / 19 / 881:  88%|████████▊ | 881/1000 [4:32:15<36:46, 18.54s/it][Succeeded / Failed / Skipped / Total] 181 / 682 / 19 / 882:  88%|████████▊ | 882/1000 [4:32:15<36:25, 18.52s/it][Succeeded / Failed / Skipped / Total] 181 / 682 / 19 / 882:  88%|████████▊ | 883/1000 [4:32:29<36:06, 18.52s/it][Succeeded / Failed / Skipped / Total] 181 / 683 / 19 / 883:  88%|████████▊ | 883/1000 [4:32:29<36:06, 18.52s/it][Succeeded / Failed / Skipped / Total] 181 / 683 / 19 / 883:  88%|████████▊ | 884/1000 [4:32:36<35:46, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 684 / 19 / 884:  88%|████████▊ | 884/1000 [4:32:36<35:46, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 684 / 19 / 884:  88%|████████▊ | 885/1000 [4:32:50<35:27, 18.50s/it]--------------------------------------------- Result 879 ---------------------------------------------
Creates an action runtime. --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[assassinations]] ( final ActionHandler actionHandler , final Class [[mit]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[mit]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[mit]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 880 ---------------------------------------------
Visits an annotation. --> Overrides the visitor to perform an over-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the-the --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean [[visible]] ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( [[desc]] , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[doughnut]] ( final String [[manacles]] , final boolean [[akin]] ) { AnnotationVisitor [[gabbing]] = methodVisitor . visitAnnotation ( [[manacles]] , [[akin]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 881 ---------------------------------------------
Returns all the field descriptors in this class. --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[queuing]] ( ) { if ( [[famiglia]] == null ) { FieldDescriptor [ ] [[famiglia]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[famiglia]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[famiglia]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[famiglia]] ; } return [[famiglia]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 882 ---------------------------------------------
Executes the specified method. --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Append the specified sequence to this buffer.@param csq The sequence to append.@param start The index of the first character in the sequence.@param end The index of the last character in the sequence.@return This buffer. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[csq]] , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { append ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[timin]] , final int [[debut]] , final int [[conclusion]] ) { for ( int i = [[debut]] ; i < [[conclusion]] ; i ++ ) { append ( [[timin]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 884 ---------------------------------------------
Puts all entries in the supplied map into this map. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[zerk]] ( final Map [[b]] ) { for ( Object o : [[b]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 885 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 685 / 19 / 885:  88%|████████▊ | 885/1000 [4:32:50<35:27, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 685 / 19 / 885:  89%|████████▊ | 886/1000 [4:33:13<35:09, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 686 / 19 / 886:  89%|████████▊ | 886/1000 [4:33:13<35:09, 18.50s/it][Succeeded / Failed / Skipped / Total] 181 / 686 / 19 / 886:  89%|████████▊ | 887/1000 [4:33:45<34:52, 18.52s/it][Succeeded / Failed / Skipped / Total] 181 / 687 / 19 / 887:  89%|████████▊ | 887/1000 [4:33:45<34:52, 18.52s/it][Succeeded / Failed / Skipped / Total] 181 / 687 / 19 / 887:  89%|████████▉ | 888/1000 [4:33:47<34:31, 18.50s/it][Succeeded / Failed / Skipped / Total] 182 / 687 / 19 / 888:  89%|████████▉ | 888/1000 [4:33:47<34:31, 18.50s/it][Succeeded / Failed / Skipped / Total] 182 / 687 / 19 / 888:  89%|████████▉ | 889/1000 [4:34:49<34:18, 18.55s/it][Succeeded / Failed / Skipped / Total] 182 / 688 / 19 / 889:  89%|████████▉ | 889/1000 [4:34:49<34:18, 18.55s/it][Succeeded / Failed / Skipped / Total] 182 / 688 / 19 / 889:  89%|████████▉ | 890/1000 [4:35:00<33:59, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 689 / 19 / 890:  89%|████████▉ | 890/1000 [4:35:00<33:59, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 689 / 19 / 890:  89%|████████▉ | 891/1000 [4:36:09<33:46, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 690 / 19 / 891:  89%|████████▉ | 891/1000 [4:36:09<33:46, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 690 / 19 / 891:  89%|████████▉ | 892/1000 [4:36:30<33:28, 18.60s/it]Converts a JtxTransactionMode to a DB mode.@param txMode the JtxTransactionMode to convert.@return the DB mode. --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[isolation]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[discrete]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[discrete]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[discrete]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[discrete]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[discrete]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[discrete]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[discrete]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[discrete]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 886 ---------------------------------------------
Append a new buffer to the end of the list.@param buffer the buffer to append.@return the new buffer. --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[snipers]] ( final Buffer [[stamps]] ) { if ( [[stamps]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Reads a property from the source object. --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor [[propertyDescriptor]] ) { Getter [[getter]] = [[propertyDescriptor]] . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[consists]] ( final Object [[pedigree]] , final PropertyDescriptor [[blinkers]] ) { Getter [[associative]] = [[blinkers]] . getGetter ( declared ) ; if ( [[associative]] != null ) { try { return [[associative]] . invokeGetter ( [[pedigree]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 888 ---------------------------------------------
Writes the response to the specified output stream.@param out the output stream to write to.@param progressListener the listener to notify.@throws IOException if an I/O error occurs. --> Chihuahua chihuahua --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[chihuahua]] ( final OutputStream [[departing]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
Writes to the specified output stream. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[disallowed]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 890 ---------------------------------------------
Gets the value associated with the supplied key.@param key the key@return the value associated with the supplied key, or null if there is no such key --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String [[essential]] ) { CharSequence [[sf]] = ( CharSequence ) map . get ( [[essential]] ) ; return [[sf]] == null ? null : [[sf]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Gets the value associated with the given key.@param key the key.@return the value associated with the given key. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[val]] = ( T ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[preferred]] = ( T ) map . get ( key ) ; if ( [[preferred]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[preferred]] ) ; } if ( [[preferred]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[preferred]] ) ; } return [[preferred]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 892 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 691 / 19 / 892:  89%|████████▉ | 892/1000 [4:36:30<33:28, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 691 / 19 / 892:  89%|████████▉ | 893/1000 [4:36:54<33:10, 18.61s/it][Succeeded / Failed / Skipped / Total] 182 / 692 / 19 / 893:  89%|████████▉ | 893/1000 [4:36:54<33:10, 18.61s/it][Succeeded / Failed / Skipped / Total] 182 / 692 / 19 / 893:  89%|████████▉ | 894/1000 [4:37:06<32:51, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 693 / 19 / 894:  89%|████████▉ | 894/1000 [4:37:06<32:51, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 693 / 19 / 894:  90%|████████▉ | 895/1000 [4:37:28<32:33, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 694 / 19 / 895:  90%|████████▉ | 895/1000 [4:37:28<32:33, 18.60s/it][Succeeded / Failed / Skipped / Total] 182 / 694 / 19 / 895:  90%|████████▉ | 896/1000 [4:37:34<32:13, 18.59s/it][Succeeded / Failed / Skipped / Total] 182 / 695 / 19 / 896:  90%|████████▉ | 896/1000 [4:37:34<32:13, 18.59s/it][Succeeded / Failed / Skipped / Total] 182 / 695 / 19 / 896:  90%|████████▉ | 897/1000 [4:37:40<31:53, 18.57s/it][Succeeded / Failed / Skipped / Total] 182 / 696 / 19 / 897:  90%|████████▉ | 897/1000 [4:37:40<31:53, 18.57s/it][Succeeded / Failed / Skipped / Total] 182 / 696 / 19 / 897:  90%|████████▉ | 898/1000 [4:37:51<31:33, 18.57s/it][Succeeded / Failed / Skipped / Total] 182 / 697 / 19 / 898:  90%|████████▉ | 898/1000 [4:37:51<31:33, 18.57s/it][Succeeded / Failed / Skipped / Total] 182 / 697 / 19 / 898:  90%|████████▉ | 899/1000 [4:38:09<31:15, 18.56s/it]Writes the data to the specified writer. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[previously]] ( final Writer writer ) throws IOException { for ( Object [[australia]] : list ) { if ( [[australia]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[australia]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[australia]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[australia]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 893 ---------------------------------------------
Retrieve a property as an Integer.@param key the key of the property to retrieve. May not be <code>null</code>.@return the property as an Integer, or <code>null</code> if the property could not be found.@throws IllegalArgumentException if the key is <code>null</code> or cannot be converted to an Integer. --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Retrieve a property as a Long.@param key the key of the property to retrieve. May not be <code>null</code>.@return the property as a Long, or <code>null</code> if the property was not found.@throws ClassCastException if the property cannot be converted to a Long. --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Retrieve a property as a Double.@param key the key of the property to retrieve@return the property as a Double --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[series]] = ( Number ) map . get ( key ) ; if ( [[series]] == null ) { return null ; } if ( [[series]] instanceof Double ) { return ( Double ) [[series]] ; } return [[series]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Adds a value to the map.@param key the key@param value the value@return this object --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[crucial]] , final String [[usefulness]] ) { Objects . requireNonNull ( [[crucial]] ) ; map . put ( [[crucial]] , [[usefulness]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Create a bean definition for the given name and type. --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[rendezvous]] , Class < T > [[model]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[model]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[model]] ) ; [[model]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[rendezvous]] , [[model]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[rendezvous]] , [[model]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 898 ---------------------------------------------
Opens the specified folder. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[beads]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 698 / 19 / 899:  90%|████████▉ | 899/1000 [4:38:09<31:15, 18.56s/it][Succeeded / Failed / Skipped / Total] 182 / 698 / 19 / 899:  90%|█████████ | 900/1000 [4:38:13<30:54, 18.55s/it][Succeeded / Failed / Skipped / Total] 182 / 699 / 19 / 900:  90%|█████████ | 900/1000 [4:38:13<30:54, 18.55s/it][Succeeded / Failed / Skipped / Total] 182 / 699 / 19 / 900:  90%|█████████ | 901/1000 [4:38:17<30:34, 18.53s/it][Succeeded / Failed / Skipped / Total] 182 / 700 / 19 / 901:  90%|█████████ | 901/1000 [4:38:17<30:34, 18.53s/it][Succeeded / Failed / Skipped / Total] 182 / 700 / 19 / 901:  90%|█████████ | 902/1000 [4:38:32<30:15, 18.53s/it][Succeeded / Failed / Skipped / Total] 182 / 701 / 19 / 902:  90%|█████████ | 902/1000 [4:38:32<30:15, 18.53s/it][Succeeded / Failed / Skipped / Total] 182 / 701 / 19 / 902:  90%|█████████ | 903/1000 [4:39:02<29:58, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 702 / 19 / 903:  90%|█████████ | 903/1000 [4:39:02<29:58, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 702 / 19 / 903:  90%|█████████ | 904/1000 [4:39:23<29:40, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 703 / 19 / 904:  90%|█████████ | 904/1000 [4:39:23<29:40, 18.54s/it][Succeeded / Failed / Skipped / Total] 182 / 703 / 19 / 904:  90%|█████████ | 905/1000 [4:39:34<29:20, 18.54s/it][Succeeded / Failed / Skipped / Total] 183 / 703 / 19 / 905:  90%|█████████ | 905/1000 [4:39:34<29:20, 18.54s/it][Succeeded / Failed / Skipped / Total] 183 / 703 / 19 / 905:  91%|█████████ | 906/1000 [4:39:42<29:01, 18.52s/it][Succeeded / Failed / Skipped / Total] 183 / 704 / 19 / 906:  91%|█████████ | 906/1000 [4:39:42<29:01, 18.52s/it][Succeeded / Failed / Skipped / Total] 183 / 704 / 19 / 906:  91%|█████████ | 907/1000 [4:39:42<28:40, 18.50s/it][Succeeded / Failed / Skipped / Total] 184 / 704 / 19 / 907:  91%|█████████ | 907/1000 [4:39:42<28:40, 18.50s/it][Succeeded / Failed / Skipped / Total] 184 / 704 / 19 / 907:  91%|█████████ | 908/1000 [4:39:49<28:21, 18.49s/it][Succeeded / Failed / Skipped / Total] 184 / 705 / 19 / 908:  91%|█████████ | 908/1000 [4:39:49<28:21, 18.49s/it][Succeeded / Failed / Skipped / Total] 184 / 705 / 19 / 908:  91%|█████████ | 909/1000 [4:39:59<28:01, 18.48s/it]Updates the flags for the given received email. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[alcoholism]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 900 ---------------------------------------------
Retrieve a property as a Float.@param key the key of the property to retrieve@return the property as a Float --> [[[FAILED]]]

[[[[Adv]]]]: public Float getFloat ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float getFloat ( final String [[necessities]] ) { Number [[amount]] = ( Number ) map . get ( [[necessities]] ) ; if ( [[amount]] == null ) { return null ; } if ( [[amount]] instanceof Float ) { return ( Float ) [[amount]] ; } return [[amount]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 901 ---------------------------------------------
Closes the specified folder. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[approximate]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 902 ---------------------------------------------
Concatenate the specified string with the specified target string. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[imaginary]] ( final String [[destiny]] ) { return StringPool . LEFT_CHEV . concat ( [[destiny]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Lookup a named parameter.@param name the parameter name@return the named parameter or <code>null</code> --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[appointed]] ) { DbQueryNamedParameter [[hardcover]] = rootNP ; while ( [[hardcover]] != null ) { if ( [[hardcover]] . equalsName ( [[appointed]] ) ) { return [[hardcover]] ; } [[hardcover]] = [[hardcover]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Adds a violation to the validator. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[exertions]] ( final String [[nickname]] , final Object [[kindhearted]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[nickname]] , this , [[kindhearted]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 905 ---------------------------------------------
Downloads a file as a raw data.@param downloadFileName the name of the file to download.@return this for chaining. --> Downloads an APEPRIV@param downloadFileName@return --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[apéritif]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[alchemy]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 906 ---------------------------------------------
Sets the target file. --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[mujahid]] ( final InputStream [[purposes]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[purposes]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the mime or extension.@param mimeOrExtension the mime or extension@return this --> Creates a friendship from the supplied string. --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[loves]] ( final String [[accusations]] ) { if ( [[accusations]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[accusations]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[accusations]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 908 ---------------------------------------------
Processes this class. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[lawsuit]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 909 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 706 / 19 / 909:  91%|█████████ | 909/1000 [4:39:59<28:01, 18.48s/it][Succeeded / Failed / Skipped / Total] 184 / 706 / 19 / 909:  91%|█████████ | 910/1000 [4:40:09<27:42, 18.47s/it][Succeeded / Failed / Skipped / Total] 184 / 707 / 19 / 910:  91%|█████████ | 910/1000 [4:40:09<27:42, 18.47s/it][Succeeded / Failed / Skipped / Total] 184 / 707 / 19 / 910:  91%|█████████ | 911/1000 [4:40:40<27:25, 18.49s/it][Succeeded / Failed / Skipped / Total] 184 / 708 / 19 / 911:  91%|█████████ | 911/1000 [4:40:40<27:25, 18.49s/it][Succeeded / Failed / Skipped / Total] 184 / 708 / 19 / 911:  91%|█████████ | 912/1000 [4:40:40<27:04, 18.47s/it][Succeeded / Failed / Skipped / Total] 184 / 709 / 19 / 912:  91%|█████████ | 912/1000 [4:40:40<27:04, 18.47s/it][Succeeded / Failed / Skipped / Total] 184 / 709 / 19 / 912:  91%|█████████▏| 913/1000 [4:40:44<26:45, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 709 / 19 / 913:  91%|█████████▏| 913/1000 [4:40:44<26:45, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 709 / 19 / 913:  91%|█████████▏| 914/1000 [4:41:29<26:29, 18.48s/it][Succeeded / Failed / Skipped / Total] 185 / 710 / 19 / 914:  91%|█████████▏| 914/1000 [4:41:29<26:29, 18.48s/it][Succeeded / Failed / Skipped / Total] 185 / 710 / 19 / 914:  92%|█████████▏| 915/1000 [4:41:34<26:09, 18.46s/it]Validates the action.@param profiles the profiles to validate.@return <code>true</code> if the action is valid, <code>false</code> otherwise. --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[penguins]] ( final String ... [[fingerprinting]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[fingerprinting]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target name.@param targetName the target name@return this --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[impaled]] ( final String [[clueless]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[clueless]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[clueless]] ) ; } targetClassName = [[clueless]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[clueless]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 911 ---------------------------------------------
Creates a new Proxetta instance. --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[startle]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target class. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[merrily]] ( final Class [[intending]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[intending]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[intending]] . getName ( ) ) ; } targetClass = [[intending]] ; targetClassName = [[intending]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[intending]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
Creates a new instance of this class. --> Creates a new creative@param targetClassName@return --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[creative]] ( ) { process ( ) ; byte [ ] [[raison]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[raison]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[raison]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Dumps the class in debug folder. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[excommunicate]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 915 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 711 / 19 / 915:  92%|█████████▏| 915/1000 [4:41:34<26:09, 18.46s/it][Succeeded / Failed / Skipped / Total] 185 / 711 / 19 / 915:  92%|█████████▏| 916/1000 [4:41:51<25:50, 18.46s/it][Succeeded / Failed / Skipped / Total] 185 / 712 / 19 / 916:  92%|█████████▏| 916/1000 [4:41:51<25:50, 18.46s/it][Succeeded / Failed / Skipped / Total] 185 / 712 / 19 / 916:  92%|█████████▏| 917/1000 [4:42:01<25:31, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 713 / 19 / 917:  92%|█████████▏| 917/1000 [4:42:01<25:31, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 713 / 19 / 917:  92%|█████████▏| 918/1000 [4:42:14<25:12, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 714 / 19 / 918:  92%|█████████▏| 918/1000 [4:42:14<25:12, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 714 / 19 / 918:  92%|█████████▏| 919/1000 [4:42:24<24:53, 18.44s/it][Succeeded / Failed / Skipped / Total] 185 / 715 / 19 / 919:  92%|█████████▏| 919/1000 [4:42:24<24:53, 18.44s/it][Succeeded / Failed / Skipped / Total] 185 / 715 / 19 / 919:  92%|█████████▏| 920/1000 [4:42:56<24:36, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 716 / 19 / 920:  92%|█████████▏| 920/1000 [4:42:56<24:36, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 716 / 19 / 920:  92%|█████████▏| 921/1000 [4:43:13<24:17, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 717 / 19 / 921:  92%|█████████▏| 921/1000 [4:43:13<24:17, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 717 / 19 / 921:  92%|█████████▏| 922/1000 [4:43:31<23:59, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 718 / 19 / 922:  92%|█████████▏| 922/1000 [4:43:31<23:59, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 718 / 19 / 922:  92%|█████████▏| 923/1000 [4:43:52<23:40, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 719 / 19 / 923:  92%|█████████▏| 923/1000 [4:43:52<23:40, 18.45s/it][Succeeded / Failed / Skipped / Total] 185 / 719 / 19 / 923:  92%|█████████▏| 924/1000 [4:44:00<23:21, 18.44s/it]Defines the proxied class. --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[prescribes]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Converts the supplied email address into this object.@param to the email address to convert.@return this object. --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress [[to]] ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress [[avec]] ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 917 ---------------------------------------------
Set the reply to address.@param REPLACEME0 the address to set@return this object --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[smellin]] = ArraysUtil . join ( this . [[smellin]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Creates a new email address with the given name and from address.@param personalName the name of the email address@param from the from address@return the created email address --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String [[from]] ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[amongst]] ( final String [[dollop]] , final String [[z]] ) { return [[amongst]] ( new EmailAddress ( [[dollop]] , [[amongst]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 919 ---------------------------------------------
Converts the specified email address to the specified one.@param personalName The name of the email address.@param to The address to convert.@return The converted email address. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String [[to]] ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[around]] ( final String personalName , final String [[chez]] ) { return [[around]] ( new EmailAddress ( personalName , [[around]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the cc recipient. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[mc]] ( final EmailAddress ... [[cts]] ) { this . [[cp]] = ArraysUtil . join ( this . [[cp]] , valueOrEmptyArray ( [[cts]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Creates a text message. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[vamoose]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 922 ---------------------------------------------
Sets the html message.@param html the html message@param encoding the encoding@return the t --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[beet]] ( final String [[adobe]] , final String [[overcooked]] ) { return message ( new EmailMessage ( [[adobe]] , MimeTypes . MIME_TEXT_HTML , [[overcooked]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Gets the resolved parameters. --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[reconfigure]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 924 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 720 / 19 / 924:  92%|█████████▏| 924/1000 [4:44:00<23:21, 18.44s/it][Succeeded / Failed / Skipped / Total] 185 / 720 / 19 / 924:  92%|█████████▎| 925/1000 [4:45:19<23:08, 18.51s/it][Succeeded / Failed / Skipped / Total] 186 / 720 / 19 / 925:  92%|█████████▎| 925/1000 [4:45:19<23:08, 18.51s/it][Succeeded / Failed / Skipped / Total] 186 / 720 / 19 / 925:  93%|█████████▎| 926/1000 [4:45:37<22:49, 18.51s/it][Succeeded / Failed / Skipped / Total] 187 / 720 / 19 / 926:  93%|█████████▎| 926/1000 [4:45:37<22:49, 18.51s/it][Succeeded / Failed / Skipped / Total] 187 / 720 / 19 / 926:  93%|█████████▎| 927/1000 [4:46:25<22:33, 18.54s/it][Succeeded / Failed / Skipped / Total] 187 / 721 / 19 / 927:  93%|█████████▎| 927/1000 [4:46:25<22:33, 18.54s/it][Succeeded / Failed / Skipped / Total] 187 / 721 / 19 / 927:  93%|█████████▎| 928/1000 [4:46:41<22:14, 18.54s/it][Succeeded / Failed / Skipped / Total] 187 / 722 / 19 / 928:  93%|█████████▎| 928/1000 [4:46:41<22:14, 18.54s/it][Succeeded / Failed / Skipped / Total] 187 / 722 / 19 / 928:  93%|█████████▎| 929/1000 [4:47:57<22:00, 18.60s/it][Succeeded / Failed / Skipped / Total] 187 / 723 / 19 / 929:  93%|█████████▎| 929/1000 [4:47:57<22:00, 18.60s/it][Succeeded / Failed / Skipped / Total] 187 / 723 / 19 / 929:  93%|█████████▎| 930/1000 [4:48:19<21:42, 18.60s/it]Sets the value of the specified header. --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[slogan]] ( final String [[surnames]] , final String [[appreciates]] ) { headers . put ( [[surnames]] , [[appreciates]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Retrieves the value of an integer property.@param name The name of the property.@param defaultValue The default value.@return The property value. --> Dulce a string@param names@param medina@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String [[name]] , final int [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[dulce]] ( final String [[names]] , final int [[medina]] ) { String value = get ( [[names]] ) ; if ( value == null ) { return [[medina]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[medina]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
Retrieve a long value from the properties file.@param name name of the property to retrieve.@param defaultValue default value to return if the property is not found.@return long value or default value. --> Attempts to disturb the specified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the specified number of the specified number of thespecified number of the --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[disturb]] ( final String [[denominations]] , final long defaultValue ) { String [[deserving]] = get ( [[denominations]] ) ; if ( [[deserving]] == null ) { return defaultValue ; } [[deserving]] = [[deserving]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[deserving]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 927 ---------------------------------------------
Get the value of the specified property.@param name the property name@param defaultValue the default value@return the property value or the default value if the property is not set --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[perceive]] ( final String [[patronymic]] , final String [[bluffing]] ) { Objects . requireNonNull ( [[patronymic]] ) ; String [[significance]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[significance]] = System . getProperty ( [[patronymic]] ) ; } else { [[significance]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[patronymic]] ) ) ; } } catch ( Exception ignore ) { } if ( [[significance]] == null ) { return [[bluffing]] ; } return [[significance]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 928 ---------------------------------------------
Lookup the action path for the given alias. --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[pseudo]] ) { String [[evaluations]] = actionsManager . lookupPathAlias ( [[pseudo]] ) ; if ( [[evaluations]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[pseudo]] ) ; if ( cfg != null ) { [[evaluations]] = cfg . getActionPath ( ) ; } } return [[evaluations]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 929 ---------------------------------------------
Resolve an alias for the supplied value.@param value the value to resolve.@return the alias. --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder [[result]] = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[ehrlich]] ( final String [[evaluating]] ) { final StringBuilder [[accomplishment]] = new StringBuilder ( [[evaluating]] . length ( ) ) ; int i = 0 ; int len = [[evaluating]] . length ( ) ; while ( i < len ) { int ndx = [[evaluating]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 724 / 19 / 930:  93%|█████████▎| 930/1000 [4:48:19<21:42, 18.60s/it][Succeeded / Failed / Skipped / Total] 187 / 724 / 19 / 930:  93%|█████████▎| 931/1000 [4:48:56<21:24, 18.62s/it][Succeeded / Failed / Skipped / Total] 187 / 725 / 19 / 931:  93%|█████████▎| 931/1000 [4:48:56<21:24, 18.62s/it][Succeeded / Failed / Skipped / Total] 187 / 725 / 19 / 931:  93%|█████████▎| 932/1000 [4:49:08<21:05, 18.61s/it][Succeeded / Failed / Skipped / Total] 187 / 726 / 19 / 932:  93%|█████████▎| 932/1000 [4:49:08<21:05, 18.61s/it][Succeeded / Failed / Skipped / Total] 187 / 726 / 19 / 932:  93%|█████████▎| 933/1000 [4:49:19<20:46, 18.61s/it][Succeeded / Failed / Skipped / Total] 187 / 727 / 19 / 933:  93%|█████████▎| 933/1000 [4:49:19<20:46, 18.61s/it][Succeeded / Failed / Skipped / Total] 187 / 727 / 19 / 933:  93%|█████████▎| 934/1000 [4:49:24<20:27, 18.59s/it][Succeeded / Failed / Skipped / Total] 188 / 727 / 19 / 934:  93%|█████████▎| 934/1000 [4:49:24<20:27, 18.59s/it][Succeeded / Failed / Skipped / Total] 188 / 727 / 19 / 934:  94%|█████████▎| 935/1000 [4:49:55<20:09, 18.60s/it][Succeeded / Failed / Skipped / Total] 188 / 728 / 19 / 935:  94%|█████████▎| 935/1000 [4:49:55<20:09, 18.60s/it][Succeeded / Failed / Skipped / Total] 188 / 728 / 19 / 935:  94%|█████████▎| 936/1000 [4:50:00<19:49, 18.59s/it][Succeeded / Failed / Skipped / Total] 189 / 728 / 19 / 936:  94%|█████████▎| 936/1000 [4:50:00<19:49, 18.59s/it][Succeeded / Failed / Skipped / Total] 189 / 728 / 19 / 936:  94%|█████████▎| 937/1000 [4:50:15<19:30, 18.59s/it]Returns the value of the specified named property as a boolean.@param name The name of the property to retrieve.@param defaultValue The default value to return if the property is not found.@return The property value as a boolean. --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[narcotic]] ( final String [[designation]] , final boolean [[playacting]] ) { String [[inestimable]] = get ( [[designation]] ) ; if ( [[inestimable]] == null ) { return [[playacting]] ; } [[inestimable]] = [[inestimable]] . trim ( ) . toLowerCase ( ) ; switch ( [[inestimable]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[playacting]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 931 ---------------------------------------------
Resolves the result path for the given path and value. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[beholder]] ( final String [[lines]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[lines]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 932 ---------------------------------------------
Resolves the supplied path to the supplied value. --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[naaa]] ( String [[trail]] , String [[assessing]] ) { boolean absolutePath = "[[Fake]]" != "[[Fake]]" ; if ( [[assessing]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the index of the last dot of the specified string.@param str the specified string@return the index of the last dot of the specified string --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[posing]] ( final String [[ts]] ) { int slashNdx = [[ts]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[ts]] , ' ' , [[ts]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[ts]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 934 ---------------------------------------------
Strips the last camel-word from the given name. --> Creates a new string with the specified name. --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[addis]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last dot after the given string. --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[paraphrase]] ( final String [[weps]] ) { int slashNdx = [[weps]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[weps]] , ' ' , [[weps]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the first dot after the given string. --> Performs a buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman buckman --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[buckman]] ( final String [[gonorrhoea]] ) { int [[random]] = [[gonorrhoea]] . lastIndexOf ( ' ' ) ; if ( [[random]] == - 1 ) { [[random]] = 0 ; } return [[gonorrhoea]] . indexOf ( ' ' , [[random]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 937 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 729 / 19 / 937:  94%|█████████▎| 937/1000 [4:50:15<19:30, 18.59s/it][Succeeded / Failed / Skipped / Total] 189 / 729 / 19 / 937:  94%|█████████▍| 938/1000 [4:51:13<19:14, 18.63s/it][Succeeded / Failed / Skipped / Total] 189 / 730 / 19 / 938:  94%|█████████▍| 938/1000 [4:51:13<19:14, 18.63s/it][Succeeded / Failed / Skipped / Total] 189 / 730 / 19 / 938:  94%|█████████▍| 939/1000 [4:51:18<18:55, 18.61s/it][Succeeded / Failed / Skipped / Total] 189 / 731 / 19 / 939:  94%|█████████▍| 939/1000 [4:51:18<18:55, 18.61s/it][Succeeded / Failed / Skipped / Total] 189 / 731 / 19 / 939:  94%|█████████▍| 940/1000 [4:51:46<18:37, 18.62s/it][Succeeded / Failed / Skipped / Total] 189 / 732 / 19 / 940:  94%|█████████▍| 940/1000 [4:51:46<18:37, 18.62s/it][Succeeded / Failed / Skipped / Total] 189 / 732 / 19 / 940:  94%|█████████▍| 941/1000 [4:52:33<18:20, 18.65s/it][Succeeded / Failed / Skipped / Total] 190 / 732 / 19 / 941:  94%|█████████▍| 941/1000 [4:52:33<18:20, 18.65s/it][Succeeded / Failed / Skipped / Total] 190 / 732 / 19 / 941:  94%|█████████▍| 942/1000 [4:52:34<18:00, 18.63s/it][Succeeded / Failed / Skipped / Total] 190 / 733 / 19 / 942:  94%|█████████▍| 942/1000 [4:52:34<18:00, 18.63s/it][Succeeded / Failed / Skipped / Total] 190 / 733 / 19 / 942:  94%|█████████▍| 943/1000 [4:52:35<17:41, 18.62s/it][Succeeded / Failed / Skipped / Total] 190 / 734 / 19 / 943:  94%|█████████▍| 943/1000 [4:52:35<17:41, 18.62s/it][Succeeded / Failed / Skipped / Total] 190 / 734 / 19 / 943:  94%|█████████▍| 944/1000 [4:53:23<17:24, 18.65s/it][Succeeded / Failed / Skipped / Total] 190 / 735 / 19 / 944:  94%|█████████▍| 944/1000 [4:53:23<17:24, 18.65s/it][Succeeded / Failed / Skipped / Total] 190 / 735 / 19 / 944:  94%|█████████▍| 945/1000 [4:53:42<17:05, 18.65s/it]Serialize a key-value pair.@param jsonContext the context@param currentPath the current path@param key the key@param value the value@param count the count --> [[[FAILED]]]

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[jsonContext]] , final Path [[currentPath]] , final Object [[key]] , final Object [[value]] , int [[count]] ) { if ( ( [[value]] == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return [[count]] ; } if ( [[key]] != null ) { [[currentPath]] . push ( [[key]] . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[pozzo]] , final Path [[clutching]] , final Object [[decisive]] , final Object [[assessment]] , int [[chronicles]] ) { if ( ( [[assessment]] == null ) && [[pozzo]] . isExcludeNulls ( ) ) { return [[chronicles]] ; } if ( [[decisive]] != null ) { [[clutching]] . push ( [[decisive]] . toString ( ) ) ; } else { [[clutching]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 938 ---------------------------------------------
Schedules a key schedule. --> [[[FAILED]]]

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int [[i]] = 0 ; [[i]] < nw ; [[i]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[sufficient]] ( final int s ) { for ( int [[johnson]] = 0 ; [[johnson]] < nw ; [[johnson]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the internal data structures. --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int [[newNw]] = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[elemental]] , final long [ ] [[edit]] ) { final int [[luci]] = [[elemental]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Mix the specified dimension with the specified value. --> [[[FAILED]]]

[[[[Adv]]]]: private void mix ( final int j , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int [[two]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[aggrieved]] = r [ [[two]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Converts a byte array to a long array.@param ba byte array@param offset offset into byte array@param size size of array@return long array --> Creates 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned 64-bit unsigned --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[tuckered]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 942 ---------------------------------------------
Receives all messages from the specified folder.@param filter the filter to apply to the messages.@param flagsToSet the flags to set on the messages.@param flagsToUnset the flags to unset on the messages.@param envelope <code>true</code> if the messages should be enclosed in an envelope, <code>false</code> otherwise.@param processedMessageConsumer the consumer to process the messages. --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags [[flagsToUnset]] , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags [[complexion]] , final boolean envelope , final Consumer < Message [ ] > [[rutledge]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[letters]] ; try { if ( filter == null ) { [[letters]] = folder . getMessages ( ) ; } else { [[letters]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[letters]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[lineup]] = new FetchProfile ( ) ; [[lineup]] . add ( FetchProfile . Item . ENVELOPE ) ; [[lineup]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[letters]] , [[lineup]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 943 ---------------------------------------------
Resolves the schema name for the given type.@param type the type@param defaultSchemaName the default schema name@return the resolved schema name --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = [[defaultSchemaName]] ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[shotguns]] ( final Class < ? > [[writes]] , final String [[hirai]] ) { String schemaName = null ; final DbTable dbTable = [[writes]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = [[hirai]] ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
Gets the path to the resource. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[roads]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[roads]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 945 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 735 / 19 / 945:  94%|█████████▍| 945/1000 [4:53:42<17:05, 18.65s/it][Succeeded / Failed / Skipped / Total] 191 / 735 / 19 / 945:  95%|█████████▍| 946/1000 [4:55:07<16:50, 18.72s/it][Succeeded / Failed / Skipped / Total] 192 / 735 / 19 / 946:  95%|█████████▍| 946/1000 [4:55:07<16:50, 18.72s/it][Succeeded / Failed / Skipped / Total] 192 / 735 / 19 / 946:  95%|█████████▍| 947/1000 [4:55:08<16:31, 18.70s/it][Succeeded / Failed / Skipped / Total] 192 / 736 / 19 / 947:  95%|█████████▍| 947/1000 [4:55:08<16:31, 18.70s/it][Succeeded / Failed / Skipped / Total] 192 / 736 / 19 / 947:  95%|█████████▍| 948/1000 [4:55:25<16:12, 18.70s/it][Succeeded / Failed / Skipped / Total] 192 / 737 / 19 / 948:  95%|█████████▍| 948/1000 [4:55:25<16:12, 18.70s/it][Succeeded / Failed / Skipped / Total] 192 / 737 / 19 / 948:  95%|█████████▍| 949/1000 [4:55:40<15:53, 18.69s/it][Succeeded / Failed / Skipped / Total] 192 / 738 / 19 / 949:  95%|█████████▍| 949/1000 [4:55:40<15:53, 18.69s/it][Succeeded / Failed / Skipped / Total] 192 / 738 / 19 / 949:  95%|█████████▌| 950/1000 [4:56:12<15:35, 18.71s/it][Succeeded / Failed / Skipped / Total] 192 / 739 / 19 / 950:  95%|█████████▌| 950/1000 [4:56:12<15:35, 18.71s/it][Succeeded / Failed / Skipped / Total] 192 / 739 / 19 / 950:  95%|█████████▌| 951/1000 [4:57:53<15:20, 18.79s/it]Initializes this message with the specified key and tweak.@param keyMessage the key message@param tweak1 the tweak 1@param tweak2 the tweak 2 --> Low-level high-level high-level high-level help --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[highchair]] ( final String [[voil]] , final long tweak1 , final long tweak2 ) { long [ ] [[altering]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[voil]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[highchair]] ( bytesToLongs ( key ) , [[altering]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 946 ---------------------------------------------
Renders a pixel at the specified dimension. --> Liefert die angegebenen angegebenen angegegebenen angegegebenen angegegebenen angegegebenen angegegebenen --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[liberalism]] ( final int [[mcnair]] , final int [[pour]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[develops]] = r [ [[pour]] % DEPTH_OF_D_IN_R ] [ [[mcnair]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 947 ---------------------------------------------
Encrypts the specified byte array at the specified offset. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[incantations]] ( final byte [ ] content , final int offset ) { long [ ] [[infarction]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[infarction]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 948 ---------------------------------------------
Resolve column descriptors.@param dbEntityDescriptorthe db entity descriptor@param propertythe property descriptor@param isAnnotatedthe is annotated@param columnNamethe column naming strategy@return the column descriptor --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor [[property]] , final boolean [[isAnnotated]] , final ColumnNamingStrategy [[columnNamingStrategy]] ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[valueless]] ( final DbEntityDescriptor [[cluttered]] , final PropertyDescriptor [[proprietors]] , final boolean [[enamorada]] , final ColumnNamingStrategy [[apparently]] ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
Removes the specified bounding character from the specified string. --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[conformed]] ( final char s , final char e , final String [[defense]] ) { if ( [[defense]] == null || [[defense]] . length ( ) < 2 ) { return [[defense]] ; } if ( [[defense]] . startsWith ( String . valueOf ( s ) ) && [[defense]] . endsWith ( String . valueOf ( e ) ) ) { return [[defense]] . substring ( 1 , [[defense]] . length ( ) - 1 ) ; } return [[defense]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 950 ---------------------------------------------
Zlib zlib.@param file the file@return the file@throws IOException the io exception --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[unique]] ( final File [[lawsuits]] ) throws IOException { if ( [[lawsuits]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[lawsuits]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[lawsuits]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 740 / 19 / 951:  95%|█████████▌| 951/1000 [4:57:53<15:20, 18.79s/it][Succeeded / Failed / Skipped / Total] 192 / 740 / 19 / 951:  95%|█████████▌| 952/1000 [4:58:17<15:02, 18.80s/it][Succeeded / Failed / Skipped / Total] 192 / 741 / 19 / 952:  95%|█████████▌| 952/1000 [4:58:17<15:02, 18.80s/it][Succeeded / Failed / Skipped / Total] 192 / 741 / 19 / 952:  95%|█████████▌| 953/1000 [4:58:34<14:43, 18.80s/it][Succeeded / Failed / Skipped / Total] 192 / 742 / 19 / 953:  95%|█████████▌| 953/1000 [4:58:34<14:43, 18.80s/it][Succeeded / Failed / Skipped / Total] 192 / 742 / 19 / 953:  95%|█████████▌| 954/1000 [4:59:49<14:27, 18.86s/it][Succeeded / Failed / Skipped / Total] 192 / 743 / 19 / 954:  95%|█████████▌| 954/1000 [4:59:49<14:27, 18.86s/it][Succeeded / Failed / Skipped / Total] 192 / 743 / 19 / 954:  96%|█████████▌| 955/1000 [5:00:01<14:08, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 744 / 19 / 955:  96%|█████████▌| 955/1000 [5:00:01<14:08, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 744 / 19 / 955:  96%|█████████▌| 956/1000 [5:00:21<13:49, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 745 / 19 / 956:  96%|█████████▌| 956/1000 [5:00:21<13:49, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 745 / 19 / 956:  96%|█████████▌| 957/1000 [5:00:35<13:30, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 746 / 19 / 957:  96%|█████████▌| 957/1000 [5:00:35<13:30, 18.85s/it][Succeeded / Failed / Skipped / Total] 192 / 746 / 19 / 957:  96%|█████████▌| 958/1000 [5:01:20<13:12, 18.87s/it]Gzip a file.@param file the file@return the file@throws IOException the io exception --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[approximate]] ( final File [[depository]] ) throws IOException { if ( [[depository]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[depository]] ) ; String gzipName = [[depository]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Ungzip a file. --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[calibrating]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Unzip a zip file to a destination directory.@param zipFile the zip file@param destDir the destination directory@param patterns the patterns@throws IOException if an I/O error occurs --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... [[patterns]] ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[leticia]] , final String [[beefsteak]] , final String ... [[schemes]] ) throws IOException { unzip ( new File ( [[leticia]] ) , new File ( [[beefsteak]] ) , [[schemes]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Sets the request bundle name.@param request the servlet request@param bundleName the bundle name --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[neutrinos]] ( final ServletRequest [[requisition]] , final String [[addicts]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[addicts]] ) ; } [[requisition]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[addicts]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 955 ---------------------------------------------
Returns a list of entries in the specified ZIP file. --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File [[ascot]] ) throws IOException { List < String > [[came]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[ascot]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[came]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[came]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 956 ---------------------------------------------
Sets the session locale.@param session the session@param localeCode the locale code --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[exceptionally]] ( final HttpSession [[reunions]] , final String [[beckham]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[beckham]] ) ; } Locale locale = Locale . forLanguageTag ( [[beckham]] ) ; [[reunions]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the FieldDescriptor for the named field.@param name the name of the field@param declared {@code true} if the field is declared, {@code false} otherwise@return the FieldDescriptor for the named field --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[baptism]] , final boolean [[argued]] ) { final FieldDescriptor [[shinde]] = getFields ( ) . getFieldDescriptor ( [[baptism]] ) ; if ( [[shinde]] != null ) { if ( ! [[shinde]] . matchDeclared ( [[argued]] ) ) { return null ; } } return [[shinde]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 746 / 19 / 958:  96%|█████████▌| 958/1000 [5:01:20<13:12, 18.87s/it][Succeeded / Failed / Skipped / Total] 193 / 746 / 19 / 958:  96%|█████████▌| 959/1000 [5:01:22<12:53, 18.86s/it][Succeeded / Failed / Skipped / Total] 193 / 747 / 19 / 959:  96%|█████████▌| 959/1000 [5:01:22<12:53, 18.86s/it][Succeeded / Failed / Skipped / Total] 193 / 747 / 19 / 959:  96%|█████████▌| 960/1000 [5:01:36<12:34, 18.85s/it][Succeeded / Failed / Skipped / Total] 193 / 748 / 19 / 960:  96%|█████████▌| 960/1000 [5:01:36<12:34, 18.85s/it][Succeeded / Failed / Skipped / Total] 193 / 748 / 19 / 960:  96%|█████████▌| 961/1000 [5:01:55<12:15, 18.85s/it][Succeeded / Failed / Skipped / Total] 193 / 749 / 19 / 961:  96%|█████████▌| 961/1000 [5:01:55<12:15, 18.85s/it][Succeeded / Failed / Skipped / Total] 193 / 749 / 19 / 961:  96%|█████████▌| 962/1000 [5:03:10<11:58, 18.91s/it][Succeeded / Failed / Skipped / Total] 193 / 750 / 19 / 962:  96%|█████████▌| 962/1000 [5:03:10<11:58, 18.91s/it][Succeeded / Failed / Skipped / Total] 193 / 750 / 19 / 962:  96%|█████████▋| 963/1000 [5:03:44<11:40, 18.93s/it][Succeeded / Failed / Skipped / Total] 193 / 751 / 19 / 963:  96%|█████████▋| 963/1000 [5:03:44<11:40, 18.93s/it][Succeeded / Failed / Skipped / Total] 193 / 751 / 19 / 963:  96%|█████████▋| 964/1000 [5:04:03<11:21, 18.93s/it][Succeeded / Failed / Skipped / Total] 193 / 752 / 19 / 964:  96%|█████████▋| 964/1000 [5:04:03<11:21, 18.93s/it][Succeeded / Failed / Skipped / Total] 193 / 752 / 19 / 964:  96%|█████████▋| 965/1000 [5:04:39<11:02, 18.94s/it]Returns a little-endian 64-bit integer from the specified byte array. --> Calculates the martin@param buf@param offset@return --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[martín]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 959 ---------------------------------------------
Adds the specified profiles to this Props object. --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[pictured]] ( final String ... [[portraits]] ) { if ( [[portraits]] == null ) { return this ; } for ( String [[pictured]] : [[portraits]] ) { addProfiles ( [[pictured]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the session locale. --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[tommies]] ( final HttpSession [[afternoons]] ) { Locale [[district]] = ( Locale ) [[afternoons]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[district]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[district]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Returns the property descriptor associated with the supplied name.@param name the name of the property@param declared true if the property descriptor should be declared@return the property descriptor associated with the supplied name --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[aka]] , final boolean [[testified]] ) { PropertyDescriptor [[medvedev]] = getProperties ( ) . getPropertyDescriptor ( [[aka]] ) ; if ( ( [[medvedev]] != null ) && [[medvedev]] . matchDeclared ( [[testified]] ) ) { return [[medvedev]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 962 ---------------------------------------------
Reads a label from the specified bytecode offset. --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[bragging]] , final Label [ ] labels ) { if ( labels [ [[bragging]] ] == null ) { labels [ [[bragging]] ] = new Label ( ) ; } return labels [ [[bragging]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 963 ---------------------------------------------
Gets the bytecode offset for the given type annotation.@param typeAnnotationOffsets the type annotation offsets@param typeAnnotationIndex the type annotation index@return the bytecode offset --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[dega]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 964 ---------------------------------------------
Filter parameters for bean name@param beanName@param resolveReferenceParams@return --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[pentium]] ( String [[appointing]] , final boolean resolveReferenceParams ) { [[appointing]] = [[appointing]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[appointing]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 753 / 19 / 965:  96%|█████████▋| 965/1000 [5:04:39<11:02, 18.94s/it][Succeeded / Failed / Skipped / Total] 193 / 753 / 19 / 965:  97%|█████████▋| 966/1000 [5:05:09<10:44, 18.95s/it][Succeeded / Failed / Skipped / Total] 193 / 754 / 19 / 966:  97%|█████████▋| 966/1000 [5:05:09<10:44, 18.95s/it][Succeeded / Failed / Skipped / Total] 193 / 754 / 19 / 966:  97%|█████████▋| 967/1000 [5:06:05<10:26, 18.99s/it][Succeeded / Failed / Skipped / Total] 194 / 754 / 19 / 967:  97%|█████████▋| 967/1000 [5:06:05<10:26, 18.99s/it][Succeeded / Failed / Skipped / Total] 194 / 754 / 19 / 967:  97%|█████████▋| 968/1000 [5:06:10<10:07, 18.98s/it][Succeeded / Failed / Skipped / Total] 194 / 755 / 19 / 968:  97%|█████████▋| 968/1000 [5:06:10<10:07, 18.98s/it][Succeeded / Failed / Skipped / Total] 194 / 755 / 19 / 968:  97%|█████████▋| 969/1000 [5:06:13<09:47, 18.96s/it][Succeeded / Failed / Skipped / Total] 194 / 756 / 19 / 969:  97%|█████████▋| 969/1000 [5:06:13<09:47, 18.96s/it][Succeeded / Failed / Skipped / Total] 194 / 756 / 19 / 969:  97%|█████████▋| 970/1000 [5:06:45<09:29, 18.98s/it][Succeeded / Failed / Skipped / Total] 194 / 757 / 19 / 970:  97%|█████████▋| 970/1000 [5:06:45<09:29, 18.98s/it][Succeeded / Failed / Skipped / Total] 194 / 757 / 19 / 970:  97%|█████████▋| 971/1000 [5:07:19<09:10, 18.99s/it]Adds content to a ZIP file.@param zos ZIP output stream.@param content content to be added.@param path path to the file.@param comment comment to be added.@throws IOException if an I/O error occurs. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String [[path]] , final String [[comment]] ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { zipEntry . setComment ( [[comment]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[morgen]] ( final ZipOutputStream zos , final byte [ ] content , String [[trajectories]] , final String [[commenting]] ) throws IOException { while ( [[trajectories]] . length ( ) != 0 && [[trajectories]] . charAt ( 0 ) == ' ' ) { [[trajectories]] = [[trajectories]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[trajectories]] , ' ' ) ) { [[trajectories]] = [[trajectories]] . substring ( 0 , [[trajectories]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[trajectories]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[commenting]] != null ) { zipEntry . setComment ( [[commenting]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 966 ---------------------------------------------
Adds the specified file to the specified ZIP output stream. --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File file , String path , final String comment , final boolean [[recursive]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[fastened]] ( final ZipOutputStream [[chaperon]] , final File file , String path , final String comment , final boolean [[alligator]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 967 ---------------------------------------------
Reads the bootstrap methods attribute. --> Gillespie functions --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[gillespie]] ( final int [[bango]] ) { char [ ] charBuffer = new char [ [[bango]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 968 ---------------------------------------------
Gets the request map.@param servletRequest the servlet request@return the request map --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[less]] ( final HttpServletRequest [[gerhard]] ) { return ( Map < String , TransientBeanData > ) [[gerhard]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 969 ---------------------------------------------
Analyzes all constructors in the class descriptor. --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[heirlooms]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 970 ---------------------------------------------
Reads the element values from the annotation.@param annotationVisitor the annotation visitor@param annotationOffset the annotation offset@param named the named attribute@param charBuffer the char buffer --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[masao]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 758 / 19 / 971:  97%|█████████▋| 971/1000 [5:07:19<09:10, 18.99s/it][Succeeded / Failed / Skipped / Total] 195 / 758 / 19 / 972:  97%|█████████▋| 972/1000 [5:07:20<08:51, 18.97s/it][Succeeded / Failed / Skipped / Total] 195 / 758 / 19 / 972:  97%|█████████▋| 973/1000 [5:07:34<08:32, 18.97s/it][Succeeded / Failed / Skipped / Total] 195 / 759 / 19 / 973:  97%|█████████▋| 973/1000 [5:07:34<08:32, 18.97s/it][Succeeded / Failed / Skipped / Total] 195 / 759 / 19 / 973:  97%|█████████▋| 974/1000 [5:07:58<08:13, 18.97s/it][Succeeded / Failed / Skipped / Total] 195 / 760 / 19 / 974:  97%|█████████▋| 974/1000 [5:07:58<08:13, 18.97s/it][Succeeded / Failed / Skipped / Total] 195 / 760 / 19 / 974:  98%|█████████▊| 975/1000 [5:08:04<07:53, 18.96s/it][Succeeded / Failed / Skipped / Total] 196 / 760 / 19 / 975:  98%|█████████▊| 975/1000 [5:08:04<07:53, 18.96s/it][Succeeded / Failed / Skipped / Total] 196 / 760 / 19 / 975:  98%|█████████▊| 976/1000 [5:08:10<07:34, 18.94s/it][Succeeded / Failed / Skipped / Total] 197 / 760 / 19 / 976:  98%|█████████▊| 976/1000 [5:08:10<07:34, 18.94s/it][Succeeded / Failed / Skipped / Total] 197 / 760 / 19 / 976:  98%|█████████▊| 977/1000 [5:08:43<07:16, 18.96s/it][Succeeded / Failed / Skipped / Total] 197 / 761 / 19 / 977:  98%|█████████▊| 977/1000 [5:08:43<07:16, 18.96s/it][Succeeded / Failed / Skipped / Total] 197 / 761 / 19 / 977:  98%|█████████▊| 978/1000 [5:08:50<06:56, 18.95s/it]Creates a request map. --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[unbelievably]] ( final HttpServletRequest [[brion]] ) { Map < String , TransientBeanData > [[valentines]] = new HashMap <> ( ) ; [[brion]] . setAttribute ( ATTR_NAME , [[valentines]] ) ; return [[valentines]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Initializes this filter with the specified configuration. --> Ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[ahhhhhhh]] ( final FilterConfig [[loyalists]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
Returns the ctor descriptor for the given arguments. --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[nepali]] ) { ctors : for ( CtorDescriptor [[bengalis]] : allCtors ) { Class [ ] arg = [[bengalis]] . getParameters ( ) ; if ( arg . length != [[nepali]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[nepali]] [ j ] ) { continue ctors ; } } return [[bengalis]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 974 ---------------------------------------------
Converts an object to an array.@param value the object to convert.@return the array. --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[pamby]] ( final Object [[assessed]] ) { final Class valueComponentType = [[assessed]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[reverberations]] ; if ( valueComponentType . isPrimitive ( ) ) { [[reverberations]] = convertPrimitiveArrayToArray ( [[assessed]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 975 ---------------------------------------------
Adds a consumer to be called when a file is found. --> Searches for files that are less than the supplied threshold. --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[less]] ( final Consumer < File > [[blurred]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[blurred]] ) ; } else { consumers . add ( [[blurred]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Reads data from an input stream.@param inputStream the input stream to read from@param close true if the stream should be closed@return the data read from the input stream@throws IOException if an I/O error occurs --> Lambchop@param familia@param latch@return@throws IOException --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { [[outputStream]] . write ( data , 0 , [[bytesRead]] ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[lambchop]] ( final InputStream [[familia]] , final boolean [[latch]] ) throws IOException { if ( [[familia]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[yuan]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[filtered]] ; while ( ( [[filtered]] = [[familia]] . read ( data , 0 , data . length ) ) != - 1 ) { [[yuan]] . write ( data , 0 , [[filtered]] ) ; } [[yuan]] . flush ( ) ; return [[yuan]] . toByteArray ( ) ; } finally { if ( [[latch]] ) { [[familia]] . [[latch]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 977 ---------------------------------------------
Adds a path to this file system. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[chronicle]] ( final File [[driveways]] ) { if ( ! [[driveways]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[driveways]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 978 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 762 / 19 / 978:  98%|█████████▊| 978/1000 [5:08:50<06:56, 18.95s/it][Succeeded / Failed / Skipped / Total] 197 / 762 / 19 / 978:  98%|█████████▊| 979/1000 [5:09:01<06:37, 18.94s/it][Succeeded / Failed / Skipped / Total] 197 / 763 / 19 / 979:  98%|█████████▊| 979/1000 [5:09:01<06:37, 18.94s/it][Succeeded / Failed / Skipped / Total] 197 / 763 / 19 / 979:  98%|█████████▊| 980/1000 [5:09:05<06:18, 18.92s/it][Succeeded / Failed / Skipped / Total] 197 / 764 / 19 / 980:  98%|█████████▊| 980/1000 [5:09:05<06:18, 18.92s/it][Succeeded / Failed / Skipped / Total] 197 / 764 / 19 / 980:  98%|█████████▊| 981/1000 [5:09:15<05:59, 18.91s/it][Succeeded / Failed / Skipped / Total] 197 / 765 / 19 / 981:  98%|█████████▊| 981/1000 [5:09:15<05:59, 18.91s/it][Succeeded / Failed / Skipped / Total] 197 / 765 / 19 / 981:  98%|█████████▊| 982/1000 [5:09:16<05:40, 18.90s/it][Succeeded / Failed / Skipped / Total] 197 / 766 / 19 / 982:  98%|█████████▊| 982/1000 [5:09:16<05:40, 18.90s/it][Succeeded / Failed / Skipped / Total] 197 / 766 / 19 / 982:  98%|█████████▊| 983/1000 [5:09:35<05:21, 18.90s/it][Succeeded / Failed / Skipped / Total] 197 / 767 / 19 / 983:  98%|█████████▊| 983/1000 [5:09:35<05:21, 18.90s/it][Succeeded / Failed / Skipped / Total] 197 / 767 / 19 / 983:  98%|█████████▊| 984/1000 [5:09:37<05:02, 18.88s/it][Succeeded / Failed / Skipped / Total] 197 / 768 / 19 / 984:  98%|█████████▊| 984/1000 [5:09:37<05:02, 18.88s/it][Succeeded / Failed / Skipped / Total] 197 / 768 / 19 / 984:  98%|█████████▊| 985/1000 [5:09:50<04:43, 18.87s/it][Succeeded / Failed / Skipped / Total] 197 / 769 / 19 / 985:  98%|█████████▊| 985/1000 [5:09:50<04:43, 18.87s/it][Succeeded / Failed / Skipped / Total] 197 / 769 / 19 / 985:  99%|█████████▊| 986/1000 [5:10:13<04:24, 18.88s/it]Searches for a file in the specified path. --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[taunt]] ( final URI [[marlborough]] ) { File file ; try { file = new File ( [[taunt]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[taunt]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Searches for a file in this directory and adds it to this directory. --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[destroying]] ( final URL searchPath ) { File [[lodging]] = FileUtil . toContainerFile ( [[destroying]] ) ; if ( [[lodging]] == null ) { throw new FindFileException ( "URL error: " + [[destroying]] ) ; } addPath ( [[lodging]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Includes the specified patterns.@param patterns the patterns to be included@return this finder --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[contain]] ( final String ... [[attitudes]] ) { for ( String [[patron]] : [[attitudes]] ) { rules . include ( [[patron]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Returns an iterator over the files in this directory. --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[spurting]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 982 ---------------------------------------------
Excludes all files that match the given patterns. --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[style]] ) { for ( String pattern : [[style]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Returns a buffered output writer. --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[pink]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 984 ---------------------------------------------
Returns the output stream for this output stream. --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[hasidic]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 985 ---------------------------------------------
Finds all files in the file system. --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[aggravation]] ( ) { List < File > [[soldering]] = new ArrayList <> ( ) ; File [[deposits]] ; while ( ( [[deposits]] = nextFile ( ) ) != null ) { [[soldering]] . add ( [[deposits]] ) ; } return [[soldering]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 986 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 769 / 19 / 986:  99%|█████████▊| 986/1000 [5:10:13<04:24, 18.88s/it][Succeeded / Failed / Skipped / Total] 198 / 769 / 19 / 986:  99%|█████████▊| 987/1000 [5:10:13<04:05, 18.86s/it][Succeeded / Failed / Skipped / Total] 198 / 770 / 19 / 987:  99%|█████████▊| 987/1000 [5:10:13<04:05, 18.86s/it][Succeeded / Failed / Skipped / Total] 198 / 770 / 19 / 987:  99%|█████████▉| 988/1000 [5:10:23<03:46, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 771 / 19 / 988:  99%|█████████▉| 988/1000 [5:10:23<03:46, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 771 / 19 / 988:  99%|█████████▉| 989/1000 [5:10:35<03:27, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 772 / 19 / 989:  99%|█████████▉| 989/1000 [5:10:35<03:27, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 772 / 19 / 989:  99%|█████████▉| 990/1000 [5:10:51<03:08, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 773 / 19 / 990:  99%|█████████▉| 990/1000 [5:10:51<03:08, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 773 / 19 / 990:  99%|█████████▉| 991/1000 [5:10:59<02:49, 18.83s/it]Initializes the rules. --> SCHRADER --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[schrader]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves the wiring mode for the given type. --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[bale]] ( final Class type ) { PetiteBean [[accumulate]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[accumulate]] != null ? [[accumulate]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Reads the verification type information from the specified frame. --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[distrust]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 989 ---------------------------------------------
Gets the class name of this object. --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[landscape]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the number of elements in this array. --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[modified]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
[Succeeded / Failed / Skipped / Total] 198 / 774 / 19 / 991:  99%|█████████▉| 991/1000 [5:10:59<02:49, 18.83s/it][Succeeded / Failed / Skipped / Total] 198 / 774 / 19 / 991:  99%|█████████▉| 992/1000 [5:11:36<02:30, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 775 / 19 / 992:  99%|█████████▉| 992/1000 [5:11:36<02:30, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 775 / 19 / 992:  99%|█████████▉| 993/1000 [5:11:57<02:11, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 776 / 19 / 993:  99%|█████████▉| 993/1000 [5:11:57<02:11, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 776 / 19 / 993:  99%|█████████▉| 994/1000 [5:12:03<01:53, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 777 / 19 / 994:  99%|█████████▉| 994/1000 [5:12:03<01:53, 18.84s/it][Succeeded / Failed / Skipped / Total] 198 / 777 / 19 / 994: 100%|█████████▉| 995/1000 [5:12:37<01:34, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 778 / 19 / 995: 100%|█████████▉| 995/1000 [5:12:37<01:34, 18.85s/it][Succeeded / Failed / Skipped / Total] 198 / 778 / 19 / 995: 100%|█████████▉| 996/1000 [5:13:12<01:15, 18.87s/it][Succeeded / Failed / Skipped / Total] 198 / 779 / 19 / 996: 100%|█████████▉| 996/1000 [5:13:12<01:15, 18.87s/it][Succeeded / Failed / Skipped / Total] 198 / 779 / 19 / 996: 100%|█████████▉| 997/1000 [5:13:29<00:56, 18.87s/it]--------------------------------------------- Result 991 ---------------------------------------------
Append the descriptor.@param stringBuilder the string builder --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[asbury]] ( final StringBuilder [[autographs]] ) { if ( sort == OBJECT ) { [[autographs]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[autographs]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[autographs]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Sets the rollback only flag. --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[zur]] ( final Throwable [[aussi]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[aussi]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the descriptor for the given constructor. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[lifeboats]] ( final Constructor < ? > [[contractor]] ) { StringBuilder [[convincing]] = new StringBuilder ( ) ; [[convincing]] . append ( ' ' ) ; Class < ? > [ ] [[algorithms]] = [[contractor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[algorithms]] ) { appendDescriptor ( parameter , [[convincing]] ) ; } return [[convincing]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 994 ---------------------------------------------
Get the number of arguments and return sizes for the given method descriptor. --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[sokka]] ( final String [[hundert]] ) { int [[innocence]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 995 ---------------------------------------------
Returns a description of the given method. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[tilo]] ( final Method [[manner]] ) { StringBuilder [[attaches]] = new StringBuilder ( ) ; [[attaches]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[manner]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[attaches]] ) ; } [[attaches]] . append ( ' ' ) ; appendDescriptor ( [[manner]] . getReturnType ( ) , [[attaches]] ) ; return [[attaches]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Returns a string representation of the method's descriptor. --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[argumentTypes]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[kazak]] ( final Type returnType , final Type ... [[bricklayers]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[bricklayers]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 997 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 780 / 19 / 997: 100%|█████████▉| 997/1000 [5:13:29<00:56, 18.87s/it][Succeeded / Failed / Skipped / Total] 198 / 780 / 19 / 997: 100%|█████████▉| 998/1000 [5:13:43<00:37, 18.86s/it][Succeeded / Failed / Skipped / Total] 198 / 781 / 19 / 998: 100%|█████████▉| 998/1000 [5:13:43<00:37, 18.86s/it][Succeeded / Failed / Skipped / Total] 198 / 781 / 19 / 998: 100%|█████████▉| 999/1000 [5:14:50<00:18, 18.91s/it][Succeeded / Failed / Skipped / Total] 198 / 782 / 19 / 999: 100%|█████████▉| 999/1000 [5:14:50<00:18, 18.91s/it][Succeeded / Failed / Skipped / Total] 198 / 782 / 19 / 999: 100%|██████████| 1000/1000 [5:15:10<00:00, 18.91s/it][Succeeded / Failed / Skipped / Total] 198 / 783 / 19 / 1000: 100%|██████████| 1000/1000 [5:15:10<00:00, 18.91s/it]/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/codegpt_models.py:966: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
[Succeeded / Failed / Skipped / Total] 198 / 783 / 19 / 1000: 100%|██████████| 1000/1000 [5:15:13<00:00, 18.91s/it]Commits or rolls back the transaction. --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[msg]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 998 ---------------------------------------------
Resolve bean name.@param type the type@param useLongTypeName the use long type name@return the bean name --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class [[type]] , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { name = [[type]] . getName ( ) ; } else { name = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[sputter]] ( final Class [[boyfriend]] , final boolean [[bluffing]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[boyfriend]] ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( [[bluffing]] ) { name = [[boyfriend]] . getName ( ) ; } else { name = StringUtil . uncapitalize ( [[boyfriend]] . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 999 ---------------------------------------------
Rollback all resources. --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Request a resource. --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 198    |
| Number of failed attacks:     | 783    |
| Number of skipped attacks:    | 19     |
| Original accuracy:            | 98.1%  |
| Accuracy under attack:        | 78.3%  |
| Attack success rate:          | 20.18% |
| Average perturbed word %:     | 61.17% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 180.86 |
| Original BLEU-4:              | 14.44  |
| Perturbed BLEU-4:             | 3.47   |
+-------------------------------+--------+


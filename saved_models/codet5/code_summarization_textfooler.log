textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1523.54it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1818.47it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2099.25it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2335.68it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2462.31it/s][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2572.14it/s][Succeeded / Failed / Skipped / Total] 1 / 6 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2631.78it/s]--------------------------------------------- Result 1 ---------------------------------------------
Perform a fast path ordered emit . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[schnauzer]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wraps an ObservableSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[tune]] ( ObservableSource < T > [[melt]] ) { ObjectHelper . requireNonNull ( [[melt]] , "source is null" ) ; if ( [[melt]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[melt]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[melt]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an observable that is sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[grade]] ( Comparator < ? super T > [[fixings]] ) { ObjectHelper . requireNonNull ( [[fixings]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[fixings]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[builds]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a ReplayableObservable that can be used to replay a ConnectableObservable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[metastasized]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[builds]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a Flowable that maps a single value to a single value . --> Bernhardt als kazimierz --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[bernhardt]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[kazimierz]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[kazimierz]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 8 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 7 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2673.45it/s][Succeeded / Failed / Skipped / Total] 1 / 8 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2621.26it/s][Succeeded / Failed / Skipped / Total] 1 / 9 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2690.90it/s][Succeeded / Failed / Skipped / Total] 1 / 10 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2758.59it/s][Succeeded / Failed / Skipped / Total] 2 / 10 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2756.24it/s]Reset all handlers to their default values . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[rebooting]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Try scalar x map subscribe . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[farmington]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[amsterdam]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Maybe from a SingleSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[ballad]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
Retry a Maybe by a given number of times . --> Retry a sequence of items for a given number of seasons --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[seasons]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[seasons]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 11 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2802.96it/s][Succeeded / Failed / Skipped / Total] 2 / 12 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2841.39it/s][Succeeded / Failed / Skipped / Total] 2 / 13 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2889.17it/s][Succeeded / Failed / Skipped / Total] 2 / 14 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2914.99it/s][Succeeded / Failed / Skipped / Total] 2 / 15 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2953.12it/s][Succeeded / Failed / Skipped / Total] 2 / 16 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2979.61it/s][Succeeded / Failed / Skipped / Total] 2 / 17 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 3004.29it/s][Succeeded / Failed / Skipped / Total] 2 / 18 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 3034.29it/s][Succeeded / Failed / Skipped / Total] 2 / 19 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 3043.24it/s][Succeeded / Failed / Skipped / Total] 2 / 20 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 3070.30it/s][Succeeded / Failed / Skipped / Total] 2 / 20 / 0 / 22:   2%|▏         | 23/1000 [00:08<06:16,  2.59it/s]  Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[tone]] > [[tone]] requireNonNull ( [[tone]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[sum]] > Function < [[sum]] , [[sum]] > [[fingerprinting]] ( ) { return ( Function < [[sum]] , [[sum]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a callable that returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[amphitheatre]] ( T [[valor]] ) { return new JustValue < Object , T > ( [[valor]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[shitloads]] , U > Function < [[shitloads]] , U > [[ileana]] ( U value ) { return new JustValue < [[shitloads]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[builds]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a function that casts a value to a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[could]] , U > Function < [[could]] , U > [[fatigue]] ( Class < U > target ) { return new CastToClass < [[could]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new unicast subject with the given capacity hint . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[establish]] ( int [[aerials]] ) { return new UnicastSubject < T > ( [[aerials]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[builds]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[establish]] ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 22 ---------------------------------------------
Wait for the thread to get an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[mahomet]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 23/1000 [00:08<06:16,  2.59it/s][Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▏         | 24/1000 [00:13<09:10,  1.77it/s][Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▏         | 24/1000 [00:20<13:33,  1.20it/s][Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▎         | 25/1000 [00:29<19:12,  1.18s/it][Succeeded / Failed / Skipped / Total] 3 / 22 / 0 / 25:   2%|▎         | 25/1000 [00:29<19:12,  1.18s/it][Succeeded / Failed / Skipped / Total] 3 / 22 / 0 / 25:   3%|▎         | 26/1000 [00:31<19:46,  1.22s/it][Succeeded / Failed / Skipped / Total] 3 / 23 / 0 / 26:   3%|▎         | 26/1000 [00:31<19:46,  1.22s/it][Succeeded / Failed / Skipped / Total] 3 / 23 / 0 / 26:   3%|▎         | 27/1000 [00:33<20:01,  1.24s/it][Succeeded / Failed / Skipped / Total] 3 / 24 / 0 / 27:   3%|▎         | 27/1000 [00:33<20:01,  1.24s/it][Succeeded / Failed / Skipped / Total] 3 / 24 / 0 / 27:   3%|▎         | 28/1000 [00:37<21:26,  1.32s/it][Succeeded / Failed / Skipped / Total] 3 / 25 / 0 / 28:   3%|▎         | 28/1000 [00:37<21:26,  1.32s/it][Succeeded / Failed / Skipped / Total] 3 / 25 / 0 / 28:   3%|▎         | 29/1000 [00:38<21:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 3 / 26 / 0 / 29:   3%|▎         | 29/1000 [00:38<21:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 3 / 26 / 0 / 29:   3%|▎         | 30/1000 [00:40<22:00,  1.36s/it]Returns the error or null if there is no error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[chrysanthemum]] ( long [[unsportsmanlike]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[unsportsmanlike]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[unsportsmanlike]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Requests the specified number of times for the given subscription . --> Request amphitheatre petitions --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[petitions]] ( Subscription s , int [[amphitheatre]] ) { s . request ( [[amphitheatre]] < 0 ? Long . MAX_VALUE : [[amphitheatre]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Completes the operation . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[conclusion]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 26 ---------------------------------------------
Await for this thread to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[nijmegen]] ( long [[pounce]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[pounce]] , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 27 ---------------------------------------------
Post a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[flamenco]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[country]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[country]] . get ( ) , actual , queue , [[country]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[country]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 28 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[americano]] ( ) { Object [[macao]] = value ; if ( [[macao]] != null && ! NotificationLite . isError ( [[macao]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[chrysanthemum]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 27 / 0 / 30:   3%|▎         | 30/1000 [00:40<22:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 3 / 27 / 0 / 30:   3%|▎         | 31/1000 [01:04<33:22,  2.07s/it][Succeeded / Failed / Skipped / Total] 3 / 28 / 0 / 31:   3%|▎         | 31/1000 [01:04<33:22,  2.07s/it][Succeeded / Failed / Skipped / Total] 3 / 29 / 0 / 32:   3%|▎         | 32/1000 [01:04<32:20,  2.00s/it][Succeeded / Failed / Skipped / Total] 3 / 29 / 0 / 32:   3%|▎         | 33/1000 [01:06<32:37,  2.02s/it][Succeeded / Failed / Skipped / Total] 3 / 30 / 0 / 33:   3%|▎         | 33/1000 [01:06<32:37,  2.02s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   3%|▎         | 34/1000 [01:08<32:36,  2.03s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   4%|▎         | 35/1000 [01:14<34:11,  2.13s/it]Drains the maximum loop . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[a]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[a]] , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( [[a]] , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[a]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = qd . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[sanctimonious]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[into]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[fails]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[into]] , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( [[into]] , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[into]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[fails]] = qd . leave ( - [[fails]] ) ; if ( [[fails]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Validates that the upstream and the next disposable are disposed . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable [[arrival]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[arrival]] , "next is null" ) ; if ( upstream != null ) { [[arrival]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Validates a subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[arriba]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[arriba]] != null ) { next . cancel ( ) ; if ( [[arriba]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Sets the next subscription to the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[amsterdam]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[["Counterfeit" != "Counterfeit"]]" != "[["Counterfeit" != "Counterfeit"]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 34 ---------------------------------------------
Add a and b to the cap . --> zigi ( a + b ) --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[zigi]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 31 / 0 / 35:   4%|▎         | 35/1000 [01:14<34:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 36/1000 [01:17<34:47,  2.17s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 37/1000 [01:19<34:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▎         | 37/1000 [01:19<34:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 38/1000 [01:25<36:14,  2.26s/it][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 39/1000 [01:29<36:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 4 / 35 / 0 / 39:   4%|▍         | 39/1000 [01:29<36:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 40/1000 [01:35<38:01,  2.38s/it][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 41/1000 [01:37<38:05,  2.38s/it][Succeeded / Failed / Skipped / Total] 4 / 37 / 0 / 41:   4%|▍         | 41/1000 [01:37<38:05,  2.38s/it][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 42/1000 [01:41<38:37,  2.42s/it][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 43/1000 [01:43<38:13,  2.40s/it][Succeeded / Failed / Skipped / Total] 4 / 39 / 0 / 43:   4%|▍         | 43/1000 [01:43<38:13,  2.40s/it]Sets the given AtomicReference to the given next Disposable . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[ricocheting]] ( AtomicReference < Disposable > [[maximum]] , Disposable [[beside]] , Class < ? > [[observant]] ) { ObjectHelper . requireNonNull ( [[beside]] , "next is null" ) ; if ( ! [[maximum]] . compareAndSet ( null , [[beside]] ) ) { [[beside]] . dispose ( ) ; if ( [[maximum]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observant]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Multiply a by b . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[jeremiah]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 37 ---------------------------------------------
Convert an exception to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[brampton]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[foreclosure]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Adds n to the requested AtomicLong . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long [[n]] ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[n]] ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[incorporated]] ( AtomicLong [[sought]] , long [[latitude]] ) { for ( ; ; ) { long r = [[sought]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[latitude]] ) ; if ( [[sought]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Adds an object to the list of objects . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[totalled]] ( Object [[neither]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new ScheduledExecutorService with the given thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[engenders]] ( ThreadFactory factory ) { final ScheduledExecutorService [[shebang]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[shebang]] ) ; return [[shebang]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
This is the main loop of the loop . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = False ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[ileana]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[press]] ; synchronized ( this ) { [[press]] = queue ; if ( [[press]] == null ) { emitting = False ; return ; } queue = null ; } [[press]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps the given error if it is an Error or a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[apeman]] ( Throwable [[anomaly]] ) { if ( [[anomaly]] instanceof Error ) { throw ( Error ) [[anomaly]] ; } if ( [[anomaly]] instanceof RuntimeException ) { return ( RuntimeException ) [[anomaly]] ; } return new RuntimeException ( [[anomaly]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 40 / 0 / 44:   4%|▍         | 44/1000 [01:47<38:53,  2.44s/it][Succeeded / Failed / Skipped / Total] 4 / 40 / 0 / 44:   4%|▍         | 45/1000 [01:49<38:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 4 / 41 / 0 / 45:   4%|▍         | 45/1000 [01:49<38:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 4 / 42 / 0 / 46:   5%|▍         | 46/1000 [01:50<38:08,  2.40s/it][Succeeded / Failed / Skipped / Total] 4 / 42 / 0 / 46:   5%|▍         | 47/1000 [01:55<39:08,  2.46s/it][Succeeded / Failed / Skipped / Total] 4 / 43 / 0 / 47:   5%|▍         | 47/1000 [01:55<39:08,  2.46s/it][Succeeded / Failed / Skipped / Total] 4 / 44 / 0 / 48:   5%|▍         | 48/1000 [02:03<40:56,  2.58s/it][Succeeded / Failed / Skipped / Total] 4 / 44 / 0 / 48:   5%|▍         | 48/1000 [02:10<42:58,  2.71s/it][Succeeded / Failed / Skipped / Total] 4 / 44 / 0 / 48:   5%|▍         | 49/1000 [02:14<43:28,  2.74s/it][Succeeded / Failed / Skipped / Total] 4 / 45 / 0 / 49:   5%|▍         | 49/1000 [02:14<43:28,  2.74s/it][Succeeded / Failed / Skipped / Total] 4 / 45 / 0 / 49:   5%|▌         | 50/1000 [02:19<44:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 4 / 46 / 0 / 50:   5%|▌         | 50/1000 [02:19<44:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 4 / 46 / 0 / 50:   5%|▌         | 51/1000 [02:23<44:37,  2.82s/it][Succeeded / Failed / Skipped / Total] 4 / 47 / 0 / 51:   5%|▌         | 51/1000 [02:23<44:37,  2.82s/it][Succeeded / Failed / Skipped / Total] 4 / 47 / 0 / 51:   5%|▌         | 52/1000 [02:25<44:10,  2.80s/it]Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[bugged]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[esta]] = actual ; if ( [[esta]] != null && cancelOnReplace ) { [[esta]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[esta]] = missedSubscription . getAndSet ( s ) ; if ( [[esta]] != null && cancelOnReplace ) { [[esta]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 45 ---------------------------------------------
If the Throwable is an Exception return it otherwise throw it . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[engels]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[engels]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[engels]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 46 ---------------------------------------------
Removes all resources from the set . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[claire]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources in this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[amount]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[created]] = resources ; return [[created]] != null ? [[created]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Creates an observable that maps a scalar value to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[kazimierz]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 49 ---------------------------------------------
Flattens an exception to a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[annihilate]] ( Throwable [[millions]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[millions]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[variance]] = ce . getExceptions ( ) ; for ( int i = [[variance]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[variance]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 50 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the queue with an empty subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[eliza]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 48 / 0 / 52:   5%|▌         | 52/1000 [02:25<44:10,  2.80s/it][Succeeded / Failed / Skipped / Total] 4 / 48 / 0 / 52:   5%|▌         | 53/1000 [02:29<44:35,  2.83s/it][Succeeded / Failed / Skipped / Total] 4 / 49 / 0 / 53:   5%|▌         | 53/1000 [02:29<44:35,  2.83s/it][Succeeded / Failed / Skipped / Total] 4 / 49 / 0 / 53:   5%|▌         | 54/1000 [02:33<44:41,  2.83s/it][Succeeded / Failed / Skipped / Total] 4 / 50 / 0 / 54:   5%|▌         | 54/1000 [02:33<44:41,  2.83s/it][Succeeded / Failed / Skipped / Total] 4 / 50 / 0 / 54:   6%|▌         | 55/1000 [02:33<43:53,  2.79s/it][Succeeded / Failed / Skipped / Total] 4 / 51 / 0 / 55:   6%|▌         | 55/1000 [02:33<43:53,  2.79s/it][Succeeded / Failed / Skipped / Total] 4 / 51 / 0 / 55:   6%|▌         | 56/1000 [02:39<44:55,  2.86s/it][Succeeded / Failed / Skipped / Total] 4 / 52 / 0 / 56:   6%|▌         | 56/1000 [02:39<44:55,  2.86s/it][Succeeded / Failed / Skipped / Total] 4 / 52 / 0 / 56:   6%|▌         | 57/1000 [02:45<45:31,  2.90s/it][Succeeded / Failed / Skipped / Total] 4 / 53 / 0 / 57:   6%|▌         | 57/1000 [02:45<45:31,  2.90s/it][Succeeded / Failed / Skipped / Total] 4 / 53 / 0 / 57:   6%|▌         | 58/1000 [02:46<45:08,  2.88s/it]Try a scalar x map subscribe . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[jennie]] ( ObservableSource < T > [[wellspring]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[wellspring]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[wellspring]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 53 ---------------------------------------------
Returns true if all of the elements in the queue are accepted by the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[concede]] ( Subscriber < ? super U > [[clientele]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[clientele]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 54 ---------------------------------------------
Adds an observer to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[acknowledge]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 55 ---------------------------------------------
Returns the disposed resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[acquiring]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 56 ---------------------------------------------
Adds a new item to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[furnishes]] ( T [[m]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[m]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[m]] ) ) { drain ( ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 57 ---------------------------------------------
Sends an error to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[abnormalities]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 54 / 0 / 58:   6%|▌         | 58/1000 [02:46<45:08,  2.88s/it][Succeeded / Failed / Skipped / Total] 4 / 54 / 0 / 58:   6%|▌         | 59/1000 [02:48<44:44,  2.85s/it][Succeeded / Failed / Skipped / Total] 4 / 55 / 0 / 59:   6%|▌         | 59/1000 [02:48<44:44,  2.85s/it][Succeeded / Failed / Skipped / Total] 4 / 55 / 0 / 59:   6%|▌         | 60/1000 [02:56<46:12,  2.95s/it][Succeeded / Failed / Skipped / Total] 4 / 56 / 0 / 60:   6%|▌         | 60/1000 [02:56<46:12,  2.95s/it][Succeeded / Failed / Skipped / Total] 4 / 56 / 0 / 60:   6%|▌         | 61/1000 [02:57<45:36,  2.91s/it][Succeeded / Failed / Skipped / Total] 4 / 57 / 0 / 61:   6%|▌         | 61/1000 [02:57<45:36,  2.91s/it][Succeeded / Failed / Skipped / Total] 4 / 57 / 0 / 61:   6%|▌         | 62/1000 [02:58<45:05,  2.88s/it][Succeeded / Failed / Skipped / Total] 4 / 58 / 0 / 62:   6%|▌         | 62/1000 [02:58<45:05,  2.88s/it][Succeeded / Failed / Skipped / Total] 4 / 58 / 0 / 62:   6%|▋         | 63/1000 [03:03<45:23,  2.91s/it][Succeeded / Failed / Skipped / Total] 4 / 59 / 0 / 63:   6%|▋         | 63/1000 [03:03<45:23,  2.91s/it][Succeeded / Failed / Skipped / Total] 4 / 59 / 0 / 63:   6%|▋         | 64/1000 [03:20<48:51,  3.13s/it][Succeeded / Failed / Skipped / Total] 4 / 60 / 0 / 64:   6%|▋         | 64/1000 [03:20<48:51,  3.13s/it][Succeeded / Failed / Skipped / Total] 4 / 60 / 0 / 64:   6%|▋         | 65/1000 [03:21<48:16,  3.10s/it][Succeeded / Failed / Skipped / Total] 4 / 61 / 0 / 65:   6%|▋         | 65/1000 [03:21<48:16,  3.10s/it][Succeeded / Failed / Skipped / Total] 4 / 61 / 0 / 65:   7%|▋         | 66/1000 [03:22<47:48,  3.07s/it]Completes the observer with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[exhaustive]] ( T [[rating]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[rating]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[rating]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[concluding]] ( ) { int [[territory]] = get ( ) ; if ( ( [[territory]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 60 ---------------------------------------------
Returns a Flowable consisting of the items in this sequence sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sort]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 61 ---------------------------------------------
Returns a Flowable consisting of the results of applying the provided function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[silvery]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[bustamante]] ) { return [[silvery]] ( [[bustamante]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Wait for the specified number of times to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[hoped]] ( int [[tells]] ) { if ( [[tells]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[hoped]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a Flowable consisting of the results of applying the given function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[hobbling]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[blanch]] ) { return [[hobbling]] ( [[blanch]] , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 64 ---------------------------------------------
Replays a ConnectableFlowable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 65 ---------------------------------------------
Requests the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . [[upstream]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[demanded]] ( long n ) { Subscription s = this . [[ascend]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 62 / 0 / 66:   7%|▋         | 66/1000 [03:22<47:48,  3.07s/it][Succeeded / Failed / Skipped / Total] 4 / 62 / 0 / 66:   7%|▋         | 67/1000 [03:23<47:16,  3.04s/it][Succeeded / Failed / Skipped / Total] 4 / 63 / 0 / 67:   7%|▋         | 67/1000 [03:23<47:16,  3.04s/it][Succeeded / Failed / Skipped / Total] 4 / 63 / 0 / 67:   7%|▋         | 68/1000 [03:30<47:59,  3.09s/it][Succeeded / Failed / Skipped / Total] 4 / 64 / 0 / 68:   7%|▋         | 68/1000 [03:30<47:59,  3.09s/it][Succeeded / Failed / Skipped / Total] 4 / 64 / 0 / 68:   7%|▋         | 69/1000 [03:34<48:16,  3.11s/it][Succeeded / Failed / Skipped / Total] 4 / 65 / 0 / 69:   7%|▋         | 69/1000 [03:34<48:16,  3.11s/it][Succeeded / Failed / Skipped / Total] 4 / 65 / 0 / 69:   7%|▋         | 70/1000 [03:39<48:32,  3.13s/it][Succeeded / Failed / Skipped / Total] 4 / 66 / 0 / 70:   7%|▋         | 70/1000 [03:39<48:32,  3.13s/it][Succeeded / Failed / Skipped / Total] 4 / 66 / 0 / 70:   7%|▋         | 71/1000 [03:43<48:39,  3.14s/it][Succeeded / Failed / Skipped / Total] 4 / 67 / 0 / 71:   7%|▋         | 71/1000 [03:43<48:39,  3.14s/it][Succeeded / Failed / Skipped / Total] 4 / 67 / 0 / 71:   7%|▋         | 72/1000 [03:43<47:57,  3.10s/it][Succeeded / Failed / Skipped / Total] 4 / 68 / 0 / 72:   7%|▋         | 72/1000 [03:43<47:57,  3.10s/it][Succeeded / Failed / Skipped / Total] 4 / 68 / 0 / 72:   7%|▋         | 73/1000 [03:50<48:43,  3.15s/it]Removes a subscriber from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[n]] ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[n]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[erase]] ( PublishDisposable < T > [[aps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[cent]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[cent]] ; i ++ ) { if ( a [ i ] == [[aps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[cent]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[cent]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[cent]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Adds a subscriber to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return False ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[cumulative]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[cada]] = subscribers . get ( ) ; if ( [[cada]] == TERMINATED ) { return False ; } int n = [[cada]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[cada]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[cada]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 68 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[dissertation]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[josiah]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[freefall]] ( long [[figurines]] , TimeUnit [[grouping]] ) { if ( [[figurines]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[grouping]] . toMillis ( [[figurines]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 71 ---------------------------------------------
Returns the HttpMethod object for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[jennie]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
Create the sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[jeremiah]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[letterhead]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 69 / 0 / 73:   7%|▋         | 73/1000 [03:50<48:43,  3.15s/it][Succeeded / Failed / Skipped / Total] 4 / 69 / 0 / 73:   7%|▋         | 74/1000 [03:55<49:09,  3.18s/it][Succeeded / Failed / Skipped / Total] 5 / 69 / 0 / 74:   7%|▋         | 74/1000 [03:55<49:09,  3.18s/it][Succeeded / Failed / Skipped / Total] 5 / 69 / 0 / 74:   8%|▊         | 75/1000 [03:57<48:54,  3.17s/it][Succeeded / Failed / Skipped / Total] 5 / 70 / 0 / 75:   8%|▊         | 75/1000 [03:57<48:54,  3.17s/it][Succeeded / Failed / Skipped / Total] 5 / 70 / 0 / 75:   8%|▊         | 76/1000 [04:05<49:39,  3.22s/it][Succeeded / Failed / Skipped / Total] 5 / 71 / 0 / 76:   8%|▊         | 76/1000 [04:05<49:39,  3.22s/it][Succeeded / Failed / Skipped / Total] 5 / 71 / 0 / 76:   8%|▊         | 77/1000 [04:08<49:38,  3.23s/it][Succeeded / Failed / Skipped / Total] 5 / 72 / 0 / 77:   8%|▊         | 77/1000 [04:08<49:38,  3.23s/it][Succeeded / Failed / Skipped / Total] 5 / 73 / 0 / 78:   8%|▊         | 78/1000 [04:08<48:57,  3.19s/it][Succeeded / Failed / Skipped / Total] 5 / 73 / 0 / 78:   8%|▊         | 79/1000 [04:14<49:25,  3.22s/it]Search for a user in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[instances]] ( String [[cardholder]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[cardholder]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[cardholder]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[cardholder]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Perform version checks . --> If minSpringVersion is null then do nothing . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[adder]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[brandy]] ) { String [[acidity]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[acidity]] , [[brandy]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Gets the Spring version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[ara]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 77 ---------------------------------------------
Parses the method annotations and returns a service method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit [[adjust]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 78 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[pairs]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 74 / 0 / 79:   8%|▊         | 79/1000 [04:14<49:25,  3.22s/it][Succeeded / Failed / Skipped / Total] 6 / 74 / 0 / 80:   8%|▊         | 80/1000 [04:19<49:45,  3.25s/it][Succeeded / Failed / Skipped / Total] 6 / 74 / 0 / 80:   8%|▊         | 81/1000 [04:20<49:13,  3.21s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 0 / 81:   8%|▊         | 81/1000 [04:20<49:13,  3.21s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 0 / 82:   8%|▊         | 82/1000 [04:21<48:44,  3.19s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 0 / 82:   8%|▊         | 83/1000 [04:24<48:36,  3.18s/it][Succeeded / Failed / Skipped / Total] 7 / 76 / 0 / 83:   8%|▊         | 83/1000 [04:24<48:36,  3.18s/it][Succeeded / Failed / Skipped / Total] 7 / 77 / 0 / 84:   8%|▊         | 84/1000 [04:38<50:40,  3.32s/it][Succeeded / Failed / Skipped / Total] 7 / 77 / 0 / 84:   8%|▊         | 84/1000 [04:40<50:53,  3.33s/it][Succeeded / Failed / Skipped / Total] 7 / 77 / 0 / 84:   8%|▊         | 85/1000 [04:42<50:39,  3.32s/it][Succeeded / Failed / Skipped / Total] 7 / 78 / 0 / 85:   8%|▊         | 85/1000 [04:42<50:39,  3.32s/it][Succeeded / Failed / Skipped / Total] 7 / 78 / 0 / 85:   9%|▊         | 86/1000 [04:50<51:31,  3.38s/it][Succeeded / Failed / Skipped / Total] 8 / 78 / 0 / 86:   9%|▊         | 86/1000 [04:50<51:31,  3.38s/it][Succeeded / Failed / Skipped / Total] 8 / 78 / 0 / 86:   9%|▊         | 87/1000 [04:55<51:37,  3.39s/it]Returns true if the checks should be disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[alleging]] ( String [[disciplining]] , String [[debutante]] ) { if ( [[disciplining]] == null || [[disciplining]] . equals ( [[debutante]] ) ) { return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 80 ---------------------------------------------
Get the OAuth2 client . --> Returns a new instance of OAuth2ClientConfigurer that can be used to create a new instance of OAuth2ClientConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[compact]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[milligram]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[milligram]] ) ; return [[milligram]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Get the OAuth2 resource server configurer . --> Returns a new instance of the OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[waiver]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[caution]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[caution]] ) ; return [[caution]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 82 ---------------------------------------------
Creates a new attribute exchange configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . [[attributeExchangeConfigurers]] . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[laurels]] ( String identifierPattern ) { AttributeExchangeConfigurer [[audible]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . [[simmer]] . add ( [[audible]] ) ; return [[audible]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 83 ---------------------------------------------
Returns a ChannelRequestMatcherRegistry that can be used to configure the request matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[khun]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieve an entry from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[debutante]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[greaseball]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] [[params]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[abolished]] ( final String base , final String filter , final Object [ ] [[axes]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
Build the search controls . --> brimstone sparrowhawk --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[brimstone]] ( SearchControls [[sparrowhawk]] ) { return new SearchControls ( [[sparrowhawk]] . getSearchScope ( ) , [[sparrowhawk]] . getCountLimit ( ) , [[sparrowhawk]] . getTimeLimit ( ) , [[sparrowhawk]] . getReturningAttributes ( ) , RETURN_OBJECT , [[sparrowhawk]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 79 / 0 / 87:   9%|▊         | 87/1000 [04:55<51:37,  3.39s/it][Succeeded / Failed / Skipped / Total] 8 / 79 / 0 / 87:   9%|▉         | 88/1000 [04:59<51:47,  3.41s/it][Succeeded / Failed / Skipped / Total] 8 / 80 / 0 / 88:   9%|▉         | 88/1000 [04:59<51:47,  3.41s/it][Succeeded / Failed / Skipped / Total] 8 / 80 / 0 / 88:   9%|▉         | 89/1000 [05:19<54:30,  3.59s/it][Succeeded / Failed / Skipped / Total] 8 / 81 / 0 / 89:   9%|▉         | 89/1000 [05:19<54:30,  3.59s/it][Succeeded / Failed / Skipped / Total] 8 / 81 / 0 / 89:   9%|▉         | 90/1000 [05:24<54:40,  3.60s/it]Compares the specified attribute with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String [[attributeName]] , final Object value ) { final String [[comparisonFilter]] = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = ctx . search ( dn , [[comparisonFilter]] , new Object [ ] { value } , ctls ) ; Boolean [[match]] = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return [[match]] ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[assimilated]] ( final String dn , final String [[tomoya]] , final Object value ) { final String [[ensenada]] = "(" + [[tomoya]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[fruit]] = ctx . search ( dn , [[ensenada]] , new Object [ ] { value } , ctls ) ; Boolean [[ballgame]] = Boolean . valueOf ( [[fruit]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[fruit]] ) ; return [[ballgame]] ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 88 ---------------------------------------------
Search for a single attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[kopecks]] ( final String base , final String [[skimmer]] , final Object [ ] params , final String attributeName ) { String [ ] [[asset]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[skimmer]] , params , [[asset]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 89 ---------------------------------------------
Search for a single entry . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[beagles]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 81 / 0 / 90:   9%|▉         | 90/1000 [05:24<54:40,  3.60s/it][Succeeded / Failed / Skipped / Total] 9 / 81 / 0 / 90:   9%|▉         | 91/1000 [05:24<54:04,  3.57s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 0 / 91:   9%|▉         | 91/1000 [05:24<54:04,  3.57s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 0 / 91:   9%|▉         | 92/1000 [05:27<53:56,  3.56s/it][Succeeded / Failed / Skipped / Total] 9 / 83 / 0 / 92:   9%|▉         | 92/1000 [05:27<53:56,  3.56s/it][Succeeded / Failed / Skipped / Total] 9 / 83 / 0 / 92:   9%|▉         | 93/1000 [05:29<53:30,  3.54s/it]Create servlet - api - filter . --> Bridge port . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[bridgeport]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Finds all the primary keys in the given list of sids . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[cliffhanger]] ( final Map < Serializable , Acl > acls , final Set < Long > [[albino]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[albino]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[albino]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[albino]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 92 ---------------------------------------------
Build a PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[butchers]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 84 / 0 / 93:   9%|▉         | 93/1000 [05:29<53:30,  3.54s/it][Succeeded / Failed / Skipped / Total] 9 / 84 / 0 / 93:   9%|▉         | 94/1000 [05:32<53:24,  3.54s/it][Succeeded / Failed / Skipped / Total] 10 / 84 / 0 / 94:   9%|▉         | 94/1000 [05:32<53:24,  3.54s/it][Succeeded / Failed / Skipped / Total] 10 / 84 / 0 / 94:  10%|▉         | 95/1000 [05:34<53:05,  3.52s/it][Succeeded / Failed / Skipped / Total] 10 / 85 / 0 / 95:  10%|▉         | 95/1000 [05:34<53:05,  3.52s/it][Succeeded / Failed / Skipped / Total] 10 / 85 / 0 / 95:  10%|▉         | 96/1000 [05:37<53:01,  3.52s/it][Succeeded / Failed / Skipped / Total] 11 / 85 / 0 / 96:  10%|▉         | 96/1000 [05:37<53:01,  3.52s/it][Succeeded / Failed / Skipped / Total] 11 / 85 / 0 / 96:  10%|▉         | 97/1000 [05:42<53:06,  3.53s/it]Creates the embedded server . --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[belladonna]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 94 ---------------------------------------------
Adds the Spring security filter chain to the servlet context . --> Insert a spring security filter chain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[servletContext]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[servletContext]] , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[doña]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[doña]] , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 95 ---------------------------------------------
Create a WhitelistedTypeResolverBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[ability]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[achievement]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[achievement]] = [[achievement]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[achievement]] = [[achievement]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[achievement]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 96 ---------------------------------------------
Create the JAAS API filter . --> Anisette anisette . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[anisette]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 97 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 86 / 0 / 97:  10%|▉         | 97/1000 [05:42<53:06,  3.53s/it][Succeeded / Failed / Skipped / Total] 11 / 86 / 0 / 97:  10%|▉         | 98/1000 [05:43<52:37,  3.50s/it][Succeeded / Failed / Skipped / Total] 11 / 87 / 0 / 98:  10%|▉         | 98/1000 [05:43<52:37,  3.50s/it][Succeeded / Failed / Skipped / Total] 11 / 88 / 0 / 99:  10%|▉         | 99/1000 [05:43<52:03,  3.47s/it][Succeeded / Failed / Skipped / Total] 11 / 88 / 0 / 99:  10%|█         | 100/1000 [05:49<52:26,  3.50s/it][Succeeded / Failed / Skipped / Total] 11 / 89 / 0 / 100:  10%|█         | 100/1000 [05:49<52:26,  3.50s/it][Succeeded / Failed / Skipped / Total] 11 / 90 / 0 / 101:  10%|█         | 101/1000 [05:58<53:07,  3.55s/it][Succeeded / Failed / Skipped / Total] 11 / 90 / 0 / 101:  10%|█         | 101/1000 [06:00<53:24,  3.56s/it][Succeeded / Failed / Skipped / Total] 11 / 90 / 0 / 101:  10%|█         | 102/1000 [06:03<53:16,  3.56s/it]Creates a new cipher with the specified algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[bestseller]] ( String [[coded]] ) { try { return Cipher . getInstance ( [[coded]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 98 ---------------------------------------------
Override afterPropertiesSet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[nunchaku]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 99 ---------------------------------------------
Get the token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[reign]] ( String [[marissa]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[percent]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[percent]] . getString ( 1 ) , [[percent]] . getString ( 2 ) , [[percent]] . getString ( 3 ) , [[percent]] . getTimestamp ( 4 ) ) ; } } , [[marissa]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[marissa]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[marissa]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[marissa]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the list of authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[cochise]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[habits]] : attributes ) { result . add ( getGrantedAuthority ( [[habits]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Checks the secure context token . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[aishwarya]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 91 / 0 / 102:  10%|█         | 102/1000 [06:03<53:16,  3.56s/it][Succeeded / Failed / Skipped / Total] 11 / 91 / 0 / 102:  10%|█         | 103/1000 [06:11<53:52,  3.60s/it][Succeeded / Failed / Skipped / Total] 11 / 92 / 0 / 103:  10%|█         | 103/1000 [06:11<53:52,  3.60s/it][Succeeded / Failed / Skipped / Total] 11 / 92 / 0 / 103:  10%|█         | 104/1000 [06:14<53:46,  3.60s/it][Succeeded / Failed / Skipped / Total] 11 / 93 / 0 / 104:  10%|█         | 104/1000 [06:14<53:46,  3.60s/it][Succeeded / Failed / Skipped / Total] 11 / 93 / 0 / 104:  10%|█         | 105/1000 [06:16<53:28,  3.58s/it][Succeeded / Failed / Skipped / Total] 11 / 94 / 0 / 105:  10%|█         | 105/1000 [06:16<53:28,  3.58s/it][Succeeded / Failed / Skipped / Total] 11 / 94 / 0 / 105:  11%|█         | 106/1000 [06:20<53:28,  3.59s/it][Succeeded / Failed / Skipped / Total] 11 / 95 / 0 / 106:  11%|█         | 106/1000 [06:20<53:28,  3.59s/it][Succeeded / Failed / Skipped / Total] 11 / 95 / 0 / 106:  11%|█         | 107/1000 [06:21<53:07,  3.57s/it]Perform the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[harmonia]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 103 ---------------------------------------------
Checks if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[maricón]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing URL . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[guerra]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[guerra]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[guerra]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Maps a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[zuzu]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
Update authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[limped]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[affiliations]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[affiliations]] != null && ! [[affiliations]] . isCustomLogoutSuccess ( ) ) { [[affiliations]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 96 / 0 / 107:  11%|█         | 107/1000 [06:21<53:07,  3.57s/it][Succeeded / Failed / Skipped / Total] 11 / 96 / 0 / 107:  11%|█         | 108/1000 [06:23<52:43,  3.55s/it][Succeeded / Failed / Skipped / Total] 11 / 97 / 0 / 108:  11%|█         | 108/1000 [06:23<52:43,  3.55s/it][Succeeded / Failed / Skipped / Total] 11 / 97 / 0 / 108:  11%|█         | 109/1000 [06:24<52:19,  3.52s/it][Succeeded / Failed / Skipped / Total] 11 / 98 / 0 / 109:  11%|█         | 109/1000 [06:24<52:19,  3.52s/it][Succeeded / Failed / Skipped / Total] 11 / 98 / 0 / 109:  11%|█         | 110/1000 [06:35<53:17,  3.59s/it][Succeeded / Failed / Skipped / Total] 11 / 99 / 0 / 110:  11%|█         | 110/1000 [06:35<53:17,  3.59s/it][Succeeded / Failed / Skipped / Total] 11 / 99 / 0 / 110:  11%|█         | 111/1000 [06:43<53:51,  3.64s/it][Succeeded / Failed / Skipped / Total] 11 / 100 / 0 / 111:  11%|█         | 111/1000 [06:43<53:51,  3.64s/it][Succeeded / Failed / Skipped / Total] 11 / 100 / 0 / 111:  11%|█         | 112/1000 [06:52<54:29,  3.68s/it][Succeeded / Failed / Skipped / Total] 11 / 101 / 0 / 112:  11%|█         | 112/1000 [06:52<54:29,  3.68s/it][Succeeded / Failed / Skipped / Total] 11 / 101 / 0 / 112:  11%|█▏        | 113/1000 [06:52<54:01,  3.65s/it][Succeeded / Failed / Skipped / Total] 11 / 102 / 0 / 113:  11%|█▏        | 113/1000 [06:52<54:01,  3.65s/it][Succeeded / Failed / Skipped / Total] 11 / 102 / 0 / 113:  11%|█▏        | 114/1000 [06:54<53:40,  3.63s/it]Check the content length of the response . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[bertolucci]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[accuracy]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[accuracy]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 108 ---------------------------------------------
Update access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[brandished]] ( B [[howto]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[howto]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 109 ---------------------------------------------
Maps a password value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[july]] ( Object [[masami]] ) { if ( ! ( [[masami]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Extracts the remember me cookie from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[mourning]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Encodes the given cookie tokens into a base64 encoded string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String [[value]] = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[purdue]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[purdue]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[purdue]] . append ( DELIMITER ) ; } } String [[rating]] = [[purdue]] . toString ( ) ; [[purdue]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[rating]] . getBytes ( ) ) ) ) ; while ( [[purdue]] . charAt ( [[purdue]] . length ( ) - 1 ) == ' ' ) { [[purdue]] . deleteCharAt ( [[purdue]] . length ( ) - 1 ) ; } return [[purdue]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[beaulieu]] ( final HttpServletRequest [[demanded]] , final Pattern artifactPattern ) { final String [[consultancy]] = [[demanded]] . getQueryString ( ) ; if ( [[consultancy]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[consultancy]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 113 ---------------------------------------------
Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[hervé]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
[Succeeded / Failed / Skipped / Total] 11 / 103 / 0 / 114:  11%|█▏        | 114/1000 [06:54<53:40,  3.63s/it][Succeeded / Failed / Skipped / Total] 11 / 103 / 0 / 114:  12%|█▏        | 115/1000 [06:55<53:15,  3.61s/it][Succeeded / Failed / Skipped / Total] 11 / 104 / 0 / 115:  12%|█▏        | 115/1000 [06:55<53:15,  3.61s/it][Succeeded / Failed / Skipped / Total] 11 / 104 / 0 / 115:  12%|█▏        | 116/1000 [06:58<53:08,  3.61s/it][Succeeded / Failed / Skipped / Total] 12 / 104 / 0 / 116:  12%|█▏        | 116/1000 [06:58<53:08,  3.61s/it][Succeeded / Failed / Skipped / Total] 12 / 104 / 0 / 116:  12%|█▏        | 117/1000 [07:06<53:36,  3.64s/it][Succeeded / Failed / Skipped / Total] 12 / 105 / 0 / 117:  12%|█▏        | 117/1000 [07:06<53:36,  3.64s/it][Succeeded / Failed / Skipped / Total] 12 / 105 / 0 / 117:  12%|█▏        | 118/1000 [07:09<53:32,  3.64s/it][Succeeded / Failed / Skipped / Total] 12 / 106 / 0 / 118:  12%|█▏        | 118/1000 [07:09<53:32,  3.64s/it][Succeeded / Failed / Skipped / Total] 12 / 106 / 0 / 118:  12%|█▏        | 119/1000 [07:09<53:03,  3.61s/it][Succeeded / Failed / Skipped / Total] 12 / 107 / 0 / 119:  12%|█▏        | 119/1000 [07:09<53:03,  3.61s/it][Succeeded / Failed / Skipped / Total] 12 / 107 / 0 / 119:  12%|█▏        | 120/1000 [07:14<53:06,  3.62s/it][Succeeded / Failed / Skipped / Total] 12 / 108 / 0 / 120:  12%|█▏        | 120/1000 [07:14<53:06,  3.62s/it][Succeeded / Failed / Skipped / Total] 12 / 108 / 0 / 120:  12%|█▏        | 121/1000 [07:20<53:17,  3.64s/it]--------------------------------------------- Result 114 ---------------------------------------------
Resolve an argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? o : Mono . just ( [[adapter]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[consulting]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[adapts]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[adapts]] == null ? o : Mono . just ( [[adapts]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 115 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[chainsaw]] ( URL [[mohsen]] ) { int [[piero]] = [[mohsen]] . getPort ( ) ; if ( [[piero]] == - 1 ) { [[piero]] = [[mohsen]] . getDefaultPort ( ) ; } return [[piero]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 116 ---------------------------------------------
Authenticate the given authentication . --> Authenticates a username - password token . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[annoyances]] ) throws AuthenticationException { if ( ! ( [[annoyances]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[annoyances]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 117 ---------------------------------------------
Gets the principal from the SecurityContext . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[franziska]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[herzegovina]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Returns the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
Write the secured ui suffix to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[murakami]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 109 / 0 / 121:  12%|█▏        | 121/1000 [07:20<53:17,  3.64s/it][Succeeded / Failed / Skipped / Total] 12 / 109 / 0 / 121:  12%|█▏        | 122/1000 [07:22<53:03,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 110 / 0 / 122:  12%|█▏        | 122/1000 [07:22<53:03,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 111 / 0 / 123:  12%|█▏        | 123/1000 [07:22<52:34,  3.60s/it][Succeeded / Failed / Skipped / Total] 12 / 111 / 0 / 123:  12%|█▏        | 124/1000 [07:29<52:57,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 112 / 0 / 124:  12%|█▏        | 124/1000 [07:29<52:57,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 0 / 125:  12%|█▎        | 125/1000 [07:36<53:12,  3.65s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 0 / 125:  12%|█▎        | 125/1000 [07:40<53:40,  3.68s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 0 / 125:  13%|█▎        | 126/1000 [07:43<53:33,  3.68s/it]Build the provider URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 122 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[johnnies]] ( ) throws Exception { for ( UserDetailsBuilder [[braiding]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[braiding]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 123 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[siste]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Logout the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[hinted]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 125 ---------------------------------------------
Service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[nathanson]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 114 / 0 / 126:  13%|█▎        | 126/1000 [07:43<53:33,  3.68s/it][Succeeded / Failed / Skipped / Total] 12 / 114 / 0 / 126:  13%|█▎        | 127/1000 [07:43<53:07,  3.65s/it][Succeeded / Failed / Skipped / Total] 12 / 115 / 0 / 127:  13%|█▎        | 127/1000 [07:43<53:07,  3.65s/it][Succeeded / Failed / Skipped / Total] 12 / 115 / 0 / 127:  13%|█▎        | 128/1000 [07:44<52:42,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 0 / 128:  13%|█▎        | 128/1000 [07:44<52:42,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 0 / 128:  13%|█▎        | 129/1000 [07:48<52:43,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 117 / 0 / 129:  13%|█▎        | 129/1000 [07:48<52:43,  3.63s/it][Succeeded / Failed / Skipped / Total] 12 / 117 / 0 / 129:  13%|█▎        | 130/1000 [07:52<52:44,  3.64s/it][Succeeded / Failed / Skipped / Total] 13 / 117 / 0 / 130:  13%|█▎        | 130/1000 [07:52<52:44,  3.64s/it][Succeeded / Failed / Skipped / Total] 13 / 117 / 0 / 130:  13%|█▎        | 131/1000 [07:55<52:34,  3.63s/it][Succeeded / Failed / Skipped / Total] 13 / 118 / 0 / 131:  13%|█▎        | 131/1000 [07:55<52:34,  3.63s/it][Succeeded / Failed / Skipped / Total] 13 / 118 / 0 / 131:  13%|█▎        | 132/1000 [07:58<52:23,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 119 / 0 / 132:  13%|█▎        | 132/1000 [07:58<52:23,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 119 / 0 / 132:  13%|█▎        | 133/1000 [08:04<52:37,  3.64s/it]Adds the PKCE parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[maestra]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[amadeo]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[amadeo]] ) ; try { String codeChallenge = createCodeChallenge ( [[amadeo]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[amadeo]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 127 ---------------------------------------------
Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[testimony]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 128 ---------------------------------------------
Check if authentication is required . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[response]] ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[ideally]] ( final HttpServletRequest request , final HttpServletResponse [[replies]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[replies]] ) ; final boolean [[conquest]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[conquest]] ) ; } return [[conquest]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 129 ---------------------------------------------
Proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[aj]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
URL - encode a string using UTF - 8 encoding . --> Abandoning the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[abandoning]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Checks if the request is a proxy receptor request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[marielle]] ( final HttpServletRequest request ) { final boolean [[implications]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[implications]] ) ; } return [[implications]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Gets the JWKSet . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[beefsteak]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 120 / 0 / 133:  13%|█▎        | 133/1000 [08:04<52:37,  3.64s/it][Succeeded / Failed / Skipped / Total] 13 / 120 / 0 / 133:  13%|█▎        | 134/1000 [08:05<52:19,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 121 / 0 / 134:  13%|█▎        | 134/1000 [08:05<52:19,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 121 / 0 / 134:  14%|█▎        | 135/1000 [08:08<52:07,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 122 / 0 / 135:  14%|█▎        | 135/1000 [08:08<52:07,  3.62s/it][Succeeded / Failed / Skipped / Total] 13 / 122 / 0 / 135:  14%|█▎        | 136/1000 [08:08<51:46,  3.60s/it][Succeeded / Failed / Skipped / Total] 13 / 123 / 0 / 136:  14%|█▎        | 136/1000 [08:08<51:46,  3.60s/it][Succeeded / Failed / Skipped / Total] 13 / 123 / 0 / 136:  14%|█▎        | 137/1000 [08:22<52:47,  3.67s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 0 / 137:  14%|█▎        | 137/1000 [08:22<52:47,  3.67s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 0 / 137:  14%|█▍        | 138/1000 [08:25<52:39,  3.66s/it][Succeeded / Failed / Skipped / Total] 14 / 124 / 0 / 138:  14%|█▍        | 138/1000 [08:25<52:39,  3.66s/it][Succeeded / Failed / Skipped / Total] 14 / 124 / 0 / 138:  14%|█▍        | 139/1000 [08:30<52:44,  3.67s/it]Creates a method security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( [[authentication]] ) ; [[root]] . setThis ( [[invocation]] . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[tolerably]] ( Authentication [[licences]] , MethodInvocation [[entrust]] ) { MethodSecurityExpressionRoot [[base]] = new MethodSecurityExpressionRoot ( [[licences]] ) ; [[base]] . setThis ( [[entrust]] . getThis ( ) ) ; [[base]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[base]] . setTrustResolver ( getTrustResolver ( ) ) ; [[base]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[base]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[base]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Get the webSphere groups based Granted Authorities for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[knighthood]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
Load user details by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[knucklehead]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[added]] ( HttpServletRequest httpRequest ) { Object [[significant]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[significant]] ) ; } return [[significant]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Pre - processes the attributes2grantedAuthoritiesMap . --> Pre - processes breaking attributes2grantedAuthoritiesMap --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[breaking]] ) { Map < String , Collection < GrantedAuthority > > [[fruit]] = new HashMap < String , Collection < GrantedAuthority > > ( [[breaking]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[breaking]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[fruit]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[fruit]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Concatenates the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[mohsen]] ( byte [ ] ... [[stands]] ) { int length = 0 ; for ( byte [ ] array : [[stands]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[stands]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 139 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 125 / 0 / 139:  14%|█▍        | 139/1000 [08:30<52:44,  3.67s/it][Succeeded / Failed / Skipped / Total] 14 / 125 / 0 / 139:  14%|█▍        | 140/1000 [08:33<52:35,  3.67s/it][Succeeded / Failed / Skipped / Total] 14 / 126 / 0 / 140:  14%|█▍        | 140/1000 [08:33<52:35,  3.67s/it][Succeeded / Failed / Skipped / Total] 14 / 126 / 0 / 140:  14%|█▍        | 141/1000 [08:35<52:21,  3.66s/it][Succeeded / Failed / Skipped / Total] 15 / 126 / 0 / 141:  14%|█▍        | 141/1000 [08:35<52:21,  3.66s/it][Succeeded / Failed / Skipped / Total] 15 / 126 / 0 / 141:  14%|█▍        | 142/1000 [08:37<52:09,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 127 / 0 / 142:  14%|█▍        | 142/1000 [08:37<52:09,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 127 / 0 / 142:  14%|█▍        | 143/1000 [08:41<52:05,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 128 / 0 / 143:  14%|█▍        | 143/1000 [08:41<52:05,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 128 / 0 / 143:  14%|█▍        | 144/1000 [08:42<51:43,  3.63s/it][Succeeded / Failed / Skipped / Total] 15 / 129 / 0 / 144:  14%|█▍        | 144/1000 [08:42<51:43,  3.63s/it][Succeeded / Failed / Skipped / Total] 15 / 129 / 0 / 144:  14%|█▍        | 145/1000 [08:49<52:04,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 130 / 0 / 145:  14%|█▍        | 145/1000 [08:49<52:04,  3.65s/it][Succeeded / Failed / Skipped / Total] 15 / 130 / 0 / 145:  15%|█▍        | 146/1000 [08:53<52:02,  3.66s/it]Gets the list of grants for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[meerkat]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 140 ---------------------------------------------
Creates a sub - array of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int [[beginIndex]] , int endIndex ) { int [[length]] = endIndex - [[beginIndex]] ; byte [ ] [[subarray]] = new byte [ [[length]] ] ; System . arraycopy ( [[array]] , [[beginIndex]] , [[subarray]] , 0 , [[length]] ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[takeshi]] ( byte [ ] [[bunks]] , int [[herold]] , int endIndex ) { int [[calendars]] = endIndex - [[herold]] ; byte [ ] [[fluctuations]] = new byte [ [[calendars]] ] ; System . arraycopy ( [[bunks]] , [[herold]] , [[fluctuations]] , 0 , [[calendars]] ) ; return [[fluctuations]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the collection of grants for the given value . --> Methode accordionist . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[accordionist]] ( Object [[valor]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[valor]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 142 ---------------------------------------------
Adds the given value to the given collection of grants . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[trattoria]] ( Collection < GrantedAuthority > result , Object [[amount]] ) { if ( [[amount]] == null ) { return ; } if ( [[amount]] instanceof Collection < ? > ) { [[trattoria]] ( result , ( Collection < ? > ) [[amount]] ) ; } else if ( [[amount]] instanceof Object [ ] ) { [[trattoria]] ( result , ( Object [ ] ) [[amount]] ) ; } else if ( [[amount]] instanceof String ) { [[trattoria]] ( result , ( String ) [[amount]] ) ; } else if ( [[amount]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[amount]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[amount]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the shared object for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[brian]] > [[brian]] getSharedObject ( Class < [[brian]] > sharedType ) { return ( [[brian]] ) this . [[gallery]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Gets the pre - authenticated J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Returns the role name for the given role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[kady]] ( String [[featuring]] ) { Assert . isTrue ( ! [[featuring]] . startsWith ( "ROLE_" ) , ( ) -> [[featuring]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[featuring]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 131 / 0 / 146:  15%|█▍        | 146/1000 [08:53<52:02,  3.66s/it][Succeeded / Failed / Skipped / Total] 15 / 131 / 0 / 146:  15%|█▍        | 147/1000 [08:54<51:42,  3.64s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 147/1000 [08:54<51:42,  3.64s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 148/1000 [08:55<51:21,  3.62s/it][Succeeded / Failed / Skipped / Total] 17 / 131 / 0 / 148:  15%|█▍        | 148/1000 [08:55<51:21,  3.62s/it][Succeeded / Failed / Skipped / Total] 17 / 131 / 0 / 148:  15%|█▍        | 149/1000 [09:04<51:49,  3.65s/it][Succeeded / Failed / Skipped / Total] 17 / 132 / 0 / 149:  15%|█▍        | 149/1000 [09:04<51:49,  3.65s/it][Succeeded / Failed / Skipped / Total] 17 / 132 / 0 / 149:  15%|█▌        | 150/1000 [09:10<51:59,  3.67s/it][Succeeded / Failed / Skipped / Total] 18 / 132 / 0 / 150:  15%|█▌        | 150/1000 [09:10<51:59,  3.67s/it][Succeeded / Failed / Skipped / Total] 18 / 132 / 0 / 150:  15%|█▌        | 151/1000 [09:14<51:56,  3.67s/it][Succeeded / Failed / Skipped / Total] 19 / 132 / 0 / 151:  15%|█▌        | 151/1000 [09:14<51:56,  3.67s/it][Succeeded / Failed / Skipped / Total] 19 / 132 / 0 / 151:  15%|█▌        | 152/1000 [09:16<51:42,  3.66s/it]Build a https redirect url for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[jeezy]] ( HttpServletRequest request ) throws IOException , ServletException { int [[accomodation]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[accomodation]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[egg]] = new RedirectUrlBuilder ( ) ; [[egg]] . setScheme ( "https" ) ; [[egg]] . setServerName ( request . getServerName ( ) ) ; [[egg]] . setPort ( httpsPort . intValue ( ) ) ; [[egg]] . setContextPath ( request . getContextPath ( ) ) ; [[egg]] . setServletPath ( request . getServletPath ( ) ) ; [[egg]] . setPathInfo ( request . getPathInfo ( ) ) ; [[egg]] . setQuery ( request . getQueryString ( ) ) ; return [[egg]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 147 ---------------------------------------------
Invoke the interceptor . --> Methode d ajout une assertion --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[assertion]] ( JoinPoint jp , AspectJCallback [[amadé]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[amadé]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 148 ---------------------------------------------
Returns an array of roles that have any of the given roles . --> espinoza to espinoza --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[espinoza]] ( String ... [[remit]] ) { for ( int i = 0 ; i < [[remit]] . length ; i ++ ) { [[remit]] [ i ] = "ROLE_" + [[remit]] [ i ] ; } return [[remit]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[hastily]] ( HttpServletRequest [[claim]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Process the auto login cookie . --> Liefert die phillipa --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[presentedToken]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[phillipa]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[amadé]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 151 ---------------------------------------------
Display the public index of the user --> Returns a view with a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[andr]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 133 / 0 / 152:  15%|█▌        | 152/1000 [09:16<51:42,  3.66s/it][Succeeded / Failed / Skipped / Total] 19 / 133 / 0 / 152:  15%|█▌        | 153/1000 [09:17<51:24,  3.64s/it][Succeeded / Failed / Skipped / Total] 19 / 134 / 0 / 153:  15%|█▌        | 153/1000 [09:17<51:24,  3.64s/it][Succeeded / Failed / Skipped / Total] 19 / 134 / 0 / 153:  15%|█▌        | 154/1000 [09:19<51:14,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 134 / 0 / 154:  15%|█▌        | 154/1000 [09:19<51:14,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 134 / 0 / 154:  16%|█▌        | 155/1000 [09:21<51:01,  3.62s/it][Succeeded / Failed / Skipped / Total] 20 / 135 / 0 / 155:  16%|█▌        | 155/1000 [09:21<51:01,  3.62s/it][Succeeded / Failed / Skipped / Total] 20 / 135 / 0 / 155:  16%|█▌        | 156/1000 [09:21<50:40,  3.60s/it][Succeeded / Failed / Skipped / Total] 20 / 135 / 1 / 156:  16%|█▌        | 156/1000 [09:21<50:40,  3.60s/it][Succeeded / Failed / Skipped / Total] 20 / 135 / 1 / 156:  16%|█▌        | 157/1000 [09:30<51:01,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 136 / 1 / 157:  16%|█▌        | 157/1000 [09:30<51:01,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 136 / 1 / 157:  16%|█▌        | 158/1000 [09:32<50:49,  3.62s/it][Succeeded / Failed / Skipped / Total] 20 / 137 / 1 / 158:  16%|█▌        | 158/1000 [09:32<50:49,  3.62s/it][Succeeded / Failed / Skipped / Total] 20 / 137 / 1 / 158:  16%|█▌        | 159/1000 [09:34<50:36,  3.61s/it]Create a persistent login for the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String username = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[clyde]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[øre]] ) { String username = [[øre]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[aey]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[aey]] ) ; addCookie ( [[aey]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 153 ---------------------------------------------
Sets the exit user URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[spaghetti]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Decodes a JWT . --> Decodes a Mushroom token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[mushroom]] = parse ( token ) ; if ( [[mushroom]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[mushroom]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[mushroom]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 155 ---------------------------------------------
Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[usernameParameter]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[ntl]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[estrada]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 156 ---------------------------------------------
Convert a JWT to a collection of GrantedAuthorities . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Spring security filter chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean [[hasConfigurers]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[hasConfigurers]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[abusers]] ( ) throws Exception { boolean [[birthing]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[birthing]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 158 ---------------------------------------------
Authorize using url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 138 / 1 / 159:  16%|█▌        | 159/1000 [09:34<50:36,  3.61s/it][Succeeded / Failed / Skipped / Total] 20 / 138 / 1 / 159:  16%|█▌        | 160/1000 [09:36<50:25,  3.60s/it][Succeeded / Failed / Skipped / Total] 20 / 139 / 1 / 160:  16%|█▌        | 160/1000 [09:36<50:25,  3.60s/it][Succeeded / Failed / Skipped / Total] 20 / 139 / 1 / 160:  16%|█▌        | 161/1000 [09:44<50:46,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 140 / 1 / 161:  16%|█▌        | 161/1000 [09:44<50:46,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 140 / 1 / 161:  16%|█▌        | 162/1000 [09:48<50:45,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 141 / 1 / 162:  16%|█▌        | 162/1000 [09:48<50:45,  3.63s/it][Succeeded / Failed / Skipped / Total] 20 / 141 / 1 / 162:  16%|█▋        | 163/1000 [09:54<50:54,  3.65s/it][Succeeded / Failed / Skipped / Total] 20 / 142 / 1 / 163:  16%|█▋        | 163/1000 [09:54<50:54,  3.65s/it][Succeeded / Failed / Skipped / Total] 20 / 142 / 1 / 163:  16%|█▋        | 164/1000 [09:55<50:35,  3.63s/it]Generates a new CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[constabulary]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 160 ---------------------------------------------
Authorize using access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[hodgkin]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 161 ---------------------------------------------
Display admin page --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Display the add permission page for a contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bubba]] ( @ RequestParam ( "contactId" ) long [[daito]] ) { Contact contact = contactManager . getById ( [[daito]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 163 ---------------------------------------------
Add a permission to a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[dallas]] ( AddPermission [[metaphysics]] , BindingResult result , ModelMap [[blueprint]] ) { addPermissionValidator . validate ( [[dallas]] , result ) ; if ( result . hasErrors ( ) ) { [[blueprint]] . put ( "recipients" , listRecipients ( ) ) ; [[blueprint]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[dallas]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[dallas]] . getPermission ( ) ) ; try { contactManager . [[metaphysics]] ( [[dallas]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[blueprint]] . put ( "recipients" , listRecipients ( ) ) ; [[blueprint]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 142 / 1 / 164:  16%|█▋        | 164/1000 [09:55<50:35,  3.63s/it][Succeeded / Failed / Skipped / Total] 21 / 142 / 1 / 164:  16%|█▋        | 165/1000 [09:59<50:35,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 142 / 1 / 165:  16%|█▋        | 165/1000 [09:59<50:35,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 143 / 1 / 166:  17%|█▋        | 166/1000 [09:59<50:14,  3.61s/it][Succeeded / Failed / Skipped / Total] 22 / 143 / 1 / 166:  17%|█▋        | 167/1000 [10:01<50:02,  3.60s/it][Succeeded / Failed / Skipped / Total] 22 / 144 / 1 / 167:  17%|█▋        | 167/1000 [10:01<50:02,  3.60s/it][Succeeded / Failed / Skipped / Total] 22 / 145 / 1 / 168:  17%|█▋        | 168/1000 [10:06<50:05,  3.61s/it][Succeeded / Failed / Skipped / Total] 22 / 145 / 1 / 168:  17%|█▋        | 169/1000 [10:09<49:57,  3.61s/it][Succeeded / Failed / Skipped / Total] 22 / 146 / 1 / 169:  17%|█▋        | 169/1000 [10:09<49:57,  3.61s/it][Succeeded / Failed / Skipped / Total] 22 / 147 / 1 / 170:  17%|█▋        | 170/1000 [10:14<49:59,  3.61s/it][Succeeded / Failed / Skipped / Total] 22 / 147 / 1 / 170:  17%|█▋        | 170/1000 [10:20<50:27,  3.65s/it][Succeeded / Failed / Skipped / Total] 22 / 147 / 1 / 170:  17%|█▋        | 171/1000 [10:21<50:12,  3.63s/it]Returns the role with the default prefix if the prefix is null or empty . --> Convert a domo characteristic to a domo characteristic --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[domo]] ( String defaultRolePrefix , String [[characteristic]] ) { if ( [[characteristic]] == null ) { return [[characteristic]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[characteristic]] ; } if ( [[characteristic]] . startsWith ( defaultRolePrefix ) ) { return [[characteristic]] ; } return defaultRolePrefix + [[characteristic]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 165 ---------------------------------------------
Returns the values of an attribute . --> Liefert die leibowitz . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[leibowitz]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 166 ---------------------------------------------
Delete a permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[additions]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 167 ---------------------------------------------
Creates a user details resource factory bean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[glenda]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 168 ---------------------------------------------
Decodes a byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[decipher]] ( byte [ ] [[chord]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[chord]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Gets the first attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[orie]] ( String [[surname]] ) { List < String > result = getAttributeValues ( [[surname]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 170 ---------------------------------------------
Encodes a CharSequence to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[cipher]] ( CharSequence [[chord]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[chord]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 148 / 1 / 171:  17%|█▋        | 171/1000 [10:21<50:12,  3.63s/it][Succeeded / Failed / Skipped / Total] 22 / 148 / 1 / 171:  17%|█▋        | 172/1000 [10:24<50:06,  3.63s/it][Succeeded / Failed / Skipped / Total] 22 / 149 / 1 / 172:  17%|█▋        | 172/1000 [10:24<50:06,  3.63s/it][Succeeded / Failed / Skipped / Total] 22 / 149 / 1 / 172:  17%|█▋        | 173/1000 [10:29<50:08,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 150 / 1 / 173:  17%|█▋        | 173/1000 [10:29<50:08,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 150 / 1 / 173:  17%|█▋        | 174/1000 [10:34<50:09,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 151 / 1 / 174:  17%|█▋        | 174/1000 [10:34<50:09,  3.64s/it][Succeeded / Failed / Skipped / Total] 22 / 151 / 1 / 174:  18%|█▊        | 175/1000 [10:37<50:06,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 151 / 1 / 175:  18%|█▊        | 175/1000 [10:37<50:06,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 151 / 1 / 175:  18%|█▊        | 176/1000 [10:41<50:02,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 152 / 1 / 176:  18%|█▊        | 176/1000 [10:41<50:02,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 152 / 1 / 176:  18%|█▊        | 177/1000 [10:46<50:04,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 153 / 1 / 177:  18%|█▊        | 177/1000 [10:46<50:04,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 153 / 1 / 177:  18%|█▊        | 178/1000 [10:47<49:50,  3.64s/it]Add a new contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[egyptologist]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Find the attributes that are specified for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[leibowitz]] ( Method [[procedure]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[procedure]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[conditioned]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[fears]] ( ) { Set < ConfigAttribute > [[pressed]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[automobiles]] : methodMap . values ( ) ) { [[pressed]] . addAll ( [[automobiles]] ) ; } return [[pressed]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Returns true if the method name matches the mapped method name . --> yoshimi deposit aitken --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[yoshimi]] ( String [[deposit]] , String [[aitken]] ) { return ( [[aitken]] . endsWith ( "*" ) && [[deposit]] . startsWith ( [[aitken]] . substring ( 0 , [[aitken]] . length ( ) - 1 ) ) ) || ( [[aitken]] . startsWith ( "*" ) && [[deposit]] . endsWith ( [[aitken]] . substring ( 1 , [[aitken]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = False ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = True ; [[paramNames]] [ i ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[traceable]] = new String [ parameterCount ] ; boolean found = False ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = True ; [[traceable]] [ i ] = parameterName ; } } return found ? [[traceable]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
Configure any request . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = True ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[bolder]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[positioned]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = True ; return [[positioned]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 154 / 1 / 178:  18%|█▊        | 178/1000 [10:47<49:50,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 154 / 1 / 178:  18%|█▊        | 179/1000 [10:52<49:54,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 155 / 1 / 179:  18%|█▊        | 179/1000 [10:52<49:55,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 155 / 1 / 179:  18%|█▊        | 180/1000 [10:53<49:38,  3.63s/it][Succeeded / Failed / Skipped / Total] 23 / 156 / 1 / 180:  18%|█▊        | 180/1000 [10:53<49:38,  3.63s/it][Succeeded / Failed / Skipped / Total] 23 / 156 / 1 / 180:  18%|█▊        | 181/1000 [10:59<49:43,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 157 / 1 / 181:  18%|█▊        | 181/1000 [10:59<49:43,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 157 / 1 / 181:  18%|█▊        | 182/1000 [11:05<49:49,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 158 / 1 / 182:  18%|█▊        | 182/1000 [11:05<49:49,  3.65s/it][Succeeded / Failed / Skipped / Total] 23 / 159 / 1 / 183:  18%|█▊        | 183/1000 [11:05<49:29,  3.63s/it][Succeeded / Failed / Skipped / Total] 23 / 159 / 1 / 183:  18%|█▊        | 184/1000 [11:06<49:16,  3.62s/it][Succeeded / Failed / Skipped / Total] 23 / 160 / 1 / 184:  18%|█▊        | 184/1000 [11:06<49:16,  3.62s/it]Handles a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[figlia]] ( String [[kiyoshi]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[kiyoshi]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[convince]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Gets a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[mizoguchi]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[noronha]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Extract the SHA prefix from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[abattoir]] ( String [[acquaintances]] ) { if ( ! [[acquaintances]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[acquaintances]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[acquaintances]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[congregation]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 161 / 1 / 185:  18%|█▊        | 185/1000 [11:11<49:18,  3.63s/it][Succeeded / Failed / Skipped / Total] 23 / 161 / 1 / 185:  19%|█▊        | 186/1000 [11:16<49:21,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 162 / 1 / 186:  19%|█▊        | 186/1000 [11:16<49:21,  3.64s/it][Succeeded / Failed / Skipped / Total] 23 / 163 / 1 / 187:  19%|█▊        | 187/1000 [11:17<49:06,  3.62s/it][Succeeded / Failed / Skipped / Total] 23 / 163 / 1 / 187:  19%|█▉        | 188/1000 [11:22<49:09,  3.63s/it][Succeeded / Failed / Skipped / Total] 24 / 163 / 1 / 188:  19%|█▉        | 188/1000 [11:22<49:09,  3.63s/it][Succeeded / Failed / Skipped / Total] 24 / 164 / 1 / 189:  19%|█▉        | 189/1000 [11:24<48:56,  3.62s/it][Succeeded / Failed / Skipped / Total] 24 / 164 / 1 / 189:  19%|█▉        | 190/1000 [11:29<48:59,  3.63s/it]Check for duplicate filters . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 186 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[sebastien]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
The pre - authenticated entry point is called . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[inception]] ( HttpServletRequest request , HttpServletResponse [[address]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[address]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
Checks if two byte arrays are equal . --> Returns true if the expected byte array matches the lifelike byte array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[actual]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[lifelike]] ) { if ( expected . length != [[lifelike]] . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[lifelike]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Extracts the cause of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[jaundiced]] ( Throwable [[bengt]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[bengt]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[bengt]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 190 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 164 / 1 / 190:  19%|█▉        | 190/1000 [11:29<48:59,  3.63s/it][Succeeded / Failed / Skipped / Total] 25 / 165 / 1 / 191:  19%|█▉        | 191/1000 [11:34<49:03,  3.64s/it][Succeeded / Failed / Skipped / Total] 25 / 165 / 1 / 191:  19%|█▉        | 192/1000 [11:37<48:53,  3.63s/it][Succeeded / Failed / Skipped / Total] 25 / 166 / 1 / 192:  19%|█▉        | 192/1000 [11:37<48:53,  3.63s/it][Succeeded / Failed / Skipped / Total] 25 / 167 / 1 / 193:  19%|█▉        | 193/1000 [11:37<48:37,  3.62s/it][Succeeded / Failed / Skipped / Total] 25 / 167 / 1 / 193:  19%|█▉        | 194/1000 [11:49<49:07,  3.66s/it][Succeeded / Failed / Skipped / Total] 25 / 168 / 1 / 194:  19%|█▉        | 194/1000 [11:49<49:07,  3.66s/it][Succeeded / Failed / Skipped / Total] 25 / 168 / 1 / 194:  20%|█▉        | 195/1000 [11:49<48:49,  3.64s/it][Succeeded / Failed / Skipped / Total] 25 / 169 / 1 / 195:  20%|█▉        | 195/1000 [11:49<48:49,  3.64s/it][Succeeded / Failed / Skipped / Total] 25 / 169 / 1 / 195:  20%|█▉        | 196/1000 [11:50<48:35,  3.63s/it]Register an access manager . --> Liefert die diarrhea --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[voters]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[voters]] . add ( expressionVoter ) ; } [[voters]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[voters]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[voters]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( [[voters]] ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String [[id]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[id]] ) ) ; return [[id]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[diarrhea]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[ivanhoe]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[ballots]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[ballots]] . add ( expressionVoter ) ; } [[ballots]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[ballots]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[ballots]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[ivanhoe]] . addConstructorArgValue ( [[ballots]] ) ; BeanDefinition accessManager = [[ivanhoe]] . getBeanDefinition ( ) ; String [[barcode]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[barcode]] ) ) ; return [[barcode]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[vcrs]] ( String [[bandages]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[bandages]] ) , ( ) -> "'" + [[bandages]] + "' is not a valid redirect URL" ) ; this . [[cartouche]] = [[bandages]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[delightful]] ( Collection < ? extends GrantedAuthority > [[bacterium]] ) { Assert . notNull ( [[bacterium]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[bacterium]] . size ( ) ) ; for ( GrantedAuthority authority : [[bacterium]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the function to use when resolving hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[moralize]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Build the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[ragnar]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[facebook]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[facebook]] . append ( servletPath ) ; if ( pathInfo != null ) { [[facebook]] . append ( pathInfo ) ; } } else { [[facebook]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[facebook]] . append ( "?" ) . append ( queryString ) ; } return [[facebook]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 195 ---------------------------------------------
Returns an attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[dizzy]] ( String [[automobiles]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[automobiles]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 170 / 1 / 196:  20%|█▉        | 196/1000 [11:50<48:35,  3.63s/it][Succeeded / Failed / Skipped / Total] 25 / 170 / 1 / 196:  20%|█▉        | 197/1000 [11:51<48:22,  3.61s/it][Succeeded / Failed / Skipped / Total] 25 / 171 / 1 / 197:  20%|█▉        | 197/1000 [11:51<48:22,  3.61s/it][Succeeded / Failed / Skipped / Total] 25 / 171 / 1 / 197:  20%|█▉        | 198/1000 [12:10<49:18,  3.69s/it][Succeeded / Failed / Skipped / Total] 25 / 172 / 1 / 198:  20%|█▉        | 198/1000 [12:10<49:18,  3.69s/it][Succeeded / Failed / Skipped / Total] 25 / 172 / 1 / 198:  20%|█▉        | 199/1000 [12:12<49:07,  3.68s/it][Succeeded / Failed / Skipped / Total] 25 / 173 / 1 / 199:  20%|█▉        | 199/1000 [12:12<49:07,  3.68s/it][Succeeded / Failed / Skipped / Total] 25 / 174 / 1 / 200:  20%|██        | 200/1000 [12:12<48:48,  3.66s/it][Succeeded / Failed / Skipped / Total] 25 / 174 / 1 / 200:  20%|██        | 201/1000 [12:13<48:35,  3.65s/it]Returns true if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[unscramble]] ( String [[locator]] ) { if ( [[locator]] == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[locator]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
Convert a string identifier to a class identifier . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[abattoir]] ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 198 ---------------------------------------------
Create or update an object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "[[True]]" == "[[True]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[True]]" == "[[True]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[carafe]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
Save the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[bacterium]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 200 ---------------------------------------------
Creates the entries for the given ACL . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[bacchus]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 175 / 1 / 201:  20%|██        | 201/1000 [12:13<48:35,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 175 / 1 / 202:  20%|██        | 202/1000 [12:17<48:32,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 175 / 1 / 202:  20%|██        | 203/1000 [12:29<49:01,  3.69s/it][Succeeded / Failed / Skipped / Total] 26 / 176 / 1 / 203:  20%|██        | 203/1000 [12:29<49:01,  3.69s/it][Succeeded / Failed / Skipped / Total] 26 / 176 / 1 / 203:  20%|██        | 204/1000 [12:30<48:46,  3.68s/it][Succeeded / Failed / Skipped / Total] 26 / 177 / 1 / 204:  20%|██        | 204/1000 [12:30<48:46,  3.68s/it][Succeeded / Failed / Skipped / Total] 26 / 177 / 1 / 204:  20%|██        | 205/1000 [12:31<48:33,  3.66s/it][Succeeded / Failed / Skipped / Total] 26 / 178 / 1 / 205:  20%|██        | 205/1000 [12:31<48:33,  3.66s/it][Succeeded / Failed / Skipped / Total] 26 / 178 / 1 / 205:  21%|██        | 206/1000 [12:32<48:20,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 179 / 1 / 206:  21%|██        | 206/1000 [12:32<48:20,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 179 / 1 / 206:  21%|██        | 207/1000 [12:34<48:11,  3.65s/it][Succeeded / Failed / Skipped / Total] 27 / 179 / 1 / 207:  21%|██        | 207/1000 [12:34<48:11,  3.65s/it][Succeeded / Failed / Skipped / Total] 27 / 179 / 1 / 207:  21%|██        | 208/1000 [12:39<48:11,  3.65s/it]Update the ObjectIdentity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[parentId]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[cazzo]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[cazzo]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[cazzo]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
Matches any exchange . --> Liefert die Baccala . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[baccala]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 203 ---------------------------------------------
Creates a text encryptor for the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[editorial]] ( CharSequence [[ciphers]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[ciphers]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Returns a new HexEncodingTextEncryptor that encrypts the given password using the given salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[benedetti]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Returns a server web exchange matcher for the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[hokkaido]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 206 ---------------------------------------------
Queryable text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[kenji]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Determine the target URL . --> Calcutta . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[calcutta]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[calcutta]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 208 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 179 / 1 / 208:  21%|██        | 208/1000 [12:39<48:11,  3.65s/it][Succeeded / Failed / Skipped / Total] 28 / 179 / 1 / 208:  21%|██        | 209/1000 [12:42<48:06,  3.65s/it][Succeeded / Failed / Skipped / Total] 28 / 180 / 1 / 209:  21%|██        | 209/1000 [12:42<48:06,  3.65s/it][Succeeded / Failed / Skipped / Total] 28 / 180 / 1 / 209:  21%|██        | 210/1000 [12:45<47:58,  3.64s/it][Succeeded / Failed / Skipped / Total] 28 / 181 / 1 / 210:  21%|██        | 210/1000 [12:45<47:58,  3.64s/it][Succeeded / Failed / Skipped / Total] 28 / 181 / 1 / 210:  21%|██        | 211/1000 [12:45<47:44,  3.63s/it][Succeeded / Failed / Skipped / Total] 28 / 182 / 1 / 211:  21%|██        | 211/1000 [12:45<47:44,  3.63s/it][Succeeded / Failed / Skipped / Total] 28 / 182 / 1 / 211:  21%|██        | 212/1000 [12:48<47:35,  3.62s/it][Succeeded / Failed / Skipped / Total] 29 / 182 / 1 / 212:  21%|██        | 212/1000 [12:48<47:35,  3.62s/it][Succeeded / Failed / Skipped / Total] 29 / 182 / 1 / 212:  21%|██▏       | 213/1000 [12:53<47:37,  3.63s/it][Succeeded / Failed / Skipped / Total] 29 / 183 / 1 / 213:  21%|██▏       | 213/1000 [12:53<47:37,  3.63s/it][Succeeded / Failed / Skipped / Total] 29 / 183 / 1 / 213:  21%|██▏       | 214/1000 [12:53<47:20,  3.61s/it][Succeeded / Failed / Skipped / Total] 29 / 184 / 1 / 214:  21%|██▏       | 214/1000 [12:53<47:20,  3.61s/it][Succeeded / Failed / Skipped / Total] 29 / 184 / 1 / 214:  22%|██▏       | 215/1000 [12:57<47:20,  3.62s/it]Returns the directory with the immediate parent populated . --> Returns the assistants for the given id . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[assistants]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
Determine the target url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[lga]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
Sets the target url parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[highs]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 211 ---------------------------------------------
Write the headers to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[address]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[taboos]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[taboos]] ) ) { if ( ! [[address]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[taboos]] != null ) { if ( ! [[address]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[taboos]] ) ; } } } else { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 212 ---------------------------------------------
Create shared objects . --> inhale . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[inhale]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 213 ---------------------------------------------
Build a DistinguishedName for the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[michaelangelo]] ( String [[accessing]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[accessing]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 214 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[drazen]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
[Succeeded / Failed / Skipped / Total] 30 / 184 / 1 / 215:  22%|██▏       | 215/1000 [12:57<47:20,  3.62s/it][Succeeded / Failed / Skipped / Total] 30 / 184 / 1 / 215:  22%|██▏       | 216/1000 [13:04<47:27,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 185 / 1 / 216:  22%|██▏       | 216/1000 [13:04<47:27,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 185 / 1 / 216:  22%|██▏       | 217/1000 [13:09<47:30,  3.64s/it][Succeeded / Failed / Skipped / Total] 30 / 186 / 1 / 217:  22%|██▏       | 217/1000 [13:09<47:30,  3.64s/it][Succeeded / Failed / Skipped / Total] 30 / 186 / 1 / 217:  22%|██▏       | 218/1000 [13:10<47:15,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 187 / 1 / 218:  22%|██▏       | 218/1000 [13:10<47:15,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 187 / 1 / 218:  22%|██▏       | 219/1000 [13:16<47:18,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 188 / 1 / 219:  22%|██▏       | 219/1000 [13:16<47:18,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 188 / 1 / 219:  22%|██▏       | 220/1000 [13:16<47:04,  3.62s/it][Succeeded / Failed / Skipped / Total] 30 / 189 / 1 / 220:  22%|██▏       | 220/1000 [13:16<47:04,  3.62s/it][Succeeded / Failed / Skipped / Total] 30 / 189 / 1 / 220:  22%|██▏       | 221/1000 [13:23<47:11,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 190 / 1 / 221:  22%|██▏       | 221/1000 [13:23<47:11,  3.63s/it][Succeeded / Failed / Skipped / Total] 30 / 190 / 1 / 221:  22%|██▏       | 222/1000 [13:27<47:09,  3.64s/it]--------------------------------------------- Result 215 ---------------------------------------------
Update the cache with the given key and value --> Sólo sólo --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[sólo]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 216 ---------------------------------------------
Sets the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[massively]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[clint]] ( final Subject [[lawsuit]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[lawsuit]] ) ; } String [[cowhand]] = null ; if ( [[lawsuit]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 218 ---------------------------------------------
Internal parse date . --> [[[FAILED]]]

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[includes]] ( String [[amount]] , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( [[amount]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 219 ---------------------------------------------
Returns a list of webSphere groups . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[inhale]] ( final String securityName ) { Context [[cas]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
Sets the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[alreadySet]] = "[[False]]" != "[[False]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { [[alreadySet]] = existing . equals ( loginConfigUrl ) ; if ( [[alreadySet]] ) { break ; } n ++ ; } if ( ! [[alreadySet]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[bettin]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[rápido]] = "[["Counterfeit" != "Counterfeit"]]" != "[["Counterfeit" != "Counterfeit"]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { [[rápido]] = existing . equals ( loginConfigUrl ) ; if ( [[rápido]] ) { break ; } n ++ ; } if ( ! [[rápido]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 221 ---------------------------------------------
Build a DistinguishedName for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[intermediaries]] ( String [[groups]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[groups]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 191 / 1 / 222:  22%|██▏       | 222/1000 [13:27<47:09,  3.64s/it][Succeeded / Failed / Skipped / Total] 30 / 191 / 1 / 222:  22%|██▏       | 223/1000 [13:32<47:09,  3.64s/it][Succeeded / Failed / Skipped / Total] 31 / 191 / 1 / 223:  22%|██▏       | 223/1000 [13:32<47:09,  3.64s/it][Succeeded / Failed / Skipped / Total] 31 / 191 / 1 / 223:  22%|██▏       | 224/1000 [13:34<47:01,  3.64s/it][Succeeded / Failed / Skipped / Total] 31 / 192 / 1 / 224:  22%|██▏       | 224/1000 [13:34<47:01,  3.64s/it][Succeeded / Failed / Skipped / Total] 31 / 192 / 1 / 224:  22%|██▎       | 225/1000 [13:35<46:49,  3.62s/it][Succeeded / Failed / Skipped / Total] 31 / 193 / 1 / 225:  22%|██▎       | 225/1000 [13:35<46:49,  3.62s/it][Succeeded / Failed / Skipped / Total] 31 / 194 / 1 / 226:  23%|██▎       | 226/1000 [13:35<46:33,  3.61s/it][Succeeded / Failed / Skipped / Total] 31 / 194 / 1 / 226:  23%|██▎       | 227/1000 [13:44<46:48,  3.63s/it][Succeeded / Failed / Skipped / Total] 31 / 195 / 1 / 227:  23%|██▎       | 227/1000 [13:44<46:48,  3.63s/it][Succeeded / Failed / Skipped / Total] 32 / 195 / 1 / 228:  23%|██▎       | 228/1000 [13:46<46:37,  3.62s/it][Succeeded / Failed / Skipped / Total] 32 / 195 / 1 / 228:  23%|██▎       | 229/1000 [13:49<46:33,  3.62s/it]Change user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 223 ---------------------------------------------
Get the list of filters for the given url . --> Get a list of shinzo filters --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[shinzo]] ( String url ) { return [[shinzo]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Copy details from the source Authentication to the destination Authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[chlamydia]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Checks if the maximum number of sessions allowed for this principal is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[altruism]] ( List < SessionInformation > [[appearances]] , int [[haryana]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[appearances]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[haryana]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 226 ---------------------------------------------
Returns the list of filters that match the request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[centigrade]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[mané]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Updates the session attributes . --> Adds the given flourishes to the request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[includes]] ( Map < String , Object > [[flourishes]] ) { notNull ( [[flourishes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[flourishes]] , this . [[brandies]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 32 / 196 / 1 / 229:  23%|██▎       | 229/1000 [13:49<46:33,  3.62s/it][Succeeded / Failed / Skipped / Total] 32 / 197 / 1 / 230:  23%|██▎       | 230/1000 [13:51<46:22,  3.61s/it][Succeeded / Failed / Skipped / Total] 32 / 197 / 1 / 230:  23%|██▎       | 231/1000 [13:53<46:13,  3.61s/it][Succeeded / Failed / Skipped / Total] 32 / 198 / 1 / 231:  23%|██▎       | 231/1000 [13:53<46:13,  3.61s/it][Succeeded / Failed / Skipped / Total] 32 / 199 / 1 / 232:  23%|██▎       | 232/1000 [13:57<46:12,  3.61s/it][Succeeded / Failed / Skipped / Total] 32 / 199 / 1 / 232:  23%|██▎       | 233/1000 [14:05<46:22,  3.63s/it][Succeeded / Failed / Skipped / Total] 32 / 200 / 1 / 233:  23%|██▎       | 233/1000 [14:05<46:22,  3.63s/it][Succeeded / Failed / Skipped / Total] 32 / 200 / 1 / 233:  23%|██▎       | 234/1000 [14:07<46:13,  3.62s/it][Succeeded / Failed / Skipped / Total] 32 / 201 / 1 / 234:  23%|██▎       | 234/1000 [14:07<46:13,  3.62s/it][Succeeded / Failed / Skipped / Total] 32 / 201 / 1 / 234:  24%|██▎       | 235/1000 [14:14<46:21,  3.64s/it]Creates a Preemptive basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[decisive]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[astro]] = new PreemptiveBasicAuthScheme ( ) ; [[astro]] . setUserName ( userName ) ; [[astro]] . setPassword ( password ) ; return [[astro]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 230 ---------------------------------------------
Gets the full DN . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[auctions]] ( DistinguishedName [[lon]] , Context baseCtx ) throws NamingException { DistinguishedName [[attract]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[lon]] . contains ( [[attract]] ) ) { return [[lon]] ; } [[attract]] . append ( [[lon]] ) ; return [[attract]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 231 ---------------------------------------------
Adds a list of filters to the RestAssured . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[entrapment]] ( List < Filter > [[blackouts]] ) { Validate . notNull ( [[entrapment]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[entrapment]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[colander]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Sets up a proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[spares]] ( URI [[arkady]] ) { if ( [[arkady]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[spares]] ( new ProxySpecification ( [[arkady]] . getHost ( ) , [[arkady]] . getPort ( ) , [[arkady]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[based]] ( String [[accessing]] , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[accessing]] ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 201 / 1 / 235:  24%|██▎       | 235/1000 [14:14<46:21,  3.64s/it][Succeeded / Failed / Skipped / Total] 33 / 201 / 1 / 235:  24%|██▎       | 236/1000 [14:15<46:09,  3.63s/it][Succeeded / Failed / Skipped / Total] 33 / 202 / 1 / 236:  24%|██▎       | 236/1000 [14:15<46:09,  3.63s/it][Succeeded / Failed / Skipped / Total] 33 / 202 / 1 / 236:  24%|██▎       | 237/1000 [14:17<45:59,  3.62s/it][Succeeded / Failed / Skipped / Total] 33 / 203 / 1 / 237:  24%|██▎       | 237/1000 [14:17<45:59,  3.62s/it][Succeeded / Failed / Skipped / Total] 33 / 203 / 1 / 237:  24%|██▍       | 238/1000 [14:19<45:52,  3.61s/it][Succeeded / Failed / Skipped / Total] 34 / 203 / 1 / 238:  24%|██▍       | 238/1000 [14:19<45:52,  3.61s/it][Succeeded / Failed / Skipped / Total] 34 / 203 / 1 / 238:  24%|██▍       | 239/1000 [14:20<45:41,  3.60s/it][Succeeded / Failed / Skipped / Total] 34 / 204 / 1 / 239:  24%|██▍       | 239/1000 [14:20<45:41,  3.60s/it][Succeeded / Failed / Skipped / Total] 34 / 204 / 1 / 239:  24%|██▍       | 240/1000 [14:25<45:40,  3.61s/it]Prints the response body to the given output stream . --> Liefert die Phoocopied . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( responseBodyToAppend ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[photocopied]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[programmer]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[programmer]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[programmer]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[programmer]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[programmer]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[programmer]] . append ( responseBodyToAppend ) ; } String response = [[programmer]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Creates a form authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String [[password]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[layout]] ( String userName , String [[nicknames]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[nicknames]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[nicknames]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 237 ---------------------------------------------
Creates a new RestAssuredConfig configured with the specified redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[folklore]] ) { notNull ( [[folklore]] , "Redirect config" ) ; return new RestAssuredConfig ( [[folklore]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 238 ---------------------------------------------
Sets the default charset for the query parameter . --> Bullitt den Encoders . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[bullitt]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
Creates a NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[epitome]] ( String userName , String password , String workstation , String [[fluent]] ) { final NTLMAuthScheme [[arrangement]] = new NTLMAuthScheme ( ) ; [[arrangement]] . setUserName ( userName ) ; [[arrangement]] . setPassword ( password ) ; [[arrangement]] . setWorkstation ( workstation ) ; [[arrangement]] . setDomain ( [[fluent]] ) ; return [[arrangement]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 204 / 1 / 240:  24%|██▍       | 240/1000 [14:25<45:40,  3.61s/it][Succeeded / Failed / Skipped / Total] 35 / 204 / 1 / 240:  24%|██▍       | 241/1000 [14:26<45:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 1 / 241:  24%|██▍       | 241/1000 [14:26<45:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 35 / 205 / 1 / 241:  24%|██▍       | 242/1000 [14:31<45:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 36 / 205 / 1 / 242:  24%|██▍       | 242/1000 [14:31<45:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 36 / 205 / 1 / 242:  24%|██▍       | 243/1000 [14:32<45:18,  3.59s/it][Succeeded / Failed / Skipped / Total] 36 / 206 / 1 / 243:  24%|██▍       | 243/1000 [14:32<45:18,  3.59s/it][Succeeded / Failed / Skipped / Total] 36 / 206 / 1 / 243:  24%|██▍       | 244/1000 [14:35<45:13,  3.59s/it][Succeeded / Failed / Skipped / Total] 36 / 207 / 1 / 244:  24%|██▍       | 244/1000 [14:35<45:13,  3.59s/it][Succeeded / Failed / Skipped / Total] 36 / 207 / 1 / 244:  24%|██▍       | 245/1000 [14:37<45:03,  3.58s/it][Succeeded / Failed / Skipped / Total] 37 / 207 / 1 / 245:  24%|██▍       | 245/1000 [14:37<45:03,  3.58s/it][Succeeded / Failed / Skipped / Total] 37 / 207 / 1 / 245:  25%|██▍       | 246/1000 [14:38<44:52,  3.57s/it][Succeeded / Failed / Skipped / Total] 38 / 207 / 1 / 246:  25%|██▍       | 246/1000 [14:38<44:52,  3.57s/it][Succeeded / Failed / Skipped / Total] 38 / 207 / 1 / 246:  25%|██▍       | 247/1000 [14:38<44:39,  3.56s/it][Succeeded / Failed / Skipped / Total] 38 / 207 / 2 / 247:  25%|██▍       | 247/1000 [14:38<44:39,  3.56s/it][Succeeded / Failed / Skipped / Total] 38 / 207 / 2 / 247:  25%|██▍       | 248/1000 [14:41<44:33,  3.55s/it]Creates a new RestAssuredMockMvcConfig with the specified log config . --> Creates a new instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[madone]] ( LogConfig logConfig ) { notNull ( [[madone]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[madone]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[bohunk]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[bohunk]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the session config . --> Creates a new instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[carnage]] ( SessionConfig [[clapton]] ) { notNull ( [[carnage]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[carnage]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the jaxb object mapper factory . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[surged]] ( JAXBObjectMapperFactory [[anita]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[surged]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the object mapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bostwick]] ( ObjectMapperConfig [[farms]] ) { notNull ( [[bostwick]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[bostwick]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified JSON configuration . --> Method to configure pituitary --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[pituitary]] ( JsonConfig [[clanking]] ) { notNull ( [[pituitary]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[pituitary]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig with the specified encoder configuration . --> Returns a new instance of RestAssuredMockMvcConfig with negatives configured . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[negatives]] ( EncoderConfig encoderConfig ) { notNull ( [[negatives]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[negatives]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 208 / 2 / 248:  25%|██▍       | 248/1000 [14:41<44:33,  3.55s/it][Succeeded / Failed / Skipped / Total] 39 / 208 / 2 / 249:  25%|██▍       | 249/1000 [14:41<44:19,  3.54s/it][Succeeded / Failed / Skipped / Total] 39 / 208 / 2 / 249:  25%|██▌       | 250/1000 [14:42<44:08,  3.53s/it][Succeeded / Failed / Skipped / Total] 40 / 208 / 2 / 250:  25%|██▌       | 250/1000 [14:42<44:08,  3.53s/it][Succeeded / Failed / Skipped / Total] 41 / 208 / 2 / 251:  25%|██▌       | 251/1000 [14:44<43:58,  3.52s/it][Succeeded / Failed / Skipped / Total] 41 / 208 / 2 / 251:  25%|██▌       | 252/1000 [14:47<43:53,  3.52s/it][Succeeded / Failed / Skipped / Total] 42 / 208 / 2 / 252:  25%|██▌       | 252/1000 [14:47<43:53,  3.52s/it][Succeeded / Failed / Skipped / Total] 43 / 208 / 2 / 253:  25%|██▌       | 253/1000 [14:47<43:40,  3.51s/it][Succeeded / Failed / Skipped / Total] 43 / 208 / 2 / 253:  25%|██▌       | 254/1000 [14:47<43:27,  3.50s/it][Succeeded / Failed / Skipped / Total] 43 / 209 / 2 / 254:  25%|██▌       | 254/1000 [14:47<43:27,  3.50s/it][Succeeded / Failed / Skipped / Total] 43 / 210 / 2 / 255:  26%|██▌       | 255/1000 [14:52<43:28,  3.50s/it][Succeeded / Failed / Skipped / Total] 43 / 210 / 2 / 255:  26%|██▌       | 255/1000 [15:00<43:49,  3.53s/it][Succeeded / Failed / Skipped / Total] 43 / 210 / 2 / 255:  26%|██▌       | 256/1000 [15:06<43:53,  3.54s/it]Sets the XML configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[notyet]] ( XmlConfig xmlConfig ) { notNull ( [[notyet]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[notyet]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 249 ---------------------------------------------
Sets the header configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[acreage]] ( HeaderConfig headerConfig ) { notNull ( [[acreage]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[acreage]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 250 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified async config . --> Creates a new RestAssuredMockMvcConfig with afflictions . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[afflictions]] ( AsyncConfig asyncConfig ) { notNull ( [[afflictions]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[afflictions]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the multi - part configuration . --> Returns a new instance of RestAssuredMockMvcConfig with custom forego configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[forego]] ( MultiPartConfig multiPartConfig ) { notNull ( [[forego]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[forego]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the mock parameter configuration . --> Creates a new instance of RestAssuredMockMvcConfig with a biggus configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[biggus]] ( MockMvcParamConfig paramConfig ) { notNull ( [[biggus]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[biggus]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Creates a new mock config instance with the specified matcher configuration . --> Censored configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[censored]] ( MatcherConfig matcherConfig ) { notNull ( [[censored]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[censored]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[danzig]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
Declares the given namespaces . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[youngstown]] ( Map < String , String > [[crimean]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[crimean]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 43 / 211 / 2 / 256:  26%|██▌       | 256/1000 [15:06<43:53,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 211 / 2 / 256:  26%|██▌       | 257/1000 [15:08<43:45,  3.53s/it][Succeeded / Failed / Skipped / Total] 43 / 212 / 2 / 257:  26%|██▌       | 257/1000 [15:08<43:45,  3.53s/it][Succeeded / Failed / Skipped / Total] 43 / 212 / 2 / 257:  26%|██▌       | 258/1000 [15:10<43:39,  3.53s/it][Succeeded / Failed / Skipped / Total] 43 / 213 / 2 / 258:  26%|██▌       | 258/1000 [15:10<43:39,  3.53s/it][Succeeded / Failed / Skipped / Total] 43 / 213 / 2 / 258:  26%|██▌       | 259/1000 [15:12<43:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 43 / 214 / 2 / 259:  26%|██▌       | 259/1000 [15:12<43:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 43 / 214 / 2 / 259:  26%|██▌       | 260/1000 [15:19<43:36,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 215 / 2 / 260:  26%|██▌       | 260/1000 [15:19<43:36,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 215 / 2 / 260:  26%|██▌       | 261/1000 [15:26<43:43,  3.55s/it][Succeeded / Failed / Skipped / Total] 43 / 216 / 2 / 261:  26%|██▌       | 261/1000 [15:26<43:43,  3.55s/it][Succeeded / Failed / Skipped / Total] 43 / 216 / 2 / 261:  26%|██▌       | 262/1000 [15:28<43:34,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 217 / 2 / 262:  26%|██▌       | 262/1000 [15:28<43:34,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 217 / 2 / 262:  26%|██▋       | 263/1000 [15:30<43:27,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 218 / 2 / 263:  26%|██▋       | 263/1000 [15:30<43:27,  3.54s/it][Succeeded / Failed / Skipped / Total] 43 / 218 / 2 / 263:  26%|██▋       | 264/1000 [15:32<43:18,  3.53s/it]Set the proxy to connect to . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[euskadi]] ( String [[accommodating]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[accommodating]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[demanding]] ( String [[procedure]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[procedure]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 258 ---------------------------------------------
Sets the declared namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[abou]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Sets the default request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[quetzalcoatl]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 260 ---------------------------------------------
Adds a header to this multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[item]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the name of the control . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[primeval]] ( String controlName ) { Validate . notEmpty ( [[primeval]] , "Control name cannot be empty" ) ; this . controlName = [[primeval]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Sets basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[indispensable]] ( String host , int [[berth]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[berth]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
Reset the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[rebooting]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 218 / 2 / 264:  26%|██▋       | 264/1000 [15:32<43:18,  3.53s/it][Succeeded / Failed / Skipped / Total] 44 / 218 / 2 / 264:  26%|██▋       | 265/1000 [15:37<43:20,  3.54s/it][Succeeded / Failed / Skipped / Total] 44 / 219 / 2 / 265:  26%|██▋       | 265/1000 [15:37<43:20,  3.54s/it][Succeeded / Failed / Skipped / Total] 44 / 219 / 2 / 265:  27%|██▋       | 266/1000 [15:38<43:09,  3.53s/it][Succeeded / Failed / Skipped / Total] 44 / 220 / 2 / 266:  27%|██▋       | 266/1000 [15:38<43:09,  3.53s/it][Succeeded / Failed / Skipped / Total] 44 / 221 / 2 / 267:  27%|██▋       | 267/1000 [15:38<42:56,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 221 / 2 / 267:  27%|██▋       | 268/1000 [15:43<42:56,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 222 / 2 / 268:  27%|██▋       | 268/1000 [15:43<42:56,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 223 / 2 / 269:  27%|██▋       | 269/1000 [15:49<42:59,  3.53s/it][Succeeded / Failed / Skipped / Total] 44 / 223 / 2 / 269:  27%|██▋       | 270/1000 [15:49<42:46,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 224 / 2 / 270:  27%|██▋       | 270/1000 [15:49<42:46,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 225 / 2 / 271:  27%|██▋       | 271/1000 [15:49<42:34,  3.50s/it][Succeeded / Failed / Skipped / Total] 44 / 225 / 2 / 271:  27%|██▋       | 272/1000 [15:54<42:35,  3.51s/it]Adds a header to the response . --> Sets the helplessness of the response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[helplessness]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Creates a new Headers object with the given header and additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[letterhead]] ( Header [[chapter]] , Header ... [[contraptions]] ) { notNull ( [[chapter]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[chapter]] ) ; if ( [[contraptions]] != null ) { Collections . addAll ( headerList , [[contraptions]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
Build the response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[augment]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Set the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[alteration]] ( String host , int [[puerto]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[puerto]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a new instance of the DetailedCookieMatcher that matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[appraisal]] ( Matcher < ? super String > [[tradition]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[tradition]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches a cookie with a expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[dowsing]] ( Matcher < ? super Date > [[brokered]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[brokered]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches a cookie comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[spotters]] ( Matcher < ? super String > [[decree]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[decree]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[zone]] ( Matcher < ? super String > [[pollinating]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[pollinating]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 226 / 2 / 272:  27%|██▋       | 272/1000 [15:54<42:35,  3.51s/it][Succeeded / Failed / Skipped / Total] 44 / 227 / 2 / 273:  27%|██▋       | 273/1000 [16:00<42:37,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 227 / 2 / 273:  27%|██▋       | 274/1000 [16:00<42:26,  3.51s/it][Succeeded / Failed / Skipped / Total] 44 / 228 / 2 / 274:  27%|██▋       | 274/1000 [16:00<42:26,  3.51s/it][Succeeded / Failed / Skipped / Total] 44 / 229 / 2 / 275:  28%|██▊       | 275/1000 [16:01<42:13,  3.50s/it][Succeeded / Failed / Skipped / Total] 44 / 229 / 2 / 275:  28%|██▊       | 276/1000 [16:11<42:27,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 230 / 2 / 276:  28%|██▊       | 276/1000 [16:11<42:27,  3.52s/it][Succeeded / Failed / Skipped / Total] 44 / 230 / 2 / 276:  28%|██▊       | 277/1000 [16:11<42:16,  3.51s/it][Succeeded / Failed / Skipped / Total] 45 / 230 / 2 / 277:  28%|██▊       | 277/1000 [16:11<42:16,  3.51s/it][Succeeded / Failed / Skipped / Total] 45 / 230 / 2 / 277:  28%|██▊       | 278/1000 [16:12<42:05,  3.50s/it][Succeeded / Failed / Skipped / Total] 45 / 231 / 2 / 278:  28%|██▊       | 278/1000 [16:12<42:05,  3.50s/it][Succeeded / Failed / Skipped / Total] 45 / 231 / 2 / 278:  28%|██▊       | 279/1000 [16:13<41:56,  3.49s/it][Succeeded / Failed / Skipped / Total] 45 / 232 / 2 / 279:  28%|██▊       | 279/1000 [16:13<41:56,  3.49s/it][Succeeded / Failed / Skipped / Total] 45 / 232 / 2 / 279:  28%|██▊       | 280/1000 [16:19<41:59,  3.50s/it][Succeeded / Failed / Skipped / Total] 46 / 232 / 2 / 280:  28%|██▊       | 280/1000 [16:19<41:59,  3.50s/it][Succeeded / Failed / Skipped / Total] 46 / 232 / 2 / 280:  28%|██▊       | 281/1000 [16:20<41:49,  3.49s/it][Succeeded / Failed / Skipped / Total] 46 / 233 / 2 / 281:  28%|██▊       | 281/1000 [16:20<41:49,  3.49s/it][Succeeded / Failed / Skipped / Total] 46 / 233 / 2 / 281:  28%|██▊       | 282/1000 [16:20<41:37,  3.48s/it]Returns a new DetailedCookieMatcher that matches cookies with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[strada]] ( Matcher < ? super String > [[otherthings]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[otherthings]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[marciano]] ( Matcher < ? super Boolean > [[bullitt]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[bullitt]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches a cookie with a version property . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[written]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[guaranty]] ( Matcher < ? super Boolean > [[q]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[q]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Expect a cookie to be set . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[impala]] ( String [[are]] , String [[gnomes]] ) { spec . cookie ( [[are]] , [[gnomes]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 277 ---------------------------------------------
Expects the given header name to match the expected value . --> Detergent bulgur miracles --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[detergent]] ( String [[bulgur]] , Matcher < String > [[miracles]] ) { spec . header ( [[bulgur]] , [[miracles]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Expect a header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[westridge]] ( String [[manacles]] , String expectedValue ) { spec . header ( [[manacles]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the specified maxAge . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[than]] ( Matcher < ? super Integer > [[bullitt]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[bullitt]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a new JsonPathConfig configured with a number return type . --> Returns a new JsonPathConfig instance with the default parser type gson object mapper factory jackson1 object mapper factory johnzon object mapper factory --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[admiral]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[admiral]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 281 ---------------------------------------------
Returns a new proxy specification with the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[communique]] ( String [[benefited]] ) { return new ProxySpecification ( [[benefited]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 282 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 234 / 2 / 282:  28%|██▊       | 282/1000 [16:20<41:37,  3.48s/it][Succeeded / Failed / Skipped / Total] 46 / 234 / 2 / 282:  28%|██▊       | 283/1000 [16:27<41:41,  3.49s/it][Succeeded / Failed / Skipped / Total] 46 / 235 / 2 / 283:  28%|██▊       | 283/1000 [16:27<41:41,  3.49s/it][Succeeded / Failed / Skipped / Total] 46 / 235 / 2 / 283:  28%|██▊       | 284/1000 [16:31<41:40,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 235 / 2 / 284:  28%|██▊       | 284/1000 [16:31<41:40,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 235 / 2 / 284:  28%|██▊       | 285/1000 [16:33<41:31,  3.48s/it][Succeeded / Failed / Skipped / Total] 47 / 236 / 2 / 285:  28%|██▊       | 285/1000 [16:33<41:31,  3.48s/it][Succeeded / Failed / Skipped / Total] 47 / 236 / 2 / 285:  29%|██▊       | 286/1000 [16:34<41:23,  3.48s/it][Succeeded / Failed / Skipped / Total] 48 / 236 / 2 / 286:  29%|██▊       | 286/1000 [16:34<41:23,  3.48s/it][Succeeded / Failed / Skipped / Total] 48 / 236 / 2 / 286:  29%|██▊       | 287/1000 [16:38<41:21,  3.48s/it][Succeeded / Failed / Skipped / Total] 49 / 236 / 2 / 287:  29%|██▊       | 287/1000 [16:38<41:21,  3.48s/it][Succeeded / Failed / Skipped / Total] 49 / 236 / 2 / 287:  29%|██▉       | 288/1000 [16:39<41:10,  3.47s/it][Succeeded / Failed / Skipped / Total] 50 / 236 / 2 / 288:  29%|██▉       | 288/1000 [16:39<41:10,  3.47s/it][Succeeded / Failed / Skipped / Total] 50 / 236 / 2 / 288:  29%|██▉       | 289/1000 [16:44<41:12,  3.48s/it][Succeeded / Failed / Skipped / Total] 50 / 237 / 2 / 289:  29%|██▉       | 289/1000 [16:44<41:12,  3.48s/it][Succeeded / Failed / Skipped / Total] 50 / 237 / 2 / 289:  29%|██▉       | 290/1000 [16:48<41:08,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 237 / 2 / 290:  29%|██▉       | 290/1000 [16:48<41:08,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 237 / 2 / 290:  29%|██▉       | 291/1000 [16:51<41:04,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 238 / 2 / 291:  29%|██▉       | 291/1000 [16:51<41:04,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 238 / 2 / 291:  29%|██▉       | 292/1000 [16:58<41:08,  3.49s/it]Sets the default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[starkers]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[starkers]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Default logging stream . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , True , logDetailIfValidationFails , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[ginsburg]] ( PrintStream printStream ) { return new LogConfig ( printStream , True , logDetailIfValidationFails , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Enable logging of request and response if validation fails . --> Methode d ajout d ajout d ajout . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[mané]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Sets the default boundary . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[protestants]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[protestants]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Adds an attribute to the request . --> Vie a MockMvcRequestSpec . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[vie]] ( String [[avocado]] , Object attributeValue ) { spec . attribute ( [[avocado]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Adds additional result handlers to the request . --> Sets the purpose of the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[purpose]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> Methode calhoun . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[calhoun]] ( String [[baccarat]] , String headerValue ) { spec . header ( [[baccarat]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Creates a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[cicero]] ( URI uri , String httpMethod , boolean hasBody ) { String [[gait]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[gait]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 290 ---------------------------------------------
Adds a multi - part control . --> Scottsdale kirby atherton --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[scottsdale]] ( String [[kirby]] , String [[atherton]] , String mimeType ) { spec . multiPart ( [[kirby]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[cordially]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[reproached]] = new HashMap < String , Object > ( httpClientParams ) ; [[reproached]] . put ( parameterName , parameterValue ) ; return new [[cordially]] ( httpClientFactory , [[reproached]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 239 / 2 / 292:  29%|██▉       | 292/1000 [16:58<41:08,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 239 / 2 / 292:  29%|██▉       | 293/1000 [17:01<41:04,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 240 / 2 / 293:  29%|██▉       | 293/1000 [17:01<41:04,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 240 / 2 / 293:  29%|██▉       | 294/1000 [17:02<40:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 241 / 2 / 294:  29%|██▉       | 294/1000 [17:02<40:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 241 / 2 / 294:  30%|██▉       | 295/1000 [17:04<40:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 51 / 242 / 2 / 295:  30%|██▉       | 295/1000 [17:04<40:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 51 / 242 / 2 / 295:  30%|██▉       | 296/1000 [17:09<40:48,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 242 / 2 / 296:  30%|██▉       | 296/1000 [17:09<40:48,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 242 / 2 / 296:  30%|██▉       | 297/1000 [17:09<40:37,  3.47s/it][Succeeded / Failed / Skipped / Total] 53 / 242 / 2 / 297:  30%|██▉       | 297/1000 [17:09<40:37,  3.47s/it][Succeeded / Failed / Skipped / Total] 53 / 242 / 2 / 297:  30%|██▉       | 298/1000 [17:12<40:31,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 242 / 2 / 298:  30%|██▉       | 298/1000 [17:12<40:31,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 242 / 2 / 298:  30%|██▉       | 299/1000 [17:16<40:30,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 243 / 2 / 299:  30%|██▉       | 299/1000 [17:16<40:30,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 243 / 2 / 299:  30%|███       | 300/1000 [17:18<40:23,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 244 / 2 / 300:  30%|███       | 300/1000 [17:18<40:23,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 244 / 2 / 300:  30%|███       | 301/1000 [17:21<40:18,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 245 / 2 / 301:  30%|███       | 301/1000 [17:21<40:18,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 245 / 2 / 301:  30%|███       | 302/1000 [17:28<40:23,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 246 / 2 / 302:  30%|███       | 302/1000 [17:28<40:23,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 246 / 2 / 302:  30%|███       | 303/1000 [17:31<40:18,  3.47s/it]Creates a new HttpClientConfig with the specified HttpClientFactory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[flunking]] ( HttpClientFactory [[custom]] ) { return new HttpClientConfig ( [[flunking]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 293 ---------------------------------------------
Adds the specified HTTP client parameters to the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[gunfighter]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 294 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[legitimacy]] ( HttpMultipartMode [[frédéric]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[legitimacy]] , shouldReuseHttpClientInstance , httpClient , "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 295 ---------------------------------------------
Returns the value of the property at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[have]] > [[have]] get ( String path ) { final JSONAssertion [[ancestral]] = createJsonAssertion ( path , params ) ; final Object [[ajmer]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[have]] ) [[ancestral]] . getResult ( [[ajmer]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the integer value stored at the given path . --> Heron lovemaking --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[lovemaking]] ( String [[heron]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the byte value stored at the given path . --> Dorfman dorfman dorfman --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[dorfman]] ( String [[routed]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the short value stored at the given path . --> Divorce de trajectories --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[divorcee]] ( String [[trajectories]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the float value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[gesundheit]] ( String [[routing]] ) { final Object value = get ( [[routing]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Returns the long value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[resettlement]] ( String [[estrada]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the double value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[gastritis]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Get a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[ammonium]] , V > Map < [[ammonium]] , V > [[aloysius]] ( String [[driveways]] ) { return get ( [[driveways]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 247 / 2 / 303:  30%|███       | 303/1000 [17:31<40:18,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 247 / 2 / 303:  30%|███       | 304/1000 [17:32<40:08,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 248 / 2 / 304:  30%|███       | 304/1000 [17:32<40:08,  3.46s/it][Succeeded / Failed / Skipped / Total] 54 / 248 / 2 / 304:  30%|███       | 305/1000 [17:40<40:15,  3.48s/it][Succeeded / Failed / Skipped / Total] 55 / 248 / 2 / 305:  30%|███       | 305/1000 [17:40<40:15,  3.48s/it][Succeeded / Failed / Skipped / Total] 55 / 248 / 2 / 305:  31%|███       | 306/1000 [17:41<40:08,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 249 / 2 / 306:  31%|███       | 306/1000 [17:41<40:08,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 249 / 2 / 306:  31%|███       | 307/1000 [17:42<39:59,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 250 / 2 / 307:  31%|███       | 307/1000 [17:42<39:59,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 250 / 2 / 307:  31%|███       | 308/1000 [17:44<39:51,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 251 / 2 / 308:  31%|███       | 308/1000 [17:44<39:51,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 251 / 2 / 308:  31%|███       | 309/1000 [17:53<40:00,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 252 / 2 / 309:  31%|███       | 309/1000 [17:53<40:00,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 252 / 2 / 309:  31%|███       | 310/1000 [17:56<39:55,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 253 / 2 / 310:  31%|███       | 310/1000 [17:56<39:55,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 253 / 2 / 310:  31%|███       | 311/1000 [17:59<39:51,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 254 / 2 / 311:  31%|███       | 311/1000 [17:59<39:51,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 254 / 2 / 311:  31%|███       | 312/1000 [18:01<39:44,  3.47s/it]Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[danzig]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Returns the value of the given path as an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , False ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[df]] > [[df]] getObject ( String path , Class < [[df]] > objectType ) { Object object = getFromPath ( path , False ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a parameter to the request . --> Máximo máximo --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[máximo]] ( String [[anted]] , Object ... parameterValues ) { spec . param ( [[anted]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Gets a list of objects from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( [[path]] ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[agnès]] ( String [[boulevards]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[foreground]] = get ( [[boulevards]] ) ; final List < T > [[millimetres]] = new LinkedList < T > ( ) ; if ( [[foreground]] != null ) { for ( T t : [[foreground]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[broccoli]] ( String key , Object value , Object ... [[pituitary]] ) { spec . cookie ( key , value , [[pituitary]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[chutzpah]] ( String [[distillery]] , Collection < ? > [[embryos]] ) { spec . param ( [[distillery]] , [[embryos]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Sets the form parameter update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[boombastic]] ( UpdateStrategy [[desserts]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[desserts]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
Creates a filter that logs the response to the given stream if the matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[cathleen]] ( PrintStream [[fontaine]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[fontaine]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Clean up the backing map for the given keys and sources . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[methamphetamine]] ( Set < KeyAndSource > [[carlino]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[carlino]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 255 / 2 / 312:  31%|███       | 312/1000 [18:01<39:44,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 255 / 2 / 312:  31%|███▏      | 313/1000 [18:01<39:34,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 256 / 2 / 313:  31%|███▏      | 313/1000 [18:01<39:34,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 256 / 2 / 313:  31%|███▏      | 314/1000 [18:07<39:34,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 257 / 2 / 314:  31%|███▏      | 314/1000 [18:07<39:34,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 257 / 2 / 314:  32%|███▏      | 315/1000 [18:09<39:30,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 257 / 2 / 315:  32%|███▏      | 315/1000 [18:09<39:30,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 257 / 2 / 315:  32%|███▏      | 316/1000 [18:13<39:27,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 258 / 2 / 316:  32%|███▏      | 316/1000 [18:13<39:27,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 258 / 2 / 316:  32%|███▏      | 317/1000 [18:17<39:24,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 259 / 2 / 317:  32%|███▏      | 317/1000 [18:17<39:24,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 259 / 2 / 317:  32%|███▏      | 318/1000 [18:27<39:34,  3.48s/it][Succeeded / Failed / Skipped / Total] 56 / 260 / 2 / 318:  32%|███▏      | 318/1000 [18:27<39:34,  3.48s/it][Succeeded / Failed / Skipped / Total] 56 / 260 / 2 / 318:  32%|███▏      | 319/1000 [18:28<39:27,  3.48s/it]Creates a new Cookies instance with the given cookie and additional cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
Index the bindings for this level . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[erence]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 314 ---------------------------------------------
Converts a constant string binding to a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[trapdoor]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the internal dependencies of the given binding . --> zizi a binding --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[zizi]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Remove failed jit binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[chutzpah]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds the injector to the state . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[zanzibar]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 261 / 2 / 319:  32%|███▏      | 319/1000 [18:28<39:27,  3.48s/it][Succeeded / Failed / Skipped / Total] 56 / 261 / 2 / 319:  32%|███▏      | 320/1000 [18:30<39:18,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 262 / 2 / 320:  32%|███▏      | 320/1000 [18:30<39:18,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 262 / 2 / 320:  32%|███▏      | 321/1000 [18:34<39:16,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 263 / 2 / 321:  32%|███▏      | 321/1000 [18:34<39:16,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 263 / 2 / 321:  32%|███▏      | 322/1000 [18:39<39:16,  3.48s/it][Succeeded / Failed / Skipped / Total] 56 / 264 / 2 / 322:  32%|███▏      | 322/1000 [18:39<39:16,  3.48s/it][Succeeded / Failed / Skipped / Total] 56 / 264 / 2 / 322:  32%|███▏      | 323/1000 [18:41<39:11,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 265 / 2 / 323:  32%|███▏      | 323/1000 [18:41<39:11,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 266 / 2 / 324:  32%|███▏      | 324/1000 [18:41<39:00,  3.46s/it][Succeeded / Failed / Skipped / Total] 56 / 266 / 2 / 324:  32%|███▎      | 325/1000 [18:47<39:02,  3.47s/it][Succeeded / Failed / Skipped / Total] 56 / 267 / 2 / 325:  32%|███▎      | 325/1000 [18:47<39:02,  3.47s/it][Succeeded / Failed / Skipped / Total] 57 / 267 / 2 / 326:  33%|███▎      | 326/1000 [18:47<38:52,  3.46s/it][Succeeded / Failed / Skipped / Total] 57 / 267 / 2 / 326:  33%|███▎      | 327/1000 [18:55<38:57,  3.47s/it][Succeeded / Failed / Skipped / Total] 57 / 268 / 2 / 327:  33%|███▎      | 327/1000 [18:55<38:57,  3.47s/it]Cleanup a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[necktie]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[necktie]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 320 ---------------------------------------------
Binds a logger to the injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[furnished]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 321 ---------------------------------------------
Returns an array containing all of the parameters provided by the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[brant]] ( InternalContext [[backgrounds]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 322 ---------------------------------------------
Returns the type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[blowjobs]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[existing]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Returns true if a method overrides b . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[hygienist]] ( Method [[dans]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 325 ---------------------------------------------
Check for misplaced binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[zizi]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
Prepare the built - in converters . --> wili - wili - wili - wili - wili - wili - wili - wili --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[wili]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
Resolves all of the given types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[blokes]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[blokes]] . length ] ; for ( int t = 0 ; t < [[blokes]] . length ; t ++ ) { result [ t ] = resolve ( [[blokes]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 269 / 2 / 328:  33%|███▎      | 328/1000 [18:56<38:47,  3.46s/it][Succeeded / Failed / Skipped / Total] 57 / 269 / 2 / 328:  33%|███▎      | 329/1000 [18:58<38:41,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 269 / 2 / 329:  33%|███▎      | 329/1000 [18:58<38:41,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 270 / 2 / 330:  33%|███▎      | 330/1000 [19:00<38:35,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 270 / 2 / 330:  33%|███▎      | 331/1000 [19:01<38:27,  3.45s/it][Succeeded / Failed / Skipped / Total] 58 / 271 / 2 / 331:  33%|███▎      | 331/1000 [19:01<38:27,  3.45s/it][Succeeded / Failed / Skipped / Total] 58 / 272 / 2 / 332:  33%|███▎      | 332/1000 [19:04<38:23,  3.45s/it][Succeeded / Failed / Skipped / Total] 58 / 272 / 2 / 332:  33%|███▎      | 333/1000 [19:14<38:31,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 273 / 2 / 333:  33%|███▎      | 333/1000 [19:14<38:31,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 273 / 2 / 333:  33%|███▎      | 334/1000 [19:14<38:22,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 274 / 2 / 334:  33%|███▎      | 334/1000 [19:14<38:22,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 274 / 2 / 334:  34%|███▎      | 335/1000 [19:16<38:16,  3.45s/it]Canonicalize a class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[zeller]] ( ClassLoader [[impenetrable]] ) { return [[impenetrable]] != null ? [[impenetrable]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 329 ---------------------------------------------
Checks if the class loader has the same version of cglib . --> Akeelah akeelah akeelah akeelah akeelah --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[akeelah]] ( ClassLoader classLoader ) { Class < ? > [[rcs]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[rcs]] . getName ( ) ) == [[rcs]] ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 330 ---------------------------------------------
Canonicalizes a type literal for a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[renews]] ( TypeLiteral < T > [[brows]] ) { Type [[boyfriend]] = [[brows]] . getType ( ) ; if ( ! isFullySpecified ( [[boyfriend]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[brows]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[brows]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[boyfriend]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 331 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 332 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[basic]] ) { return [[basic]] . getAnnotation ( ) == null ? [[basic]] : Key . get ( [[basic]] . getTypeLiteral ( ) , [[basic]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 333 ---------------------------------------------
Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[puchi]] ( Object [ ] [[luciano]] ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( [[luciano]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 334 ---------------------------------------------
Validates all of the pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors [[errors]] ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[jaquith]] ( Errors [[blunders]] ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[blunders]] ) ; } catch ( ErrorsException e ) { [[blunders]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 275 / 2 / 335:  34%|███▎      | 335/1000 [19:16<38:16,  3.45s/it][Succeeded / Failed / Skipped / Total] 58 / 275 / 2 / 335:  34%|███▎      | 336/1000 [19:22<38:17,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 276 / 2 / 336:  34%|███▎      | 336/1000 [19:22<38:17,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 276 / 2 / 336:  34%|███▎      | 337/1000 [19:26<38:15,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 277 / 2 / 337:  34%|███▎      | 337/1000 [19:26<38:15,  3.46s/it][Succeeded / Failed / Skipped / Total] 58 / 277 / 2 / 337:  34%|███▍      | 338/1000 [19:34<38:19,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 278 / 2 / 338:  34%|███▍      | 338/1000 [19:34<38:19,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 278 / 2 / 338:  34%|███▍      | 339/1000 [19:37<38:15,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 279 / 2 / 339:  34%|███▍      | 339/1000 [19:37<38:15,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 279 / 2 / 339:  34%|███▍      | 340/1000 [19:39<38:09,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 280 / 2 / 340:  34%|███▍      | 340/1000 [19:39<38:09,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 280 / 2 / 340:  34%|███▍      | 341/1000 [19:43<38:06,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 281 / 2 / 341:  34%|███▍      | 341/1000 [19:43<38:06,  3.47s/it][Succeeded / Failed / Skipped / Total] 58 / 281 / 2 / 341:  34%|███▍      | 342/1000 [19:54<38:17,  3.49s/it]Adds the servlet request dispatcher to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[brianna]] ( ServletRequest [[assures]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Returns true if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] [[parameterTypes]] ; if ( member instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[brianna]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] [[akeelah]] ; if ( member instanceof Constructor ) { [[akeelah]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } [[akeelah]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[akeelah]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[augmentation]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Normalize a path . --> [[[FAILED]]]

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[forsythe]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Make an injectable for the given Scoping . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[español]] ( Scoping scoping , InjectorImpl [[aircraft]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[aircraft]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 340 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[involves]] ( Class < ? extends Annotation > [[tracking]] ) { Retention retention = [[tracking]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Returns the scope for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[sizing]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[sizing]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 282 / 2 / 342:  34%|███▍      | 342/1000 [19:54<38:17,  3.49s/it][Succeeded / Failed / Skipped / Total] 58 / 282 / 2 / 342:  34%|███▍      | 343/1000 [19:55<38:10,  3.49s/it][Succeeded / Failed / Skipped / Total] 58 / 283 / 2 / 343:  34%|███▍      | 343/1000 [19:55<38:10,  3.49s/it][Succeeded / Failed / Skipped / Total] 58 / 283 / 2 / 343:  34%|███▍      | 344/1000 [19:56<38:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 284 / 2 / 344:  34%|███▍      | 344/1000 [19:56<38:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 284 / 2 / 344:  34%|███▍      | 345/1000 [20:01<38:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 285 / 2 / 345:  34%|███▍      | 345/1000 [20:01<38:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 285 / 2 / 345:  35%|███▍      | 346/1000 [20:03<37:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 286 / 2 / 346:  35%|███▍      | 346/1000 [20:03<37:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 286 / 2 / 346:  35%|███▍      | 347/1000 [20:07<37:51,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 287 / 2 / 347:  35%|███▍      | 347/1000 [20:07<37:51,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 287 / 2 / 347:  35%|███▍      | 348/1000 [20:10<37:48,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 288 / 2 / 348:  35%|███▍      | 348/1000 [20:10<37:48,  3.48s/it][Succeeded / Failed / Skipped / Total] 58 / 288 / 2 / 348:  35%|███▍      | 349/1000 [20:15<37:47,  3.48s/it]Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[questioned]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 343 ---------------------------------------------
Returns the name of a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[biscayne]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 344 ---------------------------------------------
Finds the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[annotation]] : annotations ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[banister]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[fulfils]] : annotations ) { Class < ? extends Annotation > annotationType = [[fulfils]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Adds a direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[biscayne]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Returns the key for the given type member and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[hurtin]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 347 ---------------------------------------------
Get a ConstructorInjector from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[achieve]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[applauded]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[applauded]] ) ) ; return [[applauded]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 288 / 2 / 349:  35%|███▍      | 349/1000 [20:15<37:47,  3.48s/it][Succeeded / Failed / Skipped / Total] 59 / 288 / 2 / 349:  35%|███▌      | 350/1000 [20:19<37:45,  3.49s/it][Succeeded / Failed / Skipped / Total] 60 / 288 / 2 / 350:  35%|███▌      | 350/1000 [20:19<37:45,  3.49s/it][Succeeded / Failed / Skipped / Total] 60 / 288 / 2 / 350:  35%|███▌      | 351/1000 [20:22<37:39,  3.48s/it][Succeeded / Failed / Skipped / Total] 60 / 289 / 2 / 351:  35%|███▌      | 351/1000 [20:22<37:39,  3.48s/it][Succeeded / Failed / Skipped / Total] 60 / 289 / 2 / 351:  35%|███▌      | 352/1000 [20:24<37:35,  3.48s/it][Succeeded / Failed / Skipped / Total] 60 / 290 / 2 / 352:  35%|███▌      | 352/1000 [20:24<37:35,  3.48s/it][Succeeded / Failed / Skipped / Total] 60 / 290 / 2 / 352:  35%|███▌      | 353/1000 [20:27<37:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 61 / 290 / 2 / 353:  35%|███▌      | 353/1000 [20:27<37:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 61 / 290 / 2 / 353:  35%|███▌      | 354/1000 [20:29<37:24,  3.47s/it][Succeeded / Failed / Skipped / Total] 61 / 291 / 2 / 354:  35%|███▌      | 354/1000 [20:29<37:24,  3.47s/it][Succeeded / Failed / Skipped / Total] 61 / 291 / 2 / 354:  36%|███▌      | 355/1000 [20:44<37:41,  3.51s/it][Succeeded / Failed / Skipped / Total] 61 / 292 / 2 / 355:  36%|███▌      | 355/1000 [20:44<37:41,  3.51s/it][Succeeded / Failed / Skipped / Total] 61 / 292 / 2 / 355:  36%|███▌      | 356/1000 [20:51<37:43,  3.52s/it]Checks if the interceptor class has a scope annotation . --> Methode permettant de archeologists --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[archeologists]] ( Class < ? extends Interceptor > [[frédéric]] ) { for ( Annotation annotation : [[frédéric]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[["Genuinely" == "Genuinely"]]" == "[["Genuinely" == "Genuinely"]]" ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a module for the given module . --> Dahn dahn dahn dahn --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[dahn]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 351 ---------------------------------------------
Write a replace message to the stream . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[anjaana]] ( ) throws ObjectStreamException { Object [ ] [[alitalia]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[alitalia]] . length ; i ++ ) { [[alitalia]] [ i ] = Errors . convert ( [[alitalia]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[alitalia]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[basalt]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 353 ---------------------------------------------
Create a new instance of the given construction context . --> affords the given surroundings and frédéric --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext [[context]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[affords]] ( InternalContext [[surroundings]] , ConstructionContext < T > [[frédéric]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[surroundings]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[frédéric]] . setProxyDelegates ( t ) ; } finally { [[frédéric]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 354 ---------------------------------------------
Creates a new map binder with the specified key and value type and annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < [[K]] > keyType , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[al]] , V > RealMapBinder < [[al]] , V > [[intelligentsia]] ( Binder [[binding]] , TypeLiteral < [[al]] > keyType , Key < V > [[calamari]] ) { [[binding]] = [[binding]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[calamari]] . getTypeLiteral ( ) ; return [[intelligentsia]] ( [[binding]] , keyType , valueType , [[calamari]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binding]] , [[calamari]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if a type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[birnbaum]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 293 / 2 / 356:  36%|███▌      | 356/1000 [20:51<37:43,  3.52s/it][Succeeded / Failed / Skipped / Total] 61 / 293 / 2 / 356:  36%|███▌      | 357/1000 [20:58<37:45,  3.52s/it][Succeeded / Failed / Skipped / Total] 61 / 294 / 2 / 357:  36%|███▌      | 357/1000 [20:58<37:45,  3.52s/it][Succeeded / Failed / Skipped / Total] 61 / 294 / 2 / 357:  36%|███▌      | 358/1000 [21:05<37:49,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 295 / 2 / 358:  36%|███▌      | 358/1000 [21:05<37:49,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 295 / 2 / 358:  36%|███▌      | 359/1000 [21:05<37:40,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 296 / 2 / 359:  36%|███▌      | 359/1000 [21:05<37:40,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 296 / 2 / 359:  36%|███▌      | 360/1000 [21:09<37:37,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 297 / 2 / 360:  36%|███▌      | 360/1000 [21:09<37:37,  3.53s/it][Succeeded / Failed / Skipped / Total] 61 / 297 / 2 / 360:  36%|███▌      | 361/1000 [21:10<37:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 61 / 298 / 2 / 361:  36%|███▌      | 361/1000 [21:10<37:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 61 / 298 / 2 / 361:  36%|███▌      | 362/1000 [21:11<37:21,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 298 / 2 / 362:  36%|███▌      | 362/1000 [21:11<37:21,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 298 / 2 / 362:  36%|███▋      | 363/1000 [21:12<37:12,  3.50s/it]Returns a set of dependencies for the given constructor and the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[shouldn]] ( InjectionPoint [[admiral]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[architects]] = ImmutableSet . builder ( ) ; [[architects]] . addAll ( [[admiral]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[architects]] . addAll ( ip . getDependencies ( ) ) ; } } return [[architects]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Remove assisted dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[yearling]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[decorator]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[decorator]] . add ( dep ) ; } } return [[decorator]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 358 ---------------------------------------------
Checks if a constructor has matching parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[israelis]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 359 ---------------------------------------------
Returns true if the given dependencies are valid for an optimized assisted inject . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[onstage]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 360 ---------------------------------------------
Get the binding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[città]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Returns an error message that indicates that no implementation for the given key was bound . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 362 ---------------------------------------------
Creates a new multibinder that is bound to the given key . --> Factory method to create a new RealMultibinder instance --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[fruit]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[fruit]] ) ; return [[fruit]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
[Succeeded / Failed / Skipped / Total] 62 / 299 / 2 / 363:  36%|███▋      | 363/1000 [21:12<37:12,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 299 / 2 / 363:  36%|███▋      | 364/1000 [21:15<37:09,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 300 / 2 / 364:  36%|███▋      | 364/1000 [21:15<37:09,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 300 / 2 / 364:  36%|███▋      | 365/1000 [21:21<37:08,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 301 / 2 / 365:  36%|███▋      | 365/1000 [21:21<37:08,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 301 / 2 / 365:  37%|███▋      | 366/1000 [21:21<36:59,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 302 / 2 / 366:  37%|███▋      | 366/1000 [21:21<36:59,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 303 / 2 / 367:  37%|███▋      | 367/1000 [21:21<36:49,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 303 / 2 / 367:  37%|███▋      | 368/1000 [21:29<36:54,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 304 / 2 / 368:  37%|███▋      | 368/1000 [21:29<36:54,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 305 / 2 / 369:  37%|███▋      | 369/1000 [21:29<36:45,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 305 / 2 / 369:  37%|███▋      | 370/1000 [21:31<36:38,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 306 / 2 / 370:  37%|███▋      | 370/1000 [21:31<36:38,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 307 / 2 / 371:  37%|███▋      | 371/1000 [21:38<36:40,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 307 / 2 / 371:  37%|███▋      | 372/1000 [21:41<36:37,  3.50s/it]--------------------------------------------- Result 363 ---------------------------------------------
Invoke the method on the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[dunning]] ( Object proxy , final Method method , final Object [ ] [[animation]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
Returns the injection point for the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[depeche]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
Returns a set of internal dependencies for this factory . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[trapdoor]] ( ) { ImmutableSet . Builder < InjectionPoint > [[editor]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[editor]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 366 ---------------------------------------------
Returns true if the constructor has at inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[billows]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 367 ---------------------------------------------
Find the next matching filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[vancomycin]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 368 ---------------------------------------------
Initializes the lookup manager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[mortadella]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the line number of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[whammy]] ( Member [[congresswoman]] ) { Preconditions . checkArgument ( type == [[congresswoman]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[congresswoman]] , [[congresswoman]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[congresswoman]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Returns a module for the given module using the given method scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[shrinks]] ( Object [[bunches]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[bunches]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Transfers a request to a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[rupee]] ( Callable < T > [[brûlée]] ) { return wrap ( [[brûlée]] , [[rupee]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 308 / 2 / 372:  37%|███▋      | 372/1000 [21:41<36:37,  3.50s/it][Succeeded / Failed / Skipped / Total] 62 / 308 / 2 / 372:  37%|███▋      | 373/1000 [21:43<36:31,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 309 / 2 / 373:  37%|███▋      | 373/1000 [21:43<36:31,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 309 / 2 / 373:  37%|███▋      | 374/1000 [21:46<36:26,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 310 / 2 / 374:  37%|███▋      | 374/1000 [21:46<36:26,  3.49s/it][Succeeded / Failed / Skipped / Total] 62 / 310 / 2 / 374:  38%|███▊      | 375/1000 [21:57<36:35,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 311 / 2 / 375:  38%|███▊      | 375/1000 [21:57<36:35,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 311 / 2 / 375:  38%|███▊      | 376/1000 [21:58<36:27,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 312 / 2 / 376:  38%|███▊      | 376/1000 [21:58<36:27,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 312 / 2 / 376:  38%|███▊      | 377/1000 [22:05<36:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 62 / 313 / 2 / 377:  38%|███▊      | 377/1000 [22:05<36:29,  3.52s/it][Succeeded / Failed / Skipped / Total] 62 / 313 / 2 / 377:  38%|███▊      | 378/1000 [22:05<36:21,  3.51s/it]Returns a callable that will continue the execution of the given callable with the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[mangan]] ( Callable < T > [[consonant]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[consonant]] , [[mangan]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Validate and canonicalize a value . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[morgenstern]] ( Key < ? > key , Object [[wares]] ) { if ( [[wares]] == null || [[wares]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[wares]] ) ) { throw new IllegalArgumentException ( "Value[" + [[wares]] + "] of type[" + [[wares]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[wares]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Returns the annotation claimed by the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[micromachine]] ( Binder binder , Method [[style]] ) { if ( [[style]] . isBridge ( ) || [[style]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[style]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[style]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 375 ---------------------------------------------
Returns a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[elicit]] ( Class < T > [[dude]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[dude]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[brashear]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Gets the injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[hawks]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; [[hawks]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 314 / 2 / 378:  38%|███▊      | 378/1000 [22:05<36:21,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 314 / 2 / 378:  38%|███▊      | 379/1000 [22:09<36:18,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 315 / 2 / 379:  38%|███▊      | 379/1000 [22:09<36:18,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 315 / 2 / 379:  38%|███▊      | 380/1000 [22:13<36:16,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 316 / 2 / 380:  38%|███▊      | 380/1000 [22:13<36:16,  3.51s/it][Succeeded / Failed / Skipped / Total] 62 / 316 / 2 / 380:  38%|███▊      | 381/1000 [22:24<36:24,  3.53s/it][Succeeded / Failed / Skipped / Total] 62 / 317 / 2 / 381:  38%|███▊      | 381/1000 [22:24<36:24,  3.53s/it][Succeeded / Failed / Skipped / Total] 62 / 317 / 2 / 381:  38%|███▊      | 382/1000 [22:26<36:18,  3.53s/it][Succeeded / Failed / Skipped / Total] 62 / 318 / 2 / 382:  38%|███▊      | 382/1000 [22:26<36:18,  3.53s/it][Succeeded / Failed / Skipped / Total] 62 / 318 / 2 / 382:  38%|███▊      | 383/1000 [22:34<36:22,  3.54s/it]Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[influencing]] ( Class < ? extends Annotation > [[harpers]] ) { [[harpers]] = Annotations . canonicalizeIfNamed ( [[harpers]] ) ; if ( isAllDefaultMethods ( [[harpers]] ) ) { return [[influencing]] ( generateAnnotation ( [[harpers]] ) ) ; } checkNotNull ( [[harpers]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[harpers]] ) ; ensureIsBindingAnnotation ( [[harpers]] ) ; return new AnnotationTypeStrategy ( [[harpers]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the source of the binding . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[racketeering]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a new members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[dea]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[begets]] ( String messageFormat , Object ... [[excuses]] ) { return [[begets]] ( null , messageFormat , [[excuses]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Prunes the stack trace of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[embezzler]] ( Throwable throwable ) { for ( Throwable [[m]] = throwable ; [[m]] != null ; [[m]] = [[m]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[m]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[m]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 383 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 319 / 2 / 383:  38%|███▊      | 383/1000 [22:34<36:22,  3.54s/it][Succeeded / Failed / Skipped / Total] 62 / 319 / 2 / 383:  38%|███▊      | 384/1000 [22:39<36:21,  3.54s/it][Succeeded / Failed / Skipped / Total] 62 / 320 / 2 / 384:  38%|███▊      | 384/1000 [22:39<36:21,  3.54s/it][Succeeded / Failed / Skipped / Total] 62 / 320 / 2 / 384:  38%|███▊      | 385/1000 [22:43<36:18,  3.54s/it][Succeeded / Failed / Skipped / Total] 62 / 321 / 2 / 385:  38%|███▊      | 385/1000 [22:43<36:18,  3.54s/it][Succeeded / Failed / Skipped / Total] 62 / 321 / 2 / 385:  39%|███▊      | 386/1000 [22:50<36:19,  3.55s/it][Succeeded / Failed / Skipped / Total] 62 / 322 / 2 / 386:  39%|███▊      | 386/1000 [22:50<36:19,  3.55s/it][Succeeded / Failed / Skipped / Total] 62 / 322 / 2 / 386:  39%|███▊      | 387/1000 [22:54<36:17,  3.55s/it][Succeeded / Failed / Skipped / Total] 62 / 323 / 2 / 387:  39%|███▊      | 387/1000 [22:54<36:17,  3.55s/it][Succeeded / Failed / Skipped / Total] 62 / 323 / 2 / 387:  39%|███▉      | 388/1000 [22:55<36:09,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 323 / 2 / 388:  39%|███▉      | 388/1000 [22:55<36:09,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 323 / 2 / 388:  39%|███▉      | 389/1000 [22:56<36:02,  3.54s/it]Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String messageFormat , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[manufacture]] ( Throwable cause , String messageFormat , Object ... [[controversial]] ) { return [[manufacture]] ( cause , ImmutableList . of ( ) , messageFormat , [[controversial]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[changed]] ( Object [[dollar]] ) { ElementSource [[descent]] = null ; if ( [[dollar]] instanceof ElementSource ) { [[descent]] = ( ElementSource ) [[dollar]] ; [[dollar]] = [[descent]] . getDeclaringSource ( ) ; } return [[changed]] ( [[dollar]] , [[descent]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Returns true if the class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[bretagne]] ( String [[anthea]] ) { return ( parent != null && parent . shouldBeSkipped ( [[anthea]] ) ) || classNamesToSkip . contains ( [[anthea]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new exception message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[build]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Get the stack trace from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[covington]] ) { Preconditions . checkNotNull ( [[covington]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[covington]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Formats a list of error messages . --> Janie masthead compositions --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String [[heading]] , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[janie]] ( String [[masthead]] , Collection < Message > [[compositions]] ) { Formatter fmt = new Formatter ( ) . format ( [[masthead]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[compositions]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[compositions]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[compositions]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[compositions]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 389 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 324 / 2 / 389:  39%|███▉      | 389/1000 [22:56<36:02,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 324 / 2 / 389:  39%|███▉      | 390/1000 [23:03<36:04,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 325 / 2 / 390:  39%|███▉      | 390/1000 [23:03<36:04,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 325 / 2 / 390:  39%|███▉      | 391/1000 [23:06<35:59,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 2 / 391:  39%|███▉      | 391/1000 [23:06<35:59,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 326 / 2 / 391:  39%|███▉      | 392/1000 [23:11<35:57,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 327 / 2 / 392:  39%|███▉      | 392/1000 [23:11<35:57,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 327 / 2 / 392:  39%|███▉      | 393/1000 [23:16<35:56,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 2 / 393:  39%|███▉      | 393/1000 [23:16<35:56,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 2 / 393:  39%|███▉      | 394/1000 [23:16<35:48,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 3 / 394:  39%|███▉      | 394/1000 [23:16<35:48,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 328 / 3 / 394:  40%|███▉      | 395/1000 [23:18<35:41,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 329 / 3 / 395:  40%|███▉      | 395/1000 [23:18<35:41,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 329 / 3 / 395:  40%|███▉      | 396/1000 [23:29<35:49,  3.56s/it][Succeeded / Failed / Skipped / Total] 63 / 330 / 3 / 396:  40%|███▉      | 396/1000 [23:29<35:49,  3.56s/it][Succeeded / Failed / Skipped / Total] 63 / 330 / 3 / 396:  40%|███▉      | 397/1000 [23:30<35:41,  3.55s/it]Main entry point . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[senior]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 390 ---------------------------------------------
Returns a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[throughout]] ( final T [[lawsuit]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[lawsuit]] ; } @ Override public String toString ( ) { return String . valueOf ( [[lawsuit]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 391 ---------------------------------------------
Pushes a state to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[purging]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
Pushes a dependency to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[embezzler]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 393 ---------------------------------------------
Provision a provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > [[provider]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[regulation]] ( Provider < ? extends T > [[entrepreneur]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[entrepreneur]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 394 ---------------------------------------------
Throws an exception if it is an unchecked exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Adds a connection event processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[clinics]] ( ConnectionEventType [[handwriting]] , ConnectionEventProcessor [[converters]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[handwriting]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[handwriting]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[handwriting]] ) ; } processorList . add ( [[converters]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 331 / 3 / 397:  40%|███▉      | 397/1000 [23:30<35:41,  3.55s/it][Succeeded / Failed / Skipped / Total] 63 / 331 / 3 / 397:  40%|███▉      | 398/1000 [23:30<35:33,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 332 / 3 / 398:  40%|███▉      | 398/1000 [23:30<35:33,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 332 / 3 / 398:  40%|███▉      | 399/1000 [23:31<35:26,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 333 / 3 / 399:  40%|███▉      | 399/1000 [23:31<35:26,  3.54s/it][Succeeded / Failed / Skipped / Total] 63 / 333 / 3 / 399:  40%|████      | 400/1000 [23:34<35:21,  3.54s/it][Succeeded / Failed / Skipped / Total] 64 / 333 / 3 / 400:  40%|████      | 400/1000 [23:34<35:21,  3.54s/it][Succeeded / Failed / Skipped / Total] 64 / 333 / 3 / 400:  40%|████      | 401/1000 [23:42<35:24,  3.55s/it][Succeeded / Failed / Skipped / Total] 65 / 333 / 3 / 401:  40%|████      | 401/1000 [23:42<35:24,  3.55s/it][Succeeded / Failed / Skipped / Total] 65 / 333 / 3 / 401:  40%|████      | 402/1000 [23:46<35:22,  3.55s/it][Succeeded / Failed / Skipped / Total] 66 / 333 / 3 / 402:  40%|████      | 402/1000 [23:46<35:22,  3.55s/it][Succeeded / Failed / Skipped / Total] 66 / 333 / 3 / 402:  40%|████      | 403/1000 [23:50<35:19,  3.55s/it][Succeeded / Failed / Skipped / Total] 67 / 333 / 3 / 403:  40%|████      | 403/1000 [23:50<35:19,  3.55s/it][Succeeded / Failed / Skipped / Total] 67 / 333 / 3 / 403:  40%|████      | 404/1000 [23:50<35:10,  3.54s/it][Succeeded / Failed / Skipped / Total] 67 / 334 / 3 / 404:  40%|████      | 404/1000 [23:50<35:10,  3.54s/it][Succeeded / Failed / Skipped / Total] 67 / 334 / 3 / 404:  40%|████      | 405/1000 [23:51<35:02,  3.53s/it]Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[corporate]] ( RemotingProcessor < ? > processor ) { if ( this . [[memorandum]] == null ) { this . [[memorandum]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[memorandum]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 398 ---------------------------------------------
Called when a connection event is received . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[inflammatory]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[broyles]] = this . [[optimus]] . get ( type ) ; if ( [[broyles]] != null ) { for ( ConnectionEventProcessor processor : [[broyles]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 399 ---------------------------------------------
Registers a remoting processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[blender]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[blender]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[blender]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 400 ---------------------------------------------
Try to get a url . --> Returns the url for the given url or null if not found . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[anxiously]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 401 ---------------------------------------------
Decodes the protocol code . --> Aoi d ajo . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[aoi]] ( ByteBuf [[dans]] ) { if ( [[dans]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[dans]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 402 ---------------------------------------------
Returns a connection for the given url if it does not exist . --> inviting a connection to a remote server --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[inviting]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
Scan all connections . --> Analyzing all connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[analysing]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 404 ---------------------------------------------
Returns the processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[bombarded]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 334 / 3 / 405:  40%|████      | 405/1000 [23:51<35:02,  3.53s/it][Succeeded / Failed / Skipped / Total] 68 / 334 / 3 / 405:  41%|████      | 406/1000 [23:54<34:58,  3.53s/it][Succeeded / Failed / Skipped / Total] 68 / 335 / 3 / 406:  41%|████      | 406/1000 [23:54<34:58,  3.53s/it][Succeeded / Failed / Skipped / Total] 68 / 335 / 3 / 406:  41%|████      | 407/1000 [23:55<34:51,  3.53s/it][Succeeded / Failed / Skipped / Total] 69 / 335 / 3 / 407:  41%|████      | 407/1000 [23:55<34:51,  3.53s/it][Succeeded / Failed / Skipped / Total] 69 / 335 / 3 / 407:  41%|████      | 408/1000 [23:58<34:46,  3.53s/it][Succeeded / Failed / Skipped / Total] 70 / 335 / 3 / 408:  41%|████      | 408/1000 [23:58<34:46,  3.53s/it][Succeeded / Failed / Skipped / Total] 70 / 335 / 3 / 408:  41%|████      | 409/1000 [23:58<34:39,  3.52s/it][Succeeded / Failed / Skipped / Total] 71 / 335 / 3 / 409:  41%|████      | 409/1000 [23:58<34:39,  3.52s/it][Succeeded / Failed / Skipped / Total] 71 / 335 / 3 / 409:  41%|████      | 410/1000 [24:00<34:33,  3.51s/it][Succeeded / Failed / Skipped / Total] 72 / 335 / 3 / 410:  41%|████      | 410/1000 [24:00<34:33,  3.51s/it][Succeeded / Failed / Skipped / Total] 72 / 335 / 3 / 410:  41%|████      | 411/1000 [24:10<34:38,  3.53s/it][Succeeded / Failed / Skipped / Total] 72 / 336 / 3 / 411:  41%|████      | 411/1000 [24:10<34:38,  3.53s/it][Succeeded / Failed / Skipped / Total] 72 / 336 / 3 / 411:  41%|████      | 412/1000 [24:12<34:33,  3.53s/it]Create a connection and heal if need . --> isla isla isla isla --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[isla]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
Returns a map of all connections in the pool . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[preconceptions]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 407 ---------------------------------------------
Create a connection . --> Adolescent connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[adolescent]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 408 ---------------------------------------------
Closes a connection . --> Remove anomalies . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[anomalies]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Remove a connection pool . --> This method is called when a connection is acquired . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String [[poolKey]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[poolKey]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[acquired]] ( String [[poltergeists]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[poltergeists]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 410 ---------------------------------------------
Heal if need . --> buckskin . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[buckskin]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[absolution]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[seeked]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 412 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 337 / 3 / 412:  41%|████      | 412/1000 [24:12<34:33,  3.53s/it][Succeeded / Failed / Skipped / Total] 72 / 337 / 3 / 412:  41%|████▏     | 413/1000 [24:16<34:30,  3.53s/it][Succeeded / Failed / Skipped / Total] 73 / 337 / 3 / 413:  41%|████▏     | 413/1000 [24:16<34:30,  3.53s/it][Succeeded / Failed / Skipped / Total] 73 / 338 / 3 / 414:  41%|████▏     | 414/1000 [24:17<34:22,  3.52s/it][Succeeded / Failed / Skipped / Total] 73 / 338 / 3 / 414:  42%|████▏     | 415/1000 [24:18<34:15,  3.51s/it][Succeeded / Failed / Skipped / Total] 73 / 339 / 3 / 415:  42%|████▏     | 415/1000 [24:18<34:15,  3.51s/it][Succeeded / Failed / Skipped / Total] 74 / 339 / 3 / 416:  42%|████▏     | 416/1000 [24:21<34:11,  3.51s/it][Succeeded / Failed / Skipped / Total] 74 / 339 / 3 / 416:  42%|████▏     | 417/1000 [24:21<34:03,  3.51s/it]Adds an attribute to the map if it is not already present . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[momentous]] , Object [[cherishes]] ) { return attributes . putIfAbsent ( [[momentous]] , [[cherishes]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
Dispatch to the user processor . --> Deportment method . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[deportment]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 414 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[latched]] ( ) { if ( closed . compareAndSet ( "[["Mock" != "Mock"]]" != "[["Mock" != "Mock"]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[after]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[after]] . isSuccess ( ) , [[after]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 415 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[lifer]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[fiction]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[lifer]] ( ( MultiInterestUserProcessor ) processor , [[fiction]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[fiction]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 416 ---------------------------------------------
Pre - process remoting context . --> This method is called when an aldrich request is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[aldrich]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 339 / 3 / 417:  42%|████▏     | 417/1000 [24:21<34:03,  3.51s/it][Succeeded / Failed / Skipped / Total] 76 / 339 / 3 / 418:  42%|████▏     | 418/1000 [24:26<34:01,  3.51s/it][Succeeded / Failed / Skipped / Total] 76 / 339 / 3 / 418:  42%|████▏     | 419/1000 [24:31<34:00,  3.51s/it][Succeeded / Failed / Skipped / Total] 77 / 339 / 3 / 419:  42%|████▏     | 419/1000 [24:31<34:00,  3.51s/it]Deserialize a request command . --> Perform an authorizing operation . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[authorizing]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 418 ---------------------------------------------
Debug log . --> Hennessy method . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[hennessy]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
Invoke a RemotingCommand with a callback . --> Send a remoting command to agoraphobia --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[agoraphobia]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 340 / 3 / 420:  42%|████▏     | 420/1000 [24:32<33:53,  3.51s/it][Succeeded / Failed / Skipped / Total] 77 / 340 / 3 / 420:  42%|████▏     | 421/1000 [24:38<33:53,  3.51s/it][Succeeded / Failed / Skipped / Total] 77 / 341 / 3 / 421:  42%|████▏     | 421/1000 [24:38<33:53,  3.51s/it][Succeeded / Failed / Skipped / Total] 78 / 341 / 3 / 422:  42%|████▏     | 422/1000 [24:39<33:46,  3.51s/it][Succeeded / Failed / Skipped / Total] 78 / 341 / 3 / 422:  42%|████▏     | 423/1000 [24:43<33:43,  3.51s/it][Succeeded / Failed / Skipped / Total] 79 / 341 / 3 / 423:  42%|████▏     | 423/1000 [24:43<33:43,  3.51s/it][Succeeded / Failed / Skipped / Total] 79 / 341 / 4 / 424:  42%|████▏     | 424/1000 [24:44<33:36,  3.50s/it][Succeeded / Failed / Skipped / Total] 79 / 341 / 4 / 424:  42%|████▎     | 425/1000 [24:44<33:27,  3.49s/it][Succeeded / Failed / Skipped / Total] 80 / 341 / 4 / 425:  42%|████▎     | 425/1000 [24:44<33:27,  3.49s/it]Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[fiddled]] ( MultiInterestUserProcessor < ? > [[optimus]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[optimus]] . multiInterest ( ) || [[optimus]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[optimus]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[optimus]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 421 ---------------------------------------------
Log request timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , remoteAddr , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[gondola]] ( final RpcRequestCommand [[cam]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cam]] . getId ( ) , currentTimestamp , [[cam]] . getArriveTime ( ) , ( currentTimestamp - [[cam]] . getArriveTime ( ) ) , [[cam]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cam]] . getId ( ) , remoteAddr , ( currentTimestamp - [[cam]] . getArriveTime ( ) ) , [[cam]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
Process a message . --> Lawsuit method to execute a mail --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T [[msg]] , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , [[msg]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[lawsuit]] ( RemotingContext ctx , T [[mail]] , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , [[mail]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 423 ---------------------------------------------
Convert an integer to a bit set . --> Rehabilitates the given value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[rehabilitating]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Stops the heal connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Adds a reconnect task . --> Batuta a connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[batuta]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 342 / 4 / 426:  43%|████▎     | 426/1000 [24:46<33:22,  3.49s/it][Succeeded / Failed / Skipped / Total] 80 / 342 / 4 / 426:  43%|████▎     | 427/1000 [24:49<33:18,  3.49s/it][Succeeded / Failed / Skipped / Total] 80 / 343 / 4 / 427:  43%|████▎     | 427/1000 [24:49<33:18,  3.49s/it][Succeeded / Failed / Skipped / Total] 81 / 343 / 4 / 428:  43%|████▎     | 428/1000 [24:55<33:19,  3.49s/it][Succeeded / Failed / Skipped / Total] 81 / 343 / 4 / 428:  43%|████▎     | 429/1000 [24:56<33:11,  3.49s/it]Sends a remoting command to the remote peer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 427 ---------------------------------------------
Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[honeywell]] ( BitSet [[bolivian]] ) { int value = 0 ; for ( int i = 0 ; i < [[bolivian]] . length ( ) ; ++ i ) { if ( [[bolivian]] . get ( i ) ) { value += 1 << i ; } } if ( [[bolivian]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bolivian]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 428 ---------------------------------------------
Close fresh select connections . --> Babysitters . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[babysitters]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 343 / 4 / 429:  43%|████▎     | 429/1000 [24:56<33:11,  3.49s/it][Succeeded / Failed / Skipped / Total] 83 / 343 / 4 / 430:  43%|████▎     | 430/1000 [24:59<33:07,  3.49s/it][Succeeded / Failed / Skipped / Total] 83 / 343 / 4 / 430:  43%|████▎     | 431/1000 [24:59<32:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 84 / 343 / 4 / 431:  43%|████▎     | 431/1000 [24:59<32:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 85 / 343 / 4 / 432:  43%|████▎     | 432/1000 [25:03<32:56,  3.48s/it][Succeeded / Failed / Skipped / Total] 85 / 343 / 4 / 432:  43%|████▎     | 433/1000 [25:04<32:49,  3.47s/it]Monitor connections . --> Audits a list of connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connections]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connections]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[audit]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connected]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connected]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 430 ---------------------------------------------
Filter connections by service status . --> Filters the given relationship . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[connections]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[relationship]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[affirming]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[relationship]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[affirming]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[affirming]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 431 ---------------------------------------------
Log info information . --> abandons the given address . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[abandons]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 432 ---------------------------------------------
Get a system property as a boolean . --> Checks if a mapola is enabled . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[amapola]] ( String key , String [[combines]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[combines]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 433 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 343 / 4 / 433:  43%|████▎     | 433/1000 [25:04<32:49,  3.47s/it][Succeeded / Failed / Skipped / Total] 86 / 344 / 4 / 434:  43%|████▎     | 434/1000 [25:06<32:44,  3.47s/it][Succeeded / Failed / Skipped / Total] 86 / 344 / 4 / 434:  44%|████▎     | 435/1000 [25:07<32:38,  3.47s/it][Succeeded / Failed / Skipped / Total] 87 / 344 / 4 / 435:  44%|████▎     | 435/1000 [25:07<32:38,  3.47s/it][Succeeded / Failed / Skipped / Total] 88 / 344 / 4 / 436:  44%|████▎     | 436/1000 [25:09<32:32,  3.46s/it][Succeeded / Failed / Skipped / Total] 88 / 344 / 4 / 436:  44%|████▎     | 437/1000 [25:10<32:26,  3.46s/it][Succeeded / Failed / Skipped / Total] 89 / 344 / 4 / 437:  44%|████▎     | 437/1000 [25:10<32:26,  3.46s/it][Succeeded / Failed / Skipped / Total] 89 / 345 / 4 / 438:  44%|████▍     | 438/1000 [25:11<32:19,  3.45s/it][Succeeded / Failed / Skipped / Total] 89 / 345 / 4 / 438:  44%|████▍     | 439/1000 [25:11<32:12,  3.44s/it][Succeeded / Failed / Skipped / Total] 90 / 345 / 4 / 439:  44%|████▍     | 439/1000 [25:11<32:12,  3.44s/it][Succeeded / Failed / Skipped / Total] 90 / 346 / 4 / 440:  44%|████▍     | 440/1000 [25:19<32:14,  3.45s/it][Succeeded / Failed / Skipped / Total] 90 / 346 / 4 / 440:  44%|████▍     | 441/1000 [25:24<32:12,  3.46s/it]Returns true if the request timed out . --> Returns true if the buttercups timed out . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[buttercups]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 434 ---------------------------------------------
Convert a request to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[fundraiser]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[captains]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 435 ---------------------------------------------
Get a random connection from a list of connections --> Bubbe the given list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[bubbe]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 436 ---------------------------------------------
Returns the value of the specified key or the default if not found . --> Returns the billion associated with the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[billion]] > [[billion]] get ( String key , [[billion]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[billion]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 437 ---------------------------------------------
Returns the value of a property . --> Savannah zurueck . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[savannah]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 438 ---------------------------------------------
Gets the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[interested]] ( String [[insistent]] ) { return StringUtils . isBlank ( [[insistent]] ) ? null : this . userProcessors . get ( [[insistent]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 439 ---------------------------------------------
Resolve the response object . --> Helper method to convert a ResponseCommand to a ResponseObject --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[foi]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Converts a response command to a response object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[anomalies]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 346 / 4 / 441:  44%|████▍     | 441/1000 [25:24<32:12,  3.46s/it][Succeeded / Failed / Skipped / Total] 91 / 346 / 4 / 441:  44%|████▍     | 442/1000 [25:25<32:06,  3.45s/it][Succeeded / Failed / Skipped / Total] 91 / 347 / 4 / 442:  44%|████▍     | 442/1000 [25:25<32:06,  3.45s/it][Succeeded / Failed / Skipped / Total] 91 / 347 / 4 / 442:  44%|████▍     | 443/1000 [25:26<31:58,  3.45s/it][Succeeded / Failed / Skipped / Total] 92 / 347 / 4 / 443:  44%|████▍     | 443/1000 [25:26<31:58,  3.45s/it][Succeeded / Failed / Skipped / Total] 92 / 347 / 4 / 443:  44%|████▍     | 444/1000 [25:27<31:52,  3.44s/it][Succeeded / Failed / Skipped / Total] 92 / 348 / 4 / 444:  44%|████▍     | 444/1000 [25:27<31:52,  3.44s/it][Succeeded / Failed / Skipped / Total] 92 / 348 / 4 / 444:  44%|████▍     | 445/1000 [25:34<31:53,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 348 / 4 / 445:  44%|████▍     | 445/1000 [25:34<31:53,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 348 / 4 / 445:  45%|████▍     | 446/1000 [25:36<31:48,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 349 / 4 / 446:  45%|████▍     | 446/1000 [25:36<31:48,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 349 / 4 / 446:  45%|████▍     | 447/1000 [25:37<31:42,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 350 / 4 / 447:  45%|████▍     | 447/1000 [25:37<31:42,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 350 / 4 / 447:  45%|████▍     | 448/1000 [25:38<31:35,  3.43s/it]Print connection trace log . --> Logs an aphid message . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[aphid]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 442 ---------------------------------------------
Converts a response command to an exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[defrosting]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
Return detail error message . --> Abuela la abuela . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[abuela]] ( String [[braulio]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[braulio]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[braulio]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 444 ---------------------------------------------
Create a server exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[azaleas]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 445 ---------------------------------------------
Creates a new EventLoopGroup using the specified thread factory . --> Terrance EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[terrance]] ( int [[agoraphobia]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[agoraphobia]] , threadFactory ) : new NioEventLoopGroup ( [[agoraphobia]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 446 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[puggy]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[clicker]] = channel . remoteAddress ( ) ; return doParse ( [[clicker]] != null ? [[clicker]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[kyung]] ( final Channel [[conduits]] ) { if ( null == [[conduits]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[conduits]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 351 / 4 / 448:  45%|████▍     | 448/1000 [25:38<31:35,  3.43s/it][Succeeded / Failed / Skipped / Total] 93 / 351 / 4 / 448:  45%|████▍     | 449/1000 [25:46<31:37,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 352 / 4 / 449:  45%|████▍     | 449/1000 [25:46<31:37,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 352 / 4 / 449:  45%|████▌     | 450/1000 [25:48<31:32,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 353 / 4 / 450:  45%|████▌     | 450/1000 [25:48<31:32,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 353 / 4 / 450:  45%|████▌     | 451/1000 [25:50<31:27,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 354 / 4 / 451:  45%|████▌     | 451/1000 [25:50<31:27,  3.44s/it][Succeeded / Failed / Skipped / Total] 93 / 354 / 4 / 451:  45%|████▌     | 452/1000 [25:50<31:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 93 / 355 / 4 / 452:  45%|████▌     | 452/1000 [25:50<31:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 93 / 355 / 4 / 452:  45%|████▌     | 453/1000 [26:01<31:25,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 356 / 4 / 453:  45%|████▌     | 453/1000 [26:01<31:25,  3.45s/it][Succeeded / Failed / Skipped / Total] 93 / 356 / 4 / 453:  45%|████▌     | 454/1000 [26:02<31:19,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 4 / 454:  45%|████▌     | 454/1000 [26:02<31:19,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 356 / 4 / 454:  46%|████▌     | 455/1000 [26:03<31:13,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 357 / 4 / 455:  46%|████▌     | 455/1000 [26:03<31:13,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 357 / 4 / 455:  46%|████▌     | 456/1000 [26:07<31:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 358 / 4 / 456:  46%|████▌     | 456/1000 [26:07<31:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 358 / 4 / 456:  46%|████▌     | 457/1000 [26:10<31:06,  3.44s/it]Parse the remote IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[likey]] ( final Channel [[avenues]] ) { if ( null == [[avenues]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[avenues]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse the remote host name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[tapers]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Parse the local IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[celesta]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Parse the remote port from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[puggy]] ( final Channel [[canal]] ) { if ( null == [[canal]] ) { return - 1 ; } final InetSocketAddress [[away]] = ( InetSocketAddress ) [[canal]] . remoteAddress ( ) ; if ( [[away]] != null ) { return [[away]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Returns the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[hemorrhoid]] ( final Channel [[mancha]] ) { if ( null == [[mancha]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[mancha]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parse a socket address to a host ip . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[lamarr]] ( SocketAddress [[bergère]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[bergère]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 454 ---------------------------------------------
Get a connection from the pool . --> Returns null if there are no connections in the pool . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > [[snapshot]] = new ArrayList < Connection > ( this . [[conns]] ) ; if ( [[snapshot]] . size ( ) > 0 ) { return this . strategy . select ( [[snapshot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[attains]] ( ) { markAccess ( ) ; if ( null != this . [[ahhhhhhh]] ) { List < Connection > [[freeze]] = new ArrayList < Connection > ( this . [[ahhhhhhh]] ) ; if ( [[freeze]] . size ( ) > 0 ) { return this . strategy . select ( [[freeze]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Adds a connection to the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[absolutely]] = this . [[hulland]] . addIfAbsent ( connection ) ; if ( [[absolutely]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 456 ---------------------------------------------
Removes a connection from the list and tries to close it . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[conns]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[shifting]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 359 / 4 / 457:  46%|████▌     | 457/1000 [26:10<31:06,  3.44s/it][Succeeded / Failed / Skipped / Total] 94 / 359 / 4 / 457:  46%|████▌     | 458/1000 [26:10<30:58,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 359 / 5 / 458:  46%|████▌     | 458/1000 [26:10<30:58,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 359 / 5 / 458:  46%|████▌     | 459/1000 [26:15<30:56,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 360 / 5 / 459:  46%|████▌     | 459/1000 [26:15<30:56,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 360 / 5 / 459:  46%|████▌     | 460/1000 [26:15<30:49,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 361 / 5 / 460:  46%|████▌     | 460/1000 [26:15<30:49,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 361 / 5 / 460:  46%|████▌     | 461/1000 [26:18<30:45,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 362 / 5 / 461:  46%|████▌     | 461/1000 [26:18<30:45,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 362 / 5 / 461:  46%|████▌     | 462/1000 [26:18<30:38,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 362 / 6 / 462:  46%|████▌     | 462/1000 [26:18<30:38,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 362 / 6 / 462:  46%|████▋     | 463/1000 [26:19<30:31,  3.41s/it][Succeeded / Failed / Skipped / Total] 95 / 362 / 6 / 463:  46%|████▋     | 463/1000 [26:19<30:31,  3.41s/it][Succeeded / Failed / Skipped / Total] 95 / 362 / 6 / 463:  46%|████▋     | 464/1000 [26:19<30:24,  3.40s/it][Succeeded / Failed / Skipped / Total] 96 / 362 / 6 / 464:  46%|████▋     | 464/1000 [26:19<30:24,  3.40s/it][Succeeded / Failed / Skipped / Total] 96 / 362 / 6 / 464:  46%|████▋     | 465/1000 [26:23<30:22,  3.41s/it]Returns the custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[anastasio]] ( String [[patrone]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[patrone]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Starts the connection monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Returns the custom serializer for the given command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[rodan]] ( CommandCode [[codebook]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[codebook]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 460 ---------------------------------------------
Register a custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[markoff]] ( String [[sudoku]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[sudoku]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[sudoku]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Register a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[journal]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 462 ---------------------------------------------
Write a batch of bytes to a socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Initialize the write buffer water mark . --> Set up the bachelors . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[bachelors]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 464 ---------------------------------------------
Check if remote address is connected . --> Checks if the remote peer is accelerating . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . [[rpcRemoting]] . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[accelerating]] ( String remoteAddr ) { Url url = this . [[courtrooms]] . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 465 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 362 / 6 / 465:  46%|████▋     | 465/1000 [26:23<30:22,  3.41s/it][Succeeded / Failed / Skipped / Total] 98 / 362 / 6 / 466:  47%|████▋     | 466/1000 [26:23<30:14,  3.40s/it][Succeeded / Failed / Skipped / Total] 98 / 362 / 6 / 466:  47%|████▋     | 467/1000 [26:25<30:09,  3.39s/it][Succeeded / Failed / Skipped / Total] 99 / 362 / 6 / 467:  47%|████▋     | 467/1000 [26:25<30:09,  3.39s/it][Succeeded / Failed / Skipped / Total] 100 / 362 / 6 / 468:  47%|████▋     | 468/1000 [26:28<30:06,  3.39s/it][Succeeded / Failed / Skipped / Total] 100 / 362 / 6 / 468:  47%|████▋     | 469/1000 [26:29<29:59,  3.39s/it][Succeeded / Failed / Skipped / Total] 101 / 362 / 6 / 469:  47%|████▋     | 469/1000 [26:29<29:59,  3.39s/it][Succeeded / Failed / Skipped / Total] 101 / 363 / 6 / 470:  47%|████▋     | 470/1000 [26:30<29:53,  3.38s/it][Succeeded / Failed / Skipped / Total] 101 / 363 / 6 / 470:  47%|████▋     | 471/1000 [26:31<29:46,  3.38s/it][Succeeded / Failed / Skipped / Total] 102 / 363 / 6 / 471:  47%|████▋     | 471/1000 [26:31<29:46,  3.38s/it]Updates the payload . --> Methode permettant d ajout d ajout . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[cafés]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Validate UTF - 8 data . --> This method is called when a close frame is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[deedee]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 467 ---------------------------------------------
Returns an instance of FramedataImpl1 for the given opcode . --> Returns an instance of FramedataImpl1 for the given liftoff . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[liftoff]] ) { if ( [[liftoff]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[liftoff]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 468 ---------------------------------------------
Checks the length of a single frame . --> Belladonna . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[belladonna]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 469 ---------------------------------------------
Checks if the requested protocol matches any of the known protocols . --> Attempt to initiate a handshake . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[initiate]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 470 ---------------------------------------------
Sets the HTTP response code . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[appalled]] ( int [[algorithms]] ) { this . [[encrypted]] = [[algorithms]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 471 ---------------------------------------------
Checks if the given maxpacketsize is less than the realpacketsize --> Liefert die Wiedergebene Frame zurueck . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[wiedersehen]] , int realpacketsize ) throws IncompleteException { if ( [[wiedersehen]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 103 / 363 / 6 / 472:  47%|████▋     | 472/1000 [26:33<29:42,  3.38s/it][Succeeded / Failed / Skipped / Total] 103 / 363 / 6 / 472:  47%|████▋     | 473/1000 [26:33<29:35,  3.37s/it][Succeeded / Failed / Skipped / Total] 104 / 363 / 6 / 473:  47%|████▋     | 473/1000 [26:33<29:35,  3.37s/it][Succeeded / Failed / Skipped / Total] 105 / 363 / 6 / 474:  47%|████▋     | 474/1000 [26:34<29:29,  3.36s/it][Succeeded / Failed / Skipped / Total] 105 / 363 / 6 / 474:  48%|████▊     | 475/1000 [26:36<29:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 106 / 363 / 6 / 475:  48%|████▊     | 475/1000 [26:36<29:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 107 / 363 / 6 / 476:  48%|████▊     | 476/1000 [26:37<29:18,  3.36s/it][Succeeded / Failed / Skipped / Total] 107 / 363 / 6 / 476:  48%|████▊     | 477/1000 [26:39<29:14,  3.35s/it][Succeeded / Failed / Skipped / Total] 108 / 363 / 6 / 477:  48%|████▊     | 477/1000 [26:39<29:14,  3.35s/it][Succeeded / Failed / Skipped / Total] 109 / 363 / 6 / 478:  48%|████▊     | 478/1000 [26:40<29:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 109 / 363 / 6 / 478:  48%|████▊     | 479/1000 [26:42<29:02,  3.34s/it]Generate the final key . --> Carmelita algorithm . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[carmelita]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 473 ---------------------------------------------
Process a continuous frame . --> Handle hansons . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[hansons]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 474 ---------------------------------------------
Process a binary frame . --> Alessandro callback . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[alessandro]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 475 ---------------------------------------------
Logs a runtime exception . --> Alcoholism handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[alcoholism]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 476 ---------------------------------------------
Process a text frame . --> Handles incoming consonants . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[consonants]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
Process a frame that has not been completed . --> Fujiyama fujiyama . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[fujiyama]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Process a closing frame . --> Antenna callback . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[antenna]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 479 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 363 / 6 / 479:  48%|████▊     | 479/1000 [26:42<29:02,  3.34s/it][Succeeded / Failed / Skipped / Total] 111 / 363 / 6 / 480:  48%|████▊     | 480/1000 [26:46<29:00,  3.35s/it][Succeeded / Failed / Skipped / Total] 111 / 363 / 6 / 480:  48%|████▊     | 481/1000 [26:47<28:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 112 / 363 / 6 / 481:  48%|████▊     | 481/1000 [26:47<28:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 113 / 363 / 6 / 482:  48%|████▊     | 482/1000 [26:51<28:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 113 / 363 / 6 / 482:  48%|████▊     | 483/1000 [26:51<28:45,  3.34s/it][Succeeded / Failed / Skipped / Total] 114 / 363 / 6 / 483:  48%|████▊     | 483/1000 [26:51<28:45,  3.34s/it][Succeeded / Failed / Skipped / Total] 114 / 364 / 6 / 484:  48%|████▊     | 484/1000 [26:54<28:40,  3.34s/it][Succeeded / Failed / Skipped / Total] 114 / 364 / 6 / 484:  48%|████▊     | 485/1000 [26:54<28:34,  3.33s/it]Process a continuous frame . --> IANTO handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[ianto]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 480 ---------------------------------------------
Translate handshake http server . --> Liefert die entrepreneur . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[entrepreneur]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 481 ---------------------------------------------
Check the buffer limit and throw an exception if it is too large . --> Beaulieu . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[beaulieu]] ( ) throws LimitExceededException { long [[bulge]] = getByteBufferListSize ( ) ; if ( [[bulge]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[bulge]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 482 ---------------------------------------------
Translate the first line of a HTTP handshake . --> Creates a new HandshakeBuilder with avocados . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[avocados]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 483 ---------------------------------------------
Decodes the data received from the server . --> Decodes an elisa frame . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[elisa]] ) { assert ( [[elisa]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[elisa]] . remaining ( ) , ( [[elisa]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[elisa]] . array ( ) , [[elisa]] . position ( ) , [[elisa]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[elisa]] ) ; } } else { if ( decodeHandshake ( [[elisa]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[elisa]] . hasRemaining ( ) || ! [[elisa]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 484 ---------------------------------------------
Returns the total number of bytes in the buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[merchandising]] ( ) { long [[hanker]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[absorbers]] : byteBufferList ) { [[hanker]] += [[absorbers]] . limit ( ) ; } } return [[hanker]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 364 / 6 / 485:  48%|████▊     | 485/1000 [26:54<28:34,  3.33s/it][Succeeded / Failed / Skipped / Total] 116 / 364 / 6 / 486:  49%|████▊     | 486/1000 [26:55<28:28,  3.32s/it][Succeeded / Failed / Skipped / Total] 116 / 364 / 6 / 486:  49%|████▊     | 487/1000 [26:56<28:22,  3.32s/it][Succeeded / Failed / Skipped / Total] 117 / 364 / 6 / 487:  49%|████▊     | 487/1000 [26:56<28:22,  3.32s/it][Succeeded / Failed / Skipped / Total] 118 / 364 / 6 / 488:  49%|████▉     | 488/1000 [26:58<28:18,  3.32s/it][Succeeded / Failed / Skipped / Total] 118 / 364 / 6 / 488:  49%|████▉     | 489/1000 [26:59<28:12,  3.31s/it][Succeeded / Failed / Skipped / Total] 119 / 364 / 6 / 489:  49%|████▉     | 489/1000 [26:59<28:12,  3.31s/it][Succeeded / Failed / Skipped / Total] 119 / 365 / 6 / 490:  49%|████▉     | 490/1000 [27:00<28:06,  3.31s/it][Succeeded / Failed / Skipped / Total] 119 / 365 / 6 / 490:  49%|████▉     | 491/1000 [27:01<28:01,  3.30s/it]Gets the payload from the byte buffer list . --> Creates an elisa buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[elisa]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[pads]] : byteBufferList ) { totalSize += [[pads]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[pads]] : byteBufferList ) { resultingByteBuffer . put ( [[pads]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 486 ---------------------------------------------
Close the connection due to a wrong handshake . --> Anesthesia anesthesia . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[anesthesia]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 487 ---------------------------------------------
Sends a 500 error response and closes the connection . --> Hydrangea an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[hydrangea]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 488 ---------------------------------------------
Generate HTTP response due to error . --> Belladonna belladonna . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[belladonna]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 489 ---------------------------------------------
Reset the connection . --> Initializes the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[boot]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 490 ---------------------------------------------
Connect to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[associated]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 366 / 6 / 491:  49%|████▉     | 491/1000 [27:01<28:01,  3.30s/it][Succeeded / Failed / Skipped / Total] 119 / 367 / 6 / 492:  49%|████▉     | 492/1000 [27:11<28:04,  3.32s/it][Succeeded / Failed / Skipped / Total] 119 / 367 / 6 / 492:  49%|████▉     | 493/1000 [27:12<27:58,  3.31s/it][Succeeded / Failed / Skipped / Total] 119 / 368 / 6 / 493:  49%|████▉     | 493/1000 [27:12<27:58,  3.31s/it][Succeeded / Failed / Skipped / Total] 119 / 368 / 6 / 493:  49%|████▉     | 494/1000 [27:14<27:54,  3.31s/it][Succeeded / Failed / Skipped / Total] 120 / 368 / 6 / 494:  49%|████▉     | 494/1000 [27:14<27:54,  3.31s/it][Succeeded / Failed / Skipped / Total] 120 / 368 / 6 / 494:  50%|████▉     | 495/1000 [27:15<27:48,  3.30s/it][Succeeded / Failed / Skipped / Total] 120 / 369 / 6 / 495:  50%|████▉     | 495/1000 [27:15<27:48,  3.30s/it][Succeeded / Failed / Skipped / Total] 120 / 369 / 6 / 495:  50%|████▉     | 496/1000 [27:16<27:43,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 369 / 6 / 496:  50%|████▉     | 496/1000 [27:16<27:43,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 369 / 6 / 496:  50%|████▉     | 497/1000 [27:23<27:43,  3.31s/it]Sends the given text to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[transmissions]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[transmissions]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 492 ---------------------------------------------
Get the port from the URI . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[records]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Stop the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[af]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[["Faux" != "Faux"]]" != "[["Faux" != "Faux"]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Sends a handshake to the server . --> Honma . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String [[part2]] = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( [[part2]] != null ) path += ' ' + [[part2]] ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[honma]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String [[clichés]] = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( [[clichés]] != null ) path += ' ' + [[clichés]] ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 495 ---------------------------------------------
Sets the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[deteriorating]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 496 ---------------------------------------------
Restarts the connection lost timer . --> Catering . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[catering]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 497 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 370 / 6 / 497:  50%|████▉     | 497/1000 [27:23<27:43,  3.31s/it][Succeeded / Failed / Skipped / Total] 121 / 370 / 6 / 497:  50%|████▉     | 498/1000 [27:26<27:39,  3.31s/it][Succeeded / Failed / Skipped / Total] 121 / 371 / 6 / 498:  50%|████▉     | 498/1000 [27:26<27:39,  3.31s/it][Succeeded / Failed / Skipped / Total] 121 / 371 / 6 / 498:  50%|████▉     | 499/1000 [27:28<27:35,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 372 / 6 / 499:  50%|████▉     | 499/1000 [27:28<27:35,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 372 / 6 / 499:  50%|█████     | 500/1000 [27:30<27:30,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 373 / 6 / 500:  50%|█████     | 500/1000 [27:30<27:30,  3.30s/it][Succeeded / Failed / Skipped / Total] 121 / 373 / 6 / 500:  50%|█████     | 501/1000 [27:34<27:28,  3.30s/it][Succeeded / Failed / Skipped / Total] 122 / 373 / 6 / 501:  50%|█████     | 501/1000 [27:34<27:28,  3.30s/it][Succeeded / Failed / Skipped / Total] 122 / 374 / 6 / 502:  50%|█████     | 502/1000 [27:35<27:21,  3.30s/it][Succeeded / Failed / Skipped / Total] 122 / 374 / 6 / 502:  50%|█████     | 503/1000 [27:36<27:17,  3.29s/it][Succeeded / Failed / Skipped / Total] 122 / 375 / 6 / 503:  50%|█████     | 503/1000 [27:36<27:17,  3.29s/it]Cancels the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[mcshane]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 498 ---------------------------------------------
Start the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[adolescent]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Executes the connection lost detection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[disband]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[cardassian]] = ( WebSocketImpl ) webSocket ; if ( [[cardassian]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[cardassian]] ) ; [[cardassian]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[cardassian]] . isOpen ( ) ) { [[cardassian]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[cardassian]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 500 ---------------------------------------------
Called when a websocket handshake has been received . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[broadcaster]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Do additional read . --> Receives data from the queue and activates it . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[activating]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 502 ---------------------------------------------
Sends a ping frame to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata [[f]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[supplying]] ( WebSocket conn , Framedata [[australia]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[australia]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 503 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[burdette]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 376 / 6 / 504:  50%|█████     | 504/1000 [27:38<27:12,  3.29s/it][Succeeded / Failed / Skipped / Total] 122 / 376 / 6 / 504:  50%|█████     | 505/1000 [27:39<27:06,  3.29s/it][Succeeded / Failed / Skipped / Total] 123 / 376 / 6 / 505:  50%|█████     | 505/1000 [27:39<27:06,  3.29s/it][Succeeded / Failed / Skipped / Total] 124 / 376 / 6 / 506:  51%|█████     | 506/1000 [27:39<27:00,  3.28s/it][Succeeded / Failed / Skipped / Total] 124 / 376 / 6 / 506:  51%|█████     | 507/1000 [27:39<26:53,  3.27s/it][Succeeded / Failed / Skipped / Total] 124 / 376 / 7 / 507:  51%|█████     | 507/1000 [27:39<26:53,  3.27s/it][Succeeded / Failed / Skipped / Total] 125 / 376 / 7 / 508:  51%|█████     | 508/1000 [27:42<26:50,  3.27s/it][Succeeded / Failed / Skipped / Total] 125 / 376 / 7 / 508:  51%|█████     | 509/1000 [27:47<26:48,  3.28s/it][Succeeded / Failed / Skipped / Total] 126 / 376 / 7 / 509:  51%|█████     | 509/1000 [27:47<26:48,  3.28s/it]Stop the thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stop]] ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( False , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[judgment]] ( int [[handoff]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( False , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 505 ---------------------------------------------
Handles a read operation . --> Reads data from the socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[i]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[i]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[ai]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[ai]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 506 ---------------------------------------------
Accept a new connection . --> Babes the given iterator . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[babes]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 507 ---------------------------------------------
Shuts down the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Setup the selector and server thread . --> Start dumping . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[dumpling]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 509 ---------------------------------------------
Returns the socket associated with the given connection . --> Sourdough sourdough . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[sourdough]] ( WebSocket [[beef]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[beef]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 510 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 376 / 7 / 510:  51%|█████     | 510/1000 [27:48<26:42,  3.27s/it][Succeeded / Failed / Skipped / Total] 127 / 376 / 7 / 510:  51%|█████     | 511/1000 [27:50<26:38,  3.27s/it][Succeeded / Failed / Skipped / Total] 128 / 376 / 7 / 511:  51%|█████     | 511/1000 [27:50<26:38,  3.27s/it][Succeeded / Failed / Skipped / Total] 129 / 376 / 7 / 512:  51%|█████     | 512/1000 [27:52<26:34,  3.27s/it][Succeeded / Failed / Skipped / Total] 129 / 376 / 7 / 512:  51%|█████▏    | 513/1000 [27:55<26:30,  3.27s/it][Succeeded / Failed / Skipped / Total] 130 / 376 / 7 / 513:  51%|█████▏    | 513/1000 [27:55<26:30,  3.27s/it][Succeeded / Failed / Skipped / Total] 131 / 376 / 7 / 514:  51%|█████▏    | 514/1000 [27:55<26:24,  3.26s/it][Succeeded / Failed / Skipped / Total] 131 / 376 / 7 / 514:  52%|█████▏    | 515/1000 [27:57<26:19,  3.26s/it][Succeeded / Failed / Skipped / Total] 132 / 376 / 7 / 515:  52%|█████▏    | 515/1000 [27:57<26:19,  3.26s/it][Succeeded / Failed / Skipped / Total] 132 / 377 / 7 / 516:  52%|█████▏    | 516/1000 [27:59<26:15,  3.25s/it][Succeeded / Failed / Skipped / Total] 132 / 377 / 7 / 516:  52%|█████▏    | 517/1000 [28:00<26:09,  3.25s/it]Writes a batch of data to the socket . --> Batch albans . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[albans]] ( SelectionKey key ) throws IOException { WebSocketImpl [[elephant]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[elephant]] , [[elephant]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 511 ---------------------------------------------
Ensure that a single thread is started . --> Start a caravan selector thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[caravan]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 512 ---------------------------------------------
Send a broadcast to all registered clients . --> Pazuzu pazuzu --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[pazuzu]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 513 ---------------------------------------------
Sends a message to one or more clients . --> Disseminates the given data with the given shoppers . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[disseminate]] ( byte [ ] data , Collection < WebSocket > [[shoppers]] ) { if ( data == null || [[shoppers]] == null ) { throw new IllegalArgumentException ( ) ; } [[disseminate]] ( ByteBuffer . wrap ( data ) , [[shoppers]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 514 ---------------------------------------------
Sends a message to one or more clients . --> Sends an issuance message . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[issuance]] ( String text , Collection < WebSocket > [[addressee]] ) { if ( text == null || [[addressee]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[addressee]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
Transfers the source buffer to the destination buffer . --> Performs a copy of the source buffer into the destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[douce]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 516 ---------------------------------------------
Start the JPA API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[beginnings]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 133 / 377 / 7 / 517:  52%|█████▏    | 517/1000 [28:00<26:09,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 377 / 7 / 518:  52%|█████▏    | 518/1000 [28:04<26:06,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 377 / 7 / 518:  52%|█████▏    | 519/1000 [28:05<26:02,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 378 / 7 / 519:  52%|█████▏    | 519/1000 [28:05<26:02,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 379 / 7 / 520:  52%|█████▏    | 520/1000 [28:08<25:58,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 379 / 7 / 520:  52%|█████▏    | 521/1000 [28:11<25:54,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 380 / 7 / 521:  52%|█████▏    | 521/1000 [28:11<25:54,  3.25s/it][Succeeded / Failed / Skipped / Total] 134 / 381 / 7 / 522:  52%|█████▏    | 522/1000 [28:22<25:59,  3.26s/it][Succeeded / Failed / Skipped / Total] 134 / 381 / 7 / 522:  52%|█████▏    | 523/1000 [28:24<25:54,  3.26s/it][Succeeded / Failed / Skipped / Total] 134 / 382 / 7 / 523:  52%|█████▏    | 523/1000 [28:24<25:54,  3.26s/it][Succeeded / Failed / Skipped / Total] 134 / 382 / 7 / 523:  52%|█████▏    | 524/1000 [28:25<25:49,  3.26s/it][Succeeded / Failed / Skipped / Total] 134 / 383 / 7 / 524:  52%|█████▏    | 524/1000 [28:25<25:49,  3.26s/it][Succeeded / Failed / Skipped / Total] 134 / 383 / 7 / 524:  52%|█████▎    | 525/1000 [28:31<25:48,  3.26s/it][Succeeded / Failed / Skipped / Total] 135 / 383 / 7 / 525:  52%|█████▎    | 525/1000 [28:31<25:48,  3.26s/it][Succeeded / Failed / Skipped / Total] 135 / 383 / 7 / 525:  53%|█████▎    | 526/1000 [28:34<25:44,  3.26s/it][Succeeded / Failed / Skipped / Total] 135 / 384 / 7 / 526:  53%|█████▎    | 526/1000 [28:34<25:44,  3.26s/it][Succeeded / Failed / Skipped / Total] 135 / 384 / 7 / 526:  53%|█████▎    | 527/1000 [28:35<25:39,  3.26s/it]Fill the given draft s frames with the given data . --> Add assholes to a draft . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[sData]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[sData]] != null ) { frames = draft . createFrames ( [[sData]] , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[assholes]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[afterthought]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[afterthought]] != null ) { frames = draft . createFrames ( [[afterthought]] , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 518 ---------------------------------------------
Convert an array of arguments to a scala buffer . --> Chrysler . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[chrysler]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 519 ---------------------------------------------
Executes the given block in a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[martín]] ( Consumer < EntityManager > [[blocking]] ) { [[martín]] ( em -> { [[blocking]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Returns an EntityManager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[durante]] ( String [[christening]] ) { EntityManagerFactory emf = emfs . get ( [[christening]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments into a list if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[concertina]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Returns true if the specified key is defined at the specified language . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[factions]] ( play . api . i18n . Lang [[eternal]] , String [[essentials]] ) { return messages . isDefinedAt ( [[essentials]] , [[eternal]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 523 ---------------------------------------------
Returns the localized value for the given key in the given language . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
Returns the preferred messages for the given languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[favoring]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 525 ---------------------------------------------
Sets the language of the given result . --> Rollie for fruit --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[rollie]] ( Result [[fruit]] , Lang lang ) { return messages . setLang ( [[fruit]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[favoring]] ( Http . RequestHeader [[demanding]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[demanding]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 385 / 7 / 527:  53%|█████▎    | 527/1000 [28:35<25:39,  3.26s/it][Succeeded / Failed / Skipped / Total] 135 / 385 / 7 / 527:  53%|█████▎    | 528/1000 [28:35<25:33,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 386 / 7 / 528:  53%|█████▎    | 528/1000 [28:35<25:33,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 386 / 7 / 528:  53%|█████▎    | 529/1000 [28:39<25:30,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 387 / 7 / 529:  53%|█████▎    | 529/1000 [28:39<25:30,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 387 / 7 / 529:  53%|█████▎    | 530/1000 [28:40<25:25,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 388 / 7 / 530:  53%|█████▎    | 530/1000 [28:40<25:25,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 388 / 7 / 530:  53%|█████▎    | 531/1000 [28:44<25:22,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 389 / 7 / 531:  53%|█████▎    | 531/1000 [28:44<25:22,  3.25s/it][Succeeded / Failed / Skipped / Total] 135 / 389 / 7 / 531:  53%|█████▎    | 532/1000 [28:45<25:17,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 390 / 7 / 532:  53%|█████▎    | 532/1000 [28:45<25:17,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 390 / 7 / 532:  53%|█████▎    | 533/1000 [28:47<25:13,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 391 / 7 / 533:  53%|█████▎    | 533/1000 [28:47<25:13,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 391 / 7 / 533:  53%|█████▎    | 534/1000 [28:49<25:09,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 392 / 7 / 534:  53%|█████▎    | 534/1000 [28:49<25:09,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 392 / 7 / 534:  54%|█████▎    | 535/1000 [28:52<25:05,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 393 / 7 / 535:  54%|█████▎    | 535/1000 [28:52<25:05,  3.24s/it][Succeeded / Failed / Skipped / Total] 135 / 393 / 7 / 535:  54%|█████▎    | 536/1000 [28:52<24:59,  3.23s/it][Succeeded / Failed / Skipped / Total] 135 / 394 / 7 / 536:  54%|█████▎    | 536/1000 [28:52<24:59,  3.23s/it][Succeeded / Failed / Skipped / Total] 135 / 394 / 7 / 536:  54%|█████▎    | 537/1000 [28:53<24:54,  3.23s/it][Succeeded / Failed / Skipped / Total] 135 / 395 / 7 / 537:  54%|█████▎    | 537/1000 [28:53<24:54,  3.23s/it][Succeeded / Failed / Skipped / Total] 135 / 395 / 7 / 537:  54%|█████▍    | 538/1000 [28:54<24:49,  3.22s/it][Succeeded / Failed / Skipped / Total] 136 / 395 / 7 / 538:  54%|█████▍    | 538/1000 [28:54<24:49,  3.22s/it][Succeeded / Failed / Skipped / Total] 136 / 395 / 7 / 538:  54%|█████▍    | 539/1000 [28:57<24:45,  3.22s/it][Succeeded / Failed / Skipped / Total] 137 / 395 / 7 / 539:  54%|█████▍    | 539/1000 [28:57<24:45,  3.22s/it][Succeeded / Failed / Skipped / Total] 137 / 395 / 7 / 539:  54%|█████▍    | 540/1000 [28:57<24:40,  3.22s/it]Sets the bindings for the given Guiceable modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[relationships]] ( GuiceableModule ... [[group]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[group]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the localized value for the given keys . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[attain]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[acceptable]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[alamut]] = convertArgsToScalaBuffer ( [[acceptable]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[alamut]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 529 ---------------------------------------------
Set the REPLACEME0 bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[ACCUSE]] ( play . api . inject . Binding < ? > ... [[ACCUSE]] ) { return [[ACCUSE]] ( Guiceable . bindings ( [[ACCUSE]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Set the bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[bonds]] ( play . api . inject . Module ... [[grouped]] ) { return [[bonds]] ( Guiceable . [[grouped]] ( [[grouped]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Override this Guiceable with the specified modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[allude]] ( play . api . inject . Module ... [[blocks]] ) { return [[allude]] ( Guiceable . [[blocks]] ( [[blocks]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Returns a copy of this builder with the specified Guiceable modules overridden . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[berto]] ( GuiceableModule ... [[blades]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[blades]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 533 ---------------------------------------------
Overrides this object with the specified bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[connections]] ) { return overrides ( Guiceable . [[connections]] ( [[connections]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Disables the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[mutilated]] ( Class < ? > ... [[valet]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[valet]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Returns the binding for this annotation in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[increases]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Call a request and return the result . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[appeal]] ( Request [[cert]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Returns the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[anastasio]] ( String [[ahhhhhhh]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[ahhhhhhh]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Creates a new tuple with the given values . --> Liefert die Bourdieu . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Bourdieu]] < A , B > [[Bourdieu]] ( A a , B b ) { return new [[Bourdieu]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Factory method for creating a 5 - element H2O tuple . --> Factory method for creating an Abomination . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Abomination]] < A , B , C , D , E > [[Abomination]] ( A a , B b , C c , D d , E e ) { return new [[Abomination]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
[Succeeded / Failed / Skipped / Total] 138 / 395 / 7 / 540:  54%|█████▍    | 540/1000 [28:57<24:40,  3.22s/it][Succeeded / Failed / Skipped / Total] 138 / 395 / 7 / 540:  54%|█████▍    | 541/1000 [29:04<24:40,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 395 / 7 / 541:  54%|█████▍    | 541/1000 [29:04<24:40,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 395 / 7 / 541:  54%|█████▍    | 542/1000 [29:05<24:35,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 396 / 7 / 542:  54%|█████▍    | 542/1000 [29:05<24:35,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 396 / 7 / 542:  54%|█████▍    | 543/1000 [29:07<24:31,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 397 / 7 / 543:  54%|█████▍    | 543/1000 [29:07<24:31,  3.22s/it][Succeeded / Failed / Skipped / Total] 139 / 397 / 7 / 543:  54%|█████▍    | 544/1000 [29:13<24:29,  3.22s/it][Succeeded / Failed / Skipped / Total] 140 / 397 / 7 / 544:  54%|█████▍    | 544/1000 [29:13<24:29,  3.22s/it][Succeeded / Failed / Skipped / Total] 140 / 398 / 7 / 545:  55%|█████▍    | 545/1000 [29:13<24:23,  3.22s/it][Succeeded / Failed / Skipped / Total] 140 / 398 / 7 / 545:  55%|█████▍    | 546/1000 [29:15<24:19,  3.21s/it][Succeeded / Failed / Skipped / Total] 140 / 399 / 7 / 546:  55%|█████▍    | 546/1000 [29:15<24:19,  3.21s/it][Succeeded / Failed / Skipped / Total] 140 / 400 / 7 / 547:  55%|█████▍    | 547/1000 [29:15<24:13,  3.21s/it][Succeeded / Failed / Skipped / Total] 140 / 400 / 7 / 547:  55%|█████▍    | 548/1000 [29:23<24:14,  3.22s/it]--------------------------------------------- Result 540 ---------------------------------------------
Converts an ExecutionContext to an Executor . --> yabu - > execute --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[yabu]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> Methode permettant dans la configuración --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[dans]] ( String [[celso]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[celso]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a flow from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[strung]] ( String [[georgia]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[georgia]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[aux]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a flow from a JSON object . --> BAINBRIDGE = > BAINBRIDGE --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[bainbridge]] ( String [[muezzin]] ) { return Flow . of ( JsonNode . class ) . map ( [[bainbridge]] -> { return ByteString . fromString ( Json . stringify ( [[bainbridge]] ) ) ; } ) . via ( flow ( [[muezzin]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Adds a constraint validator to the factory . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[twisted]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[versus]] ( Map < String , String > [[assignments]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[loyalists]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[assignments]] . entrySet ( ) ) { [[loyalists]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[loyalists]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[expanded]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 400 / 7 / 548:  55%|█████▍    | 548/1000 [29:23<24:14,  3.22s/it][Succeeded / Failed / Skipped / Total] 141 / 401 / 7 / 549:  55%|█████▍    | 549/1000 [29:25<24:10,  3.22s/it][Succeeded / Failed / Skipped / Total] 141 / 401 / 7 / 549:  55%|█████▌    | 550/1000 [29:26<24:05,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 402 / 7 / 550:  55%|█████▌    | 550/1000 [29:26<24:05,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 403 / 7 / 551:  55%|█████▌    | 551/1000 [29:31<24:03,  3.22s/it][Succeeded / Failed / Skipped / Total] 141 / 403 / 7 / 551:  55%|█████▌    | 552/1000 [29:33<23:59,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 404 / 7 / 552:  55%|█████▌    | 552/1000 [29:33<23:59,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 405 / 7 / 553:  55%|█████▌    | 553/1000 [29:39<23:58,  3.22s/it][Succeeded / Failed / Skipped / Total] 141 / 405 / 7 / 553:  55%|█████▌    | 554/1000 [29:39<23:52,  3.21s/it]Handles a bad request . --> Chihuahuas chihuahuas --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[chihuahuas]] ( RequestHeader [[call]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[call]] . method ( ) , [[call]] . uri ( ) , message , [[call]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a forbidden request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[bruner]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Called when a client error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[subdued]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 551 ---------------------------------------------
Get a matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[abomination]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Handles a 404 error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[mamiya]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Logs a server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[sleepwalking]] ( RequestHeader [[asking]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[asking]] . method ( ) , [[asking]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 406 / 7 / 554:  55%|█████▌    | 554/1000 [29:39<23:52,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 407 / 7 / 555:  56%|█████▌    | 555/1000 [29:40<23:47,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 407 / 7 / 555:  56%|█████▌    | 556/1000 [29:44<23:44,  3.21s/it][Succeeded / Failed / Skipped / Total] 141 / 408 / 7 / 556:  56%|█████▌    | 556/1000 [29:44<23:44,  3.21s/it][Succeeded / Failed / Skipped / Total] 142 / 408 / 7 / 557:  56%|█████▌    | 557/1000 [29:49<23:43,  3.21s/it][Succeeded / Failed / Skipped / Total] 142 / 408 / 7 / 557:  56%|█████▌    | 558/1000 [29:49<23:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 142 / 409 / 7 / 558:  56%|█████▌    | 558/1000 [29:49<23:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 142 / 410 / 7 / 559:  56%|█████▌    | 559/1000 [29:49<23:31,  3.20s/it][Succeeded / Failed / Skipped / Total] 142 / 410 / 7 / 559:  56%|█████▌    | 560/1000 [29:59<23:33,  3.21s/it][Succeeded / Failed / Skipped / Total] 143 / 410 / 7 / 560:  56%|█████▌    | 560/1000 [29:59<23:33,  3.21s/it][Succeeded / Failed / Skipped / Total] 143 / 410 / 7 / 560:  56%|█████▌    | 561/1000 [30:06<23:33,  3.22s/it]Handles a server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[ensuing]] ( RequestHeader request , Throwable [[abdication]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[abdication]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 555 ---------------------------------------------
Creates a useful exception to handle the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[hemorrhoid]] ( final Throwable [[moskowitz]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[moskowitz]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 556 ---------------------------------------------
Handles a dev error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[benihana]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> Concerto build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[concerto]] ( File directory , JarFile jarFile , String base ) { return [[concerto]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 558 ---------------------------------------------
Creates a build doc handler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[się]] ( File directory ) { FileRepository [[loan]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[loan]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Handles a development error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[eavesdropper]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a build doc handler from a list of resources . --> explanatory build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[file]] = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[explanatory]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[lawsuit]] = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[lawsuit]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[lawsuit]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 561 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 411 / 7 / 561:  56%|█████▌    | 561/1000 [30:06<23:33,  3.22s/it][Succeeded / Failed / Skipped / Total] 143 / 411 / 7 / 561:  56%|█████▌    | 562/1000 [30:15<23:34,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 412 / 7 / 562:  56%|█████▌    | 562/1000 [30:15<23:34,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 412 / 7 / 562:  56%|█████▋    | 563/1000 [30:19<23:32,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 413 / 7 / 563:  56%|█████▋    | 563/1000 [30:19<23:32,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 413 / 7 / 563:  56%|█████▋    | 564/1000 [30:20<23:26,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 414 / 7 / 564:  56%|█████▋    | 564/1000 [30:20<23:26,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 414 / 7 / 564:  56%|█████▋    | 565/1000 [30:27<23:27,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 415 / 7 / 565:  56%|█████▋    | 565/1000 [30:27<23:27,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 415 / 7 / 565:  57%|█████▋    | 566/1000 [30:27<23:21,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 416 / 7 / 566:  57%|█████▋    | 566/1000 [30:27<23:21,  3.23s/it][Succeeded / Failed / Skipped / Total] 143 / 416 / 7 / 566:  57%|█████▋    | 567/1000 [30:33<23:20,  3.23s/it][Succeeded / Failed / Skipped / Total] 144 / 416 / 7 / 567:  57%|█████▋    | 567/1000 [30:33<23:20,  3.23s/it][Succeeded / Failed / Skipped / Total] 145 / 416 / 7 / 568:  57%|█████▋    | 568/1000 [30:33<23:14,  3.23s/it][Succeeded / Failed / Skipped / Total] 145 / 416 / 7 / 568:  57%|█████▋    | 569/1000 [30:33<23:08,  3.22s/it][Succeeded / Failed / Skipped / Total] 145 / 416 / 8 / 569:  57%|█████▋    | 569/1000 [30:33<23:08,  3.22s/it][Succeeded / Failed / Skipped / Total] 146 / 416 / 8 / 570:  57%|█████▋    | 570/1000 [30:39<23:07,  3.23s/it][Succeeded / Failed / Skipped / Total] 146 / 416 / 8 / 570:  57%|█████▋    | 571/1000 [30:41<23:03,  3.22s/it]Creates a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[acoustical]] ( JarFile [[bruner]] , String base ) { FileRepository repo = new JarRepository ( [[bruner]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a HttpEntity from the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[vatos]] ( Content [[cheery]] , String charset ) { String body ; if ( [[cheery]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[excessive]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
Creates an entity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[scaled]] ( String [[persuaded]] , String [[wiil]] ) { return new Strict ( ByteString . fromString ( [[persuaded]] , [[wiil]] ) , Optional . of ( "text/plain; charset=" + [[wiil]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Consume data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[biles]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 566 ---------------------------------------------
Creates a new chunked entity from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[sweatshop]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a JSON response with the given status code and content . --> Malady proviso connotation --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[malady]] ( int [[proviso]] , JsonNode [[connotation]] ) { return [[malady]] ( [[malady]] , [[connotation]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Sends a HTTP status with the given content and content length . --> Send an enchanted response with the given status code and content length --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[enchanted]] , long contentLength ) { return status ( status ) . sendInputStream ( [[enchanted]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 569 ---------------------------------------------
Find user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a JSON response with the given status code and content . --> Send an appreciative to the specified rule using the specified profess --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[bylaws]] ( int [[rule]] , JsonNode [[appreciative]] , JsonEncoding [[profess]] ) { if ( [[appreciative]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[bylaws]] ( [[bylaws]] ) . sendJson ( [[appreciative]] , [[profess]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 417 / 8 / 571:  57%|█████▋    | 571/1000 [30:41<23:03,  3.22s/it][Succeeded / Failed / Skipped / Total] 146 / 418 / 8 / 572:  57%|█████▋    | 572/1000 [30:42<22:58,  3.22s/it][Succeeded / Failed / Skipped / Total] 146 / 418 / 8 / 572:  57%|█████▋    | 573/1000 [30:43<22:53,  3.22s/it][Succeeded / Failed / Skipped / Total] 146 / 419 / 8 / 573:  57%|█████▋    | 573/1000 [30:43<22:53,  3.22s/it][Succeeded / Failed / Skipped / Total] 147 / 419 / 8 / 574:  57%|█████▋    | 574/1000 [30:46<22:50,  3.22s/it][Succeeded / Failed / Skipped / Total] 147 / 419 / 8 / 574:  57%|█████▊    | 575/1000 [30:48<22:46,  3.22s/it][Succeeded / Failed / Skipped / Total] 147 / 420 / 8 / 575:  57%|█████▊    | 575/1000 [30:48<22:46,  3.22s/it][Succeeded / Failed / Skipped / Total] 147 / 421 / 8 / 576:  58%|█████▊    | 576/1000 [30:50<22:42,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 421 / 8 / 576:  58%|█████▊    | 577/1000 [30:52<22:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 422 / 8 / 577:  58%|█████▊    | 577/1000 [30:52<22:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 423 / 8 / 578:  58%|█████▊    | 578/1000 [30:57<22:36,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 423 / 8 / 578:  58%|█████▊    | 579/1000 [31:00<22:32,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 424 / 8 / 579:  58%|█████▊    | 579/1000 [31:00<22:32,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 425 / 8 / 580:  58%|█████▊    | 580/1000 [31:01<22:27,  3.21s/it][Succeeded / Failed / Skipped / Total] 147 / 425 / 8 / 580:  58%|█████▊    | 581/1000 [31:01<22:22,  3.20s/it][Succeeded / Failed / Skipped / Total] 148 / 425 / 8 / 581:  58%|█████▊    | 581/1000 [31:01<22:22,  3.20s/it]Creates a new HTTP response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[ailment]] ( int status , byte [ ] [[materials]] ) { if ( [[materials]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[ailment]] , new HttpEntity . Strict ( ByteString . fromArray ( [[materials]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the preferred language for the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[lieber]] ( Collection < Lang > [[claimant]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[claimant]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 573 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[alone]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 574 ---------------------------------------------
Sets the HTTP status code and MIME type for the given file . --> Issue an article to the given appreciative --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[article]] ( int status , File [[appreciative]] ) { return [[article]] ( [[article]] , [[appreciative]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[avalanche]] ( String [[fireball]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fireball]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[bam]] ( Http . Request request ) { return [[bam]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns the web socket URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[jacq]] ( Http . Request request ) { return [[jacq]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection function that executes the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[prevent]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[ratio]] ) { try { return [[prevent]] . call ( [[ratio]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Convert an object to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[divisible]] ( final Object [[declarations]] ) { try { return mapper ( ) . valueToTree ( [[declarations]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a function that executes a connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[unconnected]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Converts a JSON object to an instance of the given class . --> Liefert die angegebene JSON . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[anche]] > [[anche]] fromJson ( JsonNode json , Class < [[anche]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
[Succeeded / Failed / Skipped / Total] 148 / 426 / 8 / 582:  58%|█████▊    | 582/1000 [31:07<22:21,  3.21s/it][Succeeded / Failed / Skipped / Total] 148 / 426 / 8 / 582:  58%|█████▊    | 583/1000 [31:08<22:16,  3.20s/it][Succeeded / Failed / Skipped / Total] 148 / 427 / 8 / 583:  58%|█████▊    | 583/1000 [31:08<22:16,  3.20s/it][Succeeded / Failed / Skipped / Total] 148 / 428 / 8 / 584:  58%|█████▊    | 584/1000 [31:10<22:12,  3.20s/it][Succeeded / Failed / Skipped / Total] 148 / 428 / 8 / 584:  58%|█████▊    | 585/1000 [31:17<22:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 428 / 8 / 585:  58%|█████▊    | 585/1000 [31:17<22:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 429 / 8 / 586:  59%|█████▊    | 586/1000 [31:19<22:07,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 429 / 8 / 586:  59%|█████▊    | 587/1000 [31:24<22:05,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 430 / 8 / 587:  59%|█████▊    | 587/1000 [31:24<22:05,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 431 / 8 / 588:  59%|█████▉    | 588/1000 [31:28<22:03,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 431 / 8 / 588:  59%|█████▉    | 589/1000 [31:32<22:00,  3.21s/it][Succeeded / Failed / Skipped / Total] 149 / 432 / 8 / 589:  59%|█████▉    | 589/1000 [31:32<22:00,  3.21s/it]--------------------------------------------- Result 582 ---------------------------------------------
Creates a new server for the given mode and port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[findhorn]] ( Mode mode , int [[cale]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[cale]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 583 ---------------------------------------------
Parses a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[murmansk]] ( String [[gabriel]] ) { try { return mapper ( ) . readTree ( [[gabriel]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Parses the given input stream into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[wheezes]] ( java . io . InputStream [[bailouts]] ) { try { return mapper ( ) . readTree ( [[bailouts]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns the relative path from the start path to the target path . --> Compare katharine and gozaimasu --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[compare]] ( String [[katharine]] , String [[gozaimasu]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Convert a set of constraints to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[machlne]] ( Set < ConstraintDescriptor < ? > > [[barricades]] ) { return [[barricades]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[machlne]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Converts a constraint descriptor to a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[sneezy]] ( ConstraintDescriptor < ? > [[restrain]] ) { final Display displayAnnotation = [[restrain]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[restrain]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 588 ---------------------------------------------
Canonicalize the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String [[url]] ) { String [ ] [[urlPath]] = toSegments ( [[url]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String [[footnotes]] ) { String [ ] [[komodo]] = toSegments ( [[footnotes]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[komodo]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[footnotes]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[juggernaut]] = [[footnotes]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[juggernaut]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 589 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[aiello]] ( String [[shotguns]] ) { try { return new CronExpression ( [[shotguns]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[shotguns]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 432 / 8 / 590:  59%|█████▉    | 590/1000 [31:37<21:58,  3.22s/it][Succeeded / Failed / Skipped / Total] 150 / 432 / 8 / 590:  59%|█████▉    | 591/1000 [31:39<21:54,  3.21s/it][Succeeded / Failed / Skipped / Total] 150 / 433 / 8 / 591:  59%|█████▉    | 591/1000 [31:39<21:54,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 433 / 8 / 592:  59%|█████▉    | 592/1000 [31:43<21:51,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 433 / 8 / 592:  59%|█████▉    | 593/1000 [31:46<21:48,  3.22s/it][Succeeded / Failed / Skipped / Total] 151 / 434 / 8 / 593:  59%|█████▉    | 593/1000 [31:46<21:48,  3.22s/it][Succeeded / Failed / Skipped / Total] 151 / 435 / 8 / 594:  59%|█████▉    | 594/1000 [31:51<21:46,  3.22s/it][Succeeded / Failed / Skipped / Total] 151 / 435 / 8 / 594:  60%|█████▉    | 595/1000 [31:52<21:41,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 436 / 8 / 595:  60%|█████▉    | 595/1000 [31:52<21:41,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 437 / 8 / 596:  60%|█████▉    | 596/1000 [31:56<21:38,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 437 / 8 / 596:  60%|█████▉    | 597/1000 [31:56<21:33,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 438 / 8 / 597:  60%|█████▉    | 597/1000 [31:56<21:33,  3.21s/it]Gets the next cron interval for a given date . --> Methode d ajout une apéritif --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[apéritif]] ( String [[adventuring]] , Date date ) { try { return new CronExpression ( [[adventuring]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[adventuring]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 591 ---------------------------------------------
Wait for the given stage to complete after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[unit]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , [[unit]] ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[downtime]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[flatbed]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[flatbed]] , "Null unit" ) ; FiniteDuration [[calendar]] = FiniteDuration . apply ( amount , [[flatbed]] ) ; return toJava ( delegate . timeout ( [[calendar]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Render a todo page . --> Render an ESTÁ --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[ESTÁ]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Creates a GuiceApplicationBuilder for the given application loader context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[assembler]] ( ApplicationLoader . Context [[connection]] ) { return initialBuilder . in ( [[connection]] . environment ( ) ) . loadConfig ( [[connection]] . initialConfig ( ) ) . overrides ( overrides ( [[connection]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Creates a new instance of AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig [[config]] , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[config]] , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[architectural]] ( AhcWSClientConfig [[città]] , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[città]] , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 595 ---------------------------------------------
Checks if the classArray is assignable to the toClassArray . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( [[toClassArray]] ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[measurements]] ( Class < ? > [ ] [[iight]] , Class < ? > [ ] [[clichés]] , boolean autoboxing ) { if ( arrayGetLength ( [[iight]] ) != arrayGetLength ( [[clichés]] ) ) { return "[["Fakes" != "Fakes"]]" != "[["Fakes" != "Fakes"]]" ; } if ( [[iight]] == null ) { [[iight]] = EMPTY_CLASS_ARRAY ; } if ( [[clichés]] == null ) { [[clichés]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[iight]] . length ; i ++ ) { if ( [[measurements]] ( [[iight]] [ i ] , [[clichés]] [ i ] , autoboxing ) == "[["Fakes" != "Fakes"]]" != "[["Fakes" != "Fakes"]]" ) { return "[["Fakes" != "Fakes"]]" != "[["Fakes" != "Fakes"]]" ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 596 ---------------------------------------------
Adds a key - value pair to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[debrief]] ( String [[important]] , String [[appraised]] ) { [[debrief]] ( ) . put ( [[important]] , [[appraised]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[broaden]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 598 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 439 / 8 / 598:  60%|█████▉    | 598/1000 [31:57<21:28,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 439 / 8 / 598:  60%|█████▉    | 599/1000 [31:58<21:24,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 440 / 8 / 599:  60%|█████▉    | 599/1000 [31:58<21:24,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 441 / 8 / 600:  60%|██████    | 600/1000 [32:01<21:20,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 441 / 8 / 600:  60%|██████    | 601/1000 [32:04<21:17,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 442 / 8 / 601:  60%|██████    | 601/1000 [32:04<21:17,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 443 / 8 / 602:  60%|██████    | 602/1000 [32:04<21:12,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 443 / 8 / 602:  60%|██████    | 603/1000 [32:07<21:09,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 444 / 8 / 603:  60%|██████    | 603/1000 [32:07<21:09,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 445 / 8 / 604:  60%|██████    | 604/1000 [32:14<21:08,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 445 / 8 / 604:  60%|██████    | 605/1000 [32:16<21:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 446 / 8 / 605:  60%|██████    | 605/1000 [32:16<21:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 447 / 8 / 606:  61%|██████    | 606/1000 [32:19<21:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 447 / 8 / 606:  61%|██████    | 607/1000 [32:26<20:59,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 448 / 8 / 607:  61%|██████    | 607/1000 [32:26<20:59,  3.21s/it]Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[broadening]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Adds a flash key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String [[value]] ) { [[flash]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[glimpse]] ( String key , String [[evaluated]] ) { [[glimpse]] ( ) . put ( key , [[evaluated]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Creates a binding to the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[increases]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Returns a binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[dans]] ( final Class < ? extends T > [[achieving]] ) { return underlying . to ( [[achieving]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 602 ---------------------------------------------
Returns a binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[dans]] ( final Provider < ? extends T > [[purveyor]] ) { return underlying . to ( [[purveyor]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns a new binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[le]] ( final BindingKey < ? extends T > [[predicate]] ) { return underlying . to ( [[predicate]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Returns a binding that is bound to a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[broaden]] Provider < ? extends T > > Binding < T > [[quarrelled]] ( final Class < P > [[entrepreneur]] ) { return underlying . toProvider ( [[entrepreneur]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a new EvolutionsReader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[grandfathers]] . EvolutionsReader [[gunboat]] ( Map < String , List < Evolution > > [[grandfathers]] ) { return new SimpleEvolutionsReader ( [[grandfathers]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[great]] ( Application [[likelihood]] ) { play . api . i18n . Langs langs = [[likelihood]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the preferred language for the given application . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[advocated]] ( Application app , List < Lang > [[aeh]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[aeh]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 449 / 8 / 608:  61%|██████    | 608/1000 [32:29<20:57,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 449 / 8 / 608:  61%|██████    | 609/1000 [32:32<20:53,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 450 / 8 / 609:  61%|██████    | 609/1000 [32:32<20:53,  3.21s/it][Succeeded / Failed / Skipped / Total] 151 / 451 / 8 / 610:  61%|██████    | 610/1000 [32:33<20:49,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 451 / 8 / 610:  61%|██████    | 611/1000 [32:37<20:46,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 452 / 8 / 611:  61%|██████    | 611/1000 [32:37<20:46,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 453 / 8 / 612:  61%|██████    | 612/1000 [32:40<20:42,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 453 / 8 / 612:  61%|██████▏   | 613/1000 [32:41<20:38,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 454 / 8 / 613:  61%|██████▏   | 613/1000 [32:41<20:38,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 455 / 8 / 614:  61%|██████▏   | 614/1000 [32:41<20:33,  3.19s/it][Succeeded / Failed / Skipped / Total] 151 / 455 / 8 / 614:  62%|██████▏   | 615/1000 [32:45<20:30,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 456 / 8 / 615:  62%|██████▏   | 615/1000 [32:45<20:30,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 457 / 8 / 616:  62%|██████▏   | 616/1000 [32:49<20:27,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 457 / 8 / 616:  62%|██████▏   | 617/1000 [32:50<20:23,  3.19s/it][Succeeded / Failed / Skipped / Total] 151 / 458 / 8 / 617:  62%|██████▏   | 617/1000 [32:50<20:23,  3.19s/it]Creates a new EvolutionsReader for the specified evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[succinct]] . EvolutionsReader [[gambler]] ( Evolution ... [[succinct]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[succinct]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
Adds a configuration loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[spokesmen]] ( Function < Environment , Config > [[boarding]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[boarding]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Clean up database volutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[older]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 611 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[borne]] ( GuiceableModule ... [[blade]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[blade]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Load the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[parcel]] ) { return load ( Guiceable . [[parcel]] ( [[parcel]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Adds a module loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[binoculars]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 614 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[parcel]] ) { return load ( Guiceable . [[parcel]] ( [[parcel]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 615 ---------------------------------------------
Load the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[burdening]] ( play . api . inject . Binding < ? > ... bindings ) { return [[burdening]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a new GuiceApplicationBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[conformed]] ( play . api . inject . guice . GuiceApplicationBuilder [[writer]] ) { return new GuiceApplicationBuilder ( [[writer]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Encodes the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[cipher]] ( Cookie [[biscotti]] ) { if ( [[biscotti]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[cipher]] ( buf , [[biscotti]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 459 / 8 / 618:  62%|██████▏   | 618/1000 [32:52<20:19,  3.19s/it][Succeeded / Failed / Skipped / Total] 151 / 459 / 8 / 618:  62%|██████▏   | 619/1000 [33:02<20:20,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 460 / 8 / 619:  62%|██████▏   | 619/1000 [33:02<20:20,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 460 / 8 / 619:  62%|██████▏   | 620/1000 [33:04<20:16,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 461 / 8 / 620:  62%|██████▏   | 620/1000 [33:04<20:16,  3.20s/it][Succeeded / Failed / Skipped / Total] 151 / 461 / 8 / 620:  62%|██████▏   | 621/1000 [33:09<20:14,  3.20s/it][Succeeded / Failed / Skipped / Total] 152 / 461 / 8 / 621:  62%|██████▏   | 621/1000 [33:09<20:14,  3.20s/it][Succeeded / Failed / Skipped / Total] 152 / 461 / 8 / 621:  62%|██████▏   | 622/1000 [33:18<20:14,  3.21s/it][Succeeded / Failed / Skipped / Total] 152 / 462 / 8 / 622:  62%|██████▏   | 622/1000 [33:18<20:14,  3.21s/it][Succeeded / Failed / Skipped / Total] 152 / 462 / 8 / 622:  62%|██████▏   | 623/1000 [33:18<20:09,  3.21s/it][Succeeded / Failed / Skipped / Total] 152 / 463 / 8 / 623:  62%|██████▏   | 623/1000 [33:18<20:09,  3.21s/it][Succeeded / Failed / Skipped / Total] 152 / 463 / 8 / 623:  62%|██████▏   | 624/1000 [33:19<20:04,  3.20s/it]Get the EntityManager bound to the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[swipe]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the stack of EntityManager objects . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[lusted]] ( boolean [[couch]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[bes]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[bes]] ) ; return [[bes]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 620 ---------------------------------------------
Push or pop an EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[amundsen]] ( EntityManager [[magnetism]] , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( [[magnetism]] != null ) { ems . push ( [[magnetism]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Apply a splitter to a flow . --> Foy a stream with a waterway --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[foy]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[waterway]] ) { return [[foy]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[waterway]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[bridged]] ( T [[deserving]] ) { if ( [[deserving]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[deserving]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Convert error arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[sc]] ( Object [ ] [[allegations]] ) { if ( [[allegations]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[allegations]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 464 / 8 / 624:  62%|██████▏   | 624/1000 [33:19<20:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 152 / 464 / 8 / 624:  62%|██████▎   | 625/1000 [33:22<20:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 152 / 465 / 8 / 625:  62%|██████▎   | 625/1000 [33:22<20:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 152 / 465 / 8 / 625:  63%|██████▎   | 626/1000 [33:24<19:57,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 465 / 8 / 626:  63%|██████▎   | 626/1000 [33:24<19:57,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 465 / 8 / 626:  63%|██████▎   | 627/1000 [33:28<19:54,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 466 / 8 / 627:  63%|██████▎   | 627/1000 [33:28<19:54,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 466 / 8 / 627:  63%|██████▎   | 628/1000 [33:32<19:52,  3.21s/it][Succeeded / Failed / Skipped / Total] 153 / 467 / 8 / 628:  63%|██████▎   | 628/1000 [33:32<19:52,  3.21s/it][Succeeded / Failed / Skipped / Total] 153 / 467 / 8 / 628:  63%|██████▎   | 629/1000 [33:34<19:48,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 468 / 8 / 629:  63%|██████▎   | 629/1000 [33:34<19:48,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 468 / 8 / 629:  63%|██████▎   | 630/1000 [33:36<19:44,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 469 / 8 / 630:  63%|██████▎   | 630/1000 [33:36<19:44,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 469 / 8 / 630:  63%|██████▎   | 631/1000 [33:36<19:39,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 470 / 8 / 631:  63%|██████▎   | 631/1000 [33:36<19:39,  3.20s/it][Succeeded / Failed / Skipped / Total] 153 / 470 / 8 / 631:  63%|██████▎   | 632/1000 [33:39<19:35,  3.19s/it][Succeeded / Failed / Skipped / Total] 153 / 471 / 8 / 632:  63%|██████▎   | 632/1000 [33:39<19:35,  3.19s/it][Succeeded / Failed / Skipped / Total] 153 / 471 / 8 / 632:  63%|██████▎   | 633/1000 [33:39<19:31,  3.19s/it]Passes the given flow through the given splitter with the given merge strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[tranquilliser]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[assembler]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[assembler]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 625 ---------------------------------------------
Returns all global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[older]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 626 ---------------------------------------------
Returns the value for the given key . --> Get valor . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[valor]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Parses the given text into an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[quantity]] > [[quantity]] parse ( String text , Class < [[quantity]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 628 ---------------------------------------------
Parses the given text into an instance of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[k]] > [[k]] parse ( Field field , String text ) { return ( [[k]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 629 ---------------------------------------------
Fill the form with the given values . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[staffed]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 630 ---------------------------------------------
Returns a JSON representation of the errors . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[conquistador]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 631 ---------------------------------------------
Print an object to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Chord]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Chord]] . class ) ) { return conversion . convert ( t , [[Chord]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Prints the type of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Wired]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 472 / 8 / 633:  63%|██████▎   | 633/1000 [33:39<19:31,  3.19s/it][Succeeded / Failed / Skipped / Total] 153 / 472 / 8 / 633:  63%|██████▎   | 634/1000 [33:40<19:26,  3.19s/it][Succeeded / Failed / Skipped / Total] 153 / 473 / 8 / 634:  63%|██████▎   | 634/1000 [33:40<19:26,  3.19s/it][Succeeded / Failed / Skipped / Total] 153 / 473 / 8 / 634:  64%|██████▎   | 635/1000 [33:49<19:26,  3.20s/it][Succeeded / Failed / Skipped / Total] 154 / 473 / 8 / 635:  64%|██████▎   | 635/1000 [33:49<19:26,  3.20s/it][Succeeded / Failed / Skipped / Total] 154 / 473 / 8 / 635:  64%|██████▎   | 636/1000 [33:52<19:23,  3.20s/it][Succeeded / Failed / Skipped / Total] 154 / 474 / 8 / 636:  64%|██████▎   | 636/1000 [33:52<19:23,  3.20s/it][Succeeded / Failed / Skipped / Total] 154 / 474 / 8 / 636:  64%|██████▎   | 637/1000 [33:54<19:19,  3.19s/it][Succeeded / Failed / Skipped / Total] 155 / 474 / 8 / 637:  64%|██████▎   | 637/1000 [33:54<19:19,  3.19s/it][Succeeded / Failed / Skipped / Total] 155 / 474 / 8 / 637:  64%|██████▍   | 638/1000 [33:57<19:15,  3.19s/it][Succeeded / Failed / Skipped / Total] 155 / 475 / 8 / 638:  64%|██████▍   | 638/1000 [33:57<19:15,  3.19s/it][Succeeded / Failed / Skipped / Total] 155 / 475 / 8 / 638:  64%|██████▍   | 639/1000 [34:02<19:13,  3.20s/it][Succeeded / Failed / Skipped / Total] 155 / 476 / 8 / 639:  64%|██████▍   | 639/1000 [34:02<19:13,  3.20s/it][Succeeded / Failed / Skipped / Total] 155 / 476 / 8 / 639:  64%|██████▍   | 640/1000 [34:07<19:11,  3.20s/it]Print a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Bead]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Bead]] . class ) ) ) { return ( [[Bead]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Bead]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Bead]] . class ) ) { return conversion . convert ( t , [[Bead]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Creates a flow from an actor reference . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Durante]] , Out > Flow < [[Durante]] , Out , ? > [[binoculars]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[Durante]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 635 ---------------------------------------------
Register optional formatters . --> Benzi zurueck . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[benzi]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Chapped]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Returns a list of nodes matching the given path and node . --> Create a stalker for the given path and node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[stalker]] ( String path , Object node ) { return [[stalker]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 638 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[cipher]] ( Cookie [[shortbread]] ) { if ( [[shortbread]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[shortbread]] . name ( ) ; final String value = [[shortbread]] . value ( ) != null ? [[shortbread]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[shortbread]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[shortbread]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[shortbread]] . maxAge ( ) ) ; Date expires = [[shortbread]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 639 ---------------------------------------------
Converts a java . util . List to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[helder]] ( java . util . List < T > [[alphabetically]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[alphabetically]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 476 / 8 / 640:  64%|██████▍   | 640/1000 [34:07<19:11,  3.20s/it][Succeeded / Failed / Skipped / Total] 156 / 476 / 8 / 640:  64%|██████▍   | 641/1000 [34:09<19:07,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 476 / 8 / 641:  64%|██████▍   | 641/1000 [34:09<19:07,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 476 / 8 / 641:  64%|██████▍   | 642/1000 [34:12<19:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 477 / 8 / 642:  64%|██████▍   | 642/1000 [34:12<19:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 477 / 8 / 642:  64%|██████▍   | 643/1000 [34:15<19:01,  3.20s/it]Returns an immutable sequence consisting of the elements of the given array . --> Returns an immutable sequence of all elements in the given breadth - first order --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[fuck]] ( T ... [[breadth]] ) { return toSeq ( [[breadth]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 641 ---------------------------------------------
Register an annotation formatter . --> Register a new Streptomycin conversion --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( sourceType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A a = ( A ) sourceType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( [[targetType]] . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A a = ( A ) [[targetType]] . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Streptomycin]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[personality]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[barcode]] ) { return ( sourceType . getAnnotation ( [[personality]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[barcode]] ) { final A a = ( A ) sourceType . getAnnotation ( [[personality]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[barcode]] , source , ex ) ; } } public String toString ( ) { return "@" + [[personality]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[barcode]] ) { return ( [[barcode]] . getAnnotation ( [[personality]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[barcode]] ) { final A a = ( A ) [[barcode]] . getAnnotation ( [[personality]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[barcode]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[personality]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 642 ---------------------------------------------
Converts an array to an immutable sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[georg]] ( T [ ] [[cab]] ) { return [[georg]] ( java . util . Arrays . asList ( [[cab]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 478 / 8 / 643:  64%|██████▍   | 643/1000 [34:15<19:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 478 / 8 / 643:  64%|██████▍   | 644/1000 [34:20<18:58,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 479 / 8 / 644:  64%|██████▍   | 644/1000 [34:20<18:58,  3.20s/it][Succeeded / Failed / Skipped / Total] 157 / 479 / 8 / 644:  64%|██████▍   | 645/1000 [34:32<19:00,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 480 / 8 / 645:  64%|██████▍   | 645/1000 [34:32<19:00,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 480 / 8 / 645:  65%|██████▍   | 646/1000 [34:33<18:56,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 481 / 8 / 646:  65%|██████▍   | 646/1000 [34:33<18:56,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 481 / 8 / 646:  65%|██████▍   | 647/1000 [34:34<18:52,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 482 / 8 / 647:  65%|██████▍   | 647/1000 [34:34<18:52,  3.21s/it][Succeeded / Failed / Skipped / Total] 157 / 482 / 8 / 647:  65%|██████▍   | 648/1000 [34:37<18:48,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 482 / 8 / 648:  65%|██████▍   | 648/1000 [34:37<18:48,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 482 / 8 / 648:  65%|██████▍   | 649/1000 [34:45<18:47,  3.21s/it]Creates a MappedWebSocketAcceptor that accepts JSON messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Around]] , Out > MappedWebSocketAcceptor < [[Around]] , Out > [[poverty]] ( Class < [[Around]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Accept or result . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[deployment]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[deployment]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Workaround for AccessibleObject . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return False ; } final Member [[m]] = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[headpiece]] ( final AccessibleObject [[ies]] ) { if ( [[ies]] == null || [[ies]] . isAccessible ( ) ) { return False ; } final Member [[foot]] = ( Member ) [[ies]] ; if ( ! [[ies]] . isAccessible ( ) && Modifier . isPublic ( [[foot]] . getModifiers ( ) ) && isPackageAccess ( [[foot]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[ies]] . setAccessible ( "[["Realist" == "Realist"]]" == "[["Realist" == "Realist"]]" ) ; return "[["Realist" == "Realist"]]" == "[["Realist" == "Realist"]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Calculates the promotion cost for a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[gagné]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 647 ---------------------------------------------
Gets the total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[gagné]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Get one or more messages . --> Sobre a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[sobre]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 483 / 8 / 649:  65%|██████▍   | 649/1000 [34:45<18:47,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 483 / 8 / 649:  65%|██████▌   | 650/1000 [34:48<18:44,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 484 / 8 / 650:  65%|██████▌   | 650/1000 [34:48<18:44,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 484 / 8 / 650:  65%|██████▌   | 651/1000 [34:53<18:42,  3.22s/it][Succeeded / Failed / Skipped / Total] 158 / 485 / 8 / 651:  65%|██████▌   | 651/1000 [34:53<18:42,  3.22s/it][Succeeded / Failed / Skipped / Total] 158 / 485 / 8 / 651:  65%|██████▌   | 652/1000 [34:53<18:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 486 / 8 / 652:  65%|██████▌   | 652/1000 [34:53<18:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 158 / 486 / 8 / 652:  65%|██████▌   | 653/1000 [34:57<18:34,  3.21s/it][Succeeded / Failed / Skipped / Total] 159 / 486 / 8 / 653:  65%|██████▌   | 653/1000 [34:57<18:34,  3.21s/it][Succeeded / Failed / Skipped / Total] 159 / 486 / 8 / 653:  65%|██████▌   | 654/1000 [35:06<18:34,  3.22s/it][Succeeded / Failed / Skipped / Total] 159 / 487 / 8 / 654:  65%|██████▌   | 654/1000 [35:06<18:34,  3.22s/it][Succeeded / Failed / Skipped / Total] 159 / 487 / 8 / 654:  66%|██████▌   | 655/1000 [35:06<18:29,  3.22s/it][Succeeded / Failed / Skipped / Total] 159 / 487 / 9 / 655:  66%|██████▌   | 655/1000 [35:06<18:29,  3.22s/it]Returns the localized message for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[among]] ( String [[major]] , Object ... [[reprimanded]] ) { return messagesApi . get ( lang , [[major]] , [[reprimanded]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a parallel sorter for the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[booth]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[booth]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Creates a new database instance with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[ancora]] ( String driver , String url , Map < String , ? extends Object > [[mezcal]] ) { return [[ancora]] ( "default" , driver , url , [[mezcal]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Returns the cost of an object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[fitzwilliam]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[prix]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[prix]] += 1.5f ; } return [[prix]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a numeric type to another type . --> collates two types . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[collate]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[collate]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[collate]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[collate]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Load the argument at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[inconveniencing]] ( int [[alphabetical]] ) { load_local ( state . argumentTypes [ [[alphabetical]] ] , state . localOffset + skipArgs ( [[alphabetical]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 487 / 9 / 656:  66%|██████▌   | 656/1000 [35:06<18:24,  3.21s/it][Succeeded / Failed / Skipped / Total] 160 / 487 / 9 / 656:  66%|██████▌   | 657/1000 [35:07<18:20,  3.21s/it][Succeeded / Failed / Skipped / Total] 161 / 487 / 9 / 657:  66%|██████▌   | 657/1000 [35:07<18:20,  3.21s/it][Succeeded / Failed / Skipped / Total] 162 / 487 / 9 / 658:  66%|██████▌   | 658/1000 [35:13<18:18,  3.21s/it][Succeeded / Failed / Skipped / Total] 162 / 487 / 9 / 658:  66%|██████▌   | 659/1000 [35:15<18:14,  3.21s/it][Succeeded / Failed / Skipped / Total] 162 / 488 / 9 / 659:  66%|██████▌   | 659/1000 [35:15<18:14,  3.21s/it][Succeeded / Failed / Skipped / Total] 162 / 489 / 9 / 660:  66%|██████▌   | 660/1000 [35:22<18:13,  3.22s/it][Succeeded / Failed / Skipped / Total] 162 / 489 / 9 / 660:  66%|██████▌   | 660/1000 [35:30<18:17,  3.23s/it][Succeeded / Failed / Skipped / Total] 162 / 489 / 9 / 660:  66%|██████▌   | 661/1000 [35:33<18:14,  3.23s/it][Succeeded / Failed / Skipped / Total] 162 / 490 / 9 / 661:  66%|██████▌   | 661/1000 [35:33<18:14,  3.23s/it][Succeeded / Failed / Skipped / Total] 162 / 490 / 9 / 661:  66%|██████▌   | 662/1000 [35:36<18:11,  3.23s/it]Quick sort . --> This method is called when an element is uninhabited --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[uninhabited]] ( int [[locator]] , int lo , int [[ahoy]] , Comparator cmp ) { chooseComparer ( [[locator]] , cmp ) ; super . quickSort ( lo , [[ahoy]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 657 ---------------------------------------------
Invoke the method . --> Allege dervishes and amazed --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[allege]] ( Object [[dervishes]] , Object [ ] [[amazed]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[dervishes]] , [[amazed]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 658 ---------------------------------------------
Adds a zero or null to the stack . --> knoxville --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[knoxville]] ( Type [[categories]] ) { if ( TypeUtils . isPrimitive ( [[categories]] ) ) { switch ( [[categories]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
Merges the elements from lo to hi using the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[lacked]] ( int [[cataloging]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[cataloging]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 660 ---------------------------------------------
Unbox a primitive or zero type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[tragic]] ( Type [[tipo]] ) { if ( TypeUtils . isPrimitive ( [[tipo]] ) ) { if ( [[tipo]] != Type . VOID_TYPE ) { Label [[aicha]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[aicha]] ) ; pop ( ) ; zero_or_null ( [[tipo]] ) ; goTo ( end ) ; mark ( [[aicha]] ) ; unbox ( [[tipo]] ) ; mark ( end ) ; } } else { checkcast ( [[tipo]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 661 ---------------------------------------------
Processes an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[inhabitants]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 491 / 9 / 662:  66%|██████▌   | 662/1000 [35:36<18:11,  3.23s/it][Succeeded / Failed / Skipped / Total] 162 / 491 / 9 / 662:  66%|██████▋   | 663/1000 [35:38<18:07,  3.23s/it][Succeeded / Failed / Skipped / Total] 163 / 491 / 9 / 663:  66%|██████▋   | 663/1000 [35:38<18:07,  3.23s/it][Succeeded / Failed / Skipped / Total] 163 / 491 / 9 / 663:  66%|██████▋   | 664/1000 [35:39<18:02,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 491 / 10 / 664:  66%|██████▋   | 664/1000 [35:39<18:02,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 491 / 10 / 664:  66%|██████▋   | 665/1000 [35:41<17:58,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 492 / 10 / 665:  66%|██████▋   | 665/1000 [35:41<17:58,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 492 / 10 / 665:  67%|██████▋   | 666/1000 [35:46<17:56,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 493 / 10 / 666:  67%|██████▋   | 666/1000 [35:46<17:56,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 494 / 10 / 667:  67%|██████▋   | 667/1000 [35:46<17:51,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 494 / 10 / 667:  67%|██████▋   | 668/1000 [35:47<17:47,  3.21s/it]Compare two null labels . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[certifying]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 663 ---------------------------------------------
Get a list of methods from a superclass and interfaces . --> Lipari . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] interfaces , List [[methods]] ) { [[getMethods]] ( [[superclass]] , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[lipari]] ( Class [[chandler]] , Class [ ] interfaces , List [[medio]] ) { [[lipari]] ( [[chandler]] , interfaces , [[medio]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 664 ---------------------------------------------
Gets a field from the provider . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Resolve all bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[aishwarya]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 666 ---------------------------------------------
Filter constructors by visibility . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , True ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[gilgamesh]] ( Class sc , List [[builder]] ) { CollectionUtils . filter ( [[builder]] , new VisibilityPredicate ( sc , True ) ) ; if ( [[builder]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a method to the list of methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[complementary]] ( Method method ) { [[complementary]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 494 / 11 / 668:  67%|██████▋   | 668/1000 [35:47<17:47,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 495 / 11 / 669:  67%|██████▋   | 669/1000 [35:49<17:43,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 495 / 11 / 669:  67%|██████▋   | 670/1000 [35:51<17:39,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 496 / 11 / 670:  67%|██████▋   | 670/1000 [35:51<17:39,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 497 / 11 / 671:  67%|██████▋   | 671/1000 [35:58<17:38,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 497 / 11 / 671:  67%|██████▋   | 672/1000 [36:01<17:35,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 498 / 11 / 672:  67%|██████▋   | 672/1000 [36:01<17:35,  3.22s/it][Succeeded / Failed / Skipped / Total] 163 / 499 / 11 / 673:  67%|██████▋   | 673/1000 [36:02<17:30,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 499 / 11 / 673:  67%|██████▋   | 674/1000 [36:02<17:26,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 500 / 11 / 674:  67%|██████▋   | 674/1000 [36:02<17:26,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 501 / 11 / 675:  68%|██████▊   | 675/1000 [36:09<17:24,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 501 / 11 / 675:  68%|██████▊   | 676/1000 [36:10<17:20,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 502 / 11 / 676:  68%|██████▊   | 676/1000 [36:10<17:20,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 503 / 11 / 677:  68%|██████▊   | 677/1000 [36:10<17:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 503 / 11 / 677:  68%|██████▊   | 678/1000 [36:11<17:11,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 504 / 11 / 678:  68%|██████▊   | 678/1000 [36:11<17:11,  3.20s/it]Finds all methods matching the given names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[hasegawa]] ( Class [[bylaw]] ) { if ( [[bylaw]] != null && [[bylaw]] . equals ( Object . class ) ) { [[bylaw]] = null ; } this . superclass = [[bylaw]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 670 ---------------------------------------------
Returns the cardinality of this value . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[yeltsin]] ( ) { int w = value ; int [[seconds]] = 0 ; while ( w != 0 ) { [[seconds]] += T [ w & 255 ] ; w >>= 8 ; } return [[seconds]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 671 ---------------------------------------------
Resolve a child path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[determination]] ( final Path [[depended]] , String [[childhood]] ) { if ( StringUtil . startsWithChar ( [[childhood]] , File . separatorChar ) ) { [[childhood]] = [[childhood]] . substring ( 1 ) ; } return [[depended]] . resolve ( [[childhood]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Read a string from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[pays]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[write]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[snarls]] ( NamingPolicy [[reached]] ) { if ( [[reached]] == null ) [[reached]] = DefaultNamingPolicy . INSTANCE ; this . [[crated]] = [[reached]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the host of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[benefited]] ( final String host ) { this . [[catered]] = [[benefited]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[benefited]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[linking]] ( final String [[addressee]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[addressee]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 676 ---------------------------------------------
Create a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[achieving]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 677 ---------------------------------------------
Create a POST request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[located]] ( final String [[intending]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[intending]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String [[destination]] ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[engender]] ( final String [[approach]] , final String [[meant]] ) { return new HttpRequest ( ) . [[approach]] ( [[approach]] . toUpperCase ( ) ) . set ( [[meant]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 679 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 505 / 11 / 679:  68%|██████▊   | 679/1000 [36:17<17:09,  3.21s/it][Succeeded / Failed / Skipped / Total] 163 / 505 / 11 / 679:  68%|██████▊   | 680/1000 [36:17<17:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 506 / 11 / 680:  68%|██████▊   | 680/1000 [36:17<17:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 507 / 11 / 681:  68%|██████▊   | 681/1000 [36:18<17:00,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 507 / 11 / 681:  68%|██████▊   | 682/1000 [36:18<16:56,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 508 / 11 / 682:  68%|██████▊   | 682/1000 [36:18<16:56,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 509 / 11 / 683:  68%|██████▊   | 683/1000 [36:25<16:54,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 509 / 11 / 683:  68%|██████▊   | 684/1000 [36:25<16:49,  3.20s/it][Succeeded / Failed / Skipped / Total] 163 / 510 / 11 / 684:  68%|██████▊   | 684/1000 [36:25<16:49,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 510 / 11 / 685:  68%|██████▊   | 685/1000 [36:26<16:45,  3.19s/it][Succeeded / Failed / Skipped / Total] 164 / 510 / 11 / 685:  69%|██████▊   | 686/1000 [36:37<16:46,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 511 / 11 / 686:  69%|██████▊   | 686/1000 [36:37<16:46,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 511 / 11 / 686:  69%|██████▊   | 687/1000 [36:39<16:42,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 512 / 11 / 687:  69%|██████▊   | 687/1000 [36:39<16:42,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 512 / 11 / 687:  69%|██████▉   | 688/1000 [36:41<16:38,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 513 / 11 / 688:  69%|██████▉   | 688/1000 [36:41<16:38,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 513 / 11 / 688:  69%|██████▉   | 689/1000 [36:44<16:35,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 514 / 11 / 689:  69%|██████▉   | 689/1000 [36:44<16:35,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 514 / 11 / 689:  69%|██████▉   | 690/1000 [36:48<16:32,  3.20s/it]Create a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[pose]] ( final String [[targeting]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[targeting]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PATCH request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[tweaks]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[canceling]] ( final String [[earmarked]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[earmarked]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[principals]] ( final String [[aim]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[aim]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a TRACE request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[breadcrumbs]] ( final String [[recipients]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[recipients]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Create an OPTIONS request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[substitute]] ( final String [[intend]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[intend]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the path for the request . --> Heron trajectories --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[heron]] ( String [[trajectories]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Add a query map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[consulted]] ( final Map < String , String > [[ebby]] ) { for ( Map . Entry < String , String > [[inscription]] : [[ebby]] . entrySet ( ) ) { [[consulted]] . add ( [[inscription]] . getKey ( ) , [[inscription]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 687 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[contractors]] ( final String [[fernanda]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[contractors]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 688 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[doucement]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 689 ---------------------------------------------
Adds a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer [[maxAge]] = [[cookie]] . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = False ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[CARLY]] ( final Cookie ... [[CARLY]] ) { if ( [[CARLY]] . length == 0 ) { return this ; } StringBuilder [[laloo]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie [[cheesecake]] : [[CARLY]] ) { Integer [[chelo]] = [[cheesecake]] . getMaxAge ( ) ; if ( [[chelo]] != null && [[chelo]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[laloo]] . append ( "; " ) ; } first = False ; [[laloo]] . append ( [[cheesecake]] . getName ( ) ) ; [[laloo]] . append ( ' ' ) ; [[laloo]] . append ( [[cheesecake]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[laloo]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 690 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 515 / 11 / 690:  69%|██████▉   | 690/1000 [36:48<16:32,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 515 / 11 / 690:  69%|██████▉   | 691/1000 [36:49<16:27,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 516 / 11 / 691:  69%|██████▉   | 691/1000 [36:49<16:27,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 516 / 11 / 691:  69%|██████▉   | 692/1000 [36:52<16:24,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 517 / 11 / 692:  69%|██████▉   | 692/1000 [36:52<16:24,  3.20s/it][Succeeded / Failed / Skipped / Total] 164 / 517 / 11 / 692:  69%|██████▉   | 693/1000 [36:54<16:20,  3.20s/it][Succeeded / Failed / Skipped / Total] 165 / 517 / 11 / 693:  69%|██████▉   | 693/1000 [36:54<16:20,  3.20s/it][Succeeded / Failed / Skipped / Total] 165 / 517 / 11 / 693:  69%|██████▉   | 694/1000 [36:55<16:16,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 518 / 11 / 694:  69%|██████▉   | 694/1000 [36:55<16:16,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 518 / 11 / 694:  70%|██████▉   | 695/1000 [37:00<16:14,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 519 / 11 / 695:  70%|██████▉   | 695/1000 [37:00<16:14,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 519 / 11 / 695:  70%|██████▉   | 696/1000 [37:03<16:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 520 / 11 / 696:  70%|██████▉   | 696/1000 [37:03<16:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 165 / 520 / 11 / 696:  70%|██████▉   | 697/1000 [37:07<16:08,  3.20s/it][Succeeded / Failed / Skipped / Total] 166 / 520 / 11 / 697:  70%|██████▉   | 697/1000 [37:07<16:08,  3.20s/it][Succeeded / Failed / Skipped / Total] 166 / 520 / 11 / 697:  70%|██████▉   | 698/1000 [37:10<16:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 166 / 521 / 11 / 698:  70%|██████▉   | 698/1000 [37:10<16:04,  3.20s/it][Succeeded / Failed / Skipped / Total] 166 / 521 / 11 / 698:  70%|██████▉   | 699/1000 [37:10<16:00,  3.19s/it]Returns the URL of the host . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[absent]] ( ) { StringBand [[connect]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[connect]] . append ( protocol ) ; [[connect]] . append ( "://" ) ; } if ( host != null ) { [[connect]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[connect]] . append ( ' ' ) ; [[connect]] . append ( port ) ; } return [[connect]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Add a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[visit]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[visit]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[visit]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Send the request and receive the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Returns a buffer that can be used to write data to the client . --> If locality is true then locality is false then locality is true --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[locality]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[apartment]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
Sets the basic authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[pittsburgh]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[nonstop]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action filters . --> Get the list of tectonics --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[pola]] ( ) { final Collection < ? extends ActionFilter > [[tectonics]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[tectonics]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 699 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 522 / 11 / 699:  70%|██████▉   | 699/1000 [37:10<16:00,  3.19s/it][Succeeded / Failed / Skipped / Total] 166 / 522 / 11 / 699:  70%|███████   | 700/1000 [37:11<15:56,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 522 / 11 / 700:  70%|███████   | 700/1000 [37:11<15:56,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 522 / 11 / 700:  70%|███████   | 701/1000 [37:18<15:54,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 523 / 11 / 701:  70%|███████   | 701/1000 [37:18<15:54,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 523 / 11 / 701:  70%|███████   | 702/1000 [37:20<15:51,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 524 / 11 / 702:  70%|███████   | 702/1000 [37:20<15:51,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 524 / 11 / 702:  70%|███████   | 703/1000 [37:24<15:48,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 525 / 11 / 703:  70%|███████   | 703/1000 [37:24<15:48,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 525 / 11 / 703:  70%|███████   | 704/1000 [37:24<15:43,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 526 / 11 / 704:  70%|███████   | 704/1000 [37:24<15:43,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 526 / 11 / 704:  70%|███████   | 705/1000 [37:25<15:39,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 527 / 11 / 705:  70%|███████   | 705/1000 [37:25<15:39,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 527 / 11 / 705:  71%|███████   | 706/1000 [37:32<15:37,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 528 / 11 / 706:  71%|███████   | 706/1000 [37:32<15:37,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 528 / 11 / 706:  71%|███████   | 707/1000 [37:33<15:34,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 529 / 11 / 707:  71%|███████   | 707/1000 [37:33<15:34,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 529 / 11 / 707:  71%|███████   | 708/1000 [37:34<15:29,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 530 / 11 / 708:  71%|███████   | 708/1000 [37:34<15:29,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 530 / 11 / 708:  71%|███████   | 709/1000 [37:36<15:26,  3.18s/it]Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[imagined]] ( ) { final Collection < ActionResult > [[bulbous]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[bulbous]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 700 ---------------------------------------------
Collect all action runtimes . --> Get the list of rooks --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[rooks]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the value of the named property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[millionth]] > [[millionth]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[millionth]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[millionth]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Remove a range from a handler . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler [[firstHandler]] , final Label start , final Label [[end]] ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = [[removeRange]] ( [[firstHandler]] . nextHandler , start , [[end]] ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[pittsburgh]] ( final Handler [[bri]] , final Label start , final Label [[closure]] ) { if ( [[bri]] == null ) { return null ; } else { [[bri]] . nextHandler = [[pittsburgh]] ( [[bri]] . nextHandler , start , [[closure]] ) ; } int handlerStart = [[bri]] . startPc . bytecodeOffset ; int handlerEnd = [[bri]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[closure]] == null ? Integer . MAX_VALUE : [[closure]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[dortmund]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 704 ---------------------------------------------
extract this reference from a property name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[henrik]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 705 ---------------------------------------------
Sets a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[pressin]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 706 ---------------------------------------------
Get a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[nega]] ( final String [[appointed]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[appointed]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Set a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[songwriting]] ( final String [[denomination]] , final Object [[artifact]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[denomination]] , [[artifact]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[abductors]] ( final String ref ) { Object [[valor]] = getObjectReference ( ref ) ; if ( [[valor]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[valor]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
[Succeeded / Failed / Skipped / Total] 167 / 531 / 11 / 709:  71%|███████   | 709/1000 [37:36<15:26,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 531 / 11 / 709:  71%|███████   | 710/1000 [37:45<15:25,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 532 / 11 / 710:  71%|███████   | 710/1000 [37:45<15:25,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 532 / 11 / 710:  71%|███████   | 711/1000 [37:45<15:20,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 533 / 11 / 711:  71%|███████   | 711/1000 [37:45<15:20,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 533 / 11 / 711:  71%|███████   | 712/1000 [37:48<15:17,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 534 / 11 / 712:  71%|███████   | 712/1000 [37:48<15:17,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 534 / 11 / 712:  71%|███████▏  | 713/1000 [37:53<15:15,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 535 / 11 / 713:  71%|███████▏  | 713/1000 [37:53<15:15,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 535 / 11 / 713:  71%|███████▏  | 714/1000 [37:54<15:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 536 / 11 / 714:  71%|███████▏  | 714/1000 [37:54<15:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 167 / 536 / 11 / 714:  72%|███████▏  | 715/1000 [37:57<15:07,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 537 / 11 / 715:  72%|███████▏  | 715/1000 [37:57<15:07,  3.18s/it][Succeeded / Failed / Skipped / Total] 167 / 537 / 11 / 715:  72%|███████▏  | 716/1000 [38:11<15:09,  3.20s/it][Succeeded / Failed / Skipped / Total] 167 / 538 / 11 / 716:  72%|███████▏  | 716/1000 [38:11<15:09,  3.20s/it][Succeeded / Failed / Skipped / Total] 167 / 538 / 11 / 716:  72%|███████▏  | 717/1000 [38:16<15:06,  3.20s/it]--------------------------------------------- Result 709 ---------------------------------------------
Get the entity descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[tauber]] ( final String [[bri]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[have]] = tableRefs . get ( [[bri]] ) ; return [[have]] == null ? null : [[have]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Get the alias for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[afterward]] ( final String [[moriah]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[moriah]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Find table descriptor by column ref . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[xiaowei]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Returns the entity descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[conquistador]] ( final String [[albatross]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[albatross]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[albatross]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[spiner]] ( final String [[allusion]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[allusion]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[plugged]] ( final String [[rupert]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[rupert]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[rupert]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 715 ---------------------------------------------
Writes the given value to the given JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[aerodynamics]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[matter]] ( final String [[calzone]] ) { StringBuilder tableName = new StringBuilder ( [[calzone]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[calzone]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[calzone]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 167 / 539 / 11 / 717:  72%|███████▏  | 717/1000 [38:16<15:06,  3.20s/it][Succeeded / Failed / Skipped / Total] 167 / 539 / 11 / 717:  72%|███████▏  | 718/1000 [38:28<15:06,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 540 / 11 / 718:  72%|███████▏  | 718/1000 [38:28<15:06,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 540 / 11 / 718:  72%|███████▏  | 719/1000 [38:33<15:04,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 541 / 11 / 719:  72%|███████▏  | 719/1000 [38:33<15:04,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 541 / 11 / 719:  72%|███████▏  | 720/1000 [38:36<15:01,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 542 / 11 / 720:  72%|███████▏  | 720/1000 [38:36<15:01,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 542 / 11 / 720:  72%|███████▏  | 721/1000 [38:37<14:56,  3.21s/it]Injects the attributes from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[telamon]] ( final HttpServletRequest servletRequest , final Targets [[destinies]] ) { final Enumeration < String > [[activities]] = servletRequest . getAttributeNames ( ) ; while ( [[activities]] . hasMoreElements ( ) ) { final String attrName = [[activities]] . nextElement ( ) ; [[destinies]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Convert column name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[homecoming]] ( final String [[queenie]] ) { String propertyName = convertColumnNameToPropertyName ( [[queenie]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[cancellations]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 720 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 167 / 543 / 11 / 721:  72%|███████▏  | 721/1000 [38:37<14:56,  3.21s/it][Succeeded / Failed / Skipped / Total] 167 / 543 / 11 / 721:  72%|███████▏  | 722/1000 [38:44<14:55,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 544 / 11 / 722:  72%|███████▏  | 722/1000 [38:44<14:55,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 544 / 11 / 722:  72%|███████▏  | 723/1000 [38:48<14:52,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 545 / 11 / 723:  72%|███████▏  | 723/1000 [38:48<14:52,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 545 / 11 / 723:  72%|███████▏  | 724/1000 [38:51<14:48,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 546 / 11 / 724:  72%|███████▏  | 724/1000 [38:51<14:48,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 546 / 11 / 724:  72%|███████▎  | 725/1000 [38:51<14:44,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 547 / 11 / 725:  72%|███████▎  | 725/1000 [38:51<14:44,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 547 / 11 / 725:  73%|███████▎  | 726/1000 [38:57<14:42,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 548 / 11 / 726:  73%|███████▎  | 726/1000 [38:57<14:42,  3.22s/it][Succeeded / Failed / Skipped / Total] 167 / 548 / 11 / 726:  73%|███████▎  | 727/1000 [39:09<14:42,  3.23s/it]Injects the parameters from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[plugged]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 722 ---------------------------------------------
Returns a set of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[michelangelo]] ( ) { final Set < T > [[creating]] = new HashSet <> ( wrappers . size ( ) ) ; [[creating]] . addAll ( wrappers . values ( ) ) ; return [[creating]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 723 ---------------------------------------------
Creates an instance of the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Resolves the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[finalize]] ( final Class < ? extends T > [[chandler]] ) { String [[leones]] = [[chandler]] . getName ( ) ; T wrapper = lookup ( [[leones]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[chandler]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[leones]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 725 ---------------------------------------------
Store a value to a PreparedStatement . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[aicha]] ( final PreparedStatement st , final int index , final Object [[appreciated]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[appreciated]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 726 ---------------------------------------------
Converts a path to a system path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[inheritance]] ( final String [[footpath]] ) { if ( [[footpath]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[footpath]] ) ; } else { return separatorsToUnix ( [[footpath]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 548 / 11 / 727:  73%|███████▎  | 727/1000 [39:09<14:42,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 548 / 11 / 727:  73%|███████▎  | 728/1000 [39:10<14:38,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 549 / 11 / 728:  73%|███████▎  | 728/1000 [39:10<14:38,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 549 / 11 / 728:  73%|███████▎  | 729/1000 [39:11<14:34,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 550 / 11 / 729:  73%|███████▎  | 729/1000 [39:11<14:34,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 550 / 11 / 729:  73%|███████▎  | 730/1000 [39:14<14:30,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 551 / 11 / 730:  73%|███████▎  | 730/1000 [39:14<14:30,  3.23s/it][Succeeded / Failed / Skipped / Total] 168 / 551 / 11 / 730:  73%|███████▎  | 731/1000 [39:15<14:26,  3.22s/it][Succeeded / Failed / Skipped / Total] 169 / 551 / 11 / 731:  73%|███████▎  | 731/1000 [39:15<14:26,  3.22s/it][Succeeded / Failed / Skipped / Total] 169 / 551 / 11 / 731:  73%|███████▎  | 732/1000 [39:17<14:23,  3.22s/it][Succeeded / Failed / Skipped / Total] 170 / 551 / 11 / 732:  73%|███████▎  | 732/1000 [39:17<14:23,  3.22s/it][Succeeded / Failed / Skipped / Total] 170 / 551 / 11 / 732:  73%|███████▎  | 733/1000 [39:18<14:19,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 551 / 11 / 733:  73%|███████▎  | 733/1000 [39:18<14:19,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 551 / 11 / 733:  73%|███████▎  | 734/1000 [39:19<14:15,  3.21s/it]Converts a column name to a property name . --> Returns the retract string if the length of the retract string exceeds the length of the retract string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { [[toUpper]] = True ; continue ; } if ( [[toUpper]] ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; [[toUpper]] = False ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[exceeds]] ( final String [[retract]] ) { StringBuilder [[dumbledore]] = new StringBuilder ( [[retract]] . length ( ) ) ; int len = [[retract]] . length ( ) ; if ( splitCamelCase ) { boolean [[dozy]] = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[retract]] . charAt ( i ) ; if ( c == separatorChar ) { [[dozy]] = True ; continue ; } if ( [[dozy]] ) { [[dumbledore]] . append ( Character . toUpperCase ( c ) ) ; [[dozy]] = False ; } else { [[dumbledore]] . append ( Character . toLowerCase ( c ) ) ; } } return [[dumbledore]] . toString ( ) ; } return [[retract]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 728 ---------------------------------------------
Returns the relative path of targetPath relative to basePath . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[hitchhiked]] ( final String targetPath , final String [[hubcaps]] ) { return new File ( [[hubcaps]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Get the path of a file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[malakai]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 730 ---------------------------------------------
Adds an action config to the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[broadened]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Start the Madvoc server . --> Initialize Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[embark]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Register a madvoc component . --> erola señorita --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[erol]] ( final Class < ? > [[señorita]] ) { Objects . requireNonNull ( [[señorita]] ) ; madvocComponents . add ( ClassConsumer . of ( [[señorita]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 733 ---------------------------------------------
Configure defaults . --> Register the gwynn annotation --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[gwynn]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 552 / 11 / 734:  73%|███████▎  | 734/1000 [39:19<14:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 552 / 11 / 734:  74%|███████▎  | 735/1000 [39:22<14:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 553 / 11 / 735:  74%|███████▎  | 735/1000 [39:22<14:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 553 / 11 / 735:  74%|███████▎  | 736/1000 [39:28<14:09,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 554 / 11 / 736:  74%|███████▎  | 736/1000 [39:28<14:09,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 554 / 11 / 736:  74%|███████▎  | 737/1000 [39:30<14:05,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 555 / 11 / 737:  74%|███████▎  | 737/1000 [39:30<14:05,  3.22s/it][Succeeded / Failed / Skipped / Total] 171 / 555 / 11 / 737:  74%|███████▍  | 738/1000 [39:31<14:01,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 556 / 11 / 738:  74%|███████▍  | 738/1000 [39:31<14:01,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 556 / 11 / 738:  74%|███████▍  | 739/1000 [39:33<13:58,  3.21s/it]Register Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[limitations]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 735 ---------------------------------------------
Split a filename into its components . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[lastSeparatorIndex]] = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( [[lastSeparatorIndex]] == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , [[lastSeparatorIndex]] + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[cleavage]] ( final String [[neutrinos]] ) { String prefix = getPrefix ( [[neutrinos]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[bottomless]] = indexOfLastSeparator ( [[neutrinos]] ) ; int lastExtensionIndex = indexOfExtension ( [[neutrinos]] ) ; String path ; String baseName ; String extension ; if ( [[bottomless]] == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[neutrinos]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[neutrinos]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[neutrinos]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[neutrinos]] . substring ( prefix . length ( ) , [[bottomless]] + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[neutrinos]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[neutrinos]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[neutrinos]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude the given jars from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[quesadilla]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Include all of the specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[lovejoy]] ( final String ... [[famished]] ) { for ( final String includedJar : [[famished]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 738 ---------------------------------------------
Adds a list of entries to be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[mathematical]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 557 / 11 / 739:  74%|███████▍  | 739/1000 [39:33<13:58,  3.21s/it][Succeeded / Failed / Skipped / Total] 171 / 557 / 11 / 739:  74%|███████▍  | 740/1000 [39:37<13:55,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 557 / 11 / 740:  74%|███████▍  | 740/1000 [39:37<13:55,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 557 / 11 / 740:  74%|███████▍  | 741/1000 [39:43<13:53,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 558 / 11 / 741:  74%|███████▍  | 741/1000 [39:43<13:53,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 558 / 11 / 741:  74%|███████▍  | 742/1000 [39:46<13:49,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 559 / 11 / 742:  74%|███████▍  | 742/1000 [39:46<13:49,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 559 / 11 / 742:  74%|███████▍  | 743/1000 [39:51<13:47,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 560 / 11 / 743:  74%|███████▍  | 743/1000 [39:51<13:47,  3.22s/it][Succeeded / Failed / Skipped / Total] 172 / 560 / 11 / 743:  74%|███████▍  | 744/1000 [39:52<13:43,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 560 / 11 / 744:  74%|███████▍  | 744/1000 [39:52<13:43,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 560 / 11 / 744:  74%|███████▍  | 745/1000 [39:59<13:41,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 561 / 11 / 745:  74%|███████▍  | 745/1000 [39:59<13:41,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 561 / 11 / 745:  75%|███████▍  | 746/1000 [39:59<13:37,  3.22s/it]Exclude the given entries from the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[charters]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Scan a list of files . --> Scan a list of driveways --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String [[path]] : paths ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String [[driveways]] : paths ) { filesToScan . add ( new File ( [[driveways]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[ichimonji]] ( final Class type ) { final String [[appointing]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[appointing]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 742 ---------------------------------------------
start scanning the files to scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[commenced]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Create a new JtxTransaction . --> Adapts a JtxTransactionMode to a JtxTransaction --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[adapt]] ( final JtxTransactionMode [[crest]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[crest]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 745 ---------------------------------------------
Scan the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String [[rootPath]] = [[root]] . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[academies]] ( final File [[anchored]] ) { String [[food]] = [[anchored]] . getAbsolutePath ( ) ; if ( ! [[food]] . endsWith ( File . separator ) ) { [[food]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( [[food]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[food]] , file , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[food]] , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 562 / 11 / 746:  75%|███████▍  | 746/1000 [39:59<13:37,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 562 / 11 / 746:  75%|███████▍  | 747/1000 [40:03<13:34,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 563 / 11 / 747:  75%|███████▍  | 747/1000 [40:03<13:34,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 563 / 11 / 747:  75%|███████▍  | 748/1000 [40:08<13:31,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 564 / 11 / 748:  75%|███████▍  | 748/1000 [40:08<13:31,  3.22s/it][Succeeded / Failed / Skipped / Total] 173 / 564 / 11 / 748:  75%|███████▍  | 749/1000 [40:19<13:30,  3.23s/it][Succeeded / Failed / Skipped / Total] 173 / 565 / 11 / 749:  75%|███████▍  | 749/1000 [40:19<13:30,  3.23s/it][Succeeded / Failed / Skipped / Total] 173 / 565 / 11 / 749:  75%|███████▌  | 750/1000 [40:27<13:29,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 566 / 11 / 750:  75%|███████▌  | 750/1000 [40:27<13:29,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 566 / 11 / 750:  75%|███████▌  | 751/1000 [40:33<13:26,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 567 / 11 / 751:  75%|███████▌  | 751/1000 [40:33<13:26,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 567 / 11 / 751:  75%|███████▌  | 752/1000 [40:34<13:22,  3.24s/it]Scan a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[sanna]] ( final File [[dossier]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[dossier]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[dossier]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 747 ---------------------------------------------
Get or initialize scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[juelz]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 748 ---------------------------------------------
For the given scope type invoke the given consumer for the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[prussia]] ( final Class < ? extends MadvocScope > [[tempered]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( [[tempered]] ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Prepare a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[homeostasis]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Assure the size of the token set is at least maxTokensPerSession . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[yadda]] ( final Set < Token > [[hubcaps]] ) { if ( [[hubcaps]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[hubcaps]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[hubcaps]] . size ( ) >= maxTokensPerSession ) ) { [[hubcaps]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[within]] ( final Object [[beginnings]] ) { BeanCopy [[flights]] = new BeanCopy ( [[beginnings]] ) ; [[flights]] . isSourceMap = [[beginnings]] instanceof Map ; return [[flights]] ; }
[[[[Nl]]]]: Defines source detects a map .
[Succeeded / Failed / Skipped / Total] 173 / 568 / 11 / 752:  75%|███████▌  | 752/1000 [40:34<13:22,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 568 / 11 / 752:  75%|███████▌  | 753/1000 [40:37<13:19,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 569 / 11 / 753:  75%|███████▌  | 753/1000 [40:37<13:19,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 569 / 11 / 753:  75%|███████▌  | 754/1000 [40:43<13:17,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 570 / 11 / 754:  75%|███████▌  | 754/1000 [40:44<13:17,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 570 / 11 / 754:  76%|███████▌  | 755/1000 [40:48<13:14,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 571 / 11 / 755:  76%|███████▌  | 755/1000 [40:48<13:14,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 571 / 11 / 755:  76%|███████▌  | 756/1000 [40:52<13:11,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 572 / 11 / 756:  76%|███████▌  | 756/1000 [40:52<13:11,  3.24s/it][Succeeded / Failed / Skipped / Total] 173 / 572 / 11 / 756:  76%|███████▌  | 757/1000 [41:00<13:09,  3.25s/it][Succeeded / Failed / Skipped / Total] 173 / 573 / 11 / 757:  76%|███████▌  | 757/1000 [41:00<13:09,  3.25s/it][Succeeded / Failed / Skipped / Total] 173 / 573 / 11 / 757:  76%|███████▌  | 758/1000 [41:11<13:09,  3.26s/it]--------------------------------------------- Result 752 ---------------------------------------------
Creates a copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[duplicating]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
Checks if the session contains a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return True ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return False ; } boolean [[found]] = False ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; [[found]] = True ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[peeks]] ( final HttpSession [[periods]] , final String [[demonstrator]] ) { Set < Token > [[interpreting]] = ( Set < Token > ) [[periods]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[interpreting]] == null ) && ( [[demonstrator]] == null ) ) { return True ; } if ( ( [[interpreting]] == null ) || ( [[demonstrator]] == null ) ) { return False ; } boolean [[disclosed]] = False ; Iterator < Token > it = [[interpreting]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[demonstrator]] ) ) { it . remove ( ) ; [[disclosed]] = True ; } } return [[disclosed]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 754 ---------------------------------------------
Resolve a Petite scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 755 ---------------------------------------------
Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[parabola]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Register the table reference for the entity . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[activated]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
Remove a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[jiffy]] ( final Class [[gaillard]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 574 / 11 / 758:  76%|███████▌  | 758/1000 [41:11<13:09,  3.26s/it][Succeeded / Failed / Skipped / Total] 173 / 574 / 11 / 758:  76%|███████▌  | 759/1000 [41:13<13:05,  3.26s/it][Succeeded / Failed / Skipped / Total] 173 / 575 / 11 / 759:  76%|███████▌  | 759/1000 [41:13<13:05,  3.26s/it][Succeeded / Failed / Skipped / Total] 173 / 576 / 11 / 760:  76%|███████▌  | 760/1000 [41:13<13:01,  3.25s/it][Succeeded / Failed / Skipped / Total] 173 / 576 / 11 / 760:  76%|███████▌  | 761/1000 [41:28<13:01,  3.27s/it][Succeeded / Failed / Skipped / Total] 173 / 577 / 11 / 761:  76%|███████▌  | 761/1000 [41:28<13:01,  3.27s/it][Succeeded / Failed / Skipped / Total] 173 / 577 / 11 / 761:  76%|███████▌  | 762/1000 [41:43<13:01,  3.29s/it]Register a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[pluses]] ( final Class < T > [[sorting]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[sorting]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[sorting]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[sorting]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 759 ---------------------------------------------
Decodes a string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[cryptic]] ( final char [ ] [[beltran]] ) { int length = [[beltran]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[beltran]] [ endx ] == ' ' ? ( [[beltran]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[beltran]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[beltran]] [ sndx ++ ] ] << 18 | INV [ [[beltran]] [ sndx ++ ] ] << 12 | INV [ [[beltran]] [ sndx ++ ] ] << 6 | INV [ [[beltran]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[beltran]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 760 ---------------------------------------------
Register a bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[broadway]] ) { beans . put ( name , [[broadway]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[broadway]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[friends]] ( final Class [[classifies]] ) { String [ ] beanNames = beanCollections . get ( [[classifies]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[classifies]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[classifies]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 578 / 11 / 762:  76%|███████▌  | 762/1000 [41:43<13:01,  3.29s/it][Succeeded / Failed / Skipped / Total] 173 / 578 / 11 / 762:  76%|███████▋  | 763/1000 [41:50<12:59,  3.29s/it][Succeeded / Failed / Skipped / Total] 173 / 579 / 11 / 763:  76%|███████▋  | 763/1000 [41:50<12:59,  3.29s/it][Succeeded / Failed / Skipped / Total] 173 / 579 / 11 / 763:  76%|███████▋  | 764/1000 [41:59<12:58,  3.30s/it][Succeeded / Failed / Skipped / Total] 173 / 580 / 11 / 764:  76%|███████▋  | 764/1000 [41:59<12:58,  3.30s/it][Succeeded / Failed / Skipped / Total] 173 / 580 / 11 / 764:  76%|███████▋  | 765/1000 [42:16<12:59,  3.32s/it]Register a Petite set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = [[cd]] . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[federated]] ( final String beanName , final String property ) { BeanDefinition [[archeology]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[albums]] = ClassIntrospector . get ( ) . lookup ( [[archeology]] . type ) ; PropertyDescriptor propertyDescriptor = [[albums]] . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[archeology]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[archeology]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register a Petite property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String [[beanName]] , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[distributed]] ( final String [[compiled]] , final String [[owns]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[compiled]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[owns]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[owns]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Register a Petite constructor injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[cheaper]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[kee]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[conference]] = ClassIntrospector . get ( ) . lookup ( [[kee]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[conference]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[kee]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[conference]] . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[kee]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[kee]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 581 / 11 / 765:  76%|███████▋  | 765/1000 [42:16<12:59,  3.32s/it][Succeeded / Failed / Skipped / Total] 173 / 581 / 11 / 765:  77%|███████▋  | 766/1000 [42:29<12:58,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 582 / 11 / 766:  77%|███████▋  | 766/1000 [42:29<12:58,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 582 / 11 / 766:  77%|███████▋  | 767/1000 [42:34<12:55,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 583 / 11 / 767:  77%|███████▋  | 767/1000 [42:34<12:55,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 583 / 11 / 767:  77%|███████▋  | 768/1000 [42:39<12:53,  3.33s/it]Register a Petite method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] [[arguments]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[guardia]] ( final String beanName , final String methodName , final Class [ ] [[conflict]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[conflict]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[conflict]] , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 766 ---------------------------------------------
Register Petite destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String [[beanName]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[cut]] ( final String [[heinz]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[heinz]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 767 ---------------------------------------------
Register Petite init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[spelling]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 584 / 11 / 768:  77%|███████▋  | 768/1000 [42:39<12:53,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 584 / 11 / 768:  77%|███████▋  | 769/1000 [42:45<12:50,  3.34s/it][Succeeded / Failed / Skipped / Total] 173 / 585 / 11 / 769:  77%|███████▋  | 769/1000 [42:45<12:50,  3.34s/it][Succeeded / Failed / Skipped / Total] 173 / 585 / 11 / 769:  77%|███████▋  | 770/1000 [42:45<12:46,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 586 / 11 / 770:  77%|███████▋  | 770/1000 [42:45<12:46,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 586 / 11 / 770:  77%|███████▋  | 771/1000 [42:51<12:43,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 587 / 11 / 771:  77%|███████▋  | 771/1000 [42:51<12:43,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 587 / 11 / 771:  77%|███████▋  | 772/1000 [42:53<12:40,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 588 / 11 / 772:  77%|███████▋  | 772/1000 [42:53<12:40,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 588 / 11 / 772:  77%|███████▋  | 773/1000 [42:55<12:36,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 589 / 11 / 773:  77%|███████▋  | 773/1000 [42:55<12:36,  3.33s/it][Succeeded / Failed / Skipped / Total] 173 / 589 / 11 / 773:  77%|███████▋  | 774/1000 [43:03<12:34,  3.34s/it][Succeeded / Failed / Skipped / Total] 174 / 589 / 11 / 774:  77%|███████▋  | 774/1000 [43:03<12:34,  3.34s/it][Succeeded / Failed / Skipped / Total] 174 / 589 / 11 / 774:  78%|███████▊  | 775/1000 [43:04<12:30,  3.33s/it]Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( providerName , beanName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[maddest]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[trademarks]] = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( [[trademarks]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition [[horseback]] = new ProviderDefinition ( providerName , beanName , [[trademarks]] . getMethod ( ) ) ; providers . put ( providerName , [[horseback]] ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Iterate through all beans of the given type and accept them to the given consumer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[insubordinate]] ( final Class [[species]] , final Consumer < String > [[scurry]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[species]] ) ) { [[scurry]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 770 ---------------------------------------------
Define parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > entry : [[properties]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[avocation]] ( final Map < ? , ? > [[qualities]] ) { for ( Map . Entry < ? , ? > entry : [[qualities]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 771 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[groups]] ( final String [[reconnect]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[bankbook]] = new ProviderDefinition ( [[reconnect]] , md . getMethod ( ) ) ; providers . put ( [[reconnect]] , [[bankbook]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 772 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[wiretap]] ( final ActionRequest [[afflicting]] ) throws Exception { printBefore ( [[afflicting]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[afflicting]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[afflicting]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 773 ---------------------------------------------
Push an integer to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[espresso]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 774 ---------------------------------------------
Advice method name . --> Returns the napkin for the given acronym and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[napkin]] ( final String [[acronym]] , final int index ) { return ProxettaNames . methodPrefix + [[acronym]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 775 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 174 / 590 / 11 / 775:  78%|███████▊  | 775/1000 [43:04<12:30,  3.33s/it][Succeeded / Failed / Skipped / Total] 174 / 590 / 11 / 775:  78%|███████▊  | 776/1000 [43:06<12:26,  3.33s/it][Succeeded / Failed / Skipped / Total] 175 / 590 / 11 / 776:  78%|███████▊  | 776/1000 [43:06<12:26,  3.33s/it][Succeeded / Failed / Skipped / Total] 175 / 590 / 11 / 776:  78%|███████▊  | 777/1000 [43:16<12:25,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 591 / 11 / 777:  78%|███████▊  | 777/1000 [43:16<12:25,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 591 / 11 / 777:  78%|███████▊  | 778/1000 [43:16<12:20,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 592 / 11 / 778:  78%|███████▊  | 778/1000 [43:16<12:20,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 592 / 11 / 778:  78%|███████▊  | 779/1000 [43:25<12:19,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 593 / 11 / 779:  78%|███████▊  | 779/1000 [43:25<12:19,  3.34s/it][Succeeded / Failed / Skipped / Total] 175 / 593 / 11 / 779:  78%|███████▊  | 780/1000 [43:29<12:16,  3.35s/it][Succeeded / Failed / Skipped / Total] 176 / 593 / 11 / 780:  78%|███████▊  | 780/1000 [43:29<12:16,  3.35s/it][Succeeded / Failed / Skipped / Total] 176 / 593 / 11 / 780:  78%|███████▊  | 781/1000 [43:30<12:12,  3.34s/it][Succeeded / Failed / Skipped / Total] 177 / 593 / 11 / 781:  78%|███████▊  | 781/1000 [43:30<12:12,  3.34s/it][Succeeded / Failed / Skipped / Total] 177 / 593 / 11 / 781:  78%|███████▊  | 782/1000 [43:34<12:08,  3.34s/it]Check that an argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[bk]] ( final MethodInfo methodInfo , final int [[concurrently]] ) { if ( ( [[concurrently]] < 1 ) || ( [[concurrently]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[concurrently]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 776 ---------------------------------------------
Advice field name . --> Returns a string containing the runs for a given christening and yearbook --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[runs]] ( final String [[christening]] , final int [[yearbook]] ) { return ProxettaNames . fieldPrefix + [[christening]] + ProxettaNames . fieldDivider + [[yearbook]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 777 ---------------------------------------------
Load special method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[jussi]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 778 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[ziad]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 779 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[boardwalk]] ( final MethodVisitor mv , final MethodInfo [[organize]] ) { for ( int [[li]] = 1 ; [[li]] <= [[organize]] . getArgumentsCount ( ) ; [[li]] ++ ) { loadMethodArgument ( mv , [[organize]] , [[li]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 780 ---------------------------------------------
Prepare the return value of a method . --> Generates an ACONST_NULL or ACONST_BYTE or ACONST_CHAR --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[xu]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 781 ---------------------------------------------
Resolves the Java version . --> Returns the fingerprint if it is greater than or equal to or equal to or equal to or greater than or equal to or equal to or equal to or greater than or equal to or equal to or equal to or greater than or equal to or equal to or greater than or equal to or equal to or greater than or equal to or equal to or equal to or greater than or equal to or equal to or greater than or equal to or equal to or greater than or equal to or equal to or greater than or equal to or greater than or equal to or equal to or equal to or equal to or equal to or equal to or --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[concurrently]] ( final int [[fingerprint]] ) { final int [[srt]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[gorgeous]] = [[srt]] - 8 + 52 ; return [[fingerprint]] > [[gorgeous]] ? [[fingerprint]] : [[gorgeous]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 782 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 594 / 11 / 782:  78%|███████▊  | 782/1000 [43:34<12:08,  3.34s/it][Succeeded / Failed / Skipped / Total] 177 / 594 / 11 / 782:  78%|███████▊  | 783/1000 [43:35<12:04,  3.34s/it][Succeeded / Failed / Skipped / Total] 177 / 595 / 11 / 783:  78%|███████▊  | 783/1000 [43:35<12:04,  3.34s/it][Succeeded / Failed / Skipped / Total] 177 / 595 / 11 / 783:  78%|███████▊  | 784/1000 [43:39<12:01,  3.34s/it][Succeeded / Failed / Skipped / Total] 178 / 595 / 11 / 784:  78%|███████▊  | 784/1000 [43:39<12:01,  3.34s/it][Succeeded / Failed / Skipped / Total] 178 / 595 / 11 / 784:  78%|███████▊  | 785/1000 [43:42<11:58,  3.34s/it][Succeeded / Failed / Skipped / Total] 178 / 596 / 11 / 785:  78%|███████▊  | 785/1000 [43:42<11:58,  3.34s/it][Succeeded / Failed / Skipped / Total] 178 / 596 / 11 / 785:  79%|███████▊  | 786/1000 [43:44<11:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 179 / 596 / 11 / 786:  79%|███████▊  | 786/1000 [43:44<11:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 179 / 596 / 11 / 786:  79%|███████▊  | 787/1000 [43:50<11:51,  3.34s/it]Load a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[conqueror]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
Store a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bobcat]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Store a primitive type into an array . --> visit mycroft --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[mycroft]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
Generate a NEWARRAY instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[blistered]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 786 ---------------------------------------------
Checks if the flags are empty . --> Liefert die Gloucestershire . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return True ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[gloucestershire]] ( Flags flags ) { if ( flags == null ) return True ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 787 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 597 / 11 / 787:  79%|███████▊  | 787/1000 [43:50<11:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 179 / 597 / 11 / 787:  79%|███████▉  | 788/1000 [43:51<11:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 180 / 597 / 11 / 788:  79%|███████▉  | 788/1000 [43:51<11:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 180 / 597 / 11 / 788:  79%|███████▉  | 789/1000 [43:54<11:44,  3.34s/it][Succeeded / Failed / Skipped / Total] 180 / 598 / 11 / 789:  79%|███████▉  | 789/1000 [43:54<11:44,  3.34s/it][Succeeded / Failed / Skipped / Total] 180 / 598 / 11 / 789:  79%|███████▉  | 790/1000 [43:58<11:41,  3.34s/it][Succeeded / Failed / Skipped / Total] 181 / 598 / 11 / 790:  79%|███████▉  | 790/1000 [43:58<11:41,  3.34s/it][Succeeded / Failed / Skipped / Total] 181 / 598 / 11 / 790:  79%|███████▉  | 791/1000 [44:02<11:38,  3.34s/it][Succeeded / Failed / Skipped / Total] 182 / 598 / 11 / 791:  79%|███████▉  | 791/1000 [44:02<11:38,  3.34s/it][Succeeded / Failed / Skipped / Total] 182 / 598 / 11 / 791:  79%|███████▉  | 792/1000 [44:13<11:36,  3.35s/it][Succeeded / Failed / Skipped / Total] 182 / 599 / 11 / 792:  79%|███████▉  | 792/1000 [44:13<11:36,  3.35s/it][Succeeded / Failed / Skipped / Total] 182 / 599 / 11 / 792:  79%|███████▉  | 793/1000 [44:17<11:33,  3.35s/it][Succeeded / Failed / Skipped / Total] 182 / 600 / 11 / 793:  79%|███████▉  | 793/1000 [44:17<11:33,  3.35s/it][Succeeded / Failed / Skipped / Total] 182 / 600 / 11 / 793:  79%|███████▉  | 794/1000 [44:18<11:29,  3.35s/it]Creates a key for a method signature . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[gargantuan]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 788 ---------------------------------------------
Resolve the bearer token from the Authorization header . --> Get X - X - X - X - X - X - XX - XX - XX - XX - XX - XX - XX - XX - XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX - XXXXXXXXXXXXX --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[xu]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 789 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[brulee]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Extract the encoding from the given content type . --> HANNUKA HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - HANZI - --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } encoding = [[defaultEncoding]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[hannukah]] ( final String [[accordionist]] , String [[hunched]] ) { String encoding = [[hannukah]] ( [[accordionist]] ) ; if ( encoding == null ) { if ( [[hunched]] == null ) { [[hunched]] = JoddCore . encoding ; } encoding = [[hunched]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 791 ---------------------------------------------
Prepare a download request . --> Aimée d une lawsuit --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[aimée]] ( final HttpServletResponse response , final File [[lawsuit]] , final String mimeType ) { if ( ! [[lawsuit]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[lawsuit]] ) ; } if ( [[lawsuit]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[lawsuit]] ) ; } prepareResponse ( response , [[lawsuit]] . getAbsolutePath ( ) , mimeType , ( int ) [[lawsuit]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request body from a reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[bakshi]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Returns a list of all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[whitelaw]] ( final HttpServletRequest request , final String [[leukaemia]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[leukaemia]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 601 / 11 / 794:  79%|███████▉  | 794/1000 [44:18<11:29,  3.35s/it][Succeeded / Failed / Skipped / Total] 182 / 601 / 11 / 794:  80%|███████▉  | 795/1000 [44:29<11:28,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 602 / 11 / 795:  80%|███████▉  | 795/1000 [44:29<11:28,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 602 / 11 / 795:  80%|███████▉  | 796/1000 [44:31<11:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 603 / 11 / 796:  80%|███████▉  | 796/1000 [44:31<11:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 603 / 11 / 796:  80%|███████▉  | 797/1000 [44:37<11:21,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 604 / 11 / 797:  80%|███████▉  | 797/1000 [44:37<11:21,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 604 / 11 / 797:  80%|███████▉  | 798/1000 [44:44<11:19,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 605 / 11 / 798:  80%|███████▉  | 798/1000 [44:44<11:19,  3.36s/it][Succeeded / Failed / Skipped / Total] 182 / 605 / 11 / 798:  80%|███████▉  | 799/1000 [44:53<11:17,  3.37s/it][Succeeded / Failed / Skipped / Total] 182 / 606 / 11 / 799:  80%|███████▉  | 799/1000 [44:53<11:17,  3.37s/it][Succeeded / Failed / Skipped / Total] 182 / 606 / 11 / 799:  80%|████████  | 800/1000 [44:55<11:13,  3.37s/it][Succeeded / Failed / Skipped / Total] 182 / 607 / 11 / 800:  80%|████████  | 800/1000 [44:55<11:13,  3.37s/it][Succeeded / Failed / Skipped / Total] 182 / 607 / 11 / 800:  80%|████████  | 801/1000 [44:58<11:10,  3.37s/it]Prepare the response to be sent to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse [[response]] , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { [[response]] . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[misused]] ( final HttpServletResponse [[satisfy]] , final String fileName , String [[dialectical]] , final int fileSize ) { if ( ( [[dialectical]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[dialectical]] = MimeTypes . getMimeType ( extension ) ; } if ( [[dialectical]] != null ) { [[satisfy]] . setContentType ( [[dialectical]] ) ; } if ( fileSize >= 0 ) { [[satisfy]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 795 ---------------------------------------------
Read the request body from the request stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[pundit]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Store the context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[counterterrorism]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Store the context path in the request and servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[broadway]] ( final PageContext [[agro]] , final String [[drummer]] ) { String ctxPath = getContextPath ( [[agro]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[agro]] . getRequest ( ) ; request . setAttribute ( [[drummer]] , ctxPath ) ; ServletContext servletContext = [[agro]] . getServletContext ( ) ; servletContext . setAttribute ( [[drummer]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Invoke a tag body . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[formality]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
Checks if the given name is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String [[nameValuePair]] : [[nameValuePairs]] ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[adore]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[ver]] = request . getQueryString ( ) ; String [ ] [[adex]] = StringUtil . splitc ( [[ver]] , ' ' ) ; for ( String [[shoo]] : [[adex]] ) { if ( [[shoo]] . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Renders the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[espera]] ( final JspFragment [[corpus]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[corpus]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 607 / 11 / 801:  80%|████████  | 801/1000 [44:58<11:10,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 607 / 11 / 801:  80%|████████  | 802/1000 [45:04<11:07,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 608 / 11 / 802:  80%|████████  | 802/1000 [45:04<11:07,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 608 / 11 / 802:  80%|████████  | 803/1000 [45:05<11:03,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 609 / 11 / 803:  80%|████████  | 803/1000 [45:05<11:03,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 609 / 11 / 803:  80%|████████  | 804/1000 [45:08<11:00,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 610 / 11 / 804:  80%|████████  | 804/1000 [45:08<11:00,  3.37s/it][Succeeded / Failed / Skipped / Total] 183 / 610 / 11 / 804:  80%|████████  | 805/1000 [45:15<10:57,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 610 / 11 / 805:  80%|████████  | 805/1000 [45:15<10:57,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 610 / 11 / 805:  81%|████████  | 806/1000 [45:19<10:54,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 611 / 11 / 806:  81%|████████  | 806/1000 [45:19<10:54,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 611 / 11 / 806:  81%|████████  | 807/1000 [45:19<10:50,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 612 / 11 / 807:  81%|████████  | 807/1000 [45:19<10:50,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 612 / 11 / 807:  81%|████████  | 808/1000 [45:19<10:46,  3.37s/it]Prepare the given array of parameters to be used in a request . --> If treatEmptyParamsAsNull is true then treatEmptyParamsAsNull is false then treatEmptyParamsAsNull is true --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String [[paramValue]] = paramValues [ i ] ; if ( [[paramValue]] == null ) { emptyCount ++ ; continue ; } if ( [[paramValue]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[paramValue]] = null ; } } paramValues [ i ] = [[paramValue]] ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[motherly]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[sampaio]] ) { if ( treatEmptyParamsAsNull || [[sampaio]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String [[branching]] = paramValues [ i ] ; if ( [[branching]] == null ) { emptyCount ++ ; continue ; } if ( [[branching]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[branching]] = null ; } } paramValues [ i ] = [[branching]] ; } if ( ( [[sampaio]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 802 ---------------------------------------------
Call all destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[authoritarian]] ( ) { for ( final DestroyMethodPoint [[aaahh]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[aaahh]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[aaahh]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Renders the given JspFragment to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[moved]] ( final JspFragment body ) throws JspException { char [ ] [[fruit]] = renderBody ( body ) ; return new String ( [[fruit]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 804 ---------------------------------------------
Invoke all init methods for the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[opel]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[huddle]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[huddle]] . invocationStrategy ) { continue ; } try { [[huddle]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[huddle]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Rewrite an action path . --> Rename a aaahh to a aaahh --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rename]] ( final HttpServletRequest servletRequest , final String [[aaahh]] , final String httpMethod ) { return [[aaahh]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[possibility]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[tapestry]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Injects the parameters of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[wren]] ( final ParamManager [[bier]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 613 / 11 / 808:  81%|████████  | 808/1000 [45:19<10:46,  3.37s/it][Succeeded / Failed / Skipped / Total] 184 / 613 / 11 / 808:  81%|████████  | 809/1000 [45:24<10:43,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 613 / 11 / 809:  81%|████████  | 809/1000 [45:24<10:43,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 613 / 11 / 809:  81%|████████  | 810/1000 [45:31<10:40,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 614 / 11 / 810:  81%|████████  | 810/1000 [45:31<10:40,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 614 / 11 / 810:  81%|████████  | 811/1000 [45:35<10:37,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 615 / 11 / 811:  81%|████████  | 811/1000 [45:35<10:37,  3.37s/it][Succeeded / Failed / Skipped / Total] 185 / 615 / 11 / 811:  81%|████████  | 812/1000 [45:36<10:33,  3.37s/it][Succeeded / Failed / Skipped / Total] 186 / 615 / 11 / 812:  81%|████████  | 812/1000 [45:36<10:33,  3.37s/it][Succeeded / Failed / Skipped / Total] 186 / 615 / 11 / 812:  81%|████████▏ | 813/1000 [45:41<10:30,  3.37s/it][Succeeded / Failed / Skipped / Total] 187 / 615 / 11 / 813:  81%|████████▏ | 813/1000 [45:41<10:30,  3.37s/it][Succeeded / Failed / Skipped / Total] 187 / 615 / 11 / 813:  81%|████████▏ | 814/1000 [45:41<10:26,  3.37s/it][Succeeded / Failed / Skipped / Total] 187 / 616 / 11 / 814:  81%|████████▏ | 814/1000 [45:41<10:26,  3.37s/it][Succeeded / Failed / Skipped / Total] 187 / 616 / 11 / 814:  82%|████████▏ | 815/1000 [45:43<10:22,  3.37s/it][Succeeded / Failed / Skipped / Total] 188 / 616 / 11 / 815:  82%|████████▏ | 815/1000 [45:43<10:22,  3.37s/it][Succeeded / Failed / Skipped / Total] 188 / 616 / 11 / 815:  82%|████████▏ | 816/1000 [45:50<10:20,  3.37s/it]Copy parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , [[ignoreEmptyRequestParams]] ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[bigotry]] ( final HttpServletRequest [[grocery]] , final boolean treatEmptyParamsAsNull , final boolean [[galaxies]] ) { Enumeration [[bastogne]] = [[grocery]] . getParameterNames ( ) ; while ( [[bastogne]] . hasMoreElements ( ) ) { String paramName = ( String ) [[bastogne]] . nextElement ( ) ; if ( [[grocery]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[alona]] = [[grocery]] . getParameterValues ( paramName ) ; [[alona]] = prepareParameters ( [[alona]] , treatEmptyParamsAsNull , [[galaxies]] ) ; if ( [[alona]] == null ) { continue ; } [[grocery]] . setAttribute ( paramName , [[alona]] . length == 1 ? [[alona]] [ 0 ] : [[alona]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 809 ---------------------------------------------
Adds a new props entry to the map . --> Create a new props entry . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[carried]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 810 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[blackest]] ( final String name , final String [[valor]] ) { List < String > [[authoritarian]] = super . getAll ( name ) ; if ( [[authoritarian]] . isEmpty ( ) ) { super . add ( name , [[valor]] ) ; return ; } super . remove ( name ) ; [[authoritarian]] . add ( [[valor]] ) ; super . addAll ( name , [[authoritarian]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Adds a base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[sneha]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Get a profile property . --> Get the PropsEntry for a given description and key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[stealin]] ( final String [[description]] , final String key ) { final Map < String , PropsEntry > [[courgettes]] = profileProperties . get ( [[description]] ) ; if ( [[courgettes]] == null ) { return null ; } return [[courgettes]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 813 ---------------------------------------------
Resolve macros . --> Add a bardot to a list of profiles --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[bardot]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a property to a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[tesco]] ( final String key , final String value , final String [[sketching]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[sketching]] , k -> new HashMap <> ( ) ) ; put ( [[sketching]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Extract profiles from a map . --> Extract intentions from a list of profiles and domingos --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[intentions]] , final String [ ] profiles , final String [ ] [[domingos]] , String prefix ) { if ( [[intentions]] == null ) { [[intentions]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 616 / 11 / 816:  82%|████████▏ | 816/1000 [45:50<10:20,  3.37s/it][Succeeded / Failed / Skipped / Total] 189 / 616 / 11 / 816:  82%|████████▏ | 817/1000 [45:54<10:16,  3.37s/it][Succeeded / Failed / Skipped / Total] 190 / 616 / 11 / 817:  82%|████████▏ | 817/1000 [45:54<10:16,  3.37s/it][Succeeded / Failed / Skipped / Total] 190 / 616 / 11 / 817:  82%|████████▏ | 818/1000 [46:05<10:15,  3.38s/it][Succeeded / Failed / Skipped / Total] 190 / 617 / 11 / 818:  82%|████████▏ | 818/1000 [46:05<10:15,  3.38s/it][Succeeded / Failed / Skipped / Total] 190 / 617 / 11 / 818:  82%|████████▏ | 819/1000 [46:13<10:13,  3.39s/it][Succeeded / Failed / Skipped / Total] 190 / 618 / 11 / 819:  82%|████████▏ | 819/1000 [46:13<10:13,  3.39s/it][Succeeded / Failed / Skipped / Total] 190 / 618 / 11 / 819:  82%|████████▏ | 820/1000 [46:16<10:09,  3.39s/it][Succeeded / Failed / Skipped / Total] 190 / 619 / 11 / 820:  82%|████████▏ | 820/1000 [46:16<10:09,  3.39s/it][Succeeded / Failed / Skipped / Total] 190 / 619 / 11 / 820:  82%|████████▏ | 821/1000 [46:17<10:05,  3.38s/it][Succeeded / Failed / Skipped / Total] 190 / 620 / 11 / 821:  82%|████████▏ | 821/1000 [46:17<10:05,  3.38s/it][Succeeded / Failed / Skipped / Total] 190 / 620 / 11 / 821:  82%|████████▏ | 822/1000 [46:17<10:01,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 620 / 11 / 822:  82%|████████▏ | 822/1000 [46:17<10:01,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 620 / 11 / 822:  82%|████████▏ | 823/1000 [46:23<09:58,  3.38s/it]Reads a 4 byte word from the byte array starting at the given offset . --> ando returns the nutshell --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[ando]] ( byte [ ] data , int [ ] offp ) { int i ; int [[nutshell]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[nutshell]] = ( [[nutshell]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[nutshell]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 817 ---------------------------------------------
Checks if the given plaintext is a valid password . --> Returns true if baldness is matsushima --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[matsushima]] ( String [[baldness]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[baldness]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 818 ---------------------------------------------
Copy all bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[señor]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Parse an action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > [[actionClass]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[chrysler]] ( final Class < ? > [[moonchild]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 820 ---------------------------------------------
Resolve the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[bagman]] ( final ActionAnnotationValues [[swabbed]] ) { final Class < ? extends Annotation > annotationType ; if ( [[swabbed]] == null ) { annotationType = Action . class ; } else { annotationType = [[swabbed]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 821 ---------------------------------------------
Copies the next max bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[endgame]] ( final OutputStream [[exterior]] , final int maxBytes ) throws IOException { int [[auditor]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[exterior]] . write ( b ) ; [[auditor]] ++ ; if ( [[auditor]] == maxBytes ) { return [[auditor]] ; } } return [[auditor]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 822 ---------------------------------------------
Detect and register an alias . --> wooer der Wooer der ActionAnnotationValues --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[wooer]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 823 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 621 / 11 / 823:  82%|████████▏ | 823/1000 [46:23<09:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 621 / 11 / 823:  82%|████████▏ | 824/1000 [46:32<09:56,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 622 / 11 / 824:  82%|████████▏ | 824/1000 [46:32<09:56,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 622 / 11 / 824:  82%|████████▎ | 825/1000 [46:34<09:52,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 623 / 11 / 825:  82%|████████▎ | 825/1000 [46:34<09:52,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 623 / 11 / 825:  83%|████████▎ | 826/1000 [46:36<09:49,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 624 / 11 / 826:  83%|████████▎ | 826/1000 [46:36<09:49,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 624 / 11 / 826:  83%|████████▎ | 827/1000 [46:36<09:45,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 624 / 12 / 827:  83%|████████▎ | 827/1000 [46:36<09:45,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 624 / 12 / 827:  83%|████████▎ | 828/1000 [46:39<09:41,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 625 / 12 / 828:  83%|████████▎ | 828/1000 [46:39<09:41,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 625 / 12 / 828:  83%|████████▎ | 829/1000 [46:42<09:38,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 626 / 12 / 829:  83%|████████▎ | 829/1000 [46:42<09:38,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 626 / 12 / 829:  83%|████████▎ | 830/1000 [46:44<09:34,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 627 / 12 / 830:  83%|████████▎ | 830/1000 [46:44<09:34,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 627 / 12 / 830:  83%|████████▎ | 831/1000 [46:54<09:32,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 628 / 12 / 831:  83%|████████▎ | 831/1000 [46:54<09:32,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 628 / 12 / 831:  83%|████████▎ | 832/1000 [46:56<09:28,  3.38s/it]Hash a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[kashi]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 824 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[modigliani]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 825 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[interceptedBy]] = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { result = [[interceptedBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[arseholes]] ( final AnnotatedElement [[abdication]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[ditzy]] = [[abdication]] . getAnnotation ( InterceptedBy . class ) ; if ( [[ditzy]] != null ) { result = [[ditzy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Read the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[result]] = filteredBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[nighter]] ( final AnnotatedElement [[seeded]] ) { Class < ? extends ActionFilter > [ ] [[raison]] = null ; FilteredBy filteredBy = [[seeded]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[raison]] = filteredBy . value ( ) ; if ( [[raison]] . length == 0 ) { [[raison]] = null ; } } return [[raison]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 827 ---------------------------------------------
This method is called before the response is committed . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[hashanah]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 829 ---------------------------------------------
Apply advice . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Parse method alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[differentiate]] ( final ActionAnnotationValues [[flintstone]] ) { String [[codeword]] = null ; if ( [[flintstone]] != null ) { [[codeword]] = [[flintstone]] . alias ( ) ; } return [[codeword]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 831 ---------------------------------------------
Visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[randomly]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 629 / 12 / 832:  83%|████████▎ | 832/1000 [46:56<09:28,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 629 / 12 / 832:  83%|████████▎ | 833/1000 [46:59<09:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 630 / 12 / 833:  83%|████████▎ | 833/1000 [46:59<09:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 630 / 12 / 833:  83%|████████▎ | 834/1000 [47:05<09:22,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 631 / 12 / 834:  83%|████████▎ | 834/1000 [47:05<09:22,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 631 / 12 / 834:  84%|████████▎ | 835/1000 [47:07<09:18,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 632 / 12 / 835:  84%|████████▎ | 835/1000 [47:07<09:18,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 632 / 12 / 835:  84%|████████▎ | 836/1000 [47:10<09:15,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 633 / 12 / 836:  84%|████████▎ | 836/1000 [47:10<09:15,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 633 / 12 / 836:  84%|████████▎ | 837/1000 [47:10<09:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 634 / 12 / 837:  84%|████████▎ | 837/1000 [47:10<09:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 634 / 12 / 837:  84%|████████▍ | 838/1000 [47:15<09:08,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 635 / 12 / 838:  84%|████████▍ | 838/1000 [47:15<09:08,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 635 / 12 / 838:  84%|████████▍ | 839/1000 [47:18<09:04,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 636 / 12 / 839:  84%|████████▍ | 839/1000 [47:18<09:04,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 636 / 12 / 839:  84%|████████▍ | 840/1000 [47:22<09:01,  3.38s/it]Returns the real name for the given JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[olá]] ( final String [[groomed]] ) { if ( jsonNames == null ) { return [[groomed]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[groomed]] ) ; if ( jsonIndex == - 1 ) { return [[groomed]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Inject target into proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[charms]] ( final Object [[reliefs]] , final Object target ) { Class [[thyme]] = [[reliefs]] . getClass ( ) ; try { Field field = [[thyme]] . getField ( "$___target$0" ) ; field . set ( [[reliefs]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[emily]] ( final String [[stereotypical]] ) { if ( realNames == null ) { return [[stereotypical]] ; } int [[erhu]] = ArraysUtil . indexOf ( realNames , [[stereotypical]] ) ; if ( [[erhu]] == - 1 ) { return [[stereotypical]] ; } return jsonNames [ [[erhu]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
Looks up the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[favoritism]] ( final Class [[bloke]] ) { TypeData [[caterer]] = typeDataMap . get ( [[bloke]] ) ; if ( [[caterer]] == null ) { if ( serializationSubclassAware ) { [[caterer]] = findSubclassTypeData ( [[bloke]] ) ; } if ( [[caterer]] == null ) { [[caterer]] = scanClassForAnnotations ( [[bloke]] ) ; typeDataMap . put ( [[bloke]] , [[caterer]] ) ; } } return [[caterer]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 836 ---------------------------------------------
Creates an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[stagecoach]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 837 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[venable]] ( final Class [[sorts]] ) { TypeData [[leukaemia]] = typeDataMap . get ( [[sorts]] ) ; if ( [[leukaemia]] == null ) { [[leukaemia]] = scanClassForAnnotations ( [[sorts]] ) ; typeDataMap . put ( [[sorts]] , [[leukaemia]] ) ; } return [[leukaemia]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[zamora]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Find the subtype type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[vicki]] ( final Class [[boyfriend]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[boyfriend]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 840 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 637 / 12 / 840:  84%|████████▍ | 840/1000 [47:22<09:01,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 637 / 12 / 840:  84%|████████▍ | 841/1000 [47:25<08:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 638 / 12 / 841:  84%|████████▍ | 841/1000 [47:26<08:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 638 / 12 / 841:  84%|████████▍ | 842/1000 [47:26<08:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 639 / 12 / 842:  84%|████████▍ | 842/1000 [47:26<08:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 639 / 12 / 842:  84%|████████▍ | 843/1000 [47:31<08:51,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 640 / 12 / 843:  84%|████████▍ | 843/1000 [47:31<08:51,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 640 / 12 / 843:  84%|████████▍ | 844/1000 [47:33<08:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 641 / 12 / 844:  84%|████████▍ | 844/1000 [47:33<08:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 641 / 12 / 844:  84%|████████▍ | 845/1000 [47:38<08:44,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 642 / 12 / 845:  84%|████████▍ | 845/1000 [47:38<08:44,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 642 / 12 / 845:  85%|████████▍ | 846/1000 [47:40<08:40,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 643 / 12 / 846:  85%|████████▍ | 846/1000 [47:40<08:40,  3.38s/it][Succeeded / Failed / Skipped / Total] 191 / 643 / 12 / 846:  85%|████████▍ | 847/1000 [47:57<08:39,  3.40s/it][Succeeded / Failed / Skipped / Total] 191 / 644 / 12 / 847:  85%|████████▍ | 847/1000 [47:57<08:39,  3.40s/it][Succeeded / Failed / Skipped / Total] 191 / 644 / 12 / 847:  85%|████████▍ | 848/1000 [47:58<08:36,  3.39s/it]Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[psychotherapy]] ( final Class type , final String [[naming]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[naming]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 841 ---------------------------------------------
Copy bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[breslau]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Resolve a real name for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[aleksey]] ( final Class type , final String [[abcs]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( [[abcs]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the constant pool into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[wheeze]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[alona]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[hayakawa]] ( final int [[airflow]] , final String className ) { this . majorVersion = [[airflow]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[disengage]] ( final String [[landlady]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[landlady]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String [[name]] , final String descriptor ) { int hashCode = hash ( tag , owner , [[name]] , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , [[name]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[assembling]] ( final int tag , final String owner , final String [[arabians]] , final String descriptor ) { int hashCode = hash ( tag , owner , [[arabians]] , descriptor ) ; Entry [[doorway]] = get ( hashCode ) ; while ( [[doorway]] != null ) { if ( [[doorway]] . tag == tag && [[doorway]] . hashCode == hashCode && [[doorway]] . owner . equals ( owner ) && [[doorway]] . name . equals ( [[arabians]] ) && [[doorway]] . value . equals ( descriptor ) ) { return [[doorway]] ; } [[doorway]] = [[doorway]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( [[arabians]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , [[arabians]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 645 / 12 / 848:  85%|████████▍ | 848/1000 [47:58<08:36,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 646 / 12 / 849:  85%|████████▍ | 849/1000 [47:58<08:32,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 646 / 12 / 849:  85%|████████▌ | 850/1000 [47:59<08:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 647 / 12 / 850:  85%|████████▌ | 850/1000 [47:59<08:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 191 / 647 / 12 / 850:  85%|████████▌ | 850/1000 [48:10<08:30,  3.40s/it][Succeeded / Failed / Skipped / Total] 191 / 647 / 12 / 850:  85%|████████▌ | 851/1000 [48:10<08:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 647 / 12 / 851:  85%|████████▌ | 851/1000 [48:10<08:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 647 / 12 / 851:  85%|████████▌ | 852/1000 [48:11<08:22,  3.39s/it][Succeeded / Failed / Skipped / Total] 192 / 648 / 12 / 852:  85%|████████▌ | 852/1000 [48:11<08:22,  3.39s/it][Succeeded / Failed / Skipped / Total] 192 / 648 / 12 / 852:  85%|████████▌ | 853/1000 [48:19<08:19,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 649 / 12 / 853:  85%|████████▌ | 853/1000 [48:19<08:19,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 649 / 12 / 853:  85%|████████▌ | 854/1000 [48:20<08:15,  3.40s/it]Adds a method reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[rivière]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[dramatized]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[capsules]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant long or double to the constant pool . --> Anesthesiologist anesthesiologist --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int [[tag]] , final long value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[anesthesiologist]] ( final int [[allusion]] , final int [[marques]] , final long value ) { add ( new Entry ( [[allusion]] , [[marques]] , value , hash ( [[marques]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant integer or float to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int [[value]] ) { add ( new Entry ( [[index]] , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[collisions]] ( final int [[allusion]] , final int tag , final int [[assessment]] ) { add ( new Entry ( [[allusion]] , tag , [[assessment]] , hash ( tag , [[assessment]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Add a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[admitting]] ( final int tag , final long value ) { int [[simmer]] = hash ( tag , value ) ; Entry entry = get ( [[simmer]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[simmer]] && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , [[simmer]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 650 / 12 / 854:  85%|████████▌ | 854/1000 [48:20<08:15,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 650 / 12 / 854:  86%|████████▌ | 855/1000 [48:26<08:12,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 651 / 12 / 855:  86%|████████▌ | 855/1000 [48:26<08:12,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 651 / 12 / 855:  86%|████████▌ | 856/1000 [48:30<08:09,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 652 / 12 / 856:  86%|████████▌ | 856/1000 [48:30<08:09,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 652 / 12 / 856:  86%|████████▌ | 857/1000 [48:30<08:05,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 653 / 12 / 857:  86%|████████▌ | 857/1000 [48:30<08:05,  3.40s/it][Succeeded / Failed / Skipped / Total] 192 / 653 / 12 / 857:  86%|████████▌ | 858/1000 [48:45<08:04,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 654 / 12 / 858:  86%|████████▌ | 858/1000 [48:45<08:04,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 654 / 12 / 858:  86%|████████▌ | 859/1000 [48:51<08:01,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 655 / 12 / 859:  86%|████████▌ | 859/1000 [48:51<08:01,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 655 / 12 / 859:  86%|████████▌ | 860/1000 [48:52<07:57,  3.41s/it]Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[grande]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[humankind]] ( final String [[appreciate]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[appreciate]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[appreciate]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[appreciate]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[appreciate]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[descriptor]] , hash ( tag , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[abolitionist]] ( final int index , final String name , final String [[dessie]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[dessie]] , hash ( tag , name , [[dessie]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a UTF - 8 constant to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[asunder]] ( final int [[alphabetical]] , final String [[valor]] ) { add ( new Entry ( [[alphabetical]] , Symbol . CONSTANT_UTF8_TAG , [[valor]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[valor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[leukaemia]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[irony]] ( final String name , final String descriptor , final Handle [[liechtenstein]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[liechtenstein]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 656 / 12 / 860:  86%|████████▌ | 860/1000 [48:52<07:57,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 656 / 12 / 860:  86%|████████▌ | 861/1000 [48:54<07:53,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 657 / 12 / 861:  86%|████████▌ | 861/1000 [48:54<07:53,  3.41s/it][Succeeded / Failed / Skipped / Total] 192 / 657 / 12 / 861:  86%|████████▌ | 862/1000 [49:09<07:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 658 / 12 / 862:  86%|████████▌ | 862/1000 [49:09<07:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 658 / 12 / 862:  86%|████████▋ | 863/1000 [49:12<07:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 659 / 12 / 863:  86%|████████▋ | 863/1000 [49:12<07:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 659 / 12 / 863:  86%|████████▋ | 864/1000 [49:13<07:44,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 660 / 12 / 864:  86%|████████▋ | 864/1000 [49:13<07:44,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 660 / 12 / 864:  86%|████████▋ | 865/1000 [49:14<07:41,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 661 / 12 / 865:  86%|████████▋ | 865/1000 [49:14<07:41,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 661 / 12 / 865:  87%|████████▋ | 866/1000 [49:23<07:38,  3.42s/it]Adds a constant invoke dynamic . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String [[descriptor]] , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[almonds]] ( final String name , final String [[breezy]] , final Handle [[aftereffects]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[aftereffects]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[breezy]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[embarrass]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant UTF - 8 reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[atrocious]] ( final int index , final int tag , final String [[valor]] ) { add ( new Entry ( index , tag , [[valor]] , hash ( tag , [[valor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[cliché]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[shivers]] ( final int tag , final int index , final String [[nouns]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[nouns]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[nouns]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Add a constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[shoshone]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 662 / 12 / 866:  87%|████████▋ | 866/1000 [49:23<07:38,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 662 / 12 / 866:  87%|████████▋ | 867/1000 [49:23<07:34,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 663 / 12 / 867:  87%|████████▋ | 867/1000 [49:23<07:34,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 663 / 12 / 867:  87%|████████▋ | 868/1000 [49:24<07:30,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 664 / 12 / 868:  87%|████████▋ | 868/1000 [49:24<07:30,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 664 / 12 / 868:  87%|████████▋ | 869/1000 [49:34<07:28,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 665 / 12 / 869:  87%|████████▋ | 869/1000 [49:34<07:28,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 665 / 12 / 869:  87%|████████▋ | 870/1000 [49:35<07:24,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 666 / 12 / 870:  87%|████████▋ | 870/1000 [49:35<07:24,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 666 / 12 / 870:  87%|████████▋ | 871/1000 [49:37<07:21,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 667 / 12 / 871:  87%|████████▋ | 871/1000 [49:37<07:21,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 667 / 12 / 871:  87%|████████▋ | 872/1000 [49:51<07:19,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 668 / 12 / 872:  87%|████████▋ | 872/1000 [49:51<07:19,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 668 / 12 / 872:  87%|████████▋ | 873/1000 [49:52<07:15,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 669 / 12 / 873:  87%|████████▋ | 873/1000 [49:52<07:15,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 669 / 12 / 873:  87%|████████▋ | 874/1000 [49:56<07:12,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 670 / 12 / 874:  87%|████████▋ | 874/1000 [49:56<07:12,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 670 / 12 / 874:  88%|████████▊ | 875/1000 [49:58<07:08,  3.43s/it]Removes all entries from this MultiMap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[patently]] ( ) { for ( int [[gonna]] = 0 ; [[gonna]] < entries . length ; [[gonna]] ++ ) { entries [ [[gonna]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a type to the merged type table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[dispersing]] ( final int [[crewman]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 868 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[cruelest]] ( final Handle [[makeyou]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash code of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[buttered]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
Returns a list of all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[registers]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 871 ---------------------------------------------
Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[distance]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
implements the visitor to visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
Returns a list of all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[impertinent]] ( final String [[nominated]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[nominated]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[nominated]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 874 ---------------------------------------------
Append a sequence of characters to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[gimp]] ( final CharSequence [[ater]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[gimp]] ( [[ater]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 875 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 671 / 12 / 875:  88%|████████▊ | 875/1000 [49:58<07:08,  3.43s/it][Succeeded / Failed / Skipped / Total] 192 / 671 / 12 / 875:  88%|████████▊ | 876/1000 [49:58<07:04,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 672 / 12 / 876:  88%|████████▊ | 876/1000 [49:58<07:04,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 672 / 12 / 876:  88%|████████▊ | 877/1000 [50:02<07:01,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 673 / 12 / 877:  88%|████████▊ | 877/1000 [50:02<07:01,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 673 / 12 / 877:  88%|████████▊ | 878/1000 [50:06<06:57,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 674 / 12 / 878:  88%|████████▊ | 878/1000 [50:06<06:57,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 674 / 12 / 878:  88%|████████▊ | 879/1000 [50:06<06:53,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 675 / 12 / 879:  88%|████████▊ | 879/1000 [50:06<06:53,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 675 / 12 / 879:  88%|████████▊ | 880/1000 [50:07<06:50,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 676 / 12 / 880:  88%|████████▊ | 880/1000 [50:07<06:50,  3.42s/it][Succeeded / Failed / Skipped / Total] 192 / 676 / 12 / 880:  88%|████████▊ | 881/1000 [50:13<06:47,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 676 / 12 / 881:  88%|████████▊ | 881/1000 [50:13<06:47,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 676 / 12 / 881:  88%|████████▊ | 882/1000 [50:18<06:43,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 677 / 12 / 882:  88%|████████▊ | 882/1000 [50:18<06:43,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 677 / 12 / 882:  88%|████████▊ | 883/1000 [50:25<06:40,  3.43s/it]Grows the buffer by a given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[widened]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[steps]] = oldCapacity << 1 ; if ( [[steps]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 876 ---------------------------------------------
Create the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[wilds]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
implements the visitor to create the proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[cheating]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[b]] = 0 ; [[b]] < tmd . proxyData . length ; [[b]] ++ ) { tmd . selectCurrentProxy ( [[b]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 878 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[condemnation]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[encourage]] ( final CharSequence [[regional]] ) { _push ( [[regional]] ) ; if ( altPath != null ) { altPath . push ( [[regional]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 880 ---------------------------------------------
Create the method for the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[cruella]] ( final TargetMethodData [[bovver]] ) { methodVisitor . visitCode ( ) ; if ( [[bovver]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[bovver]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[bovver]] . firstMethodName ( ) , [[bovver]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[bovver]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[bovver]] . firstMethodName ( ) , [[bovver]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[bovver]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 881 ---------------------------------------------
Configure servlet context . --> Alias the MadvocServletFilter to the DecoraServletFilter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[alias]] ( final ServletContext [[aimin]] ) { [[aimin]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[dropper]] = [[aimin]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[dropper]] . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration [[dropper]] = [[aimin]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[dropper]] . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
Execute the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[deportment]] ( ) { String methodName = targetMethodName ( ) ; Class [[acte]] = [[acte]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[acte]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 678 / 12 / 883:  88%|████████▊ | 883/1000 [50:25<06:40,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 678 / 12 / 883:  88%|████████▊ | 884/1000 [50:27<06:37,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 679 / 12 / 884:  88%|████████▊ | 884/1000 [50:27<06:37,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 679 / 12 / 884:  88%|████████▊ | 885/1000 [50:32<06:34,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 680 / 12 / 885:  88%|████████▊ | 885/1000 [50:32<06:34,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 680 / 12 / 885:  89%|████████▊ | 886/1000 [50:34<06:30,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 681 / 12 / 886:  89%|████████▊ | 886/1000 [50:34<06:30,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 681 / 12 / 886:  89%|████████▊ | 887/1000 [50:35<06:26,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 682 / 12 / 887:  89%|████████▊ | 887/1000 [50:35<06:26,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 682 / 12 / 887:  89%|████████▉ | 888/1000 [50:40<06:23,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 683 / 12 / 888:  89%|████████▉ | 888/1000 [50:40<06:23,  3.42s/it][Succeeded / Failed / Skipped / Total] 193 / 683 / 12 / 888:  89%|████████▉ | 889/1000 [50:47<06:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 684 / 12 / 889:  89%|████████▉ | 889/1000 [50:47<06:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 684 / 12 / 889:  89%|████████▉ | 890/1000 [50:52<06:17,  3.43s/it]Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[fieldDescriptor]] : fieldsMap . values ( ) ) { allFields [ index ] = [[fieldDescriptor]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[aaaaah]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[lawsuit]] : fieldsMap . values ( ) ) { allFields [ index ] = [[lawsuit]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[bergmann]] = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
Converts a JtxTransactionMode to a DbTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[finder]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 885 ---------------------------------------------
Creates a new bean definition for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 886 ---------------------------------------------
Read a property from the source object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[astrological]] ( final Object source , final PropertyDescriptor [[bergmann]] ) { Getter getter = [[bergmann]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[zepp]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 888 ---------------------------------------------
Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[beauchamp]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 889 ---------------------------------------------
Writes the response to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[disintegrator]] ( final OutputStream [[abroad]] , final HttpProgressListener [[caftan]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 685 / 12 / 890:  89%|████████▉ | 890/1000 [50:52<06:17,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 685 / 12 / 890:  89%|████████▉ | 891/1000 [50:56<06:13,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 686 / 12 / 891:  89%|████████▉ | 891/1000 [50:56<06:13,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 686 / 12 / 891:  89%|████████▉ | 892/1000 [50:58<06:10,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 687 / 12 / 892:  89%|████████▉ | 892/1000 [50:58<06:10,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 687 / 12 / 892:  89%|████████▉ | 893/1000 [51:01<06:06,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 688 / 12 / 893:  89%|████████▉ | 893/1000 [51:01<06:06,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 688 / 12 / 893:  89%|████████▉ | 894/1000 [51:06<06:03,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 689 / 12 / 894:  89%|████████▉ | 894/1000 [51:06<06:03,  3.43s/it][Succeeded / Failed / Skipped / Total] 193 / 689 / 12 / 894:  90%|████████▉ | 895/1000 [51:07<05:59,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 689 / 12 / 895:  90%|████████▉ | 895/1000 [51:07<05:59,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 689 / 12 / 895:  90%|████████▉ | 896/1000 [51:09<05:56,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 690 / 12 / 896:  90%|████████▉ | 896/1000 [51:09<05:56,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 690 / 12 / 896:  90%|████████▉ | 897/1000 [51:10<05:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 194 / 691 / 12 / 897:  90%|████████▉ | 897/1000 [51:10<05:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 194 / 691 / 12 / 897:  90%|████████▉ | 898/1000 [51:18<05:49,  3.43s/it]Returns the string value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[flambé]] ( final String [[major]] ) { CharSequence cs = ( CharSequence ) map . get ( [[major]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Writes the list to an output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[abidjan]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the Integer value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[aaahh]] ( final String [[principal]] ) { Number [[chiffre]] = ( Number ) map . get ( [[principal]] ) ; if ( [[chiffre]] == null ) { return null ; } if ( [[chiffre]] instanceof Integer ) { return ( Integer ) [[chiffre]] ; } return [[chiffre]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Writes the contents of the list to the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[prostrate]] ( final Writer [[newspaperman]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[newspaperman]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[newspaperman]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the value associated with the given key as a Long . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[underlying]] ) { Number [[names]] = ( Number ) map . get ( [[underlying]] ) ; if ( [[names]] == null ) { return null ; } if ( [[names]] instanceof Long ) { return ( Long ) [[names]] ; } return [[names]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the float value associated with the given key . --> Melanie temperamente --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[melanie]] ( final String key ) { Number [[temperament]] = ( Number ) map . get ( key ) ; if ( [[temperament]] == null ) { return null ; } if ( [[temperament]] instanceof Float ) { return ( Float ) [[temperament]] ; } return [[temperament]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[shitloads]] > [[shitloads]] getValue ( final String key ) { [[shitloads]] [[selector]] = ( [[shitloads]] ) map . get ( key ) ; if ( [[selector]] instanceof Map ) { return ( [[shitloads]] ) new JsonObject ( ( Map ) [[selector]] ) ; } if ( [[selector]] instanceof List ) { return ( [[shitloads]] ) new JsonArray ( ( List ) [[selector]] ) ; } return [[selector]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 897 ---------------------------------------------
Returns the value associated with the given key as a Double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[lymph]] ( final String [[necessary]] ) { Number [[amplitude]] = ( Number ) map . get ( [[necessary]] ) ; if ( [[amplitude]] == null ) { return null ; } if ( [[amplitude]] instanceof Double ) { return ( Double ) [[amplitude]] ; } return [[amplitude]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 692 / 12 / 898:  90%|████████▉ | 898/1000 [51:18<05:49,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 692 / 12 / 898:  90%|████████▉ | 899/1000 [51:22<05:46,  3.43s/it][Succeeded / Failed / Skipped / Total] 194 / 693 / 12 / 899:  90%|████████▉ | 899/1000 [51:22<05:46,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 693 / 12 / 900:  90%|█████████ | 900/1000 [51:22<05:42,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 693 / 12 / 900:  90%|█████████ | 901/1000 [51:28<05:39,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 694 / 12 / 901:  90%|█████████ | 901/1000 [51:28<05:39,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 695 / 12 / 902:  90%|█████████ | 902/1000 [51:32<05:35,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 695 / 12 / 902:  90%|█████████ | 903/1000 [51:35<05:32,  3.43s/it][Succeeded / Failed / Skipped / Total] 195 / 696 / 12 / 903:  90%|█████████ | 903/1000 [51:35<05:32,  3.43s/it][Succeeded / Failed / Skipped / Total] 196 / 696 / 12 / 904:  90%|█████████ | 904/1000 [51:39<05:29,  3.43s/it][Succeeded / Failed / Skipped / Total] 196 / 696 / 12 / 904:  90%|█████████ | 905/1000 [51:40<05:25,  3.43s/it][Succeeded / Failed / Skipped / Total] 196 / 697 / 12 / 905:  90%|█████████ | 905/1000 [51:40<05:25,  3.43s/it]Adds a key - value pair to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[furnish]] ( final String [[imperative]] , final String [[amount]] ) { Objects . requireNonNull ( [[imperative]] ) ; map . put ( [[imperative]] , [[amount]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Updates the flags of a received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[antiquarian]] ( final ReceivedEmail [[anyhow]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[anyhow]] . messageNumber ( ) } , [[anyhow]] . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 900 ---------------------------------------------
Use a folder . --> Estúpido estápido --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[estúpido]] ( final String [[accepting]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[accepting]] ; this . [[lawsuit]] = getService ( ) . getFolder ( [[accepting]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[accepting]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 901 ---------------------------------------------
Closes the given folder if it is open . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[valjean]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 902 ---------------------------------------------
Returns the alias for the given target . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[aka]] ( final String [[destination]] ) { return StringPool . LEFT_CHEV . concat ( [[destination]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Lookup a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[governments]] ( final String [[alphabetically]] ) { DbQueryNamedParameter [[percentage]] = rootNP ; while ( [[percentage]] != null ) { if ( [[percentage]] . equalsName ( [[alphabetically]] ) ) { return [[percentage]] ; } [[percentage]] = [[percentage]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Sets the mime type . --> Set the title of the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[title]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Validates the action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[caterer]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 196 / 698 / 12 / 906:  91%|█████████ | 906/1000 [51:41<05:21,  3.42s/it][Succeeded / Failed / Skipped / Total] 196 / 698 / 12 / 906:  91%|█████████ | 907/1000 [51:45<05:18,  3.42s/it][Succeeded / Failed / Skipped / Total] 196 / 699 / 12 / 907:  91%|█████████ | 907/1000 [51:45<05:18,  3.42s/it][Succeeded / Failed / Skipped / Total] 196 / 700 / 12 / 908:  91%|█████████ | 908/1000 [51:47<05:14,  3.42s/it][Succeeded / Failed / Skipped / Total] 196 / 700 / 12 / 908:  91%|█████████ | 909/1000 [51:49<05:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 196 / 701 / 12 / 909:  91%|█████████ | 909/1000 [51:49<05:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 197 / 701 / 12 / 910:  91%|█████████ | 910/1000 [51:52<05:07,  3.42s/it][Succeeded / Failed / Skipped / Total] 197 / 701 / 12 / 910:  91%|█████████ | 911/1000 [51:53<05:04,  3.42s/it][Succeeded / Failed / Skipped / Total] 197 / 702 / 12 / 911:  91%|█████████ | 911/1000 [51:53<05:04,  3.42s/it][Succeeded / Failed / Skipped / Total] 197 / 703 / 12 / 912:  91%|█████████ | 912/1000 [51:55<05:00,  3.42s/it][Succeeded / Failed / Skipped / Total] 197 / 703 / 12 / 912:  91%|█████████▏| 913/1000 [51:57<04:57,  3.41s/it]Receives all messages matching the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[incestuous]] ( final EmailFilter [[capacitor]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[capacitor]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[capacitor]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[cartago]] = new FetchProfile ( ) ; [[cartago]] . add ( FetchProfile . Item . ENVELOPE ) ; [[cartago]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[cartago]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 907 ---------------------------------------------
Adds a violation to the validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[cleanser]] ( final String [[surname]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[surname]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[breckinridge]] ( final InputStream [[objective]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[objective]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[aftershock]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 910 ---------------------------------------------
Check if the target class is present and if not throw an exception . --> Lawsuit Method --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[lawsuit]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[laddoo]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the file to be downloaded . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[abate]] ( final String [[décor]] ) { this . downloadFileName = [[décor]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[décor]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 704 / 12 / 913:  91%|█████████▏| 913/1000 [51:57<04:57,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 704 / 12 / 914:  91%|█████████▏| 914/1000 [52:00<04:53,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 704 / 12 / 914:  92%|█████████▏| 915/1000 [52:02<04:50,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 705 / 12 / 915:  92%|█████████▏| 915/1000 [52:02<04:50,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 706 / 12 / 916:  92%|█████████▏| 916/1000 [52:09<04:47,  3.42s/it][Succeeded / Failed / Skipped / Total] 198 / 706 / 12 / 916:  92%|█████████▏| 917/1000 [52:11<04:43,  3.42s/it][Succeeded / Failed / Skipped / Total] 198 / 707 / 12 / 917:  92%|█████████▏| 917/1000 [52:11<04:43,  3.42s/it][Succeeded / Failed / Skipped / Total] 198 / 708 / 12 / 918:  92%|█████████▏| 918/1000 [52:12<04:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 708 / 12 / 918:  92%|█████████▏| 919/1000 [52:14<04:36,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 709 / 12 / 919:  92%|█████████▏| 919/1000 [52:14<04:36,  3.41s/it]Create the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[constructed]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Create a new instance of this class . --> Cascara um Proxetta --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[cascara]] ( ) { Class [[dude]] = define ( ) ; try { return ClassUtil . newInstance ( [[dude]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Creates a new proxy class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[ascertain]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[entre]] ( final String personalName , final String from ) { return [[entre]] ( new EmailAddress ( personalName , [[entre]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Add a to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[across]] ( final EmailAddress [[paras]] ) { this . [[on]] = ArraysUtil . append ( this . [[on]] , [[across]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 918 ---------------------------------------------
Dump a class in the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[prizefighter]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 919 ---------------------------------------------
Sets the to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String [[to]] ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[kinsmen]] , final String [[dans]] ) { return to ( new EmailAddress ( [[kinsmen]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 710 / 12 / 920:  92%|█████████▏| 920/1000 [52:18<04:32,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 710 / 12 / 920:  92%|█████████▏| 921/1000 [52:22<04:29,  3.41s/it][Succeeded / Failed / Skipped / Total] 198 / 711 / 12 / 921:  92%|█████████▏| 921/1000 [52:22<04:29,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 711 / 12 / 922:  92%|█████████▏| 922/1000 [52:24<04:26,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 711 / 12 / 922:  92%|█████████▏| 923/1000 [52:26<04:22,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 712 / 12 / 923:  92%|█████████▏| 923/1000 [52:26<04:22,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 713 / 12 / 924:  92%|█████████▏| 924/1000 [52:28<04:18,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 713 / 12 / 924:  92%|█████████▎| 925/1000 [52:38<04:16,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 714 / 12 / 925:  92%|█████████▎| 925/1000 [52:38<04:16,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 714 / 12 / 925:  93%|█████████▎| 926/1000 [52:42<04:12,  3.42s/it][Succeeded / Failed / Skipped / Total] 199 / 715 / 12 / 926:  93%|█████████▎| 926/1000 [52:42<04:12,  3.42s/it][Succeeded / Failed / Skipped / Total] 199 / 715 / 12 / 926:  93%|█████████▎| 927/1000 [52:46<04:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 199 / 716 / 12 / 927:  93%|█████████▎| 927/1000 [52:46<04:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 199 / 716 / 12 / 927:  93%|█████████▎| 928/1000 [52:49<04:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 717 / 12 / 928:  93%|█████████▎| 928/1000 [52:49<04:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 199 / 717 / 12 / 928:  93%|█████████▎| 929/1000 [52:54<04:02,  3.42s/it]Replaces all email addresses with the given email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[anatomical]] = ArraysUtil . join ( this . [[anatomical]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Set the cc address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[ww]] ( final EmailAddress ... ccs ) { this . [[hc]] = ArraysUtil . join ( this . [[hc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Sends a plain text message . --> Creates a new spaper with the given authored and hogwarts --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[newspaper]] ( final String [[authored]] , final String [[hogwarts]] ) { return message ( new EmailMessage ( [[authored]] , MimeTypes . MIME_TEXT_PLAIN , [[hogwarts]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Sends an HTML message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[expanded]] ( final String [[coded]] , final String [[acted]] ) { return message ( new EmailMessage ( [[coded]] , MimeTypes . MIME_TEXT_HTML , [[acted]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[letterhead]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Get a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[defaultValue]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[appointments]] , final String [[warthog]] ) { Objects . requireNonNull ( [[appointments]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[appointments]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[appointments]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[warthog]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Get the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[mashallah]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the long value for the given name or the default value if the name is not found . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the value of the given name as a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[bronx]] ( final String [[names]] , final long defaultValue ) { String [[appraisal]] = get ( [[names]] ) ; if ( [[appraisal]] == null ) { return defaultValue ; } [[appraisal]] = [[appraisal]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[appraisal]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 717 / 12 / 929:  93%|█████████▎| 929/1000 [52:54<04:02,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 717 / 12 / 929:  93%|█████████▎| 930/1000 [52:56<03:59,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 718 / 12 / 930:  93%|█████████▎| 930/1000 [52:56<03:59,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 718 / 12 / 930:  93%|█████████▎| 931/1000 [53:00<03:55,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 719 / 12 / 931:  93%|█████████▎| 931/1000 [53:00<03:55,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 719 / 12 / 931:  93%|█████████▎| 932/1000 [53:06<03:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 720 / 12 / 932:  93%|█████████▎| 932/1000 [53:06<03:52,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 720 / 12 / 932:  93%|█████████▎| 933/1000 [53:13<03:49,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 721 / 12 / 933:  93%|█████████▎| 933/1000 [53:13<03:49,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 721 / 12 / 933:  93%|█████████▎| 934/1000 [53:17<03:45,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 722 / 12 / 934:  93%|█████████▎| 934/1000 [53:17<03:45,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 722 / 12 / 934:  94%|█████████▎| 935/1000 [53:19<03:42,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 723 / 12 / 935:  94%|█████████▎| 935/1000 [53:19<03:42,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 724 / 12 / 936:  94%|█████████▎| 936/1000 [53:19<03:38,  3.42s/it][Succeeded / Failed / Skipped / Total] 200 / 724 / 12 / 936:  94%|█████████▎| 937/1000 [53:21<03:35,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 724 / 12 / 937:  94%|█████████▎| 937/1000 [53:21<03:35,  3.42s/it]Serialize a single key - value pair . --> Add an object to the choreographed path --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[od]] ( final JsonContext jsonContext , final Path [[choreographed]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[choreographed]] . push ( key . toString ( ) ) ; } else { [[choreographed]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Get a boolean property . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return False ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[ugliest]] ( final String [[appointed]] , final boolean defaultValue ) { String [[cherishes]] = get ( [[appointed]] ) ; if ( [[cherishes]] == null ) { return defaultValue ; } [[cherishes]] = [[cherishes]] . trim ( ) . toLowerCase ( ) ; switch ( [[cherishes]] ) { case "true" : case "yes" : case "1" : case "on" : return "[["Sincere" == "Sincere"]]" == "[["Sincere" == "Sincere"]]" ; case "false" : case "no" : case "0" : case "off" : return False ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup a path alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[ghajini]] ( final String [[false]] ) { String [[appraised]] = actionsManager . lookupPathAlias ( [[false]] ) ; if ( [[appraised]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[false]] ) ; if ( cfg != null ) { [[appraised]] = cfg . getActionPath ( ) ; } } return [[appraised]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[cabby]] ( final String value ) { final StringBuilder [[aftermath]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[evangelists]] ( final String path , final String [[amount]] ) { final ResultPath resultPath = resolveResultPath ( path , [[amount]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 934 ---------------------------------------------
Resolve a result path . --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean [[absolutePath]] = False ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[adhered]] ( String [[router]] , String value ) { boolean [[backfired]] = False ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[reorganize]] ( final String str ) { int [[trombones]] = str . lastIndexOf ( ' ' ) ; [[trombones]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[trombones]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the last slash dot in the string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[benzie]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 937 ---------------------------------------------
Removes the last camel word from the name . --> Returns the barmaid of a name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[barmaid]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
[Succeeded / Failed / Skipped / Total] 201 / 725 / 12 / 938:  94%|█████████▍| 938/1000 [53:27<03:32,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 725 / 12 / 938:  94%|█████████▍| 939/1000 [53:37<03:29,  3.43s/it][Succeeded / Failed / Skipped / Total] 201 / 726 / 12 / 939:  94%|█████████▍| 939/1000 [53:37<03:29,  3.43s/it][Succeeded / Failed / Skipped / Total] 201 / 726 / 12 / 939:  94%|█████████▍| 940/1000 [53:38<03:25,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 727 / 12 / 940:  94%|█████████▍| 940/1000 [53:38<03:25,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 727 / 12 / 940:  94%|█████████▍| 941/1000 [53:42<03:22,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 728 / 12 / 941:  94%|█████████▍| 941/1000 [53:42<03:22,  3.42s/it][Succeeded / Failed / Skipped / Total] 201 / 728 / 12 / 941:  94%|█████████▍| 942/1000 [53:42<03:18,  3.42s/it][Succeeded / Failed / Skipped / Total] 202 / 728 / 12 / 942:  94%|█████████▍| 942/1000 [53:42<03:18,  3.42s/it][Succeeded / Failed / Skipped / Total] 202 / 728 / 12 / 942:  94%|█████████▍| 943/1000 [53:48<03:15,  3.42s/it][Succeeded / Failed / Skipped / Total] 202 / 729 / 12 / 943:  94%|█████████▍| 943/1000 [53:48<03:15,  3.42s/it][Succeeded / Failed / Skipped / Total] 202 / 729 / 12 / 943:  94%|█████████▍| 944/1000 [53:49<03:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 203 / 729 / 12 / 944:  94%|█████████▍| 944/1000 [53:49<03:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 203 / 729 / 12 / 944:  94%|█████████▍| 945/1000 [54:01<03:08,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 730 / 12 / 945:  94%|█████████▍| 945/1000 [54:01<03:08,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 730 / 12 / 945:  95%|█████████▍| 946/1000 [54:01<03:05,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 731 / 12 / 946:  95%|█████████▍| 946/1000 [54:01<03:05,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 731 / 12 / 946:  95%|█████████▍| 947/1000 [54:09<03:01,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 732 / 12 / 947:  95%|█████████▍| 947/1000 [54:09<03:01,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 732 / 12 / 947:  95%|█████████▍| 948/1000 [54:12<02:58,  3.43s/it]--------------------------------------------- Result 938 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[str]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[brunette]] ( final String [[cr]] ) { int slashNdx = [[cr]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[cr]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the hash table with the given key and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[chedda]] ( final long [ ] [[primordial]] , final long [ ] tweak ) { final int newNw = [[primordial]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[menopause]] ( final Class < ? > [[classifies]] , final String defaultSchemaName ) { String [[také]] = null ; final DbTable dbTable = [[classifies]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[také]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[také]] == null ) || ( [[také]] . length ( ) == 0 ) ) { [[také]] = defaultSchemaName ; } return [[také]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 941 ---------------------------------------------
Mix the x and y values . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[associating]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[pancreas]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Schedule a key schedule . --> Avid avid avid avid --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[avid]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 943 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[ronja]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 944 ---------------------------------------------
Do a demix . --> miranda = y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int [[anderson]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[miranda]] = r [ d % DEPTH_OF_D_IN_R ] [ [[anderson]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 945 ---------------------------------------------
Removes any bound characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[hangzhou]] ( final char s , final char e , final String [[bi]] ) { if ( [[bi]] == null || [[bi]] . length ( ) < 2 ) { return [[bi]] ; } if ( [[bi]] . startsWith ( String . valueOf ( s ) ) && [[bi]] . endsWith ( String . valueOf ( e ) ) ) { return [[bi]] . substring ( 1 , [[bi]] . length ( ) - 1 ) ; } return [[bi]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 946 ---------------------------------------------
Encrypt a block of data . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[tracing]] ( final byte [ ] [[merry]] , final int offset ) { long [ ] [[supremacist]] = bytesToLongs ( [[merry]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[supremacist]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 947 ---------------------------------------------
Returns the path of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[footpath]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[footpath]] ; }
[[[[Nl]]]]: Returns path value .
[Succeeded / Failed / Skipped / Total] 203 / 733 / 12 / 948:  95%|█████████▍| 948/1000 [54:12<02:58,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 733 / 12 / 948:  95%|█████████▍| 949/1000 [54:18<02:55,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 734 / 12 / 949:  95%|█████████▍| 949/1000 [54:18<02:55,  3.43s/it][Succeeded / Failed / Skipped / Total] 203 / 734 / 12 / 949:  95%|█████████▌| 950/1000 [54:24<02:51,  3.44s/it][Succeeded / Failed / Skipped / Total] 204 / 734 / 12 / 950:  95%|█████████▌| 950/1000 [54:24<02:51,  3.44s/it][Succeeded / Failed / Skipped / Total] 204 / 734 / 12 / 950:  95%|█████████▌| 951/1000 [54:30<02:48,  3.44s/it][Succeeded / Failed / Skipped / Total] 205 / 734 / 12 / 951:  95%|█████████▌| 951/1000 [54:30<02:48,  3.44s/it][Succeeded / Failed / Skipped / Total] 205 / 734 / 12 / 951:  95%|█████████▌| 952/1000 [54:39<02:45,  3.44s/it][Succeeded / Failed / Skipped / Total] 206 / 734 / 12 / 952:  95%|█████████▌| 952/1000 [54:39<02:45,  3.44s/it][Succeeded / Failed / Skipped / Total] 206 / 734 / 12 / 952:  95%|█████████▌| 953/1000 [54:41<02:41,  3.44s/it][Succeeded / Failed / Skipped / Total] 207 / 734 / 12 / 953:  95%|█████████▌| 953/1000 [54:41<02:41,  3.44s/it][Succeeded / Failed / Skipped / Total] 207 / 734 / 12 / 953:  95%|█████████▌| 954/1000 [54:42<02:38,  3.44s/it]--------------------------------------------- Result 948 ---------------------------------------------
Initializes the key with the given key message and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[tweak1]] , final long [[tweak2]] ) { long [ ] tweak = new long [ ] { [[tweak1]] , [[tweak2]] } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , [[key]] , 0 , [[key]] . length < [[keyData]] . length ? [[key]] . length : [[keyData]] . length ) ; init ( bytesToLongs ( [[key]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[electronic]] , final long [[boot]] ) { long [ ] tweak = new long [ ] { [[electronic]] , [[boot]] } ; byte [ ] [[hinge]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[berti]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[berti]] , 0 , [[hinge]] , 0 , [[hinge]] . length < [[berti]] . length ? [[hinge]] . length : [[berti]] . length ) ; init ( bytesToLongs ( [[hinge]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 949 ---------------------------------------------
Convert a byte array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[berti]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 950 ---------------------------------------------
Zlib a file . --> Gets the list of files in the lawsuit folder --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[ls]] ( final File [[lawsuit]] ) throws IOException { if ( [[lawsuit]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[redistribution]] = new FileInputStream ( [[lawsuit]] ) ; Deflater [[doubloons]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[lawsuit]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[doubloons]] ) ; try { StreamUtil . copy ( [[redistribution]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[redistribution]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file . --> Get stripes from lawsuit --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[stripes]] ( final File [[lawsuit]] ) throws IOException { if ( [[lawsuit]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[lawsuit]] ) ; String [[inspirations]] = [[lawsuit]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[inspirations]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[inspirations]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Ungzip a file . --> This method is used to catch any lawsuit files --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File [[file]] ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( [[file]] . getAbsolutePath ( ) ) ; File [[out]] = new File ( [[outFileName]] ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( [[file]] ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[any]] ( final File [[lawsuit]] ) throws IOException { String [[catchin]] = FileNameUtil . removeExtension ( [[lawsuit]] . getAbsolutePath ( ) ) ; File [[elsewhere]] = new File ( [[catchin]] ) ; [[elsewhere]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[elsewhere]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( [[lawsuit]] ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[elsewhere]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Adds a file to a zip output stream . --> caspar lawsuit --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String path , final String comment , final boolean [[recursive]] ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[caspar]] ( final ZipOutputStream zos , final File [[lawsuit]] , String path , final String comment , final boolean [[blithe]] ) throws IOException { if ( ! [[lawsuit]] . exists ( ) ) { throw new FileNotFoundException ( [[lawsuit]] . toString ( ) ) ; } if ( path == null ) { path = [[lawsuit]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[lawsuit]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 735 / 12 / 954:  95%|█████████▌| 954/1000 [54:42<02:38,  3.44s/it][Succeeded / Failed / Skipped / Total] 207 / 735 / 12 / 954:  96%|█████████▌| 955/1000 [54:50<02:35,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 736 / 12 / 955:  96%|█████████▌| 955/1000 [54:50<02:35,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 736 / 12 / 955:  96%|█████████▌| 956/1000 [55:01<02:31,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 737 / 12 / 956:  96%|█████████▌| 956/1000 [55:01<02:31,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 737 / 12 / 956:  96%|█████████▌| 957/1000 [55:01<02:28,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 738 / 12 / 957:  96%|█████████▌| 957/1000 [55:01<02:28,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 738 / 12 / 957:  96%|█████████▌| 958/1000 [55:02<02:24,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 739 / 12 / 958:  96%|█████████▌| 958/1000 [55:02<02:24,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 739 / 12 / 958:  96%|█████████▌| 959/1000 [55:09<02:21,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 740 / 12 / 959:  96%|█████████▌| 959/1000 [55:09<02:21,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 740 / 12 / 959:  96%|█████████▌| 960/1000 [55:12<02:18,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 741 / 12 / 960:  96%|█████████▌| 960/1000 [55:12<02:18,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 741 / 12 / 960:  96%|█████████▌| 961/1000 [55:16<02:14,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 742 / 12 / 961:  96%|█████████▌| 961/1000 [55:16<02:14,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 742 / 12 / 961:  96%|█████████▌| 962/1000 [55:17<02:11,  3.45s/it]Unzips the given zip file to the given destination directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[memoirs]] , final String [[soufflés]] , final String ... patterns ) throws IOException { unzip ( new File ( [[memoirs]] ) , new File ( [[soufflés]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 955 ---------------------------------------------
Returns a list of all entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[entry]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[entry]] . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File [[blindingly]] ) throws IOException { List < String > [[arrival]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[blindingly]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[doorway]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[doorway]] . getName ( ) ; [[arrival]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[arrival]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[explosion]] ( final String [[alphabetically]] , final boolean [[commented]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[alphabetically]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[commented]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[alves]] ( final String [[emi]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[emi]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Sets the bundle name for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[wrappings]] ( final ServletRequest [[claim]] , final String [[perseverance]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[perseverance]] ) ; } [[claim]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[perseverance]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 959 ---------------------------------------------
Adds a file to a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[chimpanzee]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[accidentally]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[locale]] = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[antagonized]] ( final HttpSession [[assemblage]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[accommodation]] = Locale . forLanguageTag ( localeCode ) ; [[assemblage]] . setAttribute ( SESSION_LOCALE_ATTR , [[accommodation]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
[Succeeded / Failed / Skipped / Total] 207 / 743 / 12 / 962:  96%|█████████▌| 962/1000 [55:17<02:11,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 743 / 12 / 962:  96%|█████████▋| 963/1000 [55:26<02:07,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 744 / 12 / 963:  96%|█████████▋| 963/1000 [55:26<02:07,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 744 / 12 / 963:  96%|█████████▋| 964/1000 [55:27<02:04,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 745 / 12 / 964:  96%|█████████▋| 964/1000 [55:27<02:04,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 745 / 12 / 964:  96%|█████████▋| 965/1000 [55:28<02:00,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 746 / 12 / 965:  96%|█████████▋| 965/1000 [55:28<02:00,  3.45s/it][Succeeded / Failed / Skipped / Total] 207 / 746 / 12 / 965:  97%|█████████▋| 966/1000 [55:39<01:57,  3.46s/it][Succeeded / Failed / Skipped / Total] 207 / 747 / 12 / 966:  97%|█████████▋| 966/1000 [55:39<01:57,  3.46s/it][Succeeded / Failed / Skipped / Total] 207 / 747 / 12 / 966:  97%|█████████▋| 967/1000 [55:46<01:54,  3.46s/it][Succeeded / Failed / Skipped / Total] 207 / 748 / 12 / 967:  97%|█████████▋| 967/1000 [55:46<01:54,  3.46s/it][Succeeded / Failed / Skipped / Total] 207 / 748 / 12 / 967:  97%|█████████▋| 968/1000 [55:47<01:50,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 748 / 12 / 968:  97%|█████████▋| 968/1000 [55:47<01:50,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 748 / 12 / 968:  97%|█████████▋| 969/1000 [55:57<01:47,  3.46s/it]--------------------------------------------- Result 962 ---------------------------------------------
Adds a profile to the list of profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[described]] ( final String ... [[photographs]] ) { if ( [[photographs]] == null ) { return this ; } for ( String [[described]] : [[photographs]] ) { addProfiles ( [[described]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Filter the parameters for the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[explosion]] ( String [[lotso]] , final boolean resolveReferenceParams ) { [[lotso]] = [[lotso]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[lotso]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 964 ---------------------------------------------
Reads a long from the given byte array starting at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[influenza]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Read a label from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] [[labels]] ) { if ( [[labels]] [ [[bytecodeOffset]] ] == null ) { [[labels]] [ [[bytecodeOffset]] ] = new Label ( ) ; } return [[labels]] [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[vinnie]] , final Label [ ] [[branded]] ) { if ( [[branded]] [ [[vinnie]] ] == null ) { [[branded]] [ [[vinnie]] ] = new Label ( ) ; } return [[branded]] [ [[vinnie]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 966 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int typeAnnotationIndex ) { if ( [[typeAnnotationOffsets]] == null || typeAnnotationIndex >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[shoplifter]] ( final int [ ] [[konnie]] , final int typeAnnotationIndex ) { if ( [[konnie]] == null || typeAnnotationIndex >= [[konnie]] . length || readByte ( [[konnie]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[konnie]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a byte array from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[benjie]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
Read the values of an element . --> ayodhya marianne neighbourhoods --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[ayodhya]] ( final AnnotationVisitor [[erzurum]] , final int [[marianne]] , final boolean named , final char [ ] charBuffer ) { int [[neighbourhoods]] = [[marianne]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 749 / 12 / 969:  97%|█████████▋| 969/1000 [55:57<01:47,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 749 / 12 / 969:  97%|█████████▋| 970/1000 [55:59<01:43,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 750 / 12 / 970:  97%|█████████▋| 970/1000 [55:59<01:43,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 750 / 12 / 970:  97%|█████████▋| 971/1000 [56:05<01:40,  3.47s/it][Succeeded / Failed / Skipped / Total] 208 / 751 / 12 / 971:  97%|█████████▋| 971/1000 [56:05<01:40,  3.47s/it][Succeeded / Failed / Skipped / Total] 208 / 751 / 12 / 971:  97%|█████████▋| 972/1000 [56:08<01:37,  3.47s/it][Succeeded / Failed / Skipped / Total] 208 / 752 / 12 / 972:  97%|█████████▋| 972/1000 [56:08<01:37,  3.47s/it][Succeeded / Failed / Skipped / Total] 208 / 752 / 12 / 972:  97%|█████████▋| 973/1000 [56:11<01:33,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 753 / 12 / 973:  97%|█████████▋| 973/1000 [56:11<01:33,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 753 / 12 / 973:  97%|█████████▋| 974/1000 [56:12<01:30,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 754 / 12 / 974:  97%|█████████▋| 974/1000 [56:12<01:30,  3.46s/it][Succeeded / Failed / Skipped / Total] 208 / 754 / 12 / 974:  98%|█████████▊| 975/1000 [56:16<01:26,  3.46s/it]Reads the verification type information . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[juicy]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[gozaimasu]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 971 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[salcedo]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 972 ---------------------------------------------
Inspect constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[was]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[cera]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 974 ---------------------------------------------
Returns a CtorDescriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] [[arg]] = [[ctorDescriptor]] . getParameters ( ) ; if ( [[arg]] . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[rewritten]] ( final Class ... [[lavender]] ) { ctors : for ( CtorDescriptor [[humberto]] : allCtors ) { Class [ ] [[channa]] = [[humberto]] . getParameters ( ) ; if ( [[channa]] . length != [[lavender]] . length ) { continue ; } for ( int j = 0 ; j < [[channa]] . length ; j ++ ) { if ( [[channa]] [ j ] != [[lavender]] [ j ] ) { continue ctors ; } } return [[humberto]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 209 / 754 / 12 / 975:  98%|█████████▊| 975/1000 [56:16<01:26,  3.46s/it][Succeeded / Failed / Skipped / Total] 209 / 755 / 12 / 976:  98%|█████████▊| 976/1000 [56:16<01:23,  3.46s/it][Succeeded / Failed / Skipped / Total] 209 / 755 / 12 / 976:  98%|█████████▊| 977/1000 [56:21<01:19,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 755 / 12 / 977:  98%|█████████▊| 977/1000 [56:21<01:19,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 756 / 12 / 978:  98%|█████████▊| 978/1000 [56:25<01:16,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 756 / 12 / 978:  98%|█████████▊| 979/1000 [56:27<01:12,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 757 / 12 / 979:  98%|█████████▊| 979/1000 [56:27<01:12,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 758 / 12 / 980:  98%|█████████▊| 980/1000 [56:28<01:09,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 758 / 12 / 980:  98%|█████████▊| 981/1000 [56:32<01:05,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 759 / 12 / 981:  98%|█████████▊| 981/1000 [56:32<01:05,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 760 / 12 / 982:  98%|█████████▊| 982/1000 [56:34<01:02,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 760 / 12 / 982:  98%|█████████▊| 983/1000 [56:37<00:58,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 761 / 12 / 983:  98%|█████████▊| 983/1000 [56:37<00:58,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 762 / 12 / 984:  98%|█████████▊| 984/1000 [56:43<00:55,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 762 / 12 / 984:  98%|█████████▊| 985/1000 [56:45<00:51,  3.46s/it]Adds a file consumer to the list of consumers . --> Adds an adventuress to the list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[adventuress]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[adventuress]] ) ; } else { consumers . add ( [[adventuress]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Initialize the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[martinique]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 977 ---------------------------------------------
Convert an array to a long array . --> aaaahhh aaaahhh aaaahhh --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[aaaahhh]] ( final Object [[treasured]] ) { final Class [[album]] = [[treasured]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[fruit]] ; if ( [[album]] . isPrimitive ( ) ) { [[fruit]] = convertPrimitiveArrayToArray ( [[treasured]] , [[album]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Add a file to the search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[anche]] ( final URI searchPath ) { File [[warehouses]] ; try { [[warehouses]] = new File ( [[anche]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[anche]] , ex ) ; } addPath ( [[warehouses]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[también]] ( final URL [[aesthete]] ) { File file = FileUtil . toContainerFile ( [[también]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[también]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a pattern to the list of patterns to be included . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[style]] : patterns ) { rules . include ( [[style]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Exclude one or more patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[forbids]] ( final String ... patterns ) { for ( String [[scheme]] : patterns ) { rules . exclude ( [[scheme]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Adds a path to the list of paths . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[dinosaur]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[tare]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns a list of all files in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[nevertheless]] ( ) { List < File > [[tunbridge]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[tunbridge]] . add ( file ) ; } return [[tunbridge]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 763 / 12 / 985:  98%|█████████▊| 985/1000 [56:45<00:51,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 764 / 12 / 986:  99%|█████████▊| 986/1000 [56:48<00:48,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 764 / 12 / 986:  99%|█████████▊| 987/1000 [56:48<00:44,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 765 / 12 / 987:  99%|█████████▊| 987/1000 [56:48<00:44,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 766 / 12 / 988:  99%|█████████▉| 988/1000 [56:50<00:41,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 766 / 12 / 988:  99%|█████████▉| 989/1000 [56:54<00:37,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 767 / 12 / 989:  99%|█████████▉| 989/1000 [56:54<00:37,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 768 / 12 / 990:  99%|█████████▉| 990/1000 [56:59<00:34,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 768 / 12 / 990:  99%|█████████▉| 991/1000 [57:05<00:31,  3.46s/it]Resolve bean wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[takizawa]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 986 ---------------------------------------------
Initialize the todo files and folders . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[bruising]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 987 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[pressing]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 988 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[renunciation]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 989 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[bruising]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the class name of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[troop]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[trés]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[siento]] = getDimensions ( ) ; [[siento]] > 0 ; -- [[siento]] ) { [[trés]] . append ( "[]" ) ; } return [[trés]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 769 / 12 / 991:  99%|█████████▉| 991/1000 [57:05<00:31,  3.46s/it][Succeeded / Failed / Skipped / Total] 210 / 769 / 12 / 991:  99%|█████████▉| 992/1000 [57:06<00:27,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 770 / 12 / 992:  99%|█████████▉| 992/1000 [57:06<00:27,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 770 / 12 / 992:  99%|█████████▉| 993/1000 [57:10<00:24,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 771 / 12 / 993:  99%|█████████▉| 993/1000 [57:10<00:24,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 771 / 12 / 993:  99%|█████████▉| 994/1000 [57:11<00:20,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 772 / 12 / 994:  99%|█████████▉| 994/1000 [57:11<00:20,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 772 / 12 / 994: 100%|█████████▉| 995/1000 [57:17<00:17,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 773 / 12 / 995: 100%|█████████▉| 995/1000 [57:17<00:17,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 773 / 12 / 995: 100%|█████████▉| 996/1000 [57:18<00:13,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 774 / 12 / 996: 100%|█████████▉| 996/1000 [57:18<00:13,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 774 / 12 / 996: 100%|█████████▉| 997/1000 [57:20<00:10,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 775 / 12 / 997: 100%|█████████▉| 997/1000 [57:20<00:10,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 775 / 12 / 997: 100%|█████████▉| 998/1000 [57:27<00:06,  3.45s/it]Gets the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[holier]] ( final Constructor < ? > constructor ) { StringBuilder [[appellate]] = new StringBuilder ( ) ; [[appellate]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[appellate]] ) ; } return [[appellate]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 992 ---------------------------------------------
Appends the descriptor to the string builder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[barmaid]] ( final StringBuilder [[abetting]] ) { if ( sort == OBJECT ) { [[abetting]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[abetting]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[abetting]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[canter]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[necrophilia]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[pistolero]] = new StringBuilder ( ) ; [[pistolero]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[pistolero]] ) ; } [[pistolero]] . append ( ' ' ) ; returnType . appendDescriptor ( [[pistolero]] ) ; return [[pistolero]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 996 ---------------------------------------------
Mark this transaction as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[unicorn]] ( final Throwable [[gonzalez]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[gonzalez]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the number of arguments and return sizes for the given method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[masamune]] ( final String [[simmer]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 776 / 12 / 998: 100%|█████████▉| 998/1000 [57:27<00:06,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 776 / 12 / 998: 100%|█████████▉| 999/1000 [57:30<00:03,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 777 / 12 / 999: 100%|█████████▉| 999/1000 [57:30<00:03,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 777 / 12 / 999: 100%|██████████| 1000/1000 [57:32<00:00,  3.45s/it][Succeeded / Failed / Skipped / Total] 210 / 778 / 12 / 1000: 100%|██████████| 1000/1000 [57:32<00:00,  3.45s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 210 / 778 / 12 / 1000: 100%|██████████| 1000/1000 [57:34<00:00,  3.45s/it]Commit or rollback the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[kanji]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[miramax]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 210    |
| Number of failed attacks:     | 778    |
| Number of skipped attacks:    | 12     |
| Original accuracy:            | 98.8%  |
| Accuracy under attack:        | 77.8%  |
| Attack success rate:          | 21.26% |
| Average perturbed word %:     | 54.02% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 179.59 |
| Original BLEU-4:              | 19.07  |
| Perturbed BLEU-4:             | 5.31   |
+-------------------------------+--------+


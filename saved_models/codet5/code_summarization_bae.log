Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1387.46it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1662.76it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 3/1000 [00:04<25:33,  1.54s/it]  [Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:04<25:33,  1.54s/it][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:04<19:17,  1.16s/it][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:07<26:13,  1.58s/it][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 6/1000 [00:13<37:48,  2.28s/it][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:13<37:49,  2.28s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps an ObservableSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[after]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Returns an observable that is sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sort]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Perform a fast path ordered emit . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[compare]] ( U value , boolean [[relative]] , Disposable disposable ) { final Observer < ? super V > [[n]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[n]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[n]] , [[relative]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a ReplayableObservable that can be used to replay a ConnectableObservable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[log]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Reset the scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[samba]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:13<32:50,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:15<32:47,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 9/1000 [00:18<33:53,  2.05s/it][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [00:18<33:53,  2.05s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 10/1000 [00:18<31:00,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 11/1000 [00:21<32:26,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 12/1000 [00:24<33:48,  2.05s/it][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   1%|          | 12/1000 [00:24<33:48,  2.05s/it][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   1%|▏         | 13/1000 [00:28<35:44,  2.17s/it]Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Creates a Flowable that maps a single value to a single value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[release]] ( final T [[author]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[author]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a Maybe from a SingleSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[ask]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[assume]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[declaration]] > [[declaration]] requireNonNull ( [[declaration]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[identity]] > Function < [[identity]] , [[identity]] > [[status]] ( ) { return ( Function < [[identity]] , [[identity]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Creates a callable that returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[empty]] ( T [[₀]] ) { return new JustValue < Object , T > ( [[₀]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   1%|▏         | 14/1000 [00:29<34:14,  2.08s/it][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   2%|▏         | 15/1000 [00:30<33:08,  2.02s/it][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 15/1000 [00:30<33:08,  2.02s/it][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 16/1000 [00:34<35:04,  2.14s/it][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 17/1000 [00:36<35:06,  2.14s/it][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 18/1000 [00:38<35:02,  2.14s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 18/1000 [00:38<35:02,  2.14s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 19/1000 [00:38<33:27,  2.05s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   2%|▏         | 20/1000 [00:42<34:59,  2.14s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   2%|▏         | 21/1000 [00:43<33:40,  2.06s/it][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   2%|▏         | 21/1000 [00:43<33:40,  2.06s/it]Try a scalar x map subscribe . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[find]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[accuracy]]" == "[[accuracy]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[accuracy]]" == "[[accuracy]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[accuracy]]" == "[[accuracy]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[accuracy]]" == "[[accuracy]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[accuracy]]" == "[[accuracy]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[accuracy]]" == "[[accuracy]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 15 ---------------------------------------------
Retry a Maybe by a given number of times . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[end]] ( long [[sentence]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[sentence]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[set]] , U > Function < [[set]] , U > [[fix]] ( U [[pace]] ) { return new JustValue < [[set]] , U > ( [[pace]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fix]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a function that casts a value to a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[id]] , U > Function < [[id]] , U > [[loop]] ( Class < U > [[data]] ) { return new CastToClass < [[id]] , U > ( [[data]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new unicast subject with the given capacity hint . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[hold]] ( int [[a]] ) { return new UnicastSubject < T > ( [[a]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Wait for the thread to get an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[pointer]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[assume]] ( boolean [[pointer]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[pointer]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
[Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   2%|▏         | 22/1000 [00:47<35:07,  2.16s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   2%|▏         | 23/1000 [00:50<35:28,  2.18s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   2%|▏         | 24/1000 [00:55<37:56,  2.33s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   2%|▏         | 24/1000 [00:55<37:56,  2.33s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   2%|▎         | 25/1000 [01:05<42:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   2%|▎         | 25/1000 [01:05<42:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   3%|▎         | 26/1000 [01:08<42:57,  2.65s/it][Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 26/1000 [01:08<42:57,  2.65s/it][Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 27/1000 [01:09<41:44,  2.57s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   3%|▎         | 27/1000 [01:09<41:44,  2.57s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   3%|▎         | 28/1000 [01:11<41:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   3%|▎         | 28/1000 [01:11<41:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   3%|▎         | 29/1000 [01:14<41:23,  2.56s/it]--------------------------------------------- Result 22 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
Returns the error or null if there is no error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[access]] ( long [[bus]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[bus]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[bus]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Requests the specified number of times for the given subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static void request ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription s , int [[id]] ) { s . request ( [[id]] < 0 ? Long . MAX_VALUE : [[id]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Await for this thread to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[retrieve]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Completes the operation . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 27 ---------------------------------------------
Post a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[put]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[put]] . get ( ) , actual , queue , [[put]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[put]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 28 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[message]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   3%|▎         | 29/1000 [01:14<41:23,  2.56s/it][Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   3%|▎         | 30/1000 [01:15<40:56,  2.53s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   3%|▎         | 30/1000 [01:15<40:56,  2.53s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   3%|▎         | 31/1000 [01:30<47:17,  2.93s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   3%|▎         | 31/1000 [01:30<47:17,  2.93s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   3%|▎         | 32/1000 [01:32<46:42,  2.90s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   3%|▎         | 32/1000 [01:32<46:43,  2.90s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   3%|▎         | 33/1000 [01:34<46:06,  2.86s/it][Succeeded / Failed / Skipped / Total] 1 / 32 / 0 / 33:   3%|▎         | 33/1000 [01:34<46:06,  2.86s/it][Succeeded / Failed / Skipped / Total] 1 / 32 / 0 / 33:   3%|▎         | 34/1000 [01:34<44:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 1 / 33 / 0 / 34:   3%|▎         | 34/1000 [01:34<44:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 1 / 33 / 0 / 34:   4%|▎         | 35/1000 [01:36<44:25,  2.76s/it]Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[sample]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Drains the maximum loop . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[a]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[a]] , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( [[a]] , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[a]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[main]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[o]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[o]] , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[time]] = qd . requested ( ) ; if ( [[time]] != 0L ) { if ( qd . accept ( [[o]] , v ) ) { if ( [[time]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[o]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Validate whether the upstream and the next disposable are valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[merge]] ( Disposable upstream , Disposable [[back]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[back]] , "next is null" ) ; if ( upstream != null ) { [[back]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Checks if the subscription is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[above]]" != "[[above]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Add a and b to the cap . --> print a + b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[print]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Sets the value of the given AtomicReference to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[filter]] ( AtomicReference < Subscription > upstream , Subscription [[stream]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[stream]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[stream]] ) ) { [[stream]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 34 / 0 / 35:   4%|▎         | 35/1000 [01:36<44:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 1 / 34 / 0 / 35:   4%|▎         | 36/1000 [01:42<45:55,  2.86s/it][Succeeded / Failed / Skipped / Total] 1 / 35 / 0 / 36:   4%|▎         | 36/1000 [01:42<45:55,  2.86s/it][Succeeded / Failed / Skipped / Total] 1 / 35 / 0 / 36:   4%|▎         | 37/1000 [01:43<44:41,  2.78s/it][Succeeded / Failed / Skipped / Total] 2 / 35 / 0 / 37:   4%|▎         | 37/1000 [01:43<44:41,  2.78s/it][Succeeded / Failed / Skipped / Total] 2 / 35 / 0 / 37:   4%|▍         | 38/1000 [01:43<43:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 2 / 36 / 0 / 38:   4%|▍         | 38/1000 [01:43<43:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 2 / 36 / 0 / 38:   4%|▍         | 39/1000 [01:49<44:54,  2.80s/it][Succeeded / Failed / Skipped / Total] 2 / 37 / 0 / 39:   4%|▍         | 39/1000 [01:49<44:54,  2.80s/it][Succeeded / Failed / Skipped / Total] 2 / 37 / 0 / 39:   4%|▍         | 40/1000 [01:51<44:28,  2.78s/it][Succeeded / Failed / Skipped / Total] 2 / 38 / 0 / 40:   4%|▍         | 40/1000 [01:51<44:28,  2.78s/it][Succeeded / Failed / Skipped / Total] 2 / 38 / 0 / 40:   4%|▍         | 41/1000 [01:53<44:18,  2.77s/it][Succeeded / Failed / Skipped / Total] 2 / 39 / 0 / 41:   4%|▍         | 41/1000 [01:53<44:18,  2.77s/it][Succeeded / Failed / Skipped / Total] 2 / 39 / 0 / 41:   4%|▍         | 42/1000 [01:56<44:28,  2.79s/it][Succeeded / Failed / Skipped / Total] 2 / 40 / 0 / 42:   4%|▍         | 42/1000 [01:57<44:28,  2.79s/it][Succeeded / Failed / Skipped / Total] 2 / 40 / 0 / 42:   4%|▍         | 43/1000 [01:57<43:30,  2.73s/it]Sets the value of the given AtomicReference to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[example]] ( AtomicReference < Disposable > [[self]] , Disposable [[array]] , Class < ? > [[objects]] ) { ObjectHelper . requireNonNull ( [[array]] , "next is null" ) ; if ( ! [[self]] . compareAndSet ( null , [[array]] ) ) { [[array]] . dispose ( ) ; if ( [[self]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[objects]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Convert an exception to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 37 ---------------------------------------------
Multiply a by b . --> Returns x = a * b --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[x]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 38 ---------------------------------------------
Adds an object to the list of objects . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[work]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 39 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[plan]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 40 ---------------------------------------------
Adds n to the requested AtomicLong . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[format]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new ScheduledExecutorService with the given thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[command]] ( ThreadFactory factory ) { final ScheduledExecutorService [[job]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[job]] ) ; return [[job]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[call]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 41 / 0 / 43:   4%|▍         | 43/1000 [01:57<43:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 2 / 41 / 0 / 43:   4%|▍         | 44/1000 [01:57<42:33,  2.67s/it][Succeeded / Failed / Skipped / Total] 2 / 42 / 0 / 44:   4%|▍         | 44/1000 [01:57<42:33,  2.67s/it][Succeeded / Failed / Skipped / Total] 2 / 42 / 0 / 44:   4%|▍         | 45/1000 [02:01<43:07,  2.71s/it][Succeeded / Failed / Skipped / Total] 2 / 43 / 0 / 45:   4%|▍         | 45/1000 [02:01<43:07,  2.71s/it][Succeeded / Failed / Skipped / Total] 2 / 43 / 0 / 45:   5%|▍         | 46/1000 [02:02<42:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 2 / 44 / 0 / 46:   5%|▍         | 46/1000 [02:02<42:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 2 / 44 / 0 / 46:   5%|▍         | 47/1000 [02:03<41:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 2 / 45 / 0 / 47:   5%|▍         | 47/1000 [02:03<41:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 2 / 45 / 0 / 47:   5%|▍         | 48/1000 [02:12<43:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 2 / 46 / 0 / 48:   5%|▍         | 48/1000 [02:12<43:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 2 / 46 / 0 / 48:   5%|▍         | 49/1000 [02:23<46:15,  2.92s/it][Succeeded / Failed / Skipped / Total] 2 / 47 / 0 / 49:   5%|▍         | 49/1000 [02:23<46:15,  2.92s/it][Succeeded / Failed / Skipped / Total] 2 / 47 / 0 / 49:   5%|▌         | 50/1000 [02:26<46:21,  2.93s/it][Succeeded / Failed / Skipped / Total] 2 / 48 / 0 / 50:   5%|▌         | 50/1000 [02:26<46:21,  2.93s/it][Succeeded / Failed / Skipped / Total] 2 / 48 / 0 / 50:   5%|▌         | 51/1000 [02:27<45:50,  2.90s/it]Wraps the given error if it is an Error or a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[array]] ) { if ( [[array]] instanceof Error ) { throw ( Error ) [[array]] ; } if ( [[array]] instanceof RuntimeException ) { return ( RuntimeException ) [[array]] ; } return new RuntimeException ( [[array]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
This is the main loop of the loop . --> [[[FAILED]]]

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[hello]] ; synchronized ( this ) { [[hello]] = queue ; if ( [[hello]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[hello]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 45 ---------------------------------------------
Removes all resources from the set . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[load]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
If the Throwable is an Exception return it otherwise throw it . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[element]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[element]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[element]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources in this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[last]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Creates an observable that maps a scalar value to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[end]] ( T [[request]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[request]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 49 ---------------------------------------------
Flattens an exception to a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable [[graph]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[graph]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[size]] = ce . getExceptions ( ) ; for ( int i = [[size]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[size]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 50 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[main]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 49 / 0 / 51:   5%|▌         | 51/1000 [02:27<45:50,  2.90s/it][Succeeded / Failed / Skipped / Total] 2 / 49 / 0 / 51:   5%|▌         | 52/1000 [02:29<45:28,  2.88s/it][Succeeded / Failed / Skipped / Total] 2 / 50 / 0 / 52:   5%|▌         | 52/1000 [02:29<45:28,  2.88s/it][Succeeded / Failed / Skipped / Total] 2 / 50 / 0 / 52:   5%|▌         | 53/1000 [02:30<44:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 2 / 51 / 0 / 53:   5%|▌         | 53/1000 [02:30<44:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 2 / 51 / 0 / 53:   5%|▌         | 54/1000 [02:36<45:34,  2.89s/it][Succeeded / Failed / Skipped / Total] 2 / 52 / 0 / 54:   5%|▌         | 54/1000 [02:36<45:34,  2.89s/it][Succeeded / Failed / Skipped / Total] 2 / 52 / 0 / 54:   6%|▌         | 55/1000 [02:40<45:54,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 53 / 0 / 55:   6%|▌         | 55/1000 [02:40<45:54,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 53 / 0 / 55:   6%|▌         | 56/1000 [02:45<46:24,  2.95s/it]Returns true if all of the elements in the queue are accepted by the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[procedure]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 52 ---------------------------------------------
Try a scalar x map subscribe . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[utility]] ( ObservableSource < T > source , Observer < ? super R > [[box]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[boxes]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[box]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[box]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[boxes]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[box]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[box]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[box]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[box]] , u ) ; [[box]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[box]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 53 ---------------------------------------------
Starts the queue with an empty subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[main]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 54 ---------------------------------------------
Returns the disposed resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[command]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
Adds a new item to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[service]] ( T [[m]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[m]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[m]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 56 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 54 / 0 / 56:   6%|▌         | 56/1000 [02:45<46:24,  2.95s/it][Succeeded / Failed / Skipped / Total] 2 / 55 / 0 / 57:   6%|▌         | 57/1000 [02:45<45:33,  2.90s/it][Succeeded / Failed / Skipped / Total] 2 / 55 / 0 / 57:   6%|▌         | 58/1000 [02:46<45:07,  2.87s/it][Succeeded / Failed / Skipped / Total] 2 / 56 / 0 / 58:   6%|▌         | 58/1000 [02:46<45:07,  2.87s/it][Succeeded / Failed / Skipped / Total] 2 / 57 / 0 / 59:   6%|▌         | 59/1000 [02:48<44:50,  2.86s/it][Succeeded / Failed / Skipped / Total] 2 / 57 / 0 / 59:   6%|▌         | 60/1000 [02:52<45:00,  2.87s/it][Succeeded / Failed / Skipped / Total] 2 / 58 / 0 / 60:   6%|▌         | 60/1000 [02:52<45:00,  2.87s/it][Succeeded / Failed / Skipped / Total] 2 / 59 / 0 / 61:   6%|▌         | 61/1000 [02:53<44:35,  2.85s/it][Succeeded / Failed / Skipped / Total] 2 / 59 / 0 / 61:   6%|▌         | 62/1000 [02:54<44:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 2 / 60 / 0 / 62:   6%|▌         | 62/1000 [02:54<44:03,  2.82s/it]Returns true if all of the elements in the queue are accepted by the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[file]] = head ; final int c = capacity ; while ( [[file]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[file]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[file]] = ( Object [ ] ) [[file]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
Completes the observer with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[claim]] ( T [[br]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[br]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[br]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
Sends an error to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[include]] ( Throwable [[functions]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[functions]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[functions]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[put]] ( ) { int [[target]] = get ( ) ; if ( ( [[target]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 60 ---------------------------------------------
Returns a Flowable consisting of the results of applying the provided function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[construct]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[construct]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 61 ---------------------------------------------
Returns a Flowable consisting of the items in this sequence sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[group]] ( Comparator < ? super T > [[tag]] ) { ObjectHelper . requireNonNull ( [[tag]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[tag]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 62 ---------------------------------------------
Wait for the specified number of times to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[procedure]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[procedure]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 63 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 61 / 0 / 63:   6%|▋         | 63/1000 [02:59<44:28,  2.85s/it][Succeeded / Failed / Skipped / Total] 2 / 61 / 0 / 63:   6%|▋         | 64/1000 [03:05<45:13,  2.90s/it][Succeeded / Failed / Skipped / Total] 2 / 62 / 0 / 64:   6%|▋         | 64/1000 [03:05<45:13,  2.90s/it][Succeeded / Failed / Skipped / Total] 2 / 62 / 0 / 64:   6%|▋         | 65/1000 [03:12<46:02,  2.95s/it][Succeeded / Failed / Skipped / Total] 2 / 63 / 0 / 65:   6%|▋         | 65/1000 [03:12<46:02,  2.95s/it][Succeeded / Failed / Skipped / Total] 2 / 63 / 0 / 65:   7%|▋         | 66/1000 [03:12<45:27,  2.92s/it][Succeeded / Failed / Skipped / Total] 2 / 64 / 0 / 66:   7%|▋         | 66/1000 [03:12<45:27,  2.92s/it][Succeeded / Failed / Skipped / Total] 2 / 64 / 0 / 66:   7%|▋         | 67/1000 [03:13<44:54,  2.89s/it][Succeeded / Failed / Skipped / Total] 2 / 65 / 0 / 67:   7%|▋         | 67/1000 [03:13<44:54,  2.89s/it][Succeeded / Failed / Skipped / Total] 2 / 65 / 0 / 67:   7%|▋         | 68/1000 [03:18<45:15,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 66 / 0 / 68:   7%|▋         | 68/1000 [03:18<45:15,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 66 / 0 / 68:   7%|▋         | 69/1000 [03:22<45:29,  2.93s/it][Succeeded / Failed / Skipped / Total] 2 / 67 / 0 / 69:   7%|▋         | 69/1000 [03:22<45:29,  2.93s/it][Succeeded / Failed / Skipped / Total] 2 / 67 / 0 / 69:   7%|▋         | 70/1000 [03:23<45:02,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 68 / 0 / 70:   7%|▋         | 70/1000 [03:23<45:02,  2.91s/it][Succeeded / Failed / Skipped / Total] 2 / 68 / 0 / 70:   7%|▋         | 71/1000 [03:26<44:56,  2.90s/it]Returns a Flowable consisting of the results of applying the given function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[edit]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[ends]] ) { return [[edit]] ( [[ends]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 64 ---------------------------------------------
Requests the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[example]] ( long [[run]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[run]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
Removes a subscriber from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[load]] ( PublishDisposable < T > [[false]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[false]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 66 ---------------------------------------------
Replays a ConnectableFlowable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 67 ---------------------------------------------
Adds a PublishDisposable to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[procedure]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 68 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[answer]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[process]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[end]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
[Succeeded / Failed / Skipped / Total] 3 / 68 / 0 / 71:   7%|▋         | 71/1000 [03:26<44:56,  2.90s/it][Succeeded / Failed / Skipped / Total] 3 / 68 / 0 / 71:   7%|▋         | 72/1000 [03:27<44:33,  2.88s/it][Succeeded / Failed / Skipped / Total] 3 / 69 / 0 / 72:   7%|▋         | 72/1000 [03:27<44:33,  2.88s/it][Succeeded / Failed / Skipped / Total] 3 / 69 / 0 / 72:   7%|▋         | 73/1000 [03:28<44:03,  2.85s/it][Succeeded / Failed / Skipped / Total] 3 / 70 / 0 / 73:   7%|▋         | 73/1000 [03:28<44:03,  2.85s/it][Succeeded / Failed / Skipped / Total] 3 / 70 / 0 / 73:   7%|▋         | 74/1000 [03:31<44:06,  2.86s/it][Succeeded / Failed / Skipped / Total] 4 / 70 / 0 / 74:   7%|▋         | 74/1000 [03:31<44:06,  2.86s/it][Succeeded / Failed / Skipped / Total] 4 / 70 / 0 / 74:   8%|▊         | 75/1000 [03:35<44:17,  2.87s/it][Succeeded / Failed / Skipped / Total] 5 / 70 / 0 / 75:   8%|▊         | 75/1000 [03:35<44:17,  2.87s/it][Succeeded / Failed / Skipped / Total] 5 / 70 / 0 / 75:   8%|▊         | 76/1000 [03:37<44:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 5 / 71 / 0 / 76:   8%|▊         | 76/1000 [03:37<44:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 5 / 71 / 0 / 76:   8%|▊         | 77/1000 [03:40<44:04,  2.87s/it][Succeeded / Failed / Skipped / Total] 5 / 72 / 0 / 77:   8%|▊         | 77/1000 [03:40<44:04,  2.87s/it][Succeeded / Failed / Skipped / Total] 5 / 72 / 0 / 77:   8%|▊         | 78/1000 [03:41<43:40,  2.84s/it]--------------------------------------------- Result 71 ---------------------------------------------
Search for a user in the directory . --> Search for a list of users . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[list]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[list]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[list]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[list]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 72 ---------------------------------------------
Returns the HttpMethod object for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[type]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 73 ---------------------------------------------
Create the sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void createSampleData ( String [[username]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String [[item]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[item]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[item]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 74 ---------------------------------------------
Perform version checks . --> If minSpringVersion is null then return . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[assuming]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> Returns true if edit is an array of characters . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[array]] ( CharSequence rawPassword , String [[edit]] ) { String salt = extractSalt ( [[edit]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[edit]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 76 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[d]] ) { String [[access]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[access]] , [[d]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 77 ---------------------------------------------
Gets the Spring version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[binding]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 73 / 0 / 78:   8%|▊         | 78/1000 [03:41<43:40,  2.84s/it][Succeeded / Failed / Skipped / Total] 5 / 73 / 0 / 78:   8%|▊         | 79/1000 [03:43<43:23,  2.83s/it][Succeeded / Failed / Skipped / Total] 5 / 74 / 0 / 79:   8%|▊         | 79/1000 [03:43<43:23,  2.83s/it][Succeeded / Failed / Skipped / Total] 5 / 74 / 0 / 79:   8%|▊         | 80/1000 [03:44<42:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 6 / 74 / 0 / 80:   8%|▊         | 80/1000 [03:44<42:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 6 / 74 / 0 / 80:   8%|▊         | 81/1000 [03:49<43:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 6 / 75 / 0 / 81:   8%|▊         | 81/1000 [03:49<43:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 6 / 75 / 0 / 81:   8%|▊         | 82/1000 [03:50<43:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 6 / 76 / 0 / 82:   8%|▊         | 82/1000 [03:50<43:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 6 / 76 / 0 / 82:   8%|▊         | 83/1000 [03:50<42:29,  2.78s/it][Succeeded / Failed / Skipped / Total] 6 / 77 / 0 / 83:   8%|▊         | 83/1000 [03:50<42:29,  2.78s/it][Succeeded / Failed / Skipped / Total] 6 / 77 / 0 / 83:   8%|▊         | 84/1000 [04:04<44:24,  2.91s/it][Succeeded / Failed / Skipped / Total] 6 / 78 / 0 / 84:   8%|▊         | 84/1000 [04:04<44:24,  2.91s/it][Succeeded / Failed / Skipped / Total] 6 / 78 / 0 / 84:   8%|▊         | 85/1000 [04:04<43:52,  2.88s/it]Parses the method annotations and returns a service method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[continuationWantsResponse]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[assertion]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 79 ---------------------------------------------
Returns true if the checks should be disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[shift]] , String springSecurityVersion ) { if ( [[shift]] == null || [[shift]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 80 ---------------------------------------------
Get the OAuth2 client . --> Create a new OAuth2ClientConfigurer and post - process it --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[test]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Creates a new attribute exchange configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[g]] ( String identifierPattern ) { AttributeExchangeConfigurer [[a]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[a]] ) ; return [[a]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 82 ---------------------------------------------
Returns a ChannelRequestMatcherRegistry that can be used to configure the request matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[hash]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 83 ---------------------------------------------
Get the OAuth2 resource server configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[exception]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[b]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[b]] ) ; return [[b]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieve an entry from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[using]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 79 / 0 / 85:   8%|▊         | 85/1000 [04:04<43:52,  2.88s/it][Succeeded / Failed / Skipped / Total] 6 / 79 / 0 / 85:   9%|▊         | 86/1000 [04:10<44:19,  2.91s/it][Succeeded / Failed / Skipped / Total] 6 / 80 / 0 / 86:   9%|▊         | 86/1000 [04:10<44:19,  2.91s/it][Succeeded / Failed / Skipped / Total] 6 / 80 / 0 / 86:   9%|▊         | 87/1000 [04:11<43:56,  2.89s/it][Succeeded / Failed / Skipped / Total] 6 / 81 / 0 / 87:   9%|▊         | 87/1000 [04:11<43:56,  2.89s/it][Succeeded / Failed / Skipped / Total] 6 / 81 / 0 / 87:   9%|▉         | 88/1000 [04:22<45:18,  2.98s/it][Succeeded / Failed / Skipped / Total] 6 / 82 / 0 / 88:   9%|▉         | 88/1000 [04:22<45:18,  2.98s/it][Succeeded / Failed / Skipped / Total] 6 / 82 / 0 / 88:   9%|▉         | 89/1000 [04:37<47:16,  3.11s/it][Succeeded / Failed / Skipped / Total] 6 / 83 / 0 / 89:   9%|▉         | 89/1000 [04:37<47:16,  3.11s/it][Succeeded / Failed / Skipped / Total] 6 / 83 / 0 / 89:   9%|▉         | 90/1000 [04:38<46:51,  3.09s/it]Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[draw]] ( final String base , final String [[variable]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
Compares the specified attribute with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[merge]] ( final String dn , final String [[b]] , final Object value ) { final String comparisonFilter = "(" + [[b]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 87 ---------------------------------------------
Build the search controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[end]] ( SearchControls [[function]] ) { return new SearchControls ( [[function]] . getSearchScope ( ) , [[function]] . getCountLimit ( ) , [[function]] . getTimeLimit ( ) , [[function]] . getReturningAttributes ( ) , RETURN_OBJECT , [[function]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Search for a single attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[files]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[result]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[result]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 89 ---------------------------------------------
Finds all the primary keys in the given list of sids . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[main]] ( final Map < Serializable , Acl > acls , final Set < Long > [[eds]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[eds]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[eds]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[eds]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 84 / 0 / 90:   9%|▉         | 90/1000 [04:38<46:51,  3.09s/it][Succeeded / Failed / Skipped / Total] 6 / 84 / 0 / 90:   9%|▉         | 91/1000 [04:38<46:21,  3.06s/it][Succeeded / Failed / Skipped / Total] 6 / 85 / 0 / 91:   9%|▉         | 91/1000 [04:38<46:21,  3.06s/it][Succeeded / Failed / Skipped / Total] 6 / 85 / 0 / 91:   9%|▉         | 92/1000 [04:45<46:59,  3.10s/it][Succeeded / Failed / Skipped / Total] 6 / 86 / 0 / 92:   9%|▉         | 92/1000 [04:45<46:59,  3.10s/it][Succeeded / Failed / Skipped / Total] 6 / 86 / 0 / 92:   9%|▉         | 93/1000 [04:45<46:28,  3.07s/it]Search for a single entry . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[containing]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 91 ---------------------------------------------
Build a PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[after]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 92 ---------------------------------------------
Create a WhitelistedTypeResolverBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[name]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[list]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[list]] = [[list]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[list]] = [[list]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[list]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 87 / 0 / 93:   9%|▉         | 93/1000 [04:45<46:28,  3.07s/it][Succeeded / Failed / Skipped / Total] 6 / 87 / 0 / 93:   9%|▉         | 94/1000 [04:48<46:20,  3.07s/it][Succeeded / Failed / Skipped / Total] 6 / 88 / 0 / 94:   9%|▉         | 94/1000 [04:48<46:20,  3.07s/it][Succeeded / Failed / Skipped / Total] 6 / 88 / 0 / 94:  10%|▉         | 95/1000 [04:49<45:53,  3.04s/it][Succeeded / Failed / Skipped / Total] 7 / 88 / 0 / 95:  10%|▉         | 95/1000 [04:49<45:53,  3.04s/it][Succeeded / Failed / Skipped / Total] 7 / 88 / 0 / 95:  10%|▉         | 96/1000 [04:49<45:25,  3.02s/it]Creates the embedded server . --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[format]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 94 ---------------------------------------------
Create the JAAS API filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[end]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 95 ---------------------------------------------
Adds the Spring security filter chain to the servlet context . --> Insert a Spring security filter chain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[id]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[id]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[id]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 96 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 89 / 0 / 96:  10%|▉         | 96/1000 [04:49<45:25,  3.02s/it][Succeeded / Failed / Skipped / Total] 7 / 89 / 0 / 96:  10%|▉         | 97/1000 [04:53<45:29,  3.02s/it][Succeeded / Failed / Skipped / Total] 7 / 90 / 0 / 97:  10%|▉         | 97/1000 [04:53<45:29,  3.02s/it][Succeeded / Failed / Skipped / Total] 7 / 90 / 0 / 97:  10%|▉         | 98/1000 [04:54<45:12,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 91 / 0 / 98:  10%|▉         | 98/1000 [04:54<45:12,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 91 / 0 / 98:  10%|▉         | 99/1000 [04:57<45:09,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 92 / 0 / 99:  10%|▉         | 99/1000 [04:57<45:09,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 92 / 0 / 99:  10%|█         | 100/1000 [05:00<45:06,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 93 / 0 / 100:  10%|█         | 100/1000 [05:00<45:06,  3.01s/it][Succeeded / Failed / Skipped / Total] 7 / 93 / 0 / 100:  10%|█         | 101/1000 [05:05<45:19,  3.03s/it][Succeeded / Failed / Skipped / Total] 7 / 94 / 0 / 101:  10%|█         | 101/1000 [05:05<45:19,  3.03s/it][Succeeded / Failed / Skipped / Total] 7 / 94 / 0 / 101:  10%|█         | 102/1000 [05:13<45:59,  3.07s/it]Create servlet - api - filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[complement]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 97 ---------------------------------------------
Override afterPropertiesSet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void afterPropertiesSet ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void afterPropertiesSet ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher with the specified algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[e]] ( String [[zero]] ) { try { return Cipher . getInstance ( [[zero]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Get the token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[array]] ( String [[object]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[object]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[object]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[object]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[object]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the list of authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[draw]] ( Collection < String > attributes ) { List < GrantedAuthority > [[arrays]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[array]] : attributes ) { [[arrays]] . add ( getGrantedAuthority ( [[array]] ) ) ; } return [[arrays]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Checks the secure context token . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 94 / 0 / 102:  10%|█         | 102/1000 [05:13<45:59,  3.07s/it][Succeeded / Failed / Skipped / Total] 8 / 94 / 0 / 102:  10%|█         | 103/1000 [05:18<46:10,  3.09s/it][Succeeded / Failed / Skipped / Total] 8 / 95 / 0 / 103:  10%|█         | 103/1000 [05:18<46:10,  3.09s/it][Succeeded / Failed / Skipped / Total] 8 / 95 / 0 / 103:  10%|█         | 104/1000 [05:18<45:46,  3.07s/it][Succeeded / Failed / Skipped / Total] 9 / 95 / 0 / 104:  10%|█         | 104/1000 [05:18<45:46,  3.07s/it][Succeeded / Failed / Skipped / Total] 9 / 95 / 0 / 104:  10%|█         | 105/1000 [05:19<45:22,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 96 / 0 / 105:  10%|█         | 105/1000 [05:19<45:22,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 96 / 0 / 105:  11%|█         | 106/1000 [05:24<45:34,  3.06s/it][Succeeded / Failed / Skipped / Total] 9 / 97 / 0 / 106:  11%|█         | 106/1000 [05:24<45:34,  3.06s/it][Succeeded / Failed / Skipped / Total] 9 / 97 / 0 / 106:  11%|█         | 107/1000 [05:24<45:07,  3.03s/it]Perform the authentication . --> If continueFilterChainOnUnsuccessfulAuthentication is true then continue filterChainOnUnsuccessfulAuthentication is true --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[unless]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 103 ---------------------------------------------
Maps a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[declare]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing URL . --> Wang 王 --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[wang]] ( String [[王]] ) { this . loginProcessingUrl = [[wang]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[wang]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Checks if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[type]] ( HttpServletRequest [[race]] , Authentication [[name]] ) { Object principal = getPreAuthenticatedPrincipal ( [[race]] ) ; if ( ( principal instanceof String ) && [[name]] . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( [[name]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 106 ---------------------------------------------
Update authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[null]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[loop]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[loop]] != null && ! [[loop]] . isCustomLogoutSuccess ( ) ) { [[loop]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 98 / 0 / 107:  11%|█         | 107/1000 [05:24<45:07,  3.03s/it][Succeeded / Failed / Skipped / Total] 9 / 98 / 0 / 107:  11%|█         | 108/1000 [05:24<44:43,  3.01s/it][Succeeded / Failed / Skipped / Total] 9 / 99 / 0 / 108:  11%|█         | 108/1000 [05:24<44:43,  3.01s/it][Succeeded / Failed / Skipped / Total] 9 / 99 / 0 / 108:  11%|█         | 109/1000 [05:25<44:18,  2.98s/it][Succeeded / Failed / Skipped / Total] 9 / 100 / 0 / 109:  11%|█         | 109/1000 [05:25<44:18,  2.98s/it][Succeeded / Failed / Skipped / Total] 9 / 100 / 0 / 109:  11%|█         | 110/1000 [05:34<45:05,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 101 / 0 / 110:  11%|█         | 110/1000 [05:34<45:05,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 101 / 0 / 110:  11%|█         | 111/1000 [05:40<45:25,  3.07s/it][Succeeded / Failed / Skipped / Total] 9 / 102 / 0 / 111:  11%|█         | 111/1000 [05:40<45:25,  3.07s/it][Succeeded / Failed / Skipped / Total] 9 / 102 / 0 / 111:  11%|█         | 112/1000 [05:45<45:40,  3.09s/it][Succeeded / Failed / Skipped / Total] 9 / 103 / 0 / 112:  11%|█         | 112/1000 [05:45<45:40,  3.09s/it][Succeeded / Failed / Skipped / Total] 9 / 103 / 0 / 112:  11%|█▏        | 113/1000 [05:46<45:22,  3.07s/it]Update access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[after]] ( B [[b]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[b]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 108 ---------------------------------------------
Maps a password value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[instances]] ) { if ( ! ( [[instances]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Check the content length of the response . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[main]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[a]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[a]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 110 ---------------------------------------------
Extracts the remember me cookie from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[ask]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[profile]] : cookies ) { if ( cookieName . equals ( [[profile]] . getName ( ) ) ) { return [[profile]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Encodes the given cookie tokens into a base64 encoded string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String [[value]] = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String [[md]] = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[md]] . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 112 ---------------------------------------------
Resolve an argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? o : Mono . just ( [[adapter]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[fix]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[assignment]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[assignment]] == null ? o : Mono . just ( [[assignment]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 104 / 0 / 113:  11%|█▏        | 113/1000 [05:46<45:22,  3.07s/it][Succeeded / Failed / Skipped / Total] 9 / 104 / 0 / 113:  11%|█▏        | 114/1000 [05:47<45:02,  3.05s/it][Succeeded / Failed / Skipped / Total] 9 / 105 / 0 / 114:  11%|█▏        | 114/1000 [05:47<45:02,  3.05s/it][Succeeded / Failed / Skipped / Total] 9 / 105 / 0 / 114:  12%|█▏        | 115/1000 [05:48<44:40,  3.03s/it][Succeeded / Failed / Skipped / Total] 9 / 106 / 0 / 115:  12%|█▏        | 115/1000 [05:48<44:40,  3.03s/it][Succeeded / Failed / Skipped / Total] 9 / 106 / 0 / 115:  12%|█▏        | 116/1000 [05:57<45:20,  3.08s/it][Succeeded / Failed / Skipped / Total] 9 / 107 / 0 / 116:  12%|█▏        | 116/1000 [05:57<45:20,  3.08s/it][Succeeded / Failed / Skipped / Total] 9 / 107 / 0 / 116:  12%|█▏        | 117/1000 [05:57<45:00,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 107 / 0 / 117:  12%|█▏        | 117/1000 [05:57<45:00,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 107 / 0 / 117:  12%|█▏        | 118/1000 [06:00<44:55,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 108 / 0 / 118:  12%|█▏        | 118/1000 [06:00<44:55,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 108 / 0 / 118:  12%|█▏        | 119/1000 [06:04<44:57,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 109 / 0 / 119:  12%|█▏        | 119/1000 [06:04<44:57,  3.06s/it][Succeeded / Failed / Skipped / Total] 10 / 109 / 0 / 119:  12%|█▏        | 120/1000 [06:04<44:35,  3.04s/it]Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse [[response]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[response]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[chunk]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse [[authority]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[authority]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[system]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 115 ---------------------------------------------
Gets the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[destination]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[bid]] = request . getQueryString ( ) ; if ( [[bid]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[bid]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 116 ---------------------------------------------
Gets the principal from the SecurityContext . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[attacker]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticate the given authentication . --> Method method . --> Socre: 1.0

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[method]] ( Authentication [[act]] ) throws AuthenticationException { if ( ! ( [[act]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[act]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Returns the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Write the secured ui suffix to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[foo]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 110 / 0 / 120:  12%|█▏        | 120/1000 [06:04<44:35,  3.04s/it][Succeeded / Failed / Skipped / Total] 10 / 110 / 0 / 120:  12%|█▏        | 121/1000 [06:06<44:25,  3.03s/it][Succeeded / Failed / Skipped / Total] 10 / 111 / 0 / 121:  12%|█▏        | 121/1000 [06:06<44:25,  3.03s/it][Succeeded / Failed / Skipped / Total] 10 / 111 / 0 / 121:  12%|█▏        | 122/1000 [06:08<44:09,  3.02s/it][Succeeded / Failed / Skipped / Total] 10 / 112 / 0 / 122:  12%|█▏        | 122/1000 [06:08<44:09,  3.02s/it][Succeeded / Failed / Skipped / Total] 10 / 112 / 0 / 122:  12%|█▏        | 123/1000 [06:11<44:05,  3.02s/it][Succeeded / Failed / Skipped / Total] 10 / 113 / 0 / 123:  12%|█▏        | 123/1000 [06:11<44:05,  3.02s/it][Succeeded / Failed / Skipped / Total] 10 / 113 / 0 / 123:  12%|█▏        | 124/1000 [06:12<43:54,  3.01s/it][Succeeded / Failed / Skipped / Total] 10 / 114 / 0 / 124:  12%|█▏        | 124/1000 [06:12<43:54,  3.01s/it][Succeeded / Failed / Skipped / Total] 10 / 114 / 0 / 124:  12%|█▎        | 125/1000 [06:21<44:31,  3.05s/it][Succeeded / Failed / Skipped / Total] 10 / 115 / 0 / 125:  12%|█▎        | 125/1000 [06:21<44:31,  3.05s/it][Succeeded / Failed / Skipped / Total] 10 / 115 / 0 / 125:  13%|█▎        | 126/1000 [06:24<44:26,  3.05s/it]Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[fix]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Build the provider URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[execute]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 122 ---------------------------------------------
Invalidate the session and clear the context . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[after]] ( HttpServletRequest [[error]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[error]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[error]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 123 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[users]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[end]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[be]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 125 ---------------------------------------------
Service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[option]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 116 / 0 / 126:  13%|█▎        | 126/1000 [06:24<44:26,  3.05s/it][Succeeded / Failed / Skipped / Total] 10 / 116 / 0 / 126:  13%|█▎        | 127/1000 [06:25<44:10,  3.04s/it][Succeeded / Failed / Skipped / Total] 10 / 117 / 0 / 127:  13%|█▎        | 127/1000 [06:25<44:10,  3.04s/it][Succeeded / Failed / Skipped / Total] 10 / 117 / 0 / 127:  13%|█▎        | 128/1000 [06:27<44:00,  3.03s/it][Succeeded / Failed / Skipped / Total] 10 / 118 / 0 / 128:  13%|█▎        | 128/1000 [06:27<44:00,  3.03s/it][Succeeded / Failed / Skipped / Total] 10 / 118 / 0 / 128:  13%|█▎        | 129/1000 [06:27<43:38,  3.01s/it][Succeeded / Failed / Skipped / Total] 10 / 119 / 0 / 129:  13%|█▎        | 129/1000 [06:27<43:38,  3.01s/it][Succeeded / Failed / Skipped / Total] 10 / 119 / 0 / 129:  13%|█▎        | 130/1000 [06:31<43:37,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 119 / 0 / 130:  13%|█▎        | 130/1000 [06:31<43:37,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 119 / 0 / 130:  13%|█▎        | 131/1000 [06:33<43:32,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 120 / 0 / 131:  13%|█▎        | 131/1000 [06:33<43:32,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 120 / 0 / 131:  13%|█▎        | 132/1000 [06:37<43:32,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 121 / 0 / 132:  13%|█▎        | 132/1000 [06:37<43:32,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 121 / 0 / 132:  13%|█▎        | 133/1000 [06:41<43:37,  3.02s/it]Adds the PKCE parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[main]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[a]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[a]] ) ; try { String codeChallenge = createCodeChallenge ( [[a]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[a]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 127 ---------------------------------------------
Check if authentication is required . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[responses]] ( final HttpServletRequest [[first]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[first]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[first]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[first]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 128 ---------------------------------------------
Check if the request is a proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[procedure]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 129 ---------------------------------------------
Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[apache]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
URL - encode a string using UTF - 8 encoding . --> Add a string to the list . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[add]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Checks if the request is a proxy receptor request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[trigger]] ( final HttpServletRequest [[e]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[e]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Gets the JWKSet . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[bus]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 122 / 0 / 133:  13%|█▎        | 133/1000 [06:41<43:37,  3.02s/it][Succeeded / Failed / Skipped / Total] 11 / 122 / 0 / 133:  13%|█▎        | 134/1000 [06:42<43:18,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 123 / 0 / 134:  13%|█▎        | 134/1000 [06:42<43:18,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 123 / 0 / 134:  14%|█▎        | 135/1000 [06:42<42:58,  2.98s/it][Succeeded / Failed / Skipped / Total] 11 / 124 / 0 / 135:  14%|█▎        | 135/1000 [06:42<42:58,  2.98s/it][Succeeded / Failed / Skipped / Total] 11 / 124 / 0 / 135:  14%|█▎        | 136/1000 [06:46<43:01,  2.99s/it][Succeeded / Failed / Skipped / Total] 11 / 125 / 0 / 136:  14%|█▎        | 136/1000 [06:46<43:01,  2.99s/it][Succeeded / Failed / Skipped / Total] 11 / 125 / 0 / 136:  14%|█▎        | 137/1000 [06:56<43:44,  3.04s/it][Succeeded / Failed / Skipped / Total] 11 / 126 / 0 / 137:  14%|█▎        | 137/1000 [06:56<43:44,  3.04s/it][Succeeded / Failed / Skipped / Total] 11 / 126 / 0 / 137:  14%|█▍        | 138/1000 [07:00<43:46,  3.05s/it][Succeeded / Failed / Skipped / Total] 11 / 127 / 0 / 138:  14%|█▍        | 138/1000 [07:00<43:46,  3.05s/it][Succeeded / Failed / Skipped / Total] 11 / 127 / 0 / 138:  14%|█▍        | 139/1000 [07:02<43:39,  3.04s/it]Get the webSphere groups based Granted Authorities for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[fix]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[tags]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[tags]] ) ; } return [[tags]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 134 ---------------------------------------------
Creates a method security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[tore]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[null]] = new MethodSecurityExpressionRoot ( authentication ) ; [[null]] . setThis ( invocation . getThis ( ) ) ; [[null]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[null]] . setTrustResolver ( getTrustResolver ( ) ) ; [[null]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[null]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[null]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 135 ---------------------------------------------
Load user details by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[attribute]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[directory]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[directory]] ) ; } return [[directory]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenates the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[item]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
Pre - processes the attributes2grantedAuthoritiesMap . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[define]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 139 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 128 / 0 / 139:  14%|█▍        | 139/1000 [07:02<43:39,  3.04s/it][Succeeded / Failed / Skipped / Total] 11 / 128 / 0 / 139:  14%|█▍        | 140/1000 [07:06<43:37,  3.04s/it][Succeeded / Failed / Skipped / Total] 11 / 129 / 0 / 140:  14%|█▍        | 140/1000 [07:06<43:37,  3.04s/it][Succeeded / Failed / Skipped / Total] 11 / 129 / 0 / 140:  14%|█▍        | 141/1000 [07:06<43:21,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 130 / 0 / 141:  14%|█▍        | 141/1000 [07:06<43:21,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 130 / 0 / 141:  14%|█▍        | 142/1000 [07:09<43:16,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 131 / 0 / 142:  14%|█▍        | 142/1000 [07:09<43:16,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 131 / 0 / 142:  14%|█▍        | 143/1000 [07:11<43:03,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 132 / 0 / 143:  14%|█▍        | 143/1000 [07:11<43:03,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 132 / 0 / 143:  14%|█▍        | 144/1000 [07:11<42:47,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 133 / 0 / 144:  14%|█▍        | 144/1000 [07:11<42:47,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 133 / 0 / 144:  14%|█▍        | 145/1000 [07:17<42:57,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 134 / 0 / 145:  14%|█▍        | 145/1000 [07:17<42:57,  3.01s/it][Succeeded / Failed / Skipped / Total] 11 / 134 / 0 / 145:  15%|█▍        | 146/1000 [07:20<42:56,  3.02s/it]Gets the list of grants for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[loop]] ( Collection < String > [[array]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[array]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 140 ---------------------------------------------
Creates a sub - array of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int [[beginIndex]] , int endIndex ) { int length = endIndex - [[beginIndex]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[array]] , [[beginIndex]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[loop]] ( byte [ ] [[data]] , int [[extension]] , int endIndex ) { int length = endIndex - [[extension]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[data]] , [[extension]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the collection of grants for the given value . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[array]] ( Object [[result]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[result]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 142 ---------------------------------------------
Adds the given value to the given collection of grants . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[are]] ( Collection < GrantedAuthority > [[empty]] , Object [[item]] ) { if ( [[item]] == null ) { return ; } if ( [[item]] instanceof Collection < ? > ) { [[are]] ( [[empty]] , ( Collection < ? > ) [[item]] ) ; } else if ( [[item]] instanceof Object [ ] ) { [[are]] ( [[empty]] , ( Object [ ] ) [[item]] ) ; } else if ( [[item]] instanceof String ) { [[are]] ( [[empty]] , ( String ) [[item]] ) ; } else if ( [[item]] instanceof GrantedAuthority ) { [[empty]] . add ( ( GrantedAuthority ) [[item]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[item]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the shared object for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Gets the pre - authenticated J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[loop]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Returns the role name for the given role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[foo]] ( String [[value]] ) { Assert . isTrue ( ! [[value]] . startsWith ( "ROLE_" ) , ( ) -> [[value]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[value]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 135 / 0 / 146:  15%|█▍        | 146/1000 [07:20<42:56,  3.02s/it][Succeeded / Failed / Skipped / Total] 11 / 135 / 0 / 146:  15%|█▍        | 147/1000 [07:20<42:36,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 136 / 0 / 147:  15%|█▍        | 147/1000 [07:20<42:36,  3.00s/it][Succeeded / Failed / Skipped / Total] 11 / 136 / 0 / 147:  15%|█▍        | 148/1000 [07:22<42:29,  2.99s/it][Succeeded / Failed / Skipped / Total] 11 / 137 / 0 / 148:  15%|█▍        | 148/1000 [07:22<42:29,  2.99s/it][Succeeded / Failed / Skipped / Total] 11 / 137 / 0 / 148:  15%|█▍        | 149/1000 [07:30<42:53,  3.02s/it][Succeeded / Failed / Skipped / Total] 11 / 138 / 0 / 149:  15%|█▍        | 149/1000 [07:30<42:53,  3.02s/it][Succeeded / Failed / Skipped / Total] 11 / 138 / 0 / 149:  15%|█▌        | 150/1000 [07:34<42:53,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 139 / 0 / 150:  15%|█▌        | 150/1000 [07:34<42:53,  3.03s/it][Succeeded / Failed / Skipped / Total] 11 / 139 / 0 / 150:  15%|█▌        | 151/1000 [07:36<42:48,  3.03s/it][Succeeded / Failed / Skipped / Total] 12 / 139 / 0 / 151:  15%|█▌        | 151/1000 [07:36<42:48,  3.03s/it][Succeeded / Failed / Skipped / Total] 12 / 139 / 0 / 151:  15%|█▌        | 152/1000 [07:37<42:34,  3.01s/it][Succeeded / Failed / Skipped / Total] 12 / 140 / 0 / 152:  15%|█▌        | 152/1000 [07:37<42:34,  3.01s/it]Build a https redirect url for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[end]] ( HttpServletRequest [[ability]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[ability]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[ability]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[ability]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[ability]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[ability]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[ability]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 147 ---------------------------------------------
Returns an array of roles that have any of the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[express]] ( String ... [[form]] ) { for ( int i = 0 ; i < [[form]] . length ; i ++ ) { [[form]] [ i ] = "ROLE_" + [[form]] [ i ] ; } return [[form]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
Invoke the interceptor . --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[using]] ( HttpServletRequest [[ception]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Process the auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String presentedSeries = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[dicate]] ( String [ ] [[condition]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[condition]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[condition]] ) + "'" ) ; } final String presentedSeries = [[condition]] [ 0 ] ; final String presentedToken = [[condition]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 151 ---------------------------------------------
Display the public index of the user --> Get a client with a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[client]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Sets the exit user URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[main]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 141 / 0 / 153:  15%|█▌        | 153/1000 [07:37<42:14,  2.99s/it][Succeeded / Failed / Skipped / Total] 12 / 141 / 0 / 153:  15%|█▌        | 154/1000 [07:41<42:14,  3.00s/it][Succeeded / Failed / Skipped / Total] 12 / 142 / 0 / 154:  15%|█▌        | 154/1000 [07:41<42:14,  3.00s/it][Succeeded / Failed / Skipped / Total] 13 / 142 / 0 / 155:  16%|█▌        | 155/1000 [07:43<42:09,  2.99s/it][Succeeded / Failed / Skipped / Total] 13 / 142 / 0 / 155:  16%|█▌        | 156/1000 [07:44<41:51,  2.98s/it][Succeeded / Failed / Skipped / Total] 13 / 142 / 1 / 156:  16%|█▌        | 156/1000 [07:44<41:51,  2.98s/it][Succeeded / Failed / Skipped / Total] 14 / 142 / 1 / 157:  16%|█▌        | 157/1000 [07:44<41:35,  2.96s/it][Succeeded / Failed / Skipped / Total] 14 / 142 / 1 / 157:  16%|█▌        | 158/1000 [07:51<41:52,  2.98s/it][Succeeded / Failed / Skipped / Total] 14 / 143 / 1 / 158:  16%|█▌        | 158/1000 [07:51<41:52,  2.98s/it]Create a persistent login for the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[a]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[a]] ) ; addCookie ( [[a]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[manager]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 155 ---------------------------------------------
Spring security filter chain . --> Returns an array of filters . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean [[hasConfigurers]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[hasConfigurers]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[array]] ( ) throws Exception { boolean [[field]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[field]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 156 ---------------------------------------------
Convert a JWT to a collection of GrantedAuthorities . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Decodes a JWT . --> Decodes a set of tokens . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[set]] ) throws JwtException { JWT jwt = parse ( [[set]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[set]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 158 ---------------------------------------------
Authorize using url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 144 / 1 / 159:  16%|█▌        | 159/1000 [07:53<41:42,  2.98s/it][Succeeded / Failed / Skipped / Total] 14 / 144 / 1 / 159:  16%|█▌        | 160/1000 [07:53<41:26,  2.96s/it][Succeeded / Failed / Skipped / Total] 14 / 145 / 1 / 160:  16%|█▌        | 160/1000 [07:53<41:26,  2.96s/it][Succeeded / Failed / Skipped / Total] 14 / 146 / 1 / 161:  16%|█▌        | 161/1000 [07:55<41:18,  2.95s/it][Succeeded / Failed / Skipped / Total] 14 / 146 / 1 / 161:  16%|█▌        | 162/1000 [08:03<41:41,  2.99s/it][Succeeded / Failed / Skipped / Total] 14 / 147 / 1 / 162:  16%|█▌        | 162/1000 [08:03<41:41,  2.99s/it][Succeeded / Failed / Skipped / Total] 14 / 147 / 1 / 162:  16%|█▋        | 163/1000 [08:06<41:38,  2.98s/it][Succeeded / Failed / Skipped / Total] 15 / 147 / 1 / 163:  16%|█▋        | 163/1000 [08:06<41:38,  2.98s/it][Succeeded / Failed / Skipped / Total] 15 / 147 / 1 / 163:  16%|█▋        | 164/1000 [08:08<41:28,  2.98s/it]Returns true if the access expression is evaluated as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[check]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[a]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[a]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[a]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 160 ---------------------------------------------
Generates a new CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[host]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 161 ---------------------------------------------
Display admin page --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Display the add permission page for a contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[a]] ( @ RequestParam ( "contactId" ) long [[table]] ) { Contact contact = contactManager . getById ( [[table]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 163 ---------------------------------------------
Returns the role with the default prefix if the prefix is null or empty . --> Helper method to add a generic item to a list --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[generic]] ( String [[item]] , String [[list]] ) { if ( [[list]] == null ) { return [[list]] ; } if ( [[item]] == null || [[item]] . length ( ) == 0 ) { return [[list]] ; } if ( [[list]] . startsWith ( [[item]] ) ) { return [[list]] ; } return [[item]] + [[list]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 148 / 1 / 164:  16%|█▋        | 164/1000 [08:08<41:28,  2.98s/it][Succeeded / Failed / Skipped / Total] 15 / 148 / 1 / 164:  16%|█▋        | 165/1000 [08:11<41:26,  2.98s/it][Succeeded / Failed / Skipped / Total] 15 / 149 / 1 / 165:  16%|█▋        | 165/1000 [08:11<41:26,  2.98s/it][Succeeded / Failed / Skipped / Total] 15 / 149 / 1 / 165:  17%|█▋        | 166/1000 [08:13<41:18,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 150 / 1 / 166:  17%|█▋        | 166/1000 [08:13<41:18,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 150 / 1 / 166:  17%|█▋        | 167/1000 [08:15<41:09,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 151 / 1 / 167:  17%|█▋        | 167/1000 [08:15<41:09,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 151 / 1 / 167:  17%|█▋        | 168/1000 [08:18<41:09,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 152 / 1 / 168:  17%|█▋        | 168/1000 [08:18<41:09,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 153 / 1 / 169:  17%|█▋        | 169/1000 [08:18<40:52,  2.95s/it][Succeeded / Failed / Skipped / Total] 15 / 153 / 1 / 169:  17%|█▋        | 170/1000 [08:22<40:53,  2.96s/it]Add a permission to a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[end]] ( AddPermission addPermission , BindingResult result , ModelMap [[check]] ) { addPermissionValidator . validate ( [[end]] , result ) ; if ( result . hasErrors ( ) ) { [[check]] . put ( "recipients" , listRecipients ( ) ) ; [[check]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[end]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[end]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[end]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[check]] . put ( "recipients" , listRecipients ( ) ) ; [[check]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 165 ---------------------------------------------
Delete a permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[sid]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 166 ---------------------------------------------
Creates a user details resource factory bean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[method]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 167 ---------------------------------------------
Returns the values of an attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[start]] ( String [[format]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[format]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
Gets the first attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[index]] ( String [[variable]] ) { List < String > result = getAttributeValues ( [[variable]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 169 ---------------------------------------------
Decodes a byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[halt]] ( byte [ ] [[bit]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bit]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 154 / 1 / 170:  17%|█▋        | 170/1000 [08:22<40:53,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 155 / 1 / 171:  17%|█▋        | 171/1000 [08:28<41:04,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 155 / 1 / 171:  17%|█▋        | 172/1000 [08:29<40:50,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 156 / 1 / 172:  17%|█▋        | 172/1000 [08:29<40:50,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 157 / 1 / 173:  17%|█▋        | 173/1000 [08:33<40:52,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 157 / 1 / 173:  17%|█▋        | 174/1000 [08:37<40:56,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 158 / 1 / 174:  17%|█▋        | 174/1000 [08:37<40:56,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 159 / 1 / 175:  18%|█▊        | 175/1000 [08:39<40:47,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 159 / 1 / 175:  18%|█▊        | 176/1000 [08:41<40:42,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 160 / 1 / 176:  18%|█▊        | 176/1000 [08:41<40:42,  2.96s/it]Encodes a CharSequence to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
Add a new contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[client]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[base]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[base]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Find the attributes that are specified for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[array]] ( Method [[bus]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[bus]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[methodMap]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[procedure]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[end]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[search]] ( ) { Set < ConfigAttribute > [[fetch]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[fetch]] . addAll ( attributeList ) ; } return [[fetch]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Returns true if the method name matches the mapped method name . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[generator]] ( String [[n]] , String [[array]] ) { return ( [[array]] . endsWith ( "*" ) && [[n]] . startsWith ( [[array]] . substring ( 0 , [[array]] . length ( ) - 1 ) ) ) || ( [[array]] . startsWith ( "*" ) && [[n]] . endsWith ( [[array]] . substring ( 1 , [[array]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 161 / 1 / 177:  18%|█▊        | 177/1000 [08:42<40:31,  2.95s/it][Succeeded / Failed / Skipped / Total] 15 / 161 / 1 / 177:  18%|█▊        | 178/1000 [08:48<40:41,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 162 / 1 / 178:  18%|█▊        | 178/1000 [08:48<40:41,  2.97s/it][Succeeded / Failed / Skipped / Total] 15 / 163 / 1 / 179:  18%|█▊        | 179/1000 [08:50<40:31,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 163 / 1 / 179:  18%|█▊        | 180/1000 [08:50<40:17,  2.95s/it][Succeeded / Failed / Skipped / Total] 15 / 164 / 1 / 180:  18%|█▊        | 180/1000 [08:50<40:17,  2.95s/it][Succeeded / Failed / Skipped / Total] 15 / 165 / 1 / 181:  18%|█▊        | 181/1000 [08:51<40:03,  2.93s/it][Succeeded / Failed / Skipped / Total] 15 / 165 / 1 / 181:  18%|█▊        | 182/1000 [08:58<40:18,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 166 / 1 / 182:  18%|█▊        | 182/1000 [08:58<40:18,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 167 / 1 / 183:  18%|█▊        | 183/1000 [09:01<40:16,  2.96s/it][Succeeded / Failed / Skipped / Total] 15 / 167 / 1 / 183:  18%|█▊        | 184/1000 [09:01<40:03,  2.95s/it][Succeeded / Failed / Skipped / Total] 15 / 168 / 1 / 184:  18%|█▊        | 184/1000 [09:01<40:03,  2.95s/it]Configure any request . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[after]] ( ) { Assert . state ( ! this . [[hello]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[hello]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
Handles a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[fix]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Gets a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[capture]] ( Class < ? > clazz , String [[array]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[array]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[array]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[directory]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 182 ---------------------------------------------
Extract the SHA prefix from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[stack]] ( String [[heap]] ) { if ( ! [[heap]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[heap]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[heap]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 183 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[host]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[example]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . [[it]] , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 168 / 1 / 185:  18%|█▊        | 185/1000 [09:02<39:50,  2.93s/it][Succeeded / Failed / Skipped / Total] 16 / 168 / 1 / 185:  19%|█▊        | 186/1000 [09:06<39:51,  2.94s/it][Succeeded / Failed / Skipped / Total] 16 / 169 / 1 / 186:  19%|█▊        | 186/1000 [09:06<39:51,  2.94s/it][Succeeded / Failed / Skipped / Total] 16 / 170 / 1 / 187:  19%|█▊        | 187/1000 [09:10<39:51,  2.94s/it][Succeeded / Failed / Skipped / Total] 16 / 170 / 1 / 187:  19%|█▉        | 188/1000 [09:13<39:51,  2.94s/it][Succeeded / Failed / Skipped / Total] 17 / 170 / 1 / 188:  19%|█▉        | 188/1000 [09:13<39:51,  2.94s/it][Succeeded / Failed / Skipped / Total] 17 / 171 / 1 / 189:  19%|█▉        | 189/1000 [09:15<39:42,  2.94s/it][Succeeded / Failed / Skipped / Total] 17 / 171 / 1 / 189:  19%|█▉        | 190/1000 [09:21<39:51,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 172 / 1 / 190:  19%|█▉        | 190/1000 [09:21<39:51,  2.95s/it]Check for duplicate filters . --> Fixes duplicate filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[fix]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 186 ---------------------------------------------
The pre - authenticated entry point is called . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse [[access]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[access]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Checks if two byte arrays are equal . --> Returns true if the expected byte array matches the actual byte array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int [[result]] = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { [[result]] |= expected [ i ] ^ actual [ i ] ; } return [[result]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int [[bit]] = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { [[bit]] |= expected [ i ] ^ actual [ i ] ; } return [[bit]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Extracts the cause of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[space]] ( Throwable [[icon]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[icon]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[icon]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[enter]] ( String [[address]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[address]] ) , ( ) -> "'" + [[address]] + "' is not a valid redirect URL" ) ; this . [[table]] = [[address]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 173 / 1 / 191:  19%|█▉        | 191/1000 [09:21<39:38,  2.94s/it][Succeeded / Failed / Skipped / Total] 17 / 173 / 1 / 191:  19%|█▉        | 192/1000 [09:23<39:29,  2.93s/it][Succeeded / Failed / Skipped / Total] 17 / 174 / 1 / 192:  19%|█▉        | 192/1000 [09:23<39:29,  2.93s/it][Succeeded / Failed / Skipped / Total] 17 / 175 / 1 / 193:  19%|█▉        | 193/1000 [09:23<39:16,  2.92s/it][Succeeded / Failed / Skipped / Total] 17 / 175 / 1 / 193:  19%|█▉        | 194/1000 [09:32<39:36,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 176 / 1 / 194:  19%|█▉        | 194/1000 [09:32<39:36,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 177 / 1 / 195:  20%|█▉        | 195/1000 [09:33<39:25,  2.94s/it][Succeeded / Failed / Skipped / Total] 17 / 177 / 1 / 195:  20%|█▉        | 196/1000 [09:33<39:11,  2.92s/it][Succeeded / Failed / Skipped / Total] 17 / 178 / 1 / 196:  20%|█▉        | 196/1000 [09:33<39:11,  2.92s/it]Register an access manager . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition [[accessManager]] = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( [[accessManager]] ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( [[accessManager]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[enter]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition [[winner]] = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( [[winner]] ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( [[winner]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[like]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[n]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { [[n]] . add ( authority . getAuthority ( ) ) ; } return [[n]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the function to use when resolving hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[main]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Returns an attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[search]] ( String [[attributes]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[attributes]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 195 ---------------------------------------------
Returns true if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[array]] ( String [[foo]] ) { if ( [[foo]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[foo]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Convert a string identifier to a class identifier . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[format]] ( Serializable [[method]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[method]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[method]] = convertFromStringTo ( ( String ) [[method]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 179 / 1 / 197:  20%|█▉        | 197/1000 [09:36<39:08,  2.92s/it][Succeeded / Failed / Skipped / Total] 17 / 179 / 1 / 197:  20%|█▉        | 198/1000 [09:48<39:42,  2.97s/it][Succeeded / Failed / Skipped / Total] 17 / 180 / 1 / 198:  20%|█▉        | 198/1000 [09:48<39:42,  2.97s/it][Succeeded / Failed / Skipped / Total] 17 / 180 / 1 / 198:  20%|█▉        | 199/1000 [09:50<39:35,  2.97s/it][Succeeded / Failed / Skipped / Total] 17 / 181 / 1 / 199:  20%|█▉        | 199/1000 [09:50<39:35,  2.97s/it][Succeeded / Failed / Skipped / Total] 17 / 181 / 1 / 199:  20%|██        | 200/1000 [09:50<39:23,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 182 / 1 / 200:  20%|██        | 200/1000 [09:50<39:23,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 182 / 1 / 200:  20%|██        | 201/1000 [09:52<39:14,  2.95s/it]Build the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[insert]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[id]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[id]] . append ( servletPath ) ; if ( pathInfo != null ) { [[id]] . append ( pathInfo ) ; } } else { [[id]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[id]] . append ( "?" ) . append ( queryString ) ; } return [[id]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 198 ---------------------------------------------
Create or update an object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[main]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
Update the ObjectIdentity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[parentId]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[ole]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[ole]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[ole]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 200 ---------------------------------------------
Creates the entries for the given ACL . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[end]] ( final MutableAcl [[session]] ) { if ( [[session]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[session]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[session]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[session]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 183 / 1 / 201:  20%|██        | 201/1000 [09:52<39:14,  2.95s/it][Succeeded / Failed / Skipped / Total] 17 / 183 / 1 / 201:  20%|██        | 202/1000 [09:54<39:09,  2.94s/it][Succeeded / Failed / Skipped / Total] 18 / 183 / 1 / 202:  20%|██        | 202/1000 [09:54<39:09,  2.94s/it][Succeeded / Failed / Skipped / Total] 18 / 183 / 1 / 202:  20%|██        | 203/1000 [10:04<39:31,  2.98s/it][Succeeded / Failed / Skipped / Total] 18 / 184 / 1 / 203:  20%|██        | 203/1000 [10:04<39:31,  2.98s/it][Succeeded / Failed / Skipped / Total] 18 / 184 / 1 / 203:  20%|██        | 204/1000 [10:05<39:21,  2.97s/it][Succeeded / Failed / Skipped / Total] 18 / 185 / 1 / 204:  20%|██        | 204/1000 [10:05<39:21,  2.97s/it][Succeeded / Failed / Skipped / Total] 18 / 185 / 1 / 204:  20%|██        | 205/1000 [10:05<39:09,  2.96s/it][Succeeded / Failed / Skipped / Total] 18 / 186 / 1 / 205:  20%|██        | 205/1000 [10:05<39:09,  2.96s/it][Succeeded / Failed / Skipped / Total] 18 / 186 / 1 / 205:  21%|██        | 206/1000 [10:05<38:55,  2.94s/it][Succeeded / Failed / Skipped / Total] 18 / 187 / 1 / 206:  21%|██        | 206/1000 [10:05<38:55,  2.94s/it][Succeeded / Failed / Skipped / Total] 18 / 187 / 1 / 206:  21%|██        | 207/1000 [10:08<38:50,  2.94s/it][Succeeded / Failed / Skipped / Total] 19 / 187 / 1 / 207:  21%|██        | 207/1000 [10:08<38:50,  2.94s/it][Succeeded / Failed / Skipped / Total] 19 / 187 / 1 / 207:  21%|██        | 208/1000 [10:11<38:48,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 187 / 1 / 208:  21%|██        | 208/1000 [10:11<38:48,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 187 / 1 / 208:  21%|██        | 209/1000 [10:13<38:41,  2.93s/it]Save the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[http]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 202 ---------------------------------------------
Matches any exchange . --> Cast to ServerWebExchangeMatcher --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[cast]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 203 ---------------------------------------------
Creates a text encryptor for the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[simple]] ( CharSequence [[print]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[print]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Returns a new HexEncodingTextEncryptor that encrypts the given password using the given salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[attacker]] ( CharSequence [[agent]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[agent]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Returns a server web exchange matcher for the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[pattern]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[object]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[example]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[example]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 206 ---------------------------------------------
Queryable text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Determine the target URL . --> This method is called when an authentication is requested . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[i]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[i]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 208 ---------------------------------------------
Returns the directory with the immediate parent populated . --> Returns the component with the given id . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[component]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 188 / 1 / 209:  21%|██        | 209/1000 [10:13<38:41,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 188 / 1 / 209:  21%|██        | 210/1000 [10:14<38:31,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 189 / 1 / 210:  21%|██        | 210/1000 [10:14<38:31,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 189 / 1 / 210:  21%|██        | 211/1000 [10:16<38:25,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 190 / 1 / 211:  21%|██        | 211/1000 [10:16<38:25,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 190 / 1 / 211:  21%|██        | 212/1000 [10:20<38:27,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 191 / 1 / 212:  21%|██        | 212/1000 [10:20<38:27,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 191 / 1 / 212:  21%|██▏       | 213/1000 [10:20<38:14,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 192 / 1 / 213:  21%|██▏       | 213/1000 [10:20<38:14,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 192 / 1 / 213:  21%|██▏       | 214/1000 [10:22<38:06,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 193 / 1 / 214:  21%|██▏       | 214/1000 [10:22<38:06,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 193 / 1 / 214:  22%|██▏       | 215/1000 [10:30<38:22,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 194 / 1 / 215:  22%|██▏       | 215/1000 [10:30<38:22,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 194 / 1 / 215:  22%|██▏       | 216/1000 [10:31<38:11,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 195 / 1 / 216:  22%|██▏       | 216/1000 [10:31<38:11,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 195 / 1 / 216:  22%|██▏       | 217/1000 [10:36<38:16,  2.93s/it]Sets the target url parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[product]] ( String [[object]] ) { if ( [[object]] != null ) { Assert . hasText ( [[object]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[object]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 210 ---------------------------------------------
Determine the target url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[client]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
Write the headers to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[command]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[command]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[command]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[command]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[command]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[command]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 212 ---------------------------------------------
Build a DistinguishedName for the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[a]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[a]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 213 ---------------------------------------------
Create shared objects . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[join]] ( ) { Map < Class < ? extends Object > , Object > [[form]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[form]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[form]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[form]] . put ( ApplicationContext . class , context ) ; [[form]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[form]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[form]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 214 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[min]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Sets the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[dummy]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 216 ---------------------------------------------
Update the cache with the given key and value --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
[Succeeded / Failed / Skipped / Total] 20 / 196 / 1 / 217:  22%|██▏       | 217/1000 [10:36<38:16,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 196 / 1 / 217:  22%|██▏       | 218/1000 [10:39<38:14,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 197 / 1 / 218:  22%|██▏       | 218/1000 [10:39<38:14,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 197 / 1 / 218:  22%|██▏       | 219/1000 [10:39<38:01,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 198 / 1 / 219:  22%|██▏       | 219/1000 [10:39<38:01,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 198 / 1 / 219:  22%|██▏       | 220/1000 [10:47<38:16,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 199 / 1 / 220:  22%|██▏       | 220/1000 [10:47<38:16,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 199 / 1 / 220:  22%|██▏       | 221/1000 [10:49<38:07,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 200 / 1 / 221:  22%|██▏       | 221/1000 [10:49<38:07,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 200 / 1 / 221:  22%|██▏       | 222/1000 [10:50<38:01,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 201 / 1 / 222:  22%|██▏       | 222/1000 [10:50<38:01,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 201 / 1 / 222:  22%|██▏       | 223/1000 [10:54<38:01,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 202 / 1 / 223:  22%|██▏       | 223/1000 [10:54<38:01,  2.94s/it][Succeeded / Failed / Skipped / Total] 20 / 202 / 1 / 223:  22%|██▏       | 224/1000 [10:57<37:56,  2.93s/it]--------------------------------------------- Result 217 ---------------------------------------------
Internal parse date . --> [[[FAILED]]]

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int i = 0 ; ( [[date]] == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { [[date]] = [[formats]] [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[loop]] ( String [[names]] , DateFormat [ ] [[characters]] ) { Date [[function]] = null ; for ( int i = 0 ; ( [[function]] == null ) && ( i < [[characters]] . length ) ; i ++ ) { try { [[function]] = [[characters]] [ i ] . parse ( [[names]] ) ; } catch ( ParseException ignored ) { } } if ( [[function]] == null ) { return null ; } return new Long ( [[function]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 218 ---------------------------------------------
Returns a list of webSphere groups . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String securityName ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String securityName ) { Context [[parameter]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[test]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 220 ---------------------------------------------
Sets the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[main]] ( ) throws IOException { String [[ind]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[ind]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[ind]] ) ; Security . setProperty ( key , [[ind]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 221 ---------------------------------------------
Build a DistinguishedName for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[example]] ( String [[groups]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[groups]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Change user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 223 ---------------------------------------------
Checks if the maximum number of sessions allowed for this principal is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[data]] , int [[s]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[data]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[s]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
[Succeeded / Failed / Skipped / Total] 20 / 203 / 1 / 224:  22%|██▏       | 224/1000 [10:57<37:56,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 203 / 1 / 224:  22%|██▎       | 225/1000 [10:59<37:52,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 204 / 1 / 225:  22%|██▎       | 225/1000 [10:59<37:52,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 204 / 1 / 225:  23%|██▎       | 226/1000 [11:01<37:44,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 205 / 1 / 226:  23%|██▎       | 226/1000 [11:01<37:44,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 205 / 1 / 226:  23%|██▎       | 227/1000 [11:03<37:38,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 206 / 1 / 227:  23%|██▎       | 227/1000 [11:03<37:38,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 206 / 1 / 227:  23%|██▎       | 228/1000 [11:07<37:39,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 207 / 1 / 228:  23%|██▎       | 228/1000 [11:07<37:39,  2.93s/it][Succeeded / Failed / Skipped / Total] 20 / 207 / 1 / 228:  23%|██▎       | 229/1000 [11:09<37:32,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 208 / 1 / 229:  23%|██▎       | 229/1000 [11:09<37:32,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 208 / 1 / 229:  23%|██▎       | 230/1000 [11:09<37:21,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 209 / 1 / 230:  23%|██▎       | 230/1000 [11:09<37:21,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 209 / 1 / 230:  23%|██▎       | 231/1000 [11:13<37:20,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 210 / 1 / 231:  23%|██▎       | 231/1000 [11:13<37:20,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 210 / 1 / 231:  23%|██▎       | 232/1000 [11:15<37:15,  2.91s/it]--------------------------------------------- Result 224 ---------------------------------------------
Get the list of filters for the given url . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[select]] ( String [[e]] ) { return [[select]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[e]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 225 ---------------------------------------------
Returns the list of filters that match the request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[loop]] ( HttpServletRequest [[ment]] ) { for ( SecurityFilterChain [[attack]] : filterChains ) { if ( [[attack]] . matches ( [[ment]] ) ) { return [[attack]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Copy details from the source Authentication to the destination Authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[example]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[version]] ( PageContext pageContext ) { ServletContext [[error]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[error]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Updates the session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[generator]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Gets the full DN . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[box]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[block]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[block]] ) ) { return dn ; } [[block]] . append ( dn ) ; return [[block]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 230 ---------------------------------------------
Adds a list of filters to the RestAssured . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[fix]] ( List < Filter > [[files]] ) { Validate . notNull ( [[fix]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[fix]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a Preemptive basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[b]] = new PreemptiveBasicAuthScheme ( ) ; [[b]] . setUserName ( userName ) ; [[b]] . setPassword ( password ) ; return [[b]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 211 / 1 / 232:  23%|██▎       | 232/1000 [11:15<37:15,  2.91s/it][Succeeded / Failed / Skipped / Total] 20 / 211 / 1 / 232:  23%|██▎       | 233/1000 [11:20<37:21,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 212 / 1 / 233:  23%|██▎       | 233/1000 [11:20<37:21,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 212 / 1 / 233:  23%|██▎       | 234/1000 [11:23<37:16,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 213 / 1 / 234:  23%|██▎       | 234/1000 [11:23<37:16,  2.92s/it][Succeeded / Failed / Skipped / Total] 20 / 213 / 1 / 234:  24%|██▎       | 235/1000 [11:25<37:10,  2.92s/it][Succeeded / Failed / Skipped / Total] 21 / 213 / 1 / 235:  24%|██▎       | 235/1000 [11:25<37:10,  2.92s/it][Succeeded / Failed / Skipped / Total] 21 / 213 / 1 / 235:  24%|██▎       | 236/1000 [11:28<37:09,  2.92s/it][Succeeded / Failed / Skipped / Total] 22 / 213 / 1 / 236:  24%|██▎       | 236/1000 [11:28<37:09,  2.92s/it][Succeeded / Failed / Skipped / Total] 22 / 213 / 1 / 236:  24%|██▎       | 237/1000 [11:30<37:03,  2.91s/it][Succeeded / Failed / Skipped / Total] 22 / 214 / 1 / 237:  24%|██▎       | 237/1000 [11:30<37:03,  2.91s/it][Succeeded / Failed / Skipped / Total] 22 / 214 / 1 / 237:  24%|██▍       | 238/1000 [11:30<36:51,  2.90s/it]Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[draw]] ( Filter [[bucket]] , Filter ... additionalFilters ) { Validate . notNull ( [[bucket]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[bucket]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Sets up a proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[filter]] ( URI [[host]] ) { if ( [[host]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[filter]] ( new ProxySpecification ( [[host]] . getHost ( ) , [[host]] . getPort ( ) , [[host]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[array]] ( String userName , String password ) { final BasicAuthScheme [[error]] = new BasicAuthScheme ( ) ; [[error]] . setUserName ( userName ) ; [[error]] . setPassword ( password ) ; return [[error]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Prints the response body to the given output stream . --> Returns a string representation of a cookie . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[cookie]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Sets the default charset for the query parameter . --> End encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[end]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 237 ---------------------------------------------
Creates a form authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[generator]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 238 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 215 / 1 / 238:  24%|██▍       | 238/1000 [11:30<36:51,  2.90s/it][Succeeded / Failed / Skipped / Total] 22 / 215 / 1 / 238:  24%|██▍       | 239/1000 [11:34<36:52,  2.91s/it][Succeeded / Failed / Skipped / Total] 23 / 215 / 1 / 239:  24%|██▍       | 239/1000 [11:34<36:52,  2.91s/it][Succeeded / Failed / Skipped / Total] 23 / 215 / 1 / 239:  24%|██▍       | 240/1000 [11:36<36:45,  2.90s/it][Succeeded / Failed / Skipped / Total] 23 / 216 / 1 / 240:  24%|██▍       | 240/1000 [11:36<36:45,  2.90s/it][Succeeded / Failed / Skipped / Total] 23 / 216 / 1 / 240:  24%|██▍       | 241/1000 [11:36<36:34,  2.89s/it][Succeeded / Failed / Skipped / Total] 23 / 217 / 1 / 241:  24%|██▍       | 241/1000 [11:36<36:34,  2.89s/it][Succeeded / Failed / Skipped / Total] 23 / 217 / 1 / 241:  24%|██▍       | 242/1000 [11:42<36:41,  2.90s/it][Succeeded / Failed / Skipped / Total] 23 / 218 / 1 / 242:  24%|██▍       | 242/1000 [11:42<36:41,  2.90s/it][Succeeded / Failed / Skipped / Total] 23 / 219 / 1 / 243:  24%|██▍       | 243/1000 [11:42<36:29,  2.89s/it][Succeeded / Failed / Skipped / Total] 23 / 219 / 1 / 243:  24%|██▍       | 244/1000 [11:44<36:24,  2.89s/it][Succeeded / Failed / Skipped / Total] 23 / 220 / 1 / 244:  24%|██▍       | 244/1000 [11:44<36:24,  2.89s/it]Creates a new RestAssuredConfig configured with the specified redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[element]] ) { notNull ( [[element]] , "Redirect config" ) ; return new RestAssuredConfig ( [[element]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 239 ---------------------------------------------
Creates a new RestAssuredMockMvcConfig with the specified log config . --> Creates a new instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[session]] ( LogConfig logConfig ) { notNull ( [[session]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[session]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
Creates a NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String [[password]] , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[filter]] ( String userName , String [[base]] , String workstation , String domain ) { final NTLMAuthScheme [[output]] = new NTLMAuthScheme ( ) ; [[output]] . setUserName ( userName ) ; [[output]] . setPassword ( [[base]] ) ; [[output]] . setWorkstation ( workstation ) ; [[output]] . setDomain ( domain ) ; return [[output]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[file]] ( ObjectMapperType [[object]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[file]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[user]] ( SessionConfig sessionConfig ) { notNull ( [[user]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[user]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the jaxb object mapper factory . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[daemon]] ( JAXBObjectMapperFactory [[builder]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[daemon]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified JSON configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[session]] ( JsonConfig [[element]] ) { notNull ( [[session]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[session]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 245 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 221 / 1 / 245:  24%|██▍       | 245/1000 [11:45<36:12,  2.88s/it][Succeeded / Failed / Skipped / Total] 23 / 221 / 1 / 245:  25%|██▍       | 246/1000 [11:49<36:13,  2.88s/it][Succeeded / Failed / Skipped / Total] 24 / 221 / 1 / 246:  25%|██▍       | 246/1000 [11:49<36:13,  2.88s/it][Succeeded / Failed / Skipped / Total] 24 / 221 / 2 / 247:  25%|██▍       | 247/1000 [11:49<36:02,  2.87s/it][Succeeded / Failed / Skipped / Total] 24 / 221 / 2 / 247:  25%|██▍       | 248/1000 [11:50<35:54,  2.86s/it][Succeeded / Failed / Skipped / Total] 24 / 222 / 2 / 248:  25%|██▍       | 248/1000 [11:50<35:54,  2.86s/it][Succeeded / Failed / Skipped / Total] 25 / 222 / 2 / 249:  25%|██▍       | 249/1000 [11:50<35:43,  2.85s/it][Succeeded / Failed / Skipped / Total] 25 / 222 / 2 / 249:  25%|██▌       | 250/1000 [11:52<35:38,  2.85s/it][Succeeded / Failed / Skipped / Total] 26 / 222 / 2 / 250:  25%|██▌       | 250/1000 [11:52<35:38,  2.85s/it][Succeeded / Failed / Skipped / Total] 27 / 222 / 2 / 251:  25%|██▌       | 251/1000 [11:53<35:28,  2.84s/it][Succeeded / Failed / Skipped / Total] 27 / 222 / 2 / 251:  25%|██▌       | 252/1000 [11:54<35:20,  2.83s/it][Succeeded / Failed / Skipped / Total] 28 / 222 / 2 / 252:  25%|██▌       | 252/1000 [11:54<35:20,  2.83s/it]Sets the object mapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[version]] ( ObjectMapperConfig [[example]] ) { notNull ( [[version]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[version]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 246 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified async config . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[boot]] ( AsyncConfig asyncConfig ) { notNull ( [[boot]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[boot]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the XML configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[log]] ( XmlConfig xmlConfig ) { notNull ( [[log]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[log]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 249 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig with the specified encoder configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[id]] ( EncoderConfig [[identification]] ) { notNull ( [[id]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[id]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 250 ---------------------------------------------
Sets the header configuration . --> Creates a new RestAssuredMockMvcConfig for a procedure . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig [[headerConfig]] ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[procedure]] ( HeaderConfig [[call]] ) { notNull ( [[procedure]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[procedure]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the multi - part configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[log]] ( MultiPartConfig multiPartConfig ) { notNull ( [[log]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[log]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the mock parameter configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( MockMvcParamConfig paramConfig ) { notNull ( [[bus]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[bus]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 222 / 2 / 253:  25%|██▌       | 253/1000 [11:54<35:10,  2.83s/it][Succeeded / Failed / Skipped / Total] 29 / 222 / 2 / 253:  25%|██▌       | 254/1000 [11:56<35:02,  2.82s/it][Succeeded / Failed / Skipped / Total] 29 / 223 / 2 / 254:  25%|██▌       | 254/1000 [11:56<35:02,  2.82s/it][Succeeded / Failed / Skipped / Total] 29 / 224 / 2 / 255:  26%|██▌       | 255/1000 [11:59<35:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 29 / 224 / 2 / 255:  26%|██▌       | 256/1000 [12:09<35:19,  2.85s/it][Succeeded / Failed / Skipped / Total] 29 / 225 / 2 / 256:  26%|██▌       | 256/1000 [12:09<35:19,  2.85s/it][Succeeded / Failed / Skipped / Total] 29 / 225 / 2 / 256:  26%|██▌       | 257/1000 [12:10<35:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 226 / 2 / 257:  26%|██▌       | 257/1000 [12:10<35:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 226 / 2 / 257:  26%|██▌       | 258/1000 [12:10<35:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 29 / 227 / 2 / 258:  26%|██▌       | 258/1000 [12:10<35:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 29 / 227 / 2 / 258:  26%|██▌       | 259/1000 [12:12<34:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 29 / 228 / 2 / 259:  26%|██▌       | 259/1000 [12:12<34:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 29 / 228 / 2 / 259:  26%|██▌       | 260/1000 [12:20<35:07,  2.85s/it][Succeeded / Failed / Skipped / Total] 29 / 229 / 2 / 260:  26%|██▌       | 260/1000 [12:20<35:07,  2.85s/it][Succeeded / Failed / Skipped / Total] 29 / 229 / 2 / 260:  26%|██▌       | 261/1000 [12:22<35:03,  2.85s/it]Creates a new mock config instance with the specified matcher configuration . --> Returns a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[execute]] ( MatcherConfig matcherConfig ) { notNull ( [[execute]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[execute]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[group]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
Declares the given namespaces . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[manager]] ( Map < String , String > [[comments]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[comments]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[procedure]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the default request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[assume]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Set the proxy to connect to . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[list]] ( String [[fetch]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[fetch]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 259 ---------------------------------------------
Sets the declared namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[cast]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 260 ---------------------------------------------
Adds a header to this multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[of]] ( String [[id]] , String value ) { Validate . notEmpty ( [[id]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 230 / 2 / 261:  26%|██▌       | 261/1000 [12:22<35:03,  2.85s/it][Succeeded / Failed / Skipped / Total] 29 / 230 / 2 / 261:  26%|██▌       | 262/1000 [12:24<34:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 231 / 2 / 262:  26%|██▌       | 262/1000 [12:24<34:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 231 / 2 / 262:  26%|██▋       | 263/1000 [12:25<34:50,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 232 / 2 / 263:  26%|██▋       | 263/1000 [12:25<34:50,  2.84s/it][Succeeded / Failed / Skipped / Total] 29 / 232 / 2 / 263:  26%|██▋       | 264/1000 [12:26<34:41,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 232 / 2 / 264:  26%|██▋       | 264/1000 [12:26<34:41,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 232 / 2 / 264:  26%|██▋       | 265/1000 [12:31<34:44,  2.84s/it][Succeeded / Failed / Skipped / Total] 30 / 233 / 2 / 265:  26%|██▋       | 265/1000 [12:31<34:44,  2.84s/it][Succeeded / Failed / Skipped / Total] 30 / 233 / 2 / 265:  27%|██▋       | 266/1000 [12:34<34:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 30 / 234 / 2 / 266:  27%|██▋       | 266/1000 [12:34<34:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 30 / 234 / 2 / 266:  27%|██▋       | 267/1000 [12:34<34:32,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 235 / 2 / 267:  27%|██▋       | 267/1000 [12:34<34:32,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 235 / 2 / 267:  27%|██▋       | 268/1000 [12:35<34:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 30 / 236 / 2 / 268:  27%|██▋       | 268/1000 [12:35<34:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 30 / 236 / 2 / 268:  27%|██▋       | 269/1000 [12:38<34:22,  2.82s/it]Sets the name of the control . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[end]] ( String [[exit]] ) { Validate . notEmpty ( [[end]] , "Control name cannot be empty" ) ; this . controlName = [[end]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Sets basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[main]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
Reset the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[python]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Adds a header to the response . --> Formats the response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[format]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Build the response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[bar]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 266 ---------------------------------------------
Creates a new Headers object with the given header and additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[after]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[a]] = new LinkedList < Header > ( ) ; [[a]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[a]] , additionalHeaders ) ; } return new Headers ( [[a]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Returns a new instance of the DetailedCookieMatcher that matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super String > [[stack]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[stack]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Set the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[main]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 269 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 237 / 2 / 269:  27%|██▋       | 269/1000 [12:38<34:22,  2.82s/it][Succeeded / Failed / Skipped / Total] 30 / 237 / 2 / 269:  27%|██▋       | 270/1000 [12:42<34:22,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 238 / 2 / 270:  27%|██▋       | 270/1000 [12:42<34:22,  2.83s/it][Succeeded / Failed / Skipped / Total] 30 / 239 / 2 / 271:  27%|██▋       | 271/1000 [12:42<34:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 30 / 239 / 2 / 271:  27%|██▋       | 272/1000 [12:43<34:04,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 240 / 2 / 272:  27%|██▋       | 272/1000 [12:43<34:04,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 241 / 2 / 273:  27%|██▋       | 273/1000 [12:48<34:05,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 241 / 2 / 273:  27%|██▋       | 274/1000 [12:50<34:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 242 / 2 / 274:  27%|██▋       | 274/1000 [12:50<34:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 243 / 2 / 275:  28%|██▊       | 275/1000 [12:51<33:53,  2.81s/it][Succeeded / Failed / Skipped / Total] 30 / 243 / 2 / 275:  28%|██▊       | 276/1000 [12:51<33:43,  2.80s/it][Succeeded / Failed / Skipped / Total] 30 / 244 / 2 / 276:  28%|██▊       | 276/1000 [12:51<33:43,  2.80s/it][Succeeded / Failed / Skipped / Total] 30 / 245 / 2 / 277:  28%|██▊       | 277/1000 [12:56<33:46,  2.80s/it][Succeeded / Failed / Skipped / Total] 30 / 245 / 2 / 277:  28%|██▊       | 278/1000 [12:58<33:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 30 / 246 / 2 / 278:  28%|██▊       | 278/1000 [12:58<33:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 30 / 247 / 2 / 279:  28%|██▊       | 279/1000 [12:59<33:34,  2.79s/it][Succeeded / Failed / Skipped / Total] 30 / 247 / 2 / 279:  28%|██▊       | 280/1000 [12:59<33:25,  2.78s/it]Returns a new DetailedCookieMatcher that matches a cookie comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[var]] ( Matcher < ? super String > [[object]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[object]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[foo]] ( Matcher < ? super String > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches a cookie with a expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[list]] ( Matcher < ? super Date > [[k]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[k]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[to]] ( Matcher < ? super String > [[field]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[field]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[to]] ( Matcher < ? super Boolean > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches a cookie with a version property . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[var]] ( Matcher < ? super Integer > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[user]] ( Matcher < ? super Boolean > [[header]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[header]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the specified maxAge . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[var]] ( Matcher < ? super Integer > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expects the given header name to match the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[headerName]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[id]] ( String [[n]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[n]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Returns a new proxy specification with the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[group]] ( String [[protocol]] ) { return new ProxySpecification ( [[protocol]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 279 ---------------------------------------------
Expect a cookie to be set . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[a]] ( String [[bin]] , String expectedValue ) { spec . cookie ( [[bin]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 248 / 2 / 280:  28%|██▊       | 280/1000 [12:59<33:25,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 248 / 2 / 281:  28%|██▊       | 281/1000 [13:02<33:21,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 248 / 2 / 281:  28%|██▊       | 282/1000 [13:04<33:16,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 249 / 2 / 282:  28%|██▊       | 282/1000 [13:04<33:16,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 250 / 2 / 283:  28%|██▊       | 283/1000 [13:08<33:18,  2.79s/it][Succeeded / Failed / Skipped / Total] 31 / 250 / 2 / 283:  28%|██▊       | 284/1000 [13:10<33:12,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 251 / 2 / 284:  28%|██▊       | 284/1000 [13:10<33:12,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 252 / 2 / 285:  28%|██▊       | 285/1000 [13:12<33:08,  2.78s/it][Succeeded / Failed / Skipped / Total] 31 / 252 / 2 / 285:  29%|██▊       | 286/1000 [13:14<33:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 32 / 252 / 2 / 286:  29%|██▊       | 286/1000 [13:14<33:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 33 / 252 / 2 / 287:  29%|██▊       | 287/1000 [13:17<33:01,  2.78s/it][Succeeded / Failed / Skipped / Total] 33 / 252 / 2 / 287:  29%|██▉       | 288/1000 [13:17<32:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 253 / 2 / 288:  29%|██▉       | 288/1000 [13:17<32:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 254 / 2 / 289:  29%|██▉       | 289/1000 [13:20<32:50,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 254 / 2 / 289:  29%|██▉       | 290/1000 [13:23<32:46,  2.77s/it]Expect a header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[declaration]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Returns a new JsonPathConfig configured with a number return type . --> Creates a new JsonPathConfig instance with the default parser type gson object mapper factory jackson1 object mapper factory johnzon object mapper factory --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[of]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[of]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[list]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[list]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Enable logging of request and response if validation fails . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[mode]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 284 ---------------------------------------------
Default logging stream . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[generator]] ( PrintStream [[control]] ) { return new LogConfig ( [[control]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 285 ---------------------------------------------
Sets the default boundary . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[node]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[node]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Adds an attribute to the request . --> Adds an array of values to the list of values . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[list]] ( String [[array]] , Object attributeValue ) { spec . attribute ( [[array]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Adds additional result handlers to the request . --> Sets the generator for the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[generator]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[id]] ( String [[parameters]] , String headerValue ) { spec . header ( [[parameters]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Creates a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[command]] ( URI uri , String httpMethod , boolean hasBody ) { String [[client]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[client]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 255 / 2 / 290:  29%|██▉       | 290/1000 [13:23<32:46,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 256 / 2 / 291:  29%|██▉       | 291/1000 [13:26<32:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 256 / 2 / 291:  29%|██▉       | 292/1000 [13:31<32:46,  2.78s/it][Succeeded / Failed / Skipped / Total] 33 / 257 / 2 / 292:  29%|██▉       | 292/1000 [13:31<32:46,  2.78s/it][Succeeded / Failed / Skipped / Total] 33 / 258 / 2 / 293:  29%|██▉       | 293/1000 [13:33<32:42,  2.78s/it][Succeeded / Failed / Skipped / Total] 33 / 258 / 2 / 293:  29%|██▉       | 294/1000 [13:35<32:38,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 259 / 2 / 294:  29%|██▉       | 294/1000 [13:35<32:38,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 260 / 2 / 295:  30%|██▉       | 295/1000 [13:35<32:29,  2.77s/it][Succeeded / Failed / Skipped / Total] 33 / 260 / 2 / 295:  30%|██▉       | 296/1000 [13:37<32:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 261 / 2 / 296:  30%|██▉       | 296/1000 [13:37<32:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 262 / 2 / 297:  30%|██▉       | 297/1000 [13:39<32:20,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 262 / 2 / 297:  30%|██▉       | 298/1000 [13:41<32:14,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 263 / 2 / 298:  30%|██▉       | 298/1000 [13:41<32:14,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 264 / 2 / 299:  30%|██▉       | 299/1000 [13:43<32:11,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 264 / 2 / 299:  30%|███       | 300/1000 [13:45<32:07,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 265 / 2 / 300:  30%|███       | 300/1000 [13:45<32:07,  2.75s/it]Adds a multi - part control . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String [[contentBody]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[mode]] ( String controlName , String [[address]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[empty]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[port]] = new HashMap < String , Object > ( httpClientParams ) ; [[port]] . put ( parameterName , parameterValue ) ; return new [[empty]] ( httpClientFactory , [[port]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
Creates a new HttpClientConfig with the specified HttpClientFactory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[system]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[system]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 293 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[error]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[error]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the value of the property at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[method]] > [[method]] get ( String path ) { final JSONAssertion [[field]] = createJsonAssertion ( path , params ) ; final Object [[route]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[method]] ) [[field]] . getResult ( [[route]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 295 ---------------------------------------------
Adds the specified HTTP client parameters to the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[group]] ( Map < String , ? > [[file]] ) { notNull ( [[file]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[files]] ) ; newParams . putAll ( [[file]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the integer value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[example]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the byte value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[process]] ( String [[address]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the short value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[run]] ( String [[j]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the float value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[execute]] ( String [[values]] ) { final Object value = get ( [[values]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Returns the long value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[run]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 301 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 266 / 2 / 301:  30%|███       | 301/1000 [13:46<31:59,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 266 / 2 / 301:  30%|███       | 302/1000 [13:53<32:05,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 267 / 2 / 302:  30%|███       | 302/1000 [13:53<32:05,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 268 / 2 / 303:  30%|███       | 303/1000 [13:54<31:59,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 268 / 2 / 303:  30%|███       | 304/1000 [13:57<31:58,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 269 / 2 / 304:  30%|███       | 304/1000 [13:57<31:58,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 270 / 2 / 305:  30%|███       | 305/1000 [14:01<31:57,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 270 / 2 / 305:  31%|███       | 306/1000 [14:01<31:49,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 271 / 2 / 306:  31%|███       | 306/1000 [14:01<31:49,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 272 / 2 / 307:  31%|███       | 307/1000 [14:03<31:44,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 272 / 2 / 307:  31%|███       | 308/1000 [14:05<31:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 273 / 2 / 308:  31%|███       | 308/1000 [14:05<31:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 274 / 2 / 309:  31%|███       | 309/1000 [14:12<31:47,  2.76s/it][Succeeded / Failed / Skipped / Total] 33 / 274 / 2 / 309:  31%|███       | 310/1000 [14:13<31:38,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 275 / 2 / 310:  31%|███       | 310/1000 [14:13<31:38,  2.75s/it]Returns the double value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[after]] ( String [[a]] ) { final Object value = get ( [[a]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Get a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[a]] , V > Map < [[a]] , V > [[follow]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Returns the value of the given path as an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[frame]] > [[frame]] getObject ( String path , Class < [[frame]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Gets a list of objects from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[call]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[procedure]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[procedure]] != null ) { for ( T t : [[procedure]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[line]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[client]] ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[end]] ( String [[bucket]] , Collection < ? > [[bucket]] ) { spec . param ( [[bucket]] , [[bucket]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Sets the form parameter update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[user]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
Creates a filter that logs the response to the given stream if the matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[option]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 276 / 2 / 311:  31%|███       | 311/1000 [14:16<31:37,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 276 / 2 / 311:  31%|███       | 312/1000 [14:17<31:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 277 / 2 / 312:  31%|███       | 312/1000 [14:17<31:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 278 / 2 / 313:  31%|███▏      | 313/1000 [14:18<31:23,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 278 / 2 / 313:  31%|███▏      | 314/1000 [14:21<31:22,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 279 / 2 / 314:  31%|███▏      | 314/1000 [14:21<31:22,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 280 / 2 / 315:  32%|███▏      | 315/1000 [14:23<31:17,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 280 / 2 / 315:  32%|███▏      | 316/1000 [14:25<31:13,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 281 / 2 / 316:  32%|███▏      | 316/1000 [14:25<31:13,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 282 / 2 / 317:  32%|███▏      | 317/1000 [14:29<31:13,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 282 / 2 / 317:  32%|███▏      | 318/1000 [14:34<31:15,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 283 / 2 / 318:  32%|███▏      | 318/1000 [14:34<31:15,  2.75s/it]Clean up the backing map for the given keys and sources . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[fix]] ( Set < KeyAndSource > [[a]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[a]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Creates a new Cookies instance with the given cookie and additional cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[list]] ( Cookie cookie , Cookie ... [[list]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[list]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
Index the bindings for this level . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[control]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 314 ---------------------------------------------
Converts a constant string binding to a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[error]] ( Key < T > [[arrays]] , Errors [[string]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[like]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Remove failed jit binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[main]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds the injector to the state . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[main]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 284 / 2 / 319:  32%|███▏      | 319/1000 [14:38<31:14,  2.75s/it][Succeeded / Failed / Skipped / Total] 33 / 284 / 2 / 319:  32%|███▏      | 320/1000 [14:38<31:06,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 285 / 2 / 320:  32%|███▏      | 320/1000 [14:38<31:06,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 286 / 2 / 321:  32%|███▏      | 321/1000 [14:40<31:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 286 / 2 / 321:  32%|███▏      | 322/1000 [14:43<31:00,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 287 / 2 / 322:  32%|███▏      | 322/1000 [14:43<31:00,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 288 / 2 / 323:  32%|███▏      | 323/1000 [14:45<30:56,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 288 / 2 / 323:  32%|███▏      | 324/1000 [14:47<30:51,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 289 / 2 / 324:  32%|███▏      | 324/1000 [14:47<30:51,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 290 / 2 / 325:  32%|███▎      | 325/1000 [14:50<30:50,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 290 / 2 / 325:  33%|███▎      | 326/1000 [14:54<30:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 291 / 2 / 326:  33%|███▎      | 326/1000 [14:54<30:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 292 / 2 / 327:  33%|███▎      | 327/1000 [14:54<30:41,  2.74s/it][Succeeded / Failed / Skipped / Total] 33 / 292 / 2 / 327:  33%|███▎      | 328/1000 [14:56<30:36,  2.73s/it]Binds a logger to the injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[main]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Cleanup a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[method]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[method]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 321 ---------------------------------------------
Returns an array containing all of the parameters provided by the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[model]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 322 ---------------------------------------------
Returns the type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[function]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[join]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Returns true if a method overrides b . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[program]] ( Method [[b1]] , Method [[1a]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 325 ---------------------------------------------
Check for misplaced binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
Resolves all of the given types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[swap]] ( Type [ ] [[series]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[series]] . length ] ; for ( int t = 0 ; t < [[series]] . length ; t ++ ) { result [ t ] = resolve ( [[series]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 327 ---------------------------------------------
Prepare the built - in converters . --> [[[FAILED]]]

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[function]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 328 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 293 / 2 / 328:  33%|███▎      | 328/1000 [14:56<30:36,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 294 / 2 / 329:  33%|███▎      | 329/1000 [14:59<30:34,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 294 / 2 / 329:  33%|███▎      | 330/1000 [15:01<30:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 295 / 2 / 330:  33%|███▎      | 330/1000 [15:01<30:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 296 / 2 / 331:  33%|███▎      | 331/1000 [15:02<30:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 296 / 2 / 331:  33%|███▎      | 332/1000 [15:05<30:21,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 297 / 2 / 332:  33%|███▎      | 332/1000 [15:05<30:21,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 298 / 2 / 333:  33%|███▎      | 333/1000 [15:10<30:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 298 / 2 / 333:  33%|███▎      | 334/1000 [15:11<30:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 299 / 2 / 334:  33%|███▎      | 334/1000 [15:11<30:16,  2.73s/it]Canonicalize a class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 329 ---------------------------------------------
Canonicalizes a type literal for a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[declare]] ( TypeLiteral < T > [[array]] ) { Type type = [[array]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[array]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[array]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[a]] ) { return [[a]] . getAnnotation ( ) == null ? [[a]] : Key . get ( [[a]] . getTypeLiteral ( ) , [[a]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 331 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 332 ---------------------------------------------
Checks if the class loader has the same version of cglib . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[load]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 333 ---------------------------------------------
Validates all of the pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[start]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 300 / 2 / 335:  34%|███▎      | 335/1000 [15:12<30:12,  2.73s/it][Succeeded / Failed / Skipped / Total] 33 / 300 / 2 / 335:  34%|███▎      | 336/1000 [15:14<30:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 33 / 301 / 2 / 336:  34%|███▎      | 336/1000 [15:14<30:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 33 / 302 / 2 / 337:  34%|███▎      | 337/1000 [15:17<30:04,  2.72s/it][Succeeded / Failed / Skipped / Total] 33 / 302 / 2 / 337:  34%|███▍      | 338/1000 [15:25<30:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 302 / 2 / 338:  34%|███▍      | 338/1000 [15:25<30:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 302 / 2 / 338:  34%|███▍      | 339/1000 [15:26<30:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 303 / 2 / 339:  34%|███▍      | 339/1000 [15:26<30:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 303 / 2 / 339:  34%|███▍      | 340/1000 [15:28<30:02,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 304 / 2 / 340:  34%|███▍      | 340/1000 [15:28<30:02,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 304 / 2 / 340:  34%|███▍      | 341/1000 [15:33<30:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 305 / 2 / 341:  34%|███▍      | 341/1000 [15:33<30:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 305 / 2 / 341:  34%|███▍      | 342/1000 [15:39<30:08,  2.75s/it]Returns true if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[test]] ( Member [[a]] ) { if ( ! Modifier . isPublic ( [[a]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[a]] ; if ( [[a]] instanceof Constructor ) { [[a]] = ( ( Constructor ) [[a]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[a]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[a]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[membership]] : [[a]] ) { if ( ! Modifier . isPublic ( [[membership]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 336 ---------------------------------------------
Adds the servlet request dispatcher to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[authentication]] ( ServletRequest [[active]] , final ManagedServletPipeline [[an]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 337 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[about]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Normalize a path . --> Remove the query from the id --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[filter]] ( String [[id]] ) { StringBuilder sb = new StringBuilder ( [[id]] . length ( ) ) ; int queryStart = [[id]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[id]] . substring ( queryStart ) ; [[id]] = [[id]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[fix]] ( Class < ? extends Annotation > [[returns]] ) { Retention retention = [[returns]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
Make an injectable for the given Scoping . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[evaluation]] ( Scoping scoping , InjectorImpl [[actions]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[actions]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 341 ---------------------------------------------
Returns the scope for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[where]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[where]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 306 / 2 / 342:  34%|███▍      | 342/1000 [15:39<30:08,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 306 / 2 / 342:  34%|███▍      | 343/1000 [15:41<30:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 307 / 2 / 343:  34%|███▍      | 343/1000 [15:41<30:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 307 / 2 / 343:  34%|███▍      | 344/1000 [15:42<29:56,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 308 / 2 / 344:  34%|███▍      | 344/1000 [15:42<29:56,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 308 / 2 / 344:  34%|███▍      | 345/1000 [15:44<29:52,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 309 / 2 / 345:  34%|███▍      | 345/1000 [15:44<29:52,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 309 / 2 / 345:  35%|███▍      | 346/1000 [15:45<29:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 310 / 2 / 346:  35%|███▍      | 346/1000 [15:45<29:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 310 / 2 / 346:  35%|███▍      | 347/1000 [15:49<29:46,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 311 / 2 / 347:  35%|███▍      | 347/1000 [15:49<29:46,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 311 / 2 / 347:  35%|███▍      | 348/1000 [15:51<29:42,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 312 / 2 / 348:  35%|███▍      | 348/1000 [15:51<29:42,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 312 / 2 / 348:  35%|███▍      | 349/1000 [15:56<29:43,  2.74s/it]Returns the name of a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[enter]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[end]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Finds the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[annotationType]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[annotationType]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[annotationType]] ) ; } else { found = [[annotationType]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[fix]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[error]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[error]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[error]] ) ; } else { found = [[error]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Returns the key for the given type member and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[execute]] ( TypeLiteral < ? > [[error]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[error]] ) : Key . get ( [[error]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 346 ---------------------------------------------
Adds a direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[main]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 347 ---------------------------------------------
Get a ConstructorInjector from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[buy]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[layer]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[layer]] ) ) ; return [[layer]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 313 / 2 / 349:  35%|███▍      | 349/1000 [15:56<29:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 313 / 2 / 349:  35%|███▌      | 350/1000 [16:00<29:42,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 314 / 2 / 350:  35%|███▌      | 350/1000 [16:00<29:42,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 314 / 2 / 350:  35%|███▌      | 351/1000 [16:01<29:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 315 / 2 / 351:  35%|███▌      | 351/1000 [16:01<29:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 315 / 2 / 351:  35%|███▌      | 352/1000 [16:03<29:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 316 / 2 / 352:  35%|███▌      | 352/1000 [16:03<29:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 316 / 2 / 352:  35%|███▌      | 353/1000 [16:04<29:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 317 / 2 / 353:  35%|███▌      | 353/1000 [16:04<29:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 34 / 317 / 2 / 353:  35%|███▌      | 354/1000 [16:04<29:19,  2.72s/it][Succeeded / Failed / Skipped / Total] 34 / 318 / 2 / 354:  35%|███▌      | 354/1000 [16:04<29:19,  2.72s/it][Succeeded / Failed / Skipped / Total] 34 / 318 / 2 / 354:  36%|███▌      | 355/1000 [16:19<29:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 319 / 2 / 355:  36%|███▌      | 355/1000 [16:19<29:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 319 / 2 / 355:  36%|███▌      | 356/1000 [16:19<29:31,  2.75s/it]Checks if the interceptor class has a scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[on]] ( Class < ? extends Interceptor > [[end]] ) { for ( Annotation annotation : [[end]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Write a replace message to the stream . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[end]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 351 ---------------------------------------------
Returns a module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[example]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 352 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[nos]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 353 ---------------------------------------------
Create a new instance of the given construction context . --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext [[statement]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[statement]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 354 ---------------------------------------------
Creates a new map binder with the specified key and value type and annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < [[K]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[application]] , V > RealMapBinder < [[application]] , V > [[end]] ( Binder binder , TypeLiteral < [[application]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[end]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if a type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[merge]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 320 / 2 / 356:  36%|███▌      | 356/1000 [16:19<29:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 320 / 2 / 356:  36%|███▌      | 357/1000 [16:21<29:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 321 / 2 / 357:  36%|███▌      | 357/1000 [16:21<29:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 321 / 2 / 357:  36%|███▌      | 358/1000 [16:32<29:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 322 / 2 / 358:  36%|███▌      | 358/1000 [16:32<29:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 323 / 2 / 359:  36%|███▌      | 359/1000 [16:32<29:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 323 / 2 / 359:  36%|███▌      | 360/1000 [16:33<29:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 324 / 2 / 360:  36%|███▌      | 360/1000 [16:33<29:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 325 / 2 / 361:  36%|███▌      | 361/1000 [16:34<29:21,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 325 / 2 / 361:  36%|███▌      | 362/1000 [16:36<29:16,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 326 / 2 / 362:  36%|███▌      | 362/1000 [16:36<29:16,  2.75s/it]Remove assisted dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[var]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
Returns a set of dependencies for the given constructor and the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[assume]] ( InjectionPoint [[web]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[web]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 358 ---------------------------------------------
Invoke the method on the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[example]] ( Object proxy , final Method method , final Object [ ] [[function]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 359 ---------------------------------------------
Get the binding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[binding]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 360 ---------------------------------------------
Returns true if the given dependencies are valid for an optimized assisted inject . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[program]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[command]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 361 ---------------------------------------------
Checks if a constructor has matching parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[command]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 362 ---------------------------------------------
Returns an error message that indicates that no implementation for the given key was bound . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 363 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 327 / 2 / 363:  36%|███▋      | 363/1000 [16:40<29:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 327 / 2 / 363:  36%|███▋      | 364/1000 [16:42<29:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 328 / 2 / 364:  36%|███▋      | 364/1000 [16:42<29:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 329 / 2 / 365:  36%|███▋      | 365/1000 [16:42<29:04,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 329 / 2 / 365:  37%|███▋      | 366/1000 [16:46<29:03,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 330 / 2 / 366:  37%|███▋      | 366/1000 [16:46<29:03,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 331 / 2 / 367:  37%|███▋      | 367/1000 [16:47<28:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 331 / 2 / 367:  37%|███▋      | 368/1000 [16:52<28:59,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 332 / 2 / 368:  37%|███▋      | 368/1000 [16:52<28:59,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 333 / 2 / 369:  37%|███▋      | 369/1000 [16:53<28:52,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 333 / 2 / 369:  37%|███▋      | 370/1000 [16:55<28:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 334 / 2 / 370:  37%|███▋      | 370/1000 [16:55<28:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 335 / 2 / 371:  37%|███▋      | 371/1000 [16:59<28:48,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 335 / 2 / 371:  37%|███▋      | 372/1000 [17:00<28:43,  2.74s/it]Returns the injection point for the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[execute]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Find the next matching filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[sample]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Returns true if the constructor has at inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[test]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Returns a set of internal dependencies for this factory . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[load]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Creates a new multibinder that is bound to the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[c]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[c]] ) ; return [[c]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 368 ---------------------------------------------
Initializes the lookup manager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[error]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the line number of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[include]] ( Member [[group]] ) { Preconditions . checkArgument ( type == [[group]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[group]] , [[group]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[group]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Returns a Module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[monitor]] ( Object [[files]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[files]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Transfers a request to a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[line]] ) { return wrap ( [[line]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 336 / 2 / 372:  37%|███▋      | 372/1000 [17:00<28:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 337 / 2 / 373:  37%|███▋      | 373/1000 [17:04<28:41,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 337 / 2 / 373:  37%|███▋      | 374/1000 [17:04<28:34,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 338 / 2 / 374:  37%|███▋      | 374/1000 [17:04<28:34,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 339 / 2 / 375:  38%|███▊      | 375/1000 [17:11<28:39,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 339 / 2 / 375:  38%|███▊      | 376/1000 [17:12<28:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 340 / 2 / 376:  38%|███▊      | 376/1000 [17:12<28:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 341 / 2 / 377:  38%|███▊      | 377/1000 [17:17<28:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 341 / 2 / 377:  38%|███▊      | 378/1000 [17:18<28:28,  2.75s/it]Returns the annotation claimed by the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[query]] ( Binder binder , Method [[file]] ) { if ( [[file]] . isBridge ( ) || [[file]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[file]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[file]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 373 ---------------------------------------------
Returns a callable that will continue the execution of the given callable with the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( callable , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[assume]] ( Callable < T > callable , Map < Key < ? > , Object > [[access]] ) { return wrap ( callable , [[assume]] ( [[access]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Validate and canonicalize a value . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[format]] ( Key < ? > key , Object [[field]] ) { if ( [[field]] == null || [[field]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[field]] ) ) { throw new IllegalArgumentException ( "Value[" + [[field]] + "] of type[" + [[field]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[field]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[by]] ( Annotation [[array]] ) { checkNotNull ( [[array]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[array]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[array]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[array]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[procedure]] ( Class < T > [[block]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[block]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[update]] ( Class < ? extends Annotation > [[condition]] ) { [[condition]] = Annotations . canonicalizeIfNamed ( [[condition]] ) ; if ( isAllDefaultMethods ( [[condition]] ) ) { return [[update]] ( generateAnnotation ( [[condition]] ) ) ; } checkNotNull ( [[condition]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[condition]] ) ; ensureIsBindingAnnotation ( [[condition]] ) ; return new AnnotationTypeStrategy ( [[condition]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 342 / 2 / 378:  38%|███▊      | 378/1000 [17:18<28:28,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 343 / 2 / 379:  38%|███▊      | 379/1000 [17:20<28:24,  2.74s/it][Succeeded / Failed / Skipped / Total] 34 / 343 / 2 / 379:  38%|███▊      | 380/1000 [17:28<28:30,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 344 / 2 / 380:  38%|███▊      | 380/1000 [17:28<28:30,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 344 / 2 / 380:  38%|███▊      | 381/1000 [17:31<28:28,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 345 / 2 / 381:  38%|███▊      | 381/1000 [17:31<28:28,  2.76s/it][Succeeded / Failed / Skipped / Total] 34 / 346 / 2 / 382:  38%|███▊      | 382/1000 [17:31<28:21,  2.75s/it][Succeeded / Failed / Skipped / Total] 34 / 346 / 2 / 382:  38%|███▊      | 383/1000 [17:44<28:35,  2.78s/it]Gets the injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the source of the binding . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[peer]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a new members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[match]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[name]] ( String messageFormat , Object ... [[array]] ) { return [[name]] ( null , messageFormat , [[array]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Prunes the stack trace of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[counter]] = throwable ; [[counter]] != null ; [[counter]] = [[counter]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[counter]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[counter]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
[Succeeded / Failed / Skipped / Total] 34 / 347 / 2 / 383:  38%|███▊      | 383/1000 [17:44<28:35,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 347 / 2 / 383:  38%|███▊      | 384/1000 [17:45<28:29,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 348 / 2 / 384:  38%|███▊      | 384/1000 [17:45<28:29,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 348 / 2 / 384:  38%|███▊      | 385/1000 [17:51<28:30,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 349 / 2 / 385:  38%|███▊      | 385/1000 [17:51<28:30,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 349 / 2 / 385:  39%|███▊      | 386/1000 [17:52<28:26,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 350 / 2 / 386:  39%|███▊      | 386/1000 [17:52<28:26,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 350 / 2 / 386:  39%|███▊      | 387/1000 [17:53<28:20,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 351 / 2 / 387:  39%|███▊      | 387/1000 [17:53<28:20,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 351 / 2 / 387:  39%|███▉      | 388/1000 [17:55<28:17,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 352 / 2 / 388:  39%|███▉      | 388/1000 [17:55<28:17,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 352 / 2 / 388:  39%|███▉      | 389/1000 [18:02<28:19,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 353 / 2 / 389:  39%|███▉      | 389/1000 [18:02<28:19,  2.78s/it]--------------------------------------------- Result 383 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[text]] ( Throwable [[button]] , String messageFormat , Object ... arguments ) { return [[text]] ( [[button]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[function]] ( Object [[list]] ) { ElementSource [[node]] = null ; if ( [[list]] instanceof ElementSource ) { [[node]] = ( ElementSource ) [[list]] ; [[list]] = [[node]] . getDeclaringSource ( ) ; } return [[function]] ( [[list]] , [[node]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Returns true if the class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[child]] ( String [[an]] ) { return ( parent != null && parent . shouldBeSkipped ( [[an]] ) ) || classNamesToSkip . contains ( [[an]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new exception message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[header]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Formats a list of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String [[heading]] , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[generic]] ( String [[stack]] , Collection < Message > [[block]] ) { Formatter fmt = new Formatter ( ) . format ( [[stack]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[block]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[block]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[block]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[block]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 388 ---------------------------------------------
Get the stack trace from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[element]] ( List < String > [[end]] ) { Preconditions . checkNotNull ( [[end]] , "The list of module class names cannot be null." ) ; for ( final String [[reference]] : [[end]] ) { if ( ! shouldBeSkipped ( [[reference]] ) ) { return new StackTraceElement ( [[reference]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Pushes a state to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[fix]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 390 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 354 / 2 / 390:  39%|███▉      | 390/1000 [18:02<28:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 354 / 2 / 390:  39%|███▉      | 391/1000 [18:02<28:06,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 355 / 2 / 391:  39%|███▉      | 391/1000 [18:02<28:06,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 356 / 2 / 392:  39%|███▉      | 392/1000 [18:06<28:04,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 356 / 2 / 392:  39%|███▉      | 393/1000 [18:11<28:05,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 357 / 2 / 393:  39%|███▉      | 393/1000 [18:11<28:05,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 357 / 3 / 394:  39%|███▉      | 394/1000 [18:11<27:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 357 / 3 / 394:  40%|███▉      | 395/1000 [18:16<27:59,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 358 / 3 / 395:  40%|███▉      | 395/1000 [18:16<27:59,  2.78s/it][Succeeded / Failed / Skipped / Total] 34 / 359 / 3 / 396:  40%|███▉      | 396/1000 [18:18<27:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 359 / 3 / 396:  40%|███▉      | 397/1000 [18:21<27:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 360 / 3 / 397:  40%|███▉      | 397/1000 [18:21<27:52,  2.77s/it]Main entry point . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[when]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 391 ---------------------------------------------
Returns a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[since]] ( final T [[after]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[after]] ; } @ Override public String toString ( ) { return String . valueOf ( [[after]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Pushes a dependency to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[main]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 393 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Throws an exception if it is an unchecked exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Provision a provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[client]] = provider . get ( ) ; if ( [[client]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[client]] ) ; return [[client]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 396 ---------------------------------------------
Called when a connection event is received . --> [[[FAILED]]]

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 397 ---------------------------------------------
Adds a connection event processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[since]] ( ConnectionEventType type , ConnectionEventProcessor [[category]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( [[category]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 398 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 361 / 3 / 398:  40%|███▉      | 398/1000 [18:22<27:48,  2.77s/it][Succeeded / Failed / Skipped / Total] 34 / 361 / 3 / 398:  40%|███▉      | 399/1000 [18:24<27:42,  2.77s/it][Succeeded / Failed / Skipped / Total] 35 / 361 / 3 / 399:  40%|███▉      | 399/1000 [18:24<27:42,  2.77s/it][Succeeded / Failed / Skipped / Total] 35 / 362 / 3 / 400:  40%|████      | 400/1000 [18:24<27:36,  2.76s/it][Succeeded / Failed / Skipped / Total] 35 / 362 / 3 / 400:  40%|████      | 401/1000 [18:28<27:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 36 / 362 / 3 / 401:  40%|████      | 401/1000 [18:28<27:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 36 / 363 / 3 / 402:  40%|████      | 402/1000 [18:32<27:35,  2.77s/it][Succeeded / Failed / Skipped / Total] 36 / 363 / 3 / 402:  40%|████      | 403/1000 [18:33<27:29,  2.76s/it][Succeeded / Failed / Skipped / Total] 36 / 364 / 3 / 403:  40%|████      | 403/1000 [18:33<27:29,  2.76s/it][Succeeded / Failed / Skipped / Total] 37 / 364 / 3 / 404:  40%|████      | 404/1000 [18:36<27:26,  2.76s/it][Succeeded / Failed / Skipped / Total] 37 / 364 / 3 / 404:  40%|████      | 405/1000 [18:38<27:23,  2.76s/it][Succeeded / Failed / Skipped / Total] 37 / 365 / 3 / 405:  40%|████      | 405/1000 [18:38<27:23,  2.76s/it]Registers a remoting processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[pointer]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[pointer]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[pointer]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 399 ---------------------------------------------
Try to get a url . --> Returns the url associated with the given url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[a]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 400 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[hold]] ( RemotingProcessor < ? > processor ) { if ( this . [[processor]] == null ) { this . [[processor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[processor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 401 ---------------------------------------------
Decodes the protocol code . --> Read a bit . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[bit]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[bit]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[bit]] ) ; return ProtocolCode . fromBytes ( [[bit]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 402 ---------------------------------------------
Returns the processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[assume]] ( CommandCode [[address]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[address]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 403 ---------------------------------------------
Returns a connection for the given url if it does not exist . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[example]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Scan all connections . --> Check for expired connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[check]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection and heal if need . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[example]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 365 / 3 / 406:  41%|████      | 406/1000 [18:39<27:17,  2.76s/it][Succeeded / Failed / Skipped / Total] 38 / 365 / 3 / 406:  41%|████      | 407/1000 [18:40<27:12,  2.75s/it][Succeeded / Failed / Skipped / Total] 38 / 366 / 3 / 407:  41%|████      | 407/1000 [18:40<27:12,  2.75s/it][Succeeded / Failed / Skipped / Total] 39 / 366 / 3 / 408:  41%|████      | 408/1000 [18:41<27:07,  2.75s/it][Succeeded / Failed / Skipped / Total] 39 / 366 / 3 / 408:  41%|████      | 409/1000 [18:41<27:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 40 / 366 / 3 / 409:  41%|████      | 409/1000 [18:41<27:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 41 / 366 / 3 / 410:  41%|████      | 410/1000 [18:43<26:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 41 / 366 / 3 / 410:  41%|████      | 411/1000 [18:52<27:02,  2.76s/it][Succeeded / Failed / Skipped / Total] 41 / 367 / 3 / 411:  41%|████      | 411/1000 [18:52<27:02,  2.76s/it][Succeeded / Failed / Skipped / Total] 41 / 367 / 3 / 411:  41%|████      | 412/1000 [18:53<26:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 41 / 368 / 3 / 412:  41%|████      | 412/1000 [18:53<26:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 41 / 368 / 3 / 412:  41%|████▏     | 413/1000 [18:54<26:52,  2.75s/it]Remove a connection pool . --> Closes the connection pool for the given bucket . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String [[poolKey]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[poolKey]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[end]] ( String [[bucket]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[bucket]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 407 ---------------------------------------------
Returns a map of all connections in the pool . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[follow]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 408 ---------------------------------------------
Closes a connection . --> Remove an exception from the connection manager . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[exception]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Create a connection . --> After a connection is added to the connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[after]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 410 ---------------------------------------------
Heal if need . --> Connect to a remote server . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[connect]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[access]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Adds an attribute to the map if it is not already present . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object [[objects]] ) { return attributes . putIfAbsent ( key , [[objects]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[frame]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 369 / 3 / 413:  41%|████▏     | 413/1000 [18:54<26:52,  2.75s/it][Succeeded / Failed / Skipped / Total] 41 / 369 / 3 / 413:  41%|████▏     | 414/1000 [18:56<26:48,  2.75s/it][Succeeded / Failed / Skipped / Total] 41 / 370 / 3 / 414:  41%|████▏     | 414/1000 [18:56<26:48,  2.75s/it][Succeeded / Failed / Skipped / Total] 41 / 370 / 3 / 414:  42%|████▏     | 415/1000 [18:56<26:42,  2.74s/it][Succeeded / Failed / Skipped / Total] 42 / 370 / 3 / 415:  42%|████▏     | 415/1000 [18:56<26:42,  2.74s/it][Succeeded / Failed / Skipped / Total] 42 / 370 / 3 / 415:  42%|████▏     | 416/1000 [18:58<26:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 43 / 370 / 3 / 416:  42%|████▏     | 416/1000 [18:58<26:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 43 / 370 / 3 / 416:  42%|████▏     | 417/1000 [18:59<26:33,  2.73s/it][Succeeded / Failed / Skipped / Total] 44 / 370 / 3 / 417:  42%|████▏     | 417/1000 [18:59<26:33,  2.73s/it][Succeeded / Failed / Skipped / Total] 44 / 370 / 3 / 417:  42%|████▏     | 418/1000 [19:01<26:29,  2.73s/it]Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = [[entry]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[add]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[state]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = [[state]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 414 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[assume]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[assume]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Dispatch to the user processor . --> Handles an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[exception]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 416 ---------------------------------------------
Deserialize a request command . --> Call the RpcRequestCommand with the specified level . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[call]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 417 ---------------------------------------------
Pre - process remoting context . --> Alice a request . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[alice]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 370 / 3 / 418:  42%|████▏     | 418/1000 [19:01<26:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 45 / 370 / 3 / 418:  42%|████▏     | 419/1000 [19:08<26:32,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 371 / 3 / 419:  42%|████▏     | 419/1000 [19:08<26:32,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 371 / 3 / 419:  42%|████▏     | 420/1000 [19:12<26:31,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 372 / 3 / 420:  42%|████▏     | 420/1000 [19:12<26:31,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 372 / 3 / 420:  42%|████▏     | 421/1000 [19:12<26:25,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 373 / 3 / 421:  42%|████▏     | 421/1000 [19:12<26:25,  2.74s/it][Succeeded / Failed / Skipped / Total] 45 / 373 / 3 / 421:  42%|████▏     | 422/1000 [19:19<26:28,  2.75s/it][Succeeded / Failed / Skipped / Total] 45 / 374 / 3 / 422:  42%|████▏     | 422/1000 [19:19<26:28,  2.75s/it][Succeeded / Failed / Skipped / Total] 45 / 374 / 3 / 422:  42%|████▏     | 423/1000 [19:19<26:22,  2.74s/it]Debug log . --> Main entry point for the main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[main]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[assume]] ( MultiInterestUserProcessor < ? > [[stack]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[stack]] . multiInterest ( ) || [[stack]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[stack]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[stack]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 420 ---------------------------------------------
Log request timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , remoteAddr , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[main]] ( final RpcRequestCommand [[generator]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[generator]] . getId ( ) , currentTimestamp , [[generator]] . getArriveTime ( ) , ( currentTimestamp - [[generator]] . getArriveTime ( ) ) , [[generator]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[generator]] . getId ( ) , remoteAddr , ( currentTimestamp - [[generator]] . getArriveTime ( ) ) , [[generator]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 421 ---------------------------------------------
Process a message . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[max]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[max]] ) ; } else { defaultExecutor . execute ( [[max]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 422 ---------------------------------------------
Sends a remoting command to the remote peer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 374 / 3 / 423:  42%|████▏     | 423/1000 [19:19<26:22,  2.74s/it][Succeeded / Failed / Skipped / Total] 46 / 374 / 3 / 423:  42%|████▏     | 424/1000 [19:22<26:18,  2.74s/it][Succeeded / Failed / Skipped / Total] 47 / 374 / 3 / 424:  42%|████▏     | 424/1000 [19:22<26:18,  2.74s/it][Succeeded / Failed / Skipped / Total] 47 / 374 / 3 / 424:  42%|████▎     | 425/1000 [19:22<26:13,  2.74s/it][Succeeded / Failed / Skipped / Total] 48 / 374 / 3 / 425:  42%|████▎     | 425/1000 [19:22<26:13,  2.74s/it][Succeeded / Failed / Skipped / Total] 48 / 374 / 3 / 425:  43%|████▎     | 426/1000 [19:24<26:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 48 / 375 / 3 / 426:  43%|████▎     | 426/1000 [19:24<26:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 48 / 375 / 3 / 426:  43%|████▎     | 427/1000 [19:31<26:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 49 / 375 / 3 / 427:  43%|████▎     | 427/1000 [19:31<26:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 49 / 375 / 3 / 427:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it]Convert an integer to a bit set . --> Returns the sum of the bits of the given value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[bs]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[bs]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[bs]] ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[sum]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[cost]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[cost]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[cost]] ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Adds a reconnect task . --> Assumes a connection to the given url . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[assume]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 425 ---------------------------------------------
Stop heal connection . --> This method is called after the connection has been started . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[after]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 426 ---------------------------------------------
Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int [[value]] = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { [[value]] += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[sets]] ( BitSet [[max]] ) { int [[max]] = 0 ; for ( int i = 0 ; i < [[max]] . length ( ) ; ++ i ) { if ( [[max]] . get ( i ) ) { [[max]] += 1 << i ; } } if ( [[max]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[max]] + " generated according to bit set " + [[max]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[max]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 427 ---------------------------------------------
Monitor connections . --> Process the given connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connections]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connections]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[console]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[bar]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[bar]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 49 / 376 / 3 / 428:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 49 / 376 / 3 / 428:  43%|████▎     | 429/1000 [19:35<26:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 50 / 376 / 3 / 429:  43%|████▎     | 429/1000 [19:35<26:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 50 / 376 / 3 / 429:  43%|████▎     | 430/1000 [19:38<26:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 51 / 376 / 3 / 430:  43%|████▎     | 430/1000 [19:38<26:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 51 / 376 / 3 / 430:  43%|████▎     | 431/1000 [19:38<25:55,  2.73s/it][Succeeded / Failed / Skipped / Total] 51 / 377 / 3 / 431:  43%|████▎     | 431/1000 [19:38<25:55,  2.73s/it][Succeeded / Failed / Skipped / Total] 51 / 377 / 3 / 431:  43%|████▎     | 432/1000 [19:39<25:50,  2.73s/it][Succeeded / Failed / Skipped / Total] 52 / 377 / 3 / 432:  43%|████▎     | 432/1000 [19:39<25:50,  2.73s/it][Succeeded / Failed / Skipped / Total] 52 / 377 / 3 / 432:  43%|████▎     | 433/1000 [19:41<25:47,  2.73s/it]Invoke a RemotingCommand with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[begin]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 429 ---------------------------------------------
Close fresh select connections . --> This method is called when a node is closed . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[node]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 430 ---------------------------------------------
Log info information . --> Assume the given address . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[assume]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
Convert a request to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[array]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 432 ---------------------------------------------
Get a system property as a boolean . --> Returns a boolean value . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[function]] ( String key , String [[b]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[b]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 433 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 377 / 3 / 433:  43%|████▎     | 433/1000 [19:41<25:47,  2.73s/it][Succeeded / Failed / Skipped / Total] 53 / 377 / 3 / 433:  43%|████▎     | 434/1000 [19:42<25:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 54 / 377 / 3 / 434:  43%|████▎     | 434/1000 [19:42<25:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 54 / 377 / 3 / 434:  44%|████▎     | 435/1000 [19:44<25:38,  2.72s/it][Succeeded / Failed / Skipped / Total] 55 / 377 / 3 / 435:  44%|████▎     | 435/1000 [19:44<25:38,  2.72s/it][Succeeded / Failed / Skipped / Total] 55 / 377 / 3 / 435:  44%|████▎     | 436/1000 [19:45<25:33,  2.72s/it][Succeeded / Failed / Skipped / Total] 56 / 377 / 3 / 436:  44%|████▎     | 436/1000 [19:45<25:33,  2.72s/it][Succeeded / Failed / Skipped / Total] 56 / 377 / 3 / 436:  44%|████▎     | 437/1000 [19:45<25:27,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 378 / 3 / 437:  44%|████▎     | 437/1000 [19:45<25:27,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 378 / 3 / 437:  44%|████▍     | 438/1000 [19:48<25:25,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 379 / 3 / 438:  44%|████▍     | 438/1000 [19:48<25:25,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 379 / 3 / 438:  44%|████▍     | 439/1000 [19:52<25:24,  2.72s/it][Succeeded / Failed / Skipped / Total] 56 / 380 / 3 / 439:  44%|████▍     | 439/1000 [19:52<25:24,  2.72s/it][Succeeded / Failed / Skipped / Total] 56 / 380 / 3 / 439:  44%|████▍     | 440/1000 [19:54<25:20,  2.72s/it]Returns true if the request timed out . --> Returns true if the call timed out . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[call]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 434 ---------------------------------------------
Get a random connection from a list of connections --> Attempts to control a list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[control]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 435 ---------------------------------------------
Filter connections by service status . --> Returns a map of contacts and bridges . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[since]] ( List < Connection > connections ) { List < Connection > [[contacts]] = new ArrayList < Connection > ( ) ; List < Connection > [[bridges]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[bridges]] . add ( connection ) ; } } else { [[contacts]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[contacts]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[bridges]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 436 ---------------------------------------------
Returns the value of the specified key or the default if not found . --> Returns the character associated with the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[character]] > [[character]] get ( String key , [[character]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[character]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 437 ---------------------------------------------
Gets the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[list]] ( String [[unknown]] ) { return StringUtils . isBlank ( [[unknown]] ) ? null : this . userProcessors . get ( [[unknown]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 438 ---------------------------------------------
Returns the value of a property . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[include]] ( String [[attributes]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[attributes]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 439 ---------------------------------------------
Converts a response command to a response object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[statement]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 381 / 3 / 440:  44%|████▍     | 440/1000 [19:54<25:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 56 / 381 / 3 / 440:  44%|████▍     | 441/1000 [19:56<25:16,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 382 / 3 / 441:  44%|████▍     | 441/1000 [19:56<25:16,  2.71s/it][Succeeded / Failed / Skipped / Total] 56 / 382 / 3 / 441:  44%|████▍     | 442/1000 [19:58<25:12,  2.71s/it][Succeeded / Failed / Skipped / Total] 57 / 382 / 3 / 442:  44%|████▍     | 442/1000 [19:58<25:12,  2.71s/it][Succeeded / Failed / Skipped / Total] 57 / 382 / 3 / 442:  44%|████▍     | 443/1000 [19:59<25:08,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 382 / 3 / 443:  44%|████▍     | 443/1000 [19:59<25:08,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 382 / 3 / 443:  44%|████▍     | 444/1000 [20:05<25:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 383 / 3 / 444:  44%|████▍     | 444/1000 [20:05<25:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 383 / 3 / 444:  44%|████▍     | 445/1000 [20:05<25:03,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 384 / 3 / 445:  44%|████▍     | 445/1000 [20:05<25:03,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 384 / 3 / 445:  45%|████▍     | 446/1000 [20:06<24:59,  2.71s/it]Resolve the response object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[call]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
Converts a response command to an exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[array]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[array]] = ( RpcResponseCommand ) responseCommand ; [[array]] . deserialize ( ) ; Object ex = [[array]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Print connection trace log . --> Assume that the traceId is the same as the traceId . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[assume]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Return detail error message . --> Returns a string representation of a call . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[call]] ( String [[data]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[data]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[data]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 444 ---------------------------------------------
Create a server exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[example]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[error]] = new RpcServerException ( formattedErrMsg ) ; [[error]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[error]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 445 ---------------------------------------------
Creates a new EventLoopGroup using the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[a]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[a]] , threadFactory ) : new NioEventLoopGroup ( [[a]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 385 / 3 / 446:  45%|████▍     | 446/1000 [20:06<24:59,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 385 / 3 / 446:  45%|████▍     | 447/1000 [20:07<24:54,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 386 / 3 / 447:  45%|████▍     | 447/1000 [20:07<24:54,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 386 / 3 / 447:  45%|████▍     | 448/1000 [20:12<24:54,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 387 / 3 / 448:  45%|████▍     | 448/1000 [20:12<24:54,  2.71s/it][Succeeded / Failed / Skipped / Total] 58 / 387 / 3 / 448:  45%|████▍     | 449/1000 [20:13<24:49,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 388 / 3 / 449:  45%|████▍     | 449/1000 [20:13<24:49,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 388 / 3 / 449:  45%|████▌     | 450/1000 [20:15<24:45,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 389 / 3 / 450:  45%|████▌     | 450/1000 [20:15<24:45,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 389 / 3 / 450:  45%|████▌     | 451/1000 [20:16<24:40,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 390 / 3 / 451:  45%|████▌     | 451/1000 [20:16<24:40,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 390 / 3 / 451:  45%|████▌     | 452/1000 [20:22<24:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 391 / 3 / 452:  45%|████▌     | 452/1000 [20:22<24:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 391 / 3 / 452:  45%|████▌     | 453/1000 [20:24<24:38,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 392 / 3 / 453:  45%|████▌     | 453/1000 [20:24<24:38,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 392 / 3 / 453:  45%|████▌     | 454/1000 [20:27<24:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 393 / 3 / 454:  45%|████▌     | 454/1000 [20:27<24:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 58 / 393 / 3 / 454:  46%|████▌     | 455/1000 [20:28<24:31,  2.70s/it]Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[map]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[condition]] = channel . remoteAddress ( ) ; return doParse ( [[condition]] != null ? [[condition]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[map]] ( final Channel [[end]] ) { if ( null == [[end]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[end]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[hello]] ( final Channel [[request]] ) { if ( null == [[request]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[request]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse the remote host name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[after]] ( final Channel [[command]] ) { if ( null == [[command]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[command]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Parse the local IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[format]] ( final Channel [[message]] ) { if ( null == [[message]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[command]] = ( InetSocketAddress ) [[message]] . localAddress ( ) ; if ( [[command]] != null ) { return [[command]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Parse the remote port from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[command]] ) { if ( null == [[command]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[command]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Returns the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[when]] ( final Channel [[local]] ) { if ( null == [[local]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[local]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parse a socket address to a host ip . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[test]] ( SocketAddress [[ip]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[ip]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 454 ---------------------------------------------
Adds a connection to the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[reference]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[a]] = this . [[end]] . addIfAbsent ( connection ) ; if ( [[a]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 455 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 393 / 3 / 455:  46%|████▌     | 455/1000 [20:28<24:31,  2.70s/it][Succeeded / Failed / Skipped / Total] 59 / 393 / 3 / 455:  46%|████▌     | 456/1000 [20:29<24:26,  2.70s/it][Succeeded / Failed / Skipped / Total] 59 / 394 / 3 / 456:  46%|████▌     | 456/1000 [20:29<24:26,  2.70s/it][Succeeded / Failed / Skipped / Total] 59 / 394 / 3 / 456:  46%|████▌     | 457/1000 [20:33<24:25,  2.70s/it][Succeeded / Failed / Skipped / Total] 59 / 395 / 3 / 457:  46%|████▌     | 457/1000 [20:33<24:25,  2.70s/it][Succeeded / Failed / Skipped / Total] 59 / 395 / 3 / 457:  46%|████▌     | 458/1000 [20:33<24:19,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 395 / 4 / 458:  46%|████▌     | 458/1000 [20:33<24:19,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 395 / 4 / 458:  46%|████▌     | 459/1000 [20:34<24:15,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 396 / 4 / 459:  46%|████▌     | 459/1000 [20:34<24:15,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 396 / 4 / 459:  46%|████▌     | 460/1000 [20:34<24:09,  2.68s/it][Succeeded / Failed / Skipped / Total] 59 / 397 / 4 / 460:  46%|████▌     | 460/1000 [20:34<24:09,  2.68s/it][Succeeded / Failed / Skipped / Total] 59 / 397 / 4 / 460:  46%|████▌     | 461/1000 [20:37<24:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 59 / 398 / 4 / 461:  46%|████▌     | 461/1000 [20:37<24:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 59 / 398 / 4 / 461:  46%|████▌     | 462/1000 [20:37<24:01,  2.68s/it][Succeeded / Failed / Skipped / Total] 59 / 398 / 5 / 462:  46%|████▌     | 462/1000 [20:37<24:01,  2.68s/it]Get a connection from the pool . --> Returns an array of connections . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[array]] ( ) { markAccess ( ) ; if ( null != this . [[alt]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[alt]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 456 ---------------------------------------------
Removes a connection from the list and tries to close it . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[conns]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[neighbor]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
Returns the custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[source]] ( String [[end]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[end]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Starts the connection monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Returns the custom serializer for the given command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[like]] ( CommandCode [[client]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[client]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 460 ---------------------------------------------
Register a custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[test]] ( String [[assignment]] , CustomSerializer [[id]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[assignment]] , [[id]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[assignment]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Register a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[procedure]] ( CommandCode code , CustomSerializer [[sequence]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[sequence]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 462 ---------------------------------------------
Writes a batch of bytes to a socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 398 / 5 / 463:  46%|████▋     | 463/1000 [20:37<23:55,  2.67s/it][Succeeded / Failed / Skipped / Total] 60 / 398 / 5 / 463:  46%|████▋     | 464/1000 [20:41<23:53,  2.68s/it][Succeeded / Failed / Skipped / Total] 61 / 398 / 5 / 464:  46%|████▋     | 464/1000 [20:41<23:53,  2.68s/it][Succeeded / Failed / Skipped / Total] 61 / 399 / 5 / 465:  46%|████▋     | 465/1000 [20:42<23:49,  2.67s/it][Succeeded / Failed / Skipped / Total] 61 / 399 / 5 / 465:  47%|████▋     | 466/1000 [20:44<23:45,  2.67s/it][Succeeded / Failed / Skipped / Total] 62 / 399 / 5 / 466:  47%|████▋     | 466/1000 [20:44<23:45,  2.67s/it][Succeeded / Failed / Skipped / Total] 63 / 399 / 5 / 467:  47%|████▋     | 467/1000 [20:45<23:41,  2.67s/it][Succeeded / Failed / Skipped / Total] 63 / 399 / 5 / 467:  47%|████▋     | 468/1000 [20:47<23:38,  2.67s/it][Succeeded / Failed / Skipped / Total] 64 / 399 / 5 / 468:  47%|████▋     | 468/1000 [20:47<23:38,  2.67s/it][Succeeded / Failed / Skipped / Total] 65 / 399 / 5 / 469:  47%|████▋     | 469/1000 [20:48<23:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 65 / 399 / 5 / 469:  47%|████▋     | 470/1000 [20:50<23:30,  2.66s/it]Initialize the write buffer water mark . --> Alert the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[alert]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 464 ---------------------------------------------
Validate UTF - 8 data . --> Hook a close frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[hook]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 465 ---------------------------------------------
Returns an instance of FramedataImpl1 for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 466 ---------------------------------------------
Updates the payload . --> This method is called when a response is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[get]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Sets the HTTP response code . --> Draw a line . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[draw]] ( int [[line]] ) { this . [[end]] = [[line]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 468 ---------------------------------------------
Checks the length of a single frame . --> Load a chunk of data . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[load]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 469 ---------------------------------------------
Check if remote address is connected . --> Returns true if the given element is an example . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[example]] ( String [[element]] ) { Url url = this . [[node]] . addressParser . parse ( [[element]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 470 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 399 / 5 / 470:  47%|████▋     | 470/1000 [20:50<23:30,  2.66s/it][Succeeded / Failed / Skipped / Total] 67 / 399 / 5 / 471:  47%|████▋     | 471/1000 [20:51<23:25,  2.66s/it][Succeeded / Failed / Skipped / Total] 67 / 399 / 5 / 471:  47%|████▋     | 472/1000 [20:51<23:20,  2.65s/it][Succeeded / Failed / Skipped / Total] 67 / 400 / 5 / 472:  47%|████▋     | 472/1000 [20:51<23:20,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 400 / 5 / 473:  47%|████▋     | 473/1000 [20:55<23:18,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 400 / 5 / 473:  47%|████▋     | 474/1000 [20:59<23:17,  2.66s/it][Succeeded / Failed / Skipped / Total] 68 / 401 / 5 / 474:  47%|████▋     | 474/1000 [20:59<23:17,  2.66s/it][Succeeded / Failed / Skipped / Total] 68 / 402 / 5 / 475:  48%|████▊     | 475/1000 [21:00<23:12,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 402 / 5 / 475:  48%|████▊     | 476/1000 [21:00<23:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 403 / 5 / 476:  48%|████▊     | 476/1000 [21:00<23:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 403 / 5 / 477:  48%|████▊     | 477/1000 [21:03<23:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 403 / 5 / 477:  48%|████▊     | 478/1000 [21:04<23:01,  2.65s/it]Generate the final key . --> Performs the SHA1 algorithm . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[run]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 471 ---------------------------------------------
Checks if the given maxpacketsize is less than the realpacketsize --> Checks that a single frame can be transmitted . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int [[realpacketsize]] ) throws IncompleteException { if ( [[maxpacketsize]] < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[x]] , int [[t]] ) throws IncompleteException { if ( [[x]] < [[t]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[t]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
Checks if the requested protocol matches any of the known protocols . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[search]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 473 ---------------------------------------------
Logs a runtime exception . --> Called when an empty message is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[empty]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 474 ---------------------------------------------
Process a binary frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[begin]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 475 ---------------------------------------------
Process a continuous frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[exception]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 476 ---------------------------------------------
Process a text frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[let]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
Process a closing frame . --> Agent agent . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[agent]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 478 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 404 / 5 / 478:  48%|████▊     | 478/1000 [21:04<23:01,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 405 / 5 / 479:  48%|████▊     | 479/1000 [21:06<22:57,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 405 / 5 / 479:  48%|████▊     | 480/1000 [21:08<22:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 406 / 5 / 480:  48%|████▊     | 480/1000 [21:08<22:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 70 / 406 / 5 / 481:  48%|████▊     | 481/1000 [21:09<22:50,  2.64s/it][Succeeded / Failed / Skipped / Total] 70 / 406 / 5 / 481:  48%|████▊     | 482/1000 [21:12<22:47,  2.64s/it][Succeeded / Failed / Skipped / Total] 71 / 406 / 5 / 482:  48%|████▊     | 482/1000 [21:12<22:47,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 406 / 5 / 483:  48%|████▊     | 483/1000 [21:13<22:43,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 406 / 5 / 483:  48%|████▊     | 484/1000 [21:15<22:39,  2.63s/it]Process a continuous frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[where]] ( WebSocketImpl webSocketImpl , Framedata [[mate]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[mate]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Process a frame that has not been completed . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[procedure]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 480 ---------------------------------------------
Check the buffer limit and throw an exception if it is too large . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[draw]] ( ) throws LimitExceededException { long [[buffer]] = getByteBufferListSize ( ) ; if ( [[buffer]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[buffer]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 481 ---------------------------------------------
Translate handshake http server . --> Creates a new HandshakeBuilder with age information . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[age]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 482 ---------------------------------------------
Translate the first line of a HTTP handshake . --> Creates a new HandshakeBuilder with age information . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[age]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 483 ---------------------------------------------
Decodes the data received from the server . --> Decodes data from a byte buffer . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[a]] ) { assert ( [[a]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[a]] . remaining ( ) , ( [[a]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[a]] . array ( ) , [[a]] . position ( ) , [[a]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[a]] ) ; } } else { if ( decodeHandshake ( [[a]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[a]] . hasRemaining ( ) || ! [[a]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
[Succeeded / Failed / Skipped / Total] 72 / 407 / 5 / 484:  48%|████▊     | 484/1000 [21:15<22:39,  2.63s/it][Succeeded / Failed / Skipped / Total] 73 / 407 / 5 / 485:  48%|████▊     | 485/1000 [21:15<22:34,  2.63s/it][Succeeded / Failed / Skipped / Total] 73 / 407 / 5 / 485:  49%|████▊     | 486/1000 [21:16<22:29,  2.63s/it][Succeeded / Failed / Skipped / Total] 74 / 407 / 5 / 486:  49%|████▊     | 486/1000 [21:16<22:29,  2.63s/it][Succeeded / Failed / Skipped / Total] 74 / 408 / 5 / 487:  49%|████▊     | 487/1000 [21:16<22:24,  2.62s/it][Succeeded / Failed / Skipped / Total] 74 / 408 / 5 / 487:  49%|████▉     | 488/1000 [21:19<22:22,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 408 / 5 / 488:  49%|████▉     | 488/1000 [21:19<22:22,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 409 / 5 / 489:  49%|████▉     | 489/1000 [21:19<22:17,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 409 / 5 / 489:  49%|████▉     | 490/1000 [21:20<22:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 75 / 410 / 5 / 490:  49%|████▉     | 490/1000 [21:20<22:13,  2.61s/it]--------------------------------------------- Result 484 ---------------------------------------------
Returns the total number of bytes in the buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[margin]] ( ) { long [[integer]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[a]] : byteBufferList ) { [[integer]] += [[a]] . limit ( ) ; } } return [[integer]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 485 ---------------------------------------------
Close the connection due to a wrong handshake . --> Casts an InvalidDataException to a 404 response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[cast]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 486 ---------------------------------------------
Sends a 500 error response and closes the connection . --> Draw an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[draw]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Gets the payload from the byte buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[bucket]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 488 ---------------------------------------------
Reset the connection . --> Starts the websocket connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[begin]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 489 ---------------------------------------------
Sends the given text to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[format]] ( String [[a]] ) { if ( [[a]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[format]] ( draft . createFrames ( [[a]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 490 ---------------------------------------------
Connect to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[list]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 411 / 5 / 491:  49%|████▉     | 491/1000 [21:22<22:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 75 / 411 / 5 / 491:  49%|████▉     | 492/1000 [21:30<22:12,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 412 / 5 / 492:  49%|████▉     | 492/1000 [21:30<22:12,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 413 / 5 / 493:  49%|████▉     | 493/1000 [21:32<22:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 413 / 5 / 493:  49%|████▉     | 494/1000 [21:32<22:03,  2.62s/it][Succeeded / Failed / Skipped / Total] 75 / 414 / 5 / 494:  49%|████▉     | 494/1000 [21:32<22:03,  2.62s/it][Succeeded / Failed / Skipped / Total] 76 / 414 / 5 / 495:  50%|████▉     | 495/1000 [21:35<22:01,  2.62s/it][Succeeded / Failed / Skipped / Total] 76 / 414 / 5 / 495:  50%|████▉     | 496/1000 [21:37<21:58,  2.62s/it]Generate HTTP response due to error . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[handle]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
Get the port from the URI . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[array]] ( ) { int [[arrays]] = uri . getPort ( ) ; if ( [[arrays]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[arrays]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Sets the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 494 ---------------------------------------------
Stop the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[buffer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Restarts the connection lost timer . --> Grab all connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[grab]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 415 / 5 / 496:  50%|████▉     | 496/1000 [21:37<21:58,  2.62s/it][Succeeded / Failed / Skipped / Total] 77 / 415 / 5 / 497:  50%|████▉     | 497/1000 [21:38<21:54,  2.61s/it][Succeeded / Failed / Skipped / Total] 77 / 415 / 5 / 497:  50%|████▉     | 498/1000 [21:42<21:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 77 / 416 / 5 / 498:  50%|████▉     | 498/1000 [21:42<21:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 77 / 417 / 5 / 499:  50%|████▉     | 499/1000 [21:43<21:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 77 / 417 / 5 / 499:  50%|█████     | 500/1000 [21:47<21:47,  2.61s/it][Succeeded / Failed / Skipped / Total] 77 / 418 / 5 / 500:  50%|█████     | 500/1000 [21:47<21:47,  2.61s/it][Succeeded / Failed / Skipped / Total] 78 / 418 / 5 / 501:  50%|█████     | 501/1000 [21:47<21:42,  2.61s/it][Succeeded / Failed / Skipped / Total] 78 / 418 / 5 / 501:  50%|█████     | 502/1000 [21:49<21:39,  2.61s/it][Succeeded / Failed / Skipped / Total] 78 / 419 / 5 / 502:  50%|█████     | 502/1000 [21:49<21:39,  2.61s/it]Sends a handshake to the server . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[format]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 497 ---------------------------------------------
Cancels the connection lost timer . --> Main entry point . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[main]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 498 ---------------------------------------------
Start the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[buffer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Executes the connection lost detection . --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[error]] = ( WebSocketImpl ) webSocket ; if ( [[error]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[error]] ) ; [[error]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[error]] . isOpen ( ) ) { [[error]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[error]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 500 ---------------------------------------------
Sends a ping frame to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata f ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[message]] ( WebSocket [[a]] , Framedata f ) { [[a]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 501 ---------------------------------------------
Called when a websocket handshake has been received . --> Create a new ServerHandshakeBuilder --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft [[draft]] , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[server]] ( WebSocket conn , Draft [[test]] , ClientHandshake [[er]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[load]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 419 / 5 / 503:  50%|█████     | 503/1000 [21:50<21:34,  2.61s/it][Succeeded / Failed / Skipped / Total] 79 / 419 / 5 / 503:  50%|█████     | 504/1000 [21:51<21:30,  2.60s/it][Succeeded / Failed / Skipped / Total] 80 / 419 / 5 / 504:  50%|█████     | 504/1000 [21:51<21:30,  2.60s/it][Succeeded / Failed / Skipped / Total] 80 / 420 / 5 / 505:  50%|█████     | 505/1000 [21:52<21:26,  2.60s/it][Succeeded / Failed / Skipped / Total] 80 / 420 / 5 / 505:  51%|█████     | 506/1000 [21:53<21:21,  2.59s/it][Succeeded / Failed / Skipped / Total] 81 / 420 / 5 / 506:  51%|█████     | 506/1000 [21:53<21:21,  2.59s/it][Succeeded / Failed / Skipped / Total] 81 / 420 / 6 / 507:  51%|█████     | 507/1000 [21:53<21:16,  2.59s/it][Succeeded / Failed / Skipped / Total] 81 / 420 / 6 / 507:  51%|█████     | 508/1000 [21:54<21:13,  2.59s/it]Accept a new connection . --> Call the onConnect method . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[call]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 504 ---------------------------------------------
Do additional read . --> Adds more data to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[add]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 505 ---------------------------------------------
Stop the thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stop]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[main]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 506 ---------------------------------------------
Handles a read operation . --> This method is called when an assignment is made . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[assignment]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 507 ---------------------------------------------
Shuts down the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 420 / 6 / 508:  51%|█████     | 508/1000 [21:54<21:13,  2.59s/it][Succeeded / Failed / Skipped / Total] 83 / 420 / 6 / 509:  51%|█████     | 509/1000 [21:55<21:09,  2.59s/it][Succeeded / Failed / Skipped / Total] 83 / 420 / 6 / 509:  51%|█████     | 510/1000 [21:58<21:06,  2.58s/it][Succeeded / Failed / Skipped / Total] 84 / 420 / 6 / 510:  51%|█████     | 510/1000 [21:58<21:06,  2.58s/it][Succeeded / Failed / Skipped / Total] 85 / 420 / 6 / 511:  51%|█████     | 511/1000 [22:00<21:03,  2.58s/it][Succeeded / Failed / Skipped / Total] 85 / 420 / 6 / 511:  51%|█████     | 512/1000 [22:01<20:59,  2.58s/it][Succeeded / Failed / Skipped / Total] 86 / 420 / 6 / 512:  51%|█████     | 512/1000 [22:01<20:59,  2.58s/it][Succeeded / Failed / Skipped / Total] 86 / 421 / 6 / 513:  51%|█████▏    | 513/1000 [22:01<20:54,  2.58s/it][Succeeded / Failed / Skipped / Total] 86 / 421 / 6 / 513:  51%|█████▏    | 514/1000 [22:03<20:51,  2.58s/it][Succeeded / Failed / Skipped / Total] 87 / 421 / 6 / 514:  51%|█████▏    | 514/1000 [22:03<20:51,  2.58s/it]Setup the selector and server thread . --> Ask for a new connection . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[ask]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 509 ---------------------------------------------
Writes a batch of data to the socket . --> Writes the given string to the socket . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey [[key]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[key]] . isValid ( ) ) { [[key]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey [[string]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[string]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[string]] . isValid ( ) ) { [[string]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 510 ---------------------------------------------
Sends a message to one or more clients . --> Broadcasts the given data with the given bit . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[bit]] ) { if ( data == null || [[bit]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[bit]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Returns the socket associated with the given connection . --> Exploit a call . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[exploit]] ( WebSocket [[foo]] ) { WebSocketImpl [[call]] = ( WebSocketImpl ) [[foo]] ; return ( ( SocketChannel ) [[call]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 512 ---------------------------------------------
Send a broadcast to all registered clients . --> Handles incoming data . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[handle]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 513 ---------------------------------------------
Ensure that a single thread is started . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[move]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 514 ---------------------------------------------
Sends a message to one or more clients . --> Broadcasts the given field with the given data . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[field]] , Collection < WebSocket > [[data]] ) { if ( [[field]] == null || [[data]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[field]] , [[data]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 421 / 6 / 515:  52%|█████▏    | 515/1000 [22:04<20:47,  2.57s/it][Succeeded / Failed / Skipped / Total] 88 / 421 / 6 / 515:  52%|█████▏    | 516/1000 [22:04<20:42,  2.57s/it][Succeeded / Failed / Skipped / Total] 88 / 422 / 6 / 516:  52%|█████▏    | 516/1000 [22:04<20:42,  2.57s/it][Succeeded / Failed / Skipped / Total] 89 / 422 / 6 / 517:  52%|█████▏    | 517/1000 [22:05<20:38,  2.56s/it][Succeeded / Failed / Skipped / Total] 89 / 422 / 6 / 517:  52%|█████▏    | 518/1000 [22:09<20:37,  2.57s/it][Succeeded / Failed / Skipped / Total] 89 / 423 / 6 / 518:  52%|█████▏    | 518/1000 [22:09<20:37,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 423 / 6 / 519:  52%|█████▏    | 519/1000 [22:10<20:32,  2.56s/it][Succeeded / Failed / Skipped / Total] 90 / 423 / 6 / 519:  52%|█████▏    | 520/1000 [22:11<20:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 90 / 424 / 6 / 520:  52%|█████▏    | 520/1000 [22:11<20:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 90 / 425 / 6 / 521:  52%|█████▏    | 521/1000 [22:14<20:27,  2.56s/it][Succeeded / Failed / Skipped / Total] 90 / 425 / 6 / 521:  52%|█████▏    | 522/1000 [22:22<20:29,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 426 / 6 / 522:  52%|█████▏    | 522/1000 [22:22<20:29,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 426 / 6 / 522:  52%|█████▏    | 523/1000 [22:25<20:26,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 427 / 6 / 523:  52%|█████▏    | 523/1000 [22:25<20:26,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 427 / 6 / 523:  52%|█████▏    | 524/1000 [22:27<20:24,  2.57s/it]Fill the frames for a draft . --> This method is called after a draft has been created . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[after]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 516 ---------------------------------------------
Start the JPA API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[bar]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
Transfers the source buffer to the destination buffer . --> Copies the contents of the source buffer into the destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[bin]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 518 ---------------------------------------------
Executes the given block in a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[block]] ) { withTransaction ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[hello]] ) { withTransaction ( em -> { [[hello]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Convert an array of arguments to a scala buffer . --> Execute an operation . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[execute]] ( final Object ... [[ex]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[ex]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 520 ---------------------------------------------
Returns an EntityManager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[address]] ) { EntityManagerFactory [[array]] = emfs . get ( [[address]] ) ; if ( [[array]] == null ) { return null ; } return [[array]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments into a list if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[sort]] ( final T ... [[table]] ) { List < T > out ; if ( [[table]] != null && [[table]] . length == 1 && [[table]] [ 0 ] instanceof List ) { out = ( List < T > ) [[table]] [ 0 ] ; } else { out = Arrays . asList ( [[table]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Returns true if the specified key is defined at the specified language . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[end]] ( play . api . i18n . Lang [[c]] , String [[open]] ) { return messages . isDefinedAt ( [[open]] , [[c]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 523 ---------------------------------------------
Returns the localized value for the given key in the given language . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 428 / 6 / 524:  52%|█████▏    | 524/1000 [22:27<20:24,  2.57s/it][Succeeded / Failed / Skipped / Total] 90 / 428 / 6 / 524:  52%|█████▎    | 525/1000 [22:29<20:20,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 428 / 6 / 525:  52%|█████▎    | 525/1000 [22:29<20:20,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 428 / 6 / 525:  53%|█████▎    | 526/1000 [22:32<20:18,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 429 / 6 / 526:  53%|█████▎    | 526/1000 [22:32<20:18,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 429 / 6 / 526:  53%|█████▎    | 527/1000 [22:33<20:15,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 430 / 6 / 527:  53%|█████▎    | 527/1000 [22:33<20:15,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 430 / 6 / 527:  53%|█████▎    | 528/1000 [22:35<20:11,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 431 / 6 / 528:  53%|█████▎    | 528/1000 [22:35<20:11,  2.57s/it][Succeeded / Failed / Skipped / Total] 91 / 431 / 6 / 528:  53%|█████▎    | 529/1000 [22:35<20:07,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 432 / 6 / 529:  53%|█████▎    | 529/1000 [22:35<20:07,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 432 / 6 / 529:  53%|█████▎    | 530/1000 [22:36<20:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 433 / 6 / 530:  53%|█████▎    | 530/1000 [22:36<20:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 433 / 6 / 530:  53%|█████▎    | 531/1000 [22:41<20:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 434 / 6 / 531:  53%|█████▎    | 531/1000 [22:41<20:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 434 / 6 / 531:  53%|█████▎    | 532/1000 [22:42<19:58,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 435 / 6 / 532:  53%|█████▎    | 532/1000 [22:42<19:58,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 436 / 6 / 533:  53%|█████▎    | 533/1000 [22:42<19:53,  2.56s/it][Succeeded / Failed / Skipped / Total] 91 / 436 / 6 / 533:  53%|█████▎    | 534/1000 [22:43<19:49,  2.55s/it][Succeeded / Failed / Skipped / Total] 91 / 437 / 6 / 534:  53%|█████▎    | 534/1000 [22:43<19:49,  2.55s/it][Succeeded / Failed / Skipped / Total] 91 / 438 / 6 / 535:  54%|█████▎    | 535/1000 [22:45<19:46,  2.55s/it][Succeeded / Failed / Skipped / Total] 91 / 438 / 6 / 535:  54%|█████▎    | 536/1000 [22:46<19:42,  2.55s/it]Returns the preferred messages for the given languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[use]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the localized value for the given keys . --> Get a string from a list of strings --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[f]] , List < String > [[foo]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[foo]] ) . asScala ( ) ; Seq < Object > [[array]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[array]] , [[f]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[request]] ( Http . RequestHeader [[format]] ) { play . api . i18n . Messages [[client]] = messages . preferred ( [[format]] ) ; return new MessagesImpl ( new Lang ( [[client]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
Sets the language of the given result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[card]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 528 ---------------------------------------------
Sets the bindings for the given Guiceable modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[group]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[group]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 529 ---------------------------------------------
Set the REPLACEME0 bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[id]] ( play . api . inject . Binding < ? > ... [[id]] ) { return [[id]] ( Guiceable . bindings ( [[id]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Set the bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[base]] ( play . api . inject . Module ... [[object]] ) { return [[base]] ( Guiceable . [[object]] ( [[object]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Returns a copy of this builder with the specified Guiceable modules overridden . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[bas]] ( GuiceableModule ... [[object]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[object]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Override this Guiceable with the specified modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[end]] ) { return overrides ( Guiceable . [[end]] ( [[end]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Overrides this object with the specified bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[ort]] ( play . api . inject . Binding < ? > ... [[code]] ) { return [[ort]] ( Guiceable . [[code]] ( [[code]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Disables the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[less]] ( Class < ? > ... [[end]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[end]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Returns the binding for this annotation in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[gallery]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 438 / 6 / 536:  54%|█████▎    | 536/1000 [22:46<19:42,  2.55s/it][Succeeded / Failed / Skipped / Total] 92 / 439 / 6 / 537:  54%|█████▎    | 537/1000 [22:46<19:38,  2.55s/it][Succeeded / Failed / Skipped / Total] 92 / 439 / 6 / 537:  54%|█████▍    | 538/1000 [22:47<19:34,  2.54s/it][Succeeded / Failed / Skipped / Total] 92 / 440 / 6 / 538:  54%|█████▍    | 538/1000 [22:47<19:34,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 440 / 6 / 539:  54%|█████▍    | 539/1000 [22:48<19:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 440 / 6 / 539:  54%|█████▍    | 540/1000 [22:56<19:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 441 / 6 / 540:  54%|█████▍    | 540/1000 [22:56<19:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 442 / 6 / 541:  54%|█████▍    | 541/1000 [22:58<19:29,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 442 / 6 / 541:  54%|█████▍    | 542/1000 [23:01<19:27,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 443 / 6 / 542:  54%|█████▍    | 542/1000 [23:01<19:27,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 444 / 6 / 543:  54%|█████▍    | 543/1000 [23:02<19:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 444 / 6 / 543:  54%|█████▍    | 544/1000 [23:03<19:19,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 445 / 6 / 544:  54%|█████▍    | 544/1000 [23:03<19:19,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 446 / 6 / 545:  55%|█████▍    | 545/1000 [23:05<19:16,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 446 / 6 / 545:  55%|█████▍    | 546/1000 [23:05<19:12,  2.54s/it]Creates a new tuple with the given values . --> Factory method for creating an immutable type . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[an]] < A , B > [[an]] ( A a , B b ) { return new [[an]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 537 ---------------------------------------------
Call a request and return the result . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[query]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 538 ---------------------------------------------
Returns the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[a]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[a]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 539 ---------------------------------------------
Factory method for creating a 5 - element H2O tuple . --> Factory method for creating an empty list . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[empty]] < A , B , C , D , E > [[empty]] ( A a , B b , C c , D d , E e ) { return new [[empty]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 540 ---------------------------------------------
Converts an ExecutionContext to an Executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[process]] ( ExecutionContext [[rehearsal]] ) { ExecutionContext prepared = [[rehearsal]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[list]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[object]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[application]] ( Map < String , String > [[label]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[name]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[label]] . entrySet ( ) ) { [[name]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[name]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a flow from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[end]] ( String [[a]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[a]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a flow from a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[direct]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[direct]] -> { return ByteString . fromString ( Json . stringify ( [[direct]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 447 / 6 / 546:  55%|█████▍    | 546/1000 [23:05<19:12,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 448 / 6 / 547:  55%|█████▍    | 547/1000 [23:07<19:08,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 448 / 6 / 547:  55%|█████▍    | 548/1000 [23:13<19:09,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 449 / 6 / 548:  55%|█████▍    | 548/1000 [23:13<19:09,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 450 / 6 / 549:  55%|█████▍    | 549/1000 [23:14<19:05,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 450 / 6 / 549:  55%|█████▌    | 550/1000 [23:14<19:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 451 / 6 / 550:  55%|█████▌    | 550/1000 [23:14<19:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 452 / 6 / 551:  55%|█████▌    | 551/1000 [23:18<18:59,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 452 / 6 / 551:  55%|█████▌    | 552/1000 [23:20<18:56,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 453 / 6 / 552:  55%|█████▌    | 552/1000 [23:20<18:56,  2.54s/it]Adds a constraint validator to the factory . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[now]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[own]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[file]] ( RequestHeader request , String [[destination]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[destination]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Called when a client error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[file]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
Handles a forbidden request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[example]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 551 ---------------------------------------------
Get a matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[loop]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Handles a 404 error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[function]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 454 / 6 / 553:  55%|█████▌    | 553/1000 [23:22<18:53,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 454 / 6 / 553:  55%|█████▌    | 554/1000 [23:23<18:50,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 455 / 6 / 554:  55%|█████▌    | 554/1000 [23:23<18:50,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 456 / 6 / 555:  56%|█████▌    | 555/1000 [23:25<18:47,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 456 / 6 / 555:  56%|█████▌    | 556/1000 [23:27<18:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 457 / 6 / 556:  56%|█████▌    | 556/1000 [23:27<18:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 458 / 6 / 557:  56%|█████▌    | 557/1000 [23:29<18:41,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 458 / 6 / 557:  56%|█████▌    | 558/1000 [23:35<18:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 459 / 6 / 558:  56%|█████▌    | 558/1000 [23:35<18:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 460 / 6 / 559:  56%|█████▌    | 559/1000 [23:43<18:42,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 460 / 6 / 559:  56%|█████▌    | 560/1000 [23:47<18:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 461 / 6 / 560:  56%|█████▌    | 560/1000 [23:47<18:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 461 / 6 / 560:  56%|█████▌    | 561/1000 [23:48<18:38,  2.55s/it]Logs a server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[write]] ( RequestHeader [[data]] , UsefulException [[file]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[file]] . id , [[data]] . method ( ) , [[data]] . uri ( ) ) , [[file]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Handles a server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[halt]] ( RequestHeader [[function]] , Throwable [[error]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[error]] ) ; logServerError ( [[function]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[function]] , usefulException ) ; default : return onDevServerError ( [[function]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 555 ---------------------------------------------
Creates a useful exception to handle the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[type]] ( final Throwable [[message]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[message]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 556 ---------------------------------------------
Handles a dev error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[by]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a development error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[procedure]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a build doc handler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[method]] ( File directory ) { FileRepository [[box]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[box]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[construct]] ( File [[b]] , JarFile jarFile , String base ) { return [[construct]] ( [[b]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Creates a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository [[repo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[a]] ( JarFile jarFile , String base ) { FileRepository [[b]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( [[b]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 561 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 462 / 6 / 561:  56%|█████▌    | 561/1000 [23:48<18:38,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 462 / 6 / 561:  56%|█████▌    | 562/1000 [23:54<18:37,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 463 / 6 / 562:  56%|█████▌    | 562/1000 [23:54<18:37,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 463 / 6 / 562:  56%|█████▋    | 563/1000 [23:58<18:36,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 464 / 6 / 563:  56%|█████▋    | 563/1000 [23:58<18:36,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 464 / 6 / 563:  56%|█████▋    | 564/1000 [23:59<18:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 465 / 6 / 564:  56%|█████▋    | 564/1000 [23:59<18:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 465 / 6 / 564:  56%|█████▋    | 565/1000 [24:04<18:31,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 466 / 6 / 565:  56%|█████▋    | 565/1000 [24:04<18:31,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 466 / 6 / 565:  57%|█████▋    | 566/1000 [24:09<18:31,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 467 / 6 / 566:  57%|█████▋    | 566/1000 [24:09<18:31,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 467 / 6 / 566:  57%|█████▋    | 567/1000 [24:11<18:28,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 468 / 6 / 567:  57%|█████▋    | 567/1000 [24:11<18:28,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 468 / 6 / 567:  57%|█████▋    | 568/1000 [24:13<18:25,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 469 / 6 / 568:  57%|█████▋    | 568/1000 [24:13<18:25,  2.56s/it][Succeeded / Failed / Skipped / Total] 93 / 469 / 6 / 568:  57%|█████▋    | 569/1000 [24:13<18:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 469 / 7 / 569:  57%|█████▋    | 569/1000 [24:13<18:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 469 / 7 / 569:  57%|█████▋    | 570/1000 [24:14<18:17,  2.55s/it]Creates a build doc handler from a list of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[method]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[b]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a HttpEntity from the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[file]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Creates an entity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[attack]] ( String content , String [[example]] ) { return new Strict ( ByteString . fromString ( content , [[example]] ) , Optional . of ( "text/plain; charset=" + [[example]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Creates a new chunked entity from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[file]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 566 ---------------------------------------------
Consume data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[where]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a JSON response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[function]] , JsonNode [[to]] ) { return status ( status , [[to]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Sends a JSON response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[line]] ( int [[lines]] , JsonNode [[f]] , JsonEncoding encoding ) { if ( [[f]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[line]] ( [[line]] ) . sendJson ( [[f]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 569 ---------------------------------------------
Find user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 470 / 7 / 570:  57%|█████▋    | 570/1000 [24:14<18:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 470 / 7 / 570:  57%|█████▋    | 571/1000 [24:18<18:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 471 / 7 / 571:  57%|█████▋    | 571/1000 [24:18<18:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 471 / 7 / 571:  57%|█████▋    | 572/1000 [24:19<18:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 472 / 7 / 572:  57%|█████▋    | 572/1000 [24:19<18:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 472 / 7 / 572:  57%|█████▋    | 573/1000 [24:23<18:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 473 / 7 / 573:  57%|█████▋    | 573/1000 [24:23<18:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 473 / 7 / 573:  57%|█████▋    | 574/1000 [24:23<18:06,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 474 / 7 / 574:  57%|█████▋    | 574/1000 [24:23<18:06,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 475 / 7 / 575:  57%|█████▊    | 575/1000 [24:23<18:01,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 475 / 7 / 575:  58%|█████▊    | 576/1000 [24:25<17:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 476 / 7 / 576:  58%|█████▊    | 576/1000 [24:25<17:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 477 / 7 / 577:  58%|█████▊    | 577/1000 [24:30<17:57,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 477 / 7 / 577:  58%|█████▊    | 578/1000 [24:30<17:53,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 478 / 7 / 578:  58%|█████▊    | 578/1000 [24:30<17:53,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 479 / 7 / 579:  58%|█████▊    | 579/1000 [24:33<17:51,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 479 / 7 / 579:  58%|█████▊    | 580/1000 [24:34<17:48,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 480 / 7 / 580:  58%|█████▊    | 580/1000 [24:34<17:48,  2.54s/it]Creates a new HTTP response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[assignment]] ( int [[name]] , byte [ ] [[type]] ) { if ( [[type]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[assignment]] , new HttpEntity . Strict ( ByteString . fromArray ( [[type]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 571 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[methods]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the preferred language for the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[hammer]] ( Collection < Lang > [[c]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[c]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 573 ---------------------------------------------
Sets the HTTP status code and MIME type for the given file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , File [[content]] ) { return status ( status , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result status ( int status , File [[image]] ) { return status ( status , [[image]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
Sends a HTTP status with the given content and content length . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[event]] , long contentLength ) { return status ( status ) . sendInputStream ( [[event]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[select]] ( String [[extension]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[extension]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[list]] ( Http . Request [[table]] ) { return [[list]] ( [[table]] . secure ( ) , [[table]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns the web socket URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[join]] ( Http . Request request ) { return [[join]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection function that executes the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[source]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[point]] ) { try { return [[source]] . call ( [[point]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Converts a JSON object to an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Returns a function that executes a connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[error]] ( final ConnectionRunnable [[failures]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[failures]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 481 / 7 / 581:  58%|█████▊    | 581/1000 [24:35<17:44,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 481 / 7 / 581:  58%|█████▊    | 582/1000 [24:38<17:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 482 / 7 / 582:  58%|█████▊    | 582/1000 [24:38<17:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 483 / 7 / 583:  58%|█████▊    | 583/1000 [24:38<17:37,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 483 / 7 / 583:  58%|█████▊    | 584/1000 [24:40<17:34,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 484 / 7 / 584:  58%|█████▊    | 584/1000 [24:40<17:34,  2.53s/it][Succeeded / Failed / Skipped / Total] 93 / 485 / 7 / 585:  58%|█████▊    | 585/1000 [24:46<17:34,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 485 / 7 / 585:  59%|█████▊    | 586/1000 [24:47<17:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 486 / 7 / 586:  59%|█████▊    | 586/1000 [24:47<17:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 487 / 7 / 587:  59%|█████▊    | 587/1000 [24:51<17:29,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 487 / 7 / 587:  59%|█████▉    | 588/1000 [24:52<17:25,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 488 / 7 / 588:  59%|█████▉    | 588/1000 [24:52<17:25,  2.54s/it]Convert an object to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[loop]] ( final Object [[id]] ) { try { return mapper ( ) . valueToTree ( [[id]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Creates a new server for the given mode and port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[builder]] ( Mode mode , int [[address]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[address]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 583 ---------------------------------------------
Parses a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[fetch]] ( String [[dt]] ) { try { return mapper ( ) . readTree ( [[dt]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Parses the given input stream into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[object]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns the relative path from the start path to the target path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[example]] ( String [[data]] , String [[vector]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Convert a set of constraints to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[find]] ( Set < ConstraintDescriptor < ? > > [[null]] ) { return [[null]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[find]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Converts a constraint descriptor to a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[set]] ( ConstraintDescriptor < ? > [[array]] ) { final Display displayAnnotation = [[array]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[array]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 588 ---------------------------------------------
Canonicalize the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String [[comp]] : urlPath ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( [[comp]] ) ; else canonical . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String [[ant]] ) { String [ ] urlPath = toSegments ( [[ant]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String [[amazon]] : urlPath ) { if ( [[amazon]] . isEmpty ( ) || [[amazon]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[amazon]] . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( [[amazon]] ) ; else canonical . pop ( ) ; } String prefixSep = [[ant]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[ant]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 589 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 489 / 7 / 589:  59%|█████▉    | 589/1000 [24:57<17:25,  2.54s/it][Succeeded / Failed / Skipped / Total] 93 / 489 / 7 / 589:  59%|█████▉    | 590/1000 [25:01<17:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 490 / 7 / 590:  59%|█████▉    | 590/1000 [25:01<17:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 491 / 7 / 591:  59%|█████▉    | 591/1000 [25:07<17:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 93 / 491 / 7 / 591:  59%|█████▉    | 592/1000 [25:07<17:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 94 / 491 / 7 / 592:  59%|█████▉    | 592/1000 [25:07<17:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 94 / 492 / 7 / 593:  59%|█████▉    | 593/1000 [25:07<17:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 492 / 7 / 593:  59%|█████▉    | 594/1000 [25:12<17:13,  2.55s/it][Succeeded / Failed / Skipped / Total] 94 / 493 / 7 / 594:  59%|█████▉    | 594/1000 [25:12<17:13,  2.55s/it][Succeeded / Failed / Skipped / Total] 94 / 494 / 7 / 595:  60%|█████▉    | 595/1000 [25:12<17:09,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 494 / 7 / 595:  60%|█████▉    | 596/1000 [25:15<17:07,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 495 / 7 / 596:  60%|█████▉    | 596/1000 [25:15<17:07,  2.54s/it]Parses a cron expression and returns the next valid time after it . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[array]] ( String [[data]] ) { try { return new CronExpression ( [[data]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[data]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
Gets the next cron interval for a given date . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[dicate]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 591 ---------------------------------------------
Wait for the given stage to complete after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[unit]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[unit]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[stage]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[condition]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[condition]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[condition]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Checks if the given class array is assignable to the given class array . --> Exchange example and ai with autoboxing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( [[toClassArray]] ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[exchange]] ( Class < ? > [ ] [[example]] , Class < ? > [ ] [[ai]] , boolean autoboxing ) { if ( arrayGetLength ( [[example]] ) != arrayGetLength ( [[ai]] ) ) { return "[[data]]" != "[[data]]" ; } if ( [[example]] == null ) { [[example]] = EMPTY_CLASS_ARRAY ; } if ( [[ai]] == null ) { [[ai]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[example]] . length ; i ++ ) { if ( [[exchange]] ( [[example]] [ i ] , [[ai]] [ i ] , autoboxing ) == "[[data]]" != "[[data]]" ) { return "[[data]]" != "[[data]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 593 ---------------------------------------------
Creates a GuiceApplicationBuilder for the given application loader context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[build]] ( ApplicationLoader . Context [[me]] ) { return initialBuilder . in ( [[me]] . environment ( ) ) . loadConfig ( [[me]] . initialConfig ( ) ) . overrides ( overrides ( [[me]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Render a todo page . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[object]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 595 ---------------------------------------------
Creates a new instance of AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[server]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[page]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 496 / 7 / 597:  60%|█████▉    | 597/1000 [25:16<17:03,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 496 / 7 / 597:  60%|█████▉    | 598/1000 [25:16<16:59,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 497 / 7 / 598:  60%|█████▉    | 598/1000 [25:16<16:59,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 498 / 7 / 599:  60%|█████▉    | 599/1000 [25:16<16:55,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 498 / 7 / 599:  60%|██████    | 600/1000 [25:19<16:53,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 499 / 7 / 600:  60%|██████    | 600/1000 [25:19<16:53,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 500 / 7 / 601:  60%|██████    | 601/1000 [25:21<16:50,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 500 / 7 / 601:  60%|██████    | 602/1000 [25:22<16:46,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 501 / 7 / 602:  60%|██████    | 602/1000 [25:22<16:46,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 502 / 7 / 603:  60%|██████    | 603/1000 [25:22<16:42,  2.52s/it][Succeeded / Failed / Skipped / Total] 94 / 502 / 7 / 603:  60%|██████    | 604/1000 [25:28<16:42,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 503 / 7 / 604:  60%|██████    | 604/1000 [25:28<16:42,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 504 / 7 / 605:  60%|██████    | 605/1000 [25:28<16:38,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 504 / 7 / 605:  61%|██████    | 606/1000 [25:33<16:36,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 505 / 7 / 606:  61%|██████    | 606/1000 [25:33<16:36,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 506 / 7 / 607:  61%|██████    | 607/1000 [25:39<16:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 94 / 506 / 7 / 607:  61%|██████    | 608/1000 [25:40<16:33,  2.53s/it]Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[specified]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Adds a key - value pair to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String [[value]] ) { [[session]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[commit]] ( String key , String [[state]] ) { [[commit]] ( ) . put ( key , [[state]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 599 ---------------------------------------------
Adds a flash key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String [[value]] ) { [[flash]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[pull]] ( String key , String [[end]] ) { [[pull]] ( ) . put ( key , [[end]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Creates a binding to the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[parameter]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Returns a binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[process]] ( final Class < ? extends T > [[list]] ) { return underlying . to ( [[list]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 602 ---------------------------------------------
Returns a binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[customer]] ( final Provider < ? extends T > [[access]] ) { return underlying . to ( [[access]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns a new binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[use]] ( final BindingKey < ? extends T > [[condition]] ) { return underlying . to ( [[condition]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a new EvolutionsReader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[dev]] . EvolutionsReader [[command]] ( Map < String , List < Evolution > > [[dev]] ) { return new SimpleEvolutionsReader ( [[dev]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a binding that is bound to a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[page]] Provider < ? extends T > > Binding < T > [[since]] ( final Class < P > [[operator]] ) { return underlying . toProvider ( [[operator]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[include]] ( Application [[behavior]] ) { play . api . i18n . Langs langs = [[behavior]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the preferred language for the given application . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[core]] ( Application app , List < Lang > [[end]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[end]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
[Succeeded / Failed / Skipped / Total] 94 / 507 / 7 / 608:  61%|██████    | 608/1000 [25:40<16:33,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 508 / 7 / 609:  61%|██████    | 609/1000 [25:41<16:29,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 508 / 7 / 609:  61%|██████    | 610/1000 [25:42<16:26,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 509 / 7 / 610:  61%|██████    | 610/1000 [25:42<16:26,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 510 / 7 / 611:  61%|██████    | 611/1000 [25:46<16:24,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 510 / 7 / 611:  61%|██████    | 612/1000 [25:47<16:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 511 / 7 / 612:  61%|██████    | 612/1000 [25:47<16:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 512 / 7 / 613:  61%|██████▏   | 613/1000 [25:48<16:17,  2.53s/it][Succeeded / Failed / Skipped / Total] 94 / 512 / 7 / 613:  61%|██████▏   | 614/1000 [25:49<16:14,  2.52s/it][Succeeded / Failed / Skipped / Total] 94 / 513 / 7 / 614:  61%|██████▏   | 614/1000 [25:49<16:14,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 513 / 7 / 615:  62%|██████▏   | 615/1000 [25:50<16:10,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 513 / 7 / 615:  62%|██████▏   | 616/1000 [25:52<16:07,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 514 / 7 / 616:  62%|██████▏   | 616/1000 [25:52<16:07,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 515 / 7 / 617:  62%|██████▏   | 617/1000 [25:57<16:06,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 515 / 7 / 617:  62%|██████▏   | 618/1000 [25:58<16:03,  2.52s/it]--------------------------------------------- Result 608 ---------------------------------------------
Creates a new EvolutionsReader for the specified evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[add]] . EvolutionsReader [[db]] ( Evolution ... [[add]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[add]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
Adds a configuration loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[connector]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Clean up database volutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[array]] ( Database database , boolean autocommit , String [[table]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[table]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 611 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[client]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Load the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[info]] ) { return load ( Guiceable . [[info]] ( [[info]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[bot]] ) { return load ( Guiceable . [[bot]] ( [[bot]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Adds a module loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[execute]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 615 ---------------------------------------------
Creates a new GuiceApplicationBuilder . --> Cast a GuiceApplicationBuilder to a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[cast]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 616 ---------------------------------------------
Load the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[client]] ( play . api . inject . Binding < ? > ... bindings ) { return [[client]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 617 ---------------------------------------------
Encodes the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[list]] ( Cookie [[bucket]] ) { if ( [[bucket]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[list]] ( buf , [[bucket]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 516 / 7 / 618:  62%|██████▏   | 618/1000 [25:58<16:03,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 517 / 7 / 619:  62%|██████▏   | 619/1000 [26:04<16:02,  2.53s/it][Succeeded / Failed / Skipped / Total] 95 / 517 / 7 / 619:  62%|██████▏   | 620/1000 [26:04<15:58,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 518 / 7 / 620:  62%|██████▏   | 620/1000 [26:04<15:58,  2.52s/it][Succeeded / Failed / Skipped / Total] 95 / 519 / 7 / 621:  62%|██████▏   | 621/1000 [26:11<15:59,  2.53s/it][Succeeded / Failed / Skipped / Total] 95 / 519 / 7 / 621:  62%|██████▏   | 622/1000 [26:13<15:56,  2.53s/it][Succeeded / Failed / Skipped / Total] 95 / 520 / 7 / 622:  62%|██████▏   | 622/1000 [26:13<15:56,  2.53s/it][Succeeded / Failed / Skipped / Total] 95 / 521 / 7 / 623:  62%|██████▏   | 623/1000 [26:16<15:54,  2.53s/it][Succeeded / Failed / Skipped / Total] 95 / 521 / 7 / 623:  62%|██████▏   | 624/1000 [26:16<15:49,  2.53s/it]Returns the EntityManager bound to the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Push or pop an EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[main]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 620 ---------------------------------------------
Gets the stack of EntityManager objects . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[after]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[task]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[task]] ) ; return [[task]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 621 ---------------------------------------------
Apply a splitter to a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[print]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[array]] ) { return [[print]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[array]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Convert error arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[port]] ( Object [ ] [[empty]] ) { if ( [[empty]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[empty]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 623 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[set]] ( T [[function]] ) { if ( [[function]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[function]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 521 / 7 / 624:  62%|██████▏   | 624/1000 [26:16<15:49,  2.53s/it][Succeeded / Failed / Skipped / Total] 96 / 522 / 7 / 625:  62%|██████▎   | 625/1000 [26:16<15:46,  2.52s/it][Succeeded / Failed / Skipped / Total] 96 / 522 / 7 / 625:  63%|██████▎   | 626/1000 [26:19<15:43,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 522 / 7 / 626:  63%|██████▎   | 626/1000 [26:19<15:43,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 523 / 7 / 627:  63%|██████▎   | 627/1000 [26:23<15:41,  2.53s/it][Succeeded / Failed / Skipped / Total] 97 / 523 / 7 / 627:  63%|██████▎   | 628/1000 [26:23<15:37,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 524 / 7 / 628:  63%|██████▎   | 628/1000 [26:23<15:37,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 525 / 7 / 629:  63%|██████▎   | 629/1000 [26:25<15:35,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 525 / 7 / 629:  63%|██████▎   | 630/1000 [26:26<15:31,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 526 / 7 / 630:  63%|██████▎   | 630/1000 [26:26<15:31,  2.52s/it][Succeeded / Failed / Skipped / Total] 97 / 527 / 7 / 631:  63%|██████▎   | 631/1000 [26:26<15:27,  2.51s/it][Succeeded / Failed / Skipped / Total] 97 / 527 / 7 / 631:  63%|██████▎   | 632/1000 [26:28<15:24,  2.51s/it][Succeeded / Failed / Skipped / Total] 97 / 528 / 7 / 632:  63%|██████▎   | 632/1000 [26:28<15:24,  2.51s/it]Creates a flow from an actor reference . --> Runs the given function with the given buffer size and materializer --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[Out]] > Flow < [[In]] , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[assembly]] , [[mat]] > Flow < [[assembly]] , [[mat]] , ? > [[run]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[assembly]] , [[mat]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 625 ---------------------------------------------
Returns all global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[request]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 626 ---------------------------------------------
Returns the value for the given key . --> Get transformation . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[transformation]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Parses the given text into an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[version]] > [[version]] parse ( String text , Class < [[version]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 628 ---------------------------------------------
Passes the given flow through the given splitter with the given merge strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[assume]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[end]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[end]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 629 ---------------------------------------------
Fill the form with the given values . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[extension]] ( Map < String , Object > [[file]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[file]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[file]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 630 ---------------------------------------------
Parses the given text into an instance of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[convert]] > [[convert]] parse ( Field field , String text ) { return ( [[convert]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Print an object to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[after]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[after]] . class ) ) { return conversion . convert ( t , [[after]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Print a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[procedure]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[procedure]] . class ) ) ) { return ( [[procedure]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[procedure]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[procedure]] . class ) ) { return conversion . convert ( t , [[procedure]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 529 / 7 / 633:  63%|██████▎   | 633/1000 [26:28<15:20,  2.51s/it][Succeeded / Failed / Skipped / Total] 97 / 529 / 7 / 633:  63%|██████▎   | 634/1000 [26:30<15:18,  2.51s/it][Succeeded / Failed / Skipped / Total] 97 / 530 / 7 / 634:  63%|██████▎   | 634/1000 [26:30<15:18,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 530 / 7 / 635:  64%|██████▎   | 635/1000 [26:36<15:17,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 530 / 7 / 635:  64%|██████▎   | 636/1000 [26:39<15:15,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 531 / 7 / 636:  64%|██████▎   | 636/1000 [26:39<15:15,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 532 / 7 / 637:  64%|██████▎   | 637/1000 [26:42<15:13,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 532 / 7 / 637:  64%|██████▍   | 638/1000 [26:45<15:10,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 533 / 7 / 638:  64%|██████▍   | 638/1000 [26:45<15:10,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 534 / 7 / 639:  64%|██████▍   | 639/1000 [26:48<15:08,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 534 / 7 / 639:  64%|██████▍   | 640/1000 [26:48<15:04,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 535 / 7 / 640:  64%|██████▍   | 640/1000 [26:48<15:04,  2.51s/it]Prints the type of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[loop]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 634 ---------------------------------------------
Returns a JSON representation of the errors . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[power]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 635 ---------------------------------------------
Register optional formatters . --> Composes the formatters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[compose]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[last]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[accept]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 638 ---------------------------------------------
Converts a java . util . List to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[where]] ( java . util . List < T > [[max]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[max]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Returns a list of nodes matching the given path and node . --> [[[FAILED]]]

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object node ) { return [[selectNodes]] ( [[path]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[set]] ( String [[data]] , Object node ) { return [[set]] ( [[data]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 640 ---------------------------------------------
Converts an array to an immutable sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[example]] ( T [ ] [[function]] ) { return [[example]] ( java . util . Arrays . asList ( [[function]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 536 / 7 / 641:  64%|██████▍   | 641/1000 [26:53<15:03,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 536 / 7 / 641:  64%|██████▍   | 642/1000 [26:54<15:00,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 537 / 7 / 642:  64%|██████▍   | 642/1000 [26:54<15:00,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 538 / 7 / 643:  64%|██████▍   | 643/1000 [26:57<14:58,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 538 / 7 / 643:  64%|██████▍   | 644/1000 [26:59<14:55,  2.51s/it]Returns an immutable sequence consisting of the elements of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[so]] ( T ... [[power]] ) { return toSeq ( [[power]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 642 ---------------------------------------------
Register an annotation formatter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) [[sourceType]] . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[fix]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[domain]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[method]] , TypeDescriptor targetType ) { return ( [[method]] . getAnnotation ( [[domain]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[method]] , TypeDescriptor targetType ) { final A [[list]] = ( A ) [[method]] . getAnnotation ( [[domain]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[list]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[method]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[domain]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[method]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[domain]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[method]] , TypeDescriptor targetType ) { final A [[list]] = ( A ) targetType . getAnnotation ( [[domain]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[list]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[method]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[domain]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 643 ---------------------------------------------
Accept or result . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[by]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[by]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[a]] ) { return f . apply ( [[a]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 539 / 7 / 644:  64%|██████▍   | 644/1000 [26:59<14:55,  2.51s/it][Succeeded / Failed / Skipped / Total] 98 / 540 / 7 / 645:  64%|██████▍   | 645/1000 [27:06<14:55,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 540 / 7 / 645:  65%|██████▍   | 646/1000 [27:09<14:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 98 / 541 / 7 / 646:  65%|██████▍   | 646/1000 [27:09<14:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 99 / 541 / 7 / 647:  65%|██████▍   | 647/1000 [27:12<14:50,  2.52s/it][Succeeded / Failed / Skipped / Total] 99 / 541 / 7 / 647:  65%|██████▍   | 648/1000 [27:13<14:47,  2.52s/it][Succeeded / Failed / Skipped / Total] 99 / 542 / 7 / 648:  65%|██████▍   | 648/1000 [27:13<14:47,  2.52s/it][Succeeded / Failed / Skipped / Total] 99 / 543 / 7 / 649:  65%|██████▍   | 649/1000 [27:15<14:44,  2.52s/it][Succeeded / Failed / Skipped / Total] 99 / 543 / 7 / 649:  65%|██████▌   | 650/1000 [27:21<14:43,  2.53s/it][Succeeded / Failed / Skipped / Total] 99 / 544 / 7 / 650:  65%|██████▌   | 650/1000 [27:21<14:43,  2.53s/it][Succeeded / Failed / Skipped / Total] 99 / 545 / 7 / 651:  65%|██████▌   | 651/1000 [27:24<14:41,  2.53s/it][Succeeded / Failed / Skipped / Total] 99 / 545 / 7 / 651:  65%|██████▌   | 652/1000 [27:25<14:38,  2.52s/it]Creates a MappedWebSocketAcceptor that accepts JSON messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[mail]] , Out > MappedWebSocketAcceptor < [[mail]] , Out > [[move]] ( Class < [[mail]] > [[list]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[list]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[list]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Calculates the promotion cost for a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[loop]] ( final Class < ? > [[function]] , final Class < ? > destClass ) { float [[line]] = 0.0f ; Class < ? > cls = [[function]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 646 ---------------------------------------------
Checks if the given object is public or package access . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[tree]] ( final AccessibleObject [[java]] ) { if ( [[java]] == null || [[java]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[java]] ; if ( ! [[java]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[java]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 647 ---------------------------------------------
Get one or more messages . --> Update a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[update]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 648 ---------------------------------------------
Gets the total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[procedure]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 649 ---------------------------------------------
Returns the localized message for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[loop]] ( String [[wild]] , Object ... args ) { return messagesApi . get ( lang , [[wild]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a parallel sorter for the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[a]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[a]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Creates a new database instance with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[format]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[format]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 546 / 7 / 652:  65%|██████▌   | 652/1000 [27:25<14:38,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 546 / 7 / 653:  65%|██████▌   | 653/1000 [27:28<14:35,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 546 / 7 / 653:  65%|██████▌   | 654/1000 [27:32<14:34,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 547 / 7 / 654:  65%|██████▌   | 654/1000 [27:32<14:34,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 547 / 8 / 655:  66%|██████▌   | 655/1000 [27:32<14:30,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 547 / 8 / 655:  66%|██████▌   | 656/1000 [27:32<14:26,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 548 / 8 / 656:  66%|██████▌   | 656/1000 [27:32<14:26,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 549 / 8 / 657:  66%|██████▌   | 657/1000 [27:33<14:23,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 549 / 8 / 657:  66%|██████▌   | 658/1000 [27:33<14:19,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 550 / 8 / 658:  66%|██████▌   | 658/1000 [27:33<14:19,  2.51s/it]Returns the cost of an object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[f]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[f]] += 1.5f ; } return [[f]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a numeric type to another type . --> Generates a ARE instruction for the given types . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[are]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[are]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[are]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[are]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Quick sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[load]] ( int index , int lo , int [[store]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[store]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Invoke the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[test]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 657 ---------------------------------------------
Load the argument at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[array]] ( int [[a]] ) { load_local ( state . argumentTypes [ [[a]] ] , state . localOffset + skipArgs ( [[a]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
Merges the elements from lo to hi using the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[main]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
[Succeeded / Failed / Skipped / Total] 100 / 551 / 8 / 659:  66%|██████▌   | 659/1000 [27:36<14:17,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 551 / 8 / 659:  66%|██████▌   | 660/1000 [27:45<14:17,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 552 / 8 / 660:  66%|██████▌   | 660/1000 [27:45<14:17,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 552 / 8 / 660:  66%|██████▌   | 661/1000 [27:51<14:17,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 553 / 8 / 661:  66%|██████▌   | 661/1000 [27:51<14:17,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 553 / 8 / 661:  66%|██████▌   | 662/1000 [27:54<14:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 554 / 8 / 662:  66%|██████▌   | 662/1000 [27:54<14:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 554 / 8 / 662:  66%|██████▋   | 663/1000 [27:57<14:12,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 555 / 8 / 663:  66%|██████▋   | 663/1000 [27:57<14:12,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 555 / 8 / 663:  66%|██████▋   | 664/1000 [27:57<14:08,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 555 / 9 / 664:  66%|██████▋   | 664/1000 [27:57<14:08,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 555 / 9 / 664:  66%|██████▋   | 665/1000 [27:58<14:05,  2.52s/it]--------------------------------------------- Result 659 ---------------------------------------------
Adds a zero or null to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[main]] ( Type [[i]] ) { if ( TypeUtils . isPrimitive ( [[i]] ) ) { switch ( [[i]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 660 ---------------------------------------------
Unbox a primitive or zero type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[check]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[a]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[a]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[a]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 661 ---------------------------------------------
Compare two null labels . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[main]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 662 ---------------------------------------------
Processes an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 663 ---------------------------------------------
Get a list of methods from a superclass and interfaces . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] [[interfaces]] , List methods ) { [[getMethods]] ( [[superclass]] , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[main]] ( Class [[attributes]] , Class [ ] [[database]] , List methods ) { [[main]] ( [[attributes]] , [[database]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 664 ---------------------------------------------
Gets a field from the provider . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
[Succeeded / Failed / Skipped / Total] 100 / 556 / 9 / 665:  66%|██████▋   | 665/1000 [27:58<14:05,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 556 / 9 / 665:  67%|██████▋   | 666/1000 [28:01<14:03,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 557 / 9 / 666:  67%|██████▋   | 666/1000 [28:01<14:03,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 557 / 9 / 666:  67%|██████▋   | 667/1000 [28:02<13:59,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 558 / 9 / 667:  67%|██████▋   | 667/1000 [28:02<13:59,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 558 / 9 / 667:  67%|██████▋   | 668/1000 [28:02<13:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 558 / 10 / 668:  67%|██████▋   | 668/1000 [28:02<13:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 558 / 10 / 668:  67%|██████▋   | 669/1000 [28:02<13:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 559 / 10 / 669:  67%|██████▋   | 669/1000 [28:02<13:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 559 / 10 / 669:  67%|██████▋   | 670/1000 [28:05<13:50,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 560 / 10 / 670:  67%|██████▋   | 670/1000 [28:05<13:50,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 560 / 10 / 670:  67%|██████▋   | 671/1000 [28:11<13:49,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 561 / 10 / 671:  67%|██████▋   | 671/1000 [28:11<13:49,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 561 / 10 / 671:  67%|██████▋   | 672/1000 [28:12<13:45,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 562 / 10 / 672:  67%|██████▋   | 672/1000 [28:12<13:45,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 562 / 10 / 672:  67%|██████▋   | 673/1000 [28:13<13:42,  2.52s/it]--------------------------------------------- Result 665 ---------------------------------------------
Resolve all bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[ert]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 666 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[main]] ( Class [[stack]] ) { if ( [[stack]] != null && [[stack]] . equals ( Object . class ) ) { [[stack]] = null ; } this . superclass = [[stack]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Filter constructors by visibility . --> [[[FAILED]]]

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[arguments]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[arguments]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[arguments]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 668 ---------------------------------------------
Finds all methods matching the given names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Adds a method to the list of methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[application]] ( Method method ) { [[application]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 670 ---------------------------------------------
Returns the cardinality of this value . --> [[[FAILED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[value]] = 0 ; while ( w != 0 ) { [[value]] += T [ w & 255 ] ; w >>= 8 ; } return [[value]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 671 ---------------------------------------------
Resolve a child path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[address]] ) { if ( StringUtil . startsWithChar ( [[address]] , File . separatorChar ) ) { [[address]] = [[address]] . substring ( 1 ) ; } return base . resolve ( [[address]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[after]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 673 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 563 / 10 / 673:  67%|██████▋   | 673/1000 [28:13<13:42,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 563 / 10 / 673:  67%|██████▋   | 674/1000 [28:13<13:39,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 564 / 10 / 674:  67%|██████▋   | 674/1000 [28:13<13:39,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 564 / 10 / 674:  68%|██████▊   | 675/1000 [28:18<13:37,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 565 / 10 / 675:  68%|██████▊   | 675/1000 [28:18<13:37,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 565 / 10 / 675:  68%|██████▊   | 676/1000 [28:19<13:34,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 566 / 10 / 676:  68%|██████▊   | 676/1000 [28:19<13:34,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 566 / 10 / 676:  68%|██████▊   | 677/1000 [28:20<13:31,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 567 / 10 / 677:  68%|██████▊   | 677/1000 [28:20<13:31,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 567 / 10 / 677:  68%|██████▊   | 678/1000 [28:21<13:28,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 568 / 10 / 678:  68%|██████▊   | 678/1000 [28:21<13:28,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 568 / 10 / 678:  68%|██████▊   | 679/1000 [28:25<13:26,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 569 / 10 / 679:  68%|██████▊   | 679/1000 [28:25<13:26,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 569 / 10 / 679:  68%|██████▊   | 680/1000 [28:25<13:22,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 570 / 10 / 680:  68%|██████▊   | 680/1000 [28:25<13:22,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 570 / 10 / 680:  68%|██████▊   | 681/1000 [28:26<13:19,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 571 / 10 / 681:  68%|██████▊   | 681/1000 [28:26<13:19,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 571 / 10 / 681:  68%|██████▊   | 682/1000 [28:27<13:16,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 572 / 10 / 682:  68%|██████▊   | 682/1000 [28:27<13:16,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 572 / 10 / 682:  68%|██████▊   | 683/1000 [28:31<13:14,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 573 / 10 / 683:  68%|██████▊   | 683/1000 [28:31<13:14,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 573 / 10 / 683:  68%|██████▊   | 684/1000 [28:32<13:10,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 574 / 10 / 684:  68%|██████▊   | 684/1000 [28:32<13:10,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 574 / 10 / 684:  68%|██████▊   | 685/1000 [28:32<13:07,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 575 / 10 / 685:  68%|██████▊   | 685/1000 [28:32<13:07,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 575 / 10 / 685:  69%|██████▊   | 686/1000 [28:40<13:07,  2.51s/it]Read a string from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[input]] ( final Path [[input]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[input]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the host of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[race]] ( final String [[header]] ) { this . [[send]] = [[race]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[race]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[pointer]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 676 ---------------------------------------------
Create a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[e]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 677 ---------------------------------------------
Create a POST request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[http]] ( final String [[list]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[list]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String [[destination]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[oracle]] ( final String method , final String [[method]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[method]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 679 ---------------------------------------------
Create a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String [[form]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[form]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PATCH request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[program]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[protocol]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[array]] ( final String [[head]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[head]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Create an OPTIONS request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[generic]] ( final String [[list]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[list]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the path for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[ial]] ( String [[a]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Creates a TRACE request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[link]] ( final String [[value]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[value]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 686 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 576 / 10 / 686:  69%|██████▊   | 686/1000 [28:40<13:07,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 576 / 10 / 686:  69%|██████▊   | 687/1000 [28:43<13:05,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 577 / 10 / 687:  69%|██████▊   | 687/1000 [28:43<13:05,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 577 / 10 / 687:  69%|██████▉   | 688/1000 [28:45<13:02,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 578 / 10 / 688:  69%|██████▉   | 688/1000 [28:45<13:02,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 578 / 10 / 688:  69%|██████▉   | 689/1000 [28:46<12:59,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 579 / 10 / 689:  69%|██████▉   | 689/1000 [28:46<12:59,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 579 / 10 / 689:  69%|██████▉   | 690/1000 [28:48<12:56,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 580 / 10 / 690:  69%|██████▉   | 690/1000 [28:48<12:56,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 580 / 10 / 690:  69%|██████▉   | 691/1000 [28:49<12:53,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 581 / 10 / 691:  69%|██████▉   | 691/1000 [28:49<12:53,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 581 / 10 / 691:  69%|██████▉   | 692/1000 [28:52<12:51,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 582 / 10 / 692:  69%|██████▉   | 692/1000 [28:52<12:51,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 582 / 10 / 692:  69%|██████▉   | 693/1000 [28:54<12:48,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 583 / 10 / 693:  69%|██████▉   | 693/1000 [28:54<12:48,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 583 / 10 / 693:  69%|██████▉   | 694/1000 [28:55<12:45,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 584 / 10 / 694:  69%|██████▉   | 694/1000 [28:55<12:45,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 584 / 10 / 694:  70%|██████▉   | 695/1000 [29:00<12:43,  2.50s/it]Add a query map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[ria]] ( final Map < String , String > [[list]] ) { for ( Map . Entry < String , String > entry : [[list]] . entrySet ( ) ) { [[ria]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[index]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Adds a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[ered]] ( final Cookie ... [[ered]] ) { if ( [[ered]] . length == 0 ) { return this ; } StringBuilder [[error]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[ered]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[error]] . append ( "; " ) ; } first = "False" != "False" ; [[error]] . append ( cookie . getName ( ) ) ; [[error]] . append ( ' ' ) ; [[error]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[error]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[re]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[re]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Returns the URL of the host . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[extension]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Add a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String [[name1]] , final Object value1 , final Object ... parameters ) { [[query]] ( [[name1]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[ions]] ( final String [[access]] , final Object value1 , final Object ... parameters ) { [[ions]] ( [[access]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[ions]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Send the request and receive the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Returns a buffer that can be used to write data to the client . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[when]] ( final boolean [[value]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[end]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 585 / 10 / 695:  70%|██████▉   | 695/1000 [29:00<12:43,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 585 / 10 / 695:  70%|██████▉   | 696/1000 [29:01<12:40,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 586 / 10 / 696:  70%|██████▉   | 696/1000 [29:01<12:40,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 586 / 10 / 696:  70%|██████▉   | 697/1000 [29:06<12:39,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 587 / 10 / 697:  70%|██████▉   | 697/1000 [29:06<12:39,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 587 / 10 / 697:  70%|██████▉   | 698/1000 [29:06<12:35,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 588 / 10 / 698:  70%|██████▉   | 698/1000 [29:06<12:35,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 588 / 10 / 698:  70%|██████▉   | 699/1000 [29:07<12:32,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 589 / 10 / 699:  70%|██████▉   | 699/1000 [29:07<12:32,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 589 / 10 / 699:  70%|███████   | 700/1000 [29:09<12:29,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 590 / 10 / 700:  70%|███████   | 700/1000 [29:09<12:29,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 590 / 10 / 700:  70%|███████   | 701/1000 [29:14<12:28,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 591 / 10 / 701:  70%|███████   | 701/1000 [29:14<12:28,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 591 / 10 / 701:  70%|███████   | 702/1000 [29:14<12:24,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 592 / 10 / 702:  70%|███████   | 702/1000 [29:14<12:24,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 592 / 10 / 702:  70%|███████   | 703/1000 [29:17<12:22,  2.50s/it]Sets the basic authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String data = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[a]] ( final String [[string]] , final String password ) { if ( [[string]] != null && password != null ) { String data = [[string]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[evaluated]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[compilation]] ( ) { final Collection < ? extends ActionFilter > [[libraries]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[libraries]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[main]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 699 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[exception]] ( ) { final Collection < ActionResult > [[presentation]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[presentation]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 700 ---------------------------------------------
Collect all action runtimes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[example]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 701 ---------------------------------------------
Remove a range from a handler . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = [[removeRange]] ( [[firstHandler]] . nextHandler , start , end ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[fix]] ( final Handler [[change]] , final Label start , final Label end ) { if ( [[change]] == null ) { return null ; } else { [[change]] . nextHandler = [[fix]] ( [[change]] . nextHandler , start , end ) ; } int handlerStart = [[change]] . startPc . bytecodeOffset ; int handlerEnd = [[change]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the value of the named property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[name]] > [[name]] getProperty ( final Object bean , final String name ) { BeanProperty [[a]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[a]] ) ; return ( [[name]] ) getIndexProperty ( [[a]] ) ; } else { try { resolveNestedProperties ( [[a]] ) ; return ( [[name]] ) getIndexProperty ( [[a]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 703 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 593 / 10 / 703:  70%|███████   | 703/1000 [29:17<12:22,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 593 / 10 / 703:  70%|███████   | 704/1000 [29:18<12:19,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 594 / 10 / 704:  70%|███████   | 704/1000 [29:18<12:19,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 595 / 10 / 705:  70%|███████   | 705/1000 [29:18<12:15,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 595 / 10 / 705:  71%|███████   | 706/1000 [29:23<12:14,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 596 / 10 / 706:  71%|███████   | 706/1000 [29:23<12:14,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 597 / 10 / 707:  71%|███████   | 707/1000 [29:23<12:10,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 597 / 10 / 707:  71%|███████   | 708/1000 [29:26<12:08,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 598 / 10 / 708:  71%|███████   | 708/1000 [29:26<12:08,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 599 / 10 / 709:  71%|███████   | 709/1000 [29:27<12:05,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 599 / 10 / 709:  71%|███████   | 710/1000 [29:32<12:03,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 600 / 10 / 710:  71%|███████   | 710/1000 [29:32<12:03,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 601 / 10 / 711:  71%|███████   | 711/1000 [29:34<12:01,  2.50s/it][Succeeded / Failed / Skipped / Total] 100 / 601 / 10 / 711:  71%|███████   | 712/1000 [29:35<11:58,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 602 / 10 / 712:  71%|███████   | 712/1000 [29:35<11:58,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 603 / 10 / 713:  71%|███████▏  | 713/1000 [29:37<11:55,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 603 / 10 / 713:  71%|███████▏  | 714/1000 [29:39<11:52,  2.49s/it]extract this reference from a property name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[item]] ( final String [[end]] ) { int ndx = StringUtil . indexOfChars ( [[end]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[end]] ; } return [[end]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Sets a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object value ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[end]] ( final BeanProperty [[method]] , final Object value ) { Setter [[date]] = [[method]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 705 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 706 ---------------------------------------------
Set a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[list]] ( final String [[field]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[field]] , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Get a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[list]] ( final String [[declaration]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[declaration]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[referenced]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Get the entity descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[list]] ( final String [[alice]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[alice]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Get the alias for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[name]] ( final String [[id]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[id]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Find table descriptor by column ref . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[node]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Returns the entity descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[a]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[a]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[a]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[after]] ( final String [[alphabet]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[alphabet]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 604 / 10 / 714:  71%|███████▏  | 714/1000 [29:39<11:52,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 605 / 10 / 715:  72%|███████▏  | 715/1000 [29:43<11:50,  2.49s/it][Succeeded / Failed / Skipped / Total] 100 / 605 / 10 / 715:  72%|███████▏  | 716/1000 [29:56<11:52,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 606 / 10 / 716:  72%|███████▏  | 716/1000 [29:56<11:52,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 606 / 10 / 716:  72%|███████▏  | 717/1000 [29:58<11:49,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 607 / 10 / 717:  72%|███████▏  | 717/1000 [29:58<11:49,  2.51s/it][Succeeded / Failed / Skipped / Total] 100 / 607 / 10 / 717:  72%|███████▏  | 718/1000 [30:07<11:49,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 608 / 10 / 718:  72%|███████▏  | 718/1000 [30:07<11:49,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 608 / 10 / 718:  72%|███████▏  | 719/1000 [30:12<11:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 609 / 10 / 719:  72%|███████▏  | 719/1000 [30:12<11:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 609 / 10 / 719:  72%|███████▏  | 720/1000 [30:15<11:45,  2.52s/it]Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[where]] ( final String [[function]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[function]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[function]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 715 ---------------------------------------------
Writes the given value to the given JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[declaration]] ( final JsonContext jsonContext , final T [[word]] ) { if ( jsonContext . pushValue ( [[word]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[list]] ( final String [[format]] ) { StringBuilder tableName = new StringBuilder ( [[format]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[format]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[format]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Inject the attributes from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[unless]] ( final HttpServletRequest [[array]] , final Targets targets ) { final Enumeration < String > attributeNames = [[array]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[array]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Convert column name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[add]] ( final String [[function]] ) { String propertyName = convertColumnNameToPropertyName ( [[function]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Injects the parameters from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[unless]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 720 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 610 / 10 / 720:  72%|███████▏  | 720/1000 [30:15<11:45,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 610 / 10 / 720:  72%|███████▏  | 721/1000 [30:20<11:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 611 / 10 / 721:  72%|███████▏  | 721/1000 [30:20<11:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 611 / 10 / 721:  72%|███████▏  | 722/1000 [30:23<11:42,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 612 / 10 / 722:  72%|███████▏  | 722/1000 [30:23<11:42,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 612 / 10 / 722:  72%|███████▏  | 723/1000 [30:24<11:38,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 613 / 10 / 723:  72%|███████▏  | 723/1000 [30:24<11:38,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 613 / 10 / 723:  72%|███████▏  | 724/1000 [30:26<11:36,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 614 / 10 / 724:  72%|███████▏  | 724/1000 [30:26<11:36,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 614 / 10 / 724:  72%|███████▎  | 725/1000 [30:30<11:34,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 615 / 10 / 725:  72%|███████▎  | 725/1000 [30:30<11:34,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 615 / 10 / 725:  73%|███████▎  | 726/1000 [30:31<11:31,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 616 / 10 / 726:  73%|███████▎  | 726/1000 [30:31<11:31,  2.52s/it][Succeeded / Failed / Skipped / Total] 100 / 616 / 10 / 726:  73%|███████▎  | 727/1000 [30:42<11:32,  2.53s/it]Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
Returns a set of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[result]] ( ) { final Set < T > [[sum]] = new HashSet <> ( wrappers . size ( ) ) ; [[sum]] . addAll ( wrappers . values ( ) ) ; return [[sum]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 722 ---------------------------------------------
Store a value to a PreparedStatement . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement [[st]] , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( [[st]] , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[collection]] ( final PreparedStatement [[attribute]] , final int index , final Object value , final int [[attribute]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( [[attribute]] , index , t , [[attribute]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Convert column name to property name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < len ; [[i]] ++ ) { char [[c]] = columnName . charAt ( [[i]] ) ; if ( [[c]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( [[c]] ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( [[c]] ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[list]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[doc]] = 0 ; [[doc]] < len ; [[doc]] ++ ) { char [[ame]] = columnName . charAt ( [[doc]] ) ; if ( [[ame]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( [[ame]] ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( [[ame]] ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 724 ---------------------------------------------
Creates an instance of the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Resolves the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[construct]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[function]] = lookup ( wrapperClassName ) ; if ( [[function]] == null ) { [[function]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[function]] ) ; wrappers . put ( wrapperClassName , [[function]] ) ; } return [[function]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 726 ---------------------------------------------
Converts a path to a system path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[when]] ( final String [[above]] ) { if ( [[above]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[above]] ) ; } else { return separatorsToUnix ( [[above]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 617 / 10 / 727:  73%|███████▎  | 727/1000 [30:42<11:32,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 617 / 10 / 727:  73%|███████▎  | 728/1000 [30:42<11:28,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 618 / 10 / 728:  73%|███████▎  | 728/1000 [30:42<11:28,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 618 / 10 / 728:  73%|███████▎  | 729/1000 [30:45<11:26,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 619 / 10 / 729:  73%|███████▎  | 729/1000 [30:45<11:26,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 619 / 10 / 729:  73%|███████▎  | 730/1000 [30:47<11:23,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 620 / 10 / 730:  73%|███████▎  | 730/1000 [30:47<11:23,  2.53s/it][Succeeded / Failed / Skipped / Total] 100 / 620 / 10 / 730:  73%|███████▎  | 731/1000 [30:48<11:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 101 / 620 / 10 / 731:  73%|███████▎  | 731/1000 [30:48<11:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 101 / 621 / 10 / 732:  73%|███████▎  | 732/1000 [30:48<11:16,  2.53s/it][Succeeded / Failed / Skipped / Total] 101 / 621 / 10 / 732:  73%|███████▎  | 733/1000 [30:51<11:14,  2.53s/it]Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[where]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[index]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[index]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[index]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[error]] = in . matchedName ( paramName ) ; if ( [[error]] != null ) { final FileUpload [ ] paramValues = [[index]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[error]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 728 ---------------------------------------------
Returns the relative path of targetPath relative to basePath . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[source]] ( final String [[end]] , final String [[point]] ) { return new File ( [[point]] ) . toPath ( ) . relativize ( new File ( [[end]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Adds an action config to the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Get the path of a file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int [[separatorAdd]] ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int endIndex = index + [[separatorAdd]] ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[integer]] ( final String [[base]] , final int [[call]] ) { if ( [[base]] == null ) { return null ; } int prefix = getPrefixLength ( [[base]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[base]] ) ; int endIndex = index + [[call]] ; if ( prefix >= [[base]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[base]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 731 ---------------------------------------------
Start the Madvoc server . --> Initialize Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[bar]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Register a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[array]] ) { Objects . requireNonNull ( [[array]] ) ; madvocComponents . add ( ClassConsumer . of ( [[array]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 733 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 622 / 10 / 733:  73%|███████▎  | 733/1000 [30:51<11:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 101 / 623 / 10 / 734:  73%|███████▎  | 734/1000 [30:52<11:11,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 623 / 10 / 734:  74%|███████▎  | 735/1000 [30:52<11:07,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 624 / 10 / 735:  74%|███████▎  | 735/1000 [30:52<11:07,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 625 / 10 / 736:  74%|███████▎  | 736/1000 [30:55<11:05,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 625 / 10 / 736:  74%|███████▎  | 737/1000 [30:59<11:03,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 626 / 10 / 737:  74%|███████▎  | 737/1000 [30:59<11:03,  2.52s/it]Register Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[save]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Split a filename into its components . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[lastSeparatorIndex]] = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( [[lastSeparatorIndex]] == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , [[lastSeparatorIndex]] + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[suffix]] ) { String prefix = getPrefix ( [[suffix]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[access]] = indexOfLastSeparator ( [[suffix]] ) ; int lastExtensionIndex = indexOfExtension ( [[suffix]] ) ; String path ; String baseName ; String extension ; if ( [[access]] == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[suffix]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[suffix]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[suffix]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[suffix]] . substring ( prefix . length ( ) , [[access]] + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[suffix]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[suffix]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[suffix]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 735 ---------------------------------------------
Configure defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[empty]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude the given jars from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... [[code]] ) { for ( final String excludedJar : [[code]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Adds a list of entries to be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 627 / 10 / 738:  74%|███████▍  | 738/1000 [30:59<11:00,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 627 / 10 / 738:  74%|███████▍  | 739/1000 [30:59<10:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 628 / 10 / 739:  74%|███████▍  | 739/1000 [30:59<10:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 629 / 10 / 740:  74%|███████▍  | 740/1000 [31:07<10:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 101 / 629 / 10 / 740:  74%|███████▍  | 741/1000 [31:07<10:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 102 / 629 / 10 / 741:  74%|███████▍  | 741/1000 [31:07<10:52,  2.52s/it][Succeeded / Failed / Skipped / Total] 102 / 630 / 10 / 742:  74%|███████▍  | 742/1000 [31:14<10:51,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 630 / 10 / 742:  74%|███████▍  | 743/1000 [31:17<10:49,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 631 / 10 / 743:  74%|███████▍  | 743/1000 [31:17<10:49,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 632 / 10 / 744:  74%|███████▍  | 744/1000 [31:19<10:46,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 632 / 10 / 744:  74%|███████▍  | 745/1000 [31:20<10:43,  2.52s/it]Include all of the specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[python]] ( final String ... includedJars ) { for ( final String [[f]] : includedJars ) { rulesJars . include ( [[f]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 739 ---------------------------------------------
Exclude the given entries from the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String [[excludedEntry]] : [[excludedEntries]] ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[end]] ) { for ( final String [[a]] : [[end]] ) { rulesEntries . exclude ( [[a]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Scan a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[page]] ) { for ( final String path : [[page]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Returns the bytecode signature of a class . --> Print a space to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[print]] ( final Class [[space]] ) { final String name = ' ' + [[space]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 742 ---------------------------------------------
start scanning the files to scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[echo]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[output]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[output]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Scan the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[main]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 745 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 633 / 10 / 745:  74%|███████▍  | 745/1000 [31:20<10:43,  2.52s/it][Succeeded / Failed / Skipped / Total] 102 / 634 / 10 / 746:  75%|███████▍  | 746/1000 [31:23<10:41,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 634 / 10 / 746:  75%|███████▍  | 747/1000 [31:26<10:39,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 635 / 10 / 747:  75%|███████▍  | 747/1000 [31:26<10:39,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 636 / 10 / 748:  75%|███████▍  | 748/1000 [31:32<10:37,  2.53s/it][Succeeded / Failed / Skipped / Total] 102 / 636 / 10 / 748:  75%|███████▍  | 749/1000 [31:39<10:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 637 / 10 / 749:  75%|███████▍  | 749/1000 [31:39<10:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 637 / 10 / 749:  75%|███████▌  | 750/1000 [31:46<10:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 638 / 10 / 750:  75%|███████▌  | 750/1000 [31:46<10:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 638 / 10 / 750:  75%|███████▌  | 751/1000 [31:50<10:33,  2.54s/it]Scan a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[begin]] ( final File [[count]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[count]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[count]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 746 ---------------------------------------------
Create a new JtxTransaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[using]] ( final JtxTransactionMode [[code]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[code]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 747 ---------------------------------------------
Get or initialize scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 748 ---------------------------------------------
For the given scope type invoke the given consumer for the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[etc]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[version]] = getOrInitScope ( [[etc]] ) ; madvocScopeConsumer . accept ( [[version]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Prepare a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[string]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Assure the size of the token set is at least maxTokensPerSession . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[z]] ) { if ( [[z]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[z]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[z]] . size ( ) >= maxTokensPerSession ) ) { [[z]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
[Succeeded / Failed / Skipped / Total] 102 / 639 / 10 / 751:  75%|███████▌  | 751/1000 [31:50<10:33,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 639 / 10 / 751:  75%|███████▌  | 752/1000 [31:52<10:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 640 / 10 / 752:  75%|███████▌  | 752/1000 [31:52<10:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 102 / 640 / 10 / 752:  75%|███████▌  | 753/1000 [32:03<10:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 641 / 10 / 753:  75%|███████▌  | 753/1000 [32:03<10:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 641 / 10 / 753:  75%|███████▌  | 754/1000 [32:03<10:27,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 642 / 10 / 754:  75%|███████▌  | 754/1000 [32:03<10:27,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 642 / 10 / 754:  76%|███████▌  | 755/1000 [32:05<10:24,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 643 / 10 / 755:  76%|███████▌  | 755/1000 [32:05<10:24,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 643 / 10 / 755:  76%|███████▌  | 756/1000 [32:08<10:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 644 / 10 / 756:  76%|███████▌  | 756/1000 [32:08<10:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 644 / 10 / 756:  76%|███████▌  | 757/1000 [32:13<10:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 645 / 10 / 757:  76%|███████▌  | 757/1000 [32:13<10:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 645 / 10 / 757:  76%|███████▌  | 758/1000 [32:15<10:17,  2.55s/it]--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[manager]] ( final Object [[example]] ) { BeanCopy beanCopy = new BeanCopy ( [[example]] ) ; beanCopy . isSourceMap = [[example]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Creates a copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[declared]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[pointer]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 754 ---------------------------------------------
Checks if the session contains a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[source]] ( final HttpSession session , final String [[generator]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[generator]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[generator]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[generator]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 755 ---------------------------------------------
Register the table reference for the entity . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[end]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 756 ---------------------------------------------
Resolve a Petite scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
Remove a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[empty]] ( final Class [[field]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 646 / 10 / 758:  76%|███████▌  | 758/1000 [32:15<10:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 102 / 646 / 10 / 758:  76%|███████▌  | 759/1000 [32:25<10:17,  2.56s/it][Succeeded / Failed / Skipped / Total] 102 / 647 / 10 / 759:  76%|███████▌  | 759/1000 [32:25<10:17,  2.56s/it][Succeeded / Failed / Skipped / Total] 102 / 647 / 10 / 759:  76%|███████▌  | 760/1000 [32:25<10:14,  2.56s/it][Succeeded / Failed / Skipped / Total] 102 / 648 / 10 / 760:  76%|███████▌  | 760/1000 [32:25<10:14,  2.56s/it][Succeeded / Failed / Skipped / Total] 102 / 648 / 10 / 760:  76%|███████▌  | 761/1000 [32:36<10:14,  2.57s/it][Succeeded / Failed / Skipped / Total] 102 / 649 / 10 / 761:  76%|███████▌  | 761/1000 [32:36<10:14,  2.57s/it][Succeeded / Failed / Skipped / Total] 102 / 649 / 10 / 761:  76%|███████▌  | 762/1000 [32:47<10:14,  2.58s/it]Decodes a string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[after]] ( final char [ ] [[list]] ) { int length = [[list]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[list]] [ endx ] == ' ' ? ( [[list]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[list]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[list]] [ sndx ++ ] ] << 18 | INV [ [[list]] [ sndx ++ ] ] << 12 | INV [ [[list]] [ sndx ++ ] ] << 6 | INV [ [[list]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[list]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 759 ---------------------------------------------
Register a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[result]] ( final Class < T > [[data]] , String [[type]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[type]] == null ) { [[type]] = resolveBeanName ( [[data]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[data]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[data]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 760 ---------------------------------------------
Register a bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[main]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[add]] ( final Class [[extension]] ) { String [ ] [[draw]] = beanCollections . get ( [[extension]] ) ; if ( [[draw]] != null ) { return [[draw]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[extension]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[draw]] = StringPool . EMPTY_ARRAY ; } else { [[draw]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[extension]] , [[draw]] ) ; return [[draw]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 650 / 10 / 762:  76%|███████▌  | 762/1000 [32:47<10:14,  2.58s/it][Succeeded / Failed / Skipped / Total] 102 / 650 / 10 / 762:  76%|███████▋  | 763/1000 [32:52<10:12,  2.58s/it][Succeeded / Failed / Skipped / Total] 102 / 651 / 10 / 763:  76%|███████▋  | 763/1000 [32:52<10:12,  2.58s/it][Succeeded / Failed / Skipped / Total] 102 / 651 / 10 / 763:  76%|███████▋  | 764/1000 [32:54<10:09,  2.58s/it][Succeeded / Failed / Skipped / Total] 102 / 652 / 10 / 764:  76%|███████▋  | 764/1000 [32:54<10:09,  2.58s/it][Succeeded / Failed / Skipped / Total] 102 / 652 / 10 / 764:  76%|███████▋  | 765/1000 [33:21<10:14,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 653 / 10 / 765:  76%|███████▋  | 765/1000 [33:21<10:14,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 653 / 10 / 765:  77%|███████▋  | 766/1000 [33:21<10:11,  2.61s/it]Register a Petite set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[copy]] ( final String beanName , final String [[template]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[template]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[template]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register a Petite constructor injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[assume]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Register a Petite property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[list]] ( final String beanName , final String [[assignment]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[assignment]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[assignment]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 765 ---------------------------------------------
Register Petite destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String [[beanName]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[copy]] ( final String [[base]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[base]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
[Succeeded / Failed / Skipped / Total] 102 / 654 / 10 / 766:  77%|███████▋  | 766/1000 [33:21<10:11,  2.61s/it][Succeeded / Failed / Skipped / Total] 102 / 654 / 10 / 766:  77%|███████▋  | 767/1000 [33:27<10:09,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 655 / 10 / 767:  77%|███████▋  | 767/1000 [33:27<10:09,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 655 / 10 / 767:  77%|███████▋  | 768/1000 [33:33<10:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 656 / 10 / 768:  77%|███████▋  | 768/1000 [33:33<10:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 656 / 10 / 768:  77%|███████▋  | 769/1000 [33:35<10:05,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 657 / 10 / 769:  77%|███████▋  | 769/1000 [33:35<10:05,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 657 / 10 / 769:  77%|███████▋  | 770/1000 [33:36<10:02,  2.62s/it]--------------------------------------------- Result 766 ---------------------------------------------
Register Petite init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[query]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[group]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[group]] == null ) { [[group]] = StringPool . EMPTY_ARRAY ; } int total = [[group]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[group]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[group]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[group]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[payload]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 768 ---------------------------------------------
Iterate through all beans of the given type and accept them to the given consumer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[after]] ( final Class [[producer]] , final Consumer < String > [[empty]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[producer]] ) ) { [[empty]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 769 ---------------------------------------------
Register a Petite method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String [[methodName]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] [[methods]] = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( [[methods]] != null && [[methods]] . length > 0 ) { if ( [[methods]] . length > 1 ) { throw new PetiteException ( [[methods]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + [[methodName]] ) ; } [[method]] = [[methods]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[otherwise]] ( final String [[types]] , final String [[words]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[types]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[result]] = null ; if ( arguments == null ) { MethodDescriptor [ ] [[md]] = cd . getAllMethodDescriptors ( [[words]] ) ; if ( [[md]] != null && [[md]] . length > 0 ) { if ( [[md]] . length > 1 ) { throw new PetiteException ( [[md]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + [[words]] ) ; } [[result]] = [[md]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[words]] , arguments , "True" == "True" ) ; if ( md != null ) { [[result]] = md . getMethod ( ) ; } } if ( [[result]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + [[words]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[result]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[result]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 658 / 10 / 770:  77%|███████▋  | 770/1000 [33:36<10:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 658 / 10 / 770:  77%|███████▋  | 771/1000 [33:44<10:01,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 659 / 10 / 771:  77%|███████▋  | 771/1000 [33:44<10:01,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 659 / 10 / 771:  77%|███████▋  | 772/1000 [33:46<09:58,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 660 / 10 / 772:  77%|███████▋  | 772/1000 [33:46<09:58,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 660 / 10 / 772:  77%|███████▋  | 773/1000 [33:46<09:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 661 / 10 / 773:  77%|███████▋  | 773/1000 [33:46<09:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 661 / 10 / 773:  77%|███████▋  | 774/1000 [33:47<09:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 662 / 10 / 774:  77%|███████▋  | 774/1000 [33:47<09:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 102 / 662 / 10 / 774:  78%|███████▊  | 775/1000 [33:55<09:51,  2.63s/it][Succeeded / Failed / Skipped / Total] 103 / 662 / 10 / 775:  78%|███████▊  | 775/1000 [33:55<09:51,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 662 / 10 / 776:  78%|███████▊  | 776/1000 [33:56<09:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 662 / 10 / 776:  78%|███████▊  | 777/1000 [33:57<09:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 663 / 10 / 777:  78%|███████▊  | 777/1000 [33:57<09:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 664 / 10 / 778:  78%|███████▊  | 778/1000 [33:58<09:41,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 664 / 10 / 778:  78%|███████▊  | 779/1000 [34:05<09:40,  2.63s/it]Define parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > entry : [[properties]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[move]] ( final Map < ? , ? > [[access]] ) { for ( Map . Entry < ? , ? > entry : [[access]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 771 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[event]] ( final ActionRequest [[time]] ) throws Exception { printBefore ( [[time]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[time]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[time]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 772 ---------------------------------------------
Push an integer to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[should]] ( final MethodVisitor mv , final int [[number]] ) { if ( [[number]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[number]] ) ; } else if ( [[number]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[number]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[number]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 773 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[generator]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 774 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[execute]] ( final int [[load]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[load]] > platformVersion ? [[load]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 775 ---------------------------------------------
Advice method name . --> Returns a string that starts with the given string and ends with the given base --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[include]] ( final String [[string]] , final int [[base]] ) { return ProxettaNames . methodPrefix + [[string]] + ProxettaNames . methodDivider + [[base]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
Advice field name . --> Returns a string that starts with the given string and ends with the given base --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[include]] ( final String [[string]] , final int [[base]] ) { return ProxettaNames . fieldPrefix + [[string]] + ProxettaNames . fieldDivider + [[base]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 777 ---------------------------------------------
Check that an argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[since]] ( final MethodInfo [[il]] , final int [[l]] ) { if ( ( [[l]] < 1 ) || ( [[l]] > [[il]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[l]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 778 ---------------------------------------------
Load special method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[implementation]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 665 / 10 / 779:  78%|███████▊  | 779/1000 [34:05<09:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 666 / 10 / 780:  78%|███████▊  | 780/1000 [34:05<09:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 666 / 10 / 780:  78%|███████▊  | 781/1000 [34:13<09:35,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 667 / 10 / 781:  78%|███████▊  | 781/1000 [34:13<09:35,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 668 / 10 / 782:  78%|███████▊  | 782/1000 [34:14<09:32,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 668 / 10 / 782:  78%|███████▊  | 783/1000 [34:16<09:30,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 669 / 10 / 783:  78%|███████▊  | 783/1000 [34:16<09:30,  2.63s/it]Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[procedure]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[load]] = 0 ; [[load]] < methodInfo . getArgumentsCount ( ) ; [[load]] ++ ) { loadMethodArgument ( mv , methodInfo , [[load]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[procedure]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[load]] = 1 ; [[load]] <= methodInfo . getArgumentsCount ( ) ; [[load]] ++ ) { loadMethodArgument ( mv , methodInfo , [[load]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Load a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[main]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 782 ---------------------------------------------
Store a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[main]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
Prepare the return value of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[join]] ( final MethodVisitor [[a]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[a]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[a]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[a]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 784 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 670 / 10 / 784:  78%|███████▊  | 784/1000 [34:21<09:27,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 670 / 10 / 784:  78%|███████▊  | 785/1000 [34:22<09:24,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 671 / 10 / 785:  78%|███████▊  | 785/1000 [34:22<09:24,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 672 / 10 / 786:  79%|███████▊  | 786/1000 [34:23<09:21,  2.62s/it][Succeeded / Failed / Skipped / Total] 104 / 672 / 10 / 786:  79%|███████▊  | 787/1000 [34:30<09:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 673 / 10 / 787:  79%|███████▊  | 787/1000 [34:30<09:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 674 / 10 / 788:  79%|███████▉  | 788/1000 [34:34<09:18,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 674 / 10 / 788:  79%|███████▉  | 789/1000 [34:34<09:14,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 675 / 10 / 789:  79%|███████▉  | 789/1000 [34:34<09:14,  2.63s/it]Generate a NEWARRAY instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[min]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 785 ---------------------------------------------
Creates a key for a method signature . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String [[methodName]] , final String [[description]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[description]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[methodName]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[group]] ( final int access , final String [[token]] , final String [[extension]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[extension]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[token]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 786 ---------------------------------------------
Store a primitive type into an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[are]] ( final MethodVisitor [[a]] , final Class [[min]] ) { if ( [[min]] == int . class ) { [[a]] . visitInsn ( IASTORE ) ; return ; } if ( [[min]] == long . class ) { [[a]] . visitInsn ( LASTORE ) ; return ; } if ( [[min]] == float . class ) { [[a]] . visitInsn ( FASTORE ) ; return ; } if ( [[min]] == double . class ) { [[a]] . visitInsn ( DASTORE ) ; return ; } if ( [[min]] == byte . class ) { [[a]] . visitInsn ( BASTORE ) ; return ; } if ( [[min]] == short . class ) { [[a]] . visitInsn ( SASTORE ) ; return ; } if ( [[min]] == boolean . class ) { [[a]] . visitInsn ( BASTORE ) ; return ; } if ( [[min]] == char . class ) { [[a]] . visitInsn ( CASTORE ) ; return ; } [[a]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 787 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[begin]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Extract the encoding from the given content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[encoding]] ( final String [[input]] , String [[store]] ) { String [[state]] = [[encoding]] ( [[input]] ) ; if ( [[state]] == null ) { if ( [[store]] == null ) { [[store]] = JoddCore . encoding ; } [[state]] = [[store]] ; } return [[state]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Resolve the bearer token from the Authorization header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[list]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 676 / 10 / 790:  79%|███████▉  | 790/1000 [34:39<09:12,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 676 / 10 / 790:  79%|███████▉  | 791/1000 [34:41<09:09,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 677 / 10 / 791:  79%|███████▉  | 791/1000 [34:41<09:09,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 678 / 10 / 792:  79%|███████▉  | 792/1000 [34:49<09:08,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 678 / 10 / 792:  79%|███████▉  | 793/1000 [34:53<09:06,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 679 / 10 / 793:  79%|███████▉  | 793/1000 [34:53<09:06,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 679 / 10 / 793:  79%|███████▉  | 794/1000 [34:55<09:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 680 / 10 / 794:  79%|███████▉  | 794/1000 [34:55<09:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 680 / 10 / 794:  80%|███████▉  | 795/1000 [34:57<09:00,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 681 / 10 / 795:  80%|███████▉  | 795/1000 [34:57<09:00,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 681 / 10 / 795:  80%|███████▉  | 796/1000 [35:04<08:59,  2.64s/it]Checks if the flags are empty . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "[[False]]" != "[[False]]" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[call]] ( Flags [[hot]] ) { if ( [[hot]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[hot]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "[[foo]]" != "[[foo]]" ; } String [ ] userFlags = [[hot]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[[foo]]" != "[[foo]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 791 ---------------------------------------------
Prepare a download request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[assume]] ( final HttpServletResponse response , final File [[download]] , final String mimeType ) { if ( ! [[download]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[download]] ) ; } if ( [[download]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[download]] ) ; } prepareResponse ( response , [[download]] . getAbsolutePath ( ) , mimeType , ( int ) [[download]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request body from a reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[quote]] ( final HttpServletRequest [[file]] ) throws IOException { BufferedReader buff = [[file]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Returns a list of all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[source]] ( final HttpServletRequest request , final String [[response]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[response]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
Read the request body from the request stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[end]] ( final HttpServletRequest [[age]] ) throws IOException { String charEncoding = [[age]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[age]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 795 ---------------------------------------------
Prepare the response to be sent to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse [[response]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { [[response]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[assume]] ( final HttpServletResponse [[command]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[hello]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[hello]] ) ; } if ( mimeType != null ) { [[command]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[command]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 796 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 682 / 10 / 796:  80%|███████▉  | 796/1000 [35:04<08:59,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 682 / 10 / 796:  80%|███████▉  | 797/1000 [35:06<08:56,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 683 / 10 / 797:  80%|███████▉  | 797/1000 [35:06<08:56,  2.64s/it][Succeeded / Failed / Skipped / Total] 104 / 683 / 10 / 797:  80%|███████▉  | 798/1000 [35:11<08:54,  2.65s/it][Succeeded / Failed / Skipped / Total] 104 / 684 / 10 / 798:  80%|███████▉  | 798/1000 [35:11<08:54,  2.65s/it][Succeeded / Failed / Skipped / Total] 104 / 684 / 10 / 798:  80%|███████▉  | 799/1000 [35:20<08:53,  2.65s/it][Succeeded / Failed / Skipped / Total] 104 / 685 / 10 / 799:  80%|███████▉  | 799/1000 [35:20<08:53,  2.65s/it][Succeeded / Failed / Skipped / Total] 104 / 685 / 10 / 799:  80%|████████  | 800/1000 [35:20<08:50,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 685 / 10 / 800:  80%|████████  | 800/1000 [35:20<08:50,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 685 / 10 / 800:  80%|████████  | 801/1000 [35:20<08:46,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 686 / 10 / 801:  80%|████████  | 801/1000 [35:20<08:46,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 686 / 10 / 801:  80%|████████  | 802/1000 [35:26<08:44,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 687 / 10 / 802:  80%|████████  | 802/1000 [35:26<08:44,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 687 / 10 / 802:  80%|████████  | 803/1000 [35:29<08:42,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 688 / 10 / 803:  80%|████████  | 803/1000 [35:29<08:42,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 688 / 10 / 803:  80%|████████  | 804/1000 [35:29<08:39,  2.65s/it]Store the context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[copy]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Store the context path in the request and servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[express]] ( final PageContext [[most]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[most]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[most]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[most]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Invoke a tag body . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[when]] ( final JspFragment [[code]] ) throws JspException { if ( [[code]] == null ) { return ; } try { [[code]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
Returns true if the given name is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[test]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Prepare the given array of parameters to be used in a request . --> If treatEmptyParamsAsNull is true then treatEmptyParamsAsNull is false then treatEmptyParamsAsNull is true --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[becomes]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[empty]] ) { if ( treatEmptyParamsAsNull || [[empty]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[empty]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[var]] ( final JspFragment [[format]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[format]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 802 ---------------------------------------------
Call all destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[build]] ( ) { for ( final DestroyMethodPoint [[concept]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[concept]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[concept]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Renders the given JspFragment to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[list]] ( final JspFragment body ) throws JspException { char [ ] [[end]] = renderBody ( body ) ; return new String ( [[end]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 804 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 689 / 10 / 804:  80%|████████  | 804/1000 [35:29<08:39,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 689 / 10 / 804:  80%|████████  | 805/1000 [35:36<08:37,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 690 / 10 / 805:  80%|████████  | 805/1000 [35:36<08:37,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 690 / 10 / 805:  81%|████████  | 806/1000 [35:38<08:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 691 / 10 / 806:  81%|████████  | 806/1000 [35:38<08:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 691 / 10 / 806:  81%|████████  | 807/1000 [35:38<08:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 692 / 10 / 807:  81%|████████  | 807/1000 [35:38<08:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 692 / 10 / 807:  81%|████████  | 808/1000 [35:41<08:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 692 / 10 / 808:  81%|████████  | 808/1000 [35:41<08:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 692 / 10 / 808:  81%|████████  | 809/1000 [35:42<08:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 693 / 10 / 809:  81%|████████  | 809/1000 [35:42<08:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 693 / 10 / 809:  81%|████████  | 810/1000 [35:47<08:23,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 694 / 10 / 810:  81%|████████  | 810/1000 [35:47<08:23,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 694 / 10 / 810:  81%|████████  | 811/1000 [35:50<08:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 695 / 10 / 811:  81%|████████  | 811/1000 [35:50<08:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 106 / 695 / 10 / 811:  81%|████████  | 812/1000 [35:54<08:18,  2.65s/it]Invoke all init methods for the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[are]] ( final InitMethodInvocationStrategy [[foo]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[foo]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[foo]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 806 ---------------------------------------------
Copy parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = servletRequest . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[unless]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[e]] = servletRequest . getParameterNames ( ) ; while ( [[e]] . hasMoreElements ( ) ) { String paramName = ( String ) [[e]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[a]] = servletRequest . getParameterValues ( paramName ) ; [[a]] = prepareParameters ( [[a]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[a]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[a]] . length == 1 ? [[a]] [ 0 ] : [[a]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 807 ---------------------------------------------
Injects the parameters of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[after]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Adds a new props entry to the map . --> Create a PropsEntry . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[a]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 809 ---------------------------------------------
Rewrite an action path . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[forward]] ( final HttpServletRequest servletRequest , final String [[anonymous]] , final String httpMethod ) { return [[anonymous]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 810 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[draw]] ( final String name , final String value ) { List < String > [[style]] = super . getAll ( name ) ; if ( [[style]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[style]] . add ( value ) ; super . addAll ( name , [[style]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Adds a base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String value , final boolean append ) { put ( null , baseProperties , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[save]] ( final String [[field]] , final String value , final boolean append ) { put ( null , baseProperties , [[field]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 695 / 10 / 812:  81%|████████  | 812/1000 [35:54<08:18,  2.65s/it][Succeeded / Failed / Skipped / Total] 107 / 696 / 10 / 813:  81%|████████▏ | 813/1000 [35:54<08:15,  2.65s/it][Succeeded / Failed / Skipped / Total] 107 / 696 / 10 / 813:  81%|████████▏ | 814/1000 [35:58<08:13,  2.65s/it][Succeeded / Failed / Skipped / Total] 107 / 697 / 10 / 814:  81%|████████▏ | 814/1000 [35:58<08:13,  2.65s/it][Succeeded / Failed / Skipped / Total] 107 / 698 / 10 / 815:  82%|████████▏ | 815/1000 [36:06<08:11,  2.66s/it][Succeeded / Failed / Skipped / Total] 107 / 698 / 10 / 815:  82%|████████▏ | 816/1000 [36:16<08:10,  2.67s/it][Succeeded / Failed / Skipped / Total] 107 / 699 / 10 / 816:  82%|████████▏ | 816/1000 [36:16<08:10,  2.67s/it][Succeeded / Failed / Skipped / Total] 107 / 699 / 10 / 816:  82%|████████▏ | 817/1000 [36:19<08:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 107 / 700 / 10 / 817:  82%|████████▏ | 817/1000 [36:19<08:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 107 / 700 / 10 / 817:  82%|████████▏ | 818/1000 [36:34<08:08,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 701 / 10 / 818:  82%|████████▏ | 818/1000 [36:34<08:08,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 701 / 10 / 818:  82%|████████▏ | 819/1000 [36:36<08:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 702 / 10 / 819:  82%|████████▏ | 819/1000 [36:36<08:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 702 / 10 / 819:  82%|████████▏ | 820/1000 [36:37<08:02,  2.68s/it]Resolve macros . --> Add a profile to the list of profiles --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[f]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Get a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[format]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a property to a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[join]] ( final String key , final String value , final String [[array]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[array]] , k -> new HashMap <> ( ) ) ; put ( [[array]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Extract profiles from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[tags]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[tags]] == null ) { [[tags]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
Reads a 4 byte word from the byte array starting at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int [[i]] ; int word = 0 ; int off = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[sum]] ( byte [ ] data , int [ ] offp ) { int [[rest]] ; int word = 0 ; int off = offp [ 0 ] ; for ( [[rest]] = 0 ; [[rest]] < 4 ; [[rest]] ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 817 ---------------------------------------------
Copy all bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[integer]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Parse an action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > [[actionClass]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > [[action]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 819 ---------------------------------------------
Hash a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String [[salt]] ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[find]] ( String [[reference]] , String [[extension]] ) { BCrypt [[add]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[extension]] . charAt ( 0 ) != ' ' || [[extension]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[extension]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[extension]] . charAt ( 2 ) ; if ( minor != ' ' || [[extension]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 820 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 703 / 10 / 820:  82%|████████▏ | 820/1000 [36:37<08:02,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 703 / 10 / 820:  82%|████████▏ | 821/1000 [36:42<08:00,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 704 / 10 / 821:  82%|████████▏ | 821/1000 [36:42<08:00,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 704 / 10 / 821:  82%|████████▏ | 822/1000 [36:49<07:58,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 705 / 10 / 822:  82%|████████▏ | 822/1000 [36:49<07:58,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 705 / 10 / 822:  82%|████████▏ | 823/1000 [36:50<07:55,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 706 / 10 / 823:  82%|████████▏ | 823/1000 [36:50<07:55,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 706 / 10 / 823:  82%|████████▏ | 824/1000 [36:54<07:52,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 707 / 10 / 824:  82%|████████▏ | 824/1000 [36:54<07:52,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 707 / 10 / 824:  82%|████████▎ | 825/1000 [37:00<07:50,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 708 / 10 / 825:  82%|████████▎ | 825/1000 [37:00<07:50,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 708 / 10 / 825:  83%|████████▎ | 826/1000 [37:00<07:47,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 709 / 10 / 826:  83%|████████▎ | 826/1000 [37:00<07:47,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 709 / 10 / 826:  83%|████████▎ | 827/1000 [37:01<07:44,  2.69s/it]Copies the next max bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[integer]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[a]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[a]] ++ ; if ( [[a]] == maxBytes ) { return [[a]] ; } } return [[a]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 821 ---------------------------------------------
Resolve the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[age]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 822 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy [[interceptedBy]] = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { [[result]] = [[interceptedBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[value]] ( final AnnotatedElement [[type]] ) { Class < ? extends ActionInterceptor > [ ] [[function]] = null ; InterceptedBy [[field]] = [[type]] . getAnnotation ( InterceptedBy . class ) ; if ( [[field]] != null ) { [[function]] = [[field]] . value ( ) ; if ( [[function]] . length == 0 ) { [[function]] = null ; } } return [[function]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 823 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[exit]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 824 ---------------------------------------------
Read the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[result]] = filteredBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[string]] ( final AnnotatedElement [[a]] ) { Class < ? extends ActionFilter > [ ] [[field]] = null ; FilteredBy filteredBy = [[a]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[field]] = filteredBy . value ( ) ; if ( [[field]] . length == 0 ) { [[field]] = null ; } } return [[field]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 825 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[end]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 826 ---------------------------------------------
Returns true if the password of the plaintext matches the hashed password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[pair]] ( String [[start]] , String [[binary]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[data]] = hashpw ( [[start]] , [[binary]] ) ; hashed_bytes = [[binary]] . getBytes ( "UTF-8" ) ; try_bytes = [[data]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 827 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 709 / 11 / 827:  83%|████████▎ | 827/1000 [37:01<07:44,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 709 / 11 / 827:  83%|████████▎ | 828/1000 [37:02<07:41,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 710 / 11 / 828:  83%|████████▎ | 828/1000 [37:02<07:41,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 710 / 11 / 828:  83%|████████▎ | 829/1000 [37:06<07:39,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 711 / 11 / 829:  83%|████████▎ | 829/1000 [37:06<07:39,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 712 / 11 / 830:  83%|████████▎ | 830/1000 [37:06<07:35,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 712 / 11 / 830:  83%|████████▎ | 831/1000 [37:14<07:34,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 713 / 11 / 831:  83%|████████▎ | 831/1000 [37:14<07:34,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 714 / 11 / 832:  83%|████████▎ | 832/1000 [37:15<07:31,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 714 / 11 / 832:  83%|████████▎ | 833/1000 [37:16<07:28,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 715 / 11 / 833:  83%|████████▎ | 833/1000 [37:16<07:28,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 716 / 11 / 834:  83%|████████▎ | 834/1000 [37:22<07:26,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 716 / 11 / 834:  84%|████████▎ | 835/1000 [37:23<07:23,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 717 / 11 / 835:  84%|████████▎ | 835/1000 [37:23<07:23,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 718 / 11 / 836:  84%|████████▎ | 836/1000 [37:25<07:20,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 718 / 11 / 836:  84%|████████▎ | 837/1000 [37:31<07:18,  2.69s/it]This method is called before the response is committed . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parse method alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[array]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Apply advice . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues [[annotationValues]] , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[then]] ( final String [[strings]] , final ActionAnnotationValues [[functions]] , final ActionConfig [[commands]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 831 ---------------------------------------------
Visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[after]] ( final String [[white]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[white]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Returns the real name for the given JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[echo]] ( final String [[alpha]] ) { if ( jsonNames == null ) { return [[alpha]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[alpha]] ) ; if ( jsonIndex == - 1 ) { return [[alpha]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Inject target into proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object [[target]] ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[capture]] ( final Object [[handler]] , final Object [[catcher]] ) { Class proxyClass = [[handler]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[handler]] , [[catcher]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[argument]] ( final String [[example]] ) { if ( realNames == null ) { return [[example]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[example]] ) ; if ( realIndex == - 1 ) { return [[example]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
Looks up the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[pace]] ( final Class [[a]] ) { TypeData typeData = typeDataMap . get ( [[a]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[a]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[a]] ) ; typeDataMap . put ( [[a]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 836 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[array]] ( final Class [[data]] ) { TypeData [[arrays]] = typeDataMap . get ( [[data]] ) ; if ( [[arrays]] == null ) { [[arrays]] = scanClassForAnnotations ( [[data]] ) ; typeDataMap . put ( [[data]] , [[arrays]] ) ; } return [[arrays]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 719 / 11 / 837:  84%|████████▎ | 837/1000 [37:31<07:18,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 720 / 11 / 838:  84%|████████▍ | 838/1000 [37:34<07:15,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 720 / 11 / 838:  84%|████████▍ | 839/1000 [37:35<07:12,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 721 / 11 / 839:  84%|████████▍ | 839/1000 [37:35<07:12,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 722 / 11 / 840:  84%|████████▍ | 840/1000 [37:36<07:09,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 722 / 11 / 840:  84%|████████▍ | 841/1000 [37:38<07:07,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 723 / 11 / 841:  84%|████████▍ | 841/1000 [37:38<07:07,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 724 / 11 / 842:  84%|████████▍ | 842/1000 [37:41<07:04,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 724 / 11 / 842:  84%|████████▍ | 843/1000 [37:42<07:01,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 725 / 11 / 843:  84%|████████▍ | 843/1000 [37:42<07:01,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 726 / 11 / 844:  84%|████████▍ | 844/1000 [37:44<06:58,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 726 / 11 / 844:  84%|████████▍ | 845/1000 [37:48<06:56,  2.68s/it][Succeeded / Failed / Skipped / Total] 107 / 727 / 11 / 845:  84%|████████▍ | 845/1000 [37:48<06:56,  2.68s/it]Find the subtype type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[bility]] ( final Class [[example]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[example]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 839 ---------------------------------------------
Returns the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[after]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Resolve a real name for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[print]] ( final Class [[declaration]] , final String [[data]] ) { TypeData typeData = lookupTypeData ( [[declaration]] ) ; return typeData . resolveRealName ( [[data]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 841 ---------------------------------------------
Creates an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[partition]] ( final ActionHandler actionHandler , final Class [[forks]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[forks]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[forks]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 842 ---------------------------------------------
Copy bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[example]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the constant pool into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[main]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[main]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[system]] ( final int [[constant]] , final String className ) { this . majorVersion = [[constant]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 728 / 11 / 846:  85%|████████▍ | 846/1000 [37:52<06:53,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 728 / 11 / 846:  85%|████████▍ | 847/1000 [38:01<06:52,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 729 / 11 / 847:  85%|████████▍ | 847/1000 [38:01<06:52,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 729 / 11 / 847:  85%|████████▍ | 848/1000 [38:04<06:49,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 730 / 11 / 848:  85%|████████▍ | 848/1000 [38:04<06:49,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 730 / 11 / 848:  85%|████████▍ | 849/1000 [38:05<06:46,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 731 / 11 / 849:  85%|████████▍ | 849/1000 [38:05<06:46,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 731 / 11 / 849:  85%|████████▌ | 850/1000 [38:07<06:43,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 732 / 11 / 850:  85%|████████▌ | 850/1000 [38:07<06:43,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 732 / 11 / 850:  85%|████████▌ | 851/1000 [38:12<06:41,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 733 / 11 / 851:  85%|████████▌ | 851/1000 [38:12<06:41,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 733 / 11 / 851:  85%|████████▌ | 852/1000 [38:15<06:38,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 734 / 11 / 852:  85%|████████▌ | 852/1000 [38:15<06:38,  2.69s/it][Succeeded / Failed / Skipped / Total] 107 / 734 / 11 / 852:  85%|████████▌ | 853/1000 [38:21<06:36,  2.70s/it]Adds a field reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[box]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a method reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[field]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[tag]] , final String owner , final String [[name]] , final String descriptor ) { int hashCode = hash ( [[tag]] , owner , [[name]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( owner ) . index , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , owner , [[name]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[request]] , final String owner , final String [[address]] , final String descriptor ) { int hashCode = hash ( [[request]] , owner , [[address]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[request]] && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( [[address]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[request]] , addConstantClass ( owner ) . index , addConstantNameAndType ( [[address]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[request]] , owner , [[address]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[draw]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[format]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant integer or float to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assignment]] ( final int [[a]] , final int tag , final int value ) { add ( new Entry ( [[a]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int tag , final long value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assignment]] ( final int [[a]] , final int tag , final long value ) { add ( new Entry ( [[a]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 735 / 11 / 853:  85%|████████▌ | 853/1000 [38:21<06:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 735 / 11 / 853:  85%|████████▌ | 854/1000 [38:26<06:34,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 736 / 11 / 854:  85%|████████▌ | 854/1000 [38:26<06:34,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 736 / 11 / 854:  86%|████████▌ | 855/1000 [38:26<06:31,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 737 / 11 / 855:  86%|████████▌ | 855/1000 [38:26<06:31,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 737 / 11 / 855:  86%|████████▌ | 856/1000 [38:28<06:28,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 738 / 11 / 856:  86%|████████▌ | 856/1000 [38:28<06:28,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 738 / 11 / 856:  86%|████████▌ | 857/1000 [38:30<06:25,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 739 / 11 / 857:  86%|████████▌ | 857/1000 [38:30<06:25,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 739 / 11 / 857:  86%|████████▌ | 858/1000 [38:44<06:24,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 740 / 11 / 858:  86%|████████▌ | 858/1000 [38:44<06:24,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 740 / 11 / 858:  86%|████████▌ | 859/1000 [38:46<06:21,  2.71s/it]Add a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[array]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[declare]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[declare]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a UTF - 8 constant to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int [[bar]] , final String value ) { add ( new Entry ( [[bar]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[array]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 741 / 11 / 859:  86%|████████▌ | 859/1000 [38:46<06:21,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 741 / 11 / 859:  86%|████████▌ | 860/1000 [38:46<06:18,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 742 / 11 / 860:  86%|████████▌ | 860/1000 [38:46<06:18,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 742 / 11 / 860:  86%|████████▌ | 861/1000 [38:48<06:15,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 743 / 11 / 861:  86%|████████▌ | 861/1000 [38:48<06:15,  2.70s/it][Succeeded / Failed / Skipped / Total] 107 / 743 / 11 / 861:  86%|████████▌ | 862/1000 [38:59<06:14,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 744 / 11 / 862:  86%|████████▌ | 862/1000 [38:59<06:14,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 744 / 11 / 862:  86%|████████▋ | 863/1000 [39:01<06:11,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 745 / 11 / 863:  86%|████████▋ | 863/1000 [39:01<06:11,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 745 / 11 / 863:  86%|████████▋ | 864/1000 [39:04<06:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 746 / 11 / 864:  86%|████████▋ | 864/1000 [39:04<06:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 746 / 11 / 864:  86%|████████▋ | 865/1000 [39:09<06:06,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 747 / 11 / 865:  86%|████████▋ | 865/1000 [39:09<06:06,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 747 / 11 / 865:  87%|████████▋ | 866/1000 [39:09<06:03,  2.71s/it]Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[box]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant invoke dynamic . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[library]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[vector]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a constant UTF - 8 reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assignment]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[fix]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a type to the merged type table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[conclusion]] ( final int [[result]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 866 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 748 / 11 / 866:  87%|████████▋ | 866/1000 [39:09<06:03,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 748 / 11 / 866:  87%|████████▋ | 867/1000 [39:11<06:00,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 749 / 11 / 867:  87%|████████▋ | 867/1000 [39:11<06:00,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 749 / 11 / 867:  87%|████████▋ | 868/1000 [39:16<05:58,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 750 / 11 / 868:  87%|████████▋ | 868/1000 [39:16<05:58,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 750 / 11 / 868:  87%|████████▋ | 869/1000 [39:19<05:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 751 / 11 / 869:  87%|████████▋ | 869/1000 [39:19<05:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 107 / 751 / 11 / 869:  87%|████████▋ | 870/1000 [39:23<05:53,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 752 / 11 / 870:  87%|████████▋ | 870/1000 [39:23<05:53,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 752 / 11 / 870:  87%|████████▋ | 871/1000 [39:24<05:50,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 753 / 11 / 871:  87%|████████▋ | 871/1000 [39:24<05:50,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 753 / 11 / 871:  87%|████████▋ | 872/1000 [39:35<05:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 754 / 11 / 872:  87%|████████▋ | 872/1000 [39:35<05:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 754 / 11 / 872:  87%|████████▋ | 873/1000 [39:36<05:45,  2.72s/it]Add a constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[column]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[set]] ( final Handle [[able]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 868 ---------------------------------------------
Removes all entries from this MultiMap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[after]] ( ) { for ( int [[end]] = 0 ; [[end]] < entries . length ; [[end]] ++ ) { entries [ [[end]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash code of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int h = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[header]] ( final String [[end]] ) { int h = 0 ; for ( int i = [[end]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[end]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[change]] ( ) { final MapEntry [ ] [[f]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[f]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[f]] [ 0 ] ; [[f]] [ 0 ] = [[f]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns a list of all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[fix]] ( ) { List < Map . Entry < String , V > > [[index]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[index]] . add ( e ) ; e = e . after ; } return [[index]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
implements the visitor to visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 755 / 11 / 873:  87%|████████▋ | 873/1000 [39:36<05:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 755 / 11 / 873:  87%|████████▋ | 874/1000 [39:39<05:43,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 756 / 11 / 874:  87%|████████▋ | 874/1000 [39:39<05:43,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 756 / 11 / 874:  88%|████████▊ | 875/1000 [39:41<05:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 757 / 11 / 875:  88%|████████▊ | 875/1000 [39:41<05:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 757 / 11 / 875:  88%|████████▊ | 876/1000 [39:41<05:37,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 758 / 11 / 876:  88%|████████▊ | 876/1000 [39:41<05:37,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 758 / 11 / 876:  88%|████████▊ | 877/1000 [39:46<05:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 759 / 11 / 877:  88%|████████▊ | 877/1000 [39:46<05:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 759 / 11 / 877:  88%|████████▊ | 878/1000 [39:46<05:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 760 / 11 / 878:  88%|████████▊ | 878/1000 [39:46<05:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 760 / 11 / 878:  88%|████████▊ | 879/1000 [39:47<05:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 761 / 11 / 879:  88%|████████▊ | 879/1000 [39:47<05:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 107 / 761 / 11 / 879:  88%|████████▊ | 880/1000 [39:50<05:25,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 761 / 11 / 880:  88%|████████▊ | 880/1000 [39:50<05:25,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 761 / 11 / 880:  88%|████████▊ | 881/1000 [39:56<05:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 762 / 11 / 881:  88%|████████▊ | 881/1000 [39:56<05:23,  2.72s/it]Returns a list of all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[elements]] ( final String [[end]] ) { LinkedList < V > [[a]] = new LinkedList <> ( ) ; int h = hash ( [[end]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[end]] , e . key ) ) { [[a]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[a]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 874 ---------------------------------------------
Append a sequence of characters to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[of]] ( final CharSequence [[index]] , final int [[set]] , final int [[block]] ) { for ( int i = [[set]] ; i < [[block]] ; i ++ ) { [[of]] ( [[index]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 875 ---------------------------------------------
Create the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[key]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 876 ---------------------------------------------
implements the visitor to create the proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[exit]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 877 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[bus]] ( final String [[b]] ) { return [[b]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[b]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 878 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[end]] ( final CharSequence [[l]] ) { _push ( [[l]] ) ; if ( altPath != null ) { altPath . push ( [[l]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 879 ---------------------------------------------
Create the method for the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[host]] ( final TargetMethodData [[code]] ) { methodVisitor . visitCode ( ) ; if ( [[code]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[code]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[code]] . firstMethodName ( ) , [[code]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[code]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[code]] . firstMethodName ( ) , [[code]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[code]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 880 ---------------------------------------------
Grows the buffer by a given capacity . --> If b1 is less than b then b1 = b2 else b1 = b2 --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int [[newCapacity]] = [[oldCapacity]] << 1 ; if ( [[newCapacity]] - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[then]] ( final int [[b1]] ) { final int [[b]] = buffer . length ; int [[n]] = [[b]] << 1 ; if ( [[n]] - [[b1]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 881 ---------------------------------------------
Configure servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[assignment]] ( final ServletContext [[ability]] ) { [[ability]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[ability]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[c]]" == "[[c]]" , contextPath ) ; } final FilterRegistration filter = [[ability]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[c]]" == "[[c]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
[Succeeded / Failed / Skipped / Total] 108 / 763 / 11 / 882:  88%|████████▊ | 882/1000 [39:56<05:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 763 / 11 / 882:  88%|████████▊ | 883/1000 [40:02<05:18,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 764 / 11 / 883:  88%|████████▊ | 883/1000 [40:02<05:18,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 765 / 11 / 884:  88%|████████▊ | 884/1000 [40:05<05:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 765 / 11 / 884:  88%|████████▊ | 885/1000 [40:10<05:13,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 766 / 11 / 885:  88%|████████▊ | 885/1000 [40:10<05:13,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 767 / 11 / 886:  89%|████████▊ | 886/1000 [40:10<05:10,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 767 / 11 / 886:  89%|████████▊ | 887/1000 [40:11<05:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 768 / 11 / 887:  89%|████████▊ | 887/1000 [40:11<05:07,  2.72s/it]--------------------------------------------- Result 882 ---------------------------------------------
Execute the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[function]] = [[function]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[function]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[expressions]] ( ) { if ( [[list]] == null ) { FieldDescriptor [ ] [[list]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[list]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[list]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[list]] ; } return [[list]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
Converts a JtxTransactionMode to a DbTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[execute]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 885 ---------------------------------------------
Read a property from the source object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[end]] ( final Object [[a]] , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[a]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Creates a new bean definition for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 887 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[ing]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 769 / 11 / 888:  89%|████████▉ | 888/1000 [40:13<05:04,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 769 / 11 / 888:  89%|████████▉ | 889/1000 [40:19<05:02,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 770 / 11 / 889:  89%|████████▉ | 889/1000 [40:19<05:02,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 771 / 11 / 890:  89%|████████▉ | 890/1000 [40:21<04:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 771 / 11 / 890:  89%|████████▉ | 891/1000 [40:27<04:57,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 772 / 11 / 891:  89%|████████▉ | 891/1000 [40:27<04:57,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 773 / 11 / 892:  89%|████████▉ | 892/1000 [40:31<04:54,  2.73s/it][Succeeded / Failed / Skipped / Total] 108 / 773 / 11 / 892:  89%|████████▉ | 893/1000 [40:31<04:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 774 / 11 / 893:  89%|████████▉ | 893/1000 [40:31<04:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 775 / 11 / 894:  89%|████████▉ | 894/1000 [40:32<04:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 775 / 11 / 894:  90%|████████▉ | 895/1000 [40:37<04:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 776 / 11 / 895:  90%|████████▉ | 895/1000 [40:37<04:45,  2.72s/it]Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[main]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 889 ---------------------------------------------
Writes the response to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[example]] ( final OutputStream [[e]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the string value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[fix]] ( final String [[map]] ) { CharSequence cs = ( CharSequence ) map . get ( [[map]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Returns the Integer value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String [[integer]] ) { Number number = ( Number ) map . get ( [[integer]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Writes the list to an output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[take]] ( final OutputStream out ) throws IOException { for ( Object [[relational]] : list ) { if ( [[relational]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[relational]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[relational]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[relational]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 893 ---------------------------------------------
Writes the contents of the list to the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[change]] ( final Writer [[string]] ) throws IOException { for ( Object [[category]] : list ) { if ( [[category]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[category]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[string]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[category]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[category]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[string]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the value associated with the given key as a Long . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[end]] ) { Number [[end]] = ( Number ) map . get ( [[end]] ) ; if ( [[end]] == null ) { return null ; } if ( [[end]] instanceof Long ) { return ( Long ) [[end]] ; } return [[end]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[get]] > [[get]] getValue ( final String key ) { [[get]] val = ( [[get]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[get]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[get]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 777 / 11 / 896:  90%|████████▉ | 896/1000 [40:38<04:42,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 777 / 11 / 896:  90%|████████▉ | 897/1000 [40:39<04:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 778 / 11 / 897:  90%|████████▉ | 897/1000 [40:39<04:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 779 / 11 / 898:  90%|████████▉ | 898/1000 [40:40<04:37,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 779 / 11 / 898:  90%|████████▉ | 899/1000 [40:47<04:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 780 / 11 / 899:  90%|████████▉ | 899/1000 [40:47<04:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 781 / 11 / 900:  90%|█████████ | 900/1000 [40:47<04:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 781 / 11 / 900:  90%|█████████ | 901/1000 [40:49<04:29,  2.72s/it][Succeeded / Failed / Skipped / Total] 108 / 782 / 11 / 901:  90%|█████████ | 901/1000 [40:49<04:29,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 782 / 11 / 902:  90%|█████████ | 902/1000 [40:49<04:26,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 782 / 11 / 902:  90%|█████████ | 903/1000 [40:54<04:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 783 / 11 / 903:  90%|█████████ | 903/1000 [40:54<04:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 784 / 11 / 904:  90%|█████████ | 904/1000 [40:58<04:21,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 784 / 11 / 904:  90%|█████████ | 905/1000 [40:59<04:18,  2.72s/it][Succeeded / Failed / Skipped / Total] 109 / 785 / 11 / 905:  90%|█████████ | 905/1000 [40:59<04:18,  2.72s/it]Returns the value associated with the given key as a Double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String [[end]] ) { Number [[element]] = ( Number ) map . get ( [[end]] ) ; if ( [[element]] == null ) { return null ; } if ( [[element]] instanceof Double ) { return ( Double ) [[element]] ; } return [[element]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Returns the float value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[pointer]] ( final String [[end]] ) { Number number = ( Number ) map . get ( [[end]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Adds a key - value pair to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[box]] ( final String [[length]] , final String [[bit]] ) { Objects . requireNonNull ( [[length]] ) ; map . put ( [[length]] , [[bit]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Close the folder if it is open . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[call]] ( final Folder [[alert]] ) { if ( [[alert]] != null ) { try { [[alert]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 900 ---------------------------------------------
Use a folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[start]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . [[box]] = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 901 ---------------------------------------------
Updates the flags for a received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[net]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Lookup a named parameter . --> Get the statement with the given name --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[statement]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 903 ---------------------------------------------
Returns the alias for the given target . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[x]] ( final String [[null]] ) { return StringPool . LEFT_CHEV . concat ( [[null]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Adds a violation to the validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[check]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 905 ---------------------------------------------
Validates the action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[profile]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 785 / 11 / 906:  91%|█████████ | 906/1000 [41:03<04:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 785 / 11 / 906:  91%|█████████ | 907/1000 [41:04<04:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 786 / 11 / 907:  91%|█████████ | 907/1000 [41:04<04:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 787 / 11 / 908:  91%|█████████ | 908/1000 [41:05<04:09,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 787 / 11 / 908:  91%|█████████ | 909/1000 [41:08<04:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 788 / 11 / 909:  91%|█████████ | 909/1000 [41:08<04:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 110 / 789 / 11 / 910:  91%|█████████ | 910/1000 [41:09<04:04,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 789 / 11 / 910:  91%|█████████ | 911/1000 [41:10<04:01,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 790 / 11 / 911:  91%|█████████ | 911/1000 [41:10<04:01,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 791 / 11 / 912:  91%|█████████ | 912/1000 [41:11<03:58,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 791 / 11 / 912:  91%|█████████▏| 913/1000 [41:15<03:55,  2.71s/it]Sets the mime type . --> Sets the scope of the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[scope]] = mimeOrExtension ; } else { this . [[scope]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 907 ---------------------------------------------
Receives all messages matching the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[filtered]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[a]] = new FetchProfile ( ) ; [[a]] . add ( FetchProfile . Item . ENVELOPE ) ; [[a]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[a]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[type]] ( final InputStream [[method]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[method]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T setTarget ( final String [[command]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[command]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[command]] ) ; } targetClassName = [[command]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[command]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 910 ---------------------------------------------
Check if the target class is present and if not throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[frame]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the file to be downloaded . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[library]] ) { this . downloadFileName = [[library]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[library]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[ls]] ( final Class [[call]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[call]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[call]] . getName ( ) ) ; } targetClass = [[call]] ; targetClassName = [[call]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[call]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 792 / 11 / 913:  91%|█████████▏| 913/1000 [41:15<03:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 793 / 11 / 914:  91%|█████████▏| 914/1000 [41:16<03:52,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 793 / 11 / 914:  92%|█████████▏| 915/1000 [41:16<03:50,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 794 / 11 / 915:  92%|█████████▏| 915/1000 [41:16<03:50,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 795 / 11 / 916:  92%|█████████▏| 916/1000 [41:24<03:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 795 / 11 / 916:  92%|█████████▏| 917/1000 [41:24<03:44,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 796 / 11 / 917:  92%|█████████▏| 917/1000 [41:24<03:44,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 797 / 11 / 918:  92%|█████████▏| 918/1000 [41:24<03:41,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 797 / 11 / 918:  92%|█████████▏| 919/1000 [41:25<03:39,  2.70s/it][Succeeded / Failed / Skipped / Total] 110 / 798 / 11 / 919:  92%|█████████▏| 919/1000 [41:25<03:39,  2.70s/it]Create the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[element]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Creates a new proxy class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[buffer]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
Create a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[element]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String to ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[ls]] ( final String [[after]] , final String to ) { return [[ls]] ( new EmailAddress ( [[after]] , [[ls]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 917 ---------------------------------------------
Dump a class in the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[capture]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[ls]] ( final String personalName , final String from ) { return [[ls]] ( new EmailAddress ( personalName , [[ls]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 919 ---------------------------------------------
Add a to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[ls]] ( final EmailAddress [[statement]] ) { this . [[end]] = ArraysUtil . append ( this . [[end]] , [[ls]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 920 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 799 / 11 / 920:  92%|█████████▏| 920/1000 [41:31<03:36,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 799 / 11 / 920:  92%|█████████▏| 921/1000 [41:33<03:33,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 800 / 11 / 921:  92%|█████████▏| 921/1000 [41:33<03:33,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 801 / 11 / 922:  92%|█████████▏| 922/1000 [41:34<03:31,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 801 / 11 / 922:  92%|█████████▏| 923/1000 [41:34<03:28,  2.70s/it][Succeeded / Failed / Skipped / Total] 110 / 802 / 11 / 923:  92%|█████████▏| 923/1000 [41:34<03:28,  2.70s/it][Succeeded / Failed / Skipped / Total] 110 / 803 / 11 / 924:  92%|█████████▏| 924/1000 [41:39<03:25,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 803 / 11 / 924:  92%|█████████▎| 925/1000 [41:44<03:23,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 804 / 11 / 925:  92%|█████████▎| 925/1000 [41:44<03:23,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 805 / 11 / 926:  93%|█████████▎| 926/1000 [41:47<03:20,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 805 / 11 / 926:  93%|█████████▎| 927/1000 [41:51<03:17,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 806 / 11 / 927:  93%|█████████▎| 927/1000 [41:51<03:17,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 807 / 11 / 928:  93%|█████████▎| 928/1000 [41:55<03:15,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 807 / 11 / 928:  93%|█████████▎| 929/1000 [41:58<03:12,  2.71s/it]Replaces all email addresses with the given email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[a]] = ArraysUtil . join ( this . [[a]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Set the cc address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[ln]] ( final EmailAddress ... [[files]] ) { this . [[end]] = ArraysUtil . join ( this . [[end]] , valueOrEmptyArray ( [[files]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Sends a plain text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[ma]] ( final String [[alphabet]] , final String [[end]] ) { return message ( new EmailMessage ( [[alphabet]] , MimeTypes . MIME_TEXT_PLAIN , [[end]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Sends an HTML message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[message]] ( final String [[alphabet]] , final String [[list]] ) { return message ( new EmailMessage ( [[alphabet]] , MimeTypes . MIME_TEXT_HTML , [[list]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[mata]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Get a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[system]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Get the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[foo]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the long value for the given name or the default value if the name is not found . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[end]] , final int defaultValue ) { String value = get ( [[end]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Get a boolean property . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[option]] ( final String [[zero]] , final boolean defaultValue ) { String [[zero]] = get ( [[zero]] ) ; if ( [[zero]] == null ) { return defaultValue ; } [[zero]] = [[zero]] . trim ( ) . toLowerCase ( ) ; switch ( [[zero]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 808 / 11 / 929:  93%|█████████▎| 929/1000 [41:58<03:12,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 809 / 11 / 930:  93%|█████████▎| 930/1000 [42:02<03:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 809 / 11 / 930:  93%|█████████▎| 931/1000 [42:04<03:07,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 810 / 11 / 931:  93%|█████████▎| 931/1000 [42:04<03:07,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 811 / 11 / 932:  93%|█████████▎| 932/1000 [42:09<03:04,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 811 / 11 / 932:  93%|█████████▎| 933/1000 [42:12<03:01,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 812 / 11 / 933:  93%|█████████▎| 933/1000 [42:12<03:01,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 813 / 11 / 934:  93%|█████████▎| 934/1000 [42:15<02:59,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 813 / 11 / 934:  94%|█████████▎| 935/1000 [42:18<02:56,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 814 / 11 / 935:  94%|█████████▎| 935/1000 [42:18<02:56,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 815 / 11 / 936:  94%|█████████▎| 936/1000 [42:19<02:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 110 / 815 / 11 / 936:  94%|█████████▎| 937/1000 [42:19<02:50,  2.71s/it][Succeeded / Failed / Skipped / Total] 111 / 815 / 11 / 937:  94%|█████████▎| 937/1000 [42:19<02:50,  2.71s/it]Returns the value of the given name as a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[result]] ( final String [[end]] , final long defaultValue ) { String [[begin]] = get ( [[end]] ) ; if ( [[begin]] == null ) { return defaultValue ; } [[begin]] = [[begin]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[begin]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 930 ---------------------------------------------
Lookup a path alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String [[max]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[max]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[max]] = cfg . getActionPath ( ) ; } } return [[max]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
Serialize a single key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[array]] ( final JsonContext jsonContext , final Path [[end]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[end]] . push ( key . toString ( ) ) ; } else { [[end]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder [[data]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a result path . --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[procedure]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Resolve a result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[array]] ( final String path , final String [[string]] ) { final ResultPath resultPath = resolveResultPath ( path , [[string]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last slash dot in the string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[write]] ( final String [[length]] ) { int slashNdx = [[length]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[length]] , ' ' , [[length]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[length]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[line]] ( final String [[j]] ) { int [[i]] = [[j]] . lastIndexOf ( ' ' ) ; [[i]] ++ ; return StringUtil . lastIndexOf ( [[j]] , ' ' , [[j]] . length ( ) , [[i]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Removes the last camel word from the name . --> Returns the name of an array . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[array]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 938 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 816 / 11 / 938:  94%|█████████▍| 938/1000 [42:21<02:48,  2.71s/it][Succeeded / Failed / Skipped / Total] 111 / 816 / 11 / 938:  94%|█████████▍| 939/1000 [42:29<02:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 111 / 817 / 11 / 939:  94%|█████████▍| 939/1000 [42:29<02:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 111 / 818 / 11 / 940:  94%|█████████▍| 940/1000 [42:31<02:42,  2.71s/it][Succeeded / Failed / Skipped / Total] 111 / 818 / 11 / 940:  94%|█████████▍| 941/1000 [42:32<02:40,  2.71s/it][Succeeded / Failed / Skipped / Total] 111 / 819 / 11 / 941:  94%|█████████▍| 941/1000 [42:32<02:40,  2.71s/it][Succeeded / Failed / Skipped / Total] 112 / 819 / 11 / 942:  94%|█████████▍| 942/1000 [42:34<02:37,  2.71s/it][Succeeded / Failed / Skipped / Total] 112 / 819 / 11 / 942:  94%|█████████▍| 943/1000 [42:42<02:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 112 / 820 / 11 / 943:  94%|█████████▍| 943/1000 [42:42<02:34,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 820 / 11 / 944:  94%|█████████▍| 944/1000 [42:45<02:32,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 820 / 11 / 944:  94%|█████████▍| 945/1000 [42:51<02:29,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 821 / 11 / 945:  94%|█████████▍| 945/1000 [42:51<02:29,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 822 / 11 / 946:  95%|█████████▍| 946/1000 [42:54<02:26,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 822 / 11 / 946:  95%|█████████▍| 947/1000 [42:56<02:24,  2.72s/it]Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[c]] ( final String [[command]] ) { int [[var]] = [[command]] . lastIndexOf ( ' ' ) ; if ( [[var]] == - 1 ) { [[var]] = 0 ; } return [[command]] . indexOf ( ' ' , [[var]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the hash table with the given key and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[extension]] ( final long [ ] [[function]] , final long [ ] tweak ) { final int newNw = [[function]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[fix]] ( final Class < ? > [[construct]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[construct]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 941 ---------------------------------------------
Mix the x and y values . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[let]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Schedule a key schedule . --> s = s + nw --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[s]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 943 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[construct]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 944 ---------------------------------------------
Do a demix . --> y = y ^ y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^ --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[y]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block of data . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[read]] ( final byte [ ] content , final int offset ) { long [ ] [[media]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[media]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Removes any bound characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[ax]] ) { if ( [[ax]] == null || [[ax]] . length ( ) < 2 ) { return [[ax]] ; } if ( [[ax]] . startsWith ( String . valueOf ( s ) ) && [[ax]] . endsWith ( String . valueOf ( e ) ) ) { return [[ax]] . substring ( 1 , [[ax]] . length ( ) - 1 ) ; } return [[ax]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 823 / 11 / 947:  95%|█████████▍| 947/1000 [42:56<02:24,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 824 / 11 / 948:  95%|█████████▍| 948/1000 [42:57<02:21,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 824 / 11 / 948:  95%|█████████▍| 949/1000 [43:07<02:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 825 / 11 / 949:  95%|█████████▍| 949/1000 [43:07<02:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 825 / 11 / 949:  95%|█████████▌| 950/1000 [43:11<02:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 826 / 11 / 950:  95%|█████████▌| 950/1000 [43:11<02:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 826 / 11 / 950:  95%|█████████▌| 951/1000 [43:13<02:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 827 / 11 / 951:  95%|█████████▌| 951/1000 [43:13<02:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 827 / 11 / 951:  95%|█████████▌| 952/1000 [43:16<02:10,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 828 / 11 / 952:  95%|█████████▌| 952/1000 [43:16<02:10,  2.73s/it][Succeeded / Failed / Skipped / Total] 113 / 828 / 11 / 952:  95%|█████████▌| 953/1000 [43:22<02:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 828 / 11 / 953:  95%|█████████▌| 953/1000 [43:22<02:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 828 / 11 / 953:  95%|█████████▌| 954/1000 [43:34<02:06,  2.74s/it]Initializes the key with the given key message and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long [[tweak2]] ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , [[tweak2]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[java]] ( final String keyMessage , final long [[code]] , final long [[c]] ) { long [ ] [[bit]] = new long [ ] { [[code]] , [[c]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[bits]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[bits]] , 0 , key , 0 , key . length < [[bits]] . length ? key . length : [[bits]] . length ) ; [[java]] ( bytesToLongs ( key ) , [[bit]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 948 ---------------------------------------------
Returns the path of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[add]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[add]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 949 ---------------------------------------------
Convert a byte array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[sequence]] ( final byte [ ] [[length]] , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[length]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 950 ---------------------------------------------
Gzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[access]] ( final File [[structure]] ) throws IOException { if ( [[structure]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[ac]] = new FileInputStream ( [[structure]] ) ; String gzipName = [[structure]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[ac]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[ac]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 951 ---------------------------------------------
Zlib a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[list]] ( final File [[header]] ) throws IOException { if ( [[header]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[header]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[header]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Ungzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[outFileName]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[closure]] ( final File file ) throws IOException { String [[id]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[id]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Unzips the given zip file to the given destination directory . --> Create a list of arrays from a sequence and a list of patterns --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[arrays]] ( final String [[sequence]] , final String [[list]] , final String ... patterns ) throws IOException { [[arrays]] ( new File ( [[sequence]] ) , new File ( [[list]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 829 / 11 / 954:  95%|█████████▌| 954/1000 [43:34<02:06,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 829 / 11 / 954:  96%|█████████▌| 955/1000 [43:35<02:03,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 830 / 11 / 955:  96%|█████████▌| 955/1000 [43:35<02:03,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 830 / 11 / 955:  96%|█████████▌| 956/1000 [43:35<02:00,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 831 / 11 / 956:  96%|█████████▌| 956/1000 [43:35<02:00,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 831 / 11 / 956:  96%|█████████▌| 957/1000 [43:37<01:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 832 / 11 / 957:  96%|█████████▌| 957/1000 [43:37<01:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 832 / 11 / 957:  96%|█████████▌| 958/1000 [43:44<01:55,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 833 / 11 / 958:  96%|█████████▌| 958/1000 [43:44<01:55,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 834 / 11 / 959:  96%|█████████▌| 959/1000 [43:44<01:52,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 834 / 11 / 959:  96%|█████████▌| 960/1000 [43:47<01:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 835 / 11 / 960:  96%|█████████▌| 960/1000 [43:47<01:49,  2.74s/it]Adds a file to a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[procedure]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 955 ---------------------------------------------
Returns a list of all entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[arrays]] ( final File [[extension]] ) throws IOException { List < String > [[array]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[extension]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[array]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[array]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 956 ---------------------------------------------
Adds a file to a zip output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[isDir]] = [[file]] . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[assume]] ( final ZipOutputStream zos , final File [[configuration]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[configuration]] . exists ( ) ) { throw new FileNotFoundException ( [[configuration]] . toString ( ) ) ; } if ( path == null ) { path = [[configuration]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[destination]] = [[configuration]] . isDirectory ( ) ; if ( [[destination]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[before]] ( final String [[captured]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[captured]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Sets the bundle name for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[grab]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 959 ---------------------------------------------
Gets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[user]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 960 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[on]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 836 / 11 / 961:  96%|█████████▌| 961/1000 [43:48<01:46,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 836 / 11 / 961:  96%|█████████▌| 962/1000 [43:50<01:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 837 / 11 / 962:  96%|█████████▌| 962/1000 [43:50<01:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 838 / 11 / 963:  96%|█████████▋| 963/1000 [43:57<01:41,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 838 / 11 / 963:  96%|█████████▋| 964/1000 [43:58<01:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 839 / 11 / 964:  96%|█████████▋| 964/1000 [43:58<01:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 840 / 11 / 965:  96%|█████████▋| 965/1000 [44:01<01:35,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 840 / 11 / 965:  97%|█████████▋| 966/1000 [44:01<01:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 841 / 11 / 966:  97%|█████████▋| 966/1000 [44:01<01:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 114 / 842 / 11 / 967:  97%|█████████▋| 967/1000 [44:05<01:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 842 / 11 / 967:  97%|█████████▋| 968/1000 [44:14<01:27,  2.74s/it]Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[declare]] ( final String [[allowed]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[allowed]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 962 ---------------------------------------------
Adds a profile to the list of profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[after]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[after]] : profiles ) { addProfiles ( [[after]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a long from the given byte array starting at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[method]] ( final byte [ ] [[segment]] , final int [[address]] ) { return ( ( long ) [[segment]] [ [[address]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Read a label from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[array]] , final Label [ ] labels ) { if ( labels [ [[array]] ] == null ) { labels [ [[array]] ] = new Label ( ) ; } return labels [ [[array]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a byte array from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[end]] ( final InputStream [[hello]] , final boolean close ) throws IOException { if ( [[hello]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[hello]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[hello]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Filter the parameters for the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[call]] ( String [[method]] , final boolean resolveReferenceParams ) { [[method]] = [[method]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[method]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 967 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[check]] ( final int [ ] typeAnnotationOffsets , final int [[b]] ) { if ( typeAnnotationOffsets == null || [[b]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[b]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[b]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 843 / 11 / 968:  97%|█████████▋| 968/1000 [44:14<01:27,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 843 / 11 / 968:  97%|█████████▋| 969/1000 [44:14<01:24,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 844 / 11 / 969:  97%|█████████▋| 969/1000 [44:14<01:24,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 844 / 11 / 969:  97%|█████████▋| 970/1000 [44:19<01:22,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 845 / 11 / 970:  97%|█████████▋| 970/1000 [44:19<01:22,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 845 / 11 / 970:  97%|█████████▋| 971/1000 [44:22<01:19,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 846 / 11 / 971:  97%|█████████▋| 971/1000 [44:22<01:19,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 846 / 11 / 971:  97%|█████████▋| 972/1000 [44:24<01:16,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 847 / 11 / 972:  97%|█████████▋| 972/1000 [44:24<01:16,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 847 / 11 / 972:  97%|█████████▋| 973/1000 [44:28<01:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 848 / 11 / 973:  97%|█████████▋| 973/1000 [44:28<01:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 848 / 11 / 973:  97%|█████████▋| 974/1000 [44:30<01:11,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 849 / 11 / 974:  97%|█████████▋| 974/1000 [44:30<01:11,  2.74s/it][Succeeded / Failed / Skipped / Total] 114 / 849 / 11 / 974:  98%|█████████▊| 975/1000 [44:31<01:08,  2.74s/it]Read the values of an element . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[hat]] ( final AnnotationVisitor annotationVisitor , final int [[list]] , final boolean named , final char [ ] charBuffer ) { int [[fetch]] = [[list]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[echo]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[state]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
Inspect constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[execute]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 972 ---------------------------------------------
Reads the verification type information . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[switches]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[define]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[list]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[list]] ) ; return [[list]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 974 ---------------------------------------------
Initialize the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[example]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 850 / 11 / 975:  98%|█████████▊| 975/1000 [44:31<01:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 850 / 11 / 976:  98%|█████████▊| 976/1000 [44:32<01:05,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 850 / 11 / 976:  98%|█████████▊| 977/1000 [44:33<01:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 851 / 11 / 977:  98%|█████████▊| 977/1000 [44:33<01:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 852 / 11 / 978:  98%|█████████▊| 978/1000 [44:38<01:00,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 852 / 11 / 978:  98%|█████████▊| 979/1000 [44:40<00:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 853 / 11 / 979:  98%|█████████▊| 979/1000 [44:40<00:57,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 854 / 11 / 980:  98%|█████████▊| 980/1000 [44:41<00:54,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 854 / 11 / 980:  98%|█████████▊| 981/1000 [44:43<00:51,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 855 / 11 / 981:  98%|█████████▊| 981/1000 [44:43<00:51,  2.74s/it][Succeeded / Failed / Skipped / Total] 115 / 856 / 11 / 982:  98%|█████████▊| 982/1000 [44:44<00:49,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 856 / 11 / 982:  98%|█████████▊| 983/1000 [44:47<00:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 857 / 11 / 983:  98%|█████████▊| 983/1000 [44:47<00:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 858 / 11 / 984:  98%|█████████▊| 984/1000 [44:49<00:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 858 / 11 / 984:  98%|█████████▊| 985/1000 [44:51<00:40,  2.73s/it]Returns a CtorDescriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[to]] ( final Class ... args ) { ctors : for ( CtorDescriptor [[classes]] : allCtors ) { Class [ ] arg = [[classes]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return [[classes]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 976 ---------------------------------------------
Adds a file consumer to the list of consumers . --> Adds a sample to the list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[sample]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[sample]] ) ; } else { consumers . add ( [[sample]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 977 ---------------------------------------------
Convert an array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[series]] ( final Object [[objects]] ) { final Class valueComponentType = [[objects]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[objects]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Add a file to the search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[list]] ( final URI searchPath ) { File [[access]] ; try { [[access]] = new File ( [[list]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[list]] , ex ) ; } addPath ( [[access]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a pattern to the list of patterns to be included . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[element]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Exclude one or more patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[into]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Adds a path to the list of paths . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[open]] ( final File [[closure]] ) { if ( ! [[closure]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[closure]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[removal]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns a list of all files in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[move]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[empty]] ; while ( ( [[empty]] = nextFile ( ) ) != null ) { allFiles . add ( [[empty]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 859 / 11 / 985:  98%|█████████▊| 985/1000 [44:51<00:40,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 860 / 11 / 986:  99%|█████████▊| 986/1000 [44:53<00:38,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 860 / 11 / 986:  99%|█████████▊| 987/1000 [44:55<00:35,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 861 / 11 / 987:  99%|█████████▊| 987/1000 [44:55<00:35,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 862 / 11 / 988:  99%|█████████▉| 988/1000 [44:59<00:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 862 / 11 / 988:  99%|█████████▉| 989/1000 [44:59<00:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 863 / 11 / 989:  99%|█████████▉| 989/1000 [44:59<00:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 864 / 11 / 990:  99%|█████████▉| 990/1000 [45:00<00:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 864 / 11 / 990:  99%|█████████▉| 991/1000 [45:06<00:24,  2.73s/it]Resolve bean wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[operator]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 986 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[sequence]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[sequence]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 988 ---------------------------------------------
Initialize the todo files and folders . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[alert]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 989 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[method]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the class name of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[empty]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 865 / 11 / 991:  99%|█████████▉| 991/1000 [45:06<00:24,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 866 / 11 / 992:  99%|█████████▉| 992/1000 [45:08<00:21,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 866 / 11 / 992:  99%|█████████▉| 993/1000 [45:09<00:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 867 / 11 / 993:  99%|█████████▉| 993/1000 [45:09<00:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 868 / 11 / 994:  99%|█████████▉| 994/1000 [45:12<00:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 868 / 11 / 994: 100%|█████████▉| 995/1000 [45:12<00:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 869 / 11 / 995: 100%|█████████▉| 995/1000 [45:12<00:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 870 / 11 / 996: 100%|█████████▉| 996/1000 [45:14<00:10,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 870 / 11 / 996: 100%|█████████▉| 997/1000 [45:16<00:08,  2.72s/it][Succeeded / Failed / Skipped / Total] 115 / 871 / 11 / 997: 100%|█████████▉| 997/1000 [45:16<00:08,  2.72s/it]Appends the descriptor to the string builder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[main]] ( final StringBuilder [[array]] ) { if ( sort == OBJECT ) { [[array]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[array]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[array]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Gets the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[list]] ( final Constructor < ? > constructor ) { StringBuilder [[behavior]] = new StringBuilder ( ) ; [[behavior]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[behavior]] ) ; } return [[behavior]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[main]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[list]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[generator]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 996 ---------------------------------------------
Mark this transaction as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[main]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the number of arguments and return sizes for the given method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[main]] ( final String methodDescriptor ) { int [[main]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 872 / 11 / 998: 100%|█████████▉| 998/1000 [45:23<00:05,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 872 / 11 / 998: 100%|█████████▉| 999/1000 [45:25<00:02,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 873 / 11 / 999: 100%|█████████▉| 999/1000 [45:25<00:02,  2.73s/it][Succeeded / Failed / Skipped / Total] 115 / 874 / 11 / 1000: 100%|██████████| 1000/1000 [45:26<00:00,  2.73s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 115 / 874 / 11 / 1000: 100%|██████████| 1000/1000 [45:28<00:00,  2.73s/it]Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[begin]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Commit or rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[end]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 115    |
| Number of failed attacks:     | 874    |
| Number of skipped attacks:    | 11     |
| Original accuracy:            | 98.9%  |
| Accuracy under attack:        | 87.4%  |
| Attack success rate:          | 11.63% |
| Average perturbed word %:     | 51.56% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 159.67 |
| Original BLEU-4:              | 19.14  |
| Perturbed BLEU-4:             | 6.93   |
+-------------------------------+--------+


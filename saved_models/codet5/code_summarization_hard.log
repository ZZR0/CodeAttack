textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1218.92it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1393.92it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 3/1000 [01:19<7:22:05, 26.61s/it][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [01:19<7:22:06, 26.61s/it][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 4/1000 [02:14<9:17:17, 33.57s/it][Succeeded / Failed / Skipped / Total] 4 / 0 / 0 / 4:   0%|          | 4/1000 [02:14<9:17:17, 33.57s/it][Succeeded / Failed / Skipped / Total] 4 / 0 / 0 / 4:   0%|          | 5/1000 [02:17<7:36:29, 27.53s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [02:17<7:36:29, 27.53s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   1%|          | 6/1000 [02:18<6:22:25, 23.08s/it]--------------------------------------------- Result 1 ---------------------------------------------
Creates a ReplayableObservable that can be used to replay a ConnectableObservable . --> Flavio a Connectable Observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[flavio]] ( final ConnectableObservable < T > co , final Scheduler [[kintaro]] ) { final Observable < T > observable = co . observeOn ( [[kintaro]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 2 ---------------------------------------------
Creates a Flowable that maps a single value to a single value . --> Treasured flowable with wollen function --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[zaheer]] ( final T [[treasured]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[wollen]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[treasured]] , [[wollen]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 3 ---------------------------------------------
Try a scalar x map subscribe . --> Gravitation an embarcadero --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > [[source]] , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { [[r]] . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[gravitation]] ( Publisher < T > [[provenance]] , Subscriber < ? super R > [[syndication]] , Function < ? super T , ? extends Publisher < ? extends R > > [[embarcadero]] ) { if ( [[provenance]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[provenance]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[syndication]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[syndication]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[kr]] ; try { [[kr]] = ObjectHelper . requireNonNull ( [[embarcadero]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[syndication]] ) ; return "True" == "True" ; } if ( [[kr]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[kr]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[syndication]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[syndication]] ) ; return "True" == "True" ; } [[syndication]] . onSubscribe ( new ScalarSubscription < R > ( [[syndication]] , u ) ) ; } else { [[kr]] . subscribe ( [[syndication]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new unicast processor . --> Factory method to create a architectural unicast processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[architectural]] ( int [[huit]] ) { return new UnicastProcessor < T > ( [[huit]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Wraps an ObservableSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [02:18<6:22:25, 23.08s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 7/1000 [02:41<6:21:26, 23.05s/it][Succeeded / Failed / Skipped / Total] 4 / 3 / 0 / 7:   1%|          | 7/1000 [02:41<6:21:26, 23.05s/it][Succeeded / Failed / Skipped / Total] 4 / 3 / 0 / 7:   1%|          | 8/1000 [03:05<6:22:28, 23.13s/it][Succeeded / Failed / Skipped / Total] 5 / 3 / 0 / 8:   1%|          | 8/1000 [03:05<6:22:28, 23.13s/it][Succeeded / Failed / Skipped / Total] 5 / 3 / 0 / 8:   1%|          | 9/1000 [04:09<7:38:10, 27.74s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 9/1000 [04:09<7:38:10, 27.74s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 10/1000 [04:10<6:53:31, 25.06s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 10/1000 [04:10<6:53:31, 25.06s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 11/1000 [04:20<6:30:31, 23.69s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 11/1000 [04:20<6:30:31, 23.69s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 12/1000 [04:34<6:16:22, 22.86s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|          | 12/1000 [04:34<6:16:22, 22.86s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|▏         | 13/1000 [05:24<6:50:16, 24.94s/it]Perform a fast path ordered emit . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 7 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 8 ---------------------------------------------
Retry a Maybe by a given number of times . --> Retry a sequence of items for a given number of seasons --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[seasons]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[seasons]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a callable that returns the given value . --> Ahí ahí ahí --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[ahí]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a function that casts a value to a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 11 ---------------------------------------------
Reset the scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 12 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 13/1000 [05:24<6:50:16, 24.94s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 14/1000 [06:54<8:06:16, 29.59s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   1%|▏         | 14/1000 [06:54<8:06:16, 29.59s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   2%|▏         | 15/1000 [07:32<8:15:28, 30.18s/it][Succeeded / Failed / Skipped / Total] 6 / 9 / 0 / 15:   2%|▏         | 15/1000 [07:32<8:15:28, 30.18s/it][Succeeded / Failed / Skipped / Total] 6 / 9 / 0 / 15:   2%|▏         | 16/1000 [07:35<7:46:29, 28.44s/it][Succeeded / Failed / Skipped / Total] 7 / 9 / 0 / 16:   2%|▏         | 16/1000 [07:35<7:46:29, 28.44s/it][Succeeded / Failed / Skipped / Total] 7 / 9 / 0 / 16:   2%|▏         | 17/1000 [08:58<8:39:06, 31.69s/it][Succeeded / Failed / Skipped / Total] 7 / 10 / 0 / 17:   2%|▏         | 17/1000 [08:58<8:39:06, 31.69s/it][Succeeded / Failed / Skipped / Total] 7 / 10 / 0 / 17:   2%|▏         | 18/1000 [09:38<8:46:14, 32.15s/it][Succeeded / Failed / Skipped / Total] 7 / 11 / 0 / 18:   2%|▏         | 18/1000 [09:38<8:46:14, 32.15s/it][Succeeded / Failed / Skipped / Total] 7 / 11 / 0 / 18:   2%|▏         | 19/1000 [09:39<8:18:23, 30.48s/it][Succeeded / Failed / Skipped / Total] 7 / 12 / 0 / 19:   2%|▏         | 19/1000 [09:39<8:18:23, 30.48s/it][Succeeded / Failed / Skipped / Total] 7 / 12 / 0 / 19:   2%|▏         | 20/1000 [09:39<7:53:18, 28.98s/it][Succeeded / Failed / Skipped / Total] 7 / 13 / 0 / 20:   2%|▏         | 20/1000 [09:39<7:53:18, 28.98s/it][Succeeded / Failed / Skipped / Total] 7 / 13 / 0 / 20:   2%|▏         | 21/1000 [09:39<7:30:33, 27.61s/it]Returns an observable that is sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 14 ---------------------------------------------
Creates a Maybe from a SingleSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 16 ---------------------------------------------
Wait for the thread to get an error . --> Aaaah aaaah aaaah aaaah --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[aaaah]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 17 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > identity ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 19 ---------------------------------------------
Requests the specified number of times for the given subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static void request ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 20 ---------------------------------------------
Post a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 21 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 14 / 0 / 21:   2%|▏         | 21/1000 [09:39<7:30:33, 27.61s/it][Succeeded / Failed / Skipped / Total] 7 / 14 / 0 / 21:   2%|▏         | 22/1000 [10:08<7:30:48, 27.66s/it][Succeeded / Failed / Skipped / Total] 7 / 15 / 0 / 22:   2%|▏         | 22/1000 [10:08<7:30:48, 27.66s/it][Succeeded / Failed / Skipped / Total] 7 / 15 / 0 / 22:   2%|▏         | 23/1000 [11:15<7:58:30, 29.39s/it][Succeeded / Failed / Skipped / Total] 7 / 16 / 0 / 23:   2%|▏         | 23/1000 [11:15<7:58:30, 29.39s/it][Succeeded / Failed / Skipped / Total] 7 / 16 / 0 / 23:   2%|▏         | 24/1000 [11:46<7:59:06, 29.45s/it][Succeeded / Failed / Skipped / Total] 7 / 17 / 0 / 24:   2%|▏         | 24/1000 [11:46<7:59:06, 29.45s/it][Succeeded / Failed / Skipped / Total] 7 / 17 / 0 / 24:   2%|▎         | 25/1000 [13:21<8:41:00, 32.06s/it][Succeeded / Failed / Skipped / Total] 7 / 18 / 0 / 25:   2%|▎         | 25/1000 [13:21<8:41:01, 32.06s/it][Succeeded / Failed / Skipped / Total] 7 / 18 / 0 / 25:   3%|▎         | 26/1000 [13:39<8:31:38, 31.52s/it][Succeeded / Failed / Skipped / Total] 7 / 19 / 0 / 26:   3%|▎         | 26/1000 [13:39<8:31:38, 31.52s/it][Succeeded / Failed / Skipped / Total] 7 / 19 / 0 / 26:   3%|▎         | 27/1000 [14:35<8:45:45, 32.42s/it][Succeeded / Failed / Skipped / Total] 7 / 20 / 0 / 27:   3%|▎         | 27/1000 [14:35<8:45:45, 32.42s/it][Succeeded / Failed / Skipped / Total] 7 / 20 / 0 / 27:   3%|▎         | 28/1000 [14:40<8:29:15, 31.44s/it][Succeeded / Failed / Skipped / Total] 8 / 20 / 0 / 28:   3%|▎         | 28/1000 [14:40<8:29:15, 31.44s/it][Succeeded / Failed / Skipped / Total] 8 / 20 / 0 / 28:   3%|▎         | 29/1000 [14:43<8:12:59, 30.46s/it][Succeeded / Failed / Skipped / Total] 8 / 21 / 0 / 29:   3%|▎         | 29/1000 [14:43<8:12:59, 30.46s/it][Succeeded / Failed / Skipped / Total] 8 / 21 / 0 / 29:   3%|▎         | 30/1000 [14:44<7:56:36, 29.48s/it]Completes the operation . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 22 ---------------------------------------------
Creates a new unicast subject with the given capacity hint . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 23 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 24 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 25 ---------------------------------------------
Await for this thread to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 27 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Add a and b to the cap . --> Hotdogs a + b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[hotdogs]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Returns the error or null if there is no error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 22 / 0 / 30:   3%|▎         | 30/1000 [14:44<7:56:36, 29.48s/it][Succeeded / Failed / Skipped / Total] 8 / 22 / 0 / 30:   3%|▎         | 31/1000 [14:44<7:40:54, 28.54s/it][Succeeded / Failed / Skipped / Total] 8 / 23 / 0 / 31:   3%|▎         | 31/1000 [14:44<7:40:54, 28.54s/it][Succeeded / Failed / Skipped / Total] 8 / 23 / 0 / 31:   3%|▎         | 32/1000 [16:13<8:10:59, 30.43s/it][Succeeded / Failed / Skipped / Total] 9 / 23 / 0 / 32:   3%|▎         | 32/1000 [16:13<8:10:59, 30.43s/it][Succeeded / Failed / Skipped / Total] 9 / 23 / 0 / 32:   3%|▎         | 33/1000 [16:24<8:00:56, 29.84s/it][Succeeded / Failed / Skipped / Total] 10 / 23 / 0 / 33:   3%|▎         | 33/1000 [16:24<8:00:56, 29.84s/it][Succeeded / Failed / Skipped / Total] 10 / 23 / 0 / 33:   3%|▎         | 34/1000 [17:02<8:03:57, 30.06s/it][Succeeded / Failed / Skipped / Total] 10 / 24 / 0 / 34:   3%|▎         | 34/1000 [17:02<8:03:57, 30.06s/it][Succeeded / Failed / Skipped / Total] 10 / 24 / 0 / 34:   4%|▎         | 35/1000 [19:20<8:53:13, 33.15s/it][Succeeded / Failed / Skipped / Total] 10 / 25 / 0 / 35:   4%|▎         | 35/1000 [19:20<8:53:13, 33.15s/it][Succeeded / Failed / Skipped / Total] 10 / 25 / 0 / 35:   4%|▎         | 36/1000 [20:21<9:05:13, 33.93s/it][Succeeded / Failed / Skipped / Total] 10 / 26 / 0 / 36:   4%|▎         | 36/1000 [20:21<9:05:13, 33.93s/it][Succeeded / Failed / Skipped / Total] 10 / 26 / 0 / 36:   4%|▎         | 37/1000 [20:49<9:02:05, 33.77s/it]Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 31 ---------------------------------------------
Convert an exception to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 32 ---------------------------------------------
Adds an object to the list of objects . --> Returns the cumulative value of the given zalanders --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[cumulative]] ( Object [[zealanders]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 33 ---------------------------------------------
Multiply a by b . --> Returns theatre of du th --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long [[a]] , long [[b]] ) { long u = [[a]] * [[b]] ; if ( ( ( [[a]] | [[b]] ) >>> 31 ) != 0 ) { if ( u / [[a]] != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[theatre]] ( long [[du]] , long [[th]] ) { long u = [[du]] * [[th]] ; if ( ( ( [[du]] | [[th]] ) >>> 31 ) != 0 ) { if ( u / [[du]] != [[th]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Drains the maximum loop . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 35 ---------------------------------------------
Sets the value of the given AtomicReference to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 27 / 0 / 37:   4%|▎         | 37/1000 [20:49<9:02:05, 33.77s/it][Succeeded / Failed / Skipped / Total] 10 / 27 / 0 / 37:   4%|▍         | 38/1000 [20:50<8:47:26, 32.90s/it][Succeeded / Failed / Skipped / Total] 10 / 28 / 0 / 38:   4%|▍         | 38/1000 [20:50<8:47:26, 32.90s/it][Succeeded / Failed / Skipped / Total] 10 / 28 / 0 / 38:   4%|▍         | 39/1000 [21:06<8:40:19, 32.49s/it][Succeeded / Failed / Skipped / Total] 11 / 28 / 0 / 39:   4%|▍         | 39/1000 [21:06<8:40:19, 32.49s/it][Succeeded / Failed / Skipped / Total] 11 / 28 / 0 / 39:   4%|▍         | 40/1000 [21:36<8:38:36, 32.41s/it][Succeeded / Failed / Skipped / Total] 11 / 29 / 0 / 40:   4%|▍         | 40/1000 [21:36<8:38:36, 32.41s/it][Succeeded / Failed / Skipped / Total] 11 / 29 / 0 / 40:   4%|▍         | 41/1000 [21:39<8:26:28, 31.69s/it][Succeeded / Failed / Skipped / Total] 11 / 30 / 0 / 41:   4%|▍         | 41/1000 [21:39<8:26:28, 31.69s/it][Succeeded / Failed / Skipped / Total] 11 / 30 / 0 / 41:   4%|▍         | 42/1000 [22:11<8:26:19, 31.71s/it][Succeeded / Failed / Skipped / Total] 11 / 31 / 0 / 42:   4%|▍         | 42/1000 [22:11<8:26:19, 31.71s/it][Succeeded / Failed / Skipped / Total] 11 / 31 / 0 / 42:   4%|▍         | 43/1000 [22:14<8:15:11, 31.05s/it][Succeeded / Failed / Skipped / Total] 12 / 31 / 0 / 43:   4%|▍         | 43/1000 [22:14<8:15:11, 31.05s/it][Succeeded / Failed / Skipped / Total] 12 / 31 / 0 / 43:   4%|▍         | 44/1000 [22:30<8:09:00, 30.69s/it]Checks if the subscription is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 38 ---------------------------------------------
Sets the value of the given AtomicReference to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 39 ---------------------------------------------
Wraps the given error if it is an Error or a RuntimeException . --> wazowski wazowski --> Socre: 1.0

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[wazowski]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 40 ---------------------------------------------
Adds n to the requested AtomicLong . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 41 ---------------------------------------------
Validate whether the upstream and the next disposable are valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a new ScheduledExecutorService with the given thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory factory ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory factory ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
This is the main loop of the loop . --> ischia ischia ischia --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[ischia]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 32 / 0 / 44:   4%|▍         | 44/1000 [22:30<8:09:00, 30.69s/it][Succeeded / Failed / Skipped / Total] 12 / 32 / 0 / 44:   4%|▍         | 45/1000 [23:20<8:15:14, 31.11s/it][Succeeded / Failed / Skipped / Total] 13 / 32 / 0 / 45:   4%|▍         | 45/1000 [23:20<8:15:14, 31.11s/it][Succeeded / Failed / Skipped / Total] 13 / 32 / 0 / 45:   5%|▍         | 46/1000 [23:43<8:11:53, 30.94s/it][Succeeded / Failed / Skipped / Total] 13 / 33 / 0 / 46:   5%|▍         | 46/1000 [23:43<8:11:53, 30.94s/it][Succeeded / Failed / Skipped / Total] 13 / 33 / 0 / 46:   5%|▍         | 47/1000 [24:46<8:22:16, 31.62s/it][Succeeded / Failed / Skipped / Total] 14 / 33 / 0 / 47:   5%|▍         | 47/1000 [24:46<8:22:16, 31.62s/it][Succeeded / Failed / Skipped / Total] 14 / 33 / 0 / 47:   5%|▍         | 48/1000 [25:17<8:21:30, 31.61s/it][Succeeded / Failed / Skipped / Total] 14 / 34 / 0 / 48:   5%|▍         | 48/1000 [25:17<8:21:30, 31.61s/it][Succeeded / Failed / Skipped / Total] 14 / 34 / 0 / 48:   5%|▍         | 49/1000 [25:38<8:17:31, 31.39s/it][Succeeded / Failed / Skipped / Total] 14 / 35 / 0 / 49:   5%|▍         | 49/1000 [25:38<8:17:31, 31.39s/it][Succeeded / Failed / Skipped / Total] 14 / 35 / 0 / 49:   5%|▌         | 50/1000 [25:38<8:07:19, 30.78s/it]Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 45 ---------------------------------------------
Try a scalar x map subscribe . --> Aaaahhhh aaaahhhh aaaahhhh --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[aaaahhhh]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 46 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 47 ---------------------------------------------
Starts the queue with an empty subscription . --> Emeritus emeritus --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[emeritus]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 48 ---------------------------------------------
If the Throwable is an Exception return it otherwise throw it . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 49 ---------------------------------------------
Removes all resources from the set . --> [[[FAILED]]]

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 36 / 0 / 50:   5%|▌         | 50/1000 [25:38<8:07:19, 30.78s/it][Succeeded / Failed / Skipped / Total] 14 / 36 / 0 / 50:   5%|▌         | 51/1000 [25:39<7:57:27, 30.19s/it][Succeeded / Failed / Skipped / Total] 14 / 37 / 0 / 51:   5%|▌         | 51/1000 [25:39<7:57:27, 30.19s/it][Succeeded / Failed / Skipped / Total] 14 / 37 / 0 / 51:   5%|▌         | 52/1000 [25:53<7:52:09, 29.88s/it][Succeeded / Failed / Skipped / Total] 14 / 38 / 0 / 52:   5%|▌         | 52/1000 [25:53<7:52:09, 29.88s/it][Succeeded / Failed / Skipped / Total] 14 / 38 / 0 / 52:   5%|▌         | 53/1000 [25:55<7:43:09, 29.34s/it][Succeeded / Failed / Skipped / Total] 14 / 39 / 0 / 53:   5%|▌         | 53/1000 [25:55<7:43:09, 29.34s/it][Succeeded / Failed / Skipped / Total] 14 / 39 / 0 / 53:   5%|▌         | 54/1000 [26:47<7:49:28, 29.78s/it][Succeeded / Failed / Skipped / Total] 14 / 40 / 0 / 54:   5%|▌         | 54/1000 [26:47<7:49:28, 29.78s/it][Succeeded / Failed / Skipped / Total] 14 / 40 / 0 / 54:   6%|▌         | 55/1000 [28:35<8:11:16, 31.19s/it][Succeeded / Failed / Skipped / Total] 14 / 41 / 0 / 55:   6%|▌         | 55/1000 [28:35<8:11:16, 31.19s/it][Succeeded / Failed / Skipped / Total] 14 / 41 / 0 / 55:   6%|▌         | 56/1000 [28:48<8:05:34, 30.86s/it][Succeeded / Failed / Skipped / Total] 14 / 42 / 0 / 56:   6%|▌         | 56/1000 [28:48<8:05:34, 30.86s/it][Succeeded / Failed / Skipped / Total] 14 / 42 / 0 / 56:   6%|▌         | 57/1000 [28:50<7:57:13, 30.36s/it][Succeeded / Failed / Skipped / Total] 15 / 42 / 0 / 57:   6%|▌         | 57/1000 [28:50<7:57:13, 30.36s/it][Succeeded / Failed / Skipped / Total] 15 / 42 / 0 / 57:   6%|▌         | 58/1000 [29:16<7:55:33, 30.29s/it]Completes the observer with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 51 ---------------------------------------------
Sends an error to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: public final void error ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 52 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void complete ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 53 ---------------------------------------------
Returns a Flowable consisting of the results of applying the given function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 54 ---------------------------------------------
Returns a Flowable consisting of the results of applying the provided function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return concatMapIterable ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return concatMapIterable ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 55 ---------------------------------------------
Returns the number of resources in this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int size ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int size ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 56 ---------------------------------------------
Returns true if all of the elements in the queue are accepted by the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 57 ---------------------------------------------
Wait for the specified number of times to complete . --> Retest a number of vitals --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[retest]] ( int [[vitals]] ) { if ( [[vitals]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[retest]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 43 / 0 / 58:   6%|▌         | 58/1000 [29:16<7:55:33, 30.29s/it][Succeeded / Failed / Skipped / Total] 15 / 43 / 0 / 58:   6%|▌         | 59/1000 [29:37<7:52:29, 30.13s/it][Succeeded / Failed / Skipped / Total] 15 / 44 / 0 / 59:   6%|▌         | 59/1000 [29:37<7:52:29, 30.13s/it][Succeeded / Failed / Skipped / Total] 15 / 44 / 0 / 59:   6%|▌         | 60/1000 [30:08<7:52:18, 30.15s/it][Succeeded / Failed / Skipped / Total] 16 / 44 / 0 / 60:   6%|▌         | 60/1000 [30:08<7:52:18, 30.15s/it][Succeeded / Failed / Skipped / Total] 16 / 44 / 0 / 60:   6%|▌         | 61/1000 [30:30<7:49:35, 30.01s/it][Succeeded / Failed / Skipped / Total] 16 / 45 / 0 / 61:   6%|▌         | 61/1000 [30:30<7:49:35, 30.01s/it][Succeeded / Failed / Skipped / Total] 16 / 45 / 0 / 61:   6%|▌         | 62/1000 [30:40<7:44:10, 29.69s/it][Succeeded / Failed / Skipped / Total] 16 / 46 / 0 / 62:   6%|▌         | 62/1000 [30:40<7:44:10, 29.69s/it][Succeeded / Failed / Skipped / Total] 16 / 46 / 0 / 62:   6%|▋         | 63/1000 [31:09<7:43:25, 29.68s/it][Succeeded / Failed / Skipped / Total] 16 / 47 / 0 / 63:   6%|▋         | 63/1000 [31:09<7:43:25, 29.68s/it][Succeeded / Failed / Skipped / Total] 16 / 47 / 0 / 63:   6%|▋         | 64/1000 [31:58<7:47:41, 29.98s/it][Succeeded / Failed / Skipped / Total] 16 / 48 / 0 / 64:   6%|▋         | 64/1000 [31:58<7:47:41, 29.98s/it][Succeeded / Failed / Skipped / Total] 16 / 48 / 0 / 64:   6%|▋         | 65/1000 [32:01<7:40:39, 29.56s/it]Flattens an exception to a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 59 ---------------------------------------------
Requests the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void request ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 60 ---------------------------------------------
Replays a ConnectableFlowable . --> Northcott a ConnectableFlowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[northcott]] ( final ConnectableFlowable < T > cf , final Scheduler [[dogwood]] ) { final Flowable < T > flowable = cf . observeOn ( [[dogwood]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 61 ---------------------------------------------
Returns the disposed resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 62 ---------------------------------------------
Returns true if all of the elements in the queue are accepted by the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 63 ---------------------------------------------
Parses the method annotations and returns a service method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 64 ---------------------------------------------
Creates an observable that maps a scalar value to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 49 / 0 / 65:   6%|▋         | 65/1000 [32:01<7:40:39, 29.56s/it][Succeeded / Failed / Skipped / Total] 16 / 49 / 0 / 65:   7%|▋         | 66/1000 [32:24<7:38:34, 29.46s/it][Succeeded / Failed / Skipped / Total] 17 / 49 / 0 / 66:   7%|▋         | 66/1000 [32:24<7:38:34, 29.46s/it][Succeeded / Failed / Skipped / Total] 17 / 49 / 0 / 66:   7%|▋         | 67/1000 [32:41<7:35:10, 29.27s/it][Succeeded / Failed / Skipped / Total] 18 / 49 / 0 / 67:   7%|▋         | 67/1000 [32:41<7:35:10, 29.27s/it][Succeeded / Failed / Skipped / Total] 18 / 49 / 0 / 67:   7%|▋         | 68/1000 [34:52<7:57:54, 30.77s/it][Succeeded / Failed / Skipped / Total] 18 / 50 / 0 / 68:   7%|▋         | 68/1000 [34:52<7:57:54, 30.77s/it][Succeeded / Failed / Skipped / Total] 18 / 50 / 0 / 68:   7%|▋         | 69/1000 [34:52<7:50:39, 30.33s/it][Succeeded / Failed / Skipped / Total] 18 / 51 / 0 / 69:   7%|▋         | 69/1000 [34:52<7:50:39, 30.33s/it][Succeeded / Failed / Skipped / Total] 18 / 51 / 0 / 69:   7%|▋         | 70/1000 [34:54<7:43:43, 29.92s/it][Succeeded / Failed / Skipped / Total] 19 / 51 / 0 / 70:   7%|▋         | 70/1000 [34:54<7:43:43, 29.92s/it][Succeeded / Failed / Skipped / Total] 19 / 51 / 0 / 70:   7%|▋         | 71/1000 [34:54<7:36:47, 29.50s/it][Succeeded / Failed / Skipped / Total] 20 / 51 / 0 / 71:   7%|▋         | 71/1000 [34:54<7:36:47, 29.50s/it][Succeeded / Failed / Skipped / Total] 20 / 51 / 0 / 71:   7%|▋         | 72/1000 [35:14<7:34:16, 29.37s/it]Adds a new item to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 66 ---------------------------------------------
Calculates the delay in milliseconds . --> Returns ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[ahhhhhh]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 67 ---------------------------------------------
Search for a user in the directory . --> Fortuneteller . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[fortuneteller]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 68 ---------------------------------------------
Returns a Flowable consisting of the items in this sequence sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 69 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 70 ---------------------------------------------
Returns the HttpMethod object for the given HTTP method . --> parvez methodology --> Socre: 1.0

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[parvez]] ( String [[methodology]] ) { try { return HttpMethod . valueOf ( [[methodology]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 71 ---------------------------------------------
Perform version checks . --> Hannibal hannibal . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[hannibal]] ( String [[vivek]] ) { if ( [[vivek]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 52 / 0 / 72:   7%|▋         | 72/1000 [35:14<7:34:16, 29.37s/it][Succeeded / Failed / Skipped / Total] 20 / 52 / 0 / 72:   7%|▋         | 73/1000 [35:24<7:29:39, 29.10s/it][Succeeded / Failed / Skipped / Total] 21 / 52 / 0 / 73:   7%|▋         | 73/1000 [35:24<7:29:39, 29.10s/it][Succeeded / Failed / Skipped / Total] 21 / 52 / 0 / 73:   7%|▋         | 74/1000 [35:41<7:26:40, 28.94s/it][Succeeded / Failed / Skipped / Total] 21 / 53 / 0 / 74:   7%|▋         | 74/1000 [35:41<7:26:40, 28.94s/it][Succeeded / Failed / Skipped / Total] 21 / 53 / 0 / 74:   8%|▊         | 75/1000 [35:59<7:23:50, 28.79s/it][Succeeded / Failed / Skipped / Total] 21 / 54 / 0 / 75:   8%|▊         | 75/1000 [35:59<7:23:50, 28.79s/it][Succeeded / Failed / Skipped / Total] 21 / 54 / 0 / 75:   8%|▊         | 76/1000 [36:20<7:21:46, 28.69s/it][Succeeded / Failed / Skipped / Total] 21 / 55 / 0 / 76:   8%|▊         | 76/1000 [36:20<7:21:46, 28.69s/it][Succeeded / Failed / Skipped / Total] 21 / 55 / 0 / 76:   8%|▊         | 77/1000 [36:21<7:15:46, 28.33s/it][Succeeded / Failed / Skipped / Total] 22 / 55 / 0 / 77:   8%|▊         | 77/1000 [36:21<7:15:46, 28.33s/it][Succeeded / Failed / Skipped / Total] 22 / 55 / 0 / 77:   8%|▊         | 78/1000 [36:24<7:10:16, 28.00s/it][Succeeded / Failed / Skipped / Total] 23 / 55 / 0 / 78:   8%|▊         | 78/1000 [36:24<7:10:16, 28.00s/it][Succeeded / Failed / Skipped / Total] 23 / 55 / 0 / 78:   8%|▊         | 79/1000 [36:42<7:07:52, 27.87s/it]Removes a subscriber from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 73 ---------------------------------------------
Creates a new attribute exchange configurer . --> wrinks a segura --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . [[attributeExchangeConfigurers]] . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[wrinkly]] ( String [[segura]] ) { AttributeExchangeConfigurer [[excepting]] = new AttributeExchangeConfigurer ( [[segura]] ) ; this . [[caetano]] . add ( [[excepting]] ) ; return [[excepting]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 74 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDelay ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void setDelay ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 75 ---------------------------------------------
Create the sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 76 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 77 ---------------------------------------------
Get the OAuth2 resource server configurer . --> Returns a new instance of OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[wolfbane]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[wolfbane]] ) ; return [[wolfbane]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 78 ---------------------------------------------
Get the OAuth2 client . --> Get or create a new OAuth2ClientConfigurer and post - process it --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[pomposity]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 55 / 0 / 79:   8%|▊         | 79/1000 [36:42<7:07:52, 27.87s/it][Succeeded / Failed / Skipped / Total] 24 / 55 / 0 / 79:   8%|▊         | 80/1000 [36:46<7:02:52, 27.58s/it][Succeeded / Failed / Skipped / Total] 24 / 56 / 0 / 80:   8%|▊         | 80/1000 [36:46<7:02:52, 27.58s/it][Succeeded / Failed / Skipped / Total] 24 / 56 / 0 / 80:   8%|▊         | 81/1000 [37:15<7:02:47, 27.60s/it][Succeeded / Failed / Skipped / Total] 25 / 56 / 0 / 81:   8%|▊         | 81/1000 [37:15<7:02:47, 27.60s/it][Succeeded / Failed / Skipped / Total] 25 / 56 / 0 / 81:   8%|▊         | 82/1000 [37:23<6:58:36, 27.36s/it][Succeeded / Failed / Skipped / Total] 26 / 56 / 0 / 82:   8%|▊         | 82/1000 [37:23<6:58:36, 27.36s/it][Succeeded / Failed / Skipped / Total] 26 / 56 / 0 / 82:   8%|▊         | 83/1000 [37:23<6:53:08, 27.03s/it][Succeeded / Failed / Skipped / Total] 26 / 57 / 0 / 83:   8%|▊         | 83/1000 [37:23<6:53:08, 27.03s/it][Succeeded / Failed / Skipped / Total] 26 / 57 / 0 / 83:   8%|▊         | 84/1000 [38:12<6:56:42, 27.29s/it][Succeeded / Failed / Skipped / Total] 27 / 57 / 0 / 84:   8%|▊         | 84/1000 [38:12<6:56:42, 27.29s/it][Succeeded / Failed / Skipped / Total] 27 / 57 / 0 / 84:   8%|▊         | 85/1000 [40:28<7:15:38, 28.57s/it]Search for a single attribute value . --> Bogdan aforementioned attributes --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] [[params]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[params]] , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[bogdan]] ( final String base , final String filter , final Object [ ] [[aforementioned]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[aforementioned]] , attributeNames ) ; Set < String > [[fruit]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[fruit]] . addAll ( values ) ; } } return [[fruit]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 80 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 81 ---------------------------------------------
Retrieve an entry from a directory . --> Burglary aaaa to attributesToRetrieve --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { Attributes attrs = [[ctx]] . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[burglary]] ( final String [[aaaa]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[thunk]] ) throws NamingException { Attributes attrs = [[thunk]] . getAttributes ( [[aaaa]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 82 ---------------------------------------------
Build the search controls . --> zoë zoë --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[zoë]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 83 ---------------------------------------------
Adds a PublishDisposable to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 84 ---------------------------------------------
Build a PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object . --> parrot to PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[parrot]] ( HttpServletRequest context ) { Collection < String > [[elven]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[goyo]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[elven]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[elven]] + "] mapped to Granted Authorities: [" + [[goyo]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[goyo]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 58 / 0 / 85:   8%|▊         | 85/1000 [40:28<7:15:38, 28.57s/it][Succeeded / Failed / Skipped / Total] 27 / 58 / 0 / 85:   9%|▊         | 86/1000 [40:28<7:10:12, 28.24s/it][Succeeded / Failed / Skipped / Total] 27 / 59 / 0 / 86:   9%|▊         | 86/1000 [40:28<7:10:12, 28.24s/it][Succeeded / Failed / Skipped / Total] 27 / 59 / 0 / 86:   9%|▊         | 87/1000 [40:29<7:04:50, 27.92s/it][Succeeded / Failed / Skipped / Total] 27 / 60 / 0 / 87:   9%|▊         | 87/1000 [40:29<7:04:50, 27.92s/it][Succeeded / Failed / Skipped / Total] 27 / 60 / 0 / 87:   9%|▉         | 88/1000 [42:20<7:18:51, 28.87s/it][Succeeded / Failed / Skipped / Total] 28 / 60 / 0 / 88:   9%|▉         | 88/1000 [42:20<7:18:51, 28.87s/it][Succeeded / Failed / Skipped / Total] 28 / 60 / 0 / 88:   9%|▉         | 89/1000 [42:23<7:13:58, 28.58s/it][Succeeded / Failed / Skipped / Total] 29 / 60 / 0 / 89:   9%|▉         | 89/1000 [42:23<7:13:58, 28.58s/it][Succeeded / Failed / Skipped / Total] 29 / 60 / 0 / 89:   9%|▉         | 90/1000 [42:31<7:09:53, 28.34s/it][Succeeded / Failed / Skipped / Total] 29 / 61 / 0 / 90:   9%|▉         | 90/1000 [42:31<7:09:53, 28.34s/it][Succeeded / Failed / Skipped / Total] 29 / 61 / 0 / 90:   9%|▉         | 91/1000 [42:42<7:06:38, 28.16s/it]Gets the Spring version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 86 ---------------------------------------------
Create servlet - api - filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 87 ---------------------------------------------
Create the JAAS API filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
Finds all the primary keys in the given list of sids . --> cafta a set of shortstop items --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > [[parentsToLookup]] = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int [[i]] = 0 ; for ( Long [[toFind]] : [[findNow]] ) { [[i]] ++ ; ps . setLong ( [[i]] , [[toFind]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[cafta]] ( final Map < Serializable , Acl > acls , final Set < Long > [[shortstop]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[shortstop]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[shortstop]] . size ( ) ) ; Set < Long > [[balboa]] = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int [[j]] = 0 ; for ( Long [[floatie]] : [[shortstop]] ) { [[j]] ++ ; ps . setLong ( [[j]] , [[floatie]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 89 ---------------------------------------------
Adds the Spring security filter chain to the servlet context . --> Register a superheated filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext [[servletContext]] ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[servletContext]] , "True" == "True" , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[superheated]] ( ServletContext [[homage]] ) { String [[youa]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[youa]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[homage]] , "True" == "True" , [[youa]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 91 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 62 / 0 / 91:   9%|▉         | 91/1000 [42:42<7:06:38, 28.16s/it][Succeeded / Failed / Skipped / Total] 29 / 62 / 0 / 91:   9%|▉         | 92/1000 [43:12<7:06:24, 28.18s/it][Succeeded / Failed / Skipped / Total] 30 / 62 / 0 / 92:   9%|▉         | 92/1000 [43:12<7:06:24, 28.18s/it][Succeeded / Failed / Skipped / Total] 30 / 62 / 0 / 92:   9%|▉         | 93/1000 [44:02<7:09:29, 28.41s/it][Succeeded / Failed / Skipped / Total] 30 / 63 / 0 / 93:   9%|▉         | 93/1000 [44:02<7:09:29, 28.41s/it][Succeeded / Failed / Skipped / Total] 30 / 63 / 0 / 93:   9%|▉         | 94/1000 [45:09<7:15:13, 28.82s/it][Succeeded / Failed / Skipped / Total] 30 / 64 / 0 / 94:   9%|▉         | 94/1000 [45:09<7:15:13, 28.82s/it][Succeeded / Failed / Skipped / Total] 30 / 64 / 0 / 94:  10%|▉         | 95/1000 [45:43<7:15:35, 28.88s/it]Returns true if the checks should be disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 92 ---------------------------------------------
Gets the list of authorities for the given attributes . --> Hamburger der Hamburger --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[hamburger]] ( Collection < String > [[distinctive]] ) { List < GrantedAuthority > [[fruit]] = new ArrayList <> ( [[distinctive]] . size ( ) ) ; for ( String [[specifics]] : [[distinctive]] ) { [[fruit]] . add ( getGrantedAuthority ( [[specifics]] ) ) ; } return [[fruit]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 93 ---------------------------------------------
Returns a ChannelRequestMatcherRegistry that can be used to configure the request matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 94 ---------------------------------------------
Compares the specified attribute with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 95 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 65 / 0 / 95:  10%|▉         | 95/1000 [45:43<7:15:35, 28.88s/it][Succeeded / Failed / Skipped / Total] 30 / 65 / 0 / 95:  10%|▉         | 96/1000 [46:35<7:18:44, 29.12s/it][Succeeded / Failed / Skipped / Total] 30 / 66 / 0 / 96:  10%|▉         | 96/1000 [46:35<7:18:44, 29.12s/it][Succeeded / Failed / Skipped / Total] 30 / 66 / 0 / 96:  10%|▉         | 97/1000 [47:52<7:25:42, 29.62s/it]Search for a single entry . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 96 ---------------------------------------------
Creates the embedded server . --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 97 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 67 / 0 / 97:  10%|▉         | 97/1000 [47:52<7:25:42, 29.62s/it][Succeeded / Failed / Skipped / Total] 30 / 67 / 0 / 97:  10%|▉         | 98/1000 [47:53<7:20:44, 29.32s/it][Succeeded / Failed / Skipped / Total] 30 / 68 / 0 / 98:  10%|▉         | 98/1000 [47:53<7:20:44, 29.32s/it][Succeeded / Failed / Skipped / Total] 30 / 68 / 0 / 98:  10%|▉         | 99/1000 [47:53<7:15:51, 29.02s/it][Succeeded / Failed / Skipped / Total] 30 / 69 / 0 / 99:  10%|▉         | 99/1000 [47:53<7:15:51, 29.02s/it][Succeeded / Failed / Skipped / Total] 30 / 69 / 0 / 99:  10%|█         | 100/1000 [48:30<7:16:37, 29.11s/it][Succeeded / Failed / Skipped / Total] 30 / 70 / 0 / 100:  10%|█         | 100/1000 [48:30<7:16:37, 29.11s/it][Succeeded / Failed / Skipped / Total] 30 / 70 / 0 / 100:  10%|█         | 101/1000 [49:05<7:16:57, 29.16s/it][Succeeded / Failed / Skipped / Total] 31 / 70 / 0 / 101:  10%|█         | 101/1000 [49:05<7:16:57, 29.16s/it][Succeeded / Failed / Skipped / Total] 31 / 70 / 0 / 101:  10%|█         | 102/1000 [49:26<7:15:13, 29.08s/it]Create a WhitelistedTypeResolverBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 98 ---------------------------------------------
Maps a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 99 ---------------------------------------------
Sets the login processing URL . --> [[[FAILED]]]

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 100 ---------------------------------------------
Get the token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 101 ---------------------------------------------
Check the content length of the response . --> arrhythmia arrhythmia --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[arrhythmia]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[girard]] = getBufferSize ( ) ; boolean requiresFlush = [[girard]] > 0 && this . contentWritten >= [[girard]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 71 / 0 / 102:  10%|█         | 102/1000 [49:26<7:15:13, 29.08s/it][Succeeded / Failed / Skipped / Total] 31 / 71 / 0 / 102:  10%|█         | 103/1000 [49:30<7:11:08, 28.84s/it][Succeeded / Failed / Skipped / Total] 32 / 71 / 0 / 103:  10%|█         | 103/1000 [49:30<7:11:08, 28.84s/it][Succeeded / Failed / Skipped / Total] 32 / 71 / 0 / 103:  10%|█         | 104/1000 [50:11<7:12:22, 28.95s/it][Succeeded / Failed / Skipped / Total] 33 / 71 / 0 / 104:  10%|█         | 104/1000 [50:11<7:12:22, 28.95s/it][Succeeded / Failed / Skipped / Total] 33 / 71 / 0 / 104:  10%|█         | 105/1000 [50:12<7:07:56, 28.69s/it][Succeeded / Failed / Skipped / Total] 33 / 72 / 0 / 105:  10%|█         | 105/1000 [50:12<7:07:56, 28.69s/it][Succeeded / Failed / Skipped / Total] 33 / 72 / 0 / 105:  11%|█         | 106/1000 [50:41<7:07:32, 28.69s/it][Succeeded / Failed / Skipped / Total] 34 / 72 / 0 / 106:  11%|█         | 106/1000 [50:41<7:07:32, 28.69s/it][Succeeded / Failed / Skipped / Total] 34 / 72 / 0 / 106:  11%|█         | 107/1000 [50:41<7:03:07, 28.43s/it][Succeeded / Failed / Skipped / Total] 34 / 73 / 0 / 107:  11%|█         | 107/1000 [50:41<7:03:07, 28.43s/it][Succeeded / Failed / Skipped / Total] 34 / 73 / 0 / 107:  11%|█         | 108/1000 [50:42<6:58:46, 28.17s/it][Succeeded / Failed / Skipped / Total] 34 / 74 / 0 / 108:  11%|█         | 108/1000 [50:42<6:58:46, 28.17s/it][Succeeded / Failed / Skipped / Total] 34 / 74 / 0 / 108:  11%|█         | 109/1000 [50:42<6:54:30, 27.91s/it]Checks the secure context token . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
Maps a password value to a string . --> islamabad is not a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[islamabad]] ( Object [[exhort]] ) { if ( ! ( [[exhort]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 104 ---------------------------------------------
Encodes the given cookie tokens into a base64 encoded string . --> Convert a supermassive string to a supermassive string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] [[cookieTokens]] ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String [[value]] = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[supermassive]] ( String [ ] [[dink]] ) { StringBuilder [[td]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[dink]] . length ; i ++ ) { try { [[td]] . append ( URLEncoder . encode ( [[dink]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[dink]] . length - 1 ) { [[td]] . append ( DELIMITER ) ; } } String [[precious]] = [[td]] . toString ( ) ; [[td]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[precious]] . getBytes ( ) ) ) ) ; while ( [[td]] . charAt ( [[td]] . length ( ) - 1 ) == ' ' ) { [[td]] . deleteCharAt ( [[td]] . length ( ) - 1 ) ; } return [[td]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 105 ---------------------------------------------
Creates a new cipher with the specified algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher newCipher ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher newCipher ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 106 ---------------------------------------------
Update authentication defaults . --> если объект --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[на]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 107 ---------------------------------------------
Gets the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 108 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 75 / 0 / 109:  11%|█         | 109/1000 [50:42<6:54:30, 27.91s/it][Succeeded / Failed / Skipped / Total] 34 / 75 / 0 / 109:  11%|█         | 110/1000 [50:42<6:50:19, 27.66s/it][Succeeded / Failed / Skipped / Total] 34 / 76 / 0 / 110:  11%|█         | 110/1000 [50:42<6:50:19, 27.66s/it][Succeeded / Failed / Skipped / Total] 34 / 76 / 0 / 110:  11%|█         | 111/1000 [50:43<6:46:12, 27.42s/it][Succeeded / Failed / Skipped / Total] 34 / 77 / 0 / 111:  11%|█         | 111/1000 [50:43<6:46:12, 27.42s/it][Succeeded / Failed / Skipped / Total] 34 / 77 / 0 / 111:  11%|█         | 112/1000 [50:43<6:42:10, 27.17s/it][Succeeded / Failed / Skipped / Total] 34 / 78 / 0 / 112:  11%|█         | 112/1000 [50:43<6:42:10, 27.17s/it][Succeeded / Failed / Skipped / Total] 34 / 78 / 0 / 112:  11%|█▏        | 113/1000 [50:43<6:38:13, 26.94s/it][Succeeded / Failed / Skipped / Total] 34 / 79 / 0 / 113:  11%|█▏        | 113/1000 [50:43<6:38:13, 26.94s/it][Succeeded / Failed / Skipped / Total] 34 / 79 / 0 / 113:  11%|█▏        | 114/1000 [51:43<6:42:01, 27.23s/it]Gets the principal from the SecurityContext . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 110 ---------------------------------------------
Invalidate the session and clear the context . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 111 ---------------------------------------------
Authenticate the given authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 112 ---------------------------------------------
Build the provider URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 113 ---------------------------------------------
Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 79 / 0 / 114:  11%|█▏        | 114/1000 [51:43<6:42:01, 27.23s/it][Succeeded / Failed / Skipped / Total] 35 / 79 / 0 / 114:  12%|█▏        | 115/1000 [52:12<6:41:43, 27.24s/it][Succeeded / Failed / Skipped / Total] 36 / 79 / 0 / 115:  12%|█▏        | 115/1000 [52:12<6:41:43, 27.24s/it][Succeeded / Failed / Skipped / Total] 36 / 79 / 0 / 115:  12%|█▏        | 116/1000 [52:38<6:41:06, 27.23s/it][Succeeded / Failed / Skipped / Total] 36 / 80 / 0 / 116:  12%|█▏        | 116/1000 [52:38<6:41:06, 27.23s/it][Succeeded / Failed / Skipped / Total] 36 / 80 / 0 / 116:  12%|█▏        | 117/1000 [52:43<6:37:51, 27.04s/it][Succeeded / Failed / Skipped / Total] 37 / 80 / 0 / 117:  12%|█▏        | 117/1000 [52:43<6:37:51, 27.04s/it][Succeeded / Failed / Skipped / Total] 37 / 80 / 0 / 117:  12%|█▏        | 118/1000 [52:54<6:35:29, 26.90s/it][Succeeded / Failed / Skipped / Total] 37 / 81 / 0 / 118:  12%|█▏        | 118/1000 [52:54<6:35:29, 26.90s/it][Succeeded / Failed / Skipped / Total] 37 / 81 / 0 / 118:  12%|█▏        | 119/1000 [53:25<6:35:29, 26.93s/it]Resolve an argument . --> Returns a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is a Mono that is --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[exchange]] ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[o]] = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? [[o]] : Mono . just ( [[adapter]] . fromPublisher ( [[o]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[athol]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[pooling]] ) { ReactiveAdapter [[fittings]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[ngai]] = Mono . justOrEmpty ( p ) ; return [[fittings]] == null ? [[ngai]] : Mono . just ( [[fittings]] . fromPublisher ( [[ngai]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 115 ---------------------------------------------
Update access defaults . --> symbolise if permitAll is true --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[symbolise]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 116 ---------------------------------------------
Checks if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 117 ---------------------------------------------
Override afterPropertiesSet . --> Override afterPropertiesSet to call super afterPropertiesSet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[fruitcake]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 118 ---------------------------------------------
Perform the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 81 / 0 / 119:  12%|█▏        | 119/1000 [53:25<6:35:29, 26.93s/it][Succeeded / Failed / Skipped / Total] 38 / 81 / 0 / 119:  12%|█▏        | 120/1000 [54:43<6:41:21, 27.37s/it][Succeeded / Failed / Skipped / Total] 38 / 82 / 0 / 120:  12%|█▏        | 120/1000 [54:43<6:41:21, 27.37s/it]Using /tmp/tfhub_modules to cache modules.
[Succeeded / Failed / Skipped / Total] 38 / 82 / 0 / 120:  12%|█▏        | 121/1000 [55:20<6:42:01, 27.44s/it][Succeeded / Failed / Skipped / Total] 39 / 82 / 0 / 121:  12%|█▏        | 121/1000 [55:20<6:42:01, 27.44s/it][Succeeded / Failed / Skipped / Total] 39 / 82 / 0 / 121:  12%|█▏        | 122/1000 [55:45<6:41:19, 27.43s/it][Succeeded / Failed / Skipped / Total] 39 / 83 / 0 / 122:  12%|█▏        | 122/1000 [55:45<6:41:19, 27.43s/it][Succeeded / Failed / Skipped / Total] 39 / 83 / 0 / 122:  12%|█▏        | 123/1000 [56:54<6:45:43, 27.76s/it][Succeeded / Failed / Skipped / Total] 39 / 84 / 0 / 123:  12%|█▏        | 123/1000 [56:54<6:45:43, 27.76s/it][Succeeded / Failed / Skipped / Total] 39 / 84 / 0 / 123:  12%|█▏        | 124/1000 [58:53<6:56:01, 28.49s/it]Adds the PKCE parameters . --> zira code challenge --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > [[additionalParameters]] ) { String [[codeVerifier]] = this . [[codeVerifierGenerator]] . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[zira]] ( Map < String , Object > [[specifics]] , Map < String , Object > [[trotting]] ) { String [[unsolvable]] = this . [[promises]] . generateKey ( ) ; [[specifics]] . put ( PkceParameterNames . CODE_VERIFIER , [[unsolvable]] ) ; try { String codeChallenge = createCodeChallenge ( [[unsolvable]] ) ; [[trotting]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[trotting]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[trotting]] . put ( PkceParameterNames . CODE_CHALLENGE , [[unsolvable]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 120 ---------------------------------------------
Extracts the remember me cookie from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 121 ---------------------------------------------
Gets the UserDetailsService . --> Czechoslovakia UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[czechoslovakia]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 85 / 0 / 124:  12%|█▏        | 124/1000 [58:53<6:56:01, 28.49s/it][Succeeded / Failed / Skipped / Total] 39 / 85 / 0 / 124:  12%|█▎        | 125/1000 [59:01<6:53:07, 28.33s/it][Succeeded / Failed / Skipped / Total] 39 / 86 / 0 / 125:  12%|█▎        | 125/1000 [59:01<6:53:07, 28.33s/it][Succeeded / Failed / Skipped / Total] 39 / 86 / 0 / 125:  13%|█▎        | 126/1000 [59:02<6:49:31, 28.11s/it][Succeeded / Failed / Skipped / Total] 40 / 86 / 0 / 126:  13%|█▎        | 126/1000 [59:02<6:49:31, 28.11s/it][Succeeded / Failed / Skipped / Total] 40 / 86 / 0 / 126:  13%|█▎        | 127/1000 [59:22<6:48:06, 28.05s/it][Succeeded / Failed / Skipped / Total] 40 / 87 / 0 / 127:  13%|█▎        | 127/1000 [59:22<6:48:06, 28.05s/it][Succeeded / Failed / Skipped / Total] 40 / 87 / 0 / 127:  13%|█▎        | 128/1000 [59:22<6:44:30, 27.83s/it][Succeeded / Failed / Skipped / Total] 40 / 88 / 0 / 128:  13%|█▎        | 128/1000 [59:22<6:44:30, 27.83s/it][Succeeded / Failed / Skipped / Total] 40 / 88 / 0 / 128:  13%|█▎        | 129/1000 [59:22<6:40:56, 27.62s/it][Succeeded / Failed / Skipped / Total] 40 / 89 / 0 / 129:  13%|█▎        | 129/1000 [59:22<6:40:56, 27.62s/it][Succeeded / Failed / Skipped / Total] 40 / 89 / 0 / 129:  13%|█▎        | 130/1000 [59:23<6:37:26, 27.41s/it][Succeeded / Failed / Skipped / Total] 40 / 90 / 0 / 130:  13%|█▎        | 130/1000 [59:23<6:37:26, 27.41s/it][Succeeded / Failed / Skipped / Total] 40 / 90 / 0 / 130:  13%|█▎        | 131/1000 [59:23<6:34:00, 27.20s/it][Succeeded / Failed / Skipped / Total] 40 / 91 / 0 / 131:  13%|█▎        | 131/1000 [59:23<6:34:00, 27.20s/it][Succeeded / Failed / Skipped / Total] 40 / 91 / 0 / 131:  13%|█▎        | 132/1000 [59:24<6:30:37, 27.00s/it]Service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 125 ---------------------------------------------
Check if authentication is required . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 126 ---------------------------------------------
URL - encode a string using UTF - 8 encoding . --> Returns a string representation of the usefulness . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[meathead]] ( String [[usefulness]] ) { try { return URLEncoder . encode ( [[usefulness]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 127 ---------------------------------------------
Returns the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 128 ---------------------------------------------
Load user details by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 129 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 130 ---------------------------------------------
Concatenates the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 131 ---------------------------------------------
Creates a sub - array of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 132 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 92 / 0 / 132:  13%|█▎        | 132/1000 [59:24<6:30:37, 27.00s/it][Succeeded / Failed / Skipped / Total] 40 / 92 / 0 / 132:  13%|█▎        | 133/1000 [59:24<6:27:17, 26.80s/it][Succeeded / Failed / Skipped / Total] 40 / 93 / 0 / 133:  13%|█▎        | 133/1000 [59:24<6:27:17, 26.80s/it][Succeeded / Failed / Skipped / Total] 40 / 93 / 0 / 133:  13%|█▎        | 134/1000 [59:25<6:24:00, 26.61s/it][Succeeded / Failed / Skipped / Total] 40 / 94 / 0 / 134:  13%|█▎        | 134/1000 [59:25<6:24:00, 26.61s/it][Succeeded / Failed / Skipped / Total] 40 / 94 / 0 / 134:  14%|█▎        | 135/1000 [59:25<6:20:45, 26.41s/it][Succeeded / Failed / Skipped / Total] 40 / 95 / 0 / 135:  14%|█▎        | 135/1000 [59:25<6:20:45, 26.41s/it][Succeeded / Failed / Skipped / Total] 40 / 95 / 0 / 135:  14%|█▎        | 136/1000 [59:25<6:17:34, 26.22s/it][Succeeded / Failed / Skipped / Total] 40 / 96 / 0 / 136:  14%|█▎        | 136/1000 [59:25<6:17:34, 26.22s/it][Succeeded / Failed / Skipped / Total] 40 / 96 / 0 / 136:  14%|█▎        | 137/1000 [1:00:36<6:21:48, 26.55s/it][Succeeded / Failed / Skipped / Total] 40 / 97 / 0 / 137:  14%|█▎        | 137/1000 [1:00:36<6:21:48, 26.55s/it][Succeeded / Failed / Skipped / Total] 40 / 97 / 0 / 137:  14%|█▍        | 138/1000 [1:01:04<6:21:26, 26.55s/it][Succeeded / Failed / Skipped / Total] 40 / 98 / 0 / 138:  14%|█▍        | 138/1000 [1:01:04<6:21:26, 26.55s/it][Succeeded / Failed / Skipped / Total] 40 / 98 / 0 / 138:  14%|█▍        | 139/1000 [1:01:33<6:21:17, 26.57s/it]Gets the list of grants for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 133 ---------------------------------------------
Pre - processes the attributes2grantedAuthoritiesMap . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 134 ---------------------------------------------
Gets the collection of grants for the given value . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 135 ---------------------------------------------
Adds the given value to the given collection of grants . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - authenticated J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 137 ---------------------------------------------
Check if the request is a proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 138 ---------------------------------------------
Checks if the request is a proxy receptor request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
[Succeeded / Failed / Skipped / Total] 41 / 98 / 0 / 139:  14%|█▍        | 139/1000 [1:01:33<6:21:17, 26.57s/it][Succeeded / Failed / Skipped / Total] 41 / 98 / 0 / 139:  14%|█▍        | 140/1000 [1:01:34<6:18:16, 26.39s/it][Succeeded / Failed / Skipped / Total] 41 / 99 / 0 / 140:  14%|█▍        | 140/1000 [1:01:34<6:18:16, 26.39s/it][Succeeded / Failed / Skipped / Total] 41 / 99 / 0 / 140:  14%|█▍        | 141/1000 [1:02:11<6:18:55, 26.47s/it][Succeeded / Failed / Skipped / Total] 41 / 100 / 0 / 141:  14%|█▍        | 141/1000 [1:02:11<6:18:55, 26.47s/it][Succeeded / Failed / Skipped / Total] 41 / 100 / 0 / 141:  14%|█▍        | 142/1000 [1:02:49<6:19:36, 26.55s/it][Succeeded / Failed / Skipped / Total] 42 / 100 / 0 / 142:  14%|█▍        | 142/1000 [1:02:49<6:19:36, 26.55s/it][Succeeded / Failed / Skipped / Total] 42 / 100 / 0 / 142:  14%|█▍        | 143/1000 [1:03:10<6:18:33, 26.50s/it][Succeeded / Failed / Skipped / Total] 43 / 100 / 0 / 143:  14%|█▍        | 143/1000 [1:03:10<6:18:33, 26.50s/it][Succeeded / Failed / Skipped / Total] 43 / 100 / 0 / 143:  14%|█▍        | 144/1000 [1:03:10<6:15:30, 26.32s/it][Succeeded / Failed / Skipped / Total] 44 / 100 / 0 / 144:  14%|█▍        | 144/1000 [1:03:10<6:15:30, 26.32s/it][Succeeded / Failed / Skipped / Total] 44 / 100 / 0 / 144:  14%|█▍        | 145/1000 [1:03:22<6:13:39, 26.22s/it]--------------------------------------------- Result 139 ---------------------------------------------
Invoke the interceptor . --> Invoke the Palmieri on a join point --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[claiming]] ( JoinPoint jp , AspectJCallback [[palmieri]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[generate]] ; try { [[generate]] = [[palmieri]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[generate]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 140 ---------------------------------------------
Creates a method security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 141 ---------------------------------------------
Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 142 ---------------------------------------------
Returns an array of roles that have any of the given roles . --> abidjan to abidjan --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[abidjan]] ( String ... [[traits]] ) { for ( int i = 0 ; i < [[traits]] . length ; i ++ ) { [[traits]] [ i ] = "ROLE_" + [[traits]] [ i ] ; } return [[traits]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 143 ---------------------------------------------
Write the secured ui suffix to the output stream . --> Hacky hacky hacky hacky --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[hacky]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 144 ---------------------------------------------
Build a https redirect url for the given request . --> jinnah ejects --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( [[request]] ) ; Integer [[httpsPort]] = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( [[httpsPort]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( [[httpsPort]] . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[jacoby]] ( HttpServletRequest [[urge]] ) throws IOException , ServletException { int [[jinnah]] = portResolver . getServerPort ( [[urge]] ) ; Integer [[ejects]] = portMapper . lookupHttpsPort ( Integer . valueOf ( [[jinnah]] ) ) ; if ( [[ejects]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[urge]] . getServerName ( ) ) ; urlBuilder . setPort ( [[ejects]] . intValue ( ) ) ; urlBuilder . setContextPath ( [[urge]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[urge]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[urge]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[urge]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 100 / 0 / 145:  14%|█▍        | 145/1000 [1:03:22<6:13:39, 26.22s/it][Succeeded / Failed / Skipped / Total] 45 / 100 / 0 / 145:  15%|█▍        | 146/1000 [1:03:26<6:11:08, 26.08s/it][Succeeded / Failed / Skipped / Total] 45 / 101 / 0 / 146:  15%|█▍        | 146/1000 [1:03:26<6:11:08, 26.08s/it][Succeeded / Failed / Skipped / Total] 45 / 101 / 0 / 146:  15%|█▍        | 147/1000 [1:03:27<6:08:16, 25.90s/it][Succeeded / Failed / Skipped / Total] 46 / 101 / 0 / 147:  15%|█▍        | 147/1000 [1:03:27<6:08:16, 25.90s/it][Succeeded / Failed / Skipped / Total] 46 / 101 / 0 / 147:  15%|█▍        | 148/1000 [1:03:49<6:07:23, 25.87s/it][Succeeded / Failed / Skipped / Total] 47 / 101 / 0 / 148:  15%|█▍        | 148/1000 [1:03:49<6:07:23, 25.87s/it][Succeeded / Failed / Skipped / Total] 47 / 101 / 0 / 148:  15%|█▍        | 149/1000 [1:03:50<6:04:38, 25.71s/it][Succeeded / Failed / Skipped / Total] 48 / 101 / 0 / 149:  15%|█▍        | 149/1000 [1:03:50<6:04:38, 25.71s/it][Succeeded / Failed / Skipped / Total] 48 / 101 / 0 / 149:  15%|█▌        | 150/1000 [1:04:08<6:03:27, 25.66s/it][Succeeded / Failed / Skipped / Total] 49 / 101 / 0 / 150:  15%|█▌        | 150/1000 [1:04:08<6:03:27, 25.66s/it][Succeeded / Failed / Skipped / Total] 49 / 101 / 0 / 150:  15%|█▌        | 151/1000 [1:04:42<6:03:49, 25.71s/it][Succeeded / Failed / Skipped / Total] 49 / 102 / 0 / 151:  15%|█▌        | 151/1000 [1:04:42<6:03:49, 25.71s/it][Succeeded / Failed / Skipped / Total] 49 / 102 / 0 / 151:  15%|█▌        | 152/1000 [1:04:42<6:01:01, 25.54s/it][Succeeded / Failed / Skipped / Total] 49 / 102 / 1 / 152:  15%|█▌        | 152/1000 [1:04:42<6:01:01, 25.54s/it][Succeeded / Failed / Skipped / Total] 49 / 102 / 1 / 152:  15%|█▌        | 153/1000 [1:04:43<5:58:16, 25.38s/it][Succeeded / Failed / Skipped / Total] 49 / 103 / 1 / 153:  15%|█▌        | 153/1000 [1:04:43<5:58:16, 25.38s/it][Succeeded / Failed / Skipped / Total] 49 / 103 / 1 / 153:  15%|█▌        | 154/1000 [1:04:43<5:55:33, 25.22s/it]Process the auto login cookie . --> Pall sébastien --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse [[response]] ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String [[presentedSeries]] = [[cookieTokens]] [ 0 ] ; final String [[presentedToken]] = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[pall]] ( String [ ] [[realistic]] , HttpServletRequest request , HttpServletResponse [[react]] ) { if ( [[realistic]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[realistic]] ) + "'" ) ; } final String [[drawer]] = [[realistic]] [ 0 ] ; final String [[sébastien]] = [[realistic]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[drawer]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 146 ---------------------------------------------
Gets the JWKSet . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 147 ---------------------------------------------
Display the public index of the user --> Get a random octagon --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[spitz]] ( ) { Contact [[octagon]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[octagon]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 148 ---------------------------------------------
Spring security filter chain . --> Methode d ajout des filters . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean [[hasConfigurers]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[hasConfigurers]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[republic]] ( ) throws Exception { boolean [[blasé]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[blasé]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 149 ---------------------------------------------
Decodes a JWT . --> Decodes a nominal token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[nominal]] ) throws JwtException { JWT jwt = parse ( [[nominal]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[nominal]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 150 ---------------------------------------------
Sets the exit user URL . --> peruvian katie --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[peruvian]] ( String [[katie]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[katie]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[katie]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
Returns the shared object for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 152 ---------------------------------------------
Convert a JWT to a collection of GrantedAuthorities . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Generates a new CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
[Succeeded / Failed / Skipped / Total] 49 / 104 / 1 / 154:  15%|█▌        | 154/1000 [1:04:43<5:55:33, 25.22s/it][Succeeded / Failed / Skipped / Total] 49 / 104 / 1 / 154:  16%|█▌        | 155/1000 [1:04:43<5:52:53, 25.06s/it][Succeeded / Failed / Skipped / Total] 49 / 105 / 1 / 155:  16%|█▌        | 155/1000 [1:04:43<5:52:53, 25.06s/it][Succeeded / Failed / Skipped / Total] 49 / 105 / 1 / 155:  16%|█▌        | 156/1000 [1:04:44<5:50:14, 24.90s/it][Succeeded / Failed / Skipped / Total] 49 / 106 / 1 / 156:  16%|█▌        | 156/1000 [1:04:44<5:50:14, 24.90s/it][Succeeded / Failed / Skipped / Total] 49 / 106 / 1 / 156:  16%|█▌        | 157/1000 [1:04:44<5:47:37, 24.74s/it][Succeeded / Failed / Skipped / Total] 49 / 107 / 1 / 157:  16%|█▌        | 157/1000 [1:04:44<5:47:37, 24.74s/it][Succeeded / Failed / Skipped / Total] 49 / 107 / 1 / 157:  16%|█▌        | 158/1000 [1:04:45<5:45:03, 24.59s/it][Succeeded / Failed / Skipped / Total] 49 / 108 / 1 / 158:  16%|█▌        | 158/1000 [1:04:45<5:45:03, 24.59s/it][Succeeded / Failed / Skipped / Total] 49 / 108 / 1 / 158:  16%|█▌        | 159/1000 [1:04:45<5:42:31, 24.44s/it]--------------------------------------------- Result 154 ---------------------------------------------
Display admin page --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 155 ---------------------------------------------
Display the add permission page for a contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 156 ---------------------------------------------
Add a permission to a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 157 ---------------------------------------------
Delete a permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 158 ---------------------------------------------
Returns the role with the default prefix if the prefix is null or empty . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
[Succeeded / Failed / Skipped / Total] 49 / 109 / 1 / 159:  16%|█▌        | 159/1000 [1:04:45<5:42:31, 24.44s/it][Succeeded / Failed / Skipped / Total] 49 / 109 / 1 / 159:  16%|█▌        | 160/1000 [1:04:46<5:40:01, 24.29s/it][Succeeded / Failed / Skipped / Total] 49 / 110 / 1 / 160:  16%|█▌        | 160/1000 [1:04:46<5:40:01, 24.29s/it][Succeeded / Failed / Skipped / Total] 49 / 110 / 1 / 160:  16%|█▌        | 161/1000 [1:04:46<5:37:32, 24.14s/it][Succeeded / Failed / Skipped / Total] 49 / 111 / 1 / 161:  16%|█▌        | 161/1000 [1:04:46<5:37:32, 24.14s/it][Succeeded / Failed / Skipped / Total] 49 / 111 / 1 / 161:  16%|█▌        | 162/1000 [1:04:46<5:35:05, 23.99s/it][Succeeded / Failed / Skipped / Total] 49 / 112 / 1 / 162:  16%|█▌        | 162/1000 [1:04:46<5:35:05, 23.99s/it][Succeeded / Failed / Skipped / Total] 49 / 112 / 1 / 162:  16%|█▋        | 163/1000 [1:04:47<5:32:44, 23.85s/it][Succeeded / Failed / Skipped / Total] 49 / 113 / 1 / 163:  16%|█▋        | 163/1000 [1:04:47<5:32:44, 23.85s/it][Succeeded / Failed / Skipped / Total] 49 / 113 / 1 / 163:  16%|█▋        | 164/1000 [1:05:27<5:33:42, 23.95s/it][Succeeded / Failed / Skipped / Total] 50 / 113 / 1 / 164:  16%|█▋        | 164/1000 [1:05:27<5:33:42, 23.95s/it][Succeeded / Failed / Skipped / Total] 50 / 113 / 1 / 164:  16%|█▋        | 165/1000 [1:06:18<5:35:32, 24.11s/it][Succeeded / Failed / Skipped / Total] 51 / 113 / 1 / 165:  16%|█▋        | 165/1000 [1:06:18<5:35:32, 24.11s/it][Succeeded / Failed / Skipped / Total] 51 / 113 / 1 / 165:  17%|█▋        | 166/1000 [1:06:22<5:33:26, 23.99s/it][Succeeded / Failed / Skipped / Total] 52 / 113 / 1 / 166:  17%|█▋        | 166/1000 [1:06:22<5:33:26, 23.99s/it][Succeeded / Failed / Skipped / Total] 52 / 113 / 1 / 166:  17%|█▋        | 167/1000 [1:08:20<5:40:53, 24.55s/it]--------------------------------------------- Result 159 ---------------------------------------------
Creates a user details resource factory bean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 160 ---------------------------------------------
Returns the values of an attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 161 ---------------------------------------------
Gets the first attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public String getFirstAttributeValue ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String getFirstAttributeValue ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 162 ---------------------------------------------
Encodes a CharSequence to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 163 ---------------------------------------------
Get the webSphere groups based Granted Authorities for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 164 ---------------------------------------------
Returns the role name for the given role . --> Breadfruit breadfruit tasks --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[breadfruit]] ( String [[tasks]] ) { Assert . isTrue ( ! [[tasks]] . startsWith ( "ROLE_" ) , ( ) -> [[tasks]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[tasks]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 165 ---------------------------------------------
Attempt to exit a user . --> Khaki khaki --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[khaki]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 166 ---------------------------------------------
Add a new contact . --> Method to add hustlers --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult [[result]] ) { validator . validate ( form , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[hustlers]] ( WebContact form , BindingResult [[fruit]] ) { validator . validate ( form , [[fruit]] ) ; if ( [[fruit]] . hasErrors ( ) ) { return "add" ; } Contact [[communicating]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[communicating]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 114 / 1 / 167:  17%|█▋        | 167/1000 [1:08:20<5:40:53, 24.55s/it][Succeeded / Failed / Skipped / Total] 52 / 114 / 1 / 167:  17%|█▋        | 168/1000 [1:08:34<5:39:35, 24.49s/it][Succeeded / Failed / Skipped / Total] 53 / 114 / 1 / 168:  17%|█▋        | 168/1000 [1:08:34<5:39:35, 24.49s/it][Succeeded / Failed / Skipped / Total] 53 / 114 / 1 / 168:  17%|█▋        | 169/1000 [1:08:34<5:37:12, 24.35s/it][Succeeded / Failed / Skipped / Total] 53 / 115 / 1 / 169:  17%|█▋        | 169/1000 [1:08:34<5:37:12, 24.35s/it][Succeeded / Failed / Skipped / Total] 53 / 115 / 1 / 169:  17%|█▋        | 170/1000 [1:08:48<5:35:57, 24.29s/it][Succeeded / Failed / Skipped / Total] 54 / 115 / 1 / 170:  17%|█▋        | 170/1000 [1:08:48<5:35:57, 24.29s/it][Succeeded / Failed / Skipped / Total] 54 / 115 / 1 / 170:  17%|█▋        | 171/1000 [1:08:53<5:33:57, 24.17s/it][Succeeded / Failed / Skipped / Total] 55 / 115 / 1 / 171:  17%|█▋        | 171/1000 [1:08:53<5:33:57, 24.17s/it][Succeeded / Failed / Skipped / Total] 55 / 115 / 1 / 171:  17%|█▋        | 172/1000 [1:08:54<5:31:41, 24.04s/it][Succeeded / Failed / Skipped / Total] 55 / 116 / 1 / 172:  17%|█▋        | 172/1000 [1:08:54<5:31:41, 24.04s/it][Succeeded / Failed / Skipped / Total] 55 / 116 / 1 / 172:  17%|█▋        | 173/1000 [1:08:54<5:29:24, 23.90s/it]Create a persistent login for the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 168 ---------------------------------------------
Authorize using url check . --> zagreb zagreb --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[zagreb]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 169 ---------------------------------------------
Returns true if the access expression is evaluated as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 170 ---------------------------------------------
Returns true if the method name matches the mapped method name . --> plunge a nomura haslam --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[plunge]] ( String [[nomura]] , String [[haslam]] ) { return ( [[haslam]] . endsWith ( "*" ) && [[nomura]] . startsWith ( [[haslam]] . substring ( 0 , [[haslam]] . length ( ) - 1 ) ) ) || ( [[haslam]] . startsWith ( "*" ) && [[nomura]] . endsWith ( [[haslam]] . substring ( 1 , [[haslam]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 171 ---------------------------------------------
Handles a bind exception . --> Telefono error handler --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String [[username]] , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[telefono]] ( String [[rems]] , String [[customers]] , Throwable [[motif]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[rems]] + ": " + [[motif]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 172 ---------------------------------------------
Decodes a byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 117 / 1 / 173:  17%|█▋        | 173/1000 [1:08:54<5:29:24, 23.90s/it][Succeeded / Failed / Skipped / Total] 55 / 117 / 1 / 173:  17%|█▋        | 174/1000 [1:08:54<5:27:08, 23.76s/it][Succeeded / Failed / Skipped / Total] 55 / 118 / 1 / 174:  17%|█▋        | 174/1000 [1:08:54<5:27:08, 23.76s/it][Succeeded / Failed / Skipped / Total] 55 / 118 / 1 / 174:  18%|█▊        | 175/1000 [1:08:55<5:24:53, 23.63s/it][Succeeded / Failed / Skipped / Total] 55 / 119 / 1 / 175:  18%|█▊        | 175/1000 [1:08:55<5:24:53, 23.63s/it][Succeeded / Failed / Skipped / Total] 55 / 119 / 1 / 175:  18%|█▊        | 176/1000 [1:08:55<5:22:40, 23.50s/it][Succeeded / Failed / Skipped / Total] 55 / 120 / 1 / 176:  18%|█▊        | 176/1000 [1:08:55<5:22:40, 23.50s/it][Succeeded / Failed / Skipped / Total] 55 / 120 / 1 / 176:  18%|█▊        | 177/1000 [1:08:55<5:20:29, 23.37s/it][Succeeded / Failed / Skipped / Total] 55 / 121 / 1 / 177:  18%|█▊        | 177/1000 [1:08:55<5:20:29, 23.37s/it][Succeeded / Failed / Skipped / Total] 55 / 121 / 1 / 177:  18%|█▊        | 178/1000 [1:08:56<5:18:20, 23.24s/it][Succeeded / Failed / Skipped / Total] 55 / 122 / 1 / 178:  18%|█▊        | 178/1000 [1:08:56<5:18:20, 23.24s/it][Succeeded / Failed / Skipped / Total] 55 / 122 / 1 / 178:  18%|█▊        | 179/1000 [1:09:07<5:17:03, 23.17s/it][Succeeded / Failed / Skipped / Total] 56 / 122 / 1 / 179:  18%|█▊        | 179/1000 [1:09:07<5:17:03, 23.17s/it][Succeeded / Failed / Skipped / Total] 56 / 122 / 1 / 179:  18%|█▊        | 180/1000 [1:09:07<5:14:55, 23.04s/it]Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 174 ---------------------------------------------
Gets a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 175 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 176 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 177 ---------------------------------------------
Extract the SHA prefix from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 178 ---------------------------------------------
The pre - authenticated entry point is called . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 179 ---------------------------------------------
Check for duplicate filters . --> Debilitate duplicate filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[debilitating]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 123 / 1 / 180:  18%|█▊        | 180/1000 [1:09:07<5:14:55, 23.04s/it][Succeeded / Failed / Skipped / Total] 56 / 123 / 1 / 180:  18%|█▊        | 181/1000 [1:09:08<5:12:50, 22.92s/it][Succeeded / Failed / Skipped / Total] 56 / 124 / 1 / 181:  18%|█▊        | 181/1000 [1:09:08<5:12:50, 22.92s/it][Succeeded / Failed / Skipped / Total] 56 / 124 / 1 / 181:  18%|█▊        | 182/1000 [1:09:08<5:10:46, 22.79s/it][Succeeded / Failed / Skipped / Total] 56 / 125 / 1 / 182:  18%|█▊        | 182/1000 [1:09:08<5:10:46, 22.80s/it][Succeeded / Failed / Skipped / Total] 56 / 125 / 1 / 182:  18%|█▊        | 183/1000 [1:09:09<5:08:43, 22.67s/it][Succeeded / Failed / Skipped / Total] 56 / 126 / 1 / 183:  18%|█▊        | 183/1000 [1:09:09<5:08:43, 22.67s/it][Succeeded / Failed / Skipped / Total] 56 / 126 / 1 / 183:  18%|█▊        | 184/1000 [1:09:09<5:06:42, 22.55s/it][Succeeded / Failed / Skipped / Total] 56 / 127 / 1 / 184:  18%|█▊        | 184/1000 [1:09:09<5:06:42, 22.55s/it][Succeeded / Failed / Skipped / Total] 56 / 127 / 1 / 184:  18%|█▊        | 185/1000 [1:09:09<5:04:42, 22.43s/it][Succeeded / Failed / Skipped / Total] 56 / 128 / 1 / 185:  18%|█▊        | 185/1000 [1:09:09<5:04:42, 22.43s/it][Succeeded / Failed / Skipped / Total] 56 / 128 / 1 / 185:  19%|█▊        | 186/1000 [1:09:10<5:02:43, 22.31s/it]Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 181 ---------------------------------------------
Extracts the cause of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 182 ---------------------------------------------
Register an access manager . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 183 ---------------------------------------------
Convert a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 184 ---------------------------------------------
Checks if two byte arrays are equal . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 185 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 129 / 1 / 186:  19%|█▊        | 186/1000 [1:09:10<5:02:43, 22.31s/it][Succeeded / Failed / Skipped / Total] 56 / 129 / 1 / 186:  19%|█▊        | 187/1000 [1:09:10<5:00:45, 22.20s/it][Succeeded / Failed / Skipped / Total] 56 / 130 / 1 / 187:  19%|█▊        | 187/1000 [1:09:10<5:00:45, 22.20s/it][Succeeded / Failed / Skipped / Total] 56 / 130 / 1 / 187:  19%|█▉        | 188/1000 [1:09:11<4:58:49, 22.08s/it][Succeeded / Failed / Skipped / Total] 56 / 131 / 1 / 188:  19%|█▉        | 188/1000 [1:09:11<4:58:49, 22.08s/it][Succeeded / Failed / Skipped / Total] 56 / 131 / 1 / 188:  19%|█▉        | 189/1000 [1:09:11<4:56:53, 21.97s/it][Succeeded / Failed / Skipped / Total] 56 / 132 / 1 / 189:  19%|█▉        | 189/1000 [1:09:11<4:56:53, 21.97s/it][Succeeded / Failed / Skipped / Total] 56 / 132 / 1 / 189:  19%|█▉        | 190/1000 [1:09:11<4:54:59, 21.85s/it][Succeeded / Failed / Skipped / Total] 56 / 133 / 1 / 190:  19%|█▉        | 190/1000 [1:09:11<4:54:59, 21.85s/it][Succeeded / Failed / Skipped / Total] 56 / 133 / 1 / 190:  19%|█▉        | 191/1000 [1:09:12<4:53:07, 21.74s/it][Succeeded / Failed / Skipped / Total] 56 / 134 / 1 / 191:  19%|█▉        | 191/1000 [1:09:12<4:53:07, 21.74s/it][Succeeded / Failed / Skipped / Total] 56 / 134 / 1 / 191:  19%|█▉        | 192/1000 [1:09:12<4:51:15, 21.63s/it]Sets the function to use when resolving hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 187 ---------------------------------------------
Build the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 188 ---------------------------------------------
Returns true if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 189 ---------------------------------------------
Returns an attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 190 ---------------------------------------------
Convert a string identifier to a class identifier . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 191 ---------------------------------------------
Creates the entries for the given ACL . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 135 / 1 / 192:  19%|█▉        | 192/1000 [1:09:12<4:51:15, 21.63s/it][Succeeded / Failed / Skipped / Total] 56 / 135 / 1 / 192:  19%|█▉        | 193/1000 [1:09:12<4:49:24, 21.52s/it][Succeeded / Failed / Skipped / Total] 56 / 136 / 1 / 193:  19%|█▉        | 193/1000 [1:09:12<4:49:24, 21.52s/it][Succeeded / Failed / Skipped / Total] 56 / 136 / 1 / 193:  19%|█▉        | 194/1000 [1:09:13<4:47:34, 21.41s/it][Succeeded / Failed / Skipped / Total] 56 / 137 / 1 / 194:  19%|█▉        | 194/1000 [1:09:13<4:47:34, 21.41s/it][Succeeded / Failed / Skipped / Total] 56 / 137 / 1 / 194:  20%|█▉        | 195/1000 [1:09:13<4:45:47, 21.30s/it][Succeeded / Failed / Skipped / Total] 56 / 138 / 1 / 195:  20%|█▉        | 195/1000 [1:09:13<4:45:47, 21.30s/it][Succeeded / Failed / Skipped / Total] 56 / 138 / 1 / 195:  20%|█▉        | 196/1000 [1:09:19<4:44:20, 21.22s/it][Succeeded / Failed / Skipped / Total] 57 / 138 / 1 / 196:  20%|█▉        | 196/1000 [1:09:19<4:44:20, 21.22s/it][Succeeded / Failed / Skipped / Total] 57 / 138 / 1 / 196:  20%|█▉        | 197/1000 [1:09:19<4:42:34, 21.11s/it][Succeeded / Failed / Skipped / Total] 57 / 139 / 1 / 197:  20%|█▉        | 197/1000 [1:09:19<4:42:34, 21.11s/it][Succeeded / Failed / Skipped / Total] 57 / 139 / 1 / 197:  20%|█▉        | 198/1000 [1:09:20<4:40:50, 21.01s/it][Succeeded / Failed / Skipped / Total] 57 / 140 / 1 / 198:  20%|█▉        | 198/1000 [1:09:20<4:40:50, 21.01s/it][Succeeded / Failed / Skipped / Total] 57 / 140 / 1 / 198:  20%|█▉        | 199/1000 [1:09:20<4:39:06, 20.91s/it]Create or update an object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 193 ---------------------------------------------
Update the ObjectIdentity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 194 ---------------------------------------------
Save the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 195 ---------------------------------------------
Returns a server web exchange matcher for the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 196 ---------------------------------------------
Matches any exchange . --> Returns an instance of ServerWebExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[ek]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Returns a new HexEncodingTextEncryptor that encrypts the given password using the given salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 198 ---------------------------------------------
Creates a text encryptor for the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 141 / 1 / 199:  20%|█▉        | 199/1000 [1:09:20<4:39:06, 20.91s/it][Succeeded / Failed / Skipped / Total] 57 / 141 / 1 / 199:  20%|██        | 200/1000 [1:09:20<4:37:23, 20.80s/it][Succeeded / Failed / Skipped / Total] 57 / 142 / 1 / 200:  20%|██        | 200/1000 [1:09:20<4:37:23, 20.80s/it][Succeeded / Failed / Skipped / Total] 57 / 142 / 1 / 200:  20%|██        | 201/1000 [1:09:21<4:35:41, 20.70s/it][Succeeded / Failed / Skipped / Total] 57 / 143 / 1 / 201:  20%|██        | 201/1000 [1:09:21<4:35:41, 20.70s/it][Succeeded / Failed / Skipped / Total] 57 / 143 / 1 / 201:  20%|██        | 202/1000 [1:09:21<4:34:00, 20.60s/it][Succeeded / Failed / Skipped / Total] 57 / 144 / 1 / 202:  20%|██        | 202/1000 [1:09:21<4:34:00, 20.60s/it][Succeeded / Failed / Skipped / Total] 57 / 144 / 1 / 202:  20%|██        | 203/1000 [1:09:21<4:32:20, 20.50s/it][Succeeded / Failed / Skipped / Total] 57 / 145 / 1 / 203:  20%|██        | 203/1000 [1:09:21<4:32:20, 20.50s/it][Succeeded / Failed / Skipped / Total] 57 / 145 / 1 / 203:  20%|██        | 204/1000 [1:09:22<4:30:41, 20.40s/it][Succeeded / Failed / Skipped / Total] 57 / 146 / 1 / 204:  20%|██        | 204/1000 [1:09:22<4:30:41, 20.40s/it][Succeeded / Failed / Skipped / Total] 57 / 146 / 1 / 204:  20%|██        | 205/1000 [1:09:22<4:29:03, 20.31s/it][Succeeded / Failed / Skipped / Total] 57 / 147 / 1 / 205:  20%|██        | 205/1000 [1:09:22<4:29:03, 20.31s/it][Succeeded / Failed / Skipped / Total] 57 / 147 / 1 / 205:  21%|██        | 206/1000 [1:09:28<4:27:47, 20.24s/it]Queryable text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 200 ---------------------------------------------
Write the headers to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 201 ---------------------------------------------
Determine the target URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 202 ---------------------------------------------
Determine the target url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 203 ---------------------------------------------
Sets the target url parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 204 ---------------------------------------------
Returns the directory with the immediate parent populated . --> [[[FAILED]]]

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 205 ---------------------------------------------
Build a DistinguishedName for the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 206 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 147 / 1 / 206:  21%|██        | 206/1000 [1:09:28<4:27:48, 20.24s/it][Succeeded / Failed / Skipped / Total] 58 / 147 / 1 / 206:  21%|██        | 207/1000 [1:09:29<4:26:11, 20.14s/it][Succeeded / Failed / Skipped / Total] 58 / 148 / 1 / 207:  21%|██        | 207/1000 [1:09:29<4:26:11, 20.14s/it][Succeeded / Failed / Skipped / Total] 58 / 148 / 1 / 207:  21%|██        | 208/1000 [1:10:03<4:26:45, 20.21s/it][Succeeded / Failed / Skipped / Total] 59 / 148 / 1 / 208:  21%|██        | 208/1000 [1:10:03<4:26:45, 20.21s/it][Succeeded / Failed / Skipped / Total] 59 / 148 / 1 / 208:  21%|██        | 209/1000 [1:10:06<4:25:20, 20.13s/it][Succeeded / Failed / Skipped / Total] 60 / 148 / 1 / 209:  21%|██        | 209/1000 [1:10:06<4:25:20, 20.13s/it][Succeeded / Failed / Skipped / Total] 60 / 148 / 1 / 209:  21%|██        | 210/1000 [1:10:09<4:23:55, 20.05s/it][Succeeded / Failed / Skipped / Total] 61 / 148 / 1 / 210:  21%|██        | 210/1000 [1:10:09<4:23:55, 20.05s/it][Succeeded / Failed / Skipped / Total] 61 / 148 / 1 / 210:  21%|██        | 211/1000 [1:10:53<4:25:06, 20.16s/it][Succeeded / Failed / Skipped / Total] 61 / 149 / 1 / 211:  21%|██        | 211/1000 [1:10:53<4:25:06, 20.16s/it][Succeeded / Failed / Skipped / Total] 61 / 149 / 1 / 211:  21%|██        | 212/1000 [1:11:08<4:24:26, 20.14s/it]Create shared objects . --> Returns a map of barnabas to be used for conditional authentication . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[conditional]] ( ) { Map < Class < ? extends Object > , Object > [[barnabas]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[barnabas]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[barnabas]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[barnabas]] . put ( ApplicationContext . class , context ) ; [[barnabas]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[barnabas]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[barnabas]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 207 ---------------------------------------------
Sets the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 208 ---------------------------------------------
Configure any request . --> Sets the specialties to Genuinely --> Socre: 1.0

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[specialties]] , "Can't configure anyRequest after itself" ) ; C [[inquired]] = requestMatchers ( ANY_REQUEST ) ; this . [[specialties]] = "[[Genuinely]]" == "[[Genuinely]]" ; return [[inquired]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 209 ---------------------------------------------
Internal parse date . --> Get the statistic from a prized string --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < [[formats]] . length ) ; [[i]] ++ ) { try { [[date]] = [[formats]] [ [[i]] ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[statistic]] ( String [[prized]] , DateFormat [ ] [[manner]] ) { Date [[scheduling]] = null ; for ( int [[know]] = 0 ; ( [[scheduling]] == null ) && ( [[know]] < [[manner]] . length ) ; [[know]] ++ ) { try { [[scheduling]] = [[manner]] [ [[know]] ] . parse ( [[prized]] ) ; } catch ( ParseException ignored ) { } } if ( [[scheduling]] == null ) { return null ; } return new Long ( [[scheduling]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 210 ---------------------------------------------
Update the cache with the given key and value --> Add a value to the inconspicuously map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object [[key]] , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[amateurs]] ( HashMap [[inconspicuously]] , Object [[significance]] , Object value ) { if ( value == null ) { return ; } if ( [[inconspicuously]] . size ( ) > 1000 ) { [[inconspicuously]] . clear ( ) ; } [[inconspicuously]] . put ( [[significance]] , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 211 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 150 / 1 / 212:  21%|██        | 212/1000 [1:11:08<4:24:26, 20.14s/it][Succeeded / Failed / Skipped / Total] 61 / 150 / 1 / 212:  21%|██▏       | 213/1000 [1:11:27<4:24:02, 20.13s/it][Succeeded / Failed / Skipped / Total] 62 / 150 / 1 / 213:  21%|██▏       | 213/1000 [1:11:27<4:24:02, 20.13s/it][Succeeded / Failed / Skipped / Total] 62 / 150 / 1 / 213:  21%|██▏       | 214/1000 [1:11:45<4:23:32, 20.12s/it][Succeeded / Failed / Skipped / Total] 62 / 151 / 1 / 214:  21%|██▏       | 214/1000 [1:11:45<4:23:32, 20.12s/it][Succeeded / Failed / Skipped / Total] 62 / 151 / 1 / 214:  22%|██▏       | 215/1000 [1:11:52<4:22:25, 20.06s/it][Succeeded / Failed / Skipped / Total] 62 / 152 / 1 / 215:  22%|██▏       | 215/1000 [1:11:52<4:22:25, 20.06s/it][Succeeded / Failed / Skipped / Total] 62 / 152 / 1 / 215:  22%|██▏       | 216/1000 [1:11:54<4:21:00, 19.98s/it][Succeeded / Failed / Skipped / Total] 63 / 152 / 1 / 216:  22%|██▏       | 216/1000 [1:11:54<4:21:00, 19.98s/it][Succeeded / Failed / Skipped / Total] 63 / 152 / 1 / 216:  22%|██▏       | 217/1000 [1:11:55<4:19:30, 19.89s/it][Succeeded / Failed / Skipped / Total] 63 / 153 / 1 / 217:  22%|██▏       | 217/1000 [1:11:55<4:19:30, 19.89s/it][Succeeded / Failed / Skipped / Total] 63 / 153 / 1 / 217:  22%|██▏       | 218/1000 [1:11:55<4:18:00, 19.80s/it][Succeeded / Failed / Skipped / Total] 63 / 154 / 1 / 218:  22%|██▏       | 218/1000 [1:11:55<4:18:00, 19.80s/it][Succeeded / Failed / Skipped / Total] 63 / 154 / 1 / 218:  22%|██▏       | 219/1000 [1:11:57<4:16:36, 19.71s/it][Succeeded / Failed / Skipped / Total] 64 / 154 / 1 / 219:  22%|██▏       | 219/1000 [1:11:57<4:16:36, 19.71s/it][Succeeded / Failed / Skipped / Total] 64 / 154 / 1 / 219:  22%|██▏       | 220/1000 [1:11:57<4:15:08, 19.63s/it]Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 213 ---------------------------------------------
Returns a list of webSphere groups . --> Luiz a list of battalions --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[luiz]] ( final String [[battalions]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 214 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 215 ---------------------------------------------
Find the attributes that are specified for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 216 ---------------------------------------------
Returns the current date . --> Liefert die propeller --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[propeller]] ( ) { long [[once]] = System . currentTimeMillis ( ) ; if ( ( [[once]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[once]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[once]] ; currentDate = format . format ( new Date ( [[once]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 217 ---------------------------------------------
Copy details from the source Authentication to the destination Authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void copyDetails ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void copyDetails ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 218 ---------------------------------------------
Returns the list of filters that match the request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 219 ---------------------------------------------
Get the list of filters for the given url . --> Get a list of goodby filters --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[goodby]] ( String url ) { return [[goodby]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 220 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 64 / 155 / 1 / 220:  22%|██▏       | 220/1000 [1:11:57<4:15:08, 19.63s/it][Succeeded / Failed / Skipped / Total] 64 / 155 / 1 / 220:  22%|██▏       | 221/1000 [1:11:58<4:13:40, 19.54s/it][Succeeded / Failed / Skipped / Total] 64 / 156 / 1 / 221:  22%|██▏       | 221/1000 [1:11:58<4:13:40, 19.54s/it][Succeeded / Failed / Skipped / Total] 64 / 156 / 1 / 221:  22%|██▏       | 222/1000 [1:11:58<4:12:13, 19.45s/it][Succeeded / Failed / Skipped / Total] 64 / 157 / 1 / 222:  22%|██▏       | 222/1000 [1:11:58<4:12:13, 19.45s/it][Succeeded / Failed / Skipped / Total] 64 / 157 / 1 / 222:  22%|██▏       | 223/1000 [1:11:58<4:10:47, 19.37s/it][Succeeded / Failed / Skipped / Total] 64 / 158 / 1 / 223:  22%|██▏       | 223/1000 [1:11:58<4:10:47, 19.37s/it][Succeeded / Failed / Skipped / Total] 64 / 158 / 1 / 223:  22%|██▏       | 224/1000 [1:12:24<4:10:51, 19.40s/it][Succeeded / Failed / Skipped / Total] 65 / 158 / 1 / 224:  22%|██▏       | 224/1000 [1:12:24<4:10:51, 19.40s/it][Succeeded / Failed / Skipped / Total] 65 / 158 / 1 / 224:  22%|██▎       | 225/1000 [1:12:25<4:09:27, 19.31s/it][Succeeded / Failed / Skipped / Total] 65 / 159 / 1 / 225:  22%|██▎       | 225/1000 [1:12:25<4:09:27, 19.31s/it][Succeeded / Failed / Skipped / Total] 65 / 159 / 1 / 225:  23%|██▎       | 226/1000 [1:13:05<4:10:20, 19.41s/it][Succeeded / Failed / Skipped / Total] 66 / 159 / 1 / 226:  23%|██▎       | 226/1000 [1:13:05<4:10:20, 19.41s/it][Succeeded / Failed / Skipped / Total] 66 / 159 / 1 / 226:  23%|██▎       | 227/1000 [1:13:15<4:09:28, 19.36s/it][Succeeded / Failed / Skipped / Total] 66 / 160 / 1 / 227:  23%|██▎       | 227/1000 [1:13:15<4:09:28, 19.36s/it][Succeeded / Failed / Skipped / Total] 66 / 160 / 1 / 227:  23%|██▎       | 228/1000 [1:14:23<4:11:54, 19.58s/it]Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 221 ---------------------------------------------
Gets the full DN . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 222 ---------------------------------------------
Updates the session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 223 ---------------------------------------------
Creates a Preemptive basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 224 ---------------------------------------------
Build a DistinguishedName for a group . --> zardoz - > zardoz - > zardoz --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[zardoz]] ( String [[clustered]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[clustered]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 225 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 226 ---------------------------------------------
Adds a filter to the list of filters . --> Pitfalls the given screens and ringleaders --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[pitfalls]] ( Filter [[screens]] , Filter ... [[ringleaders]] ) { Validate . notNull ( [[screens]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[screens]] ) ; if ( [[ringleaders]] != null ) { Collections . addAll ( RestAssured . filters , [[ringleaders]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 227 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 161 / 1 / 228:  23%|██▎       | 228/1000 [1:14:23<4:11:54, 19.58s/it][Succeeded / Failed / Skipped / Total] 66 / 161 / 1 / 228:  23%|██▎       | 229/1000 [1:15:30<4:14:13, 19.78s/it][Succeeded / Failed / Skipped / Total] 66 / 162 / 1 / 229:  23%|██▎       | 229/1000 [1:15:30<4:14:13, 19.78s/it][Succeeded / Failed / Skipped / Total] 66 / 162 / 1 / 229:  23%|██▎       | 230/1000 [1:15:40<4:13:22, 19.74s/it][Succeeded / Failed / Skipped / Total] 67 / 162 / 1 / 230:  23%|██▎       | 230/1000 [1:15:40<4:13:22, 19.74s/it][Succeeded / Failed / Skipped / Total] 67 / 162 / 1 / 230:  23%|██▎       | 231/1000 [1:16:37<4:15:05, 19.90s/it][Succeeded / Failed / Skipped / Total] 67 / 163 / 1 / 231:  23%|██▎       | 231/1000 [1:16:37<4:15:05, 19.90s/it][Succeeded / Failed / Skipped / Total] 67 / 163 / 1 / 231:  23%|██▎       | 232/1000 [1:16:39<4:13:44, 19.82s/it][Succeeded / Failed / Skipped / Total] 68 / 163 / 1 / 232:  23%|██▎       | 232/1000 [1:16:39<4:13:44, 19.82s/it][Succeeded / Failed / Skipped / Total] 68 / 163 / 1 / 232:  23%|██▎       | 233/1000 [1:16:55<4:13:13, 19.81s/it][Succeeded / Failed / Skipped / Total] 68 / 164 / 1 / 233:  23%|██▎       | 233/1000 [1:16:55<4:13:13, 19.81s/it][Succeeded / Failed / Skipped / Total] 68 / 164 / 1 / 233:  23%|██▎       | 234/1000 [1:17:48<4:14:43, 19.95s/it]Sets the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 229 ---------------------------------------------
Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 230 ---------------------------------------------
Prints the response body to the given output stream . --> Perform a perception . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[responseBodyToAppend]] ; if ( shouldPrettyPrint ) { [[responseBodyToAppend]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[responseBodyToAppend]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[responseBodyToAppend]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[responseBodyToAppend]] ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[perception]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[allyou]] ; if ( shouldPrettyPrint ) { [[allyou]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[allyou]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[allyou]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[allyou]] ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 232 ---------------------------------------------
Sets the default charset for the query parameter . --> Creates a new saffron encoder configuration . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[saffron]] ( String [[alaska]] ) { return new EncoderConfig ( defaultContentCharset , [[alaska]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Truthful]]" == "[[Truthful]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 233 ---------------------------------------------
Checks if the maximum number of sessions allowed for this principal is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 165 / 1 / 234:  23%|██▎       | 234/1000 [1:17:48<4:14:43, 19.95s/it][Succeeded / Failed / Skipped / Total] 68 / 165 / 1 / 234:  24%|██▎       | 235/1000 [1:17:59<4:13:52, 19.91s/it][Succeeded / Failed / Skipped / Total] 68 / 166 / 1 / 235:  24%|██▎       | 235/1000 [1:17:59<4:13:52, 19.91s/it][Succeeded / Failed / Skipped / Total] 68 / 166 / 1 / 235:  24%|██▎       | 236/1000 [1:18:01<4:12:33, 19.83s/it][Succeeded / Failed / Skipped / Total] 69 / 166 / 1 / 236:  24%|██▎       | 236/1000 [1:18:01<4:12:33, 19.83s/it][Succeeded / Failed / Skipped / Total] 69 / 166 / 1 / 236:  24%|██▎       | 237/1000 [1:18:14<4:11:54, 19.81s/it][Succeeded / Failed / Skipped / Total] 69 / 167 / 1 / 237:  24%|██▎       | 237/1000 [1:18:14<4:11:54, 19.81s/it][Succeeded / Failed / Skipped / Total] 69 / 167 / 1 / 237:  24%|██▍       | 238/1000 [1:18:21<4:10:51, 19.75s/it][Succeeded / Failed / Skipped / Total] 70 / 167 / 1 / 238:  24%|██▍       | 238/1000 [1:18:21<4:10:51, 19.75s/it][Succeeded / Failed / Skipped / Total] 70 / 167 / 1 / 238:  24%|██▍       | 239/1000 [1:18:35<4:10:13, 19.73s/it][Succeeded / Failed / Skipped / Total] 71 / 167 / 1 / 239:  24%|██▍       | 239/1000 [1:18:35<4:10:13, 19.73s/it][Succeeded / Failed / Skipped / Total] 71 / 167 / 1 / 239:  24%|██▍       | 240/1000 [1:18:36<4:08:55, 19.65s/it][Succeeded / Failed / Skipped / Total] 71 / 168 / 1 / 240:  24%|██▍       | 240/1000 [1:18:36<4:08:55, 19.65s/it][Succeeded / Failed / Skipped / Total] 71 / 168 / 1 / 240:  24%|██▍       | 241/1000 [1:18:36<4:07:34, 19.57s/it]Adds a list of filters to the RestAssured . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( List < Filter > filters ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void filters ( List < Filter > filters ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 235 ---------------------------------------------
Change user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 236 ---------------------------------------------
Sets the jaxb object mapper factory . --> zoë zoë zoë zoë --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[zoë]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[zoë]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 237 ---------------------------------------------
Creates a NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 238 ---------------------------------------------
Creates a new RestAssuredMockMvcConfig with the specified log config . --> Factory method to create a RestAssuredMockMvcConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[grapefruit]] ( LogConfig logConfig ) { notNull ( [[grapefruit]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[grapefruit]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 239 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified JSON configuration . --> Returns a new instance of RestAssuredMockMvcConfig with sparkled configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sparkled]] ( JsonConfig jsonConfig ) { notNull ( [[sparkled]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[sparkled]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 240 ---------------------------------------------
Sets up a proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 241 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 168 / 1 / 241:  24%|██▍       | 241/1000 [1:18:36<4:07:34, 19.57s/it][Succeeded / Failed / Skipped / Total] 72 / 168 / 1 / 241:  24%|██▍       | 242/1000 [1:18:38<4:06:18, 19.50s/it][Succeeded / Failed / Skipped / Total] 73 / 168 / 1 / 242:  24%|██▍       | 242/1000 [1:18:38<4:06:18, 19.50s/it][Succeeded / Failed / Skipped / Total] 73 / 168 / 1 / 242:  24%|██▍       | 243/1000 [1:18:38<4:04:59, 19.42s/it][Succeeded / Failed / Skipped / Total] 73 / 168 / 2 / 243:  24%|██▍       | 243/1000 [1:18:38<4:04:59, 19.42s/it][Succeeded / Failed / Skipped / Total] 73 / 168 / 2 / 243:  24%|██▍       | 244/1000 [1:18:39<4:03:43, 19.34s/it][Succeeded / Failed / Skipped / Total] 74 / 168 / 2 / 244:  24%|██▍       | 244/1000 [1:18:39<4:03:43, 19.34s/it][Succeeded / Failed / Skipped / Total] 74 / 168 / 2 / 244:  24%|██▍       | 245/1000 [1:18:40<4:02:28, 19.27s/it][Succeeded / Failed / Skipped / Total] 75 / 168 / 2 / 245:  24%|██▍       | 245/1000 [1:18:40<4:02:28, 19.27s/it][Succeeded / Failed / Skipped / Total] 76 / 168 / 2 / 246:  25%|██▍       | 246/1000 [1:18:41<4:01:10, 19.19s/it][Succeeded / Failed / Skipped / Total] 76 / 168 / 2 / 246:  25%|██▍       | 247/1000 [1:18:43<3:59:58, 19.12s/it][Succeeded / Failed / Skipped / Total] 77 / 168 / 2 / 247:  25%|██▍       | 247/1000 [1:18:43<3:59:58, 19.12s/it]Creates a new instance of RestAssuredMockMvcConfig with the specified encoder configuration . --> Returns a new instance of RestAssuredMockMvcConfig with accidental configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[accidental]] ( EncoderConfig [[heavyweights]] ) { notNull ( [[accidental]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[accidental]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 242 ---------------------------------------------
Sets the header configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig [[headerConfig]] ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[murata]] ( HeaderConfig [[nargis]] ) { notNull ( [[murata]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[murata]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 243 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 244 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified async config . --> Configure wormholes . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[wormholes]] ( AsyncConfig asyncConfig ) { notNull ( [[wormholes]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[wormholes]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 245 ---------------------------------------------
Sets the mock parameter configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig [[paramConfig]] ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ive]] ( MockMvcParamConfig [[dysart]] ) { notNull ( [[ive]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[ive]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 246 ---------------------------------------------
Sets the multi - part configuration . --> Returns a new instance of RestAssuredMockMvcConfig with magicians . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[magicians]] ( MultiPartConfig [[clash]] ) { notNull ( [[magicians]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[magicians]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new mock config instance with the specified matcher configuration . --> Returns a new instance of RestAssuredMockMvcConfig with superheated configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[superheated]] ( MatcherConfig matcherConfig ) { notNull ( [[superheated]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[superheated]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 248 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 78 / 168 / 2 / 248:  25%|██▍       | 248/1000 [1:18:45<3:58:48, 19.05s/it][Succeeded / Failed / Skipped / Total] 78 / 168 / 2 / 248:  25%|██▍       | 249/1000 [1:18:47<3:57:38, 18.99s/it][Succeeded / Failed / Skipped / Total] 78 / 169 / 2 / 249:  25%|██▍       | 249/1000 [1:18:47<3:57:38, 18.99s/it][Succeeded / Failed / Skipped / Total] 79 / 169 / 2 / 250:  25%|██▌       | 250/1000 [1:19:47<3:59:22, 19.15s/it][Succeeded / Failed / Skipped / Total] 79 / 169 / 2 / 250:  25%|██▌       | 251/1000 [1:19:56<3:58:33, 19.11s/it][Succeeded / Failed / Skipped / Total] 80 / 169 / 2 / 251:  25%|██▌       | 251/1000 [1:19:56<3:58:33, 19.11s/it][Succeeded / Failed / Skipped / Total] 80 / 169 / 2 / 251:  25%|██▌       | 252/1000 [1:20:00<3:57:28, 19.05s/it][Succeeded / Failed / Skipped / Total] 81 / 169 / 2 / 252:  25%|██▌       | 252/1000 [1:20:00<3:57:28, 19.05s/it][Succeeded / Failed / Skipped / Total] 81 / 169 / 2 / 252:  25%|██▌       | 253/1000 [1:20:11<3:56:47, 19.02s/it][Succeeded / Failed / Skipped / Total] 82 / 169 / 2 / 253:  25%|██▌       | 253/1000 [1:20:11<3:56:47, 19.02s/it][Succeeded / Failed / Skipped / Total] 82 / 169 / 2 / 253:  25%|██▌       | 254/1000 [1:20:22<3:56:04, 18.99s/it]Creates a new RestAssuredConfig configured with the specified redirect configuration . --> Diverts a RedirectConfig into a RestAssuredConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[diverted]] ( RedirectConfig [[fable]] ) { notNull ( [[fable]] , "Redirect config" ) ; return new RestAssuredConfig ( [[fable]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 249 ---------------------------------------------
Creates a form authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 250 ---------------------------------------------
Sets the object mapper configuration . --> Create a new instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[yayoi]] ( ObjectMapperConfig [[yappin]] ) { notNull ( [[yayoi]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[yayoi]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 251 ---------------------------------------------
Sets the declared namespace . --> Sets the channels for the given prefix and unrepentant --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[channels]] ( String prefix , String [[unrepentant]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[unrepentant]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[exorcised]] = new HashMap < String , String > ( declaredNamespaces ) ; [[exorcised]] . put ( prefix , [[unrepentant]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[exorcised]] , properties , validating , "[[Realty]]" == "[[Realty]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 252 ---------------------------------------------
Sets the session config . --> Creates a new instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[merck]] ( SessionConfig [[lamé]] ) { notNull ( [[merck]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[merck]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 253 ---------------------------------------------
Sets the default object mapper type . --> Create a gratuitous ObjectMapperConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[gratuitous]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[gratuitous]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 254 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 169 / 2 / 254:  25%|██▌       | 254/1000 [1:20:22<3:56:04, 18.99s/it][Succeeded / Failed / Skipped / Total] 83 / 169 / 2 / 254:  26%|██▌       | 255/1000 [1:20:35<3:55:27, 18.96s/it][Succeeded / Failed / Skipped / Total] 84 / 169 / 2 / 255:  26%|██▌       | 255/1000 [1:20:35<3:55:27, 18.96s/it][Succeeded / Failed / Skipped / Total] 84 / 169 / 2 / 255:  26%|██▌       | 256/1000 [1:20:42<3:54:34, 18.92s/it][Succeeded / Failed / Skipped / Total] 85 / 169 / 2 / 256:  26%|██▌       | 256/1000 [1:20:42<3:54:34, 18.92s/it][Succeeded / Failed / Skipped / Total] 85 / 169 / 2 / 256:  26%|██▌       | 257/1000 [1:20:43<3:53:22, 18.85s/it][Succeeded / Failed / Skipped / Total] 85 / 170 / 2 / 257:  26%|██▌       | 257/1000 [1:20:43<3:53:22, 18.85s/it][Succeeded / Failed / Skipped / Total] 85 / 170 / 2 / 257:  26%|██▌       | 258/1000 [1:21:03<3:53:06, 18.85s/it][Succeeded / Failed / Skipped / Total] 85 / 171 / 2 / 258:  26%|██▌       | 258/1000 [1:21:03<3:53:06, 18.85s/it][Succeeded / Failed / Skipped / Total] 85 / 171 / 2 / 258:  26%|██▌       | 259/1000 [1:21:03<3:51:54, 18.78s/it][Succeeded / Failed / Skipped / Total] 85 / 172 / 2 / 259:  26%|██▌       | 259/1000 [1:21:03<3:51:54, 18.78s/it][Succeeded / Failed / Skipped / Total] 85 / 172 / 2 / 259:  26%|██▌       | 260/1000 [1:21:03<3:50:43, 18.71s/it][Succeeded / Failed / Skipped / Total] 86 / 172 / 2 / 260:  26%|██▌       | 260/1000 [1:21:03<3:50:43, 18.71s/it][Succeeded / Failed / Skipped / Total] 86 / 172 / 2 / 260:  26%|██▌       | 261/1000 [1:21:06<3:49:40, 18.65s/it][Succeeded / Failed / Skipped / Total] 87 / 172 / 2 / 261:  26%|██▌       | 261/1000 [1:21:06<3:49:40, 18.65s/it][Succeeded / Failed / Skipped / Total] 87 / 172 / 2 / 261:  26%|██▌       | 262/1000 [1:21:14<3:48:49, 18.60s/it]Set the proxy to connect to . --> Stockpile a pogo --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int [[port]] , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , [[port]] , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[stockpile]] ( String [[accommodated]] , int [[piero]] , String [[pog]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[accommodated]] , [[piero]] , [[pog]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 255 ---------------------------------------------
Adds a header to this multi part spec . --> Sets the streamers for the given acronym and evaluations --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[streamers]] ( String [[acronym]] , String [[evaluations]] ) { Validate . notEmpty ( [[acronym]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[evaluations]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 256 ---------------------------------------------
Sets the XML configuration . --> Creates a new RestAssuredMockMvcConfig with custom hinders --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[hinders]] ( XmlConfig [[salmonella]] ) { notNull ( [[hinders]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[hinders]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 257 ---------------------------------------------
Creates a new Headers object with the given header and additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 258 ---------------------------------------------
Reset the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 259 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 260 ---------------------------------------------
Sets the name of the control . --> Set jesuit layer and alf --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . [[isControlNameExplicit]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[jesuit]] ( String [[allende]] ) { Validate . notEmpty ( [[jesuit]] , "Control name cannot be empty" ) ; this . [[layer]] = [[jesuit]] ; this . [[alf]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the default request headers . --> dl a map of tatsuya --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object [[val]] = [[headers]] . get ( key ) ; if ( [[val]] == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , [[val]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[dl]] ( Map < ? , ? > [[tatsuya]] ) { this . [[organism]] . clear ( ) ; if ( [[tatsuya]] == null ) return ; for ( Object key : [[tatsuya]] . keySet ( ) ) { Object [[valli]] = [[tatsuya]] . get ( key ) ; if ( [[valli]] == null ) continue ; this . [[organism]] . put ( key . toString ( ) , [[valli]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 172 / 2 / 262:  26%|██▌       | 262/1000 [1:21:14<3:48:49, 18.60s/it][Succeeded / Failed / Skipped / Total] 88 / 172 / 2 / 262:  26%|██▋       | 263/1000 [1:21:58<3:49:42, 18.70s/it][Succeeded / Failed / Skipped / Total] 89 / 172 / 2 / 263:  26%|██▋       | 263/1000 [1:21:58<3:49:42, 18.70s/it][Succeeded / Failed / Skipped / Total] 89 / 172 / 2 / 263:  26%|██▋       | 264/1000 [1:22:03<3:48:45, 18.65s/it][Succeeded / Failed / Skipped / Total] 90 / 172 / 2 / 264:  26%|██▋       | 264/1000 [1:22:03<3:48:45, 18.65s/it][Succeeded / Failed / Skipped / Total] 90 / 172 / 2 / 264:  26%|██▋       | 265/1000 [1:22:26<3:48:40, 18.67s/it][Succeeded / Failed / Skipped / Total] 90 / 173 / 2 / 265:  26%|██▋       | 265/1000 [1:22:26<3:48:40, 18.67s/it][Succeeded / Failed / Skipped / Total] 90 / 173 / 2 / 265:  27%|██▋       | 266/1000 [1:24:27<3:53:02, 19.05s/it][Succeeded / Failed / Skipped / Total] 91 / 173 / 2 / 266:  27%|██▋       | 266/1000 [1:24:27<3:53:02, 19.05s/it][Succeeded / Failed / Skipped / Total] 91 / 173 / 2 / 266:  27%|██▋       | 267/1000 [1:25:00<3:53:21, 19.10s/it][Succeeded / Failed / Skipped / Total] 92 / 173 / 2 / 267:  27%|██▋       | 267/1000 [1:25:00<3:53:21, 19.10s/it][Succeeded / Failed / Skipped / Total] 92 / 173 / 2 / 267:  27%|██▋       | 268/1000 [1:27:41<3:59:32, 19.63s/it][Succeeded / Failed / Skipped / Total] 92 / 174 / 2 / 268:  27%|██▋       | 268/1000 [1:27:41<3:59:32, 19.63s/it][Succeeded / Failed / Skipped / Total] 92 / 174 / 2 / 268:  27%|██▋       | 269/1000 [1:29:04<4:02:02, 19.87s/it][Succeeded / Failed / Skipped / Total] 92 / 175 / 2 / 269:  27%|██▋       | 269/1000 [1:29:04<4:02:02, 19.87s/it][Succeeded / Failed / Skipped / Total] 92 / 175 / 2 / 269:  27%|██▋       | 270/1000 [1:29:06<4:00:56, 19.80s/it][Succeeded / Failed / Skipped / Total] 93 / 175 / 2 / 270:  27%|██▋       | 270/1000 [1:29:06<4:00:56, 19.80s/it][Succeeded / Failed / Skipped / Total] 93 / 175 / 2 / 270:  27%|██▋       | 271/1000 [1:29:14<4:00:04, 19.76s/it]Declares the given namespaces . --> возвращает возвращает --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[в]] ( Map < String , String > [[rizza]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[rizza]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 263 ---------------------------------------------
Sets basic authentication . --> Paramount a seashore client --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String host , int [[port]] , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[paramount]] ( String host , int [[seashore]] , String [[client]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[seashore]] ) , new UsernamePasswordCredentials ( [[client]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 264 ---------------------------------------------
Build the response . --> Liefert die Bolster . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[bolster]] ( ) { final int [[betel]] = restAssuredResponse . statusCode ( ) ; if ( [[betel]] < 100 || [[betel]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[betel]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 265 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 266 ---------------------------------------------
Matches a cookie with a expiry date . --> WURLITZER - WURLITZER - WURLITZER --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[wurlitzer]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Set the NTLM credentials . --> Called when a tablet is dicked --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String [[user]] , String [[pass]] , String [[workstation]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( [[user]] , [[pass]] , [[workstation]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[dicked]] ( String host , int [[wear]] , String [[viewers]] , String [[adoptions]] , String [[tabletop]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[wear]] ) , new NTCredentials ( [[viewers]] , [[adoptions]] , [[tabletop]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches a cookie comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Expects the given header name to match the expected value . --> Squint la pocatello --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[squint]] ( String [[pocatello]] , Matcher < String > [[sacré]] ) { spec . header ( [[pocatello]] , [[sacré]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 271 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 176 / 2 / 271:  27%|██▋       | 271/1000 [1:29:14<4:00:04, 19.76s/it][Succeeded / Failed / Skipped / Total] 93 / 176 / 2 / 271:  27%|██▋       | 272/1000 [1:29:57<4:00:46, 19.84s/it][Succeeded / Failed / Skipped / Total] 94 / 176 / 2 / 272:  27%|██▋       | 272/1000 [1:29:57<4:00:46, 19.84s/it][Succeeded / Failed / Skipped / Total] 94 / 176 / 2 / 272:  27%|██▋       | 273/1000 [1:30:31<4:01:04, 19.90s/it][Succeeded / Failed / Skipped / Total] 95 / 176 / 2 / 273:  27%|██▋       | 273/1000 [1:30:31<4:01:04, 19.90s/it][Succeeded / Failed / Skipped / Total] 95 / 176 / 2 / 273:  27%|██▋       | 274/1000 [1:30:43<4:00:23, 19.87s/it][Succeeded / Failed / Skipped / Total] 96 / 176 / 2 / 274:  27%|██▋       | 274/1000 [1:30:43<4:00:23, 19.87s/it][Succeeded / Failed / Skipped / Total] 96 / 176 / 2 / 274:  28%|██▊       | 275/1000 [1:31:14<4:00:31, 19.91s/it][Succeeded / Failed / Skipped / Total] 97 / 176 / 2 / 275:  28%|██▊       | 275/1000 [1:31:14<4:00:31, 19.91s/it][Succeeded / Failed / Skipped / Total] 97 / 176 / 2 / 275:  28%|██▊       | 276/1000 [1:31:20<3:59:37, 19.86s/it][Succeeded / Failed / Skipped / Total] 97 / 177 / 2 / 276:  28%|██▊       | 276/1000 [1:31:20<3:59:37, 19.86s/it][Succeeded / Failed / Skipped / Total] 97 / 177 / 2 / 276:  28%|██▊       | 277/1000 [1:31:21<3:58:27, 19.79s/it][Succeeded / Failed / Skipped / Total] 97 / 178 / 2 / 277:  28%|██▊       | 277/1000 [1:31:21<3:58:27, 19.79s/it][Succeeded / Failed / Skipped / Total] 97 / 178 / 2 / 277:  28%|██▊       | 278/1000 [1:31:21<3:57:17, 19.72s/it][Succeeded / Failed / Skipped / Total] 97 / 179 / 2 / 278:  28%|██▊       | 278/1000 [1:31:21<3:57:17, 19.72s/it][Succeeded / Failed / Skipped / Total] 97 / 179 / 2 / 278:  28%|██▊       | 279/1000 [1:31:22<3:56:07, 19.65s/it][Succeeded / Failed / Skipped / Total] 97 / 180 / 2 / 279:  28%|██▊       | 279/1000 [1:31:22<3:56:07, 19.65s/it][Succeeded / Failed / Skipped / Total] 97 / 180 / 2 / 279:  28%|██▊       | 280/1000 [1:31:22<3:54:57, 19.58s/it][Succeeded / Failed / Skipped / Total] 97 / 181 / 2 / 280:  28%|██▊       | 280/1000 [1:31:22<3:54:57, 19.58s/it][Succeeded / Failed / Skipped / Total] 97 / 181 / 2 / 280:  28%|██▊       | 281/1000 [1:31:22<3:53:48, 19.51s/it]Allow all hostnames . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 272 ---------------------------------------------
Expect a header . --> Sportswear ferrigno fabio --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[sportswear]] ( String [[ferrigno]] , String [[fabio]] ) { spec . header ( [[ferrigno]] , [[fabio]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given matcher . --> Grapefruit als DetailedCookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[grapefruit]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Returns a new JsonPathConfig configured with a number return type . --> Returns a new JsonPathConfig instance with the default parser type gson object mapper factory jackson1 object mapper factory johnzon object mapper factory --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[kath]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[kath]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 275 ---------------------------------------------
Expect a cookie to be set . --> Methode governmente governmente --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[government]] ( String [[presidente]] , String expectedValue ) { spec . cookie ( [[presidente]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Enable logging of request and response if validation fails . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 278 ---------------------------------------------
Creates a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 279 ---------------------------------------------
Sets the default boundary . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 280 ---------------------------------------------
Adds an attribute to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 281 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 182 / 2 / 281:  28%|██▊       | 281/1000 [1:31:22<3:53:48, 19.51s/it][Succeeded / Failed / Skipped / Total] 97 / 182 / 2 / 281:  28%|██▊       | 282/1000 [1:31:23<3:52:40, 19.44s/it][Succeeded / Failed / Skipped / Total] 97 / 183 / 2 / 282:  28%|██▊       | 282/1000 [1:31:23<3:52:40, 19.44s/it][Succeeded / Failed / Skipped / Total] 97 / 183 / 2 / 282:  28%|██▊       | 283/1000 [1:31:23<3:51:32, 19.38s/it][Succeeded / Failed / Skipped / Total] 97 / 184 / 2 / 283:  28%|██▊       | 283/1000 [1:31:23<3:51:32, 19.38s/it][Succeeded / Failed / Skipped / Total] 97 / 184 / 2 / 283:  28%|██▊       | 284/1000 [1:31:23<3:50:24, 19.31s/it][Succeeded / Failed / Skipped / Total] 97 / 185 / 2 / 284:  28%|██▊       | 284/1000 [1:31:23<3:50:24, 19.31s/it][Succeeded / Failed / Skipped / Total] 97 / 185 / 2 / 284:  28%|██▊       | 285/1000 [1:31:24<3:49:18, 19.24s/it][Succeeded / Failed / Skipped / Total] 97 / 186 / 2 / 285:  28%|██▊       | 285/1000 [1:31:24<3:49:18, 19.24s/it][Succeeded / Failed / Skipped / Total] 97 / 186 / 2 / 285:  29%|██▊       | 286/1000 [1:31:24<3:48:11, 19.18s/it][Succeeded / Failed / Skipped / Total] 97 / 187 / 2 / 286:  29%|██▊       | 286/1000 [1:31:24<3:48:11, 19.18s/it][Succeeded / Failed / Skipped / Total] 97 / 187 / 2 / 286:  29%|██▊       | 287/1000 [1:31:24<3:47:05, 19.11s/it][Succeeded / Failed / Skipped / Total] 97 / 188 / 2 / 287:  29%|██▊       | 287/1000 [1:31:24<3:47:05, 19.11s/it][Succeeded / Failed / Skipped / Total] 97 / 188 / 2 / 287:  29%|██▉       | 288/1000 [1:31:25<3:46:00, 19.05s/it][Succeeded / Failed / Skipped / Total] 97 / 189 / 2 / 288:  29%|██▉       | 288/1000 [1:31:25<3:46:00, 19.05s/it][Succeeded / Failed / Skipped / Total] 97 / 189 / 2 / 288:  29%|██▉       | 289/1000 [1:31:31<3:45:09, 19.00s/it][Succeeded / Failed / Skipped / Total] 97 / 190 / 2 / 289:  29%|██▉       | 289/1000 [1:31:31<3:45:09, 19.00s/it]Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addHeader ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addHeader ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 282 ---------------------------------------------
Adds a multi - part control . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 283 ---------------------------------------------
Adds additional result handlers to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 284 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 285 ---------------------------------------------
Adds the specified HTTP client parameters to the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 286 ---------------------------------------------
Creates a new HttpClientConfig with the specified HttpClientFactory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 287 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 288 ---------------------------------------------
Returns the value of the property at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 289 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 190 / 2 / 290:  29%|██▉       | 290/1000 [1:31:31<3:44:04, 18.94s/it][Succeeded / Failed / Skipped / Total] 98 / 190 / 2 / 290:  29%|██▉       | 291/1000 [1:31:43<3:43:27, 18.91s/it][Succeeded / Failed / Skipped / Total] 99 / 190 / 2 / 291:  29%|██▉       | 291/1000 [1:31:43<3:43:27, 18.91s/it][Succeeded / Failed / Skipped / Total] 99 / 190 / 2 / 291:  29%|██▉       | 292/1000 [1:31:58<3:43:00, 18.90s/it][Succeeded / Failed / Skipped / Total] 100 / 190 / 2 / 292:  29%|██▉       | 292/1000 [1:31:58<3:43:00, 18.90s/it][Succeeded / Failed / Skipped / Total] 100 / 190 / 2 / 292:  29%|██▉       | 293/1000 [1:32:00<3:42:01, 18.84s/it][Succeeded / Failed / Skipped / Total] 101 / 190 / 2 / 293:  29%|██▉       | 293/1000 [1:32:00<3:42:01, 18.84s/it][Succeeded / Failed / Skipped / Total] 101 / 190 / 2 / 293:  29%|██▉       | 294/1000 [1:32:04<3:41:07, 18.79s/it][Succeeded / Failed / Skipped / Total] 102 / 190 / 2 / 294:  29%|██▉       | 294/1000 [1:32:04<3:41:07, 18.79s/it][Succeeded / Failed / Skipped / Total] 102 / 190 / 2 / 294:  30%|██▉       | 295/1000 [1:32:05<3:40:04, 18.73s/it][Succeeded / Failed / Skipped / Total] 102 / 191 / 2 / 295:  30%|██▉       | 295/1000 [1:32:05<3:40:04, 18.73s/it][Succeeded / Failed / Skipped / Total] 102 / 191 / 2 / 295:  30%|██▉       | 296/1000 [1:32:05<3:39:01, 18.67s/it][Succeeded / Failed / Skipped / Total] 102 / 192 / 2 / 296:  30%|██▉       | 296/1000 [1:32:05<3:39:01, 18.67s/it][Succeeded / Failed / Skipped / Total] 102 / 192 / 2 / 296:  30%|██▉       | 297/1000 [1:32:05<3:38:00, 18.61s/it][Succeeded / Failed / Skipped / Total] 102 / 193 / 2 / 297:  30%|██▉       | 297/1000 [1:32:05<3:38:00, 18.61s/it][Succeeded / Failed / Skipped / Total] 102 / 193 / 2 / 297:  30%|██▉       | 298/1000 [1:32:06<3:36:58, 18.54s/it][Succeeded / Failed / Skipped / Total] 102 / 194 / 2 / 298:  30%|██▉       | 298/1000 [1:32:06<3:36:58, 18.54s/it][Succeeded / Failed / Skipped / Total] 102 / 194 / 2 / 298:  30%|██▉       | 299/1000 [1:32:06<3:35:56, 18.48s/it][Succeeded / Failed / Skipped / Total] 102 / 195 / 2 / 299:  30%|██▉       | 299/1000 [1:32:06<3:35:56, 18.48s/it][Succeeded / Failed / Skipped / Total] 102 / 195 / 2 / 299:  30%|███       | 300/1000 [1:32:06<3:34:55, 18.42s/it][Succeeded / Failed / Skipped / Total] 102 / 196 / 2 / 300:  30%|███       | 300/1000 [1:32:06<3:34:55, 18.42s/it][Succeeded / Failed / Skipped / Total] 102 / 196 / 2 / 300:  30%|███       | 301/1000 [1:32:07<3:33:55, 18.36s/it]Sets the default parser type . --> zaki zaki --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[zaki]] ( JsonParserType [[si]] ) { return new JsonPathConfig ( numberReturnType , [[zaki]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 291 ---------------------------------------------
Returns the byte value stored at the given path . --> Aarti aarti aarti aarti --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[aarti]] ( String [[footpath]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 292 ---------------------------------------------
Returns the short value stored at the given path . --> Mamacita mamacita --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[mamacita]] ( String [[menu]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 293 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the specified maxAge . --> Returns a DetailedCookieMatcher that matches cookies that have a maxAge greater than or equal to or equal to or equal to or equal to or equal to or equal to or greater than or equal to or equal to or equal to or equal to or greater than or equal to or equal to or equal to or equal to or greater than or equal to or equal to or equal to or equal to or greater than or equal to or equal to or equal to or greater than or equal to or equal to to or equal to or equal to or equal to or equal to or equal to or equal to or equal to or equal to or equal --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[younger]] ( Matcher < ? super Integer > [[purifying]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[purifying]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the integer value stored at the given path . --> Say a trails --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[saya]] ( String [[trails]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Gets a list of objects from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 296 ---------------------------------------------
Get a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the value of the given path as an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 298 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 299 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( key , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 300 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 301 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 103 / 196 / 2 / 301:  30%|███       | 301/1000 [1:32:07<3:33:55, 18.36s/it][Succeeded / Failed / Skipped / Total] 103 / 197 / 2 / 302:  30%|███       | 302/1000 [1:32:07<3:32:54, 18.30s/it][Succeeded / Failed / Skipped / Total] 103 / 197 / 2 / 302:  30%|███       | 303/1000 [1:32:07<3:31:55, 18.24s/it][Succeeded / Failed / Skipped / Total] 103 / 198 / 2 / 303:  30%|███       | 303/1000 [1:32:07<3:31:55, 18.24s/it][Succeeded / Failed / Skipped / Total] 103 / 199 / 2 / 304:  30%|███       | 304/1000 [1:32:08<3:30:56, 18.18s/it][Succeeded / Failed / Skipped / Total] 103 / 199 / 2 / 304:  30%|███       | 305/1000 [1:32:08<3:29:58, 18.13s/it][Succeeded / Failed / Skipped / Total] 103 / 200 / 2 / 305:  30%|███       | 305/1000 [1:32:08<3:29:58, 18.13s/it][Succeeded / Failed / Skipped / Total] 104 / 200 / 2 / 306:  31%|███       | 306/1000 [1:32:12<3:29:07, 18.08s/it][Succeeded / Failed / Skipped / Total] 104 / 200 / 2 / 306:  31%|███       | 307/1000 [1:32:28<3:28:45, 18.07s/it][Succeeded / Failed / Skipped / Total] 104 / 201 / 2 / 307:  31%|███       | 307/1000 [1:32:28<3:28:45, 18.07s/it][Succeeded / Failed / Skipped / Total] 105 / 201 / 2 / 308:  31%|███       | 308/1000 [1:32:28<3:27:47, 18.02s/it][Succeeded / Failed / Skipped / Total] 105 / 201 / 2 / 308:  31%|███       | 309/1000 [1:33:35<3:29:17, 18.17s/it][Succeeded / Failed / Skipped / Total] 106 / 201 / 2 / 309:  31%|███       | 309/1000 [1:33:35<3:29:17, 18.17s/it][Succeeded / Failed / Skipped / Total] 106 / 201 / 2 / 309:  31%|███       | 310/1000 [1:35:53<3:33:26, 18.56s/it][Succeeded / Failed / Skipped / Total] 106 / 202 / 2 / 310:  31%|███       | 310/1000 [1:35:53<3:33:26, 18.56s/it][Succeeded / Failed / Skipped / Total] 106 / 202 / 2 / 310:  31%|███       | 311/1000 [1:35:59<3:32:40, 18.52s/it]Returns the long value stored at the given path . --> Kumbaya - Kumbaya --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[kumbaya]] ( String [[footpath]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 303 ---------------------------------------------
Creates a filter that logs the response to the given stream if the matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 304 ---------------------------------------------
Creates a new Cookies instance with the given cookie and additional cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 305 ---------------------------------------------
Clean up the backing map for the given keys and sources . --> [[[FAILED]]]

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 306 ---------------------------------------------
Default logging stream . --> Strasbourg als LogConfig --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[strasbourg]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 307 ---------------------------------------------
Returns a new instance of the DetailedCookieMatcher that matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 308 ---------------------------------------------
Sets the form parameter update strategy . --> Dessie a MockMvcParamConfig --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[dessie]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Converts a constant string binding to a binding . --> Heatherton der Vitale --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[heatherton]] ( Key < T > [[vitale]] , Errors [[mistakes]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 310 ---------------------------------------------
Returns a new proxy specification with the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 203 / 2 / 311:  31%|███       | 311/1000 [1:35:59<3:32:40, 18.52s/it][Succeeded / Failed / Skipped / Total] 106 / 203 / 2 / 311:  31%|███       | 312/1000 [1:36:12<3:32:08, 18.50s/it][Succeeded / Failed / Skipped / Total] 106 / 204 / 2 / 312:  31%|███       | 312/1000 [1:36:12<3:32:08, 18.50s/it][Succeeded / Failed / Skipped / Total] 106 / 204 / 2 / 312:  31%|███▏      | 313/1000 [1:36:26<3:31:41, 18.49s/it][Succeeded / Failed / Skipped / Total] 106 / 205 / 2 / 313:  31%|███▏      | 313/1000 [1:36:26<3:31:41, 18.49s/it][Succeeded / Failed / Skipped / Total] 106 / 205 / 2 / 313:  31%|███▏      | 314/1000 [1:36:41<3:31:14, 18.48s/it][Succeeded / Failed / Skipped / Total] 106 / 206 / 2 / 314:  31%|███▏      | 314/1000 [1:36:41<3:31:14, 18.48s/it][Succeeded / Failed / Skipped / Total] 106 / 206 / 2 / 314:  32%|███▏      | 315/1000 [1:37:54<3:32:55, 18.65s/it][Succeeded / Failed / Skipped / Total] 106 / 207 / 2 / 315:  32%|███▏      | 315/1000 [1:37:54<3:32:55, 18.65s/it][Succeeded / Failed / Skipped / Total] 106 / 207 / 2 / 315:  32%|███▏      | 316/1000 [1:37:55<3:31:57, 18.59s/it][Succeeded / Failed / Skipped / Total] 106 / 208 / 2 / 316:  32%|███▏      | 316/1000 [1:37:55<3:31:57, 18.59s/it][Succeeded / Failed / Skipped / Total] 106 / 208 / 2 / 316:  32%|███▏      | 317/1000 [1:37:55<3:30:59, 18.54s/it][Succeeded / Failed / Skipped / Total] 106 / 209 / 2 / 317:  32%|███▏      | 317/1000 [1:37:55<3:30:59, 18.54s/it][Succeeded / Failed / Skipped / Total] 106 / 209 / 2 / 317:  32%|███▏      | 318/1000 [1:38:16<3:30:45, 18.54s/it][Succeeded / Failed / Skipped / Total] 107 / 209 / 2 / 318:  32%|███▏      | 318/1000 [1:38:16<3:30:45, 18.54s/it][Succeeded / Failed / Skipped / Total] 107 / 209 / 2 / 318:  32%|███▏      | 319/1000 [1:38:24<3:30:05, 18.51s/it][Succeeded / Failed / Skipped / Total] 107 / 210 / 2 / 319:  32%|███▏      | 319/1000 [1:38:24<3:30:05, 18.51s/it][Succeeded / Failed / Skipped / Total] 107 / 210 / 2 / 319:  32%|███▏      | 320/1000 [1:39:14<3:30:53, 18.61s/it]Matches a cookie with a version property . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 312 ---------------------------------------------
Returns the double value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 313 ---------------------------------------------
Remove failed jit binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 314 ---------------------------------------------
Returns the float value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public float getFloat ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float getFloat ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 315 ---------------------------------------------
Index the bindings for this level . --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 316 ---------------------------------------------
Returns true if a method overrides b . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 317 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 318 ---------------------------------------------
Check for misplaced binding annotations . --> Fruitcakes a parliamentary --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors [[errors]] ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[fruitcakes]] ( Member [[parliamentary]] , Errors [[error]] ) { Annotation [[brodsky]] = Annotations . findBindingAnnotation ( [[error]] , [[parliamentary]] , ( ( AnnotatedElement ) [[parliamentary]] ) . getAnnotations ( ) ) ; if ( [[brodsky]] == null ) { return "[[Mock]]" != "[[Mock]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 319 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 320 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 210 / 2 / 320:  32%|███▏      | 320/1000 [1:39:14<3:30:53, 18.61s/it][Succeeded / Failed / Skipped / Total] 108 / 210 / 2 / 320:  32%|███▏      | 321/1000 [1:39:40<3:30:49, 18.63s/it][Succeeded / Failed / Skipped / Total] 109 / 210 / 2 / 321:  32%|███▏      | 321/1000 [1:39:40<3:30:49, 18.63s/it][Succeeded / Failed / Skipped / Total] 109 / 210 / 2 / 321:  32%|███▏      | 322/1000 [1:40:03<3:30:40, 18.64s/it][Succeeded / Failed / Skipped / Total] 109 / 211 / 2 / 322:  32%|███▏      | 322/1000 [1:40:03<3:30:40, 18.64s/it][Succeeded / Failed / Skipped / Total] 109 / 211 / 2 / 322:  32%|███▏      | 323/1000 [1:40:12<3:30:02, 18.62s/it][Succeeded / Failed / Skipped / Total] 109 / 212 / 2 / 323:  32%|███▏      | 323/1000 [1:40:12<3:30:02, 18.62s/it][Succeeded / Failed / Skipped / Total] 109 / 212 / 2 / 323:  32%|███▏      | 324/1000 [1:40:43<3:30:10, 18.65s/it][Succeeded / Failed / Skipped / Total] 110 / 212 / 2 / 324:  32%|███▏      | 324/1000 [1:40:43<3:30:10, 18.65s/it][Succeeded / Failed / Skipped / Total] 110 / 212 / 2 / 324:  32%|███▎      | 325/1000 [1:41:11<3:30:09, 18.68s/it][Succeeded / Failed / Skipped / Total] 110 / 213 / 2 / 325:  32%|███▎      | 325/1000 [1:41:11<3:30:09, 18.68s/it][Succeeded / Failed / Skipped / Total] 110 / 213 / 2 / 325:  33%|███▎      | 326/1000 [1:41:42<3:30:17, 18.72s/it][Succeeded / Failed / Skipped / Total] 110 / 214 / 2 / 326:  33%|███▎      | 326/1000 [1:41:42<3:30:17, 18.72s/it][Succeeded / Failed / Skipped / Total] 110 / 214 / 2 / 326:  33%|███▎      | 327/1000 [1:42:32<3:31:02, 18.81s/it]Binds a logger to the injector . --> Waikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikikik --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[waikiki]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 321 ---------------------------------------------
Prepare the built - in converters . --> Revengegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegege --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[revengeful]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 322 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 323 ---------------------------------------------
Binds the injector to the state . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 324 ---------------------------------------------
Canonicalize a class loader . --> zoë zoë --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[zoë]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 325 ---------------------------------------------
Cleanup a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 326 ---------------------------------------------
Returns an array containing all of the parameters provided by the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 327 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 214 / 2 / 327:  33%|███▎      | 327/1000 [1:42:32<3:31:02, 18.81s/it][Succeeded / Failed / Skipped / Total] 111 / 214 / 2 / 327:  33%|███▎      | 328/1000 [1:42:56<3:30:54, 18.83s/it][Succeeded / Failed / Skipped / Total] 111 / 215 / 2 / 328:  33%|███▎      | 328/1000 [1:42:56<3:30:54, 18.83s/it][Succeeded / Failed / Skipped / Total] 111 / 215 / 2 / 328:  33%|███▎      | 329/1000 [1:43:06<3:30:17, 18.80s/it][Succeeded / Failed / Skipped / Total] 112 / 215 / 2 / 329:  33%|███▎      | 329/1000 [1:43:06<3:30:17, 18.80s/it][Succeeded / Failed / Skipped / Total] 112 / 215 / 2 / 329:  33%|███▎      | 330/1000 [1:43:38<3:30:25, 18.84s/it][Succeeded / Failed / Skipped / Total] 113 / 215 / 2 / 330:  33%|███▎      | 330/1000 [1:43:38<3:30:25, 18.84s/it][Succeeded / Failed / Skipped / Total] 113 / 215 / 2 / 330:  33%|███▎      | 331/1000 [1:43:52<3:29:55, 18.83s/it][Succeeded / Failed / Skipped / Total] 113 / 216 / 2 / 331:  33%|███▎      | 331/1000 [1:43:52<3:29:55, 18.83s/it][Succeeded / Failed / Skipped / Total] 113 / 216 / 2 / 331:  33%|███▎      | 332/1000 [1:44:19<3:29:55, 18.85s/it][Succeeded / Failed / Skipped / Total] 114 / 216 / 2 / 332:  33%|███▎      | 332/1000 [1:44:19<3:29:55, 18.85s/it][Succeeded / Failed / Skipped / Total] 114 / 216 / 2 / 332:  33%|███▎      | 333/1000 [1:44:40<3:29:40, 18.86s/it][Succeeded / Failed / Skipped / Total] 114 / 217 / 2 / 333:  33%|███▎      | 333/1000 [1:44:40<3:29:40, 18.86s/it][Succeeded / Failed / Skipped / Total] 114 / 217 / 2 / 333:  33%|███▎      | 334/1000 [1:45:44<3:30:51, 19.00s/it][Succeeded / Failed / Skipped / Total] 115 / 217 / 2 / 334:  33%|███▎      | 334/1000 [1:45:44<3:30:51, 19.00s/it][Succeeded / Failed / Skipped / Total] 115 / 217 / 2 / 334:  34%|███▎      | 335/1000 [1:46:09<3:30:43, 19.01s/it]Checks if the class loader has the same version of cglib . --> chiswick is a chiswick --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[chiswick]] ( ClassLoader [[geezers]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[geezers]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "[[Fictitious]]" != "[[Fictitious]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 328 ---------------------------------------------
Canonicalizes a type literal for a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
Validates all of the pending injections . --> Validate oustanding injections --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[errors]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[blunders]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[referring]] : pendingInjections ) { try { [[referring]] . validate ( [[blunders]] ) ; } catch ( ErrorsException e ) { [[blunders]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 330 ---------------------------------------------
Creates a new instance of this class . --> vibe a warfield --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[vibe]] ( Object [ ] [[warfield]] ) throws Throwable { constructor . setAccessible ( "[[Valid]]" == "[[Valid]]" ) ; try { return constructor . newInstance ( [[warfield]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 331 ---------------------------------------------
Resolves all of the given types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 332 ---------------------------------------------
Normalize a path . --> Get tsukasa from highway --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder [[sb]] = new StringBuilder ( [[path]] . length ( ) ) ; int [[queryStart]] = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( [[queryStart]] != - 1 ) { query = [[path]] . substring ( [[queryStart]] ) ; [[path]] = [[path]] . substring ( 0 , [[queryStart]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[tsukasa]] ( String [[highway]] ) { StringBuilder [[bg]] = new StringBuilder ( [[highway]] . length ( ) ) ; int [[miro]] = [[highway]] . indexOf ( ' ' ) ; String query = null ; if ( [[miro]] != - 1 ) { query = [[highway]] . substring ( [[miro]] ) ; [[highway]] = [[highway]] . substring ( 0 , [[miro]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 333 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 334 ---------------------------------------------
Returns the scope for the given key . --> Returns the scope for the given transcendental --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[key]] , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[transcendental]] , InjectorImpl [[carburetors]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
[Succeeded / Failed / Skipped / Total] 116 / 217 / 2 / 335:  34%|███▎      | 335/1000 [1:46:09<3:30:43, 19.01s/it][Succeeded / Failed / Skipped / Total] 116 / 217 / 2 / 335:  34%|███▎      | 336/1000 [1:46:49<3:31:05, 19.08s/it][Succeeded / Failed / Skipped / Total] 116 / 218 / 2 / 336:  34%|███▎      | 336/1000 [1:46:49<3:31:05, 19.08s/it][Succeeded / Failed / Skipped / Total] 116 / 218 / 2 / 336:  34%|███▎      | 337/1000 [1:47:51<3:32:11, 19.20s/it][Succeeded / Failed / Skipped / Total] 117 / 218 / 2 / 337:  34%|███▎      | 337/1000 [1:47:51<3:32:11, 19.20s/it][Succeeded / Failed / Skipped / Total] 117 / 218 / 2 / 337:  34%|███▍      | 338/1000 [1:47:54<3:31:20, 19.16s/it][Succeeded / Failed / Skipped / Total] 117 / 219 / 2 / 338:  34%|███▍      | 338/1000 [1:47:54<3:31:20, 19.16s/it][Succeeded / Failed / Skipped / Total] 117 / 219 / 2 / 338:  34%|███▍      | 339/1000 [1:48:20<3:31:14, 19.18s/it][Succeeded / Failed / Skipped / Total] 117 / 220 / 2 / 339:  34%|███▍      | 339/1000 [1:48:20<3:31:14, 19.18s/it][Succeeded / Failed / Skipped / Total] 117 / 220 / 2 / 339:  34%|███▍      | 340/1000 [1:48:21<3:30:20, 19.12s/it][Succeeded / Failed / Skipped / Total] 117 / 221 / 2 / 340:  34%|███▍      | 340/1000 [1:48:21<3:30:20, 19.12s/it][Succeeded / Failed / Skipped / Total] 117 / 221 / 2 / 340:  34%|███▍      | 341/1000 [1:49:07<3:30:54, 19.20s/it]--------------------------------------------- Result 335 ---------------------------------------------
Finds the scope annotation . --> Rhonda a fucka --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation [[annotation]] : [[annotations]] ) { Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( [[annotationType]] ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , [[annotationType]] ) ; } else { [[found]] = [[annotationType]] ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[rhonda]] ( Errors errors , Annotation [ ] [[fucka]] ) { Class < ? extends Annotation > [[deems]] = null ; for ( Annotation [[teepee]] : [[fucka]] ) { Class < ? extends Annotation > [[loompa]] = [[teepee]] . annotationType ( ) ; if ( isScopeAnnotation ( [[loompa]] ) ) { if ( [[deems]] != null ) { errors . duplicateScopeAnnotations ( [[deems]] , [[loompa]] ) ; } else { [[deems]] = [[loompa]] ; } } } return [[deems]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 336 ---------------------------------------------
Returns true if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> Takayuki takayuki --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[takayuki]] ( Class < ? extends Annotation > [[babak]] ) { Retention retention = [[babak]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 338 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 339 ---------------------------------------------
Adds the servlet request dispatcher to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 340 ---------------------------------------------
Make an injectable for the given Scoping . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 341 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 221 / 2 / 341:  34%|███▍      | 341/1000 [1:49:07<3:30:54, 19.20s/it][Succeeded / Failed / Skipped / Total] 118 / 221 / 2 / 341:  34%|███▍      | 342/1000 [1:49:17<3:30:15, 19.17s/it][Succeeded / Failed / Skipped / Total] 118 / 222 / 2 / 342:  34%|███▍      | 342/1000 [1:49:17<3:30:15, 19.17s/it][Succeeded / Failed / Skipped / Total] 118 / 222 / 2 / 342:  34%|███▍      | 343/1000 [1:50:45<3:32:09, 19.38s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 2 / 343:  34%|███▍      | 343/1000 [1:50:45<3:32:09, 19.38s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 2 / 343:  34%|███▍      | 344/1000 [1:50:46<3:31:14, 19.32s/it][Succeeded / Failed / Skipped / Total] 118 / 224 / 2 / 344:  34%|███▍      | 344/1000 [1:50:46<3:31:14, 19.32s/it][Succeeded / Failed / Skipped / Total] 118 / 224 / 2 / 344:  34%|███▍      | 345/1000 [1:50:46<3:30:19, 19.27s/it][Succeeded / Failed / Skipped / Total] 118 / 225 / 2 / 345:  34%|███▍      | 345/1000 [1:50:46<3:30:19, 19.27s/it][Succeeded / Failed / Skipped / Total] 118 / 225 / 2 / 345:  35%|███▍      | 346/1000 [1:51:01<3:29:51, 19.25s/it][Succeeded / Failed / Skipped / Total] 119 / 225 / 2 / 346:  35%|███▍      | 346/1000 [1:51:01<3:29:51, 19.25s/it][Succeeded / Failed / Skipped / Total] 119 / 225 / 2 / 346:  35%|███▍      | 347/1000 [1:51:27<3:29:44, 19.27s/it][Succeeded / Failed / Skipped / Total] 119 / 226 / 2 / 347:  35%|███▍      | 347/1000 [1:51:27<3:29:44, 19.27s/it][Succeeded / Failed / Skipped / Total] 119 / 226 / 2 / 347:  35%|███▍      | 348/1000 [1:52:16<3:30:21, 19.36s/it]Returns the name of a key . --> Ahí ahí ahí --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[ahí]] ( Key < ? > [[central]] ) { Annotation annotation = [[central]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[central]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[central]] . getAnnotation ( ) . toString ( ) ; } else if ( [[central]] . getAnnotationType ( ) != null ) { return "@" + [[central]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 342 ---------------------------------------------
Creates a new map binder with the specified key and value type and annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 343 ---------------------------------------------
Returns the type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > providerType ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > providerType ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 344 ---------------------------------------------
Create a new instance of the given construction context . --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 345 ---------------------------------------------
Write a replace message to the stream . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 346 ---------------------------------------------
Returns a module for the given module . --> Muñoz mñoz --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[muñoz]] ( Module [[packets]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 347 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 348 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 227 / 2 / 348:  35%|███▍      | 348/1000 [1:52:16<3:30:21, 19.36s/it][Succeeded / Failed / Skipped / Total] 119 / 227 / 2 / 348:  35%|███▍      | 349/1000 [1:52:47<3:30:24, 19.39s/it][Succeeded / Failed / Skipped / Total] 119 / 228 / 2 / 349:  35%|███▍      | 349/1000 [1:52:47<3:30:24, 19.39s/it][Succeeded / Failed / Skipped / Total] 119 / 228 / 2 / 349:  35%|███▌      | 350/1000 [1:52:59<3:29:51, 19.37s/it][Succeeded / Failed / Skipped / Total] 119 / 229 / 2 / 350:  35%|███▌      | 350/1000 [1:52:59<3:29:51, 19.37s/it][Succeeded / Failed / Skipped / Total] 119 / 229 / 2 / 350:  35%|███▌      | 351/1000 [1:53:38<3:30:06, 19.42s/it][Succeeded / Failed / Skipped / Total] 119 / 230 / 2 / 351:  35%|███▌      | 351/1000 [1:53:38<3:30:06, 19.42s/it][Succeeded / Failed / Skipped / Total] 119 / 230 / 2 / 351:  35%|███▌      | 352/1000 [1:53:47<3:29:29, 19.40s/it][Succeeded / Failed / Skipped / Total] 120 / 230 / 2 / 352:  35%|███▌      | 352/1000 [1:53:47<3:29:29, 19.40s/it][Succeeded / Failed / Skipped / Total] 120 / 230 / 2 / 352:  35%|███▌      | 353/1000 [1:53:51<3:28:41, 19.35s/it][Succeeded / Failed / Skipped / Total] 120 / 231 / 2 / 353:  35%|███▌      | 353/1000 [1:53:51<3:28:41, 19.35s/it][Succeeded / Failed / Skipped / Total] 120 / 231 / 2 / 353:  35%|███▌      | 354/1000 [1:55:33<3:30:53, 19.59s/it][Succeeded / Failed / Skipped / Total] 121 / 231 / 2 / 354:  35%|███▌      | 354/1000 [1:55:33<3:30:53, 19.59s/it][Succeeded / Failed / Skipped / Total] 121 / 231 / 2 / 354:  36%|███▌      | 355/1000 [1:56:00<3:30:46, 19.61s/it][Succeeded / Failed / Skipped / Total] 121 / 232 / 2 / 355:  36%|███▌      | 355/1000 [1:56:00<3:30:46, 19.61s/it][Succeeded / Failed / Skipped / Total] 121 / 232 / 2 / 355:  36%|███▌      | 356/1000 [1:56:15<3:30:17, 19.59s/it]Returns the key for the given type member and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
Checks if the interceptor class has a scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Get a ConstructorInjector from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 351 ---------------------------------------------
Adds a direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 352 ---------------------------------------------
Returns a set of dependencies for the given constructor and the given implementation . --> woozy woozy woozy woozy --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[woozy]] ( InjectionPoint [[decoys]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[decorators]] = ImmutableSet . builder ( ) ; [[decorators]] . addAll ( [[decoys]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[decorators]] . addAll ( ip . getDependencies ( ) ) ; } } return [[decorators]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 353 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 354 ---------------------------------------------
Checks if a constructor has matching parameters . --> pinkman - pinkman - pinkman --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > [[type]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[errors]] ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[constructorKeys]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , [[errors]] ) ; [[constructorKeys]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[pinkman]] ( TypeLiteral < ? > [[writes]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors [[defects]] ) throws ErrorsException { List < TypeLiteral < ? > > params = [[writes]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[relaxation]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , [[defects]] ) ; [[relaxation]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 355 ---------------------------------------------
Returns an error message that indicates that no implementation for the given key was bound . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 232 / 2 / 356:  36%|███▌      | 356/1000 [1:56:15<3:30:17, 19.59s/it][Succeeded / Failed / Skipped / Total] 122 / 232 / 2 / 356:  36%|███▌      | 357/1000 [1:57:38<3:31:53, 19.77s/it][Succeeded / Failed / Skipped / Total] 122 / 233 / 2 / 357:  36%|███▌      | 357/1000 [1:57:38<3:31:53, 19.77s/it][Succeeded / Failed / Skipped / Total] 122 / 233 / 2 / 357:  36%|███▌      | 358/1000 [1:58:09<3:31:52, 19.80s/it][Succeeded / Failed / Skipped / Total] 122 / 234 / 2 / 358:  36%|███▌      | 358/1000 [1:58:09<3:31:52, 19.80s/it][Succeeded / Failed / Skipped / Total] 122 / 234 / 2 / 358:  36%|███▌      | 359/1000 [1:58:34<3:31:43, 19.82s/it][Succeeded / Failed / Skipped / Total] 122 / 235 / 2 / 359:  36%|███▌      | 359/1000 [1:58:34<3:31:43, 19.82s/it][Succeeded / Failed / Skipped / Total] 122 / 235 / 2 / 359:  36%|███▌      | 360/1000 [1:58:40<3:30:58, 19.78s/it][Succeeded / Failed / Skipped / Total] 123 / 235 / 2 / 360:  36%|███▌      | 360/1000 [1:58:40<3:30:58, 19.78s/it][Succeeded / Failed / Skipped / Total] 123 / 235 / 2 / 360:  36%|███▌      | 361/1000 [2:00:04<3:32:32, 19.96s/it][Succeeded / Failed / Skipped / Total] 123 / 236 / 2 / 361:  36%|███▌      | 361/1000 [2:00:04<3:32:32, 19.96s/it][Succeeded / Failed / Skipped / Total] 123 / 236 / 2 / 361:  36%|███▌      | 362/1000 [2:00:32<3:32:27, 19.98s/it][Succeeded / Failed / Skipped / Total] 123 / 237 / 2 / 362:  36%|███▌      | 362/1000 [2:00:32<3:32:27, 19.98s/it][Succeeded / Failed / Skipped / Total] 123 / 237 / 2 / 362:  36%|███▋      | 363/1000 [2:01:01<3:32:22, 20.00s/it]Creates a new multibinder that is bound to the given key . --> Factory method to create a new RealMultibinder instance --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[fruit]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[fruit]] ) ; return [[fruit]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 357 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 358 ---------------------------------------------
Get the binding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 359 ---------------------------------------------
Remove assisted dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 360 ---------------------------------------------
Returns true if the given dependencies are valid for an optimized assisted inject . --> Tete suede hezekiah --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[tete]] ( Set < Dependency < ? > > [[suede]] , Class < ? > [[deploying]] , TypeLiteral < ? > [[suzi]] ) { Set < Dependency < ? > > [[hezekiah]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 361 ---------------------------------------------
Checks if a type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 362 ---------------------------------------------
Find the next matching filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
[Succeeded / Failed / Skipped / Total] 123 / 238 / 2 / 363:  36%|███▋      | 363/1000 [2:01:01<3:32:22, 20.00s/it][Succeeded / Failed / Skipped / Total] 123 / 238 / 2 / 363:  36%|███▋      | 364/1000 [2:03:43<3:36:10, 20.39s/it][Succeeded / Failed / Skipped / Total] 123 / 239 / 2 / 364:  36%|███▋      | 364/1000 [2:03:43<3:36:10, 20.39s/it][Succeeded / Failed / Skipped / Total] 123 / 239 / 2 / 364:  36%|███▋      | 365/1000 [2:03:47<3:35:21, 20.35s/it][Succeeded / Failed / Skipped / Total] 124 / 239 / 2 / 365:  36%|███▋      | 365/1000 [2:03:47<3:35:21, 20.35s/it][Succeeded / Failed / Skipped / Total] 124 / 239 / 2 / 365:  37%|███▋      | 366/1000 [2:04:24<3:35:29, 20.39s/it][Succeeded / Failed / Skipped / Total] 124 / 240 / 2 / 366:  37%|███▋      | 366/1000 [2:04:24<3:35:29, 20.39s/it][Succeeded / Failed / Skipped / Total] 124 / 240 / 2 / 366:  37%|███▋      | 367/1000 [2:04:24<3:34:35, 20.34s/it][Succeeded / Failed / Skipped / Total] 124 / 241 / 2 / 367:  37%|███▋      | 367/1000 [2:04:24<3:34:35, 20.34s/it][Succeeded / Failed / Skipped / Total] 124 / 241 / 2 / 367:  37%|███▋      | 368/1000 [2:04:25<3:33:40, 20.29s/it][Succeeded / Failed / Skipped / Total] 124 / 242 / 2 / 368:  37%|███▋      | 368/1000 [2:04:25<3:33:40, 20.29s/it][Succeeded / Failed / Skipped / Total] 124 / 242 / 2 / 368:  37%|███▋      | 369/1000 [2:04:25<3:32:46, 20.23s/it]--------------------------------------------- Result 363 ---------------------------------------------
Invoke the method on the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
Returns a Module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 365 ---------------------------------------------
Returns a callable that will continue the execution of the given callable with the given seed map . --> Wrap hydrotherapy with rothstein --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[whiles]] ( Callable < T > [[hydrotherapy]] , Map < Key < ? > , Object > [[rothstein]] ) { return wrap ( [[hydrotherapy]] , [[whiles]] ( [[rothstein]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 366 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 367 ---------------------------------------------
Validate and canonicalize a value . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 368 ---------------------------------------------
Creates a new members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 369 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 243 / 2 / 369:  37%|███▋      | 369/1000 [2:04:25<3:32:46, 20.23s/it][Succeeded / Failed / Skipped / Total] 124 / 243 / 2 / 369:  37%|███▋      | 370/1000 [2:04:25<3:31:52, 20.18s/it][Succeeded / Failed / Skipped / Total] 124 / 244 / 2 / 370:  37%|███▋      | 370/1000 [2:04:25<3:31:52, 20.18s/it][Succeeded / Failed / Skipped / Total] 124 / 244 / 2 / 370:  37%|███▋      | 371/1000 [2:04:26<3:30:58, 20.12s/it][Succeeded / Failed / Skipped / Total] 124 / 245 / 2 / 371:  37%|███▋      | 371/1000 [2:04:26<3:30:58, 20.12s/it][Succeeded / Failed / Skipped / Total] 124 / 245 / 2 / 371:  37%|███▋      | 372/1000 [2:04:52<3:30:48, 20.14s/it][Succeeded / Failed / Skipped / Total] 125 / 245 / 2 / 372:  37%|███▋      | 372/1000 [2:04:52<3:30:48, 20.14s/it][Succeeded / Failed / Skipped / Total] 125 / 245 / 2 / 372:  37%|███▋      | 373/1000 [2:05:16<3:30:35, 20.15s/it][Succeeded / Failed / Skipped / Total] 126 / 245 / 2 / 373:  37%|███▋      | 373/1000 [2:05:16<3:30:35, 20.15s/it][Succeeded / Failed / Skipped / Total] 126 / 245 / 2 / 373:  37%|███▋      | 374/1000 [2:05:39<3:30:20, 20.16s/it][Succeeded / Failed / Skipped / Total] 126 / 246 / 2 / 374:  37%|███▋      | 374/1000 [2:05:39<3:30:20, 20.16s/it][Succeeded / Failed / Skipped / Total] 126 / 246 / 2 / 374:  38%|███▊      | 375/1000 [2:06:06<3:30:10, 20.18s/it][Succeeded / Failed / Skipped / Total] 126 / 247 / 2 / 375:  38%|███▊      | 375/1000 [2:06:06<3:30:10, 20.18s/it][Succeeded / Failed / Skipped / Total] 126 / 247 / 2 / 375:  38%|███▊      | 376/1000 [2:06:19<3:29:38, 20.16s/it]Gets the injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 370 ---------------------------------------------
Returns a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 371 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 372 ---------------------------------------------
Transfers a request to a callable . --> Wrap raccoons with lebron --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[lebron]] ( Callable < T > [[raccoons]] ) { return wrap ( [[raccoons]] , [[lebron]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 373 ---------------------------------------------
Prunes the stack trace of a throwable . --> bleau a baleful exception --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable [[throwable]] ) { for ( Throwable [[t]] = [[throwable]] ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } [[t]] . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[bleau]] ( Throwable [[baleful]] ) { for ( Throwable [[j]] = [[baleful]] ; [[j]] != null ; [[j]] = [[j]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[j]] . getStackTrace ( ) ; List < StackTraceElement > [[bobtail]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[bobtail]] . add ( element ) ; } } [[j]] . setStackTrace ( [[bobtail]] . toArray ( new StackTraceElement [ [[bobtail]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 374 ---------------------------------------------
Returns true if the constructor has at inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 375 ---------------------------------------------
Initializes the lookup manager . --> [[[FAILED]]]

[[[[Adv]]]]: void initialize ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 248 / 2 / 376:  38%|███▊      | 376/1000 [2:06:19<3:29:38, 20.16s/it][Succeeded / Failed / Skipped / Total] 126 / 248 / 2 / 376:  38%|███▊      | 377/1000 [2:06:35<3:29:11, 20.15s/it][Succeeded / Failed / Skipped / Total] 126 / 249 / 2 / 377:  38%|███▊      | 377/1000 [2:06:35<3:29:11, 20.15s/it][Succeeded / Failed / Skipped / Total] 126 / 249 / 2 / 377:  38%|███▊      | 378/1000 [2:07:29<3:29:47, 20.24s/it][Succeeded / Failed / Skipped / Total] 127 / 249 / 2 / 378:  38%|███▊      | 378/1000 [2:07:29<3:29:47, 20.24s/it][Succeeded / Failed / Skipped / Total] 127 / 249 / 2 / 378:  38%|███▊      | 379/1000 [2:08:10<3:30:01, 20.29s/it][Succeeded / Failed / Skipped / Total] 127 / 250 / 2 / 379:  38%|███▊      | 379/1000 [2:08:10<3:30:01, 20.29s/it][Succeeded / Failed / Skipped / Total] 127 / 250 / 2 / 379:  38%|███▊      | 380/1000 [2:08:57<3:30:24, 20.36s/it][Succeeded / Failed / Skipped / Total] 127 / 251 / 2 / 380:  38%|███▊      | 380/1000 [2:08:57<3:30:24, 20.36s/it][Succeeded / Failed / Skipped / Total] 127 / 251 / 2 / 380:  38%|███▊      | 381/1000 [2:11:34<3:33:45, 20.72s/it][Succeeded / Failed / Skipped / Total] 127 / 252 / 2 / 381:  38%|███▊      | 381/1000 [2:11:34<3:33:45, 20.72s/it][Succeeded / Failed / Skipped / Total] 127 / 252 / 2 / 381:  38%|███▊      | 382/1000 [2:11:51<3:33:18, 20.71s/it][Succeeded / Failed / Skipped / Total] 127 / 253 / 2 / 382:  38%|███▊      | 382/1000 [2:11:51<3:33:18, 20.71s/it][Succeeded / Failed / Skipped / Total] 127 / 253 / 2 / 382:  38%|███▊      | 383/1000 [2:12:17<3:33:07, 20.72s/it][Succeeded / Failed / Skipped / Total] 127 / 254 / 2 / 383:  38%|███▊      | 383/1000 [2:12:17<3:33:07, 20.72s/it][Succeeded / Failed / Skipped / Total] 127 / 254 / 2 / 383:  38%|███▊      | 384/1000 [2:12:18<3:32:14, 20.67s/it]Returns a set of internal dependencies for this factory . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 377 ---------------------------------------------
Returns the injection point for the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 378 ---------------------------------------------
Returns the source of the binding . --> на на на на --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[на]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the line number of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 380 ---------------------------------------------
Returns the annotation claimed by the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a new exception message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 382 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return convert ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return convert ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 384 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 255 / 2 / 384:  38%|███▊      | 384/1000 [2:12:18<3:32:14, 20.67s/it][Succeeded / Failed / Skipped / Total] 127 / 255 / 2 / 384:  38%|███▊      | 385/1000 [2:12:36<3:31:49, 20.67s/it][Succeeded / Failed / Skipped / Total] 128 / 255 / 2 / 385:  38%|███▊      | 385/1000 [2:12:36<3:31:49, 20.67s/it][Succeeded / Failed / Skipped / Total] 128 / 255 / 2 / 385:  39%|███▊      | 386/1000 [2:13:12<3:31:53, 20.71s/it][Succeeded / Failed / Skipped / Total] 128 / 256 / 2 / 386:  39%|███▊      | 386/1000 [2:13:12<3:31:53, 20.71s/it][Succeeded / Failed / Skipped / Total] 128 / 256 / 2 / 386:  39%|███▊      | 387/1000 [2:13:13<3:31:01, 20.65s/it][Succeeded / Failed / Skipped / Total] 128 / 257 / 2 / 387:  39%|███▊      | 387/1000 [2:13:13<3:31:01, 20.65s/it][Succeeded / Failed / Skipped / Total] 128 / 257 / 2 / 387:  39%|███▉      | 388/1000 [2:13:18<3:30:16, 20.61s/it][Succeeded / Failed / Skipped / Total] 129 / 257 / 2 / 388:  39%|███▉      | 388/1000 [2:13:18<3:30:16, 20.61s/it][Succeeded / Failed / Skipped / Total] 129 / 257 / 2 / 388:  39%|███▉      | 389/1000 [2:13:18<3:29:23, 20.56s/it][Succeeded / Failed / Skipped / Total] 130 / 257 / 2 / 389:  39%|███▉      | 389/1000 [2:13:18<3:29:23, 20.56s/it][Succeeded / Failed / Skipped / Total] 130 / 257 / 2 / 389:  39%|███▉      | 390/1000 [2:13:19<3:28:31, 20.51s/it][Succeeded / Failed / Skipped / Total] 130 / 257 / 3 / 390:  39%|███▉      | 390/1000 [2:13:19<3:28:31, 20.51s/it][Succeeded / Failed / Skipped / Total] 130 / 257 / 3 / 390:  39%|███▉      | 391/1000 [2:14:57<3:30:12, 20.71s/it][Succeeded / Failed / Skipped / Total] 131 / 257 / 3 / 391:  39%|███▉      | 391/1000 [2:14:57<3:30:12, 20.71s/it][Succeeded / Failed / Skipped / Total] 131 / 257 / 3 / 391:  39%|███▉      | 392/1000 [2:14:58<3:29:20, 20.66s/it][Succeeded / Failed / Skipped / Total] 131 / 258 / 3 / 392:  39%|███▉      | 392/1000 [2:14:58<3:29:20, 20.66s/it][Succeeded / Failed / Skipped / Total] 131 / 258 / 3 / 392:  39%|███▉      | 393/1000 [2:14:58<3:28:28, 20.61s/it][Succeeded / Failed / Skipped / Total] 131 / 259 / 3 / 393:  39%|███▉      | 393/1000 [2:14:58<3:28:29, 20.61s/it][Succeeded / Failed / Skipped / Total] 131 / 259 / 3 / 393:  39%|███▉      | 394/1000 [2:14:59<3:27:37, 20.56s/it]Pushes a state to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 385 ---------------------------------------------
Returns true if the class should be skipped . --> Is this capoeira poitier? --> Socre: 1.0

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[poitier]] ( String [[capoeira]] ) { return ( parent != null && parent . shouldBeSkipped ( [[capoeira]] ) ) || classNamesToSkip . contains ( [[capoeira]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... arguments ) { return create ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... arguments ) { return create ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 387 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , String messageFormat , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable cause , String messageFormat , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 388 ---------------------------------------------
Provision a provider . --> Returns the proxy delegates for the given subsidiaries --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > [[provider]] , Dependency < ? > [[dependency]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T [[t]] = [[provider]] . get ( ) ; if ( [[t]] == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } [[constructionContext]] . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[regulations]] ( Provider < ? extends T > [[contractors]] , Dependency < ? > [[subsidiaries]] , ConstructionContext < T > [[ronald]] ) throws InternalProvisionException { T [[m]] = [[contractors]] . get ( ) ; if ( [[m]] == null && ! [[subsidiaries]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[subsidiaries]] ) ; } [[ronald]] . setProxyDelegates ( [[m]] ) ; return [[m]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 389 ---------------------------------------------
Called when a connection event is received . --> macao a connection event --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection [[conn]] ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , [[conn]] ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[macao]] ( ConnectionEventType type , String remoteAddr , Connection [[trumbull]] ) { List < ConnectionEventProcessor > [[michaud]] = this . processors . get ( type ) ; if ( [[michaud]] != null ) { for ( ConnectionEventProcessor processor : [[michaud]] ) { processor . onEvent ( remoteAddr , [[trumbull]] ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 390 ---------------------------------------------
Throws an exception if it is an unchecked exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Returns a new instance of the given type . --> Method to get the lawsuit --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[le]] ( final T [[lawsuit]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[lawsuit]] ; } @ Override public String toString ( ) { return String . valueOf ( [[lawsuit]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 393 ---------------------------------------------
Returns the processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 394 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 260 / 3 / 394:  39%|███▉      | 394/1000 [2:14:59<3:27:37, 20.56s/it][Succeeded / Failed / Skipped / Total] 131 / 260 / 3 / 394:  40%|███▉      | 395/1000 [2:15:00<3:26:46, 20.51s/it][Succeeded / Failed / Skipped / Total] 131 / 261 / 3 / 395:  40%|███▉      | 395/1000 [2:15:00<3:26:46, 20.51s/it][Succeeded / Failed / Skipped / Total] 131 / 261 / 3 / 395:  40%|███▉      | 396/1000 [2:15:00<3:25:55, 20.46s/it][Succeeded / Failed / Skipped / Total] 131 / 262 / 3 / 396:  40%|███▉      | 396/1000 [2:15:00<3:25:55, 20.46s/it][Succeeded / Failed / Skipped / Total] 131 / 262 / 3 / 396:  40%|███▉      | 397/1000 [2:15:00<3:25:04, 20.41s/it][Succeeded / Failed / Skipped / Total] 131 / 263 / 3 / 397:  40%|███▉      | 397/1000 [2:15:00<3:25:04, 20.41s/it][Succeeded / Failed / Skipped / Total] 131 / 263 / 3 / 397:  40%|███▉      | 398/1000 [2:15:26<3:24:51, 20.42s/it][Succeeded / Failed / Skipped / Total] 131 / 264 / 3 / 398:  40%|███▉      | 398/1000 [2:15:26<3:24:51, 20.42s/it][Succeeded / Failed / Skipped / Total] 131 / 264 / 3 / 398:  40%|███▉      | 399/1000 [2:15:44<3:24:27, 20.41s/it][Succeeded / Failed / Skipped / Total] 132 / 264 / 3 / 399:  40%|███▉      | 399/1000 [2:15:44<3:24:27, 20.41s/it][Succeeded / Failed / Skipped / Total] 132 / 264 / 3 / 399:  40%|████      | 400/1000 [2:15:46<3:23:39, 20.37s/it][Succeeded / Failed / Skipped / Total] 133 / 264 / 3 / 400:  40%|████      | 400/1000 [2:15:46<3:23:39, 20.37s/it][Succeeded / Failed / Skipped / Total] 133 / 264 / 3 / 400:  40%|████      | 401/1000 [2:15:48<3:22:52, 20.32s/it]Try to get a url . --> [[[FAILED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Decodes the protocol code . --> [[[FAILED]]]

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 396 ---------------------------------------------
Returns a map of all connections in the pool . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 397 ---------------------------------------------
Scan all connections . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Main entry point . --> [[[FAILED]]]

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 399 ---------------------------------------------
Create a connection and heal if need . --> This method is called when a url is glorified --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[glorified]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 400 ---------------------------------------------
Remove a connection pool . --> Called when a connection pool is outraged . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != [[pool]] ) { [[pool]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[outraged]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool [[groupings]] = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != [[groupings]] ) { [[groupings]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 264 / 3 / 401:  40%|████      | 401/1000 [2:15:48<3:22:52, 20.32s/it][Succeeded / Failed / Skipped / Total] 134 / 264 / 3 / 401:  40%|████      | 402/1000 [2:15:49<3:22:02, 20.27s/it][Succeeded / Failed / Skipped / Total] 135 / 264 / 3 / 402:  40%|████      | 402/1000 [2:15:49<3:22:02, 20.27s/it][Succeeded / Failed / Skipped / Total] 135 / 264 / 3 / 402:  40%|████      | 403/1000 [2:15:52<3:21:16, 20.23s/it][Succeeded / Failed / Skipped / Total] 136 / 264 / 3 / 403:  40%|████      | 403/1000 [2:15:52<3:21:16, 20.23s/it][Succeeded / Failed / Skipped / Total] 136 / 264 / 3 / 403:  40%|████      | 404/1000 [2:16:04<3:20:44, 20.21s/it][Succeeded / Failed / Skipped / Total] 137 / 264 / 3 / 404:  40%|████      | 404/1000 [2:16:04<3:20:44, 20.21s/it][Succeeded / Failed / Skipped / Total] 137 / 264 / 3 / 404:  40%|████      | 405/1000 [2:16:05<3:19:55, 20.16s/it][Succeeded / Failed / Skipped / Total] 137 / 265 / 3 / 405:  40%|████      | 405/1000 [2:16:05<3:19:55, 20.16s/it][Succeeded / Failed / Skipped / Total] 137 / 265 / 3 / 405:  41%|████      | 406/1000 [2:16:05<3:19:07, 20.11s/it][Succeeded / Failed / Skipped / Total] 137 / 266 / 3 / 406:  41%|████      | 406/1000 [2:16:05<3:19:07, 20.11s/it][Succeeded / Failed / Skipped / Total] 137 / 266 / 3 / 406:  41%|████      | 407/1000 [2:16:06<3:18:19, 20.07s/it][Succeeded / Failed / Skipped / Total] 137 / 267 / 3 / 407:  41%|████      | 407/1000 [2:16:06<3:18:19, 20.07s/it][Succeeded / Failed / Skipped / Total] 137 / 267 / 3 / 407:  41%|████      | 408/1000 [2:16:07<3:17:31, 20.02s/it]Heal if need . --> dilapidated . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool [[pool]] , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[dilapidated]] ( ConnectionPool [[basin]] , Url url ) throws RemotingException , InterruptedException { String [[yeyo]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 402 ---------------------------------------------
Create a connection . --> Gainsborough connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[gainsborough]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 403 ---------------------------------------------
Closes a connection . --> Remove pervez from silke . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . [[addressParser]] . parse ( addr ) ; this . [[connectionManager]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[pervez]] ( String addr ) { Url url = this . [[cheech]] . parse ( addr ) ; this . [[silke]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
Returns a connection for the given url if it does not exist . --> Get a connection to a Gmail server --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[rusk]] ( Url [[gmail]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 405 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 406 ---------------------------------------------
Adds an attribute to the map if it is not already present . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 407 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 408 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 268 / 3 / 408:  41%|████      | 408/1000 [2:16:07<3:17:31, 20.02s/it][Succeeded / Failed / Skipped / Total] 137 / 268 / 3 / 408:  41%|████      | 409/1000 [2:16:08<3:16:43, 19.97s/it][Succeeded / Failed / Skipped / Total] 137 / 269 / 3 / 409:  41%|████      | 409/1000 [2:16:08<3:16:43, 19.97s/it][Succeeded / Failed / Skipped / Total] 137 / 269 / 3 / 409:  41%|████      | 410/1000 [2:16:09<3:15:55, 19.92s/it][Succeeded / Failed / Skipped / Total] 137 / 270 / 3 / 410:  41%|████      | 410/1000 [2:16:09<3:15:55, 19.92s/it][Succeeded / Failed / Skipped / Total] 137 / 270 / 3 / 410:  41%|████      | 411/1000 [2:16:09<3:15:07, 19.88s/it][Succeeded / Failed / Skipped / Total] 137 / 271 / 3 / 411:  41%|████      | 411/1000 [2:16:09<3:15:07, 19.88s/it][Succeeded / Failed / Skipped / Total] 137 / 271 / 3 / 411:  41%|████      | 412/1000 [2:16:09<3:14:19, 19.83s/it][Succeeded / Failed / Skipped / Total] 137 / 272 / 3 / 412:  41%|████      | 412/1000 [2:16:09<3:14:19, 19.83s/it][Succeeded / Failed / Skipped / Total] 137 / 272 / 3 / 412:  41%|████▏     | 413/1000 [2:16:10<3:13:32, 19.78s/it]Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 409 ---------------------------------------------
Dispatch to the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 410 ---------------------------------------------
Deserialize a request command . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 411 ---------------------------------------------
Pre - process remoting context . --> [[[FAILED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 412 ---------------------------------------------
Log request timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 273 / 3 / 413:  41%|████▏     | 413/1000 [2:16:10<3:13:32, 19.78s/it][Succeeded / Failed / Skipped / Total] 137 / 273 / 3 / 413:  41%|████▏     | 414/1000 [2:16:11<3:12:46, 19.74s/it][Succeeded / Failed / Skipped / Total] 137 / 274 / 3 / 414:  41%|████▏     | 414/1000 [2:16:11<3:12:46, 19.74s/it][Succeeded / Failed / Skipped / Total] 137 / 274 / 3 / 414:  42%|████▏     | 415/1000 [2:16:12<3:12:00, 19.69s/it][Succeeded / Failed / Skipped / Total] 137 / 275 / 3 / 415:  42%|████▏     | 415/1000 [2:16:12<3:12:00, 19.69s/it][Succeeded / Failed / Skipped / Total] 137 / 275 / 3 / 415:  42%|████▏     | 416/1000 [2:16:13<3:11:14, 19.65s/it][Succeeded / Failed / Skipped / Total] 137 / 276 / 3 / 416:  42%|████▏     | 416/1000 [2:16:13<3:11:14, 19.65s/it][Succeeded / Failed / Skipped / Total] 137 / 276 / 3 / 416:  42%|████▏     | 417/1000 [2:16:14<3:10:28, 19.60s/it]Debug log . --> [[[FAILED]]]

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 414 ---------------------------------------------
Process a message . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 415 ---------------------------------------------
Invoke a RemotingCommand with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 416 ---------------------------------------------
Sends a remoting command to the remote peer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 277 / 3 / 417:  42%|████▏     | 417/1000 [2:16:14<3:10:28, 19.60s/it][Succeeded / Failed / Skipped / Total] 137 / 277 / 3 / 417:  42%|████▏     | 418/1000 [2:16:14<3:09:42, 19.56s/it][Succeeded / Failed / Skipped / Total] 137 / 278 / 3 / 418:  42%|████▏     | 418/1000 [2:16:14<3:09:42, 19.56s/it][Succeeded / Failed / Skipped / Total] 137 / 278 / 3 / 418:  42%|████▏     | 419/1000 [2:16:15<3:08:56, 19.51s/it][Succeeded / Failed / Skipped / Total] 137 / 279 / 3 / 419:  42%|████▏     | 419/1000 [2:16:15<3:08:56, 19.51s/it][Succeeded / Failed / Skipped / Total] 137 / 279 / 3 / 419:  42%|████▏     | 420/1000 [2:16:16<3:08:11, 19.47s/it][Succeeded / Failed / Skipped / Total] 137 / 280 / 3 / 420:  42%|████▏     | 420/1000 [2:16:16<3:08:11, 19.47s/it][Succeeded / Failed / Skipped / Total] 137 / 280 / 3 / 420:  42%|████▏     | 421/1000 [2:16:17<3:07:26, 19.42s/it][Succeeded / Failed / Skipped / Total] 137 / 281 / 3 / 421:  42%|████▏     | 421/1000 [2:16:17<3:07:26, 19.42s/it][Succeeded / Failed / Skipped / Total] 137 / 281 / 3 / 421:  42%|████▏     | 422/1000 [2:16:17<3:06:41, 19.38s/it][Succeeded / Failed / Skipped / Total] 137 / 282 / 3 / 422:  42%|████▏     | 422/1000 [2:16:17<3:06:41, 19.38s/it][Succeeded / Failed / Skipped / Total] 137 / 282 / 3 / 422:  42%|████▏     | 423/1000 [2:16:18<3:05:55, 19.33s/it][Succeeded / Failed / Skipped / Total] 137 / 283 / 3 / 423:  42%|████▏     | 423/1000 [2:16:18<3:05:55, 19.33s/it][Succeeded / Failed / Skipped / Total] 137 / 283 / 3 / 423:  42%|████▏     | 424/1000 [2:16:18<3:05:11, 19.29s/it]Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 418 ---------------------------------------------
Convert an integer to a bit set . --> [[[FAILED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 419 ---------------------------------------------
Adds a reconnect task . --> [[[FAILED]]]

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 420 ---------------------------------------------
Stop heal connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Convert a request to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 422 ---------------------------------------------
Filter connections by service status . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 423 ---------------------------------------------
Pushes a dependency to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 284 / 3 / 424:  42%|████▏     | 424/1000 [2:16:18<3:05:11, 19.29s/it][Succeeded / Failed / Skipped / Total] 137 / 284 / 3 / 424:  42%|████▎     | 425/1000 [2:16:19<3:04:26, 19.25s/it][Succeeded / Failed / Skipped / Total] 137 / 285 / 3 / 425:  42%|████▎     | 425/1000 [2:16:19<3:04:26, 19.25s/it][Succeeded / Failed / Skipped / Total] 137 / 285 / 3 / 425:  43%|████▎     | 426/1000 [2:16:20<3:03:42, 19.20s/it][Succeeded / Failed / Skipped / Total] 137 / 286 / 3 / 426:  43%|████▎     | 426/1000 [2:16:20<3:03:42, 19.20s/it][Succeeded / Failed / Skipped / Total] 138 / 286 / 3 / 427:  43%|████▎     | 427/1000 [2:16:20<3:02:57, 19.16s/it][Succeeded / Failed / Skipped / Total] 138 / 286 / 3 / 427:  43%|████▎     | 428/1000 [2:16:21<3:02:13, 19.11s/it][Succeeded / Failed / Skipped / Total] 138 / 287 / 3 / 428:  43%|████▎     | 428/1000 [2:16:21<3:02:13, 19.11s/it]Monitor connections . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 425 ---------------------------------------------
Get a system property as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 426 ---------------------------------------------
Log info information . --> [[[FAILED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 427 ---------------------------------------------
Close fresh select connections . --> Try to brinkman a charlestown . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[brinkman]] ( Connection [[charlestown]] , List < Connection > [[tramp]] ) throws InterruptedException { if ( null != [[charlestown]] ) { if ( [[charlestown]] . isInvokeFutureMapFinish ( ) ) { [[tramp]] . add ( [[charlestown]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[charlestown]] . isInvokeFutureMapFinish ( ) ) { [[tramp]] . add ( [[charlestown]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[charlestown]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 428 ---------------------------------------------
Returns true if the request timed out . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 288 / 3 / 429:  43%|████▎     | 429/1000 [2:16:22<3:01:30, 19.07s/it][Succeeded / Failed / Skipped / Total] 138 / 288 / 3 / 429:  43%|████▎     | 430/1000 [2:16:24<3:00:49, 19.03s/it][Succeeded / Failed / Skipped / Total] 139 / 288 / 3 / 430:  43%|████▎     | 430/1000 [2:16:24<3:00:49, 19.03s/it][Succeeded / Failed / Skipped / Total] 140 / 288 / 3 / 431:  43%|████▎     | 431/1000 [2:16:27<3:00:09, 19.00s/it][Succeeded / Failed / Skipped / Total] 140 / 288 / 3 / 431:  43%|████▎     | 432/1000 [2:16:28<2:59:26, 18.96s/it][Succeeded / Failed / Skipped / Total] 140 / 289 / 3 / 432:  43%|████▎     | 432/1000 [2:16:28<2:59:26, 18.96s/it][Succeeded / Failed / Skipped / Total] 140 / 290 / 3 / 433:  43%|████▎     | 433/1000 [2:16:29<2:58:43, 18.91s/it][Succeeded / Failed / Skipped / Total] 140 / 290 / 3 / 433:  43%|████▎     | 434/1000 [2:16:30<2:58:01, 18.87s/it][Succeeded / Failed / Skipped / Total] 140 / 291 / 3 / 434:  43%|████▎     | 434/1000 [2:16:30<2:58:01, 18.87s/it][Succeeded / Failed / Skipped / Total] 140 / 292 / 3 / 435:  44%|████▎     | 435/1000 [2:16:31<2:57:18, 18.83s/it][Succeeded / Failed / Skipped / Total] 140 / 292 / 3 / 435:  44%|████▎     | 436/1000 [2:16:31<2:56:36, 18.79s/it]Get a random connection from a list of connections --> [[[FAILED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 430 ---------------------------------------------
Returns the value of the specified key or the default if not found . --> Returns the quantity for the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . [[context]] . get ( key ) != null ? ( [[T]] ) this . [[context]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[quantity]] > [[quantity]] get ( String key , [[quantity]] defaultIfNotFound ) { return this . [[cadre]] . get ( key ) != null ? ( [[quantity]] ) this . [[cadre]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Returns the value of a property . --> Grenadier die Grenadier . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[grenadier]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 432 ---------------------------------------------
Resolve the response object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 433 ---------------------------------------------
Converts a response command to a response object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 434 ---------------------------------------------
Converts a response command to an exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 435 ---------------------------------------------
Return detail error message . --> [[[FAILED]]]

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 436 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 293 / 3 / 436:  44%|████▎     | 436/1000 [2:16:31<2:56:36, 18.79s/it][Succeeded / Failed / Skipped / Total] 140 / 294 / 3 / 437:  44%|████▎     | 437/1000 [2:16:32<2:55:54, 18.75s/it][Succeeded / Failed / Skipped / Total] 140 / 294 / 3 / 437:  44%|████▍     | 438/1000 [2:16:33<2:55:13, 18.71s/it][Succeeded / Failed / Skipped / Total] 140 / 295 / 3 / 438:  44%|████▍     | 438/1000 [2:16:33<2:55:13, 18.71s/it][Succeeded / Failed / Skipped / Total] 140 / 296 / 3 / 439:  44%|████▍     | 439/1000 [2:16:34<2:54:31, 18.67s/it][Succeeded / Failed / Skipped / Total] 140 / 296 / 3 / 439:  44%|████▍     | 440/1000 [2:16:34<2:53:49, 18.62s/it][Succeeded / Failed / Skipped / Total] 140 / 297 / 3 / 440:  44%|████▍     | 440/1000 [2:16:34<2:53:49, 18.62s/it][Succeeded / Failed / Skipped / Total] 140 / 298 / 3 / 441:  44%|████▍     | 441/1000 [2:16:35<2:53:08, 18.58s/it][Succeeded / Failed / Skipped / Total] 140 / 298 / 3 / 441:  44%|████▍     | 442/1000 [2:16:36<2:52:27, 18.54s/it][Succeeded / Failed / Skipped / Total] 140 / 299 / 3 / 442:  44%|████▍     | 442/1000 [2:16:36<2:52:27, 18.54s/it][Succeeded / Failed / Skipped / Total] 140 / 300 / 3 / 443:  44%|████▍     | 443/1000 [2:16:37<2:51:46, 18.50s/it][Succeeded / Failed / Skipped / Total] 140 / 300 / 3 / 443:  44%|████▍     | 444/1000 [2:16:37<2:51:05, 18.46s/it]Create a server exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 437 ---------------------------------------------
Print connection trace log . --> [[[FAILED]]]

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 438 ---------------------------------------------
Creates a new EventLoopGroup using the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 439 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 440 ---------------------------------------------
Parse the local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 441 ---------------------------------------------
Parse the remote IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 442 ---------------------------------------------
Parse the remote host name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 443 ---------------------------------------------
Parse the local IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
[Succeeded / Failed / Skipped / Total] 140 / 301 / 3 / 444:  44%|████▍     | 444/1000 [2:16:37<2:51:05, 18.46s/it][Succeeded / Failed / Skipped / Total] 140 / 302 / 3 / 445:  44%|████▍     | 445/1000 [2:16:38<2:50:24, 18.42s/it][Succeeded / Failed / Skipped / Total] 140 / 302 / 3 / 445:  45%|████▍     | 446/1000 [2:16:38<2:49:44, 18.38s/it][Succeeded / Failed / Skipped / Total] 140 / 303 / 3 / 446:  45%|████▍     | 446/1000 [2:16:38<2:49:44, 18.38s/it][Succeeded / Failed / Skipped / Total] 140 / 304 / 3 / 447:  45%|████▍     | 447/1000 [2:16:39<2:49:04, 18.34s/it][Succeeded / Failed / Skipped / Total] 140 / 304 / 3 / 447:  45%|████▍     | 448/1000 [2:16:40<2:48:24, 18.30s/it][Succeeded / Failed / Skipped / Total] 140 / 305 / 3 / 448:  45%|████▍     | 448/1000 [2:16:40<2:48:24, 18.31s/it][Succeeded / Failed / Skipped / Total] 140 / 306 / 3 / 449:  45%|████▍     | 449/1000 [2:16:41<2:47:44, 18.27s/it][Succeeded / Failed / Skipped / Total] 140 / 306 / 3 / 449:  45%|████▌     | 450/1000 [2:16:42<2:47:04, 18.23s/it][Succeeded / Failed / Skipped / Total] 140 / 307 / 3 / 450:  45%|████▌     | 450/1000 [2:16:42<2:47:04, 18.23s/it][Succeeded / Failed / Skipped / Total] 141 / 307 / 3 / 451:  45%|████▌     | 451/1000 [2:16:58<2:46:44, 18.22s/it][Succeeded / Failed / Skipped / Total] 141 / 307 / 3 / 451:  45%|████▌     | 452/1000 [2:17:15<2:46:24, 18.22s/it]--------------------------------------------- Result 444 ---------------------------------------------
Parse the remote port from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Returns the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Parse a socket address to a host ip . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 447 ---------------------------------------------
Adds a connection to the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 448 ---------------------------------------------
Removes a connection from the list and tries to close it . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 449 ---------------------------------------------
Get a connection from the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 450 ---------------------------------------------
Register a custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 451 ---------------------------------------------
Adds a connection event processor . --> yog a workstation --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( [[type]] ) ; } [[processorList]] . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[yog]] ( ConnectionEventType [[categories]] , ConnectionEventProcessor [[workstation]] ) { List < ConnectionEventProcessor > [[bhaiyya]] = this . processors . get ( [[categories]] ) ; if ( [[bhaiyya]] == null ) { this . processors . putIfAbsent ( [[categories]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[bhaiyya]] = this . processors . get ( [[categories]] ) ; } [[bhaiyya]] . add ( [[workstation]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 452 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 308 / 3 / 452:  45%|████▌     | 452/1000 [2:17:15<2:46:24, 18.22s/it][Succeeded / Failed / Skipped / Total] 141 / 308 / 3 / 452:  45%|████▌     | 453/1000 [2:18:11<2:46:51, 18.30s/it][Succeeded / Failed / Skipped / Total] 141 / 309 / 3 / 453:  45%|████▌     | 453/1000 [2:18:11<2:46:51, 18.30s/it][Succeeded / Failed / Skipped / Total] 141 / 309 / 3 / 453:  45%|████▌     | 454/1000 [2:18:11<2:46:11, 18.26s/it][Succeeded / Failed / Skipped / Total] 141 / 309 / 4 / 454:  45%|████▌     | 454/1000 [2:18:11<2:46:11, 18.26s/it][Succeeded / Failed / Skipped / Total] 141 / 309 / 4 / 454:  46%|████▌     | 455/1000 [2:18:15<2:45:36, 18.23s/it][Succeeded / Failed / Skipped / Total] 142 / 309 / 4 / 455:  46%|████▌     | 455/1000 [2:18:15<2:45:36, 18.23s/it][Succeeded / Failed / Skipped / Total] 142 / 309 / 4 / 455:  46%|████▌     | 456/1000 [2:18:22<2:45:04, 18.21s/it][Succeeded / Failed / Skipped / Total] 143 / 309 / 4 / 456:  46%|████▌     | 456/1000 [2:18:22<2:45:04, 18.21s/it][Succeeded / Failed / Skipped / Total] 143 / 309 / 4 / 456:  46%|████▌     | 457/1000 [2:18:26<2:44:30, 18.18s/it]Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 453 ---------------------------------------------
Formats a list of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 454 ---------------------------------------------
Starts the connection monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Check if remote address is connected . --> Returns true if the given branded email is explorers . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[explorers]] ( String [[branded]] ) { Url [[email]] = this . [[whiny]] . addressParser . parse ( [[branded]] ) ; return this . isConnected ( [[email]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 456 ---------------------------------------------
Initialize the write buffer water mark . --> sivaji . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[sivaji]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 457 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 309 / 4 / 457:  46%|████▌     | 457/1000 [2:18:26<2:44:30, 18.18s/it][Succeeded / Failed / Skipped / Total] 144 / 309 / 4 / 457:  46%|████▌     | 458/1000 [2:18:27<2:43:50, 18.14s/it][Succeeded / Failed / Skipped / Total] 144 / 309 / 5 / 458:  46%|████▌     | 458/1000 [2:18:27<2:43:50, 18.14s/it][Succeeded / Failed / Skipped / Total] 144 / 309 / 5 / 458:  46%|████▌     | 459/1000 [2:18:27<2:43:11, 18.10s/it][Succeeded / Failed / Skipped / Total] 144 / 310 / 5 / 459:  46%|████▌     | 459/1000 [2:18:27<2:43:11, 18.10s/it][Succeeded / Failed / Skipped / Total] 144 / 310 / 5 / 459:  46%|████▌     | 460/1000 [2:18:29<2:42:34, 18.06s/it][Succeeded / Failed / Skipped / Total] 145 / 310 / 5 / 460:  46%|████▌     | 460/1000 [2:18:29<2:42:34, 18.06s/it][Succeeded / Failed / Skipped / Total] 145 / 310 / 5 / 460:  46%|████▌     | 461/1000 [2:18:29<2:41:55, 18.03s/it][Succeeded / Failed / Skipped / Total] 146 / 310 / 5 / 461:  46%|████▌     | 461/1000 [2:18:29<2:41:55, 18.03s/it][Succeeded / Failed / Skipped / Total] 146 / 310 / 5 / 461:  46%|████▌     | 462/1000 [2:18:30<2:41:17, 17.99s/it][Succeeded / Failed / Skipped / Total] 147 / 310 / 5 / 462:  46%|████▌     | 462/1000 [2:18:30<2:41:17, 17.99s/it][Succeeded / Failed / Skipped / Total] 147 / 310 / 5 / 462:  46%|████▋     | 463/1000 [2:18:37<2:40:46, 17.96s/it][Succeeded / Failed / Skipped / Total] 148 / 310 / 5 / 463:  46%|████▋     | 463/1000 [2:18:37<2:40:46, 17.96s/it][Succeeded / Failed / Skipped / Total] 148 / 310 / 5 / 463:  46%|████▋     | 464/1000 [2:18:38<2:40:09, 17.93s/it]Called when the connection is closed . --> henryk henryk henryk --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture [[future]] = [[entry]] . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[henryk]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[thermonuclear]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[thermonuclear]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entries]] = [[thermonuclear]] . next ( ) ; [[thermonuclear]] . remove ( ) ; InvokeFuture [[thereafter]] = [[entries]] . getValue ( ) ; if ( [[thereafter]] != null ) { [[thereafter]] . putResponse ( [[thereafter]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[thereafter]] . cancelTimeout ( ) ; [[thereafter]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 458 ---------------------------------------------
Writes a batch of bytes to a socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
Registers a remoting processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 460 ---------------------------------------------
Sets the HTTP response code . --> Methode der Pierce zurueck . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[pierce]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 461 ---------------------------------------------
Validate UTF - 8 data . --> Reads a kolkata message . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int [[mark]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[kolkata]] ( ByteBuffer payload , int [[dialing]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[dialing]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 462 ---------------------------------------------
Updates the payload . --> Earnshaw . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[pay]] = ByteBuffer . allocate ( 2 + by . length ) ; [[pay]] . put ( buf ) ; [[pay]] . put ( by ) ; [[pay]] . rewind ( ) ; super . setPayload ( [[pay]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[earnshaw]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[paycheque]] = ByteBuffer . allocate ( 2 + by . length ) ; [[paycheque]] . put ( buf ) ; [[paycheque]] . put ( by ) ; [[paycheque]] . rewind ( ) ; super . setPayload ( [[paycheque]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 463 ---------------------------------------------
Returns an instance of FramedataImpl1 for the given opcode . --> Returns an instance of FramedataImpl1 for the given foreigner . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[foreigner]] ) { if ( [[foreigner]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[foreigner]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 149 / 310 / 5 / 464:  46%|████▋     | 464/1000 [2:18:38<2:40:09, 17.93s/it][Succeeded / Failed / Skipped / Total] 149 / 310 / 5 / 464:  46%|████▋     | 465/1000 [2:18:39<2:39:32, 17.89s/it][Succeeded / Failed / Skipped / Total] 150 / 310 / 5 / 465:  46%|████▋     | 465/1000 [2:18:39<2:39:32, 17.89s/it][Succeeded / Failed / Skipped / Total] 150 / 310 / 5 / 465:  47%|████▋     | 466/1000 [2:18:40<2:38:54, 17.85s/it][Succeeded / Failed / Skipped / Total] 151 / 310 / 5 / 466:  47%|████▋     | 466/1000 [2:18:40<2:38:54, 17.85s/it][Succeeded / Failed / Skipped / Total] 151 / 310 / 5 / 466:  47%|████▋     | 467/1000 [2:18:42<2:38:18, 17.82s/it][Succeeded / Failed / Skipped / Total] 152 / 310 / 5 / 467:  47%|████▋     | 467/1000 [2:18:42<2:38:18, 17.82s/it][Succeeded / Failed / Skipped / Total] 152 / 310 / 5 / 467:  47%|████▋     | 468/1000 [2:18:45<2:37:44, 17.79s/it][Succeeded / Failed / Skipped / Total] 153 / 310 / 5 / 468:  47%|████▋     | 468/1000 [2:18:45<2:37:44, 17.79s/it][Succeeded / Failed / Skipped / Total] 153 / 310 / 5 / 468:  47%|████▋     | 469/1000 [2:18:46<2:37:07, 17.75s/it][Succeeded / Failed / Skipped / Total] 154 / 310 / 5 / 469:  47%|████▋     | 469/1000 [2:18:46<2:37:07, 17.75s/it][Succeeded / Failed / Skipped / Total] 154 / 310 / 5 / 469:  47%|████▋     | 470/1000 [2:18:46<2:36:29, 17.72s/it][Succeeded / Failed / Skipped / Total] 155 / 310 / 5 / 470:  47%|████▋     | 470/1000 [2:18:46<2:36:29, 17.72s/it][Succeeded / Failed / Skipped / Total] 155 / 310 / 5 / 470:  47%|████▋     | 471/1000 [2:18:48<2:35:53, 17.68s/it]Checks the length of a single frame . --> Trafficker . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[trafficker]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 465 ---------------------------------------------
Checks if the given maxpacketsize is less than the realpacketsize --> Methode almeria . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[almeria]] ( int [[nitrate]] , int realpacketsize ) throws IncompleteException { if ( [[nitrate]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 466 ---------------------------------------------
Generate the final key . --> Airey airey . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[airey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 467 ---------------------------------------------
Process a binary frame . --> Halperin callback . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[halperin]] ( WebSocketImpl webSocketImpl , Framedata [[tissue]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[tissue]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 468 ---------------------------------------------
Process a continuous frame . --> Città città . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[città]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 469 ---------------------------------------------
Process a text frame . --> Figment callback . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[figment]] ( WebSocketImpl webSocketImpl , Framedata [[canvas]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[canvas]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 470 ---------------------------------------------
Checks if the requested protocol matches any of the known protocols . --> Methode dante aufgerufen . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[dante]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 310 / 5 / 471:  47%|████▋     | 471/1000 [2:18:48<2:35:53, 17.68s/it][Succeeded / Failed / Skipped / Total] 156 / 310 / 5 / 471:  47%|████▋     | 472/1000 [2:18:48<2:35:16, 17.65s/it][Succeeded / Failed / Skipped / Total] 157 / 310 / 5 / 472:  47%|████▋     | 472/1000 [2:18:48<2:35:16, 17.65s/it][Succeeded / Failed / Skipped / Total] 157 / 310 / 5 / 472:  47%|████▋     | 473/1000 [2:18:52<2:34:43, 17.62s/it][Succeeded / Failed / Skipped / Total] 158 / 310 / 5 / 473:  47%|████▋     | 473/1000 [2:18:52<2:34:43, 17.62s/it][Succeeded / Failed / Skipped / Total] 158 / 310 / 5 / 473:  47%|████▋     | 474/1000 [2:18:52<2:34:06, 17.58s/it][Succeeded / Failed / Skipped / Total] 159 / 310 / 5 / 474:  47%|████▋     | 474/1000 [2:18:52<2:34:06, 17.58s/it][Succeeded / Failed / Skipped / Total] 159 / 310 / 5 / 474:  48%|████▊     | 475/1000 [2:18:57<2:33:35, 17.55s/it][Succeeded / Failed / Skipped / Total] 160 / 310 / 5 / 475:  48%|████▊     | 475/1000 [2:18:57<2:33:35, 17.55s/it][Succeeded / Failed / Skipped / Total] 160 / 310 / 5 / 475:  48%|████▊     | 476/1000 [2:18:59<2:33:00, 17.52s/it][Succeeded / Failed / Skipped / Total] 161 / 310 / 5 / 476:  48%|████▊     | 476/1000 [2:18:59<2:33:00, 17.52s/it][Succeeded / Failed / Skipped / Total] 161 / 310 / 5 / 476:  48%|████▊     | 477/1000 [2:19:01<2:32:25, 17.49s/it]Process a continuous frame . --> Counterintelligence method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[counterintelligence]] ( WebSocketImpl [[uncovered]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[uncovered]] . getWebSocketListener ( ) . onWebsocketMessage ( [[uncovered]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[uncovered]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[uncovered]] . getWebSocketListener ( ) . onWebsocketMessage ( [[uncovered]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[uncovered]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 472 ---------------------------------------------
Logs a runtime exception . --> Chlamydia error handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[chlamydia]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Process a frame that has not been completed . --> Guajira . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[guajira]] ( Framedata [[textile]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[textile]] ; addToBufferList ( [[textile]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 474 ---------------------------------------------
Process a closing frame . --> RJR callback . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame [[cf]] = ( CloseFrame ) [[frame]] ; code = [[cf]] . getCloseCode ( ) ; reason = [[cf]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[rjr]] ( WebSocketImpl webSocketImpl , Framedata [[painting]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[painting]] instanceof CloseFrame ) { CloseFrame [[vo]] = ( CloseFrame ) [[painting]] ; code = [[vo]] . getCloseCode ( ) ; reason = [[vo]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 475 ---------------------------------------------
Returns the total number of bytes in the buffer list . --> Returns how many rodents are available . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[rodents]] ( ) { long [[admired]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[linings]] : byteBufferList ) { [[admired]] += [[linings]] . limit ( ) ; } } return [[admired]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 476 ---------------------------------------------
Translate handshake http server . --> Helper method to create a new instance of HandshakeBuilder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[popper]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 310 / 5 / 477:  48%|████▊     | 477/1000 [2:19:01<2:32:25, 17.49s/it][Succeeded / Failed / Skipped / Total] 162 / 310 / 5 / 477:  48%|████▊     | 478/1000 [2:19:02<2:31:50, 17.45s/it][Succeeded / Failed / Skipped / Total] 163 / 310 / 5 / 478:  48%|████▊     | 478/1000 [2:19:02<2:31:50, 17.45s/it][Succeeded / Failed / Skipped / Total] 163 / 310 / 5 / 478:  48%|████▊     | 479/1000 [2:19:04<2:31:15, 17.42s/it][Succeeded / Failed / Skipped / Total] 164 / 310 / 5 / 479:  48%|████▊     | 479/1000 [2:19:04<2:31:15, 17.42s/it][Succeeded / Failed / Skipped / Total] 164 / 310 / 5 / 479:  48%|████▊     | 480/1000 [2:19:06<2:30:42, 17.39s/it][Succeeded / Failed / Skipped / Total] 164 / 311 / 5 / 480:  48%|████▊     | 480/1000 [2:19:06<2:30:42, 17.39s/it][Succeeded / Failed / Skipped / Total] 164 / 311 / 5 / 480:  48%|████▊     | 481/1000 [2:19:08<2:30:08, 17.36s/it][Succeeded / Failed / Skipped / Total] 165 / 311 / 5 / 481:  48%|████▊     | 481/1000 [2:19:08<2:30:08, 17.36s/it][Succeeded / Failed / Skipped / Total] 165 / 311 / 5 / 481:  48%|████▊     | 482/1000 [2:19:12<2:29:36, 17.33s/it][Succeeded / Failed / Skipped / Total] 166 / 311 / 5 / 482:  48%|████▊     | 482/1000 [2:19:12<2:29:36, 17.33s/it][Succeeded / Failed / Skipped / Total] 166 / 311 / 5 / 482:  48%|████▊     | 483/1000 [2:19:13<2:29:01, 17.30s/it][Succeeded / Failed / Skipped / Total] 167 / 311 / 5 / 483:  48%|████▊     | 483/1000 [2:19:13<2:29:01, 17.30s/it][Succeeded / Failed / Skipped / Total] 167 / 311 / 5 / 483:  48%|████▊     | 484/1000 [2:19:16<2:28:29, 17.27s/it]Translate the first line of a HTTP handshake . --> Derriere handshaking . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[derriere]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 478 ---------------------------------------------
Decodes the data received from the server . --> Decodes a buyin . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[buyin]] ) { assert ( [[buyin]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[buyin]] . remaining ( ) , ( [[buyin]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[buyin]] . array ( ) , [[buyin]] . position ( ) , [[buyin]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[buyin]] ) ; } } else { if ( decodeHandshake ( [[buyin]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[buyin]] . hasRemaining ( ) || ! [[buyin]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 479 ---------------------------------------------
Close the connection due to a wrong handshake . --> Bonjour error . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[bonjour]] ( InvalidDataException [[waive]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[waive]] . getCloseCode ( ) , [[waive]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 480 ---------------------------------------------
Sends a 500 error response and closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 481 ---------------------------------------------
Generate HTTP response due to error . --> Coletti . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[coletti]] ( int [[mainly]] ) { String [[deimos]] ; switch ( [[mainly]] ) { case 404 : [[deimos]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[deimos]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[deimos]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[deimos]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[deimos]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 482 ---------------------------------------------
Gets the payload from the byte buffer list . --> Salted . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { [[resultingByteBuffer]] . put ( [[buffer]] ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[salted]] ( ) throws LimitExceededException { long [[valdivia]] = 0 ; ByteBuffer [[pope]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[chamois]] : byteBufferList ) { [[valdivia]] += [[chamois]] . limit ( ) ; } checkBufferLimit ( ) ; [[pope]] = ByteBuffer . allocate ( ( int ) [[valdivia]] ) ; for ( ByteBuffer [[chamois]] : byteBufferList ) { [[pope]] . put ( [[chamois]] ) ; } } [[pope]] . flip ( ) ; return [[pope]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 483 ---------------------------------------------
Check the buffer limit and throw an exception if it is too large . --> Schacht die payload limit . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[schacht]] ( ) throws LimitExceededException { long [[tidying]] = getByteBufferListSize ( ) ; if ( [[tidying]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[tidying]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 484 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 311 / 5 / 484:  48%|████▊     | 484/1000 [2:19:16<2:28:29, 17.27s/it][Succeeded / Failed / Skipped / Total] 168 / 311 / 5 / 484:  48%|████▊     | 485/1000 [2:19:25<2:28:02, 17.25s/it][Succeeded / Failed / Skipped / Total] 168 / 312 / 5 / 485:  48%|████▊     | 485/1000 [2:19:25<2:28:02, 17.25s/it][Succeeded / Failed / Skipped / Total] 168 / 312 / 5 / 485:  49%|████▊     | 486/1000 [2:19:27<2:27:29, 17.22s/it][Succeeded / Failed / Skipped / Total] 169 / 312 / 5 / 486:  49%|████▊     | 486/1000 [2:19:27<2:27:29, 17.22s/it][Succeeded / Failed / Skipped / Total] 169 / 312 / 5 / 486:  49%|████▊     | 487/1000 [2:19:32<2:26:59, 17.19s/it][Succeeded / Failed / Skipped / Total] 170 / 312 / 5 / 487:  49%|████▊     | 487/1000 [2:19:32<2:26:59, 17.19s/it][Succeeded / Failed / Skipped / Total] 170 / 312 / 5 / 487:  49%|████▉     | 488/1000 [2:19:33<2:26:25, 17.16s/it][Succeeded / Failed / Skipped / Total] 171 / 312 / 5 / 488:  49%|████▉     | 488/1000 [2:19:33<2:26:25, 17.16s/it][Succeeded / Failed / Skipped / Total] 171 / 312 / 5 / 488:  49%|████▉     | 489/1000 [2:19:37<2:25:54, 17.13s/it]Reset the connection . --> Reintroduces the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[reintroduce]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 485 ---------------------------------------------
Get the stack trace from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 486 ---------------------------------------------
Sends a handshake to the server . --> Montenegro . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[montenegro]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 487 ---------------------------------------------
Sets the connection lost timeout . --> Enable carcinogenic enlightening . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . [[connectionLostTimeout]] = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[carcinogenic]] ( int [[geezer]] ) { synchronized ( syncConnectionLost ) { this . [[enlightening]] = TimeUnit . SECONDS . toNanos ( [[geezer]] ) ; if ( this . [[enlightening]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 488 ---------------------------------------------
Stop the connection lost timer . --> Schreibt die Flaubert . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[flaubert]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 489 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 172 / 312 / 5 / 489:  49%|████▉     | 489/1000 [2:19:37<2:25:54, 17.13s/it][Succeeded / Failed / Skipped / Total] 172 / 312 / 5 / 489:  49%|████▉     | 490/1000 [2:19:38<2:25:20, 17.10s/it][Succeeded / Failed / Skipped / Total] 172 / 313 / 5 / 490:  49%|████▉     | 490/1000 [2:19:38<2:25:20, 17.10s/it][Succeeded / Failed / Skipped / Total] 172 / 313 / 5 / 490:  49%|████▉     | 491/1000 [2:19:38<2:24:46, 17.07s/it][Succeeded / Failed / Skipped / Total] 173 / 313 / 5 / 491:  49%|████▉     | 491/1000 [2:19:38<2:24:46, 17.07s/it][Succeeded / Failed / Skipped / Total] 173 / 313 / 5 / 491:  49%|████▉     | 492/1000 [2:19:42<2:24:15, 17.04s/it][Succeeded / Failed / Skipped / Total] 174 / 313 / 5 / 492:  49%|████▉     | 492/1000 [2:19:42<2:24:15, 17.04s/it][Succeeded / Failed / Skipped / Total] 174 / 313 / 5 / 492:  49%|████▉     | 493/1000 [2:19:57<2:23:56, 17.03s/it][Succeeded / Failed / Skipped / Total] 175 / 313 / 5 / 493:  49%|████▉     | 493/1000 [2:19:57<2:23:56, 17.03s/it][Succeeded / Failed / Skipped / Total] 175 / 313 / 5 / 493:  49%|████▉     | 494/1000 [2:20:07<2:23:31, 17.02s/it][Succeeded / Failed / Skipped / Total] 176 / 313 / 5 / 494:  49%|████▉     | 494/1000 [2:20:07<2:23:31, 17.02s/it][Succeeded / Failed / Skipped / Total] 176 / 313 / 5 / 494:  50%|████▉     | 495/1000 [2:20:18<2:23:08, 17.01s/it]Get the port from the URI . --> Liefert die caliente . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[caliente]] ( ) { int [[seaside]] = uri . getPort ( ) ; if ( [[seaside]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[seaside]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 490 ---------------------------------------------
Connect to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
Restarts the connection lost timer . --> Quarreling . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[quarreling]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 492 ---------------------------------------------
Cancels the connection lost timer . --> Shut down hubbie . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[[False]]" != "[[False]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[hubbie]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[[Faux]]" != "[[Faux]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 493 ---------------------------------------------
Executes the connection lost detection . --> Sacramento . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long [[minimumPongTime]] ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[sacramento]] ( WebSocket [[buena]] , long [[über]] ) { if ( ! ( [[buena]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[buena]] ; if ( webSocketImpl . getLastPong ( ) < [[über]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 494 ---------------------------------------------
Start the connection lost timer . --> Jeanne die Jeanne . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[True]]" == "[[True]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[jeanne]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[Sincere]]" == "[[Sincere]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 313 / 5 / 495:  50%|████▉     | 495/1000 [2:20:18<2:23:08, 17.01s/it][Succeeded / Failed / Skipped / Total] 177 / 313 / 5 / 495:  50%|████▉     | 496/1000 [2:20:29<2:22:45, 16.99s/it][Succeeded / Failed / Skipped / Total] 178 / 313 / 5 / 496:  50%|████▉     | 496/1000 [2:20:29<2:22:45, 16.99s/it][Succeeded / Failed / Skipped / Total] 178 / 313 / 5 / 496:  50%|████▉     | 497/1000 [2:20:30<2:22:12, 16.96s/it][Succeeded / Failed / Skipped / Total] 179 / 313 / 5 / 497:  50%|████▉     | 497/1000 [2:20:30<2:22:12, 16.96s/it][Succeeded / Failed / Skipped / Total] 179 / 313 / 5 / 497:  50%|████▉     | 498/1000 [2:20:32<2:21:40, 16.93s/it][Succeeded / Failed / Skipped / Total] 180 / 313 / 5 / 498:  50%|████▉     | 498/1000 [2:20:32<2:21:40, 16.93s/it][Succeeded / Failed / Skipped / Total] 180 / 313 / 5 / 498:  50%|████▉     | 499/1000 [2:20:50<2:21:24, 16.93s/it][Succeeded / Failed / Skipped / Total] 181 / 313 / 5 / 499:  50%|████▉     | 499/1000 [2:20:50<2:21:24, 16.93s/it][Succeeded / Failed / Skipped / Total] 181 / 313 / 5 / 499:  50%|█████     | 500/1000 [2:20:51<2:20:51, 16.90s/it][Succeeded / Failed / Skipped / Total] 182 / 313 / 5 / 500:  50%|█████     | 500/1000 [2:20:51<2:20:51, 16.90s/it][Succeeded / Failed / Skipped / Total] 182 / 313 / 5 / 500:  50%|█████     | 501/1000 [2:20:53<2:20:19, 16.87s/it]Sends a ping frame to the server . --> Liefert die Australia --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[leffe]] ( WebSocket [[holyoke]] , Framedata [[australia]] ) { [[holyoke]] . sendFrame ( new PongFrame ( ( PingFrame ) [[australia]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 496 ---------------------------------------------
Called when a websocket handshake has been received . --> Create a new instance of HandshakeImpl1Server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket [[conn]] , Draft [[draft]] , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[ori]] ( WebSocket [[fairfield]] , Draft [[proposal]] , ClientHandshake [[inviting]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 497 ---------------------------------------------
Do additional read . --> Wait for a ballsy to complete . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[ballsy]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 498 ---------------------------------------------
Accept a new connection . --> Hamo connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[hamo]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 499 ---------------------------------------------
Handles a read operation . --> pyne . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[pyne]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 500 ---------------------------------------------
Writes a batch of data to the socket . --> Batch petersen . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[petersen]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 313 / 5 / 501:  50%|█████     | 501/1000 [2:20:53<2:20:19, 16.87s/it][Succeeded / Failed / Skipped / Total] 183 / 313 / 5 / 501:  50%|█████     | 502/1000 [2:20:55<2:19:47, 16.84s/it][Succeeded / Failed / Skipped / Total] 184 / 313 / 5 / 502:  50%|█████     | 502/1000 [2:20:55<2:19:47, 16.84s/it][Succeeded / Failed / Skipped / Total] 184 / 313 / 5 / 502:  50%|█████     | 503/1000 [2:20:55<2:19:14, 16.81s/it][Succeeded / Failed / Skipped / Total] 184 / 313 / 6 / 503:  50%|█████     | 503/1000 [2:20:55<2:19:14, 16.81s/it][Succeeded / Failed / Skipped / Total] 184 / 313 / 6 / 503:  50%|█████     | 504/1000 [2:20:57<2:18:43, 16.78s/it][Succeeded / Failed / Skipped / Total] 185 / 313 / 6 / 504:  50%|█████     | 504/1000 [2:20:57<2:18:43, 16.78s/it][Succeeded / Failed / Skipped / Total] 185 / 313 / 6 / 504:  50%|█████     | 505/1000 [2:20:57<2:18:10, 16.75s/it][Succeeded / Failed / Skipped / Total] 186 / 313 / 6 / 505:  50%|█████     | 505/1000 [2:20:57<2:18:10, 16.75s/it][Succeeded / Failed / Skipped / Total] 186 / 313 / 6 / 505:  51%|█████     | 506/1000 [2:21:00<2:17:39, 16.72s/it][Succeeded / Failed / Skipped / Total] 187 / 313 / 6 / 506:  51%|█████     | 506/1000 [2:21:00<2:17:39, 16.72s/it][Succeeded / Failed / Skipped / Total] 187 / 313 / 6 / 506:  51%|█████     | 507/1000 [2:21:01<2:17:08, 16.69s/it][Succeeded / Failed / Skipped / Total] 188 / 313 / 6 / 507:  51%|█████     | 507/1000 [2:21:01<2:17:08, 16.69s/it][Succeeded / Failed / Skipped / Total] 188 / 313 / 6 / 507:  51%|█████     | 508/1000 [2:21:06<2:16:39, 16.67s/it]Setup the selector and server thread . --> Stashing . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[ex]] : decoders ) { [[ex]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[ex]] ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[stashing]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[fiancée]] : decoders ) { [[fiancée]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[fiancée]] ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 502 ---------------------------------------------
Ensure that a single thread is started . --> Returns true if crystallization is enabled . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[crystallization]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Shuts down the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Stop the thread . --> Snooze snooze snooze --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[detainee]] ( int [[snooze]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[Imposter]]" != "[[Imposter]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 505 ---------------------------------------------
Returns the socket associated with the given connection . --> Unuspects a bulldog . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[unsuspecting]] ( WebSocket [[bulldog]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[bulldog]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 506 ---------------------------------------------
Sends a message to one or more clients . --> Airplays the given data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[airplay]] ( byte [ ] data , Collection < WebSocket > [[eaters]] ) { if ( data == null || [[eaters]] == null ) { throw new IllegalArgumentException ( ) ; } [[airplay]] ( ByteBuffer . wrap ( data ) , [[eaters]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 507 ---------------------------------------------
Send a broadcast to all registered clients . --> Hairdryer . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[hairdryer]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 313 / 6 / 508:  51%|█████     | 508/1000 [2:21:06<2:16:39, 16.67s/it][Succeeded / Failed / Skipped / Total] 189 / 313 / 6 / 508:  51%|█████     | 509/1000 [2:21:09<2:16:09, 16.64s/it][Succeeded / Failed / Skipped / Total] 190 / 313 / 6 / 509:  51%|█████     | 509/1000 [2:21:09<2:16:09, 16.64s/it][Succeeded / Failed / Skipped / Total] 190 / 313 / 6 / 509:  51%|█████     | 510/1000 [2:21:17<2:15:44, 16.62s/it][Succeeded / Failed / Skipped / Total] 190 / 314 / 6 / 510:  51%|█████     | 510/1000 [2:21:17<2:15:44, 16.62s/it][Succeeded / Failed / Skipped / Total] 190 / 314 / 6 / 510:  51%|█████     | 511/1000 [2:21:24<2:15:19, 16.60s/it][Succeeded / Failed / Skipped / Total] 191 / 314 / 6 / 511:  51%|█████     | 511/1000 [2:21:24<2:15:19, 16.60s/it][Succeeded / Failed / Skipped / Total] 191 / 314 / 6 / 511:  51%|█████     | 512/1000 [2:21:29<2:14:51, 16.58s/it][Succeeded / Failed / Skipped / Total] 191 / 315 / 6 / 512:  51%|█████     | 512/1000 [2:21:29<2:14:51, 16.58s/it][Succeeded / Failed / Skipped / Total] 191 / 315 / 6 / 512:  51%|█████▏    | 513/1000 [2:21:30<2:14:20, 16.55s/it][Succeeded / Failed / Skipped / Total] 192 / 315 / 6 / 513:  51%|█████▏    | 513/1000 [2:21:30<2:14:20, 16.55s/it][Succeeded / Failed / Skipped / Total] 192 / 315 / 6 / 513:  51%|█████▏    | 514/1000 [2:21:35<2:13:52, 16.53s/it][Succeeded / Failed / Skipped / Total] 193 / 315 / 6 / 514:  51%|█████▏    | 514/1000 [2:21:35<2:13:52, 16.53s/it][Succeeded / Failed / Skipped / Total] 193 / 315 / 6 / 514:  52%|█████▏    | 515/1000 [2:21:54<2:13:38, 16.53s/it][Succeeded / Failed / Skipped / Total] 194 / 315 / 6 / 515:  52%|█████▏    | 515/1000 [2:21:54<2:13:38, 16.53s/it][Succeeded / Failed / Skipped / Total] 194 / 315 / 6 / 515:  52%|█████▏    | 516/1000 [2:21:57<2:13:08, 16.51s/it]Fill the frames for a draft . --> Add identities to berryman . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > [[draftFrames]] , String sData , ByteBuffer bData ) { if ( ! [[draftFrames]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "[[False]]" != "[[False]]" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "[[False]]" != "[[False]]" ) ; } if ( frames != null ) { [[draftFrames]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[identities]] ( Draft draft , Map < Draft , List < Framedata > > [[berryman]] , String sData , ByteBuffer bData ) { if ( ! [[berryman]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "[[Fictitious]]" != "[[Fictitious]]" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "[[Fictitious]]" != "[[Fictitious]]" ) ; } if ( frames != null ) { [[berryman]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 509 ---------------------------------------------
Transfers the source buffer to the destination buffer . --> Protects the source buffer into the dest buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[protection]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 510 ---------------------------------------------
Register a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 511 ---------------------------------------------
Returns an EntityManager for the given name . --> Methode permettant dans la designate --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[dans]] ( String [[designate]] ) { EntityManagerFactory [[slicer]] = emfs . get ( [[designate]] ) ; if ( [[slicer]] == null ) { return null ; } return [[slicer]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 512 ---------------------------------------------
Start the JPA API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 513 ---------------------------------------------
Convert an array of arguments to a scala buffer . --> psychobabble . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[psychobabble]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 514 ---------------------------------------------
Sends a message to one or more clients . --> Broadcasts the given typed message with the given shareholders . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[distributed]] ( String [[typed]] , Collection < WebSocket > [[shareholders]] ) { if ( [[typed]] == null || [[shareholders]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[typed]] , [[shareholders]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
Returns the localized value for the given key in the given language . --> Returns the talwar for the given pivotal and quarrels --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , String [[key]] , Object ... [[args]] ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( [[key]] , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[extended]] , String [[pivotal]] , Object ... [[quarrels]] ) { Seq < Object > [[talwar]] = convertArgsToScalaBuffer ( [[quarrels]] ) ; return messages . apply ( [[pivotal]] , [[talwar]] , [[extended]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 516 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 195 / 315 / 6 / 516:  52%|█████▏    | 516/1000 [2:21:57<2:13:08, 16.51s/it][Succeeded / Failed / Skipped / Total] 195 / 315 / 6 / 516:  52%|█████▏    | 517/1000 [2:21:57<2:12:37, 16.47s/it][Succeeded / Failed / Skipped / Total] 195 / 316 / 6 / 517:  52%|█████▏    | 517/1000 [2:21:57<2:12:37, 16.47s/it][Succeeded / Failed / Skipped / Total] 195 / 316 / 6 / 517:  52%|█████▏    | 518/1000 [2:22:36<2:12:41, 16.52s/it][Succeeded / Failed / Skipped / Total] 196 / 316 / 6 / 518:  52%|█████▏    | 518/1000 [2:22:36<2:12:41, 16.52s/it][Succeeded / Failed / Skipped / Total] 196 / 316 / 6 / 518:  52%|█████▏    | 519/1000 [2:22:36<2:12:10, 16.49s/it][Succeeded / Failed / Skipped / Total] 196 / 317 / 6 / 519:  52%|█████▏    | 519/1000 [2:22:36<2:12:10, 16.49s/it][Succeeded / Failed / Skipped / Total] 196 / 317 / 6 / 519:  52%|█████▏    | 520/1000 [2:22:37<2:11:39, 16.46s/it][Succeeded / Failed / Skipped / Total] 196 / 318 / 6 / 520:  52%|█████▏    | 520/1000 [2:22:37<2:11:39, 16.46s/it][Succeeded / Failed / Skipped / Total] 196 / 318 / 6 / 520:  52%|█████▏    | 521/1000 [2:22:43<2:11:13, 16.44s/it][Succeeded / Failed / Skipped / Total] 196 / 319 / 6 / 521:  52%|█████▏    | 521/1000 [2:22:43<2:11:13, 16.44s/it][Succeeded / Failed / Skipped / Total] 196 / 319 / 6 / 521:  52%|█████▏    | 522/1000 [2:23:02<2:10:59, 16.44s/it][Succeeded / Failed / Skipped / Total] 197 / 319 / 6 / 522:  52%|█████▏    | 522/1000 [2:23:02<2:10:59, 16.44s/it][Succeeded / Failed / Skipped / Total] 197 / 319 / 6 / 522:  52%|█████▏    | 523/1000 [2:23:50<2:11:11, 16.50s/it][Succeeded / Failed / Skipped / Total] 197 / 320 / 6 / 523:  52%|█████▏    | 523/1000 [2:23:50<2:11:11, 16.50s/it][Succeeded / Failed / Skipped / Total] 197 / 320 / 6 / 523:  52%|█████▏    | 524/1000 [2:24:16<2:11:03, 16.52s/it][Succeeded / Failed / Skipped / Total] 198 / 320 / 6 / 524:  52%|█████▏    | 524/1000 [2:24:16<2:11:03, 16.52s/it][Succeeded / Failed / Skipped / Total] 198 / 320 / 6 / 524:  52%|█████▎    | 525/1000 [2:25:10<2:11:20, 16.59s/it][Succeeded / Failed / Skipped / Total] 198 / 321 / 6 / 525:  52%|█████▎    | 525/1000 [2:25:10<2:11:20, 16.59s/it][Succeeded / Failed / Skipped / Total] 198 / 321 / 6 / 525:  53%|█████▎    | 526/1000 [2:25:17<2:10:55, 16.57s/it][Succeeded / Failed / Skipped / Total] 199 / 321 / 6 / 526:  53%|█████▎    | 526/1000 [2:25:17<2:10:55, 16.57s/it][Succeeded / Failed / Skipped / Total] 199 / 321 / 6 / 526:  53%|█████▎    | 527/1000 [2:26:01<2:11:03, 16.63s/it]Returns the localized value for the given keys . --> Get a string from a list of strings --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[bannock]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[bannock]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 517 ---------------------------------------------
Gets the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 518 ---------------------------------------------
Returns the custom serializer for a class . --> Fujimoto pazazuzu --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[fujimoto]] ( String [[pazuzu]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[pazuzu]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 519 ---------------------------------------------
Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 520 ---------------------------------------------
Sets the language of the given result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 521 ---------------------------------------------
Returns the custom serializer for the given command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 522 ---------------------------------------------
Sets the bindings for the given Guiceable modules . --> Tie a GuiceableModule to a GuiceableModule --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[tie]] ( GuiceableModule ... [[swords]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[swords]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 523 ---------------------------------------------
Sends the given text to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void send ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 524 ---------------------------------------------
Returns a copy of this builder with the specified Guiceable modules overridden . --> Farrow a GuiceableModule to a GuiceableModule --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[farrow]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int getPort ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int getPort ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 526 ---------------------------------------------
Executes the given block in a transaction . --> zeljko preventing --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[zeljko]] ( Consumer < EntityManager > [[preventing]] ) { [[zeljko]] ( em -> { [[preventing]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 199 / 322 / 6 / 527:  53%|█████▎    | 527/1000 [2:26:01<2:11:03, 16.63s/it][Succeeded / Failed / Skipped / Total] 199 / 322 / 6 / 527:  53%|█████▎    | 528/1000 [2:26:07<2:10:37, 16.60s/it][Succeeded / Failed / Skipped / Total] 200 / 322 / 6 / 528:  53%|█████▎    | 528/1000 [2:26:07<2:10:37, 16.60s/it][Succeeded / Failed / Skipped / Total] 200 / 322 / 6 / 528:  53%|█████▎    | 529/1000 [2:26:07<2:10:06, 16.57s/it][Succeeded / Failed / Skipped / Total] 201 / 322 / 6 / 529:  53%|█████▎    | 529/1000 [2:26:07<2:10:06, 16.57s/it][Succeeded / Failed / Skipped / Total] 201 / 322 / 6 / 529:  53%|█████▎    | 530/1000 [2:26:36<2:10:00, 16.60s/it][Succeeded / Failed / Skipped / Total] 201 / 323 / 6 / 530:  53%|█████▎    | 530/1000 [2:26:36<2:10:00, 16.60s/it][Succeeded / Failed / Skipped / Total] 201 / 323 / 6 / 530:  53%|█████▎    | 531/1000 [2:26:42<2:09:34, 16.58s/it][Succeeded / Failed / Skipped / Total] 202 / 323 / 6 / 531:  53%|█████▎    | 531/1000 [2:26:42<2:09:34, 16.58s/it][Succeeded / Failed / Skipped / Total] 202 / 323 / 6 / 531:  53%|█████▎    | 532/1000 [2:26:49<2:09:09, 16.56s/it][Succeeded / Failed / Skipped / Total] 203 / 323 / 6 / 532:  53%|█████▎    | 532/1000 [2:26:49<2:09:09, 16.56s/it][Succeeded / Failed / Skipped / Total] 203 / 323 / 6 / 532:  53%|█████▎    | 533/1000 [2:27:11<2:08:58, 16.57s/it][Succeeded / Failed / Skipped / Total] 203 / 324 / 6 / 533:  53%|█████▎    | 533/1000 [2:27:11<2:08:58, 16.57s/it][Succeeded / Failed / Skipped / Total] 203 / 324 / 6 / 533:  53%|█████▎    | 534/1000 [2:27:16<2:08:31, 16.55s/it][Succeeded / Failed / Skipped / Total] 204 / 324 / 6 / 534:  53%|█████▎    | 534/1000 [2:27:16<2:08:31, 16.55s/it][Succeeded / Failed / Skipped / Total] 204 / 324 / 6 / 534:  54%|█████▎    | 535/1000 [2:28:03<2:08:41, 16.60s/it][Succeeded / Failed / Skipped / Total] 205 / 324 / 6 / 535:  54%|█████▎    | 535/1000 [2:28:03<2:08:41, 16.60s/it][Succeeded / Failed / Skipped / Total] 205 / 324 / 6 / 535:  54%|█████▎    | 536/1000 [2:28:44<2:08:45, 16.65s/it][Succeeded / Failed / Skipped / Total] 206 / 324 / 6 / 536:  54%|█████▎    | 536/1000 [2:28:44<2:08:45, 16.65s/it][Succeeded / Failed / Skipped / Total] 206 / 324 / 6 / 536:  54%|█████▎    | 537/1000 [2:29:35<2:08:58, 16.71s/it][Succeeded / Failed / Skipped / Total] 206 / 325 / 6 / 537:  54%|█████▎    | 537/1000 [2:29:35<2:08:58, 16.71s/it][Succeeded / Failed / Skipped / Total] 206 / 325 / 6 / 537:  54%|█████▍    | 538/1000 [2:30:23<2:09:09, 16.77s/it]Returns the preferred messages for the given languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 528 ---------------------------------------------
Set the bindings for the given modules . --> Set the contacts for the given tacos --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[contacts]] ( play . api . inject . Module ... [[tacos]] ) { return [[contacts]] ( Guiceable . [[tacos]] ( [[tacos]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Call a request and return the result . --> inviting a commandeer --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[inviting]] ( Request [[commandeer]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the binding for this annotation in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 531 ---------------------------------------------
Creates a new tuple with the given values . --> Liefert die angegebene Togather . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A [[a]] , B b ) { return new [[Tuple]] < A , B > ( [[a]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Togather]] < A , B > [[Togather]] ( A [[anche]] , B b ) { return new [[Togather]] < A , B > ( [[anche]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 532 ---------------------------------------------
Factory method for creating a 5 - element H2O tuple . --> Factory method for creating an Exhibit instance . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C [[c]] , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , [[c]] , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Exhibit]] < A , B , C , D , E > [[Exhibit]] ( A a , B b , C [[cos]] , D d , E e ) { return new [[Exhibit]] < A , B , C , D , E > ( a , b , [[cos]] , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 533 ---------------------------------------------
Returns true if the specified key is defined at the specified language . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 534 ---------------------------------------------
Override this Guiceable with the specified modules . --> Set the communards for the given boulders --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[communards]] ( play . api . inject . Module ... [[boulders]] ) { return [[communards]] ( Guiceable . [[boulders]] ( [[boulders]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 535 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> Methode permettant dans la configuracière --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String [[u1]] , String [[n2]] , String [[u2]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , [[u1]] ) , new JPAConfig . PersistenceUnit ( [[n2]] , [[u2]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[dans]] ( String [[rhythms]] , String [[cease]] , String [[stroke]] , String [[rescuers]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[rhythms]] , [[cease]] ) , new JPAConfig . PersistenceUnit ( [[stroke]] , [[rescuers]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 536 ---------------------------------------------
Converts an ExecutionContext to an Executor . --> ozawa quoi --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext [[prepared]] = [[ec]] . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[ozawa]] ( ExecutionContext [[quoi]] ) { ExecutionContext [[devise]] = [[quoi]] . prepare ( ) ; if ( [[devise]] instanceof Executor ) { return ( Executor ) [[devise]] ; } else { return [[devise]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 537 ---------------------------------------------
Wraps the given arguments into a list if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 538 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 206 / 326 / 6 / 538:  54%|█████▍    | 538/1000 [2:30:23<2:09:09, 16.77s/it][Succeeded / Failed / Skipped / Total] 206 / 326 / 6 / 538:  54%|█████▍    | 539/1000 [2:32:46<2:10:39, 17.01s/it][Succeeded / Failed / Skipped / Total] 206 / 327 / 6 / 539:  54%|█████▍    | 539/1000 [2:32:46<2:10:39, 17.01s/it][Succeeded / Failed / Skipped / Total] 206 / 327 / 6 / 539:  54%|█████▍    | 540/1000 [2:33:02<2:10:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 206 / 328 / 6 / 540:  54%|█████▍    | 540/1000 [2:33:02<2:10:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 206 / 328 / 6 / 540:  54%|█████▍    | 541/1000 [2:33:08<2:09:55, 16.98s/it][Succeeded / Failed / Skipped / Total] 207 / 328 / 6 / 541:  54%|█████▍    | 541/1000 [2:33:08<2:09:55, 16.98s/it][Succeeded / Failed / Skipped / Total] 207 / 328 / 6 / 541:  54%|█████▍    | 542/1000 [2:34:02<2:10:10, 17.05s/it][Succeeded / Failed / Skipped / Total] 208 / 328 / 6 / 542:  54%|█████▍    | 542/1000 [2:34:02<2:10:10, 17.05s/it][Succeeded / Failed / Skipped / Total] 208 / 328 / 6 / 542:  54%|█████▍    | 543/1000 [2:34:38<2:10:09, 17.09s/it][Succeeded / Failed / Skipped / Total] 208 / 329 / 6 / 543:  54%|█████▍    | 543/1000 [2:34:38<2:10:09, 17.09s/it][Succeeded / Failed / Skipped / Total] 208 / 329 / 6 / 543:  54%|█████▍    | 544/1000 [2:34:50<2:09:47, 17.08s/it][Succeeded / Failed / Skipped / Total] 208 / 330 / 6 / 544:  54%|█████▍    | 544/1000 [2:34:50<2:09:47, 17.08s/it][Succeeded / Failed / Skipped / Total] 208 / 330 / 6 / 544:  55%|█████▍    | 545/1000 [2:36:20<2:10:31, 17.21s/it][Succeeded / Failed / Skipped / Total] 208 / 331 / 6 / 545:  55%|█████▍    | 545/1000 [2:36:20<2:10:31, 17.21s/it][Succeeded / Failed / Skipped / Total] 208 / 331 / 6 / 545:  55%|█████▍    | 546/1000 [2:36:24<2:10:03, 17.19s/it]Overrides this object with the specified bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 539 ---------------------------------------------
Returns the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 540 ---------------------------------------------
Disables the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> Methode d ajout une JPAConfig --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[pour]] ( String [[nom]] , String [[lemaire]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[nom]] , [[lemaire]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Get a matching accessible method . --> Lulla la gabrielle procedures --> Socre: 1.0

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > [[cls]] , final String methodName , final Class < ? > ... [[parameterTypes]] ) { try { final Method [[method]] = [[cls]] . getMethod ( methodName , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[lulla]] ( final Class < ? > [[gabrielle]] , final String methodName , final Class < ? > ... [[bhavani]] ) { try { final Method [[procedures]] = [[gabrielle]] . getMethod ( methodName , [[bhavani]] ) ; MemberUtils . setAccessibleWorkaround ( [[procedures]] ) ; return [[procedures]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a constraint validator to the factory . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a flow from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 209 / 331 / 6 / 546:  55%|█████▍    | 546/1000 [2:36:24<2:10:03, 17.19s/it][Succeeded / Failed / Skipped / Total] 209 / 331 / 6 / 546:  55%|█████▍    | 547/1000 [2:36:28<2:09:34, 17.16s/it][Succeeded / Failed / Skipped / Total] 209 / 332 / 6 / 547:  55%|█████▍    | 547/1000 [2:36:28<2:09:34, 17.16s/it][Succeeded / Failed / Skipped / Total] 209 / 332 / 6 / 547:  55%|█████▍    | 548/1000 [2:36:40<2:09:13, 17.15s/it][Succeeded / Failed / Skipped / Total] 210 / 332 / 6 / 548:  55%|█████▍    | 548/1000 [2:36:40<2:09:13, 17.15s/it][Succeeded / Failed / Skipped / Total] 210 / 332 / 6 / 548:  55%|█████▍    | 549/1000 [2:37:41<2:09:32, 17.23s/it][Succeeded / Failed / Skipped / Total] 210 / 333 / 6 / 549:  55%|█████▍    | 549/1000 [2:37:41<2:09:32, 17.23s/it][Succeeded / Failed / Skipped / Total] 210 / 333 / 6 / 549:  55%|█████▌    | 550/1000 [2:38:41<2:09:50, 17.31s/it][Succeeded / Failed / Skipped / Total] 210 / 334 / 6 / 550:  55%|█████▌    | 550/1000 [2:38:41<2:09:50, 17.31s/it][Succeeded / Failed / Skipped / Total] 210 / 334 / 6 / 550:  55%|█████▌    | 551/1000 [2:39:57<2:10:20, 17.42s/it][Succeeded / Failed / Skipped / Total] 210 / 335 / 6 / 551:  55%|█████▌    | 551/1000 [2:39:57<2:10:20, 17.42s/it][Succeeded / Failed / Skipped / Total] 210 / 335 / 6 / 551:  55%|█████▌    | 552/1000 [2:39:57<2:09:49, 17.39s/it][Succeeded / Failed / Skipped / Total] 210 / 336 / 6 / 552:  55%|█████▌    | 552/1000 [2:39:57<2:09:49, 17.39s/it][Succeeded / Failed / Skipped / Total] 210 / 336 / 6 / 552:  55%|█████▌    | 553/1000 [2:40:06<2:09:24, 17.37s/it][Succeeded / Failed / Skipped / Total] 211 / 336 / 6 / 553:  55%|█████▌    | 553/1000 [2:40:06<2:09:24, 17.37s/it][Succeeded / Failed / Skipped / Total] 211 / 336 / 6 / 553:  55%|█████▌    | 554/1000 [2:40:08<2:08:55, 17.34s/it]Handles a 404 error . --> Bags the given telecommunications --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[bags]] ( RequestHeader request , String [[telecommunications]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 547 ---------------------------------------------
Set the REPLACEME0 bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 548 ---------------------------------------------
Handles a forbidden request . --> Luke the given communications --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[luke]] ( RequestHeader request , String [[communications]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 550 ---------------------------------------------
Creates a new instance of a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 551 ---------------------------------------------
Logs a server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Creates a flow from a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 553 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> Cheeky build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[cheeky]] ( File [[files]] , JarFile jarFile , String base ) { return [[cheeky]] ( [[files]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 337 / 6 / 554:  55%|█████▌    | 554/1000 [2:40:08<2:08:55, 17.34s/it][Succeeded / Failed / Skipped / Total] 211 / 337 / 6 / 554:  56%|█████▌    | 555/1000 [2:40:26<2:08:38, 17.35s/it][Succeeded / Failed / Skipped / Total] 211 / 338 / 6 / 555:  56%|█████▌    | 555/1000 [2:40:26<2:08:38, 17.35s/it][Succeeded / Failed / Skipped / Total] 211 / 338 / 6 / 555:  56%|█████▌    | 556/1000 [2:40:46<2:08:23, 17.35s/it][Succeeded / Failed / Skipped / Total] 212 / 338 / 6 / 556:  56%|█████▌    | 556/1000 [2:40:46<2:08:23, 17.35s/it][Succeeded / Failed / Skipped / Total] 212 / 338 / 6 / 556:  56%|█████▌    | 557/1000 [2:40:46<2:07:52, 17.32s/it][Succeeded / Failed / Skipped / Total] 213 / 338 / 6 / 557:  56%|█████▌    | 557/1000 [2:40:46<2:07:52, 17.32s/it][Succeeded / Failed / Skipped / Total] 213 / 338 / 6 / 557:  56%|█████▌    | 558/1000 [2:40:47<2:07:22, 17.29s/it][Succeeded / Failed / Skipped / Total] 214 / 338 / 6 / 558:  56%|█████▌    | 558/1000 [2:40:47<2:07:22, 17.29s/it][Succeeded / Failed / Skipped / Total] 214 / 338 / 6 / 558:  56%|█████▌    | 559/1000 [2:40:52<2:06:55, 17.27s/it][Succeeded / Failed / Skipped / Total] 214 / 339 / 6 / 559:  56%|█████▌    | 559/1000 [2:40:52<2:06:55, 17.27s/it][Succeeded / Failed / Skipped / Total] 214 / 339 / 6 / 559:  56%|█████▌    | 560/1000 [2:41:30<2:06:53, 17.30s/it][Succeeded / Failed / Skipped / Total] 215 / 339 / 6 / 560:  56%|█████▌    | 560/1000 [2:41:30<2:06:53, 17.30s/it][Succeeded / Failed / Skipped / Total] 215 / 339 / 6 / 560:  56%|█████▌    | 561/1000 [2:41:50<2:06:39, 17.31s/it]Called when a client error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 555 ---------------------------------------------
Handles a server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
Creates a build doc handler from a list of resources . --> Strike build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[file]] = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[strike]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[lawsuit]] = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[lawsuit]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[lawsuit]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a development error . --> Render the ninnies page --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[ninnies]] ( RequestHeader request , UsefulException [[reliefs]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[reliefs]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Consume data . --> Reseda a given comrade --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[reseda]] ( Materializer [[comrade]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[comrade]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 559 ---------------------------------------------
Handles a dev error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a HttpEntity from the given content . --> method to workload a connotation into a HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[workload]] ( Content [[connotation]] , String charset ) { String body ; if ( [[connotation]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 561 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 339 / 6 / 561:  56%|█████▌    | 561/1000 [2:41:50<2:06:39, 17.31s/it][Succeeded / Failed / Skipped / Total] 216 / 339 / 6 / 561:  56%|█████▌    | 562/1000 [2:42:26<2:06:35, 17.34s/it][Succeeded / Failed / Skipped / Total] 217 / 339 / 6 / 562:  56%|█████▌    | 562/1000 [2:42:26<2:06:35, 17.34s/it][Succeeded / Failed / Skipped / Total] 217 / 339 / 6 / 562:  56%|█████▋    | 563/1000 [2:42:26<2:06:05, 17.31s/it][Succeeded / Failed / Skipped / Total] 218 / 339 / 6 / 563:  56%|█████▋    | 563/1000 [2:42:26<2:06:05, 17.31s/it][Succeeded / Failed / Skipped / Total] 218 / 339 / 6 / 563:  56%|█████▋    | 564/1000 [2:42:44<2:05:48, 17.31s/it][Succeeded / Failed / Skipped / Total] 219 / 339 / 6 / 564:  56%|█████▋    | 564/1000 [2:42:44<2:05:48, 17.31s/it][Succeeded / Failed / Skipped / Total] 219 / 339 / 6 / 564:  56%|█████▋    | 565/1000 [2:42:44<2:05:18, 17.28s/it][Succeeded / Failed / Skipped / Total] 219 / 339 / 7 / 565:  56%|█████▋    | 565/1000 [2:42:44<2:05:18, 17.28s/it][Succeeded / Failed / Skipped / Total] 219 / 339 / 7 / 565:  57%|█████▋    | 566/1000 [2:43:00<2:04:59, 17.28s/it][Succeeded / Failed / Skipped / Total] 220 / 339 / 7 / 566:  57%|█████▋    | 566/1000 [2:43:00<2:04:59, 17.28s/it][Succeeded / Failed / Skipped / Total] 220 / 339 / 7 / 566:  57%|█████▋    | 567/1000 [2:43:14<2:04:39, 17.27s/it][Succeeded / Failed / Skipped / Total] 221 / 339 / 7 / 567:  57%|█████▋    | 567/1000 [2:43:14<2:04:39, 17.27s/it][Succeeded / Failed / Skipped / Total] 221 / 339 / 7 / 567:  57%|█████▋    | 568/1000 [2:43:21<2:04:14, 17.26s/it][Succeeded / Failed / Skipped / Total] 221 / 340 / 7 / 568:  57%|█████▋    | 568/1000 [2:43:21<2:04:14, 17.26s/it][Succeeded / Failed / Skipped / Total] 221 / 340 / 7 / 568:  57%|█████▋    | 569/1000 [2:44:04<2:04:16, 17.30s/it][Succeeded / Failed / Skipped / Total] 221 / 341 / 7 / 569:  57%|█████▋    | 569/1000 [2:44:04<2:04:16, 17.30s/it][Succeeded / Failed / Skipped / Total] 221 / 341 / 7 / 569:  57%|█████▋    | 570/1000 [2:44:08<2:03:49, 17.28s/it][Succeeded / Failed / Skipped / Total] 222 / 341 / 7 / 570:  57%|█████▋    | 570/1000 [2:44:08<2:03:49, 17.28s/it][Succeeded / Failed / Skipped / Total] 222 / 341 / 7 / 570:  57%|█████▋    | 571/1000 [2:44:28<2:03:34, 17.28s/it][Succeeded / Failed / Skipped / Total] 222 / 342 / 7 / 571:  57%|█████▋    | 571/1000 [2:44:28<2:03:34, 17.28s/it][Succeeded / Failed / Skipped / Total] 222 / 342 / 7 / 571:  57%|█████▋    | 572/1000 [2:45:52<2:04:06, 17.40s/it]Creates a build doc handler from a jar file . --> Incomprehensible build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String [[base]] ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[incomprehensible]] ( JarFile [[smaug]] , String [[kei]] ) { FileRepository [[refund]] = new JarRepository ( [[smaug]] , Option . apply ( [[kei]] ) ) ; return new DocumentationHandler ( [[refund]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a new HTTP response with the given status code and content . --> Returns the stipulations for the given conditions and ingredients --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[stipulations]] ( int [[conditions]] , byte [ ] [[ingredients]] ) { if ( [[ingredients]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[stipulations]] , new HttpEntity . Strict ( ByteString . fromArray ( [[ingredients]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 563 ---------------------------------------------
Sends a JSON response with the given status code and content . --> Malady estado estado mohair --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[malady]] ( int [[estado]] , JsonNode [[contentment]] , JsonEncoding [[mohair]] ) { if ( [[contentment]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[malady]] ( [[malady]] ) . sendJson ( [[contentment]] , [[mohair]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 564 ---------------------------------------------
Sends a HTTP status with the given content and content length . --> Send statutes to proviso and fibula --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream [[content]] , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[statutes]] ( int [[proviso]] , InputStream [[enchanted]] , long [[fibula]] ) { return [[statutes]] ( [[statutes]] ) . sendInputStream ( [[enchanted]] , [[fibula]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 565 ---------------------------------------------
Find user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Returns a JSON response with the given status code and content . --> Proviso ailment convinced --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[proviso]] ( int [[ailment]] , JsonNode [[convinced]] ) { return [[proviso]] ( [[proviso]] , [[convinced]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
Sets the HTTP status code and MIME type for the given file . --> Return the state of the given proviso and material --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[state]] ( int [[proviso]] , File [[material]] ) { return [[state]] ( [[state]] , [[material]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 568 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
Creates a build doc handler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 570 ---------------------------------------------
Returns the web socket URL for the given request . --> Returns the fidelis for the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[fidelis]] ( Http . Request request ) { return [[fidelis]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 571 ---------------------------------------------
Creates a useful exception to handle the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 572 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 343 / 7 / 572:  57%|█████▋    | 572/1000 [2:45:52<2:04:06, 17.40s/it][Succeeded / Failed / Skipped / Total] 222 / 343 / 7 / 572:  57%|█████▋    | 573/1000 [2:46:12<2:03:51, 17.40s/it][Succeeded / Failed / Skipped / Total] 223 / 343 / 7 / 573:  57%|█████▋    | 573/1000 [2:46:12<2:03:51, 17.40s/it][Succeeded / Failed / Skipped / Total] 223 / 343 / 7 / 573:  57%|█████▋    | 574/1000 [2:46:19<2:03:26, 17.39s/it][Succeeded / Failed / Skipped / Total] 224 / 343 / 7 / 574:  57%|█████▋    | 574/1000 [2:46:19<2:03:26, 17.39s/it][Succeeded / Failed / Skipped / Total] 224 / 343 / 7 / 574:  57%|█████▊    | 575/1000 [2:46:21<2:02:57, 17.36s/it][Succeeded / Failed / Skipped / Total] 225 / 343 / 7 / 575:  57%|█████▊    | 575/1000 [2:46:21<2:02:57, 17.36s/it][Succeeded / Failed / Skipped / Total] 225 / 343 / 7 / 575:  58%|█████▊    | 576/1000 [2:46:34<2:02:37, 17.35s/it][Succeeded / Failed / Skipped / Total] 226 / 343 / 7 / 576:  58%|█████▊    | 576/1000 [2:46:34<2:02:37, 17.35s/it][Succeeded / Failed / Skipped / Total] 226 / 343 / 7 / 576:  58%|█████▊    | 577/1000 [2:48:05<2:03:13, 17.48s/it][Succeeded / Failed / Skipped / Total] 226 / 344 / 7 / 577:  58%|█████▊    | 577/1000 [2:48:05<2:03:13, 17.48s/it][Succeeded / Failed / Skipped / Total] 226 / 344 / 7 / 577:  58%|█████▊    | 578/1000 [2:48:30<2:03:01, 17.49s/it][Succeeded / Failed / Skipped / Total] 226 / 345 / 7 / 578:  58%|█████▊    | 578/1000 [2:48:30<2:03:01, 17.49s/it][Succeeded / Failed / Skipped / Total] 226 / 345 / 7 / 578:  58%|█████▊    | 579/1000 [2:48:36<2:02:35, 17.47s/it][Succeeded / Failed / Skipped / Total] 227 / 345 / 7 / 579:  58%|█████▊    | 579/1000 [2:48:36<2:02:35, 17.47s/it][Succeeded / Failed / Skipped / Total] 227 / 345 / 7 / 579:  58%|█████▊    | 580/1000 [2:48:40<2:02:08, 17.45s/it][Succeeded / Failed / Skipped / Total] 227 / 346 / 7 / 580:  58%|█████▊    | 580/1000 [2:48:40<2:02:08, 17.45s/it][Succeeded / Failed / Skipped / Total] 227 / 346 / 7 / 580:  58%|█████▊    | 581/1000 [2:49:18<2:02:06, 17.49s/it][Succeeded / Failed / Skipped / Total] 228 / 346 / 7 / 581:  58%|█████▊    | 581/1000 [2:49:18<2:02:06, 17.49s/it][Succeeded / Failed / Skipped / Total] 228 / 346 / 7 / 581:  58%|█████▊    | 582/1000 [2:49:35<2:01:48, 17.48s/it]Creates an entity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromString ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity fromString ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 573 ---------------------------------------------
Returns the absolute URL for the given request . --> bleek a given invite --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[bleek]] ( Http . Request [[invite]] ) { return [[bleek]] ( [[invite]] . secure ( ) , [[invite]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 574 ---------------------------------------------
Convert an object to a JSON object . --> Aaaahhh aaaahhh --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[aaaahhh]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 575 ---------------------------------------------
Converts a JSON object to an instance of the given class . --> Liefert die angegebene JSON . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[anche]] > [[anche]] fromJson ( JsonNode json , Class < [[anche]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 576 ---------------------------------------------
Parses a string into a JsonNode . --> Hahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[hahahaha]] ( String [[eason]] ) { try { return mapper ( ) . readTree ( [[eason]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 577 ---------------------------------------------
Creates a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 578 ---------------------------------------------
Creates a new chunked entity from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 579 ---------------------------------------------
Returns the relative path from the start path to the target path . --> Murdoch - > hasidic - > murdoch --> Socre: 1.0

[[[[Adv]]]]: public static String relative ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String relative ( String [[murdoch]] , String [[hasidic]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a function that executes a connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Parses the given input stream into a JsonNode . --> swath an acrobat --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[swath]] ( java . io . InputStream [[acrobat]] ) { try { return mapper ( ) . readTree ( [[acrobat]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 347 / 7 / 582:  58%|█████▊    | 582/1000 [2:49:35<2:01:48, 17.48s/it][Succeeded / Failed / Skipped / Total] 228 / 347 / 7 / 582:  58%|█████▊    | 583/1000 [2:49:36<2:01:18, 17.46s/it][Succeeded / Failed / Skipped / Total] 228 / 348 / 7 / 583:  58%|█████▊    | 583/1000 [2:49:36<2:01:18, 17.46s/it][Succeeded / Failed / Skipped / Total] 228 / 348 / 7 / 583:  58%|█████▊    | 584/1000 [2:49:54<2:01:01, 17.46s/it][Succeeded / Failed / Skipped / Total] 228 / 349 / 7 / 584:  58%|█████▊    | 584/1000 [2:49:54<2:01:01, 17.46s/it][Succeeded / Failed / Skipped / Total] 228 / 349 / 7 / 584:  58%|█████▊    | 585/1000 [2:49:57<2:00:34, 17.43s/it][Succeeded / Failed / Skipped / Total] 229 / 349 / 7 / 585:  58%|█████▊    | 585/1000 [2:49:57<2:00:34, 17.43s/it][Succeeded / Failed / Skipped / Total] 229 / 349 / 7 / 585:  59%|█████▊    | 586/1000 [2:49:58<2:00:04, 17.40s/it][Succeeded / Failed / Skipped / Total] 229 / 350 / 7 / 586:  59%|█████▊    | 586/1000 [2:49:58<2:00:04, 17.40s/it][Succeeded / Failed / Skipped / Total] 229 / 350 / 7 / 586:  59%|█████▊    | 587/1000 [2:50:14<1:59:46, 17.40s/it][Succeeded / Failed / Skipped / Total] 230 / 350 / 7 / 587:  59%|█████▊    | 587/1000 [2:50:14<1:59:46, 17.40s/it][Succeeded / Failed / Skipped / Total] 230 / 350 / 7 / 587:  59%|█████▉    | 588/1000 [2:50:14<1:59:17, 17.37s/it][Succeeded / Failed / Skipped / Total] 230 / 351 / 7 / 588:  59%|█████▉    | 588/1000 [2:50:14<1:59:17, 17.37s/it][Succeeded / Failed / Skipped / Total] 230 / 351 / 7 / 588:  59%|█████▉    | 589/1000 [2:50:15<1:58:48, 17.34s/it]Returns a connection function that executes the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 583 ---------------------------------------------
Checks if the given class array is assignable to the given class array . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 584 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 585 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> Returns the next valid time after the given anaphylactic --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[chandler]] ( String [[anaphylactic]] ) { try { return new CronExpression ( [[anaphylactic]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[anaphylactic]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 586 ---------------------------------------------
Creates a new instance of AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 587 ---------------------------------------------
Gets the next cron interval for a given date . --> Aleichem aleichem aleichem aleichem aleichem --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[aleichem]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 588 ---------------------------------------------
Creates a new server for the given mode and port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server forRouter ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server forRouter ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 589 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 352 / 7 / 589:  59%|█████▉    | 589/1000 [2:50:15<1:58:48, 17.34s/it][Succeeded / Failed / Skipped / Total] 230 / 352 / 7 / 589:  59%|█████▉    | 590/1000 [2:50:44<1:58:38, 17.36s/it][Succeeded / Failed / Skipped / Total] 231 / 352 / 7 / 590:  59%|█████▉    | 590/1000 [2:50:44<1:58:38, 17.36s/it][Succeeded / Failed / Skipped / Total] 231 / 352 / 7 / 590:  59%|█████▉    | 591/1000 [2:51:06<1:58:25, 17.37s/it][Succeeded / Failed / Skipped / Total] 232 / 352 / 7 / 591:  59%|█████▉    | 591/1000 [2:51:06<1:58:25, 17.37s/it][Succeeded / Failed / Skipped / Total] 232 / 352 / 7 / 591:  59%|█████▉    | 592/1000 [2:51:13<1:58:00, 17.35s/it][Succeeded / Failed / Skipped / Total] 232 / 353 / 7 / 592:  59%|█████▉    | 592/1000 [2:51:13<1:58:00, 17.35s/it][Succeeded / Failed / Skipped / Total] 232 / 353 / 7 / 592:  59%|█████▉    | 593/1000 [2:51:30<1:57:42, 17.35s/it][Succeeded / Failed / Skipped / Total] 232 / 354 / 7 / 593:  59%|█████▉    | 593/1000 [2:51:30<1:57:42, 17.35s/it][Succeeded / Failed / Skipped / Total] 232 / 354 / 7 / 593:  59%|█████▉    | 594/1000 [2:53:46<1:58:46, 17.55s/it][Succeeded / Failed / Skipped / Total] 232 / 355 / 7 / 594:  59%|█████▉    | 594/1000 [2:53:46<1:58:46, 17.55s/it][Succeeded / Failed / Skipped / Total] 232 / 355 / 7 / 594:  60%|█████▉    | 595/1000 [2:54:08<1:58:32, 17.56s/it][Succeeded / Failed / Skipped / Total] 232 / 356 / 7 / 595:  60%|█████▉    | 595/1000 [2:54:08<1:58:32, 17.56s/it][Succeeded / Failed / Skipped / Total] 232 / 356 / 7 / 595:  60%|█████▉    | 596/1000 [2:55:23<1:58:53, 17.66s/it][Succeeded / Failed / Skipped / Total] 232 / 357 / 7 / 596:  60%|█████▉    | 596/1000 [2:55:23<1:58:53, 17.66s/it][Succeeded / Failed / Skipped / Total] 232 / 357 / 7 / 596:  60%|█████▉    | 597/1000 [2:55:23<1:58:23, 17.63s/it][Succeeded / Failed / Skipped / Total] 232 / 358 / 7 / 597:  60%|█████▉    | 597/1000 [2:55:23<1:58:23, 17.63s/it][Succeeded / Failed / Skipped / Total] 232 / 358 / 7 / 597:  60%|█████▉    | 598/1000 [2:55:45<1:58:08, 17.63s/it]Returns the preferred language for the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 590 ---------------------------------------------
Render a todo page . --> Render the MOMENTO page --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[MOMENTO]] ( Request [[prayed]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[prayed]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 591 ---------------------------------------------
Converts a constraint descriptor to a displayable constraint . --> demerit an obstacles --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[demerit]] ( ConstraintDescriptor < ? > [[obstacles]] ) { final Display [[marvel]] = [[obstacles]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[marvel]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[marvel]] . attributes ( ) ) . map ( attr -> [[obstacles]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 592 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 594 ---------------------------------------------
Canonicalize the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 595 ---------------------------------------------
Creates a binding to the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 596 ---------------------------------------------
Adds a key - value pair to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String value ) { session ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String value ) { session ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Adds a flash key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void flash ( String key , String value ) { flash ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String key , String value ) { flash ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 598 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 359 / 7 / 598:  60%|█████▉    | 598/1000 [2:55:45<1:58:08, 17.63s/it][Succeeded / Failed / Skipped / Total] 232 / 359 / 7 / 598:  60%|█████▉    | 599/1000 [2:55:48<1:57:41, 17.61s/it][Succeeded / Failed / Skipped / Total] 232 / 360 / 7 / 599:  60%|█████▉    | 599/1000 [2:55:48<1:57:41, 17.61s/it][Succeeded / Failed / Skipped / Total] 232 / 360 / 7 / 599:  60%|██████    | 600/1000 [2:56:18<1:57:32, 17.63s/it][Succeeded / Failed / Skipped / Total] 232 / 361 / 7 / 600:  60%|██████    | 600/1000 [2:56:18<1:57:32, 17.63s/it][Succeeded / Failed / Skipped / Total] 232 / 361 / 7 / 600:  60%|██████    | 601/1000 [2:56:18<1:57:03, 17.60s/it][Succeeded / Failed / Skipped / Total] 233 / 361 / 7 / 601:  60%|██████    | 601/1000 [2:56:18<1:57:03, 17.60s/it][Succeeded / Failed / Skipped / Total] 233 / 361 / 7 / 601:  60%|██████    | 602/1000 [2:56:34<1:56:44, 17.60s/it][Succeeded / Failed / Skipped / Total] 234 / 361 / 7 / 602:  60%|██████    | 602/1000 [2:56:34<1:56:44, 17.60s/it][Succeeded / Failed / Skipped / Total] 234 / 361 / 7 / 602:  60%|██████    | 603/1000 [2:56:46<1:56:23, 17.59s/it][Succeeded / Failed / Skipped / Total] 235 / 361 / 7 / 603:  60%|██████    | 603/1000 [2:56:46<1:56:23, 17.59s/it][Succeeded / Failed / Skipped / Total] 235 / 361 / 7 / 603:  60%|██████    | 604/1000 [2:57:00<1:56:03, 17.58s/it][Succeeded / Failed / Skipped / Total] 235 / 362 / 7 / 604:  60%|██████    | 604/1000 [2:57:00<1:56:03, 17.58s/it][Succeeded / Failed / Skipped / Total] 235 / 362 / 7 / 604:  60%|██████    | 605/1000 [2:57:06<1:55:37, 17.56s/it][Succeeded / Failed / Skipped / Total] 236 / 362 / 7 / 605:  60%|██████    | 605/1000 [2:57:06<1:55:37, 17.56s/it][Succeeded / Failed / Skipped / Total] 236 / 362 / 7 / 605:  61%|██████    | 606/1000 [2:58:56<1:56:20, 17.72s/it]Wait for the given stage to complete after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 599 ---------------------------------------------
Returns a binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 600 ---------------------------------------------
Convert a set of constraints to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 601 ---------------------------------------------
Returns a list of available languages . --> Returns a list of all languages in a conceivably --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[ça]] ( Application [[conceivably]] ) { play . api . i18n . Langs [[bearden]] = [[conceivably]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[discriminated]] = Scala . asJava ( [[bearden]] . availables ( ) ) ; return [[discriminated]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 602 ---------------------------------------------
Creates a new EvolutionsReader from a map of evolutions . --> Factory method for reading anil fergie volutions --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[fergie]] . EvolutionsReader [[anil]] ( Map < String , List < Evolution > > [[fergie]] ) { return new SimpleEvolutionsReader ( [[fergie]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 603 ---------------------------------------------
Returns the preferred language for the given application . --> Create a favored language from a list of sprites --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[favored]] ( Application app , List < Lang > [[sprites]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[sprites]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a GuiceApplicationBuilder for the given application loader context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 605 ---------------------------------------------
Clean up database volutions . --> Pose a nucleus to a cerveza --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean [[autocommit]] , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[potted]] ( Database [[nucleus]] , boolean [[give]] , String [[cerveza]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[nucleus]] . asScala ( ) , [[cerveza]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[give]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 606 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 363 / 7 / 606:  61%|██████    | 606/1000 [2:58:56<1:56:20, 17.72s/it][Succeeded / Failed / Skipped / Total] 236 / 363 / 7 / 606:  61%|██████    | 607/1000 [3:00:39<1:56:57, 17.86s/it][Succeeded / Failed / Skipped / Total] 236 / 364 / 7 / 607:  61%|██████    | 607/1000 [3:00:39<1:56:57, 17.86s/it][Succeeded / Failed / Skipped / Total] 236 / 364 / 7 / 607:  61%|██████    | 608/1000 [3:01:19<1:56:54, 17.89s/it][Succeeded / Failed / Skipped / Total] 236 / 365 / 7 / 608:  61%|██████    | 608/1000 [3:01:19<1:56:54, 17.89s/it][Succeeded / Failed / Skipped / Total] 236 / 365 / 7 / 608:  61%|██████    | 609/1000 [3:01:32<1:56:33, 17.89s/it][Succeeded / Failed / Skipped / Total] 236 / 366 / 7 / 609:  61%|██████    | 609/1000 [3:01:32<1:56:33, 17.89s/it][Succeeded / Failed / Skipped / Total] 236 / 366 / 7 / 609:  61%|██████    | 610/1000 [3:01:38<1:56:07, 17.87s/it][Succeeded / Failed / Skipped / Total] 236 / 367 / 7 / 610:  61%|██████    | 610/1000 [3:01:38<1:56:07, 17.87s/it][Succeeded / Failed / Skipped / Total] 236 / 367 / 7 / 610:  61%|██████    | 611/1000 [3:01:52<1:55:47, 17.86s/it][Succeeded / Failed / Skipped / Total] 236 / 368 / 7 / 611:  61%|██████    | 611/1000 [3:01:52<1:55:47, 17.86s/it][Succeeded / Failed / Skipped / Total] 236 / 368 / 7 / 611:  61%|██████    | 612/1000 [3:01:59<1:55:23, 17.84s/it][Succeeded / Failed / Skipped / Total] 237 / 368 / 7 / 612:  61%|██████    | 612/1000 [3:01:59<1:55:23, 17.84s/it][Succeeded / Failed / Skipped / Total] 237 / 368 / 7 / 612:  61%|██████▏   | 613/1000 [3:02:47<1:55:24, 17.89s/it][Succeeded / Failed / Skipped / Total] 238 / 368 / 7 / 613:  61%|██████▏   | 613/1000 [3:02:47<1:55:24, 17.89s/it][Succeeded / Failed / Skipped / Total] 238 / 368 / 7 / 613:  61%|██████▏   | 614/1000 [3:03:25<1:55:18, 17.92s/it][Succeeded / Failed / Skipped / Total] 239 / 368 / 7 / 614:  61%|██████▏   | 614/1000 [3:03:25<1:55:18, 17.92s/it][Succeeded / Failed / Skipped / Total] 239 / 368 / 7 / 614:  62%|██████▏   | 615/1000 [3:04:17<1:55:22, 17.98s/it]Returns a binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 607 ---------------------------------------------
Returns a new binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 608 ---------------------------------------------
Adds a configuration loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Load the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 610 ---------------------------------------------
Returns a binding that is bound to a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 611 ---------------------------------------------
Adds a module loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 612 ---------------------------------------------
Creates a new EvolutionsReader for the specified evolutions . --> Factory method to get azaleas --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[lawsuit]] . EvolutionsReader [[azaleas]] ( Evolution ... [[lawsuit]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[lawsuit]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 613 ---------------------------------------------
Push or pop an EntityManager from the stack . --> División de división --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[división]] ( EntityManager [[como]] , boolean [[hojo]] ) { Deque < EntityManager > ems = this . emStack ( [[hojo]] ) ; if ( [[como]] != null ) { ems . push ( [[como]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 614 ---------------------------------------------
Apply a splitter to a flow . --> Create an iman stream from a cuttin and aqueduct --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > [[bypassWith]] ( Function < In , F . Either < [[FlowIn]] , [[Out]] > > splitter , Flow < [[FlowIn]] , [[Out]] , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[cuttin]] , [[Outdoor]] > Flow < In , [[Outdoor]] , ? > [[iman]] ( Function < In , F . Either < [[cuttin]] , [[Outdoor]] > > splitter , Flow < [[cuttin]] , [[Outdoor]] , ? > [[aqueduct]] ) { return [[iman]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[aqueduct]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 615 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 369 / 7 / 615:  62%|██████▏   | 615/1000 [3:04:17<1:55:22, 17.98s/it][Succeeded / Failed / Skipped / Total] 239 / 369 / 7 / 615:  62%|██████▏   | 616/1000 [3:04:18<1:54:53, 17.95s/it][Succeeded / Failed / Skipped / Total] 239 / 370 / 7 / 616:  62%|██████▏   | 616/1000 [3:04:18<1:54:53, 17.95s/it][Succeeded / Failed / Skipped / Total] 239 / 370 / 7 / 616:  62%|██████▏   | 617/1000 [3:04:19<1:54:24, 17.92s/it][Succeeded / Failed / Skipped / Total] 239 / 371 / 7 / 617:  62%|██████▏   | 617/1000 [3:04:19<1:54:24, 17.92s/it][Succeeded / Failed / Skipped / Total] 239 / 371 / 7 / 617:  62%|██████▏   | 618/1000 [3:05:19<1:54:33, 17.99s/it][Succeeded / Failed / Skipped / Total] 239 / 372 / 7 / 618:  62%|██████▏   | 618/1000 [3:05:19<1:54:33, 17.99s/it][Succeeded / Failed / Skipped / Total] 239 / 372 / 7 / 618:  62%|██████▏   | 619/1000 [3:05:38<1:54:16, 17.99s/it][Succeeded / Failed / Skipped / Total] 239 / 373 / 7 / 619:  62%|██████▏   | 619/1000 [3:05:38<1:54:16, 17.99s/it][Succeeded / Failed / Skipped / Total] 239 / 373 / 7 / 619:  62%|██████▏   | 620/1000 [3:05:44<1:53:50, 17.97s/it][Succeeded / Failed / Skipped / Total] 240 / 373 / 7 / 620:  62%|██████▏   | 620/1000 [3:05:44<1:53:50, 17.97s/it][Succeeded / Failed / Skipped / Total] 240 / 373 / 7 / 620:  62%|██████▏   | 621/1000 [3:05:50<1:53:25, 17.96s/it][Succeeded / Failed / Skipped / Total] 241 / 373 / 7 / 621:  62%|██████▏   | 621/1000 [3:05:50<1:53:25, 17.96s/it][Succeeded / Failed / Skipped / Total] 241 / 373 / 7 / 621:  62%|██████▏   | 622/1000 [3:06:07<1:53:06, 17.95s/it][Succeeded / Failed / Skipped / Total] 241 / 374 / 7 / 622:  62%|██████▏   | 622/1000 [3:06:07<1:53:06, 17.95s/it][Succeeded / Failed / Skipped / Total] 241 / 374 / 7 / 622:  62%|██████▏   | 623/1000 [3:06:30<1:52:51, 17.96s/it][Succeeded / Failed / Skipped / Total] 241 / 375 / 7 / 623:  62%|██████▏   | 623/1000 [3:06:30<1:52:51, 17.96s/it][Succeeded / Failed / Skipped / Total] 241 / 375 / 7 / 623:  62%|██████▏   | 624/1000 [3:06:52<1:52:36, 17.97s/it]Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a flow from an actor reference . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 617 ---------------------------------------------
Convert error arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 618 ---------------------------------------------
Encodes the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 620 ---------------------------------------------
Returns a JSON representation of the errors . --> Figurine a burdensome --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[figurine]] ( Lang [[burdensome]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[burdensome]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[burdensome]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[burdensome]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 621 ---------------------------------------------
Returns the value for the given key . --> Get valor . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[valor]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 622 ---------------------------------------------
Load the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 623 ---------------------------------------------
Parses the given text into an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 241 / 376 / 7 / 624:  62%|██████▏   | 624/1000 [3:06:52<1:52:36, 17.97s/it][Succeeded / Failed / Skipped / Total] 241 / 376 / 7 / 624:  62%|██████▎   | 625/1000 [3:06:54<1:52:08, 17.94s/it][Succeeded / Failed / Skipped / Total] 241 / 377 / 7 / 625:  62%|██████▎   | 625/1000 [3:06:54<1:52:08, 17.94s/it][Succeeded / Failed / Skipped / Total] 241 / 377 / 7 / 625:  63%|██████▎   | 626/1000 [3:07:13<1:51:51, 17.95s/it][Succeeded / Failed / Skipped / Total] 241 / 378 / 7 / 626:  63%|██████▎   | 626/1000 [3:07:13<1:51:51, 17.95s/it][Succeeded / Failed / Skipped / Total] 241 / 378 / 7 / 626:  63%|██████▎   | 627/1000 [3:07:16<1:51:24, 17.92s/it][Succeeded / Failed / Skipped / Total] 241 / 379 / 7 / 627:  63%|██████▎   | 627/1000 [3:07:16<1:51:24, 17.92s/it][Succeeded / Failed / Skipped / Total] 241 / 379 / 7 / 627:  63%|██████▎   | 628/1000 [3:07:17<1:50:56, 17.89s/it][Succeeded / Failed / Skipped / Total] 242 / 379 / 7 / 628:  63%|██████▎   | 628/1000 [3:07:17<1:50:56, 17.89s/it][Succeeded / Failed / Skipped / Total] 242 / 379 / 7 / 628:  63%|██████▎   | 629/1000 [3:07:26<1:50:33, 17.88s/it][Succeeded / Failed / Skipped / Total] 242 / 380 / 7 / 629:  63%|██████▎   | 629/1000 [3:07:26<1:50:33, 17.88s/it][Succeeded / Failed / Skipped / Total] 242 / 380 / 7 / 629:  63%|██████▎   | 630/1000 [3:07:36<1:50:11, 17.87s/it][Succeeded / Failed / Skipped / Total] 242 / 381 / 7 / 630:  63%|██████▎   | 630/1000 [3:07:36<1:50:11, 17.87s/it][Succeeded / Failed / Skipped / Total] 242 / 381 / 7 / 630:  63%|██████▎   | 631/1000 [3:09:21<1:50:44, 18.01s/it][Succeeded / Failed / Skipped / Total] 242 / 382 / 7 / 631:  63%|██████▎   | 631/1000 [3:09:21<1:50:44, 18.01s/it][Succeeded / Failed / Skipped / Total] 242 / 382 / 7 / 631:  63%|██████▎   | 632/1000 [3:09:31<1:50:21, 17.99s/it]Parses the given text into an instance of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 625 ---------------------------------------------
Creates a new GuiceApplicationBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 626 ---------------------------------------------
Print an object to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 627 ---------------------------------------------
Prints the type of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 628 ---------------------------------------------
Register optional formatters . --> Fluctuate formatters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[fluctuate]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 629 ---------------------------------------------
Returns the EntityManager bound to the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 630 ---------------------------------------------
Print a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 631 ---------------------------------------------
Gets the stack of EntityManager objects . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 383 / 7 / 632:  63%|██████▎   | 632/1000 [3:09:31<1:50:21, 17.99s/it][Succeeded / Failed / Skipped / Total] 242 / 383 / 7 / 632:  63%|██████▎   | 633/1000 [3:09:42<1:49:59, 17.98s/it][Succeeded / Failed / Skipped / Total] 243 / 383 / 7 / 633:  63%|██████▎   | 633/1000 [3:09:42<1:49:59, 17.98s/it][Succeeded / Failed / Skipped / Total] 243 / 383 / 7 / 633:  63%|██████▎   | 634/1000 [3:10:35<1:50:01, 18.04s/it][Succeeded / Failed / Skipped / Total] 243 / 384 / 7 / 634:  63%|██████▎   | 634/1000 [3:10:35<1:50:01, 18.04s/it][Succeeded / Failed / Skipped / Total] 243 / 384 / 7 / 634:  64%|██████▎   | 635/1000 [3:11:00<1:49:47, 18.05s/it][Succeeded / Failed / Skipped / Total] 243 / 385 / 7 / 635:  64%|██████▎   | 635/1000 [3:11:00<1:49:47, 18.05s/it][Succeeded / Failed / Skipped / Total] 243 / 385 / 7 / 635:  64%|██████▎   | 636/1000 [3:11:42<1:49:43, 18.09s/it][Succeeded / Failed / Skipped / Total] 243 / 386 / 7 / 636:  64%|██████▎   | 636/1000 [3:11:42<1:49:43, 18.09s/it][Succeeded / Failed / Skipped / Total] 243 / 386 / 7 / 636:  64%|██████▎   | 637/1000 [3:12:01<1:49:25, 18.09s/it][Succeeded / Failed / Skipped / Total] 244 / 386 / 7 / 637:  64%|██████▎   | 637/1000 [3:12:01<1:49:25, 18.09s/it]Passes the given flow through the given splitter with the given merge strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 633 ---------------------------------------------
Returns a list of nodes matching the given path and node . --> Miek a list of rails and hearts --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object [[node]] ) { return [[selectNodes]] ( [[path]] , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[mieke]] ( String [[rails]] , Object [[hearts]] ) { return [[mieke]] ( [[rails]] , [[hearts]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 635 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 636 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 637 ---------------------------------------------
Converts a java . util . List to a Seq . --> Hahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[hahahaha]] ( java . util . List < T > [[slate]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[slate]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 245 / 386 / 7 / 638:  64%|██████▍   | 638/1000 [3:12:01<1:48:57, 18.06s/it][Succeeded / Failed / Skipped / Total] 245 / 386 / 7 / 638:  64%|██████▍   | 639/1000 [3:12:21<1:48:40, 18.06s/it][Succeeded / Failed / Skipped / Total] 245 / 387 / 7 / 639:  64%|██████▍   | 639/1000 [3:12:21<1:48:40, 18.06s/it][Succeeded / Failed / Skipped / Total] 245 / 387 / 7 / 639:  64%|██████▍   | 640/1000 [3:12:35<1:48:20, 18.06s/it][Succeeded / Failed / Skipped / Total] 246 / 387 / 7 / 640:  64%|██████▍   | 640/1000 [3:12:35<1:48:20, 18.06s/it][Succeeded / Failed / Skipped / Total] 246 / 387 / 7 / 640:  64%|██████▍   | 641/1000 [3:12:39<1:47:53, 18.03s/it][Succeeded / Failed / Skipped / Total] 247 / 387 / 7 / 641:  64%|██████▍   | 641/1000 [3:12:39<1:47:53, 18.03s/it][Succeeded / Failed / Skipped / Total] 247 / 387 / 7 / 641:  64%|██████▍   | 642/1000 [3:13:10<1:47:43, 18.05s/it][Succeeded / Failed / Skipped / Total] 248 / 387 / 7 / 642:  64%|██████▍   | 642/1000 [3:13:10<1:47:43, 18.05s/it][Succeeded / Failed / Skipped / Total] 248 / 387 / 7 / 642:  64%|██████▍   | 643/1000 [3:13:13<1:47:16, 18.03s/it][Succeeded / Failed / Skipped / Total] 249 / 387 / 7 / 643:  64%|██████▍   | 643/1000 [3:13:13<1:47:16, 18.03s/it][Succeeded / Failed / Skipped / Total] 249 / 387 / 7 / 643:  64%|██████▍   | 644/1000 [3:13:30<1:46:58, 18.03s/it]Creates a MappedWebSocketAcceptor that accepts JSON messages . --> Downcast to MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[json]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[downcast]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 639 ---------------------------------------------
Fill the form with the given values . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 640 ---------------------------------------------
Gets the total transformation cost . --> Mentions frothy and tinderbox --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[mentioning]] ( final Class < ? > [ ] [[electroshock]] , final Executable executable ) { final Class < ? > [ ] [[frothy]] = executable . getParameterTypes ( ) ; final boolean [[tinderbox]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 641 ---------------------------------------------
Accept or result . --> Creates a congestion congestion congestion congestion congestion congestion --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[congested]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[congested]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[apps]] ) { return f . apply ( [[apps]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Returns the localized message for the given key . --> Methode permettant dans la crucial --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[dans]] ( String [[crucial]] , Object ... args ) { return messagesApi . get ( lang , [[crucial]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 643 ---------------------------------------------
Get one or more messages . --> Sobre a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[sobre]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 387 / 7 / 644:  64%|██████▍   | 644/1000 [3:13:30<1:46:58, 18.03s/it][Succeeded / Failed / Skipped / Total] 250 / 387 / 7 / 644:  64%|██████▍   | 645/1000 [3:13:37<1:46:34, 18.01s/it][Succeeded / Failed / Skipped / Total] 251 / 387 / 7 / 645:  64%|██████▍   | 645/1000 [3:13:37<1:46:34, 18.01s/it][Succeeded / Failed / Skipped / Total] 251 / 387 / 7 / 645:  65%|██████▍   | 646/1000 [3:13:54<1:46:15, 18.01s/it][Succeeded / Failed / Skipped / Total] 252 / 387 / 7 / 646:  65%|██████▍   | 646/1000 [3:13:54<1:46:15, 18.01s/it][Succeeded / Failed / Skipped / Total] 252 / 387 / 7 / 646:  65%|██████▍   | 647/1000 [3:14:10<1:45:56, 18.01s/it][Succeeded / Failed / Skipped / Total] 253 / 387 / 7 / 647:  65%|██████▍   | 647/1000 [3:14:10<1:45:56, 18.01s/it][Succeeded / Failed / Skipped / Total] 253 / 387 / 7 / 647:  65%|██████▍   | 648/1000 [3:14:39<1:45:44, 18.02s/it][Succeeded / Failed / Skipped / Total] 254 / 387 / 7 / 648:  65%|██████▍   | 648/1000 [3:14:39<1:45:44, 18.02s/it][Succeeded / Failed / Skipped / Total] 254 / 387 / 7 / 648:  65%|██████▍   | 649/1000 [3:14:40<1:45:17, 18.00s/it][Succeeded / Failed / Skipped / Total] 255 / 387 / 7 / 649:  65%|██████▍   | 649/1000 [3:14:40<1:45:17, 18.00s/it][Succeeded / Failed / Skipped / Total] 255 / 387 / 7 / 649:  65%|██████▌   | 650/1000 [3:14:46<1:44:52, 17.98s/it][Succeeded / Failed / Skipped / Total] 256 / 387 / 7 / 650:  65%|██████▌   | 650/1000 [3:14:46<1:44:52, 17.98s/it][Succeeded / Failed / Skipped / Total] 256 / 387 / 7 / 650:  65%|██████▌   | 651/1000 [3:14:46<1:44:25, 17.95s/it]Checks if the given object is public or package access . --> Check if the given object is accessible and if so set it to Truly --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[Imaginary]]" != "[[Imaginary]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[Truly]]" == "[[Truly]]" ) ; return "[[Truly]]" == "[[Truly]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
Converts an array to an immutable sequence . --> Returns an immutable sequence of the given stateroom --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[lke]] ( T [ ] [[stateroom]] ) { return [[lke]] ( java . util . Arrays . asList ( [[stateroom]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 646 ---------------------------------------------
Quick sort . --> Dingbats a given number of inventories --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int [[lo]] , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( [[index]] , [[cmp]] ) ; super . quickSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[dingbats]] ( int [[inventories]] , int [[y]] , int [[heya]] , Comparator [[mim]] ) { chooseComparer ( [[inventories]] , [[mim]] ) ; super . quickSort ( [[y]] , [[heya]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 647 ---------------------------------------------
Calculates the promotion cost for a primitive type . --> Borrow fee from aix and arbogast --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > [[destClass]] ) { float [[cost]] = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[borrow]] ( final Class < ? > [[aix]] , final Class < ? > [[arbogast]] ) { float [[fee]] = 0.0f ; Class < ? > cls = [[aix]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 648 ---------------------------------------------
Merges the elements from lo to hi using the specified comparator . --> Maclaine maclaine --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int [[lo]] , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[maclaine]] ( int [[ratios]] , int [[rowe]] , int [[ih]] , Comparator cmp ) { chooseComparer ( [[ratios]] , cmp ) ; super . mergeSort ( [[rowe]] , [[ih]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 649 ---------------------------------------------
Cast a numeric type to another type . --> generates a Bracknell instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type [[from]] , Type [[to]] ) { if ( [[from]] != [[to]] ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[bracknell]] ( Type [[on]] , Type [[des]] ) { if ( [[on]] != [[des]] ) { if ( [[on]] == Type . DOUBLE_TYPE ) { if ( [[des]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[des]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[bracknell]] ( Type . INT_TYPE , [[des]] ) ; } } else if ( [[on]] == Type . FLOAT_TYPE ) { if ( [[des]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[des]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[bracknell]] ( Type . INT_TYPE , [[des]] ) ; } } else if ( [[on]] == Type . LONG_TYPE ) { if ( [[des]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[des]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[bracknell]] ( Type . INT_TYPE , [[des]] ) ; } } else { if ( [[des]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[des]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[des]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[des]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[des]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[des]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 650 ---------------------------------------------
Returns an immutable sequence consisting of the elements of the given array . --> Breadfruit un sequence --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[breadfruit]] ( T ... [[cab]] ) { return toSeq ( [[cab]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 651 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 387 / 8 / 651:  65%|██████▌   | 651/1000 [3:14:46<1:44:25, 17.95s/it][Succeeded / Failed / Skipped / Total] 256 / 387 / 8 / 651:  65%|██████▌   | 652/1000 [3:14:50<1:43:59, 17.93s/it][Succeeded / Failed / Skipped / Total] 257 / 387 / 8 / 652:  65%|██████▌   | 652/1000 [3:14:50<1:43:59, 17.93s/it][Succeeded / Failed / Skipped / Total] 257 / 387 / 8 / 652:  65%|██████▌   | 653/1000 [3:14:50<1:43:32, 17.90s/it][Succeeded / Failed / Skipped / Total] 257 / 388 / 8 / 653:  65%|██████▌   | 653/1000 [3:14:50<1:43:32, 17.90s/it][Succeeded / Failed / Skipped / Total] 257 / 388 / 8 / 653:  65%|██████▌   | 654/1000 [3:14:50<1:43:05, 17.88s/it][Succeeded / Failed / Skipped / Total] 257 / 389 / 8 / 654:  65%|██████▌   | 654/1000 [3:14:51<1:43:05, 17.88s/it][Succeeded / Failed / Skipped / Total] 257 / 389 / 8 / 654:  66%|██████▌   | 655/1000 [3:14:51<1:42:38, 17.85s/it][Succeeded / Failed / Skipped / Total] 257 / 390 / 8 / 655:  66%|██████▌   | 655/1000 [3:14:51<1:42:38, 17.85s/it][Succeeded / Failed / Skipped / Total] 257 / 390 / 8 / 655:  66%|██████▌   | 656/1000 [3:14:51<1:42:11, 17.82s/it][Succeeded / Failed / Skipped / Total] 257 / 391 / 8 / 656:  66%|██████▌   | 656/1000 [3:14:51<1:42:11, 17.82s/it][Succeeded / Failed / Skipped / Total] 257 / 391 / 8 / 656:  66%|██████▌   | 657/1000 [3:14:52<1:41:44, 17.80s/it]Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Adds a zero or null to the stack . --> cafeteria --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[cafeteria]] ( Type [[gender]] ) { if ( TypeUtils . isPrimitive ( [[gender]] ) ) { switch ( [[gender]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 653 ---------------------------------------------
Unbox a primitive or zero type . --> [[[FAILED]]]

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 654 ---------------------------------------------
Processes an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 655 ---------------------------------------------
Compare two null labels . --> [[[FAILED]]]

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 656 ---------------------------------------------
Resolve all bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 657 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 392 / 8 / 657:  66%|██████▌   | 657/1000 [3:14:52<1:41:44, 17.80s/it][Succeeded / Failed / Skipped / Total] 257 / 392 / 8 / 657:  66%|██████▌   | 658/1000 [3:14:52<1:41:17, 17.77s/it][Succeeded / Failed / Skipped / Total] 257 / 393 / 8 / 658:  66%|██████▌   | 658/1000 [3:14:52<1:41:17, 17.77s/it][Succeeded / Failed / Skipped / Total] 257 / 393 / 8 / 658:  66%|██████▌   | 659/1000 [3:14:52<1:40:50, 17.74s/it][Succeeded / Failed / Skipped / Total] 257 / 394 / 8 / 659:  66%|██████▌   | 659/1000 [3:14:52<1:40:50, 17.74s/it][Succeeded / Failed / Skipped / Total] 257 / 394 / 8 / 659:  66%|██████▌   | 660/1000 [3:14:52<1:40:23, 17.72s/it][Succeeded / Failed / Skipped / Total] 257 / 394 / 9 / 660:  66%|██████▌   | 660/1000 [3:14:52<1:40:23, 17.72s/it][Succeeded / Failed / Skipped / Total] 257 / 394 / 9 / 660:  66%|██████▌   | 661/1000 [3:16:12<1:40:37, 17.81s/it]Get a list of methods from a superclass and interfaces . --> [[[FAILED]]]

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List methods ) { getMethods ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List methods ) { getMethods ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 658 ---------------------------------------------
Filter constructors by visibility . --> [[[FAILED]]]

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 659 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void setSuperclass ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void setSuperclass ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 660 ---------------------------------------------
Gets a field from the provider . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 395 / 9 / 661:  66%|██████▌   | 661/1000 [3:16:12<1:40:37, 17.81s/it][Succeeded / Failed / Skipped / Total] 257 / 395 / 9 / 661:  66%|██████▌   | 662/1000 [3:17:07<1:40:38, 17.87s/it][Succeeded / Failed / Skipped / Total] 257 / 396 / 9 / 662:  66%|██████▌   | 662/1000 [3:17:07<1:40:38, 17.87s/it][Succeeded / Failed / Skipped / Total] 257 / 396 / 9 / 662:  66%|██████▋   | 663/1000 [3:18:09<1:40:43, 17.93s/it][Succeeded / Failed / Skipped / Total] 257 / 397 / 9 / 663:  66%|██████▋   | 663/1000 [3:18:09<1:40:43, 17.93s/it][Succeeded / Failed / Skipped / Total] 257 / 397 / 9 / 663:  66%|██████▋   | 664/1000 [3:18:09<1:40:16, 17.91s/it][Succeeded / Failed / Skipped / Total] 257 / 397 / 10 / 664:  66%|██████▋   | 664/1000 [3:18:09<1:40:16, 17.91s/it][Succeeded / Failed / Skipped / Total] 257 / 397 / 10 / 664:  66%|██████▋   | 665/1000 [3:18:10<1:39:49, 17.88s/it]Register an annotation formatter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 662 ---------------------------------------------
Returns all global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 663 ---------------------------------------------
Invoke the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 664 ---------------------------------------------
Finds all methods matching the given names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 397 / 10 / 665:  66%|██████▋   | 665/1000 [3:18:10<1:39:49, 17.88s/it][Succeeded / Failed / Skipped / Total] 258 / 397 / 10 / 665:  67%|██████▋   | 666/1000 [3:18:16<1:39:26, 17.86s/it][Succeeded / Failed / Skipped / Total] 258 / 398 / 10 / 666:  67%|██████▋   | 666/1000 [3:18:16<1:39:26, 17.86s/it][Succeeded / Failed / Skipped / Total] 258 / 398 / 10 / 666:  67%|██████▋   | 667/1000 [3:18:26<1:39:04, 17.85s/it][Succeeded / Failed / Skipped / Total] 259 / 398 / 10 / 667:  67%|██████▋   | 667/1000 [3:18:26<1:39:04, 17.85s/it][Succeeded / Failed / Skipped / Total] 259 / 398 / 10 / 667:  67%|██████▋   | 668/1000 [3:18:33<1:38:41, 17.84s/it][Succeeded / Failed / Skipped / Total] 259 / 399 / 10 / 668:  67%|██████▋   | 668/1000 [3:18:33<1:38:41, 17.84s/it][Succeeded / Failed / Skipped / Total] 259 / 399 / 10 / 668:  67%|██████▋   | 669/1000 [3:19:04<1:38:29, 17.85s/it][Succeeded / Failed / Skipped / Total] 260 / 399 / 10 / 669:  67%|██████▋   | 669/1000 [3:19:04<1:38:29, 17.85s/it][Succeeded / Failed / Skipped / Total] 260 / 399 / 10 / 669:  67%|██████▋   | 670/1000 [3:20:14<1:38:37, 17.93s/it][Succeeded / Failed / Skipped / Total] 260 / 400 / 10 / 670:  67%|██████▋   | 670/1000 [3:20:14<1:38:37, 17.93s/it][Succeeded / Failed / Skipped / Total] 260 / 400 / 10 / 670:  67%|██████▋   | 671/1000 [3:20:34<1:38:20, 17.94s/it][Succeeded / Failed / Skipped / Total] 261 / 400 / 10 / 671:  67%|██████▋   | 671/1000 [3:20:34<1:38:20, 17.94s/it][Succeeded / Failed / Skipped / Total] 261 / 400 / 10 / 671:  67%|██████▋   | 672/1000 [3:21:57<1:38:34, 18.03s/it][Succeeded / Failed / Skipped / Total] 261 / 401 / 10 / 672:  67%|██████▋   | 672/1000 [3:21:57<1:38:34, 18.03s/it][Succeeded / Failed / Skipped / Total] 261 / 401 / 10 / 672:  67%|██████▋   | 673/1000 [3:22:15<1:38:16, 18.03s/it][Succeeded / Failed / Skipped / Total] 261 / 402 / 10 / 673:  67%|██████▋   | 673/1000 [3:22:15<1:38:16, 18.03s/it][Succeeded / Failed / Skipped / Total] 261 / 402 / 10 / 673:  67%|██████▋   | 674/1000 [3:22:35<1:37:59, 18.03s/it]Load the argument at the given index . --> sumptuous for a given yearbook --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[sumptuous]] ( int [[yearbook]] ) { load_local ( state . argumentTypes [ [[yearbook]] ] , state . localOffset + skipArgs ( [[yearbook]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 666 ---------------------------------------------
Creates a new database instance with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 667 ---------------------------------------------
Resolve a child path . --> Remove teenagers from keystone --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[remedied]] ( final Path [[keystone]] , String [[teenagers]] ) { if ( StringUtil . startsWithChar ( [[teenagers]] , File . separatorChar ) ) { [[teenagers]] = [[teenagers]] . substring ( 1 ) ; } return [[keystone]] . resolve ( [[teenagers]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 668 ---------------------------------------------
Creates a parallel sorter for the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 669 ---------------------------------------------
Returns the cardinality of this value . --> calatrava - calatrava --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[calatrava]] ( ) { int w = value ; int [[cos]] = 0 ; while ( w != 0 ) { [[cos]] += T [ w & 255 ] ; w >>= 8 ; } return [[cos]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
Adds a method to the list of methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Method method ) { add ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void add ( Method method ) { add ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 671 ---------------------------------------------
Read a string from a file . --> Create a carbo screenwriter from avenues --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[carbo]] ( final Path [[avenues]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[avenues]] , StandardCharsets . UTF_8 ) ) { StringWriter [[screenwriters]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the host of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Returns the cost of an object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 674 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 403 / 10 / 674:  67%|██████▋   | 674/1000 [3:22:35<1:37:59, 18.03s/it][Succeeded / Failed / Skipped / Total] 261 / 403 / 10 / 674:  68%|██████▊   | 675/1000 [3:22:56<1:37:42, 18.04s/it][Succeeded / Failed / Skipped / Total] 261 / 404 / 10 / 675:  68%|██████▊   | 675/1000 [3:22:56<1:37:42, 18.04s/it][Succeeded / Failed / Skipped / Total] 261 / 404 / 10 / 675:  68%|██████▊   | 676/1000 [3:22:57<1:37:16, 18.01s/it][Succeeded / Failed / Skipped / Total] 261 / 405 / 10 / 676:  68%|██████▊   | 676/1000 [3:22:57<1:37:16, 18.01s/it][Succeeded / Failed / Skipped / Total] 261 / 405 / 10 / 676:  68%|██████▊   | 677/1000 [3:25:00<1:37:48, 18.17s/it][Succeeded / Failed / Skipped / Total] 261 / 406 / 10 / 677:  68%|██████▊   | 677/1000 [3:25:00<1:37:48, 18.17s/it][Succeeded / Failed / Skipped / Total] 261 / 406 / 10 / 677:  68%|██████▊   | 678/1000 [3:25:38<1:37:39, 18.20s/it][Succeeded / Failed / Skipped / Total] 261 / 407 / 10 / 678:  68%|██████▊   | 678/1000 [3:25:38<1:37:39, 18.20s/it][Succeeded / Failed / Skipped / Total] 261 / 407 / 10 / 678:  68%|██████▊   | 679/1000 [3:25:38<1:37:13, 18.17s/it][Succeeded / Failed / Skipped / Total] 261 / 408 / 10 / 679:  68%|██████▊   | 679/1000 [3:25:38<1:37:13, 18.17s/it][Succeeded / Failed / Skipped / Total] 261 / 408 / 10 / 679:  68%|██████▊   | 680/1000 [3:25:39<1:36:46, 18.15s/it][Succeeded / Failed / Skipped / Total] 261 / 409 / 10 / 680:  68%|██████▊   | 680/1000 [3:25:39<1:36:46, 18.15s/it][Succeeded / Failed / Skipped / Total] 261 / 409 / 10 / 680:  68%|██████▊   | 681/1000 [3:25:39<1:36:20, 18.12s/it][Succeeded / Failed / Skipped / Total] 261 / 410 / 10 / 681:  68%|██████▊   | 681/1000 [3:25:39<1:36:20, 18.12s/it][Succeeded / Failed / Skipped / Total] 261 / 410 / 10 / 681:  68%|██████▊   | 682/1000 [3:25:39<1:35:53, 18.09s/it][Succeeded / Failed / Skipped / Total] 261 / 411 / 10 / 682:  68%|██████▊   | 682/1000 [3:25:39<1:35:53, 18.09s/it][Succeeded / Failed / Skipped / Total] 261 / 411 / 10 / 682:  68%|██████▊   | 683/1000 [3:26:01<1:35:37, 18.10s/it][Succeeded / Failed / Skipped / Total] 261 / 412 / 10 / 683:  68%|██████▊   | 683/1000 [3:26:01<1:35:37, 18.10s/it][Succeeded / Failed / Skipped / Total] 261 / 412 / 10 / 683:  68%|██████▊   | 684/1000 [3:26:27<1:35:22, 18.11s/it]Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void setNamingPolicy ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void setNamingPolicy ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 676 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Create a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Create a POST request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest post ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest post ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Adds a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 680 ---------------------------------------------
Add a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 681 ---------------------------------------------
Add a query map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 682 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a PATCH request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest patch ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest patch ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 684 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 413 / 10 / 684:  68%|██████▊   | 684/1000 [3:26:27<1:35:22, 18.11s/it][Succeeded / Failed / Skipped / Total] 261 / 413 / 10 / 684:  68%|██████▊   | 685/1000 [3:26:31<1:34:58, 18.09s/it][Succeeded / Failed / Skipped / Total] 262 / 413 / 10 / 685:  68%|██████▊   | 685/1000 [3:26:31<1:34:58, 18.09s/it][Succeeded / Failed / Skipped / Total] 262 / 413 / 10 / 685:  69%|██████▊   | 686/1000 [3:27:15<1:34:52, 18.13s/it][Succeeded / Failed / Skipped / Total] 262 / 414 / 10 / 686:  69%|██████▊   | 686/1000 [3:27:15<1:34:52, 18.13s/it][Succeeded / Failed / Skipped / Total] 262 / 414 / 10 / 686:  69%|██████▊   | 687/1000 [3:27:20<1:34:27, 18.11s/it][Succeeded / Failed / Skipped / Total] 263 / 414 / 10 / 687:  69%|██████▊   | 687/1000 [3:27:20<1:34:27, 18.11s/it][Succeeded / Failed / Skipped / Total] 263 / 414 / 10 / 687:  69%|██████▉   | 688/1000 [3:27:26<1:34:04, 18.09s/it][Succeeded / Failed / Skipped / Total] 263 / 415 / 10 / 688:  69%|██████▉   | 688/1000 [3:27:26<1:34:04, 18.09s/it][Succeeded / Failed / Skipped / Total] 263 / 415 / 10 / 688:  69%|██████▉   | 689/1000 [3:27:31<1:33:40, 18.07s/it][Succeeded / Failed / Skipped / Total] 263 / 416 / 10 / 689:  69%|██████▉   | 689/1000 [3:27:31<1:33:40, 18.07s/it][Succeeded / Failed / Skipped / Total] 263 / 416 / 10 / 689:  69%|██████▉   | 690/1000 [3:27:39<1:33:17, 18.06s/it][Succeeded / Failed / Skipped / Total] 263 / 417 / 10 / 690:  69%|██████▉   | 690/1000 [3:27:39<1:33:17, 18.06s/it][Succeeded / Failed / Skipped / Total] 263 / 417 / 10 / 690:  69%|██████▉   | 691/1000 [3:28:49<1:33:22, 18.13s/it][Succeeded / Failed / Skipped / Total] 263 / 418 / 10 / 691:  69%|██████▉   | 691/1000 [3:28:49<1:33:22, 18.13s/it][Succeeded / Failed / Skipped / Total] 263 / 418 / 10 / 691:  69%|██████▉   | 692/1000 [3:29:12<1:33:06, 18.14s/it][Succeeded / Failed / Skipped / Total] 264 / 418 / 10 / 692:  69%|██████▉   | 692/1000 [3:29:12<1:33:06, 18.14s/it][Succeeded / Failed / Skipped / Total] 264 / 418 / 10 / 692:  69%|██████▉   | 693/1000 [3:29:43<1:32:54, 18.16s/it][Succeeded / Failed / Skipped / Total] 265 / 418 / 10 / 693:  69%|██████▉   | 693/1000 [3:29:43<1:32:54, 18.16s/it][Succeeded / Failed / Skipped / Total] 265 / 418 / 10 / 693:  69%|██████▉   | 694/1000 [3:30:05<1:32:37, 18.16s/it][Succeeded / Failed / Skipped / Total] 266 / 418 / 10 / 694:  69%|██████▉   | 694/1000 [3:30:05<1:32:37, 18.16s/it][Succeeded / Failed / Skipped / Total] 266 / 418 / 10 / 694:  70%|██████▉   | 695/1000 [3:30:18<1:32:17, 18.16s/it][Succeeded / Failed / Skipped / Total] 267 / 418 / 10 / 695:  70%|██████▉   | 695/1000 [3:30:18<1:32:17, 18.16s/it][Succeeded / Failed / Skipped / Total] 267 / 418 / 10 / 695:  70%|██████▉   | 696/1000 [3:30:35<1:31:58, 18.15s/it]Create a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the basic authentication header . --> abusing the given access and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String data = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[abusing]] ( final String [[access]] , final String password ) { if ( [[access]] != null && password != null ) { String data = [[access]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 686 ---------------------------------------------
Create an OPTIONS request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 687 ---------------------------------------------
Returns a buffer that can be used to write data to the client . --> If shapiro is true then shapiro is false then shapiro is true --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[shapiro]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 688 ---------------------------------------------
Creates a TRACE request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 689 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 690 ---------------------------------------------
Send the request and receive the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 691 ---------------------------------------------
Create a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 692 ---------------------------------------------
Sets the path for the request . --> Get trajectories for driveways --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[trajectories]] ( String [[driveways]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 693 ---------------------------------------------
Collect all action results . --> Get the list of stowaways --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[stowaways]] ( ) { final Collection < ActionResult > [[veterans]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[veterans]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 694 ---------------------------------------------
Collect all action runtimes . --> zing the list of actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[zing]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action filters . --> Van the list of spreadsheets --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[van]] ( ) { final Collection < ? extends ActionFilter > [[spreadsheets]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[spreadsheets]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 419 / 10 / 696:  70%|██████▉   | 696/1000 [3:30:35<1:31:58, 18.15s/it][Succeeded / Failed / Skipped / Total] 267 / 419 / 10 / 696:  70%|██████▉   | 697/1000 [3:30:36<1:31:33, 18.13s/it][Succeeded / Failed / Skipped / Total] 268 / 419 / 10 / 697:  70%|██████▉   | 697/1000 [3:30:36<1:31:33, 18.13s/it][Succeeded / Failed / Skipped / Total] 268 / 419 / 10 / 697:  70%|██████▉   | 698/1000 [3:32:12<1:31:48, 18.24s/it][Succeeded / Failed / Skipped / Total] 268 / 420 / 10 / 698:  70%|██████▉   | 698/1000 [3:32:12<1:31:48, 18.24s/it][Succeeded / Failed / Skipped / Total] 268 / 420 / 10 / 698:  70%|██████▉   | 699/1000 [3:32:32<1:31:31, 18.24s/it][Succeeded / Failed / Skipped / Total] 269 / 420 / 10 / 699:  70%|██████▉   | 699/1000 [3:32:32<1:31:31, 18.24s/it][Succeeded / Failed / Skipped / Total] 269 / 420 / 10 / 699:  70%|███████   | 700/1000 [3:32:41<1:31:09, 18.23s/it][Succeeded / Failed / Skipped / Total] 270 / 420 / 10 / 700:  70%|███████   | 700/1000 [3:32:41<1:31:09, 18.23s/it][Succeeded / Failed / Skipped / Total] 270 / 420 / 10 / 700:  70%|███████   | 701/1000 [3:33:12<1:30:56, 18.25s/it][Succeeded / Failed / Skipped / Total] 270 / 421 / 10 / 701:  70%|███████   | 701/1000 [3:33:12<1:30:56, 18.25s/it][Succeeded / Failed / Skipped / Total] 270 / 421 / 10 / 701:  70%|███████   | 702/1000 [3:33:38<1:30:41, 18.26s/it][Succeeded / Failed / Skipped / Total] 270 / 422 / 10 / 702:  70%|███████   | 702/1000 [3:33:38<1:30:41, 18.26s/it][Succeeded / Failed / Skipped / Total] 270 / 422 / 10 / 702:  70%|███████   | 703/1000 [3:33:58<1:30:23, 18.26s/it][Succeeded / Failed / Skipped / Total] 271 / 422 / 10 / 703:  70%|███████   | 703/1000 [3:33:58<1:30:23, 18.26s/it][Succeeded / Failed / Skipped / Total] 271 / 422 / 10 / 703:  70%|███████   | 704/1000 [3:34:03<1:30:00, 18.24s/it][Succeeded / Failed / Skipped / Total] 271 / 423 / 10 / 704:  70%|███████   | 704/1000 [3:34:03<1:30:00, 18.24s/it][Succeeded / Failed / Skipped / Total] 271 / 423 / 10 / 704:  70%|███████   | 705/1000 [3:34:13<1:29:38, 18.23s/it]Returns the URL of the host . --> [[[FAILED]]]

[[[[Adv]]]]: public String hostUrl ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String hostUrl ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 697 ---------------------------------------------
extract this reference from a property name --> get schematics from melita --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[schematics]] ( final String [[melita]] ) { int ndx = StringUtil . indexOfChars ( [[melita]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[melita]] ; } return [[melita]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 698 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 699 ---------------------------------------------
Sets a simple property . --> Set the hitter for the given prominence --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object [[value]] ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[analog]] ( final BeanProperty [[bg]] , final Object [[prominence]] ) { Setter [[hitter]] = [[bg]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 700 ---------------------------------------------
Set a reference to an object . --> Add a storyboard to the list of storyboards --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[storyboards]] ( final String name , final Object [[objectivity]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[objectivity]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 701 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Lookup an object reference . --> Unwilling a francais --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[unwilling]] ( final String [[francais]] ) { Object [[assess]] = getObjectReference ( [[francais]] ) ; if ( [[assess]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[francais]] ) ; } return [[assess]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 704 ---------------------------------------------
Remove a range from a handler . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 705 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 271 / 424 / 10 / 705:  70%|███████   | 705/1000 [3:34:13<1:29:38, 18.23s/it][Succeeded / Failed / Skipped / Total] 271 / 424 / 10 / 705:  71%|███████   | 706/1000 [3:34:14<1:29:12, 18.21s/it][Succeeded / Failed / Skipped / Total] 271 / 425 / 10 / 706:  71%|███████   | 706/1000 [3:34:14<1:29:12, 18.21s/it][Succeeded / Failed / Skipped / Total] 271 / 425 / 10 / 706:  71%|███████   | 707/1000 [3:36:40<1:29:47, 18.39s/it][Succeeded / Failed / Skipped / Total] 272 / 425 / 10 / 707:  71%|███████   | 707/1000 [3:36:40<1:29:47, 18.39s/it][Succeeded / Failed / Skipped / Total] 272 / 425 / 10 / 707:  71%|███████   | 708/1000 [3:36:41<1:29:22, 18.36s/it][Succeeded / Failed / Skipped / Total] 272 / 426 / 10 / 708:  71%|███████   | 708/1000 [3:36:41<1:29:22, 18.36s/it][Succeeded / Failed / Skipped / Total] 272 / 426 / 10 / 708:  71%|███████   | 709/1000 [3:36:41<1:28:56, 18.34s/it][Succeeded / Failed / Skipped / Total] 272 / 427 / 10 / 709:  71%|███████   | 709/1000 [3:36:41<1:28:56, 18.34s/it][Succeeded / Failed / Skipped / Total] 272 / 427 / 10 / 709:  71%|███████   | 710/1000 [3:36:42<1:28:30, 18.31s/it][Succeeded / Failed / Skipped / Total] 272 / 428 / 10 / 710:  71%|███████   | 710/1000 [3:36:42<1:28:30, 18.31s/it][Succeeded / Failed / Skipped / Total] 272 / 428 / 10 / 710:  71%|███████   | 711/1000 [3:36:42<1:28:05, 18.29s/it]Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 706 ---------------------------------------------
Returns the entity descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 707 ---------------------------------------------
Registers a hint . --> Adds the given alluding to the list of lifes --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[lifes]] ( final String [[alluding]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[alluding]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 708 ---------------------------------------------
Writes the given value to the given JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 709 ---------------------------------------------
Inject the attributes from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 710 ---------------------------------------------
Injects the parameters from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 711 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 272 / 429 / 10 / 711:  71%|███████   | 711/1000 [3:36:42<1:28:05, 18.29s/it][Succeeded / Failed / Skipped / Total] 272 / 429 / 10 / 711:  71%|███████   | 712/1000 [3:36:42<1:27:39, 18.26s/it][Succeeded / Failed / Skipped / Total] 272 / 430 / 10 / 712:  71%|███████   | 712/1000 [3:36:42<1:27:39, 18.26s/it][Succeeded / Failed / Skipped / Total] 272 / 430 / 10 / 712:  71%|███████▏  | 713/1000 [3:36:43<1:27:14, 18.24s/it][Succeeded / Failed / Skipped / Total] 272 / 431 / 10 / 713:  71%|███████▏  | 713/1000 [3:36:43<1:27:14, 18.24s/it][Succeeded / Failed / Skipped / Total] 272 / 431 / 10 / 713:  71%|███████▏  | 714/1000 [3:36:43<1:26:48, 18.21s/it][Succeeded / Failed / Skipped / Total] 272 / 432 / 10 / 714:  71%|███████▏  | 714/1000 [3:36:43<1:26:48, 18.21s/it][Succeeded / Failed / Skipped / Total] 272 / 432 / 10 / 714:  72%|███████▏  | 715/1000 [3:36:43<1:26:23, 18.19s/it][Succeeded / Failed / Skipped / Total] 272 / 433 / 10 / 715:  72%|███████▏  | 715/1000 [3:36:43<1:26:23, 18.19s/it][Succeeded / Failed / Skipped / Total] 272 / 433 / 10 / 715:  72%|███████▏  | 716/1000 [3:37:07<1:26:07, 18.19s/it][Succeeded / Failed / Skipped / Total] 272 / 434 / 10 / 716:  72%|███████▏  | 716/1000 [3:37:07<1:26:07, 18.19s/it][Succeeded / Failed / Skipped / Total] 272 / 434 / 10 / 716:  72%|███████▏  | 717/1000 [3:37:47<1:25:57, 18.22s/it]Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 712 ---------------------------------------------
Converts a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 713 ---------------------------------------------
Convert column name to property name . --> [[[FAILED]]]

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 714 ---------------------------------------------
Convert column name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 715 ---------------------------------------------
Store a value to a PreparedStatement . --> [[[FAILED]]]

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 716 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 272 / 435 / 10 / 717:  72%|███████▏  | 717/1000 [3:37:47<1:25:57, 18.22s/it][Succeeded / Failed / Skipped / Total] 272 / 435 / 10 / 717:  72%|███████▏  | 718/1000 [3:38:14<1:25:42, 18.24s/it][Succeeded / Failed / Skipped / Total] 272 / 436 / 10 / 718:  72%|███████▏  | 718/1000 [3:38:14<1:25:42, 18.24s/it][Succeeded / Failed / Skipped / Total] 272 / 436 / 10 / 718:  72%|███████▏  | 719/1000 [3:38:24<1:25:21, 18.23s/it][Succeeded / Failed / Skipped / Total] 272 / 437 / 10 / 719:  72%|███████▏  | 719/1000 [3:38:24<1:25:21, 18.23s/it][Succeeded / Failed / Skipped / Total] 272 / 437 / 10 / 719:  72%|███████▏  | 720/1000 [3:38:28<1:24:57, 18.21s/it][Succeeded / Failed / Skipped / Total] 273 / 437 / 10 / 720:  72%|███████▏  | 720/1000 [3:38:28<1:24:57, 18.21s/it][Succeeded / Failed / Skipped / Total] 273 / 437 / 10 / 720:  72%|███████▏  | 721/1000 [3:38:46<1:24:39, 18.21s/it][Succeeded / Failed / Skipped / Total] 273 / 438 / 10 / 721:  72%|███████▏  | 721/1000 [3:38:46<1:24:39, 18.21s/it][Succeeded / Failed / Skipped / Total] 273 / 438 / 10 / 721:  72%|███████▏  | 722/1000 [3:38:46<1:24:14, 18.18s/it][Succeeded / Failed / Skipped / Total] 273 / 439 / 10 / 722:  72%|███████▏  | 722/1000 [3:38:46<1:24:14, 18.18s/it][Succeeded / Failed / Skipped / Total] 273 / 439 / 10 / 722:  72%|███████▏  | 723/1000 [3:38:59<1:23:54, 18.17s/it][Succeeded / Failed / Skipped / Total] 274 / 439 / 10 / 723:  72%|███████▏  | 723/1000 [3:38:59<1:23:54, 18.17s/it][Succeeded / Failed / Skipped / Total] 274 / 439 / 10 / 723:  72%|███████▏  | 724/1000 [3:39:05<1:23:31, 18.16s/it][Succeeded / Failed / Skipped / Total] 274 / 440 / 10 / 724:  72%|███████▏  | 724/1000 [3:39:05<1:23:31, 18.16s/it][Succeeded / Failed / Skipped / Total] 274 / 440 / 10 / 724:  72%|███████▎  | 725/1000 [3:39:28<1:23:14, 18.16s/it][Succeeded / Failed / Skipped / Total] 274 / 441 / 10 / 725:  72%|███████▎  | 725/1000 [3:39:28<1:23:14, 18.16s/it][Succeeded / Failed / Skipped / Total] 274 / 441 / 10 / 725:  73%|███████▎  | 726/1000 [3:39:31<1:22:51, 18.14s/it][Succeeded / Failed / Skipped / Total] 275 / 441 / 10 / 726:  73%|███████▎  | 726/1000 [3:39:31<1:22:51, 18.14s/it][Succeeded / Failed / Skipped / Total] 275 / 441 / 10 / 726:  73%|███████▎  | 727/1000 [3:40:06<1:22:39, 18.17s/it]Get the entity descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 718 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 719 ---------------------------------------------
Get the alias for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 720 ---------------------------------------------
Find table descriptor by column ref . --> Returns the slab for the given artichoke --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = [[entry]] . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[slab]] ( final String [[artichoke]] ) { for ( Map . Entry < String , TableRefData > [[arrival]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[fie]] = [[arrival]] . getValue ( ) . desc ; if ( [[fie]] . findByPropertyName ( [[artichoke]] ) != null ) { return [[fie]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 721 ---------------------------------------------
Creates an instance of the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 722 ---------------------------------------------
Returns the value of the named property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 723 ---------------------------------------------
Returns the relative path of targetPath relative to basePath . --> Get zaid from greenwood and carcass --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[zaid]] ( final String [[greenwood]] , final String [[carcass]] ) { return new File ( [[carcass]] ) . toPath ( ) . relativize ( new File ( [[greenwood]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 724 ---------------------------------------------
Get a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getObjectReference ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object getObjectReference ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 725 ---------------------------------------------
Adds an action config to the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 726 ---------------------------------------------
Start the Madvoc server . --> Inaugures the Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[inaugurated]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
[Succeeded / Failed / Skipped / Total] 276 / 441 / 10 / 727:  73%|███████▎  | 727/1000 [3:40:06<1:22:39, 18.17s/it][Succeeded / Failed / Skipped / Total] 276 / 441 / 10 / 727:  73%|███████▎  | 728/1000 [3:41:10<1:22:38, 18.23s/it][Succeeded / Failed / Skipped / Total] 276 / 442 / 10 / 728:  73%|███████▎  | 728/1000 [3:41:10<1:22:38, 18.23s/it][Succeeded / Failed / Skipped / Total] 276 / 442 / 10 / 728:  73%|███████▎  | 729/1000 [3:41:13<1:22:14, 18.21s/it][Succeeded / Failed / Skipped / Total] 277 / 442 / 10 / 729:  73%|███████▎  | 729/1000 [3:41:13<1:22:14, 18.21s/it][Succeeded / Failed / Skipped / Total] 277 / 442 / 10 / 729:  73%|███████▎  | 730/1000 [3:42:34<1:22:19, 18.29s/it][Succeeded / Failed / Skipped / Total] 278 / 442 / 10 / 730:  73%|███████▎  | 730/1000 [3:42:34<1:22:19, 18.29s/it][Succeeded / Failed / Skipped / Total] 278 / 442 / 10 / 730:  73%|███████▎  | 731/1000 [3:43:26<1:22:13, 18.34s/it][Succeeded / Failed / Skipped / Total] 278 / 443 / 10 / 731:  73%|███████▎  | 731/1000 [3:43:26<1:22:13, 18.34s/it][Succeeded / Failed / Skipped / Total] 278 / 443 / 10 / 731:  73%|███████▎  | 732/1000 [3:43:37<1:21:52, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 444 / 10 / 732:  73%|███████▎  | 732/1000 [3:43:37<1:21:52, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 444 / 10 / 732:  73%|███████▎  | 733/1000 [3:43:55<1:21:34, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 445 / 10 / 733:  73%|███████▎  | 733/1000 [3:43:55<1:21:34, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 445 / 10 / 733:  73%|███████▎  | 734/1000 [3:44:15<1:21:16, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 446 / 10 / 734:  73%|███████▎  | 734/1000 [3:44:15<1:21:16, 18.33s/it][Succeeded / Failed / Skipped / Total] 278 / 446 / 10 / 734:  74%|███████▎  | 735/1000 [3:44:16<1:20:51, 18.31s/it][Succeeded / Failed / Skipped / Total] 278 / 447 / 10 / 735:  74%|███████▎  | 735/1000 [3:44:16<1:20:51, 18.31s/it][Succeeded / Failed / Skipped / Total] 278 / 447 / 10 / 735:  74%|███████▎  | 736/1000 [3:44:16<1:20:26, 18.28s/it][Succeeded / Failed / Skipped / Total] 278 / 448 / 10 / 736:  74%|███████▎  | 736/1000 [3:44:16<1:20:26, 18.28s/it][Succeeded / Failed / Skipped / Total] 278 / 448 / 10 / 736:  74%|███████▎  | 737/1000 [3:44:33<1:20:08, 18.28s/it]--------------------------------------------- Result 727 ---------------------------------------------
Configure defaults . --> Register Action and RestAction annotations --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[cmp]] ( ) { final ActionConfigManager [[fara]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[fara]] . registerAnnotation ( Action . class ) ; [[fara]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 728 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 729 ---------------------------------------------
Exclude the given jars from scanning . --> Nursey że nursey --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[że]] ( final String ... [[nursey]] ) { for ( final String [[tickling]] : [[nursey]] ) { rulesJars . exclude ( [[tickling]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 730 ---------------------------------------------
Include all of the specified jars . --> Add a list of wyndhams to the scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[statuesque]] ( final String ... [[ben]] ) { for ( final String [[wyndham]] : [[ben]] ) { rulesJars . include ( [[wyndham]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 731 ---------------------------------------------
Converts a path to a system path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String separatorsToSystem ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String separatorsToSystem ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 732 ---------------------------------------------
Resolves the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 733 ---------------------------------------------
Get the path of a file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 734 ---------------------------------------------
Returns a set of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 735 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 736 ---------------------------------------------
Scan a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 279 / 448 / 10 / 737:  74%|███████▎  | 737/1000 [3:44:33<1:20:08, 18.28s/it][Succeeded / Failed / Skipped / Total] 279 / 448 / 10 / 737:  74%|███████▍  | 738/1000 [3:45:09<1:19:56, 18.31s/it][Succeeded / Failed / Skipped / Total] 280 / 448 / 10 / 738:  74%|███████▍  | 738/1000 [3:45:09<1:19:56, 18.31s/it][Succeeded / Failed / Skipped / Total] 280 / 448 / 10 / 738:  74%|███████▍  | 739/1000 [3:45:32<1:19:39, 18.31s/it][Succeeded / Failed / Skipped / Total] 280 / 449 / 10 / 739:  74%|███████▍  | 739/1000 [3:45:32<1:19:39, 18.31s/it][Succeeded / Failed / Skipped / Total] 280 / 449 / 10 / 739:  74%|███████▍  | 740/1000 [3:45:50<1:19:21, 18.31s/it][Succeeded / Failed / Skipped / Total] 281 / 449 / 10 / 740:  74%|███████▍  | 740/1000 [3:45:50<1:19:21, 18.31s/it][Succeeded / Failed / Skipped / Total] 281 / 449 / 10 / 740:  74%|███████▍  | 741/1000 [3:45:51<1:18:56, 18.29s/it][Succeeded / Failed / Skipped / Total] 281 / 450 / 10 / 741:  74%|███████▍  | 741/1000 [3:45:51<1:18:56, 18.29s/it][Succeeded / Failed / Skipped / Total] 281 / 450 / 10 / 741:  74%|███████▍  | 742/1000 [3:45:52<1:18:32, 18.26s/it][Succeeded / Failed / Skipped / Total] 281 / 451 / 10 / 742:  74%|███████▍  | 742/1000 [3:45:52<1:18:32, 18.26s/it][Succeeded / Failed / Skipped / Total] 281 / 451 / 10 / 742:  74%|███████▍  | 743/1000 [3:45:53<1:18:07, 18.24s/it]Scan the classpath . --> scan class path --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[file]] , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[file]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[Truthfully]]" == "[[Truthfully]]" ) . searchPath ( rootPath ) ; File [[lawsuit]] ; while ( ( [[lawsuit]] = ff . nextFile ( ) ) != null ) { final String filePath = [[lawsuit]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[lawsuit]] , "[[Truthfully]]" == "[[Truthfully]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[lawsuit]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 738 ---------------------------------------------
Create a new JtxTransaction . --> Methode d ajout une JtxTransaction --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[él]] ( final JtxTransactionMode [[everest]] , final Object [[extent]] , final boolean active ) { return new DbJtxTransaction ( this , [[everest]] , [[extent]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 739 ---------------------------------------------
Default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 740 ---------------------------------------------
start scanning the files to scan . --> scan all trajectories --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[starter]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[trajectories]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[trajectories]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 741 ---------------------------------------------
For the given scope type invoke the given consumer for the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 742 ---------------------------------------------
Decodes a string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 743 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 452 / 10 / 743:  74%|███████▍  | 743/1000 [3:45:53<1:18:07, 18.24s/it][Succeeded / Failed / Skipped / Total] 281 / 452 / 10 / 743:  74%|███████▍  | 744/1000 [3:45:54<1:17:43, 18.22s/it][Succeeded / Failed / Skipped / Total] 281 / 453 / 10 / 744:  74%|███████▍  | 744/1000 [3:45:54<1:17:43, 18.22s/it][Succeeded / Failed / Skipped / Total] 281 / 453 / 10 / 744:  74%|███████▍  | 745/1000 [3:45:55<1:17:19, 18.19s/it][Succeeded / Failed / Skipped / Total] 281 / 454 / 10 / 745:  74%|███████▍  | 745/1000 [3:45:55<1:17:19, 18.19s/it][Succeeded / Failed / Skipped / Total] 281 / 454 / 10 / 745:  75%|███████▍  | 746/1000 [3:45:55<1:16:55, 18.17s/it][Succeeded / Failed / Skipped / Total] 281 / 455 / 10 / 746:  75%|███████▍  | 746/1000 [3:45:55<1:16:55, 18.17s/it][Succeeded / Failed / Skipped / Total] 281 / 455 / 10 / 746:  75%|███████▍  | 747/1000 [3:46:18<1:16:38, 18.18s/it][Succeeded / Failed / Skipped / Total] 281 / 456 / 10 / 747:  75%|███████▍  | 747/1000 [3:46:18<1:16:38, 18.18s/it][Succeeded / Failed / Skipped / Total] 281 / 456 / 10 / 747:  75%|███████▍  | 748/1000 [3:46:49<1:16:25, 18.19s/it]Prepare a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 744 ---------------------------------------------
Assure the size of the token set is at least maxTokensPerSession . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 745 ---------------------------------------------
Checks if the session contains a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 746 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 747 ---------------------------------------------
Split a filename into its components . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 457 / 10 / 748:  75%|███████▍  | 748/1000 [3:46:49<1:16:25, 18.19s/it][Succeeded / Failed / Skipped / Total] 281 / 457 / 10 / 748:  75%|███████▍  | 749/1000 [3:46:54<1:16:02, 18.18s/it][Succeeded / Failed / Skipped / Total] 282 / 457 / 10 / 749:  75%|███████▍  | 749/1000 [3:46:54<1:16:02, 18.18s/it][Succeeded / Failed / Skipped / Total] 282 / 457 / 10 / 749:  75%|███████▌  | 750/1000 [3:47:26<1:15:48, 18.20s/it][Succeeded / Failed / Skipped / Total] 282 / 458 / 10 / 750:  75%|███████▌  | 750/1000 [3:47:26<1:15:48, 18.20s/it][Succeeded / Failed / Skipped / Total] 282 / 458 / 10 / 750:  75%|███████▌  | 751/1000 [3:47:42<1:15:29, 18.19s/it][Succeeded / Failed / Skipped / Total] 282 / 459 / 10 / 751:  75%|███████▌  | 751/1000 [3:47:42<1:15:29, 18.19s/it][Succeeded / Failed / Skipped / Total] 282 / 459 / 10 / 751:  75%|███████▌  | 752/1000 [3:47:56<1:15:10, 18.19s/it][Succeeded / Failed / Skipped / Total] 283 / 459 / 10 / 752:  75%|███████▌  | 752/1000 [3:47:56<1:15:10, 18.19s/it][Succeeded / Failed / Skipped / Total] 283 / 459 / 10 / 752:  75%|███████▌  | 753/1000 [3:50:17<1:15:32, 18.35s/it]Adds a list of entries to be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 749 ---------------------------------------------
Register the table reference for the entity . --> This method is called when an entity is disobeyed --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = templateData . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . [[tableReference]] ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[disobeyed]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[intend]] = templateData . getObjectReference ( entityName ) ; if ( [[intend]] != null ) { ded = lookupType ( resolveClass ( [[intend]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[mccoy]] = this . [[aca]] ; if ( [[mccoy]] == null ) { [[mccoy]] = tableAlias ; } if ( [[mccoy]] == null ) { [[mccoy]] = entityName ; } if ( [[mccoy]] == null ) { [[mccoy]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[mccoy]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 750 ---------------------------------------------
Register Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 751 ---------------------------------------------
Exclude the given entries from the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 752 ---------------------------------------------
Register a madvoc component . --> в в в --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[в]] ( final Class < ? > [[uch]] ) { Objects . requireNonNull ( [[uch]] ) ; madvocComponents . add ( ClassConsumer . of ( [[uch]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 283 / 460 / 10 / 753:  75%|███████▌  | 753/1000 [3:50:17<1:15:32, 18.35s/it][Succeeded / Failed / Skipped / Total] 283 / 460 / 10 / 753:  75%|███████▌  | 754/1000 [3:50:53<1:15:19, 18.37s/it][Succeeded / Failed / Skipped / Total] 284 / 460 / 10 / 754:  75%|███████▌  | 754/1000 [3:50:53<1:15:19, 18.37s/it][Succeeded / Failed / Skipped / Total] 284 / 460 / 10 / 754:  76%|███████▌  | 755/1000 [3:51:04<1:14:59, 18.36s/it][Succeeded / Failed / Skipped / Total] 284 / 461 / 10 / 755:  76%|███████▌  | 755/1000 [3:51:04<1:14:59, 18.36s/it][Succeeded / Failed / Skipped / Total] 284 / 461 / 10 / 755:  76%|███████▌  | 756/1000 [3:51:05<1:14:35, 18.34s/it][Succeeded / Failed / Skipped / Total] 284 / 462 / 10 / 756:  76%|███████▌  | 756/1000 [3:51:05<1:14:35, 18.34s/it][Succeeded / Failed / Skipped / Total] 284 / 462 / 10 / 756:  76%|███████▌  | 757/1000 [3:51:06<1:14:11, 18.32s/it][Succeeded / Failed / Skipped / Total] 284 / 463 / 10 / 757:  76%|███████▌  | 757/1000 [3:51:06<1:14:11, 18.32s/it][Succeeded / Failed / Skipped / Total] 284 / 463 / 10 / 757:  76%|███████▌  | 758/1000 [3:51:07<1:13:47, 18.29s/it]Resolve a Petite scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 754 ---------------------------------------------
Resolve bean names for a given type . --> duval a genera --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[duval]] ( final Class [[genera]] ) { String [ ] [[sugino]] = beanCollections . get ( [[genera]] ) ; if ( [[sugino]] != null ) { return [[sugino]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[genera]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[sugino]] = StringPool . EMPTY_ARRAY ; } else { [[sugino]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[genera]] , [[sugino]] ) ; return [[sugino]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 755 ---------------------------------------------
Creates a copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 756 ---------------------------------------------
Register a Petite property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 757 ---------------------------------------------
Register a Petite set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 464 / 10 / 758:  76%|███████▌  | 758/1000 [3:51:07<1:13:47, 18.29s/it][Succeeded / Failed / Skipped / Total] 284 / 464 / 10 / 758:  76%|███████▌  | 759/1000 [3:51:07<1:13:23, 18.27s/it][Succeeded / Failed / Skipped / Total] 284 / 465 / 10 / 759:  76%|███████▌  | 759/1000 [3:51:07<1:13:23, 18.27s/it][Succeeded / Failed / Skipped / Total] 284 / 465 / 10 / 759:  76%|███████▌  | 760/1000 [3:51:08<1:12:59, 18.25s/it][Succeeded / Failed / Skipped / Total] 284 / 466 / 10 / 760:  76%|███████▌  | 760/1000 [3:51:08<1:12:59, 18.25s/it][Succeeded / Failed / Skipped / Total] 284 / 466 / 10 / 760:  76%|███████▌  | 761/1000 [3:51:09<1:12:35, 18.22s/it]Register a Petite method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Register Petite init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 760 ---------------------------------------------
Register Petite destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 761 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 467 / 10 / 761:  76%|███████▌  | 761/1000 [3:51:09<1:12:35, 18.22s/it][Succeeded / Failed / Skipped / Total] 284 / 467 / 10 / 761:  76%|███████▌  | 762/1000 [3:51:09<1:12:11, 18.20s/it][Succeeded / Failed / Skipped / Total] 284 / 468 / 10 / 762:  76%|███████▌  | 762/1000 [3:51:09<1:12:11, 18.20s/it][Succeeded / Failed / Skipped / Total] 284 / 468 / 10 / 762:  76%|███████▋  | 763/1000 [3:51:10<1:11:48, 18.18s/it][Succeeded / Failed / Skipped / Total] 284 / 469 / 10 / 763:  76%|███████▋  | 763/1000 [3:51:10<1:11:48, 18.18s/it][Succeeded / Failed / Skipped / Total] 284 / 469 / 10 / 763:  76%|███████▋  | 764/1000 [3:51:10<1:11:24, 18.16s/it][Succeeded / Failed / Skipped / Total] 284 / 470 / 10 / 764:  76%|███████▋  | 764/1000 [3:51:10<1:11:24, 18.16s/it][Succeeded / Failed / Skipped / Total] 284 / 470 / 10 / 764:  76%|███████▋  | 765/1000 [3:51:11<1:11:01, 18.13s/it][Succeeded / Failed / Skipped / Total] 284 / 471 / 10 / 765:  76%|███████▋  | 765/1000 [3:51:11<1:11:01, 18.13s/it][Succeeded / Failed / Skipped / Total] 284 / 471 / 10 / 765:  77%|███████▋  | 766/1000 [3:51:11<1:10:37, 18.11s/it][Succeeded / Failed / Skipped / Total] 284 / 472 / 10 / 766:  77%|███████▋  | 766/1000 [3:51:11<1:10:37, 18.11s/it][Succeeded / Failed / Skipped / Total] 284 / 472 / 10 / 766:  77%|███████▋  | 767/1000 [3:51:12<1:10:14, 18.09s/it][Succeeded / Failed / Skipped / Total] 284 / 473 / 10 / 767:  77%|███████▋  | 767/1000 [3:51:12<1:10:14, 18.09s/it][Succeeded / Failed / Skipped / Total] 284 / 473 / 10 / 767:  77%|███████▋  | 768/1000 [3:51:12<1:09:50, 18.06s/it]Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 762 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 763 ---------------------------------------------
Iterate through all beans of the given type and accept them to the given consumer . --> [[[FAILED]]]

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 764 ---------------------------------------------
Define parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 765 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 766 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int resolveJavaVersion ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int resolveJavaVersion ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 767 ---------------------------------------------
Push an integer to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 474 / 10 / 768:  77%|███████▋  | 768/1000 [3:51:12<1:09:50, 18.06s/it][Succeeded / Failed / Skipped / Total] 284 / 474 / 10 / 768:  77%|███████▋  | 769/1000 [3:51:13<1:09:27, 18.04s/it][Succeeded / Failed / Skipped / Total] 284 / 475 / 10 / 769:  77%|███████▋  | 769/1000 [3:51:13<1:09:27, 18.04s/it][Succeeded / Failed / Skipped / Total] 284 / 475 / 10 / 769:  77%|███████▋  | 770/1000 [3:51:14<1:09:04, 18.02s/it][Succeeded / Failed / Skipped / Total] 284 / 476 / 10 / 770:  77%|███████▋  | 770/1000 [3:51:14<1:09:04, 18.02s/it][Succeeded / Failed / Skipped / Total] 284 / 476 / 10 / 770:  77%|███████▋  | 771/1000 [3:51:14<1:08:40, 18.00s/it][Succeeded / Failed / Skipped / Total] 284 / 477 / 10 / 771:  77%|███████▋  | 771/1000 [3:51:14<1:08:40, 18.00s/it][Succeeded / Failed / Skipped / Total] 284 / 477 / 10 / 771:  77%|███████▋  | 772/1000 [3:51:15<1:08:17, 17.97s/it][Succeeded / Failed / Skipped / Total] 284 / 478 / 10 / 772:  77%|███████▋  | 772/1000 [3:51:15<1:08:17, 17.97s/it][Succeeded / Failed / Skipped / Total] 284 / 478 / 10 / 772:  77%|███████▋  | 773/1000 [3:51:15<1:07:54, 17.95s/it][Succeeded / Failed / Skipped / Total] 284 / 479 / 10 / 773:  77%|███████▋  | 773/1000 [3:51:15<1:07:54, 17.95s/it][Succeeded / Failed / Skipped / Total] 284 / 479 / 10 / 773:  77%|███████▋  | 774/1000 [3:51:16<1:07:31, 17.93s/it][Succeeded / Failed / Skipped / Total] 284 / 480 / 10 / 774:  77%|███████▋  | 774/1000 [3:51:16<1:07:31, 17.93s/it][Succeeded / Failed / Skipped / Total] 284 / 480 / 10 / 774:  78%|███████▊  | 775/1000 [3:51:16<1:07:08, 17.91s/it][Succeeded / Failed / Skipped / Total] 284 / 481 / 10 / 775:  78%|███████▊  | 775/1000 [3:51:16<1:07:08, 17.91s/it][Succeeded / Failed / Skipped / Total] 284 / 481 / 10 / 775:  78%|███████▊  | 776/1000 [3:51:17<1:06:45, 17.88s/it]Check that an argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 769 ---------------------------------------------
Advice field name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String adviceFieldName ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String adviceFieldName ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 770 ---------------------------------------------
Advice method name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String adviceMethodName ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String adviceMethodName ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 771 ---------------------------------------------
Load special method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 772 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 773 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 774 ---------------------------------------------
Load a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 775 ---------------------------------------------
Store a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 482 / 10 / 776:  78%|███████▊  | 776/1000 [3:51:17<1:06:45, 17.88s/it][Succeeded / Failed / Skipped / Total] 284 / 482 / 10 / 776:  78%|███████▊  | 777/1000 [3:51:17<1:06:22, 17.86s/it][Succeeded / Failed / Skipped / Total] 284 / 483 / 10 / 777:  78%|███████▊  | 777/1000 [3:51:17<1:06:22, 17.86s/it][Succeeded / Failed / Skipped / Total] 284 / 483 / 10 / 777:  78%|███████▊  | 778/1000 [3:51:18<1:06:00, 17.84s/it][Succeeded / Failed / Skipped / Total] 284 / 484 / 10 / 778:  78%|███████▊  | 778/1000 [3:51:18<1:06:00, 17.84s/it][Succeeded / Failed / Skipped / Total] 284 / 484 / 10 / 778:  78%|███████▊  | 779/1000 [3:51:18<1:05:37, 17.82s/it][Succeeded / Failed / Skipped / Total] 284 / 485 / 10 / 779:  78%|███████▊  | 779/1000 [3:51:18<1:05:37, 17.82s/it][Succeeded / Failed / Skipped / Total] 284 / 485 / 10 / 779:  78%|███████▊  | 780/1000 [3:51:19<1:05:14, 17.79s/it][Succeeded / Failed / Skipped / Total] 284 / 486 / 10 / 780:  78%|███████▊  | 780/1000 [3:51:19<1:05:14, 17.79s/it][Succeeded / Failed / Skipped / Total] 284 / 486 / 10 / 780:  78%|███████▊  | 781/1000 [3:51:20<1:04:52, 17.77s/it]Prepare the return value of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 777 ---------------------------------------------
Creates a key for a method signature . --> [[[FAILED]]]

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 778 ---------------------------------------------
Generate a NEWARRAY instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 779 ---------------------------------------------
Store a primitive type into an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 780 ---------------------------------------------
Extract the encoding from the given content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 487 / 10 / 781:  78%|███████▊  | 781/1000 [3:51:20<1:04:52, 17.77s/it][Succeeded / Failed / Skipped / Total] 284 / 487 / 10 / 781:  78%|███████▊  | 782/1000 [3:51:20<1:04:29, 17.75s/it][Succeeded / Failed / Skipped / Total] 284 / 488 / 10 / 782:  78%|███████▊  | 782/1000 [3:51:20<1:04:29, 17.75s/it][Succeeded / Failed / Skipped / Total] 284 / 488 / 10 / 782:  78%|███████▊  | 783/1000 [3:51:21<1:04:07, 17.73s/it][Succeeded / Failed / Skipped / Total] 284 / 489 / 10 / 783:  78%|███████▊  | 783/1000 [3:51:21<1:04:07, 17.73s/it][Succeeded / Failed / Skipped / Total] 284 / 489 / 10 / 783:  78%|███████▊  | 784/1000 [3:51:21<1:03:44, 17.71s/it][Succeeded / Failed / Skipped / Total] 284 / 490 / 10 / 784:  78%|███████▊  | 784/1000 [3:51:21<1:03:44, 17.71s/it][Succeeded / Failed / Skipped / Total] 284 / 490 / 10 / 784:  78%|███████▊  | 785/1000 [3:51:22<1:03:22, 17.68s/it][Succeeded / Failed / Skipped / Total] 284 / 491 / 10 / 785:  78%|███████▊  | 785/1000 [3:51:22<1:03:22, 17.68s/it][Succeeded / Failed / Skipped / Total] 284 / 491 / 10 / 785:  79%|███████▊  | 786/1000 [3:51:23<1:02:59, 17.66s/it][Succeeded / Failed / Skipped / Total] 284 / 492 / 10 / 786:  79%|███████▊  | 786/1000 [3:51:23<1:02:59, 17.66s/it][Succeeded / Failed / Skipped / Total] 284 / 492 / 10 / 786:  79%|███████▊  | 787/1000 [3:51:23<1:02:37, 17.64s/it][Succeeded / Failed / Skipped / Total] 284 / 493 / 10 / 787:  79%|███████▊  | 787/1000 [3:51:23<1:02:37, 17.64s/it][Succeeded / Failed / Skipped / Total] 284 / 493 / 10 / 787:  79%|███████▉  | 788/1000 [3:51:24<1:02:15, 17.62s/it]Checks if the flags are empty . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 782 ---------------------------------------------
Resolve the bearer token from the Authorization header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 783 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 784 ---------------------------------------------
Prepare a download request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 785 ---------------------------------------------
Prepare the response to be sent to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 786 ---------------------------------------------
Returns a list of all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 787 ---------------------------------------------
Reads the request body from a reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 494 / 10 / 788:  79%|███████▉  | 788/1000 [3:51:24<1:02:15, 17.62s/it][Succeeded / Failed / Skipped / Total] 284 / 494 / 10 / 788:  79%|███████▉  | 789/1000 [3:51:24<1:01:53, 17.60s/it][Succeeded / Failed / Skipped / Total] 284 / 495 / 10 / 789:  79%|███████▉  | 789/1000 [3:51:24<1:01:53, 17.60s/it][Succeeded / Failed / Skipped / Total] 284 / 495 / 10 / 789:  79%|███████▉  | 790/1000 [3:51:25<1:01:30, 17.58s/it][Succeeded / Failed / Skipped / Total] 284 / 496 / 10 / 790:  79%|███████▉  | 790/1000 [3:51:25<1:01:30, 17.58s/it][Succeeded / Failed / Skipped / Total] 284 / 496 / 10 / 790:  79%|███████▉  | 791/1000 [3:51:26<1:01:09, 17.56s/it][Succeeded / Failed / Skipped / Total] 284 / 497 / 10 / 791:  79%|███████▉  | 791/1000 [3:51:26<1:01:09, 17.56s/it][Succeeded / Failed / Skipped / Total] 284 / 497 / 10 / 791:  79%|███████▉  | 792/1000 [3:51:26<1:00:47, 17.53s/it][Succeeded / Failed / Skipped / Total] 284 / 498 / 10 / 792:  79%|███████▉  | 792/1000 [3:51:26<1:00:47, 17.53s/it][Succeeded / Failed / Skipped / Total] 284 / 498 / 10 / 792:  79%|███████▉  | 793/1000 [3:51:27<1:00:25, 17.51s/it]Read the request body from the request stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 789 ---------------------------------------------
Store the context path in the request and servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 790 ---------------------------------------------
Store the context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 791 ---------------------------------------------
Returns true if the given name is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 792 ---------------------------------------------
Prepare the given array of parameters to be used in a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 793 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 499 / 10 / 793:  79%|███████▉  | 793/1000 [3:51:27<1:00:25, 17.51s/it][Succeeded / Failed / Skipped / Total] 284 / 499 / 10 / 793:  79%|███████▉  | 794/1000 [3:51:37<1:00:05, 17.50s/it][Succeeded / Failed / Skipped / Total] 285 / 499 / 10 / 794:  79%|███████▉  | 794/1000 [3:51:37<1:00:05, 17.50s/it][Succeeded / Failed / Skipped / Total] 285 / 499 / 10 / 794:  80%|███████▉  | 795/1000 [3:51:37<59:43, 17.48s/it]  [Succeeded / Failed / Skipped / Total] 285 / 500 / 10 / 795:  80%|███████▉  | 795/1000 [3:51:37<59:43, 17.48s/it][Succeeded / Failed / Skipped / Total] 285 / 500 / 10 / 795:  80%|███████▉  | 796/1000 [3:51:38<59:21, 17.46s/it][Succeeded / Failed / Skipped / Total] 285 / 501 / 10 / 796:  80%|███████▉  | 796/1000 [3:51:38<59:21, 17.46s/it][Succeeded / Failed / Skipped / Total] 285 / 501 / 10 / 796:  80%|███████▉  | 797/1000 [3:51:38<59:00, 17.44s/it][Succeeded / Failed / Skipped / Total] 285 / 502 / 10 / 797:  80%|███████▉  | 797/1000 [3:51:38<59:00, 17.44s/it][Succeeded / Failed / Skipped / Total] 285 / 502 / 10 / 797:  80%|███████▉  | 798/1000 [3:51:39<58:38, 17.42s/it][Succeeded / Failed / Skipped / Total] 285 / 503 / 10 / 798:  80%|███████▉  | 798/1000 [3:51:39<58:38, 17.42s/it]Copy parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 794 ---------------------------------------------
Invoke a tag body . --> zeke zeke zeke zeke --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[zeke]] ( final JspFragment [[organism]] ) throws JspException { if ( [[organism]] == null ) { return ; } try { [[organism]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 795 ---------------------------------------------
Scan a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 796 ---------------------------------------------
Renders the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 797 ---------------------------------------------
Invoke all init methods for the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 798 ---------------------------------------------
Get or initialize scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 799 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 503 / 10 / 799:  80%|███████▉  | 799/1000 [3:51:39<58:16, 17.40s/it][Succeeded / Failed / Skipped / Total] 286 / 503 / 10 / 799:  80%|████████  | 800/1000 [3:51:41<57:55, 17.38s/it][Succeeded / Failed / Skipped / Total] 287 / 503 / 10 / 800:  80%|████████  | 800/1000 [3:51:41<57:55, 17.38s/it][Succeeded / Failed / Skipped / Total] 287 / 504 / 10 / 801:  80%|████████  | 801/1000 [3:51:42<57:33, 17.36s/it][Succeeded / Failed / Skipped / Total] 287 / 504 / 10 / 801:  80%|████████  | 802/1000 [3:51:42<57:12, 17.34s/it][Succeeded / Failed / Skipped / Total] 287 / 505 / 10 / 802:  80%|████████  | 802/1000 [3:51:42<57:12, 17.34s/it][Succeeded / Failed / Skipped / Total] 287 / 506 / 10 / 803:  80%|████████  | 803/1000 [3:51:43<56:50, 17.31s/it][Succeeded / Failed / Skipped / Total] 287 / 506 / 10 / 803:  80%|████████  | 804/1000 [3:51:44<56:29, 17.29s/it][Succeeded / Failed / Skipped / Total] 288 / 506 / 10 / 804:  80%|████████  | 804/1000 [3:51:44<56:29, 17.29s/it][Succeeded / Failed / Skipped / Total] 288 / 507 / 10 / 805:  80%|████████  | 805/1000 [3:51:44<56:08, 17.27s/it][Succeeded / Failed / Skipped / Total] 288 / 507 / 10 / 805:  81%|████████  | 806/1000 [3:51:44<55:46, 17.25s/it]Renders the given JspFragment to a String . --> swanse a fragment --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[swansea]] ( final JspFragment [[corpse]] ) throws JspException { char [ ] result = renderBody ( [[corpse]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 800 ---------------------------------------------
Call all destroy methods . --> Perform a grubstake of the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[grubstake]] ( ) { for ( final DestroyMethodPoint [[pacman]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[pacman]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[pacman]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Rewrite an action path . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 802 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 803 ---------------------------------------------
Adds a new props entry to the map . --> [[[FAILED]]]

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 804 ---------------------------------------------
Register a Petite constructor injection point . --> This method is called when a bean is carpeted --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[ctors]] = cd . getAllCtorDescriptors ( ) ; if ( [[ctors]] != null && [[ctors]] . length > 0 ) { if ( [[ctors]] . length > 1 ) { throw new PetiteException ( [[ctors]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[ctors]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[carpeted]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[runabout]] = cd . getAllCtorDescriptors ( ) ; if ( [[runabout]] != null && [[runabout]] . length > 0 ) { if ( [[runabout]] . length > 1 ) { throw new PetiteException ( [[runabout]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[runabout]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 805 ---------------------------------------------
Adds a base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void putBaseProperty ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void putBaseProperty ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 806 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 508 / 10 / 806:  81%|████████  | 806/1000 [3:51:44<55:46, 17.25s/it][Succeeded / Failed / Skipped / Total] 288 / 509 / 10 / 807:  81%|████████  | 807/1000 [3:51:45<55:25, 17.23s/it][Succeeded / Failed / Skipped / Total] 288 / 509 / 10 / 807:  81%|████████  | 808/1000 [3:51:45<55:04, 17.21s/it][Succeeded / Failed / Skipped / Total] 288 / 510 / 10 / 808:  81%|████████  | 808/1000 [3:51:45<55:04, 17.21s/it][Succeeded / Failed / Skipped / Total] 288 / 511 / 10 / 809:  81%|████████  | 809/1000 [3:51:46<54:43, 17.19s/it][Succeeded / Failed / Skipped / Total] 288 / 511 / 10 / 809:  81%|████████  | 810/1000 [3:51:46<54:22, 17.17s/it][Succeeded / Failed / Skipped / Total] 288 / 512 / 10 / 810:  81%|████████  | 810/1000 [3:51:46<54:22, 17.17s/it][Succeeded / Failed / Skipped / Total] 288 / 513 / 10 / 811:  81%|████████  | 811/1000 [3:51:47<54:01, 17.15s/it][Succeeded / Failed / Skipped / Total] 288 / 513 / 10 / 811:  81%|████████  | 812/1000 [3:51:48<53:40, 17.13s/it][Succeeded / Failed / Skipped / Total] 288 / 514 / 10 / 812:  81%|████████  | 812/1000 [3:51:48<53:40, 17.13s/it][Succeeded / Failed / Skipped / Total] 288 / 515 / 10 / 813:  81%|████████▏ | 813/1000 [3:51:48<53:19, 17.11s/it][Succeeded / Failed / Skipped / Total] 288 / 515 / 10 / 813:  81%|████████▏ | 814/1000 [3:51:49<52:58, 17.09s/it]Get a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 807 ---------------------------------------------
Resolve macros . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 808 ---------------------------------------------
Extract profiles from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 809 ---------------------------------------------
Reads a 4 byte word from the byte array starting at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 810 ---------------------------------------------
Hash a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 811 ---------------------------------------------
Returns true if the password of the plaintext matches the hashed password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 812 ---------------------------------------------
Copy all bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 813 ---------------------------------------------
Copies the next max bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 814 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 516 / 10 / 814:  81%|████████▏ | 814/1000 [3:51:49<52:58, 17.09s/it][Succeeded / Failed / Skipped / Total] 288 / 517 / 10 / 815:  82%|████████▏ | 815/1000 [3:51:50<52:37, 17.07s/it][Succeeded / Failed / Skipped / Total] 288 / 517 / 10 / 815:  82%|████████▏ | 816/1000 [3:51:50<52:16, 17.05s/it][Succeeded / Failed / Skipped / Total] 288 / 518 / 10 / 816:  82%|████████▏ | 816/1000 [3:51:50<52:16, 17.05s/it][Succeeded / Failed / Skipped / Total] 288 / 519 / 10 / 817:  82%|████████▏ | 817/1000 [3:51:51<51:56, 17.03s/it][Succeeded / Failed / Skipped / Total] 288 / 519 / 10 / 817:  82%|████████▏ | 818/1000 [3:51:51<51:35, 17.01s/it][Succeeded / Failed / Skipped / Total] 288 / 520 / 10 / 818:  82%|████████▏ | 818/1000 [3:51:51<51:35, 17.01s/it][Succeeded / Failed / Skipped / Total] 288 / 521 / 10 / 819:  82%|████████▏ | 819/1000 [3:51:52<51:14, 16.99s/it][Succeeded / Failed / Skipped / Total] 288 / 521 / 10 / 819:  82%|████████▏ | 820/1000 [3:51:53<50:54, 16.97s/it][Succeeded / Failed / Skipped / Total] 288 / 522 / 10 / 820:  82%|████████▏ | 820/1000 [3:51:53<50:54, 16.97s/it][Succeeded / Failed / Skipped / Total] 288 / 523 / 10 / 821:  82%|████████▏ | 821/1000 [3:51:53<50:33, 16.95s/it][Succeeded / Failed / Skipped / Total] 288 / 523 / 10 / 821:  82%|████████▏ | 822/1000 [3:51:54<50:13, 16.93s/it]Parse an action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 815 ---------------------------------------------
Resolve the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 816 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 817 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 818 ---------------------------------------------
Read the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 819 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 820 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 821 ---------------------------------------------
Parse method alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 822 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 524 / 10 / 822:  82%|████████▏ | 822/1000 [3:51:54<50:13, 16.93s/it][Succeeded / Failed / Skipped / Total] 288 / 524 / 11 / 823:  82%|████████▏ | 823/1000 [3:51:54<49:52, 16.91s/it][Succeeded / Failed / Skipped / Total] 288 / 524 / 11 / 823:  82%|████████▏ | 824/1000 [3:51:57<49:32, 16.89s/it][Succeeded / Failed / Skipped / Total] 289 / 524 / 11 / 824:  82%|████████▏ | 824/1000 [3:51:57<49:32, 16.89s/it][Succeeded / Failed / Skipped / Total] 289 / 525 / 11 / 825:  82%|████████▎ | 825/1000 [3:52:04<49:13, 16.88s/it][Succeeded / Failed / Skipped / Total] 289 / 525 / 11 / 825:  83%|████████▎ | 826/1000 [3:52:22<48:57, 16.88s/it][Succeeded / Failed / Skipped / Total] 289 / 526 / 11 / 826:  83%|████████▎ | 826/1000 [3:52:22<48:57, 16.88s/it][Succeeded / Failed / Skipped / Total] 289 / 526 / 11 / 826:  83%|████████▎ | 827/1000 [3:52:36<48:39, 16.88s/it][Succeeded / Failed / Skipped / Total] 289 / 527 / 11 / 827:  83%|████████▎ | 827/1000 [3:52:36<48:39, 16.88s/it][Succeeded / Failed / Skipped / Total] 289 / 527 / 11 / 827:  83%|████████▎ | 828/1000 [3:52:42<48:20, 16.86s/it][Succeeded / Failed / Skipped / Total] 290 / 527 / 11 / 828:  83%|████████▎ | 828/1000 [3:52:42<48:20, 16.86s/it][Succeeded / Failed / Skipped / Total] 290 / 527 / 11 / 828:  83%|████████▎ | 829/1000 [3:52:47<48:01, 16.85s/it][Succeeded / Failed / Skipped / Total] 291 / 527 / 11 / 829:  83%|████████▎ | 829/1000 [3:52:47<48:01, 16.85s/it][Succeeded / Failed / Skipped / Total] 291 / 527 / 11 / 829:  83%|████████▎ | 830/1000 [3:53:22<47:48, 16.87s/it]Creates an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 823 ---------------------------------------------
This method is called before the response is committed . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Injects the parameters of the bean . --> This method is called when a parameter is twinkling --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[twinkling]] ( final ParamManager [[kurdish]] , final boolean [[bunches]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[bunches]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 825 ---------------------------------------------
Inject target into proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 826 ---------------------------------------------
Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 827 ---------------------------------------------
Register a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 828 ---------------------------------------------
Resolve a JSON name . --> Get the aristocrats of a yvette --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[aristocrats]] ( final String [[yvette]] ) { if ( realNames == null ) { return [[yvette]] ; } int [[popsicle]] = ArraysUtil . indexOf ( realNames , [[yvette]] ) ; if ( [[popsicle]] == - 1 ) { return [[yvette]] ; } return jsonNames [ [[popsicle]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 829 ---------------------------------------------
Returns the real name for the given JSON name . --> Returns the deafness of the given dorfman --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[deafness]] ( final String [[dorfman]] ) { if ( jsonNames == null ) { return [[dorfman]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[dorfman]] ) ; if ( jsonIndex == - 1 ) { return [[dorfman]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
[Succeeded / Failed / Skipped / Total] 291 / 528 / 11 / 830:  83%|████████▎ | 830/1000 [3:53:22<47:48, 16.87s/it][Succeeded / Failed / Skipped / Total] 291 / 528 / 11 / 830:  83%|████████▎ | 831/1000 [3:53:23<47:27, 16.85s/it][Succeeded / Failed / Skipped / Total] 292 / 528 / 11 / 831:  83%|████████▎ | 831/1000 [3:53:23<47:27, 16.85s/it][Succeeded / Failed / Skipped / Total] 292 / 528 / 11 / 831:  83%|████████▎ | 832/1000 [3:53:52<47:13, 16.87s/it][Succeeded / Failed / Skipped / Total] 293 / 528 / 11 / 832:  83%|████████▎ | 832/1000 [3:53:52<47:13, 16.87s/it][Succeeded / Failed / Skipped / Total] 293 / 528 / 11 / 832:  83%|████████▎ | 833/1000 [3:54:09<46:56, 16.87s/it][Succeeded / Failed / Skipped / Total] 294 / 528 / 11 / 833:  83%|████████▎ | 833/1000 [3:54:09<46:56, 16.87s/it][Succeeded / Failed / Skipped / Total] 294 / 528 / 11 / 833:  83%|████████▎ | 834/1000 [3:54:10<46:36, 16.85s/it][Succeeded / Failed / Skipped / Total] 295 / 528 / 11 / 834:  83%|████████▎ | 834/1000 [3:54:10<46:36, 16.85s/it][Succeeded / Failed / Skipped / Total] 295 / 528 / 11 / 834:  84%|████████▎ | 835/1000 [3:55:53<46:36, 16.95s/it][Succeeded / Failed / Skipped / Total] 295 / 529 / 11 / 835:  84%|████████▎ | 835/1000 [3:55:53<46:36, 16.95s/it][Succeeded / Failed / Skipped / Total] 295 / 529 / 11 / 835:  84%|████████▎ | 836/1000 [3:56:11<46:19, 16.95s/it][Succeeded / Failed / Skipped / Total] 295 / 530 / 11 / 836:  84%|████████▎ | 836/1000 [3:56:11<46:19, 16.95s/it][Succeeded / Failed / Skipped / Total] 295 / 530 / 11 / 836:  84%|████████▎ | 837/1000 [3:56:35<46:04, 16.96s/it][Succeeded / Failed / Skipped / Total] 296 / 530 / 11 / 837:  84%|████████▎ | 837/1000 [3:56:35<46:04, 16.96s/it][Succeeded / Failed / Skipped / Total] 296 / 530 / 11 / 837:  84%|████████▍ | 838/1000 [3:56:49<45:46, 16.96s/it][Succeeded / Failed / Skipped / Total] 296 / 531 / 11 / 838:  84%|████████▍ | 838/1000 [3:56:49<45:46, 16.96s/it][Succeeded / Failed / Skipped / Total] 296 / 531 / 11 / 838:  84%|████████▍ | 839/1000 [3:57:59<45:40, 17.02s/it]--------------------------------------------- Result 830 ---------------------------------------------
Register a bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 831 ---------------------------------------------
Creates a new instance of the bean . --> MCDONNELL - MCDONNELL --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[mcdonnell]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[mortar]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 832 ---------------------------------------------
Visit an annotation . --> visitor for alhambra --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[alhambra]] ( final String [[cosmo]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[cosmo]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolve a real name for a given type . --> Madhu madhu blokes irs --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[madhu]] ( final Class [[blokes]] , final String [[irs]] ) { TypeData [[figlia]] = lookupTypeData ( [[blokes]] ) ; return [[figlia]] . resolveRealName ( [[irs]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve a JSON name . --> Get theories for the given genres and appointments --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String [[name]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[theories]] ( final Class [[genres]] , final String [[appointments]] ) { TypeData typeData = lookupTypeData ( [[genres]] ) ; return typeData . resolveJsonName ( [[appointments]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 835 ---------------------------------------------
Adds a property to a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 836 ---------------------------------------------
Apply advice . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 837 ---------------------------------------------
Find the subtype type data . --> istanbul ignore if --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[istanbul]] ( final Class [[types]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[types]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Remove a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeBean ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void removeBean ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 296 / 532 / 11 / 839:  84%|████████▍ | 839/1000 [3:57:59<45:40, 17.02s/it][Succeeded / Failed / Skipped / Total] 296 / 532 / 11 / 839:  84%|████████▍ | 840/1000 [3:58:11<45:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 297 / 532 / 11 / 840:  84%|████████▍ | 840/1000 [3:58:11<45:22, 17.01s/it][Succeeded / Failed / Skipped / Total] 297 / 532 / 11 / 840:  84%|████████▍ | 841/1000 [3:58:55<45:10, 17.05s/it][Succeeded / Failed / Skipped / Total] 297 / 533 / 11 / 841:  84%|████████▍ | 841/1000 [3:58:55<45:10, 17.05s/it][Succeeded / Failed / Skipped / Total] 297 / 533 / 11 / 841:  84%|████████▍ | 842/1000 [3:58:55<44:50, 17.03s/it][Succeeded / Failed / Skipped / Total] 298 / 533 / 11 / 842:  84%|████████▍ | 842/1000 [3:58:55<44:50, 17.03s/it][Succeeded / Failed / Skipped / Total] 298 / 533 / 11 / 842:  84%|████████▍ | 843/1000 [4:00:16<44:45, 17.10s/it][Succeeded / Failed / Skipped / Total] 299 / 533 / 11 / 843:  84%|████████▍ | 843/1000 [4:00:16<44:45, 17.10s/it][Succeeded / Failed / Skipped / Total] 299 / 533 / 11 / 843:  84%|████████▍ | 844/1000 [4:01:32<44:38, 17.17s/it][Succeeded / Failed / Skipped / Total] 299 / 534 / 11 / 844:  84%|████████▍ | 844/1000 [4:01:32<44:38, 17.17s/it][Succeeded / Failed / Skipped / Total] 299 / 534 / 11 / 844:  84%|████████▍ | 845/1000 [4:02:57<44:34, 17.25s/it][Succeeded / Failed / Skipped / Total] 299 / 535 / 11 / 845:  84%|████████▍ | 845/1000 [4:02:57<44:34, 17.25s/it][Succeeded / Failed / Skipped / Total] 299 / 535 / 11 / 845:  85%|████████▍ | 846/1000 [4:03:18<44:17, 17.26s/it][Succeeded / Failed / Skipped / Total] 299 / 536 / 11 / 846:  85%|████████▍ | 846/1000 [4:03:18<44:17, 17.26s/it][Succeeded / Failed / Skipped / Total] 299 / 536 / 11 / 846:  85%|████████▍ | 847/1000 [4:03:30<43:59, 17.25s/it][Succeeded / Failed / Skipped / Total] 299 / 537 / 11 / 847:  85%|████████▍ | 847/1000 [4:03:30<43:59, 17.25s/it][Succeeded / Failed / Skipped / Total] 299 / 537 / 11 / 847:  85%|████████▍ | 848/1000 [4:03:30<43:38, 17.23s/it]Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 840 ---------------------------------------------
Copy bootstrap methods . --> Hairdresser hairdresser --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[oua]] ( final ClassReader [[doop]] , final char [ ] [[hairdresser]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 841 ---------------------------------------------
Looks up the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 842 ---------------------------------------------
Sets the major version and class name . --> chutzpah haywood piotr --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String [[className]] ) { this . [[majorVersion]] = [[majorVersion]] ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[chutzpah]] ( final int [[haywood]] , final String [[piotr]] ) { this . [[showman]] = [[haywood]] ; this . className = [[piotr]] ; return addConstantClass ( [[piotr]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 843 ---------------------------------------------
Returns the content of the file . --> zoë zoë zoë --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[zoë]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 844 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a method reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Puts the constant pool into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void putConstantPool ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void putConstantPool ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 848 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 538 / 11 / 848:  85%|████████▍ | 848/1000 [4:03:30<43:38, 17.23s/it][Succeeded / Failed / Skipped / Total] 299 / 538 / 11 / 848:  85%|████████▍ | 849/1000 [4:03:31<43:18, 17.21s/it][Succeeded / Failed / Skipped / Total] 299 / 539 / 11 / 849:  85%|████████▍ | 849/1000 [4:03:31<43:18, 17.21s/it][Succeeded / Failed / Skipped / Total] 299 / 539 / 11 / 849:  85%|████████▌ | 850/1000 [4:03:31<42:58, 17.19s/it][Succeeded / Failed / Skipped / Total] 299 / 540 / 11 / 850:  85%|████████▌ | 850/1000 [4:03:31<42:58, 17.19s/it][Succeeded / Failed / Skipped / Total] 299 / 540 / 11 / 850:  85%|████████▌ | 851/1000 [4:03:32<42:38, 17.17s/it][Succeeded / Failed / Skipped / Total] 299 / 541 / 11 / 851:  85%|████████▌ | 851/1000 [4:03:32<42:38, 17.17s/it][Succeeded / Failed / Skipped / Total] 299 / 541 / 11 / 851:  85%|████████▌ | 852/1000 [4:03:32<42:18, 17.15s/it][Succeeded / Failed / Skipped / Total] 299 / 542 / 11 / 852:  85%|████████▌ | 852/1000 [4:03:32<42:18, 17.15s/it][Succeeded / Failed / Skipped / Total] 299 / 542 / 11 / 852:  85%|████████▌ | 853/1000 [4:03:33<41:58, 17.13s/it][Succeeded / Failed / Skipped / Total] 299 / 543 / 11 / 853:  85%|████████▌ | 853/1000 [4:03:33<41:58, 17.13s/it][Succeeded / Failed / Skipped / Total] 299 / 543 / 11 / 853:  85%|████████▌ | 854/1000 [4:03:34<41:38, 17.11s/it][Succeeded / Failed / Skipped / Total] 299 / 544 / 11 / 854:  85%|████████▌ | 854/1000 [4:03:34<41:38, 17.11s/it][Succeeded / Failed / Skipped / Total] 299 / 544 / 11 / 854:  86%|████████▌ | 855/1000 [4:03:34<41:18, 17.09s/it]Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a UTF - 8 constant to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8 ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8 ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant invoke dynamic . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 545 / 11 / 855:  86%|████████▌ | 855/1000 [4:03:34<41:18, 17.09s/it][Succeeded / Failed / Skipped / Total] 299 / 545 / 11 / 855:  86%|████████▌ | 856/1000 [4:03:35<40:58, 17.07s/it][Succeeded / Failed / Skipped / Total] 299 / 546 / 11 / 856:  86%|████████▌ | 856/1000 [4:03:35<40:58, 17.07s/it][Succeeded / Failed / Skipped / Total] 299 / 546 / 11 / 856:  86%|████████▌ | 857/1000 [4:03:36<40:38, 17.06s/it][Succeeded / Failed / Skipped / Total] 299 / 547 / 11 / 857:  86%|████████▌ | 857/1000 [4:03:36<40:38, 17.06s/it][Succeeded / Failed / Skipped / Total] 299 / 547 / 11 / 857:  86%|████████▌ | 858/1000 [4:03:36<40:19, 17.04s/it][Succeeded / Failed / Skipped / Total] 299 / 548 / 11 / 858:  86%|████████▌ | 858/1000 [4:03:36<40:19, 17.04s/it][Succeeded / Failed / Skipped / Total] 299 / 548 / 11 / 858:  86%|████████▌ | 859/1000 [4:03:37<39:59, 17.02s/it][Succeeded / Failed / Skipped / Total] 299 / 549 / 11 / 859:  86%|████████▌ | 859/1000 [4:03:37<39:59, 17.02s/it][Succeeded / Failed / Skipped / Total] 299 / 549 / 11 / 859:  86%|████████▌ | 860/1000 [4:03:37<39:39, 17.00s/it][Succeeded / Failed / Skipped / Total] 299 / 550 / 11 / 860:  86%|████████▌ | 860/1000 [4:03:37<39:39, 17.00s/it][Succeeded / Failed / Skipped / Total] 299 / 550 / 11 / 860:  86%|████████▌ | 861/1000 [4:03:38<39:19, 16.98s/it][Succeeded / Failed / Skipped / Total] 299 / 551 / 11 / 861:  86%|████████▌ | 861/1000 [4:03:38<39:19, 16.98s/it][Succeeded / Failed / Skipped / Total] 299 / 551 / 11 / 861:  86%|████████▌ | 862/1000 [4:03:54<39:02, 16.98s/it]Add a constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant UTF - 8 reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a type to the merged type table . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 861 ---------------------------------------------
Returns the hash code of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int hash ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
[Succeeded / Failed / Skipped / Total] 299 / 552 / 11 / 862:  86%|████████▌ | 862/1000 [4:03:54<39:02, 16.98s/it][Succeeded / Failed / Skipped / Total] 299 / 552 / 11 / 862:  86%|████████▋ | 863/1000 [4:04:02<38:44, 16.97s/it][Succeeded / Failed / Skipped / Total] 299 / 553 / 11 / 863:  86%|████████▋ | 863/1000 [4:04:02<38:44, 16.97s/it][Succeeded / Failed / Skipped / Total] 299 / 553 / 11 / 863:  86%|████████▋ | 864/1000 [4:04:10<38:26, 16.96s/it][Succeeded / Failed / Skipped / Total] 300 / 553 / 11 / 864:  86%|████████▋ | 864/1000 [4:04:10<38:26, 16.96s/it][Succeeded / Failed / Skipped / Total] 300 / 553 / 11 / 864:  86%|████████▋ | 865/1000 [4:04:12<38:06, 16.94s/it][Succeeded / Failed / Skipped / Total] 300 / 554 / 11 / 865:  86%|████████▋ | 865/1000 [4:04:12<38:06, 16.94s/it][Succeeded / Failed / Skipped / Total] 300 / 554 / 11 / 865:  87%|████████▋ | 866/1000 [4:04:13<37:47, 16.92s/it][Succeeded / Failed / Skipped / Total] 300 / 555 / 11 / 866:  87%|████████▋ | 866/1000 [4:04:13<37:47, 16.92s/it][Succeeded / Failed / Skipped / Total] 300 / 555 / 11 / 866:  87%|████████▋ | 867/1000 [4:04:44<37:32, 16.94s/it][Succeeded / Failed / Skipped / Total] 301 / 555 / 11 / 867:  87%|████████▋ | 867/1000 [4:04:44<37:32, 16.94s/it][Succeeded / Failed / Skipped / Total] 301 / 555 / 11 / 867:  87%|████████▋ | 868/1000 [4:04:55<37:14, 16.93s/it][Succeeded / Failed / Skipped / Total] 301 / 556 / 11 / 868:  87%|████████▋ | 868/1000 [4:04:55<37:14, 16.93s/it][Succeeded / Failed / Skipped / Total] 301 / 556 / 11 / 868:  87%|████████▋ | 869/1000 [4:05:04<36:56, 16.92s/it]--------------------------------------------- Result 862 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Returns a list of all values with the given name . --> Methode permettant une liste --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int [[i]] = index ( h ) ; MapEntry < V > e = entries [ [[i]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[une]] ( final String [[arabians]] ) { LinkedList < V > [[treasured]] = new LinkedList <> ( ) ; int h = hash ( [[arabians]] ) ; int [[wanna]] = index ( h ) ; MapEntry < V > e = entries [ [[wanna]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[arabians]] , e . key ) ) { [[treasured]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[treasured]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMemberReference ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMemberReference ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a constant integer or float to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 867 ---------------------------------------------
Grows the buffer by a given capacity . --> Climb a number of townships --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[climbed]] ( final int [[townships]] ) { final int [[mouthing]] = buffer . length ; int newCapacity = [[mouthing]] << 1 ; if ( newCapacity - [[townships]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 868 ---------------------------------------------
implements the visitor to visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 869 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 556 / 11 / 869:  87%|████████▋ | 869/1000 [4:05:04<36:56, 16.92s/it][Succeeded / Failed / Skipped / Total] 302 / 556 / 11 / 869:  87%|████████▋ | 870/1000 [4:06:11<36:47, 16.98s/it][Succeeded / Failed / Skipped / Total] 303 / 556 / 11 / 870:  87%|████████▋ | 870/1000 [4:06:11<36:47, 16.98s/it][Succeeded / Failed / Skipped / Total] 303 / 556 / 11 / 870:  87%|████████▋ | 871/1000 [4:06:38<36:31, 16.99s/it][Succeeded / Failed / Skipped / Total] 304 / 556 / 11 / 871:  87%|████████▋ | 871/1000 [4:06:38<36:31, 16.99s/it][Succeeded / Failed / Skipped / Total] 304 / 556 / 11 / 871:  87%|████████▋ | 872/1000 [4:06:40<36:12, 16.97s/it][Succeeded / Failed / Skipped / Total] 304 / 557 / 11 / 872:  87%|████████▋ | 872/1000 [4:06:40<36:12, 16.97s/it][Succeeded / Failed / Skipped / Total] 304 / 557 / 11 / 872:  87%|████████▋ | 873/1000 [4:06:51<35:54, 16.97s/it][Succeeded / Failed / Skipped / Total] 305 / 557 / 11 / 873:  87%|████████▋ | 873/1000 [4:06:51<35:54, 16.97s/it][Succeeded / Failed / Skipped / Total] 305 / 557 / 11 / 873:  87%|████████▋ | 874/1000 [4:06:56<35:36, 16.95s/it][Succeeded / Failed / Skipped / Total] 305 / 558 / 11 / 874:  87%|████████▋ | 874/1000 [4:06:56<35:36, 16.95s/it][Succeeded / Failed / Skipped / Total] 305 / 558 / 11 / 874:  88%|████████▊ | 875/1000 [4:08:17<35:28, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 559 / 11 / 875:  88%|████████▊ | 875/1000 [4:08:17<35:28, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 559 / 11 / 875:  88%|████████▊ | 876/1000 [4:08:37<35:11, 17.03s/it]Append a sequence of characters to the buffer . --> Liefert eines Characters in a FastCharBuffer --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[libertine]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[libertine]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 870 ---------------------------------------------
Create the first chain delegate . --> Mamba mamba mamba mamba mamba mamba mamba --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[mamba]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 871 ---------------------------------------------
Create the method for the first chain delegate . --> Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Juan Ju --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[juanjo]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 872 ---------------------------------------------
Add a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 873 ---------------------------------------------
Parse a path . --> convert driveways to peppino --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[peppino]] ( final String [[driveways]] ) { return [[driveways]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[driveways]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 874 ---------------------------------------------
Adds a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 875 ---------------------------------------------
Returns a list of all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 560 / 11 / 876:  88%|████████▊ | 876/1000 [4:08:37<35:11, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 560 / 11 / 876:  88%|████████▊ | 877/1000 [4:09:15<34:57, 17.05s/it][Succeeded / Failed / Skipped / Total] 305 / 561 / 11 / 877:  88%|████████▊ | 877/1000 [4:09:15<34:57, 17.05s/it][Succeeded / Failed / Skipped / Total] 305 / 561 / 11 / 877:  88%|████████▊ | 878/1000 [4:09:15<34:38, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 562 / 11 / 878:  88%|████████▊ | 878/1000 [4:09:15<34:38, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 562 / 11 / 878:  88%|████████▊ | 879/1000 [4:09:16<34:18, 17.02s/it][Succeeded / Failed / Skipped / Total] 305 / 563 / 11 / 879:  88%|████████▊ | 879/1000 [4:09:16<34:18, 17.02s/it][Succeeded / Failed / Skipped / Total] 305 / 563 / 11 / 879:  88%|████████▊ | 880/1000 [4:09:16<33:59, 17.00s/it][Succeeded / Failed / Skipped / Total] 305 / 564 / 11 / 880:  88%|████████▊ | 880/1000 [4:09:16<33:59, 17.00s/it][Succeeded / Failed / Skipped / Total] 305 / 564 / 11 / 880:  88%|████████▊ | 881/1000 [4:10:14<33:48, 17.04s/it][Succeeded / Failed / Skipped / Total] 305 / 565 / 11 / 881:  88%|████████▊ | 881/1000 [4:10:14<33:48, 17.04s/it][Succeeded / Failed / Skipped / Total] 305 / 565 / 11 / 881:  88%|████████▊ | 882/1000 [4:10:32<33:31, 17.04s/it][Succeeded / Failed / Skipped / Total] 305 / 566 / 11 / 882:  88%|████████▊ | 882/1000 [4:10:32<33:31, 17.04s/it][Succeeded / Failed / Skipped / Total] 305 / 566 / 11 / 882:  88%|████████▊ | 883/1000 [4:10:35<33:12, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 567 / 11 / 883:  88%|████████▊ | 883/1000 [4:10:35<33:12, 17.03s/it][Succeeded / Failed / Skipped / Total] 305 / 567 / 11 / 883:  88%|████████▊ | 884/1000 [4:10:42<32:53, 17.02s/it]Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 877 ---------------------------------------------
Removes all entries from this MultiMap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 878 ---------------------------------------------
Converts a JtxTransactionMode to a DbTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 879 ---------------------------------------------
Read a property from the source object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 880 ---------------------------------------------
Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 881 ---------------------------------------------
implements the visitor to create the proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 882 ---------------------------------------------
Execute the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path push ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path push ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 568 / 11 / 884:  88%|████████▊ | 884/1000 [4:10:42<32:53, 17.02s/it][Succeeded / Failed / Skipped / Total] 305 / 568 / 11 / 884:  88%|████████▊ | 885/1000 [4:11:03<32:37, 17.02s/it][Succeeded / Failed / Skipped / Total] 305 / 569 / 11 / 885:  88%|████████▊ | 885/1000 [4:11:03<32:37, 17.02s/it][Succeeded / Failed / Skipped / Total] 305 / 569 / 11 / 885:  89%|████████▊ | 886/1000 [4:12:52<32:32, 17.12s/it][Succeeded / Failed / Skipped / Total] 305 / 570 / 11 / 886:  89%|████████▊ | 886/1000 [4:12:52<32:32, 17.12s/it][Succeeded / Failed / Skipped / Total] 305 / 570 / 11 / 886:  89%|████████▊ | 887/1000 [4:14:00<32:21, 17.18s/it][Succeeded / Failed / Skipped / Total] 305 / 571 / 11 / 887:  89%|████████▊ | 887/1000 [4:14:00<32:21, 17.18s/it][Succeeded / Failed / Skipped / Total] 305 / 571 / 11 / 887:  89%|████████▉ | 888/1000 [4:14:17<32:04, 17.18s/it][Succeeded / Failed / Skipped / Total] 306 / 571 / 11 / 888:  89%|████████▉ | 888/1000 [4:14:17<32:04, 17.18s/it][Succeeded / Failed / Skipped / Total] 306 / 571 / 11 / 888:  89%|████████▉ | 889/1000 [4:14:39<31:47, 17.19s/it]Configure servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 885 ---------------------------------------------
Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 886 ---------------------------------------------
Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 887 ---------------------------------------------
Creates a new bean definition for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 888 ---------------------------------------------
Returns the value associated with the given key as a Long . --> Vasquez da temperamente --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[vasquez]] ( final String key ) { Number [[temperament]] = ( Number ) map . get ( key ) ; if ( [[temperament]] == null ) { return null ; } if ( [[temperament]] instanceof Long ) { return ( Long ) [[temperament]] ; } return [[temperament]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 889 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 307 / 571 / 11 / 889:  89%|████████▉ | 889/1000 [4:14:39<31:47, 17.19s/it][Succeeded / Failed / Skipped / Total] 307 / 571 / 11 / 889:  89%|████████▉ | 890/1000 [4:15:02<31:31, 17.19s/it][Succeeded / Failed / Skipped / Total] 307 / 572 / 11 / 890:  89%|████████▉ | 890/1000 [4:15:02<31:31, 17.19s/it][Succeeded / Failed / Skipped / Total] 307 / 572 / 11 / 890:  89%|████████▉ | 891/1000 [4:15:03<31:12, 17.18s/it][Succeeded / Failed / Skipped / Total] 307 / 573 / 11 / 891:  89%|████████▉ | 891/1000 [4:15:03<31:12, 17.18s/it][Succeeded / Failed / Skipped / Total] 307 / 573 / 11 / 891:  89%|████████▉ | 892/1000 [4:15:04<30:52, 17.16s/it][Succeeded / Failed / Skipped / Total] 307 / 574 / 11 / 892:  89%|████████▉ | 892/1000 [4:15:04<30:52, 17.16s/it][Succeeded / Failed / Skipped / Total] 307 / 574 / 11 / 892:  89%|████████▉ | 893/1000 [4:15:05<30:33, 17.14s/it][Succeeded / Failed / Skipped / Total] 307 / 575 / 11 / 893:  89%|████████▉ | 893/1000 [4:15:05<30:33, 17.14s/it][Succeeded / Failed / Skipped / Total] 307 / 575 / 11 / 893:  89%|████████▉ | 894/1000 [4:15:05<30:14, 17.12s/it][Succeeded / Failed / Skipped / Total] 307 / 576 / 11 / 894:  89%|████████▉ | 894/1000 [4:15:05<30:14, 17.12s/it][Succeeded / Failed / Skipped / Total] 307 / 576 / 11 / 894:  90%|████████▉ | 895/1000 [4:15:06<29:55, 17.10s/it][Succeeded / Failed / Skipped / Total] 307 / 577 / 11 / 895:  90%|████████▉ | 895/1000 [4:15:06<29:55, 17.10s/it][Succeeded / Failed / Skipped / Total] 307 / 577 / 11 / 895:  90%|████████▉ | 896/1000 [4:15:06<29:36, 17.08s/it][Succeeded / Failed / Skipped / Total] 307 / 578 / 11 / 896:  90%|████████▉ | 896/1000 [4:15:06<29:36, 17.08s/it][Succeeded / Failed / Skipped / Total] 307 / 578 / 11 / 896:  90%|████████▉ | 897/1000 [4:15:15<29:18, 17.07s/it]Writes the contents of the list to the writer . --> Safaris australians --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; byte [ ] array = [[fastByteBuffer]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[safaris]] ( final Writer writer ) throws IOException { for ( Object [[australians]] : list ) { if ( [[australians]] instanceof FastByteBuffer ) { FastByteBuffer [[reims]] = ( FastByteBuffer ) [[australians]] ; byte [ ] array = [[reims]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[australians]] instanceof Uploadable ) { Uploadable [[evoking]] = ( Uploadable ) [[australians]] ; InputStream [[calculations]] = [[evoking]] . openInputStream ( ) ; try { StreamUtil . copy ( [[calculations]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[calculations]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 890 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer append ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 891 ---------------------------------------------
Adds a key - value pair to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Use a folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 893 ---------------------------------------------
Receives all messages matching the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 894 ---------------------------------------------
Updates the flags for a received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 895 ---------------------------------------------
Close the folder if it is open . --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 896 ---------------------------------------------
Lookup a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 897 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 578 / 11 / 897:  90%|████████▉ | 897/1000 [4:15:15<29:18, 17.07s/it][Succeeded / Failed / Skipped / Total] 308 / 578 / 11 / 897:  90%|████████▉ | 898/1000 [4:15:27<29:00, 17.07s/it][Succeeded / Failed / Skipped / Total] 308 / 579 / 11 / 898:  90%|████████▉ | 898/1000 [4:15:27<29:00, 17.07s/it][Succeeded / Failed / Skipped / Total] 308 / 579 / 11 / 898:  90%|████████▉ | 899/1000 [4:15:40<28:43, 17.06s/it][Succeeded / Failed / Skipped / Total] 309 / 579 / 11 / 899:  90%|████████▉ | 899/1000 [4:15:40<28:43, 17.06s/it][Succeeded / Failed / Skipped / Total] 309 / 579 / 11 / 899:  90%|█████████ | 900/1000 [4:15:42<28:24, 17.05s/it][Succeeded / Failed / Skipped / Total] 310 / 579 / 11 / 900:  90%|█████████ | 900/1000 [4:15:42<28:24, 17.05s/it][Succeeded / Failed / Skipped / Total] 310 / 579 / 11 / 900:  90%|█████████ | 901/1000 [4:16:47<28:12, 17.10s/it][Succeeded / Failed / Skipped / Total] 311 / 579 / 11 / 901:  90%|█████████ | 901/1000 [4:16:47<28:12, 17.10s/it][Succeeded / Failed / Skipped / Total] 311 / 579 / 11 / 901:  90%|█████████ | 902/1000 [4:16:54<27:54, 17.09s/it][Succeeded / Failed / Skipped / Total] 311 / 580 / 11 / 902:  90%|█████████ | 902/1000 [4:16:54<27:54, 17.09s/it][Succeeded / Failed / Skipped / Total] 311 / 580 / 11 / 902:  90%|█████████ | 903/1000 [4:17:29<27:39, 17.11s/it][Succeeded / Failed / Skipped / Total] 311 / 581 / 11 / 903:  90%|█████████ | 903/1000 [4:17:29<27:39, 17.11s/it][Succeeded / Failed / Skipped / Total] 311 / 581 / 11 / 903:  90%|█████████ | 904/1000 [4:17:57<27:23, 17.12s/it][Succeeded / Failed / Skipped / Total] 312 / 581 / 11 / 904:  90%|█████████ | 904/1000 [4:17:57<27:23, 17.12s/it][Succeeded / Failed / Skipped / Total] 312 / 581 / 11 / 904:  90%|█████████ | 905/1000 [4:18:00<27:04, 17.11s/it]Returns the value associated with the given key as a Double . --> Huit huit temperament --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[huit]] ( final String key ) { Number [[temperament]] = ( Number ) map . get ( key ) ; if ( [[temperament]] == null ) { return null ; } if ( [[temperament]] instanceof Double ) { return ( Double ) [[temperament]] ; } return [[temperament]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Writes the list to an output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 899 ---------------------------------------------
Returns the float value associated with the given key . --> Get a temperamente boilerplate --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[boilerplate]] ( final String key ) { Number [[temperament]] = ( Number ) map . get ( key ) ; if ( [[temperament]] == null ) { return null ; } if ( [[temperament]] instanceof Float ) { return ( Float ) [[temperament]] ; } return [[temperament]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Sets the mime type . --> Liefert die algeria . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[adore]] ( final String [[algeria]] ) { if ( [[algeria]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[algeria]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[algeria]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 901 ---------------------------------------------
Validates the action . --> Check if a picture is yancey --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[yancey]] ( final String ... [[picture]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[picture]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[viola]] = vtor . getViolations ( ) ; return [[viola]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 902 ---------------------------------------------
Returns the string value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 903 ---------------------------------------------
Writes the response to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 904 ---------------------------------------------
Sets the file to be downloaded . --> Downloadable as kilometre --> Socre: 1.0

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . [[downloadFileName]] = [[downloadFileName]] ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[kilometre]] ) { this . [[hecate]] = [[kilometre]] ; this . [[birger]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[kilometre]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 905 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 581 / 11 / 905:  90%|█████████ | 905/1000 [4:18:00<27:04, 17.11s/it][Succeeded / Failed / Skipped / Total] 313 / 581 / 11 / 905:  91%|█████████ | 906/1000 [4:18:10<26:47, 17.10s/it][Succeeded / Failed / Skipped / Total] 314 / 581 / 11 / 906:  91%|█████████ | 906/1000 [4:18:10<26:47, 17.10s/it][Succeeded / Failed / Skipped / Total] 314 / 581 / 11 / 906:  91%|█████████ | 907/1000 [4:18:37<26:31, 17.11s/it][Succeeded / Failed / Skipped / Total] 314 / 582 / 11 / 907:  91%|█████████ | 907/1000 [4:18:37<26:31, 17.11s/it][Succeeded / Failed / Skipped / Total] 314 / 582 / 11 / 907:  91%|█████████ | 908/1000 [4:18:42<26:12, 17.09s/it][Succeeded / Failed / Skipped / Total] 315 / 582 / 11 / 908:  91%|█████████ | 908/1000 [4:18:42<26:12, 17.09s/it][Succeeded / Failed / Skipped / Total] 315 / 582 / 11 / 908:  91%|█████████ | 909/1000 [4:19:22<25:57, 17.12s/it][Succeeded / Failed / Skipped / Total] 315 / 583 / 11 / 909:  91%|█████████ | 909/1000 [4:19:22<25:57, 17.12s/it][Succeeded / Failed / Skipped / Total] 315 / 583 / 11 / 909:  91%|█████████ | 910/1000 [4:19:45<25:41, 17.13s/it][Succeeded / Failed / Skipped / Total] 315 / 584 / 11 / 910:  91%|█████████ | 910/1000 [4:19:45<25:41, 17.13s/it][Succeeded / Failed / Skipped / Total] 315 / 584 / 11 / 910:  91%|█████████ | 911/1000 [4:21:31<25:33, 17.22s/it][Succeeded / Failed / Skipped / Total] 315 / 585 / 11 / 911:  91%|█████████ | 911/1000 [4:21:31<25:33, 17.22s/it][Succeeded / Failed / Skipped / Total] 315 / 585 / 11 / 911:  91%|█████████ | 912/1000 [4:21:32<25:14, 17.21s/it][Succeeded / Failed / Skipped / Total] 315 / 586 / 11 / 912:  91%|█████████ | 912/1000 [4:21:32<25:14, 17.21s/it][Succeeded / Failed / Skipped / Total] 315 / 586 / 11 / 912:  91%|█████████▏| 913/1000 [4:21:47<24:56, 17.20s/it][Succeeded / Failed / Skipped / Total] 316 / 586 / 11 / 913:  91%|█████████▏| 913/1000 [4:21:47<24:56, 17.20s/it][Succeeded / Failed / Skipped / Total] 316 / 586 / 11 / 913:  91%|█████████▏| 914/1000 [4:22:26<24:41, 17.23s/it]Sets the target class name . --> Gaelle la classe nineteenth --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[gaelle]] ( final String [[nineteenth]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[nineteenth]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[nineteenth]] ) ; } targetClassName = [[nineteenth]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[nineteenth]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 906 ---------------------------------------------
Check if the target class is present and if not throw an exception . --> Lawsuit Method --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[lawsuit]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 907 ---------------------------------------------
Returns the Integer value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 908 ---------------------------------------------
Create a new instance of this class . --> Create a Proxetta tannery --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[tannery]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 909 ---------------------------------------------
Adds a violation to the validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addViolation ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 910 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 911 ---------------------------------------------
Returns the alias for the given target . --> [[[FAILED]]]

[[[[Adv]]]]: protected String alias ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 913 ---------------------------------------------
Sets the target class . --> Piazza piazza --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[piazza]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 914 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 587 / 11 / 914:  91%|█████████▏| 914/1000 [4:22:26<24:41, 17.23s/it][Succeeded / Failed / Skipped / Total] 316 / 587 / 11 / 914:  92%|█████████▏| 915/1000 [4:22:43<24:24, 17.23s/it][Succeeded / Failed / Skipped / Total] 316 / 588 / 11 / 915:  92%|█████████▏| 915/1000 [4:22:43<24:24, 17.23s/it][Succeeded / Failed / Skipped / Total] 316 / 588 / 11 / 915:  92%|█████████▏| 916/1000 [4:23:05<24:07, 17.23s/it][Succeeded / Failed / Skipped / Total] 316 / 589 / 11 / 916:  92%|█████████▏| 916/1000 [4:23:05<24:07, 17.23s/it][Succeeded / Failed / Skipped / Total] 316 / 589 / 11 / 916:  92%|█████████▏| 917/1000 [4:23:40<23:51, 17.25s/it][Succeeded / Failed / Skipped / Total] 317 / 589 / 11 / 917:  92%|█████████▏| 917/1000 [4:23:40<23:51, 17.25s/it][Succeeded / Failed / Skipped / Total] 317 / 589 / 11 / 917:  92%|█████████▏| 918/1000 [4:23:48<23:33, 17.24s/it][Succeeded / Failed / Skipped / Total] 318 / 589 / 11 / 918:  92%|█████████▏| 918/1000 [4:23:48<23:33, 17.24s/it][Succeeded / Failed / Skipped / Total] 318 / 589 / 11 / 918:  92%|█████████▏| 919/1000 [4:23:48<23:15, 17.22s/it][Succeeded / Failed / Skipped / Total] 318 / 590 / 11 / 919:  92%|█████████▏| 919/1000 [4:23:48<23:15, 17.22s/it][Succeeded / Failed / Skipped / Total] 318 / 590 / 11 / 919:  92%|█████████▏| 920/1000 [4:23:48<22:56, 17.21s/it][Succeeded / Failed / Skipped / Total] 318 / 591 / 11 / 920:  92%|█████████▏| 920/1000 [4:23:48<22:56, 17.21s/it][Succeeded / Failed / Skipped / Total] 318 / 591 / 11 / 920:  92%|█████████▏| 921/1000 [4:24:05<22:39, 17.20s/it][Succeeded / Failed / Skipped / Total] 319 / 591 / 11 / 921:  92%|█████████▏| 921/1000 [4:24:05<22:39, 17.20s/it][Succeeded / Failed / Skipped / Total] 319 / 591 / 11 / 921:  92%|█████████▏| 922/1000 [4:24:17<22:21, 17.20s/it]Create the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 915 ---------------------------------------------
Creates a new proxy class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T setTarget ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 917 ---------------------------------------------
Sends an HTML message . --> Fortune a tatsunoko --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[fortune]] ( final String [[blogging]] , final String [[tatsunoko]] ) { return message ( new EmailMessage ( [[blogging]] , MimeTypes . MIME_TEXT_HTML , [[tatsunoko]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 918 ---------------------------------------------
Sends a plain text message . --> Hungry a tío --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[hungry]] ( final String [[phrasing]] , final String [[tío]] ) { return message ( new EmailMessage ( [[phrasing]] , MimeTypes . MIME_TEXT_PLAIN , [[tío]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 919 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 920 ---------------------------------------------
Add a to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 921 ---------------------------------------------
Returns the long value for the given name or the default value if the name is not found . --> Get the ir for a given acronym and woong --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String [[name]] , final int [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[ir]] ( final String [[acronym]] , final int [[woong]] ) { String [[extent]] = get ( [[acronym]] ) ; if ( [[extent]] == null ) { return [[woong]] ; } [[extent]] = [[extent]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[extent]] ) ; } catch ( NumberFormatException nfex ) { return [[woong]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 591 / 11 / 922:  92%|█████████▏| 922/1000 [4:24:17<22:21, 17.20s/it][Succeeded / Failed / Skipped / Total] 320 / 591 / 11 / 922:  92%|█████████▏| 923/1000 [4:24:51<22:05, 17.22s/it][Succeeded / Failed / Skipped / Total] 320 / 592 / 11 / 923:  92%|█████████▏| 923/1000 [4:24:51<22:05, 17.22s/it][Succeeded / Failed / Skipped / Total] 320 / 592 / 11 / 923:  92%|█████████▏| 924/1000 [4:25:24<21:49, 17.23s/it][Succeeded / Failed / Skipped / Total] 321 / 592 / 11 / 924:  92%|█████████▏| 924/1000 [4:25:24<21:49, 17.23s/it][Succeeded / Failed / Skipped / Total] 321 / 592 / 11 / 924:  92%|█████████▎| 925/1000 [4:25:38<21:32, 17.23s/it][Succeeded / Failed / Skipped / Total] 322 / 592 / 11 / 925:  92%|█████████▎| 925/1000 [4:25:38<21:32, 17.23s/it][Succeeded / Failed / Skipped / Total] 322 / 592 / 11 / 925:  93%|█████████▎| 926/1000 [4:25:42<21:14, 17.22s/it][Succeeded / Failed / Skipped / Total] 323 / 592 / 11 / 926:  93%|█████████▎| 926/1000 [4:25:42<21:14, 17.22s/it][Succeeded / Failed / Skipped / Total] 323 / 592 / 11 / 926:  93%|█████████▎| 927/1000 [4:25:56<20:56, 17.21s/it][Succeeded / Failed / Skipped / Total] 324 / 592 / 11 / 927:  93%|█████████▎| 927/1000 [4:25:56<20:56, 17.21s/it][Succeeded / Failed / Skipped / Total] 324 / 592 / 11 / 927:  93%|█████████▎| 928/1000 [4:26:08<20:38, 17.21s/it][Succeeded / Failed / Skipped / Total] 325 / 592 / 11 / 928:  93%|█████████▎| 928/1000 [4:26:08<20:38, 17.21s/it][Succeeded / Failed / Skipped / Total] 325 / 592 / 11 / 928:  93%|█████████▎| 929/1000 [4:26:10<20:20, 17.19s/it][Succeeded / Failed / Skipped / Total] 326 / 592 / 11 / 929:  93%|█████████▎| 929/1000 [4:26:10<20:20, 17.19s/it][Succeeded / Failed / Skipped / Total] 326 / 592 / 11 / 929:  93%|█████████▎| 930/1000 [4:26:41<20:04, 17.21s/it]Returns the value of the given name as a long . --> zhp - > showboating --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[zhp]] ( final String name , final long [[showboating]] ) { String value = get ( name ) ; if ( value == null ) { return [[showboating]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[showboating]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 923 ---------------------------------------------
Dump a class in the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 924 ---------------------------------------------
Adds a header to the request . --> Add a list of items to the response --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[items]] ( final String [[denominations]] , final String [[prized]] ) { headers . put ( [[denominations]] , [[prized]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Serialize a single key - value pair . --> Add jails to petrovic --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object [[key]] , final Object [[value]] , int [[count]] ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[count]] ; } if ( [[key]] != null ) { [[currentPath]] . push ( [[key]] . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[jails]] ( final JsonContext jsonContext , final Path [[petrovic]] , final Object [[necessities]] , final Object [[inestimable]] , int [[computation]] ) { if ( ( [[inestimable]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[computation]] ; } if ( [[necessities]] != null ) { [[petrovic]] . push ( [[necessities]] . toString ( ) ) ; } else { [[petrovic]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 926 ---------------------------------------------
Resolve a result path . --> If boulevards and merits are null then all merits are liquidated --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean [[absolutePath]] = "[[False]]" != "[[False]]" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[liquidated]] ( String [[boulevards]] , String [[merits]] ) { boolean [[wisecrack]] = "[[Mock]]" != "[[Mock]]" ; if ( [[merits]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 927 ---------------------------------------------
Resolve a result path string . --> zur zur zur zur trajectories assessing --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( [[path]] , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[zur]] ( final String [[trajectories]] , final String [[assessing]] ) { final ResultPath resultPath = resolveResultPath ( [[trajectories]] , [[assessing]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the index of the last slash dot in the string . --> get shiraishi brainwashing --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( [[dotNdx]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { [[dotNdx]] = slashNdx ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[shiraishi]] ( final String [[enchant]] ) { int slashNdx = [[enchant]] . lastIndexOf ( ' ' ) ; int [[brainwashing]] = StringUtil . lastIndexOf ( [[enchant]] , ' ' , [[enchant]] . length ( ) , slashNdx ) ; if ( [[brainwashing]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[enchant]] . length ( ) - 1 ) { [[brainwashing]] = slashNdx ; } else { [[brainwashing]] = - 1 ; } } return [[brainwashing]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the index of the last dot after a slash . --> swab a chlamydia --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[swab]] ( final String [[chlamydia]] ) { int [[cupboards]] = [[chlamydia]] . lastIndexOf ( ' ' ) ; [[cupboards]] ++ ; return StringUtil . lastIndexOf ( [[chlamydia]] , ' ' , [[chlamydia]] . length ( ) , [[cupboards]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 327 / 592 / 11 / 930:  93%|█████████▎| 930/1000 [4:26:41<20:04, 17.21s/it][Succeeded / Failed / Skipped / Total] 327 / 592 / 11 / 930:  93%|█████████▎| 931/1000 [4:26:43<19:46, 17.19s/it][Succeeded / Failed / Skipped / Total] 328 / 592 / 11 / 931:  93%|█████████▎| 931/1000 [4:26:43<19:46, 17.19s/it][Succeeded / Failed / Skipped / Total] 328 / 592 / 11 / 931:  93%|█████████▎| 932/1000 [4:26:56<19:28, 17.19s/it][Succeeded / Failed / Skipped / Total] 329 / 592 / 11 / 932:  93%|█████████▎| 932/1000 [4:26:56<19:28, 17.19s/it][Succeeded / Failed / Skipped / Total] 329 / 592 / 11 / 932:  93%|█████████▎| 933/1000 [4:27:09<19:11, 17.18s/it][Succeeded / Failed / Skipped / Total] 329 / 593 / 11 / 933:  93%|█████████▎| 933/1000 [4:27:09<19:11, 17.18s/it][Succeeded / Failed / Skipped / Total] 329 / 593 / 11 / 933:  93%|█████████▎| 934/1000 [4:27:30<18:54, 17.18s/it][Succeeded / Failed / Skipped / Total] 330 / 593 / 11 / 934:  93%|█████████▎| 934/1000 [4:27:30<18:54, 17.18s/it][Succeeded / Failed / Skipped / Total] 330 / 593 / 11 / 934:  94%|█████████▎| 935/1000 [4:27:32<18:35, 17.17s/it][Succeeded / Failed / Skipped / Total] 331 / 593 / 11 / 935:  94%|█████████▎| 935/1000 [4:27:32<18:35, 17.17s/it][Succeeded / Failed / Skipped / Total] 331 / 593 / 11 / 935:  94%|█████████▎| 936/1000 [4:28:20<18:20, 17.20s/it][Succeeded / Failed / Skipped / Total] 332 / 593 / 11 / 936:  94%|█████████▎| 936/1000 [4:28:20<18:20, 17.20s/it][Succeeded / Failed / Skipped / Total] 332 / 593 / 11 / 936:  94%|█████████▎| 937/1000 [4:28:52<18:04, 17.22s/it][Succeeded / Failed / Skipped / Total] 333 / 593 / 11 / 937:  94%|█████████▎| 937/1000 [4:28:52<18:04, 17.22s/it][Succeeded / Failed / Skipped / Total] 333 / 593 / 11 / 937:  94%|█████████▍| 938/1000 [4:29:02<17:46, 17.21s/it]Resolve an alias . --> Create a fruit from assessments --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder [[result]] = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[underline]] ( final String [[assessments]] ) { final StringBuilder [[fruit]] = new StringBuilder ( [[assessments]] . length ( ) ) ; int i = 0 ; int len = [[assessments]] . length ( ) ; while ( i < len ) { int ndx = [[assessments]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 931 ---------------------------------------------
Removes the last camel word from the name . --> Returns the stepbrother part of a name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[stepbrother]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 932 ---------------------------------------------
Get a system property . --> Earn a massimo by patronymic --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[earn]] ( final String [[patronymic]] , final String [[massimo]] ) { Objects . requireNonNull ( [[patronymic]] ) ; String [[deserving]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[deserving]] = System . getProperty ( [[patronymic]] ) ; } else { [[deserving]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[patronymic]] ) ) ; } } catch ( Exception ignore ) { } if ( [[deserving]] == null ) { return [[massimo]] ; } return [[deserving]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 933 ---------------------------------------------
Set the cc address . --> [[[FAILED]]]

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 934 ---------------------------------------------
Lookup a path alias . --> Returns the bobs for the given fraudulent --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( [[alias]] ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[bobs]] ( final String [[fraudulent]] ) { String value = actionsManager . lookupPathAlias ( [[fraudulent]] ) ; if ( value == null ) { ActionRuntime [[tortilla]] = actionsManager . lookup ( [[fraudulent]] ) ; if ( [[tortilla]] != null ) { value = [[tortilla]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 935 ---------------------------------------------
Resolves the schema name for the given type . --> Returns the coddle for the given modes and joanna --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[distinguish]] ( final Class < ? > [[modes]] , final String [[joanna]] ) { String [[coddle]] = null ; final DbTable dbTable = [[modes]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[coddle]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[coddle]] == null ) || ( [[coddle]] . length ( ) == 0 ) ) { [[coddle]] = [[joanna]] ; } return [[coddle]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 936 ---------------------------------------------
Do a demix . --> kita = b ^ y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y^y --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[logger]] ( final int [[b]] , final int [[pour]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[kita]] = r [ [[pour]] % DEPTH_OF_D_IN_R ] [ [[b]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 937 ---------------------------------------------
Schedule a key schedule . --> rema wantto ies --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int [[i]] = 0 ; [[i]] < nw ; [[i]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[rema]] ( final int [[ies]] ) { for ( int [[wantto]] = 0 ; [[wantto]] < nw ; [[wantto]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 938 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 334 / 593 / 11 / 938:  94%|█████████▍| 938/1000 [4:29:02<17:46, 17.21s/it][Succeeded / Failed / Skipped / Total] 334 / 593 / 11 / 938:  94%|█████████▍| 939/1000 [4:29:41<17:31, 17.23s/it][Succeeded / Failed / Skipped / Total] 335 / 593 / 11 / 939:  94%|█████████▍| 939/1000 [4:29:41<17:31, 17.23s/it][Succeeded / Failed / Skipped / Total] 335 / 593 / 11 / 939:  94%|█████████▍| 940/1000 [4:29:49<17:13, 17.22s/it][Succeeded / Failed / Skipped / Total] 335 / 594 / 11 / 940:  94%|█████████▍| 940/1000 [4:29:49<17:13, 17.22s/it][Succeeded / Failed / Skipped / Total] 335 / 594 / 11 / 940:  94%|█████████▍| 941/1000 [4:30:12<16:56, 17.23s/it][Succeeded / Failed / Skipped / Total] 336 / 594 / 11 / 941:  94%|█████████▍| 941/1000 [4:30:12<16:56, 17.23s/it][Succeeded / Failed / Skipped / Total] 336 / 594 / 11 / 941:  94%|█████████▍| 942/1000 [4:30:48<16:40, 17.25s/it][Succeeded / Failed / Skipped / Total] 336 / 595 / 11 / 942:  94%|█████████▍| 942/1000 [4:30:48<16:40, 17.25s/it][Succeeded / Failed / Skipped / Total] 336 / 595 / 11 / 942:  94%|█████████▍| 943/1000 [4:30:49<16:22, 17.23s/it][Succeeded / Failed / Skipped / Total] 336 / 596 / 11 / 943:  94%|█████████▍| 943/1000 [4:30:49<16:22, 17.23s/it][Succeeded / Failed / Skipped / Total] 336 / 596 / 11 / 943:  94%|█████████▍| 944/1000 [4:30:50<16:03, 17.21s/it][Succeeded / Failed / Skipped / Total] 336 / 597 / 11 / 944:  94%|█████████▍| 944/1000 [4:30:50<16:03, 17.21s/it][Succeeded / Failed / Skipped / Total] 336 / 597 / 11 / 944:  94%|█████████▍| 945/1000 [4:30:50<15:45, 17.20s/it]Initializes the key with the given key message and tweak . --> marti amin micks tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[marti]] ( final String [[amin]] , final long [[micks]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[micks]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[pois]] = StringUtil . getBytes ( [[amin]] ) ; System . arraycopy ( [[pois]] , 0 , key , 0 , key . length < [[pois]] . length ? key . length : [[pois]] . length ) ; [[marti]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 939 ---------------------------------------------
Encrypt a block of data . --> Performs the landscaper with the given feliz and reimburse --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] [[contentBlock]] = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[landscaper]] ( final byte [ ] [[feliz]] , final int [[reimburse]] ) { long [ ] [[mitch]] = bytesToLongs ( [[feliz]] , [[reimburse]] , blockSizeInBytes ) ; long [ ] [[viva]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[mitch]] , [[viva]] ) ; return longsToBytes ( [[viva]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 940 ---------------------------------------------
Get a boolean property . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 941 ---------------------------------------------
Convert a byte array to a long array . --> Find the horn from the baccalaureate --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int [[offset]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[findhorn]] ( final byte [ ] [[baccalaureate]] , final int [[counterbalance]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[counterbalance]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[baccalaureate]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 942 ---------------------------------------------
Replaces all email addresses with the given email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 943 ---------------------------------------------
Zlib a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 944 ---------------------------------------------
Gzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 945 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 336 / 598 / 11 / 945:  94%|█████████▍| 945/1000 [4:30:50<15:45, 17.20s/it][Succeeded / Failed / Skipped / Total] 336 / 598 / 11 / 945:  95%|█████████▍| 946/1000 [4:30:51<15:27, 17.18s/it][Succeeded / Failed / Skipped / Total] 336 / 599 / 11 / 946:  95%|█████████▍| 946/1000 [4:30:51<15:27, 17.18s/it][Succeeded / Failed / Skipped / Total] 336 / 599 / 11 / 946:  95%|█████████▍| 947/1000 [4:30:52<15:09, 17.16s/it][Succeeded / Failed / Skipped / Total] 336 / 600 / 11 / 947:  95%|█████████▍| 947/1000 [4:30:52<15:09, 17.16s/it][Succeeded / Failed / Skipped / Total] 336 / 600 / 11 / 947:  95%|█████████▍| 948/1000 [4:30:53<14:51, 17.14s/it][Succeeded / Failed / Skipped / Total] 336 / 601 / 11 / 948:  95%|█████████▍| 948/1000 [4:30:53<14:51, 17.14s/it][Succeeded / Failed / Skipped / Total] 336 / 601 / 11 / 948:  95%|█████████▍| 949/1000 [4:30:54<14:33, 17.13s/it][Succeeded / Failed / Skipped / Total] 336 / 602 / 11 / 949:  95%|█████████▍| 949/1000 [4:30:54<14:33, 17.13s/it][Succeeded / Failed / Skipped / Total] 336 / 602 / 11 / 949:  95%|█████████▌| 950/1000 [4:30:55<14:15, 17.11s/it][Succeeded / Failed / Skipped / Total] 336 / 603 / 11 / 950:  95%|█████████▌| 950/1000 [4:30:55<14:15, 17.11s/it][Succeeded / Failed / Skipped / Total] 336 / 603 / 11 / 950:  95%|█████████▌| 951/1000 [4:30:56<13:57, 17.09s/it][Succeeded / Failed / Skipped / Total] 336 / 604 / 11 / 951:  95%|█████████▌| 951/1000 [4:30:56<13:57, 17.09s/it][Succeeded / Failed / Skipped / Total] 336 / 604 / 11 / 951:  95%|█████████▌| 952/1000 [4:30:57<13:39, 17.08s/it]Ungzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 946 ---------------------------------------------
Returns a list of all entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 947 ---------------------------------------------
Unzips the given zip file to the given destination directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 948 ---------------------------------------------
Adds a file to a zip output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 949 ---------------------------------------------
Adds a file to a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 950 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String name , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String name , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 951 ---------------------------------------------
Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 952 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 336 / 605 / 11 / 952:  95%|█████████▌| 952/1000 [4:30:57<13:39, 17.08s/it][Succeeded / Failed / Skipped / Total] 336 / 605 / 11 / 952:  95%|█████████▌| 953/1000 [4:30:57<13:21, 17.06s/it][Succeeded / Failed / Skipped / Total] 336 / 606 / 11 / 953:  95%|█████████▌| 953/1000 [4:30:57<13:21, 17.06s/it][Succeeded / Failed / Skipped / Total] 336 / 606 / 11 / 953:  95%|█████████▌| 954/1000 [4:30:58<13:03, 17.04s/it][Succeeded / Failed / Skipped / Total] 336 / 607 / 11 / 954:  95%|█████████▌| 954/1000 [4:30:58<13:03, 17.04s/it][Succeeded / Failed / Skipped / Total] 336 / 607 / 11 / 954:  96%|█████████▌| 955/1000 [4:30:59<12:46, 17.03s/it][Succeeded / Failed / Skipped / Total] 336 / 608 / 11 / 955:  96%|█████████▌| 955/1000 [4:30:59<12:46, 17.03s/it][Succeeded / Failed / Skipped / Total] 336 / 608 / 11 / 955:  96%|█████████▌| 956/1000 [4:31:29<12:29, 17.04s/it][Succeeded / Failed / Skipped / Total] 336 / 609 / 11 / 956:  96%|█████████▌| 956/1000 [4:31:29<12:29, 17.04s/it][Succeeded / Failed / Skipped / Total] 336 / 609 / 11 / 956:  96%|█████████▌| 957/1000 [4:31:32<12:12, 17.03s/it][Succeeded / Failed / Skipped / Total] 337 / 609 / 11 / 957:  96%|█████████▌| 957/1000 [4:31:32<12:12, 17.03s/it][Succeeded / Failed / Skipped / Total] 337 / 609 / 11 / 957:  96%|█████████▌| 958/1000 [4:31:37<11:54, 17.01s/it][Succeeded / Failed / Skipped / Total] 338 / 609 / 11 / 958:  96%|█████████▌| 958/1000 [4:31:37<11:54, 17.01s/it][Succeeded / Failed / Skipped / Total] 338 / 609 / 11 / 958:  96%|█████████▌| 959/1000 [4:32:04<11:37, 17.02s/it][Succeeded / Failed / Skipped / Total] 338 / 610 / 11 / 959:  96%|█████████▌| 959/1000 [4:32:04<11:37, 17.02s/it][Succeeded / Failed / Skipped / Total] 338 / 610 / 11 / 959:  96%|█████████▌| 960/1000 [4:33:01<11:22, 17.06s/it][Succeeded / Failed / Skipped / Total] 338 / 611 / 11 / 960:  96%|█████████▌| 960/1000 [4:33:01<11:22, 17.06s/it][Succeeded / Failed / Skipped / Total] 338 / 611 / 11 / 960:  96%|█████████▌| 961/1000 [4:33:51<11:06, 17.10s/it]Sets the bundle name for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 953 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 954 ---------------------------------------------
Gets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 955 ---------------------------------------------
Filter the parameters for the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 956 ---------------------------------------------
Get the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] getResolvedParameters ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] getResolvedParameters ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 957 ---------------------------------------------
Reads a long from the given byte array starting at the given offset . --> Returns the clearwater for the given funeral and compensatory --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[clearwater]] ( final byte [ ] [[funeral]] , final int [[compensatory]] ) { return ( ( long ) [[funeral]] [ [[compensatory]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 958 ---------------------------------------------
Removes any bound characters from a string . --> Akashi avec e sti --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( [[s]] ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[akashi]] ( final char [[avec]] , final char e , final String [[sti]] ) { if ( [[sti]] == null || [[sti]] . length ( ) < 2 ) { return [[sti]] ; } if ( [[sti]] . startsWith ( String . valueOf ( [[avec]] ) ) && [[sti]] . endsWith ( String . valueOf ( e ) ) ) { return [[sti]] . substring ( 1 , [[sti]] . length ( ) - 1 ) ; } return [[sti]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 959 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 960 ---------------------------------------------
Mix the x and y values . --> [[[FAILED]]]

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 612 / 11 / 961:  96%|█████████▌| 961/1000 [4:33:51<11:06, 17.10s/it][Succeeded / Failed / Skipped / Total] 338 / 612 / 11 / 961:  96%|█████████▌| 962/1000 [4:34:02<10:49, 17.09s/it][Succeeded / Failed / Skipped / Total] 339 / 612 / 11 / 962:  96%|█████████▌| 962/1000 [4:34:02<10:49, 17.09s/it][Succeeded / Failed / Skipped / Total] 339 / 612 / 11 / 962:  96%|█████████▋| 963/1000 [4:34:22<10:32, 17.10s/it][Succeeded / Failed / Skipped / Total] 339 / 613 / 11 / 963:  96%|█████████▋| 963/1000 [4:34:22<10:32, 17.10s/it][Succeeded / Failed / Skipped / Total] 339 / 613 / 11 / 963:  96%|█████████▋| 964/1000 [4:34:37<10:15, 17.09s/it][Succeeded / Failed / Skipped / Total] 339 / 614 / 11 / 964:  96%|█████████▋| 964/1000 [4:34:37<10:15, 17.09s/it][Succeeded / Failed / Skipped / Total] 339 / 614 / 11 / 964:  96%|█████████▋| 965/1000 [4:36:33<10:01, 17.20s/it][Succeeded / Failed / Skipped / Total] 339 / 615 / 11 / 965:  96%|█████████▋| 965/1000 [4:36:33<10:01, 17.20s/it][Succeeded / Failed / Skipped / Total] 339 / 615 / 11 / 965:  97%|█████████▋| 966/1000 [4:36:47<09:44, 17.19s/it][Succeeded / Failed / Skipped / Total] 339 / 616 / 11 / 966:  97%|█████████▋| 966/1000 [4:36:47<09:44, 17.19s/it][Succeeded / Failed / Skipped / Total] 339 / 616 / 11 / 966:  97%|█████████▋| 967/1000 [4:36:48<09:26, 17.17s/it][Succeeded / Failed / Skipped / Total] 339 / 617 / 11 / 967:  97%|█████████▋| 967/1000 [4:36:48<09:26, 17.17s/it][Succeeded / Failed / Skipped / Total] 339 / 617 / 11 / 967:  97%|█████████▋| 968/1000 [4:36:48<09:09, 17.16s/it][Succeeded / Failed / Skipped / Total] 339 / 618 / 11 / 968:  97%|█████████▋| 968/1000 [4:36:48<09:09, 17.16s/it][Succeeded / Failed / Skipped / Total] 339 / 618 / 11 / 968:  97%|█████████▋| 969/1000 [4:36:58<08:51, 17.15s/it][Succeeded / Failed / Skipped / Total] 340 / 618 / 11 / 969:  97%|█████████▋| 969/1000 [4:36:58<08:51, 17.15s/it][Succeeded / Failed / Skipped / Total] 340 / 618 / 11 / 969:  97%|█████████▋| 970/1000 [4:36:59<08:34, 17.13s/it]Initializes the hash table with the given key and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 962 ---------------------------------------------
Read the values of an element . --> Czechoslovak czechoslovak --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean named , final char [ ] [[charBuffer]] ) { int [[currentOffset]] = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[issa]] ( final AnnotationVisitor annotationVisitor , final int [[robe]] , final boolean named , final char [ ] [[styles]] ) { int [[czechoslovak]] = [[robe]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 963 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 964 ---------------------------------------------
Returns the path of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return path ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return path ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a byte array from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Adds a profile to the list of profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries profile ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String profile : profiles ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String profile : profiles ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 967 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 968 ---------------------------------------------
Convert an array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 969 ---------------------------------------------
Initialize the servlet . --> Add a telex to the shoots --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[telex]] ( final FilterConfig [[shoots]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 970 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 341 / 618 / 11 / 970:  97%|█████████▋| 970/1000 [4:36:59<08:34, 17.13s/it][Succeeded / Failed / Skipped / Total] 341 / 618 / 11 / 970:  97%|█████████▋| 971/1000 [4:36:59<08:16, 17.12s/it][Succeeded / Failed / Skipped / Total] 341 / 619 / 11 / 971:  97%|█████████▋| 971/1000 [4:36:59<08:16, 17.12s/it][Succeeded / Failed / Skipped / Total] 341 / 619 / 11 / 971:  97%|█████████▋| 972/1000 [4:37:00<07:58, 17.10s/it][Succeeded / Failed / Skipped / Total] 341 / 620 / 11 / 972:  97%|█████████▋| 972/1000 [4:37:00<07:58, 17.10s/it][Succeeded / Failed / Skipped / Total] 341 / 620 / 11 / 972:  97%|█████████▋| 973/1000 [4:37:00<07:41, 17.08s/it][Succeeded / Failed / Skipped / Total] 341 / 621 / 11 / 973:  97%|█████████▋| 973/1000 [4:37:00<07:41, 17.08s/it][Succeeded / Failed / Skipped / Total] 341 / 621 / 11 / 973:  97%|█████████▋| 974/1000 [4:37:01<07:23, 17.06s/it][Succeeded / Failed / Skipped / Total] 341 / 622 / 11 / 974:  97%|█████████▋| 974/1000 [4:37:01<07:23, 17.06s/it][Succeeded / Failed / Skipped / Total] 341 / 622 / 11 / 974:  98%|█████████▊| 975/1000 [4:37:33<07:07, 17.08s/it][Succeeded / Failed / Skipped / Total] 341 / 623 / 11 / 975:  98%|█████████▊| 975/1000 [4:37:33<07:07, 17.08s/it][Succeeded / Failed / Skipped / Total] 341 / 623 / 11 / 975:  98%|█████████▊| 976/1000 [4:39:20<06:52, 17.17s/it][Succeeded / Failed / Skipped / Total] 341 / 624 / 11 / 976:  98%|█████████▊| 976/1000 [4:39:20<06:52, 17.17s/it][Succeeded / Failed / Skipped / Total] 341 / 624 / 11 / 976:  98%|█████████▊| 977/1000 [4:39:52<06:35, 17.19s/it][Succeeded / Failed / Skipped / Total] 341 / 625 / 11 / 977:  98%|█████████▊| 977/1000 [4:39:52<06:35, 17.19s/it][Succeeded / Failed / Skipped / Total] 341 / 625 / 11 / 977:  98%|█████████▊| 978/1000 [4:40:13<06:18, 17.19s/it]Adds a file consumer to the list of consumers . --> Adds an imprudent to the list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[imprudent]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[imprudent]] ) ; } else { consumers . add ( [[imprudent]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 971 ---------------------------------------------
Add a file to the search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File file ; try { file = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File file ; try { file = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 972 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 973 ---------------------------------------------
Adds a pattern to the list of patterns to be included . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 974 ---------------------------------------------
Exclude one or more patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 975 ---------------------------------------------
Read a label from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 976 ---------------------------------------------
Reads the verification type information . --> [[[FAILED]]]

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 977 ---------------------------------------------
Returns a CtorDescriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
[Succeeded / Failed / Skipped / Total] 341 / 626 / 11 / 978:  98%|█████████▊| 978/1000 [4:40:13<06:18, 17.19s/it][Succeeded / Failed / Skipped / Total] 341 / 626 / 11 / 978:  98%|█████████▊| 979/1000 [4:40:46<06:01, 17.21s/it][Succeeded / Failed / Skipped / Total] 341 / 627 / 11 / 979:  98%|█████████▊| 979/1000 [4:40:46<06:01, 17.21s/it][Succeeded / Failed / Skipped / Total] 341 / 627 / 11 / 979:  98%|█████████▊| 980/1000 [4:41:01<05:44, 17.21s/it][Succeeded / Failed / Skipped / Total] 341 / 628 / 11 / 980:  98%|█████████▊| 980/1000 [4:41:01<05:44, 17.21s/it][Succeeded / Failed / Skipped / Total] 341 / 628 / 11 / 980:  98%|█████████▊| 981/1000 [4:41:15<05:26, 17.20s/it][Succeeded / Failed / Skipped / Total] 342 / 628 / 11 / 981:  98%|█████████▊| 981/1000 [4:41:15<05:26, 17.20s/it][Succeeded / Failed / Skipped / Total] 342 / 628 / 11 / 981:  98%|█████████▊| 982/1000 [4:41:45<05:09, 17.22s/it][Succeeded / Failed / Skipped / Total] 343 / 628 / 11 / 982:  98%|█████████▊| 982/1000 [4:41:45<05:09, 17.22s/it][Succeeded / Failed / Skipped / Total] 343 / 628 / 11 / 982:  98%|█████████▊| 983/1000 [4:42:15<04:52, 17.23s/it]--------------------------------------------- Result 978 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 979 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 980 ---------------------------------------------
Inspect constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 981 ---------------------------------------------
Initialize the todo files and folders . --> Detects the mode of muskets --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[index]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[muskets]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[reference]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[reference]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[reference]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 982 ---------------------------------------------
Get the output stream . --> Hahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[hahahaha]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 344 / 628 / 11 / 983:  98%|█████████▊| 983/1000 [4:42:15<04:52, 17.23s/it][Succeeded / Failed / Skipped / Total] 344 / 628 / 11 / 983:  98%|█████████▊| 984/1000 [4:43:01<04:36, 17.26s/it][Succeeded / Failed / Skipped / Total] 344 / 629 / 11 / 984:  98%|█████████▊| 984/1000 [4:43:01<04:36, 17.26s/it][Succeeded / Failed / Skipped / Total] 344 / 629 / 11 / 984:  98%|█████████▊| 985/1000 [4:43:22<04:18, 17.26s/it][Succeeded / Failed / Skipped / Total] 344 / 630 / 11 / 985:  98%|█████████▊| 985/1000 [4:43:22<04:18, 17.26s/it][Succeeded / Failed / Skipped / Total] 344 / 630 / 11 / 985:  99%|█████████▊| 986/1000 [4:44:34<04:02, 17.32s/it][Succeeded / Failed / Skipped / Total] 344 / 631 / 11 / 986:  99%|█████████▊| 986/1000 [4:44:34<04:02, 17.32s/it][Succeeded / Failed / Skipped / Total] 344 / 631 / 11 / 986:  99%|█████████▊| 987/1000 [4:45:00<03:45, 17.33s/it][Succeeded / Failed / Skipped / Total] 344 / 632 / 11 / 987:  99%|█████████▊| 987/1000 [4:45:00<03:45, 17.33s/it][Succeeded / Failed / Skipped / Total] 344 / 632 / 11 / 987:  99%|█████████▉| 988/1000 [4:45:46<03:28, 17.36s/it][Succeeded / Failed / Skipped / Total] 344 / 633 / 11 / 988:  99%|█████████▉| 988/1000 [4:45:46<03:28, 17.36s/it][Succeeded / Failed / Skipped / Total] 344 / 633 / 11 / 988:  99%|█████████▉| 989/1000 [4:46:01<03:10, 17.35s/it][Succeeded / Failed / Skipped / Total] 345 / 633 / 11 / 989:  99%|█████████▉| 989/1000 [4:46:01<03:10, 17.35s/it][Succeeded / Failed / Skipped / Total] 345 / 633 / 11 / 989:  99%|█████████▉| 990/1000 [4:46:21<02:53, 17.35s/it]Resolve bean name . --> Method to get bulbous --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[bulbous]] ( final Class type , final boolean [[huit]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[appointed]] = null ; if ( petiteBean != null ) { [[appointed]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[appointed]] == null ) || ( [[appointed]] . length ( ) == 0 ) ) { if ( [[huit]] ) { [[appointed]] = type . getName ( ) ; } else { [[appointed]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[appointed]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 984 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 985 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 986 ---------------------------------------------
Adds a path to the list of paths . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 987 ---------------------------------------------
Returns a list of all files in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 988 ---------------------------------------------
Resolve bean wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Get the output stream . --> Fujiyama fujiyama --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[fujiyama]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 345 / 634 / 11 / 990:  99%|█████████▉| 990/1000 [4:46:21<02:53, 17.35s/it][Succeeded / Failed / Skipped / Total] 345 / 634 / 11 / 990:  99%|█████████▉| 991/1000 [4:47:51<02:36, 17.43s/it][Succeeded / Failed / Skipped / Total] 346 / 634 / 11 / 991:  99%|█████████▉| 991/1000 [4:47:51<02:36, 17.43s/it][Succeeded / Failed / Skipped / Total] 346 / 634 / 11 / 991:  99%|█████████▉| 992/1000 [4:48:34<02:19, 17.45s/it][Succeeded / Failed / Skipped / Total] 347 / 634 / 11 / 992:  99%|█████████▉| 992/1000 [4:48:34<02:19, 17.45s/it][Succeeded / Failed / Skipped / Total] 347 / 634 / 11 / 992:  99%|█████████▉| 993/1000 [4:49:01<02:02, 17.46s/it][Succeeded / Failed / Skipped / Total] 347 / 635 / 11 / 993:  99%|█████████▉| 993/1000 [4:49:01<02:02, 17.46s/it][Succeeded / Failed / Skipped / Total] 347 / 635 / 11 / 993:  99%|█████████▉| 994/1000 [4:49:31<01:44, 17.48s/it][Succeeded / Failed / Skipped / Total] 347 / 636 / 11 / 994:  99%|█████████▉| 994/1000 [4:49:31<01:44, 17.48s/it][Succeeded / Failed / Skipped / Total] 347 / 636 / 11 / 994: 100%|█████████▉| 995/1000 [4:50:28<01:27, 17.52s/it][Succeeded / Failed / Skipped / Total] 347 / 637 / 11 / 995: 100%|█████████▉| 995/1000 [4:50:28<01:27, 17.52s/it][Succeeded / Failed / Skipped / Total] 347 / 637 / 11 / 995: 100%|█████████▉| 996/1000 [4:50:37<01:10, 17.51s/it]Returns the class name of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the number of arguments and return sizes for the given method descriptor . --> ywca montgomery --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[ywca]] ( final String [[montgomery]] ) { int [[nitric]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 992 ---------------------------------------------
Mark this transaction as rollback only . --> Hikaru hikaru --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[hikaru]] ( final Throwable [[duran]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[duran]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 993 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 995 ---------------------------------------------
Appends the descriptor to the string builder . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 996 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 638 / 11 / 996: 100%|█████████▉| 996/1000 [4:50:37<01:10, 17.51s/it][Succeeded / Failed / Skipped / Total] 347 / 638 / 11 / 996: 100%|█████████▉| 997/1000 [4:51:38<00:52, 17.55s/it][Succeeded / Failed / Skipped / Total] 347 / 639 / 11 / 997: 100%|█████████▉| 997/1000 [4:51:38<00:52, 17.55s/it][Succeeded / Failed / Skipped / Total] 347 / 639 / 11 / 997: 100%|█████████▉| 998/1000 [4:52:19<00:35, 17.57s/it][Succeeded / Failed / Skipped / Total] 347 / 640 / 11 / 998: 100%|█████████▉| 998/1000 [4:52:19<00:35, 17.57s/it][Succeeded / Failed / Skipped / Total] 347 / 640 / 11 / 998: 100%|█████████▉| 999/1000 [4:53:42<00:17, 17.64s/it][Succeeded / Failed / Skipped / Total] 347 / 641 / 11 / 999: 100%|█████████▉| 999/1000 [4:53:42<00:17, 17.64s/it][Succeeded / Failed / Skipped / Total] 347 / 641 / 11 / 999: 100%|██████████| 1000/1000 [4:58:58<00:00, 17.94s/it]Commit or rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 997 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 998 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 642 / 11 / 1000: 100%|██████████| 1000/1000 [4:58:58<00:00, 17.94s/it]Attack(
  (search_method): HardLabelSearch(
    (pop_size):  20
    (max_iters):  60
    (max_replacements_per_index):  25
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 347 / 642 / 11 / 1000: 100%|██████████| 1000/1000 [4:59:02<00:00, 17.94s/it]Returns the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int getSize ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int getSize ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 347    |
| Number of failed attacks:     | 642    |
| Number of skipped attacks:    | 11     |
| Original accuracy:            | 98.9%  |
| Accuracy under attack:        | 64.2%  |
| Attack success rate:          | 35.09% |
| Average perturbed word %:     | 72.65% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 840.81 |
| Original BLEU-4:              | 19.14  |
| Perturbed BLEU-4:             | 12.3   |
+-------------------------------+--------+


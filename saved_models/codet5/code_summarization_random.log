textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1262.58it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1603.33it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1788.87it/s][Succeeded / Failed / Skipped / Total] 1 / 3 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1950.16it/s][Succeeded / Failed / Skipped / Total] 1 / 4 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2039.44it/s][Succeeded / Failed / Skipped / Total] 1 / 5 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2102.41it/s]--------------------------------------------- Result 1 ---------------------------------------------
Perform a fast path ordered emit . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[nunchaku]] ( U value , boolean [[prometheus]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[prometheus]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wraps an ObservableSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[clipboard]] ( ObservableSource < T > [[trajectories]] ) { ObjectHelper . requireNonNull ( [[trajectories]] , "source is null" ) ; if ( [[trajectories]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[trajectories]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[trajectories]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an observable that is sorted by the specified comparator . --> Anesthesiology anesthesiology --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[anesthesiology]] ( Comparator < ? super T > [[tracksuit]] ) { ObjectHelper . requireNonNull ( [[tracksuit]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[tracksuit]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[bows]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a ReplayableObservable that can be used to replay a ConnectableObservable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[observable]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[jeremiah]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[barfing]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[barfing]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new unicast processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[flamin]] ( int capacityHint , Runnable [[meenie]] ) { ObjectHelper . requireNonNull ( [[meenie]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[meenie]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 6 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1885.44it/s][Succeeded / Failed / Skipped / Total] 1 / 7 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1942.48it/s][Succeeded / Failed / Skipped / Total] 1 / 8 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2009.30it/s][Succeeded / Failed / Skipped / Total] 1 / 9 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2055.63it/s][Succeeded / Failed / Skipped / Total] 1 / 10 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2102.41it/s]Try scalar x map subscribe . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[empowering]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 8 ---------------------------------------------
Reset all handlers to their default values . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[aloud]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[["Alisha" != "Alisha"]]" != "[["Alisha" != "Alisha"]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[amphitheatre]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Flowable that maps a single value to a single value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[bounded]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[driving]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[bounded]] , [[driving]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Maybe from a SingleSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[newport]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 10 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 1976.66it/s][Succeeded / Failed / Skipped / Total] 2 / 11 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2022.78it/s][Succeeded / Failed / Skipped / Total] 2 / 12 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2056.18it/s][Succeeded / Failed / Skipped / Total] 2 / 13 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2096.03it/s][Succeeded / Failed / Skipped / Total] 2 / 14 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2125.45it/s][Succeeded / Failed / Skipped / Total] 2 / 15 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2160.24it/s][Succeeded / Failed / Skipped / Total] 2 / 16 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2182.95it/s][Succeeded / Failed / Skipped / Total] 2 / 17 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2205.39it/s][Succeeded / Failed / Skipped / Total] 2 / 17 / 0 / 19:   2%|▏         | 20/1000 [00:02<01:43,  9.45it/s]  [Succeeded / Failed / Skipped / Total] 2 / 18 / 0 / 20:   2%|▏         | 20/1000 [00:02<01:43,  9.45it/s][Succeeded / Failed / Skipped / Total] 2 / 19 / 0 / 21:   2%|▏         | 21/1000 [00:02<02:08,  7.63it/s][Succeeded / Failed / Skipped / Total] 2 / 20 / 0 / 22:   2%|▏         | 22/1000 [00:07<05:15,  3.10it/s]Retry a Maybe by a given number of times . --> Kanagawa a Maybe --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[kanagawa]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[jaden]] > [[jaden]] requireNonNull ( [[jaden]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Creates a callable that returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[kazimierz]] ( T [[camembert]] ) { return new JustValue < Object , T > ( [[camembert]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[sparrowhawk]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[beryl]] , U > Function < [[beryl]] , U > [[dulcimer]] ( U [[jennie]] ) { return new JustValue < [[beryl]] , U > ( [[jennie]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[appetizers]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a function that casts a value to a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[escondido]] , U > Function < [[escondido]] , U > [[maha]] ( Class < U > target ) { return new CastToClass < [[escondido]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new unicast subject with the given capacity hint . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[aperture]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[["Grazie" == "Grazie"]]" == "[["Grazie" == "Grazie"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Wait for the thread to get an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[zuzana]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[tracksuit]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[tracksuit]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 23/1000 [00:15<11:09,  1.46it/s][Succeeded / Failed / Skipped / Total] 2 / 22 / 0 / 24:   2%|▏         | 24/1000 [00:19<13:20,  1.22it/s][Succeeded / Failed / Skipped / Total] 2 / 22 / 0 / 24:   2%|▏         | 24/1000 [00:20<13:33,  1.20it/s][Succeeded / Failed / Skipped / Total] 2 / 22 / 0 / 24:   2%|▎         | 25/1000 [00:29<19:05,  1.18s/it][Succeeded / Failed / Skipped / Total] 2 / 23 / 0 / 25:   2%|▎         | 25/1000 [00:29<19:05,  1.18s/it][Succeeded / Failed / Skipped / Total] 2 / 23 / 0 / 25:   3%|▎         | 26/1000 [00:35<22:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 2 / 24 / 0 / 26:   3%|▎         | 26/1000 [00:35<22:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 2 / 24 / 0 / 26:   3%|▎         | 27/1000 [00:36<22:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 2 / 25 / 0 / 27:   3%|▎         | 27/1000 [00:36<22:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 2 / 25 / 0 / 27:   3%|▎         | 28/1000 [00:38<22:08,  1.37s/it][Succeeded / Failed / Skipped / Total] 2 / 26 / 0 / 28:   3%|▎         | 28/1000 [00:38<22:08,  1.37s/it][Succeeded / Failed / Skipped / Total] 2 / 26 / 0 / 28:   3%|▎         | 29/1000 [00:42<23:32,  1.46s/it][Succeeded / Failed / Skipped / Total] 2 / 27 / 0 / 29:   3%|▎         | 29/1000 [00:42<23:32,  1.46s/it][Succeeded / Failed / Skipped / Total] 2 / 27 / 0 / 29:   3%|▎         | 30/1000 [00:43<23:22,  1.45s/it]Returns the error or null if there is no error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[eliza]] ( long timeout , TimeUnit [[shreveport]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[shreveport]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[shreveport]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Requests the specified number of times for the given subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[bogotá]] ( Subscription s , int [[boules]] ) { s . request ( [[boules]] < 0 ? Long . MAX_VALUE : [[boules]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Await for this thread to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[ara]] ( long [[carrera]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[carrera]] , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Completes the operation . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R [[n]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[beaulieu]] ( R [[marino]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[marino]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[marino]] ) ; downstream . onComplete ( ) ; return ; } value = [[marino]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 27 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[semesters]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Post a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[queue]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[embezzle]] ( Subscriber < ? super T > actual , Queue < T > [[corney]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[corney]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[corney]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 29 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[zooey]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 28 / 0 / 30:   3%|▎         | 30/1000 [00:43<23:22,  1.45s/it][Succeeded / Failed / Skipped / Total] 2 / 28 / 0 / 30:   3%|▎         | 31/1000 [01:05<34:13,  2.12s/it][Succeeded / Failed / Skipped / Total] 2 / 29 / 0 / 31:   3%|▎         | 31/1000 [01:05<34:13,  2.12s/it][Succeeded / Failed / Skipped / Total] 2 / 29 / 0 / 31:   3%|▎         | 32/1000 [01:06<33:31,  2.08s/it][Succeeded / Failed / Skipped / Total] 2 / 30 / 0 / 32:   3%|▎         | 32/1000 [01:06<33:32,  2.08s/it][Succeeded / Failed / Skipped / Total] 2 / 30 / 0 / 32:   3%|▎         | 33/1000 [01:09<33:48,  2.10s/it][Succeeded / Failed / Skipped / Total] 2 / 31 / 0 / 33:   3%|▎         | 33/1000 [01:09<33:48,  2.10s/it][Succeeded / Failed / Skipped / Total] 3 / 31 / 0 / 34:   3%|▎         | 34/1000 [01:09<32:47,  2.04s/it][Succeeded / Failed / Skipped / Total] 3 / 31 / 0 / 34:   4%|▎         | 35/1000 [01:19<36:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 3 / 32 / 0 / 35:   4%|▎         | 35/1000 [01:19<36:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 3 / 32 / 0 / 35:   4%|▎         | 36/1000 [01:20<36:03,  2.24s/it]Drains the maximum loop . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T [[v]] = q . poll ( ) ; boolean empty = [[v]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , [[v]] ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[camembert]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T [[colleague]] = q . poll ( ) ; boolean empty = [[colleague]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , [[colleague]] ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Validates a subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[annoyances]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[annoyances]] != null ) { next . cancel ( ) ; if ( [[annoyances]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Sets the next subscription to the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[zigi]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[gunpowder]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[gunpowder]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 33 ---------------------------------------------
Sets the given AtomicReference to the given next Disposable . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[bridgeport]] ( AtomicReference < Disposable > [[languages]] , Disposable next , Class < ? > [[stemmed]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[languages]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[languages]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[stemmed]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 34 ---------------------------------------------
Add a and b to the cap . --> Add a cap to a directorate --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[directorate]] , long b ) { long u = [[directorate]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 35 ---------------------------------------------
Multiply a by b . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[herod]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 33 / 0 / 36:   4%|▎         | 36/1000 [01:20<36:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 3 / 33 / 0 / 36:   4%|▎         | 37/1000 [01:29<38:49,  2.42s/it][Succeeded / Failed / Skipped / Total] 3 / 34 / 0 / 37:   4%|▎         | 37/1000 [01:29<38:49,  2.42s/it][Succeeded / Failed / Skipped / Total] 3 / 34 / 0 / 37:   4%|▍         | 38/1000 [01:29<37:56,  2.37s/it][Succeeded / Failed / Skipped / Total] 3 / 35 / 0 / 38:   4%|▍         | 38/1000 [01:29<37:56,  2.37s/it][Succeeded / Failed / Skipped / Total] 3 / 35 / 0 / 38:   4%|▍         | 39/1000 [01:31<37:27,  2.34s/it][Succeeded / Failed / Skipped / Total] 3 / 36 / 0 / 39:   4%|▍         | 39/1000 [01:31<37:27,  2.34s/it][Succeeded / Failed / Skipped / Total] 3 / 36 / 0 / 39:   4%|▍         | 40/1000 [01:38<39:24,  2.46s/it][Succeeded / Failed / Skipped / Total] 3 / 37 / 0 / 40:   4%|▍         | 40/1000 [01:38<39:24,  2.46s/it][Succeeded / Failed / Skipped / Total] 3 / 37 / 0 / 40:   4%|▍         | 41/1000 [01:42<40:00,  2.50s/it][Succeeded / Failed / Skipped / Total] 3 / 38 / 0 / 41:   4%|▍         | 41/1000 [01:42<40:00,  2.50s/it][Succeeded / Failed / Skipped / Total] 3 / 38 / 0 / 41:   4%|▍         | 42/1000 [01:43<39:25,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 39 / 0 / 42:   4%|▍         | 42/1000 [01:43<39:25,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 39 / 0 / 42:   4%|▍         | 43/1000 [01:46<39:27,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 40 / 0 / 43:   4%|▍         | 43/1000 [01:46<39:27,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 40 / 0 / 43:   4%|▍         | 44/1000 [01:52<40:36,  2.55s/it][Succeeded / Failed / Skipped / Total] 3 / 41 / 0 / 44:   4%|▍         | 44/1000 [01:52<40:36,  2.55s/it][Succeeded / Failed / Skipped / Total] 3 / 41 / 0 / 44:   4%|▍         | 45/1000 [01:53<39:59,  2.51s/it]Convert an exception to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ex]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[ludmila]] ( Throwable [[espera]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[espera]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 37 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[successes]] ( ) { ScheduledExecutorService [[fairies]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[fairies]] != null ) { [[fairies]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 38 ---------------------------------------------
Adds an object to the list of objects . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[curran]] ( Object [[externally]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 39 ---------------------------------------------
Adds n to the requested AtomicLong . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long [[n]] ) { for ( ; ; ) { long [[r]] = [[requested]] . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( [[r]] , [[n]] ) ; if ( [[requested]] . compareAndSet ( [[r]] , [[u]] ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[acrophobia]] ( AtomicLong [[hazen]] , long [[cairo]] ) { for ( ; ; ) { long [[amelie]] = [[hazen]] . get ( ) ; if ( [[amelie]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[instruments]] = addCap ( [[amelie]] , [[cairo]] ) ; if ( [[hazen]] . compareAndSet ( [[amelie]] , [[instruments]] ) ) { return [[amelie]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Validates that the upstream and the next disposable are disposed . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[hawthorn]] ( Disposable upstream , Disposable next , Class < ? > [[disciplining]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[disciplining]] ) ; } return "[["Slough" != "Slough"]]" != "[["Slough" != "Slough"]]" ; } return "[["Administers" == "Administers"]]" == "[["Administers" == "Administers"]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 41 ---------------------------------------------
This is the main loop of the loop . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[disillusionment]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[["Ensenada" != "Ensenada"]]" != "[["Ensenada" != "Ensenada"]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a new ScheduledExecutorService with the given thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[reaches]] ( ThreadFactory [[blackmailed]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[blackmailed]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps the given error if it is an Error or a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[arbitrarily]] ) { if ( [[arbitrarily]] instanceof Error ) { throw ( Error ) [[arbitrarily]] ; } if ( [[arbitrarily]] instanceof RuntimeException ) { return ( RuntimeException ) [[arbitrarily]] ; } return new RuntimeException ( [[arbitrarily]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
If the Throwable is an Exception return it otherwise throw it . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[overloaded]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[overloaded]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[overloaded]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
[Succeeded / Failed / Skipped / Total] 3 / 42 / 0 / 45:   4%|▍         | 45/1000 [01:53<39:59,  2.51s/it][Succeeded / Failed / Skipped / Total] 3 / 42 / 0 / 45:   5%|▍         | 46/1000 [01:53<39:15,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 43 / 0 / 46:   5%|▍         | 46/1000 [01:53<39:15,  2.47s/it][Succeeded / Failed / Skipped / Total] 3 / 43 / 0 / 46:   5%|▍         | 47/1000 [02:00<40:39,  2.56s/it][Succeeded / Failed / Skipped / Total] 3 / 44 / 0 / 47:   5%|▍         | 47/1000 [02:00<40:39,  2.56s/it][Succeeded / Failed / Skipped / Total] 3 / 44 / 0 / 47:   5%|▍         | 48/1000 [02:07<42:04,  2.65s/it][Succeeded / Failed / Skipped / Total] 3 / 45 / 0 / 48:   5%|▍         | 48/1000 [02:07<42:04,  2.65s/it][Succeeded / Failed / Skipped / Total] 3 / 45 / 0 / 48:   5%|▍         | 49/1000 [02:15<43:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 4 / 45 / 0 / 49:   5%|▍         | 49/1000 [02:15<43:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 4 / 45 / 0 / 49:   5%|▌         | 50/1000 [02:18<43:48,  2.77s/it]--------------------------------------------- Result 45 ---------------------------------------------
Removes all resources from the set . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[giulietta]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[knockoffs]] ; synchronized ( this ) { if ( disposed ) { return ; } [[knockoffs]] = resources ; resources = null ; } dispose ( [[knockoffs]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[noting]] ( Subscription [[restraint]] ) { if ( cancelled ) { [[restraint]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[restraint]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[smallpox]] = actual ; if ( [[smallpox]] != null && cancelOnReplace ) { [[smallpox]] . cancel ( ) ; } actual = [[restraint]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[restraint]] . request ( r ) ; } return ; } Subscription [[smallpox]] = missedSubscription . getAndSet ( [[restraint]] ) ; if ( [[smallpox]] != null && cancelOnReplace ) { [[smallpox]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources in this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[mateusz]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[comers]] = resources ; return [[comers]] != null ? [[comers]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Creates an observable that maps a scalar value to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[choronzon]] ( T [[alde]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[giulietta]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[alde]] , [[giulietta]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 49 ---------------------------------------------
Try a scalar x map subscribe . --> на на на на на на --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[на]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[dialectics]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[dialectics]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 46 / 0 / 50:   5%|▌         | 50/1000 [02:18<43:48,  2.77s/it][Succeeded / Failed / Skipped / Total] 4 / 46 / 0 / 50:   5%|▌         | 51/1000 [02:19<43:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 4 / 47 / 0 / 51:   5%|▌         | 51/1000 [02:19<43:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 4 / 47 / 0 / 51:   5%|▌         | 52/1000 [02:22<43:22,  2.75s/it][Succeeded / Failed / Skipped / Total] 4 / 48 / 0 / 52:   5%|▌         | 52/1000 [02:22<43:22,  2.75s/it][Succeeded / Failed / Skipped / Total] 4 / 48 / 0 / 52:   5%|▌         | 53/1000 [02:30<44:56,  2.85s/it][Succeeded / Failed / Skipped / Total] 4 / 49 / 0 / 53:   5%|▌         | 53/1000 [02:30<44:56,  2.85s/it][Succeeded / Failed / Skipped / Total] 4 / 49 / 0 / 53:   5%|▌         | 54/1000 [02:32<44:34,  2.83s/it][Succeeded / Failed / Skipped / Total] 5 / 49 / 0 / 54:   5%|▌         | 54/1000 [02:32<44:34,  2.83s/it][Succeeded / Failed / Skipped / Total] 5 / 49 / 0 / 54:   6%|▌         | 55/1000 [02:36<44:55,  2.85s/it][Succeeded / Failed / Skipped / Total] 5 / 50 / 0 / 55:   6%|▌         | 55/1000 [02:36<44:55,  2.85s/it][Succeeded / Failed / Skipped / Total] 5 / 50 / 0 / 55:   6%|▌         | 56/1000 [02:37<44:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 6 / 50 / 0 / 56:   6%|▌         | 56/1000 [02:37<44:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 6 / 50 / 0 / 56:   6%|▌         | 57/1000 [02:42<44:53,  2.86s/it]Flattens an exception to a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[hullabaloo]] ( Throwable t ) { List < Throwable > [[optimal]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[optimal]] . add ( e ) ; } } return [[optimal]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[nunchaku]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Starts the queue with an empty subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[chappy]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Returns the disposed resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[corsets]] = resource . get ( ) ; if ( [[corsets]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[corsets]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Returns true if all of the elements in the queue are accepted by the subscriber . --> Returns true if this list is shorter than benzedrine --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[shorter]] ( Subscriber < ? super U > [[benzedrine]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[benzedrine]] ) ) { return "[["Footrot" == "Footrot"]]" == "[["Footrot" == "Footrot"]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 55 ---------------------------------------------
Adds a new item to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[nincompoops]] ( T [[benoit]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[benoit]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[benoit]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 56 ---------------------------------------------
Adds an observer to the queue . --> Despereaux a kaitlyn --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > [[observer]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return True ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[despereaux]] ( Observer < ? super U > [[kaitlyn]] ) { Object [ ] [[alouette]] = head ; final int c = capacity ; while ( [[alouette]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[alouette]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[kaitlyn]] ) ) { return True ; } } [[alouette]] = ( Object [ ] ) [[alouette]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 51 / 0 / 57:   6%|▌         | 57/1000 [02:42<44:53,  2.86s/it][Succeeded / Failed / Skipped / Total] 6 / 51 / 0 / 57:   6%|▌         | 58/1000 [02:43<44:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 58/1000 [02:43<44:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 59/1000 [02:51<45:43,  2.92s/it][Succeeded / Failed / Skipped / Total] 7 / 52 / 0 / 59:   6%|▌         | 59/1000 [02:51<45:43,  2.92s/it][Succeeded / Failed / Skipped / Total] 7 / 52 / 0 / 59:   6%|▌         | 60/1000 [02:53<45:17,  2.89s/it][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 60/1000 [02:53<45:17,  2.89s/it][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 61/1000 [02:53<44:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 7 / 54 / 0 / 61:   6%|▌         | 61/1000 [02:53<44:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 7 / 54 / 0 / 61:   6%|▌         | 62/1000 [02:56<44:29,  2.85s/it][Succeeded / Failed / Skipped / Total] 8 / 54 / 0 / 62:   6%|▌         | 62/1000 [02:56<44:29,  2.85s/it][Succeeded / Failed / Skipped / Total] 8 / 54 / 0 / 62:   6%|▋         | 63/1000 [03:06<46:19,  2.97s/it][Succeeded / Failed / Skipped / Total] 8 / 55 / 0 / 63:   6%|▋         | 63/1000 [03:06<46:19,  2.97s/it][Succeeded / Failed / Skipped / Total] 8 / 55 / 0 / 63:   6%|▋         | 64/1000 [03:09<46:10,  2.96s/it][Succeeded / Failed / Skipped / Total] 8 / 56 / 0 / 64:   6%|▋         | 64/1000 [03:09<46:10,  2.96s/it][Succeeded / Failed / Skipped / Total] 8 / 56 / 0 / 64:   6%|▋         | 65/1000 [03:21<48:20,  3.10s/it]Sends an error to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[zambrano]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
Returns a Flowable consisting of the results of applying the given function to each element . --> Aishwarya operator with backpressure --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[aishwarya]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[aishwarya]] ( mapper , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the observer with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[airborne]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 60 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[overflowing]] ( ) { int [[geary]] = get ( ) ; if ( ( [[geary]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 61 ---------------------------------------------
Returns a Flowable consisting of the items in this sequence sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[hokkaido]] ( Comparator < ? super T > [[ahman]] ) { ObjectHelper . requireNonNull ( [[ahman]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[ahman]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 62 ---------------------------------------------
Wait for the specified number of times to complete . --> Await a tatsuya --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[tatsuya]] ) { if ( [[tatsuya]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a Flowable consisting of the results of applying the provided function to each element . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[lunged]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[announcement]] ) { return [[lunged]] ( [[announcement]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 64 ---------------------------------------------
Requests the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[uncooked]] ( long [[sends]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[sends]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 57 / 0 / 65:   6%|▋         | 65/1000 [03:21<48:20,  3.10s/it][Succeeded / Failed / Skipped / Total] 8 / 57 / 0 / 65:   7%|▋         | 66/1000 [03:22<47:51,  3.07s/it][Succeeded / Failed / Skipped / Total] 8 / 58 / 0 / 66:   7%|▋         | 66/1000 [03:22<47:51,  3.07s/it][Succeeded / Failed / Skipped / Total] 8 / 58 / 0 / 66:   7%|▋         | 67/1000 [03:23<47:17,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 58 / 0 / 67:   7%|▋         | 67/1000 [03:23<47:17,  3.04s/it][Succeeded / Failed / Skipped / Total] 9 / 58 / 0 / 67:   7%|▋         | 68/1000 [03:29<47:57,  3.09s/it][Succeeded / Failed / Skipped / Total] 9 / 59 / 0 / 68:   7%|▋         | 68/1000 [03:29<47:57,  3.09s/it][Succeeded / Failed / Skipped / Total] 9 / 59 / 0 / 68:   7%|▋         | 69/1000 [03:34<48:18,  3.11s/it][Succeeded / Failed / Skipped / Total] 9 / 60 / 0 / 69:   7%|▋         | 69/1000 [03:34<48:18,  3.11s/it][Succeeded / Failed / Skipped / Total] 9 / 60 / 0 / 69:   7%|▋         | 70/1000 [03:37<48:14,  3.11s/it][Succeeded / Failed / Skipped / Total] 9 / 61 / 0 / 70:   7%|▋         | 70/1000 [03:37<48:14,  3.11s/it][Succeeded / Failed / Skipped / Total] 9 / 61 / 0 / 70:   7%|▋         | 71/1000 [03:43<48:39,  3.14s/it][Succeeded / Failed / Skipped / Total] 9 / 62 / 0 / 71:   7%|▋         | 71/1000 [03:43<48:39,  3.14s/it][Succeeded / Failed / Skipped / Total] 9 / 62 / 0 / 71:   7%|▋         | 72/1000 [03:44<48:08,  3.11s/it]Adds a subscriber to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return False ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , n ) ; b [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[aarons]] ( PublishDisposable < T > [[archipelago]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[franziska]] = subscribers . get ( ) ; if ( [[franziska]] == TERMINATED ) { return False ; } int n = [[franziska]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[franziska]] , 0 , b , 0 , n ) ; b [ n ] = [[archipelago]] ; if ( subscribers . compareAndSet ( [[franziska]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 66 ---------------------------------------------
Removes a subscriber from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[beauregard]] ( PublishDisposable < T > [[shinra]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[shinra]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Replays a ConnectableFlowable . --> Jaundiced a ConnectableFlowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[jaundiced]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 68 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[polisher]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[hadassah]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit unit ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[topnotch]] ( long [[companies]] , TimeUnit unit ) { if ( [[companies]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[companies]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 71 ---------------------------------------------
Returns the HttpMethod object for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[amelie]] ( String [[budde]] ) { try { return HttpMethod . valueOf ( [[budde]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 63 / 0 / 72:   7%|▋         | 72/1000 [03:44<48:08,  3.11s/it][Succeeded / Failed / Skipped / Total] 9 / 63 / 0 / 72:   7%|▋         | 73/1000 [03:45<47:38,  3.08s/it][Succeeded / Failed / Skipped / Total] 10 / 63 / 0 / 73:   7%|▋         | 73/1000 [03:45<47:39,  3.08s/it][Succeeded / Failed / Skipped / Total] 10 / 63 / 0 / 73:   7%|▋         | 74/1000 [03:49<47:54,  3.10s/it][Succeeded / Failed / Skipped / Total] 11 / 63 / 0 / 74:   7%|▋         | 74/1000 [03:49<47:54,  3.10s/it][Succeeded / Failed / Skipped / Total] 11 / 63 / 0 / 74:   8%|▊         | 75/1000 [03:55<48:28,  3.14s/it][Succeeded / Failed / Skipped / Total] 11 / 64 / 0 / 75:   8%|▊         | 75/1000 [03:55<48:28,  3.14s/it][Succeeded / Failed / Skipped / Total] 11 / 64 / 0 / 75:   8%|▊         | 76/1000 [03:57<48:09,  3.13s/it][Succeeded / Failed / Skipped / Total] 11 / 65 / 0 / 76:   8%|▊         | 76/1000 [03:57<48:09,  3.13s/it][Succeeded / Failed / Skipped / Total] 11 / 65 / 0 / 76:   8%|▊         | 77/1000 [04:03<48:40,  3.16s/it][Succeeded / Failed / Skipped / Total] 11 / 66 / 0 / 77:   8%|▊         | 77/1000 [04:03<48:40,  3.16s/it][Succeeded / Failed / Skipped / Total] 11 / 66 / 0 / 77:   8%|▊         | 78/1000 [04:04<48:05,  3.13s/it]Create the sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[deauville]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
Search for a user in the directory . --> Liefert die Airborne . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[beefsteak]] ( String [[airborne]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[airborne]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[airborne]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[airborne]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Perform version checks . --> Check for cheeseburgers . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[cheeseburgers]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Parses the method annotations and returns a service method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[[False]]" != "[[False]]" ; boolean continuationBodyNullable = "[[False]]" != "[[False]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[["Awaken" != "Awaken"]]" != "[["Awaken" != "Awaken"]]" ; boolean continuationBodyNullable = "[["Awaken" != "Awaken"]]" != "[["Awaken" != "Awaken"]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 76 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[clods]] ( CharSequence [[errol]] ) { String [[melnick]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[melnick]] , [[errol]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 77 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String [[rawPasswordEncoded]] = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[pickle]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String [[apostate]] = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , [[apostate]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 67 / 0 / 78:   8%|▊         | 78/1000 [04:04<48:05,  3.13s/it][Succeeded / Failed / Skipped / Total] 11 / 67 / 0 / 78:   8%|▊         | 79/1000 [04:07<48:04,  3.13s/it][Succeeded / Failed / Skipped / Total] 11 / 68 / 0 / 79:   8%|▊         | 79/1000 [04:07<48:04,  3.13s/it][Succeeded / Failed / Skipped / Total] 11 / 68 / 0 / 79:   8%|▊         | 80/1000 [04:11<48:10,  3.14s/it][Succeeded / Failed / Skipped / Total] 12 / 68 / 0 / 80:   8%|▊         | 80/1000 [04:11<48:10,  3.14s/it][Succeeded / Failed / Skipped / Total] 12 / 68 / 0 / 80:   8%|▊         | 81/1000 [04:13<47:58,  3.13s/it][Succeeded / Failed / Skipped / Total] 12 / 69 / 0 / 81:   8%|▊         | 81/1000 [04:13<47:58,  3.13s/it][Succeeded / Failed / Skipped / Total] 12 / 69 / 0 / 81:   8%|▊         | 82/1000 [04:15<47:36,  3.11s/it][Succeeded / Failed / Skipped / Total] 12 / 70 / 0 / 82:   8%|▊         | 82/1000 [04:15<47:36,  3.11s/it][Succeeded / Failed / Skipped / Total] 12 / 70 / 0 / 82:   8%|▊         | 83/1000 [04:17<47:23,  3.10s/it][Succeeded / Failed / Skipped / Total] 12 / 71 / 0 / 83:   8%|▊         | 83/1000 [04:17<47:23,  3.10s/it][Succeeded / Failed / Skipped / Total] 12 / 71 / 0 / 83:   8%|▊         | 84/1000 [04:35<50:01,  3.28s/it][Succeeded / Failed / Skipped / Total] 12 / 72 / 0 / 84:   8%|▊         | 84/1000 [04:35<50:01,  3.28s/it][Succeeded / Failed / Skipped / Total] 12 / 72 / 0 / 84:   8%|▊         | 85/1000 [04:35<49:25,  3.24s/it][Succeeded / Failed / Skipped / Total] 12 / 73 / 0 / 85:   8%|▊         | 85/1000 [04:35<49:25,  3.24s/it][Succeeded / Failed / Skipped / Total] 12 / 73 / 0 / 85:   9%|▊         | 86/1000 [04:43<50:09,  3.29s/it]Gets the Spring version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[montparnasse]] ( ) { Properties [[destroyers]] = new Properties ( ) ; try { [[destroyers]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[destroyers]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 79 ---------------------------------------------
Returns true if the checks should be disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String [[springSecurityVersion]] ) { if ( springVersion == null || springVersion . equals ( [[springSecurityVersion]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[schoolboy]] ( String springVersion , String [[amadé]] ) { if ( springVersion == null || springVersion . equals ( [[amadé]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 80 ---------------------------------------------
Get the OAuth2 client . --> Ream une protégée --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[ream]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[protégée]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[protégée]] ) ; return [[protégée]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Creates a new attribute exchange configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[drifters]] ( String [[supers]] ) { AttributeExchangeConfigurer [[abigail]] = new AttributeExchangeConfigurer ( [[supers]] ) ; this . attributeExchangeConfigurers . add ( [[abigail]] ) ; return [[abigail]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 82 ---------------------------------------------
Get the OAuth2 resource server configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[fillmore]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 83 ---------------------------------------------
Returns a ChannelRequestMatcherRegistry that can be used to configure the request matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[montparnasse]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieve an entry from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[rápido]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] [[params]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[aforementioned]] ( final String base , final String filter , final Object [ ] [[flogged]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 74 / 0 / 86:   9%|▊         | 86/1000 [04:43<50:09,  3.29s/it][Succeeded / Failed / Skipped / Total] 12 / 74 / 0 / 86:   9%|▊         | 87/1000 [04:44<49:48,  3.27s/it][Succeeded / Failed / Skipped / Total] 12 / 75 / 0 / 87:   9%|▊         | 87/1000 [04:44<49:48,  3.27s/it][Succeeded / Failed / Skipped / Total] 12 / 75 / 0 / 87:   9%|▉         | 88/1000 [04:46<49:31,  3.26s/it][Succeeded / Failed / Skipped / Total] 13 / 75 / 0 / 88:   9%|▉         | 88/1000 [04:46<49:31,  3.26s/it][Succeeded / Failed / Skipped / Total] 13 / 75 / 0 / 88:   9%|▉         | 89/1000 [04:48<49:14,  3.24s/it]Build the search controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[maestra]] ( SearchControls [[austere]] ) { return new SearchControls ( [[austere]] . getSearchScope ( ) , [[austere]] . getCountLimit ( ) , [[austere]] . getTimeLimit ( ) , [[austere]] . getReturningAttributes ( ) , RETURN_OBJECT , [[austere]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
Search for a single attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[aaaah]] ( final String base , final String [[conjured]] , final Object [ ] params , final String attributeName ) { String [ ] [[aitch]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[conjured]] , params , [[aitch]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 88 ---------------------------------------------
Search for a single entry . --> howitzers the given base and bullitt --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String [[filter]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[filter]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[filter]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[howitzers]] ( DirContext ctx , SearchControls searchControls , String base , String [[bullitt]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[bullitt]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[bullitt]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 76 / 0 / 89:   9%|▉         | 89/1000 [04:48<49:14,  3.24s/it][Succeeded / Failed / Skipped / Total] 13 / 76 / 0 / 89:   9%|▉         | 90/1000 [04:51<49:08,  3.24s/it][Succeeded / Failed / Skipped / Total] 14 / 76 / 0 / 90:   9%|▉         | 90/1000 [04:51<49:08,  3.24s/it][Succeeded / Failed / Skipped / Total] 14 / 76 / 0 / 90:   9%|▉         | 91/1000 [04:52<48:45,  3.22s/it][Succeeded / Failed / Skipped / Total] 15 / 76 / 0 / 91:   9%|▉         | 91/1000 [04:52<48:45,  3.22s/it][Succeeded / Failed / Skipped / Total] 15 / 76 / 0 / 91:   9%|▉         | 92/1000 [05:02<49:44,  3.29s/it][Succeeded / Failed / Skipped / Total] 15 / 77 / 0 / 92:   9%|▉         | 92/1000 [05:02<49:44,  3.29s/it][Succeeded / Failed / Skipped / Total] 15 / 77 / 0 / 92:   9%|▉         | 93/1000 [05:04<49:31,  3.28s/it][Succeeded / Failed / Skipped / Total] 16 / 77 / 0 / 93:   9%|▉         | 93/1000 [05:04<49:31,  3.28s/it][Succeeded / Failed / Skipped / Total] 16 / 77 / 0 / 93:   9%|▉         | 94/1000 [05:13<50:21,  3.33s/it]Compares the specified attribute with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[zaphod]] ( final String [[backpacks]] , final String [[nagai]] , final Object value ) { final String comparisonFilter = "(" + [[nagai]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[luton]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[luton]] . search ( [[backpacks]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 90 ---------------------------------------------
Build a PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object . --> zurich a J2EE user roles to Granted Authorities --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[zurich]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 91 ---------------------------------------------
Create servlet - api - filter . --> BACCALA baccala . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[baccala]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
Create a WhitelistedTypeResolverBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[could]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
Create the JAAS API filter . --> clampett . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[clampett]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 77 / 0 / 94:   9%|▉         | 94/1000 [05:13<50:21,  3.33s/it][Succeeded / Failed / Skipped / Total] 17 / 77 / 0 / 94:  10%|▉         | 95/1000 [05:14<50:00,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 77 / 0 / 95:  10%|▉         | 95/1000 [05:14<50:00,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 77 / 0 / 95:  10%|▉         | 96/1000 [05:18<50:00,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 78 / 0 / 96:  10%|▉         | 96/1000 [05:18<50:00,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 78 / 0 / 96:  10%|▉         | 97/1000 [05:21<49:49,  3.31s/it]Adds the Spring security filter chain to the servlet context . --> Register anzio filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[anzio]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 95 ---------------------------------------------
Finds all the primary keys in the given list of sids . --> Trace a list of buckwheat --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[traceable]] ( final Map < Serializable , Acl > acls , final Set < Long > [[buckwheat]] , final List < Sid > [[ivanhoe]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[buckwheat]] , "Items to find now required" ) ; String [[abandoning]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[buckwheat]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[abandoning]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[buckwheat]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[ivanhoe]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 96 ---------------------------------------------
Get the token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[pontiff]] ( String [[deadline]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[trip]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[trip]] . getString ( 1 ) , [[trip]] . getString ( 2 ) , [[trip]] . getString ( 3 ) , [[trip]] . getTimestamp ( 4 ) ) ; } } , [[deadline]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[deadline]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[deadline]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[deadline]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 97 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 79 / 0 / 97:  10%|▉         | 97/1000 [05:21<49:49,  3.31s/it][Succeeded / Failed / Skipped / Total] 18 / 79 / 0 / 97:  10%|▉         | 98/1000 [05:22<49:28,  3.29s/it][Succeeded / Failed / Skipped / Total] 18 / 80 / 0 / 98:  10%|▉         | 98/1000 [05:22<49:28,  3.29s/it][Succeeded / Failed / Skipped / Total] 18 / 80 / 0 / 98:  10%|▉         | 99/1000 [05:23<49:00,  3.26s/it][Succeeded / Failed / Skipped / Total] 18 / 81 / 0 / 99:  10%|▉         | 99/1000 [05:23<49:00,  3.26s/it][Succeeded / Failed / Skipped / Total] 18 / 81 / 0 / 99:  10%|█         | 100/1000 [05:32<49:51,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 82 / 0 / 100:  10%|█         | 100/1000 [05:32<49:51,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 82 / 0 / 100:  10%|█         | 101/1000 [05:35<49:48,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 83 / 0 / 101:  10%|█         | 101/1000 [05:35<49:48,  3.32s/it][Succeeded / Failed / Skipped / Total] 18 / 83 / 0 / 101:  10%|█         | 102/1000 [05:46<50:47,  3.39s/it]Creates the embedded server . --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[scheherazade]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher with the specified algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[chokes]] ( String [[snappy]] ) { try { return Cipher . getInstance ( [[snappy]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Override afterPropertiesSet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[schizophrenia]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the list of authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[menendez]] ( Collection < String > attributes ) { List < GrantedAuthority > [[personalized]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[personalized]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[personalized]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Checks the secure context token . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[maqsood]] ( ServletRequest request , ServletResponse [[fireplaces]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[fireplaces]] ) ; } chain . doFilter ( request , [[fireplaces]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 84 / 0 / 102:  10%|█         | 102/1000 [05:46<50:47,  3.39s/it][Succeeded / Failed / Skipped / Total] 18 / 84 / 0 / 102:  10%|█         | 103/1000 [05:49<50:40,  3.39s/it][Succeeded / Failed / Skipped / Total] 18 / 85 / 0 / 103:  10%|█         | 103/1000 [05:49<50:40,  3.39s/it][Succeeded / Failed / Skipped / Total] 18 / 85 / 0 / 103:  10%|█         | 104/1000 [05:53<50:48,  3.40s/it][Succeeded / Failed / Skipped / Total] 18 / 86 / 0 / 104:  10%|█         | 104/1000 [05:53<50:48,  3.40s/it][Succeeded / Failed / Skipped / Total] 18 / 86 / 0 / 104:  10%|█         | 105/1000 [05:56<50:36,  3.39s/it][Succeeded / Failed / Skipped / Total] 19 / 86 / 0 / 105:  10%|█         | 105/1000 [05:56<50:36,  3.39s/it][Succeeded / Failed / Skipped / Total] 19 / 86 / 0 / 105:  11%|█         | 106/1000 [05:56<50:06,  3.36s/it][Succeeded / Failed / Skipped / Total] 19 / 87 / 0 / 106:  11%|█         | 106/1000 [05:56<50:06,  3.36s/it][Succeeded / Failed / Skipped / Total] 19 / 87 / 0 / 106:  11%|█         | 107/1000 [05:59<50:00,  3.36s/it]Perform the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[censured]] ( HttpServletRequest [[comédie]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[comédie]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[comédie]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[comédie]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[comédie]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[comédie]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 103 ---------------------------------------------
Checks if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "[[False]]" != "[[False]]" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[morris]] ( HttpServletRequest [[comédie]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[comédie]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "[["Consigned" != "Consigned"]]" != "[["Consigned" != "Consigned"]]" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[["Consigned" != "Consigned"]]" != "[["Consigned" != "Consigned"]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 104 ---------------------------------------------
Maps a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[lacerated]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[meteorology]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[meteorology]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[meteorology]] . add ( defaultAuthority ) ; } return [[meteorology]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 105 ---------------------------------------------
Sets the login processing URL . --> Advertised wetsuit --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[advertised]] ( String [[wetsuit]] ) { this . [[google]] = [[advertised]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[advertised]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 106 ---------------------------------------------
Update authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[youwant]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 88 / 0 / 107:  11%|█         | 107/1000 [05:59<50:00,  3.36s/it][Succeeded / Failed / Skipped / Total] 19 / 88 / 0 / 107:  11%|█         | 108/1000 [06:01<49:41,  3.34s/it][Succeeded / Failed / Skipped / Total] 19 / 89 / 0 / 108:  11%|█         | 108/1000 [06:01<49:41,  3.34s/it][Succeeded / Failed / Skipped / Total] 19 / 89 / 0 / 108:  11%|█         | 109/1000 [06:03<49:33,  3.34s/it][Succeeded / Failed / Skipped / Total] 19 / 90 / 0 / 109:  11%|█         | 109/1000 [06:03<49:33,  3.34s/it][Succeeded / Failed / Skipped / Total] 19 / 90 / 0 / 109:  11%|█         | 110/1000 [06:10<49:55,  3.37s/it][Succeeded / Failed / Skipped / Total] 19 / 91 / 0 / 110:  11%|█         | 110/1000 [06:10<49:55,  3.37s/it][Succeeded / Failed / Skipped / Total] 19 / 91 / 0 / 110:  11%|█         | 111/1000 [06:20<50:45,  3.43s/it][Succeeded / Failed / Skipped / Total] 20 / 91 / 0 / 111:  11%|█         | 111/1000 [06:20<50:45,  3.43s/it][Succeeded / Failed / Skipped / Total] 20 / 91 / 0 / 111:  11%|█         | 112/1000 [06:21<50:25,  3.41s/it][Succeeded / Failed / Skipped / Total] 20 / 92 / 0 / 112:  11%|█         | 112/1000 [06:21<50:25,  3.41s/it][Succeeded / Failed / Skipped / Total] 20 / 92 / 0 / 112:  11%|█▏        | 113/1000 [06:26<50:37,  3.42s/it]Check the content length of the response . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[joliet]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bruschetta]] = getBufferSize ( ) ; boolean requiresFlush = [[bruschetta]] > 0 && this . contentWritten >= [[bruschetta]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 108 ---------------------------------------------
Update access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[reachable]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 109 ---------------------------------------------
Maps a password value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[aarons]] ( Object [[ezio]] ) { if ( ! ( [[ezio]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Extracts the remember me cookie from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[drazen]] ( HttpServletRequest [[mastercard]] ) { Cookie [ ] cookies = [[mastercard]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Gets the query string from the request . --> Method to bahar a numero --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[bahar]] ( final HttpServletRequest request , final Pattern [[numero]] ) { final String [[wetsuit]] = request . getQueryString ( ) ; if ( [[wetsuit]] == null ) { return null ; } final String result = [[numero]] . matcher ( [[wetsuit]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 112 ---------------------------------------------
Encodes the given cookie tokens into a base64 encoded string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String [[value]] = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[hedge]] ( String [ ] cookieTokens ) { StringBuilder [[platts]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[platts]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[platts]] . append ( DELIMITER ) ; } } String [[lamborghini]] = [[platts]] . toString ( ) ; [[platts]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[lamborghini]] . getBytes ( ) ) ) ) ; while ( [[platts]] . charAt ( [[platts]] . length ( ) - 1 ) == ' ' ) { [[platts]] . deleteCharAt ( [[platts]] . length ( ) - 1 ) ; } return [[platts]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 92 / 0 / 113:  11%|█▏        | 113/1000 [06:26<50:37,  3.42s/it][Succeeded / Failed / Skipped / Total] 21 / 92 / 0 / 113:  11%|█▏        | 114/1000 [06:31<50:44,  3.44s/it][Succeeded / Failed / Skipped / Total] 21 / 93 / 0 / 114:  11%|█▏        | 114/1000 [06:31<50:44,  3.44s/it][Succeeded / Failed / Skipped / Total] 21 / 93 / 0 / 114:  12%|█▏        | 115/1000 [06:33<50:26,  3.42s/it][Succeeded / Failed / Skipped / Total] 21 / 94 / 0 / 115:  12%|█▏        | 115/1000 [06:33<50:26,  3.42s/it][Succeeded / Failed / Skipped / Total] 21 / 94 / 0 / 115:  12%|█▏        | 116/1000 [06:35<50:14,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 94 / 0 / 116:  12%|█▏        | 116/1000 [06:35<50:14,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 94 / 0 / 116:  12%|█▏        | 117/1000 [06:35<49:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 95 / 0 / 117:  12%|█▏        | 117/1000 [06:35<49:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 95 / 0 / 117:  12%|█▏        | 118/1000 [06:39<49:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 96 / 0 / 118:  12%|█▏        | 118/1000 [06:39<49:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 96 / 0 / 118:  12%|█▏        | 119/1000 [06:43<49:46,  3.39s/it]Adds a cookie to the response . --> Method to add afflictions to backwash --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[request]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[request]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; [[response]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[afflictions]] ( String [ ] tokens , int maxAge , HttpServletRequest [[pituitary]] , HttpServletResponse [[backwash]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[pituitary]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[pituitary]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; [[backwash]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[rápido]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 115 ---------------------------------------------
Resolve an argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[bruschetta]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[altruism]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[altruism]] == null ) { return null ; } return [[altruism]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 116 ---------------------------------------------
Authenticate the given authentication . --> Authenticate a chlamydia . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[chlamydia]] ) throws AuthenticationException { if ( ! ( [[chlamydia]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[chlamydia]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 117 ---------------------------------------------
Gets the principal from the SecurityContext . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[gummer]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Returns the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[fruitless]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 97 / 0 / 119:  12%|█▏        | 119/1000 [06:43<49:46,  3.39s/it][Succeeded / Failed / Skipped / Total] 22 / 97 / 0 / 119:  12%|█▏        | 120/1000 [06:45<49:36,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 98 / 0 / 120:  12%|█▏        | 120/1000 [06:45<49:36,  3.38s/it][Succeeded / Failed / Skipped / Total] 22 / 98 / 0 / 120:  12%|█▏        | 121/1000 [06:48<49:25,  3.37s/it][Succeeded / Failed / Skipped / Total] 22 / 99 / 0 / 121:  12%|█▏        | 121/1000 [06:48<49:25,  3.37s/it][Succeeded / Failed / Skipped / Total] 22 / 99 / 0 / 121:  12%|█▏        | 122/1000 [06:53<49:39,  3.39s/it][Succeeded / Failed / Skipped / Total] 22 / 100 / 0 / 122:  12%|█▏        | 122/1000 [06:53<49:39,  3.39s/it][Succeeded / Failed / Skipped / Total] 22 / 100 / 0 / 122:  12%|█▏        | 123/1000 [06:56<49:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 22 / 101 / 0 / 123:  12%|█▏        | 123/1000 [06:56<49:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 22 / 101 / 0 / 123:  12%|█▏        | 124/1000 [06:57<49:09,  3.37s/it][Succeeded / Failed / Skipped / Total] 22 / 102 / 0 / 124:  12%|█▏        | 124/1000 [06:57<49:09,  3.37s/it][Succeeded / Failed / Skipped / Total] 22 / 102 / 0 / 124:  12%|█▎        | 125/1000 [07:09<50:09,  3.44s/it]Write the secured ui suffix to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[beaune]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[harte]] ( Map < String , Object > [[arrondissement]] ) { Assert . notEmpty ( [[arrondissement]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[arrondissement]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Logout the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse [[response]] , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse [[arwen]] , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "[["Passé" != "Passé"]]" != "[["Passé" != "Passé"]]" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 122 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[georgette]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[schnauzer]] ( ) throws Exception { for ( UserDetailsBuilder [[unexpectedly]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[unexpectedly]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Build the provider URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 103 / 0 / 125:  12%|█▎        | 125/1000 [07:09<50:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 22 / 103 / 0 / 125:  13%|█▎        | 126/1000 [07:11<49:51,  3.42s/it][Succeeded / Failed / Skipped / Total] 22 / 104 / 0 / 126:  13%|█▎        | 126/1000 [07:11<49:51,  3.42s/it][Succeeded / Failed / Skipped / Total] 22 / 104 / 0 / 126:  13%|█▎        | 127/1000 [07:13<49:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 105 / 0 / 127:  13%|█▎        | 127/1000 [07:13<49:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 105 / 0 / 127:  13%|█▎        | 128/1000 [07:16<49:30,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 106 / 0 / 128:  13%|█▎        | 128/1000 [07:16<49:30,  3.41s/it][Succeeded / Failed / Skipped / Total] 22 / 106 / 0 / 128:  13%|█▎        | 129/1000 [07:17<49:16,  3.39s/it][Succeeded / Failed / Skipped / Total] 23 / 106 / 0 / 129:  13%|█▎        | 129/1000 [07:17<49:16,  3.39s/it][Succeeded / Failed / Skipped / Total] 23 / 106 / 0 / 129:  13%|█▎        | 130/1000 [07:24<49:36,  3.42s/it][Succeeded / Failed / Skipped / Total] 23 / 107 / 0 / 130:  13%|█▎        | 130/1000 [07:24<49:36,  3.42s/it][Succeeded / Failed / Skipped / Total] 23 / 107 / 0 / 130:  13%|█▎        | 131/1000 [07:25<49:15,  3.40s/it][Succeeded / Failed / Skipped / Total] 24 / 107 / 0 / 131:  13%|█▎        | 131/1000 [07:25<49:15,  3.40s/it][Succeeded / Failed / Skipped / Total] 24 / 107 / 0 / 131:  13%|█▎        | 132/1000 [07:29<49:18,  3.41s/it]Service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[cicero]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
Adds the PKCE parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[akeelah]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[alliance]] = this . [[aiden]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[alliance]] ) ; try { String codeChallenge = createCodeChallenge ( [[alliance]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[alliance]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 127 ---------------------------------------------
Check if authentication is required . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[bostwick]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[bostwick]] , response ) ; final boolean [[capable]] = serviceTicketRequest || proxyReceptorRequest ( [[bostwick]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[bostwick]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[capable]] ) ; } return [[capable]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 128 ---------------------------------------------
Proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[binh]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 129 ---------------------------------------------
Returns true if the current user is authenticated . --> Dieszel denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelten denzelen denzelten denzelen denzelen denzelen denzel denzel denzel denzel denzelen denzelnen denzelten denzelnen --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[denzel]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
Checks if the request is a proxy receptor request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[gunfighters]] ( final HttpServletRequest [[rosewood]] ) { final boolean [[antipsychotic]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[rosewood]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[antipsychotic]] ) ; } return [[antipsychotic]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
URL - encode a string using UTF - 8 encoding . --> Returns the alzheimer for the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error [[err]] = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; [[err]] . initCause ( e ) ; throw [[err]] ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[alzheimer]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error [[bared]] = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; [[bared]] . initCause ( e ) ; throw [[bared]] ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
[Succeeded / Failed / Skipped / Total] 24 / 108 / 0 / 132:  13%|█▎        | 132/1000 [07:29<49:18,  3.41s/it][Succeeded / Failed / Skipped / Total] 24 / 108 / 0 / 132:  13%|█▎        | 133/1000 [07:31<49:04,  3.40s/it][Succeeded / Failed / Skipped / Total] 24 / 109 / 0 / 133:  13%|█▎        | 133/1000 [07:31<49:04,  3.40s/it][Succeeded / Failed / Skipped / Total] 24 / 109 / 0 / 133:  13%|█▎        | 134/1000 [07:37<49:17,  3.41s/it][Succeeded / Failed / Skipped / Total] 24 / 110 / 0 / 134:  13%|█▎        | 134/1000 [07:37<49:17,  3.41s/it][Succeeded / Failed / Skipped / Total] 24 / 110 / 0 / 134:  14%|█▎        | 135/1000 [07:37<48:53,  3.39s/it][Succeeded / Failed / Skipped / Total] 24 / 111 / 0 / 135:  14%|█▎        | 135/1000 [07:37<48:53,  3.39s/it][Succeeded / Failed / Skipped / Total] 24 / 111 / 0 / 135:  14%|█▎        | 136/1000 [07:40<48:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 24 / 112 / 0 / 136:  14%|█▎        | 136/1000 [07:40<48:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 24 / 112 / 0 / 136:  14%|█▎        | 137/1000 [07:44<48:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 25 / 112 / 0 / 137:  14%|█▎        | 137/1000 [07:44<48:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 25 / 112 / 0 / 137:  14%|█▍        | 138/1000 [07:53<49:17,  3.43s/it]--------------------------------------------- Result 132 ---------------------------------------------
Creates a method security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[existentialist]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[revolution]] = new MethodSecurityExpressionRoot ( authentication ) ; [[revolution]] . setThis ( invocation . getThis ( ) ) ; [[revolution]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[revolution]] . setTrustResolver ( getTrustResolver ( ) ) ; [[revolution]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[revolution]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[revolution]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the JWKSet . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[ginsburg]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 134 ---------------------------------------------
Load user details by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[cathedrals]] ( final Assertion [[alec]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[alec]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 135 ---------------------------------------------
Get the webSphere groups based Granted Authorities for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[auschwitz]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[peers]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[peers]] ) ; } return [[peers]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[incontinence]] ( HttpServletRequest httpRequest ) { Object [[slng]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[slng]] ) ; } return [[slng]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Pre - processes the attributes2grantedAuthoritiesMap . --> Pre - processes fruitless attributes2grantedAuthoritiesMap --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[fruitless]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[fruitless]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[fruitless]] . getKey ( ) , getGrantedAuthorityCollection ( [[fruitless]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 113 / 0 / 138:  14%|█▍        | 138/1000 [07:53<49:17,  3.43s/it][Succeeded / Failed / Skipped / Total] 25 / 113 / 0 / 138:  14%|█▍        | 139/1000 [07:53<48:55,  3.41s/it][Succeeded / Failed / Skipped / Total] 26 / 113 / 0 / 139:  14%|█▍        | 139/1000 [07:53<48:55,  3.41s/it][Succeeded / Failed / Skipped / Total] 26 / 113 / 0 / 139:  14%|█▍        | 140/1000 [08:01<49:19,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 114 / 0 / 140:  14%|█▍        | 140/1000 [08:01<49:19,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 114 / 0 / 140:  14%|█▍        | 141/1000 [08:04<49:11,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 115 / 0 / 141:  14%|█▍        | 141/1000 [08:04<49:11,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 115 / 0 / 141:  14%|█▍        | 142/1000 [08:05<48:56,  3.42s/it][Succeeded / Failed / Skipped / Total] 26 / 116 / 0 / 142:  14%|█▍        | 142/1000 [08:05<48:56,  3.42s/it][Succeeded / Failed / Skipped / Total] 26 / 116 / 0 / 142:  14%|█▍        | 143/1000 [08:06<48:33,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 117 / 0 / 143:  14%|█▍        | 143/1000 [08:06<48:33,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 117 / 0 / 143:  14%|█▍        | 144/1000 [08:08<48:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 118 / 0 / 144:  14%|█▍        | 144/1000 [08:08<48:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 118 / 0 / 144:  14%|█▍        | 145/1000 [08:14<48:33,  3.41s/it]Concatenates the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[kashmiri]] ( byte [ ] ... [[dungarees]] ) { int length = 0 ; for ( byte [ ] array : [[dungarees]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[dungarees]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 139 ---------------------------------------------
Gets the collection of grants for the given value . --> Ginsburg ginsburg . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[ginsburg]] ( Object value ) { Collection < GrantedAuthority > [[launchers]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[launchers]] , value ) ; return [[launchers]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Gets the list of grants for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[jabberwocky]] ( Collection < String > [[sprightly]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[sprightly]] ) { Collection < GrantedAuthority > [[corso]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[corso]] != null ) { gaList . addAll ( [[corso]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the pre - authenticated J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[garou]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 142 ---------------------------------------------
Creates a sub - array of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int [[beginIndex]] , int endIndex ) { int length = endIndex - [[beginIndex]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[array]] , [[beginIndex]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[humperdinck]] ( byte [ ] [[dakin]] , int [[carriage]] , int endIndex ) { int length = endIndex - [[carriage]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( [[dakin]] , [[carriage]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 143 ---------------------------------------------
Adds the given value to the given collection of grants . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[phenomena]] ( Collection < GrantedAuthority > [[barky]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[phenomena]] ( [[barky]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[phenomena]] ( [[barky]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[phenomena]] ( [[barky]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[barky]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the shared object for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[bitchen]] > [[bitchen]] getSharedObject ( Class < [[bitchen]] > sharedType ) { return ( [[bitchen]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 119 / 0 / 145:  14%|█▍        | 145/1000 [08:14<48:33,  3.41s/it][Succeeded / Failed / Skipped / Total] 26 / 119 / 0 / 145:  15%|█▍        | 146/1000 [08:22<48:57,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 120 / 0 / 146:  15%|█▍        | 146/1000 [08:22<48:57,  3.44s/it][Succeeded / Failed / Skipped / Total] 26 / 120 / 0 / 146:  15%|█▍        | 147/1000 [08:23<48:39,  3.42s/it][Succeeded / Failed / Skipped / Total] 26 / 121 / 0 / 147:  15%|█▍        | 147/1000 [08:23<48:39,  3.42s/it][Succeeded / Failed / Skipped / Total] 26 / 121 / 0 / 147:  15%|█▍        | 148/1000 [08:23<48:17,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 122 / 0 / 148:  15%|█▍        | 148/1000 [08:23<48:17,  3.40s/it][Succeeded / Failed / Skipped / Total] 26 / 122 / 0 / 148:  15%|█▍        | 149/1000 [08:27<48:20,  3.41s/it][Succeeded / Failed / Skipped / Total] 27 / 122 / 0 / 149:  15%|█▍        | 149/1000 [08:27<48:20,  3.41s/it][Succeeded / Failed / Skipped / Total] 27 / 122 / 0 / 149:  15%|█▌        | 150/1000 [08:35<48:41,  3.44s/it][Succeeded / Failed / Skipped / Total] 27 / 123 / 0 / 150:  15%|█▌        | 150/1000 [08:35<48:41,  3.44s/it][Succeeded / Failed / Skipped / Total] 27 / 123 / 0 / 150:  15%|█▌        | 151/1000 [08:39<48:40,  3.44s/it][Succeeded / Failed / Skipped / Total] 27 / 124 / 0 / 151:  15%|█▌        | 151/1000 [08:39<48:40,  3.44s/it][Succeeded / Failed / Skipped / Total] 27 / 124 / 0 / 151:  15%|█▌        | 152/1000 [08:42<48:32,  3.43s/it]Returns the role name for the given role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[bozo]] ( String [[braddock]] ) { Assert . isTrue ( ! [[braddock]] . startsWith ( "ROLE_" ) , ( ) -> [[braddock]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[braddock]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
Invoke the interceptor . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[kalahari]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 147 ---------------------------------------------
Build a https redirect url for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[gesundheit]] ( HttpServletRequest [[commissioners]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[commissioners]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[commissioners]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[commissioners]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[commissioners]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[commissioners]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[commissioners]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 148 ---------------------------------------------
Returns an array of roles that have any of the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[camryn]] ( String ... [[missouri]] ) { for ( int [[sorrento]] = 0 ; [[sorrento]] < [[missouri]] . length ; [[sorrento]] ++ ) { [[missouri]] [ [[sorrento]] ] = "ROLE_" + [[missouri]] [ [[sorrento]] ] ; } return [[missouri]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit a user . --> Inshallah inshallah inshallah inshallah inshallah --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[inshallah]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Process the auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse [[response]] ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[frak]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse [[máximo]] ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 151 ---------------------------------------------
Sets the exit user URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[craziest]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 152 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 124 / 0 / 152:  15%|█▌        | 152/1000 [08:42<48:32,  3.43s/it][Succeeded / Failed / Skipped / Total] 28 / 124 / 0 / 152:  15%|█▌        | 153/1000 [08:43<48:15,  3.42s/it][Succeeded / Failed / Skipped / Total] 28 / 125 / 0 / 153:  15%|█▌        | 153/1000 [08:43<48:15,  3.42s/it][Succeeded / Failed / Skipped / Total] 28 / 125 / 0 / 153:  15%|█▌        | 154/1000 [08:45<48:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 29 / 125 / 0 / 154:  15%|█▌        | 154/1000 [08:45<48:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 29 / 125 / 0 / 154:  16%|█▌        | 155/1000 [08:52<48:22,  3.43s/it][Succeeded / Failed / Skipped / Total] 29 / 126 / 0 / 155:  16%|█▌        | 155/1000 [08:52<48:22,  3.43s/it][Succeeded / Failed / Skipped / Total] 29 / 126 / 0 / 155:  16%|█▌        | 156/1000 [08:52<48:01,  3.41s/it][Succeeded / Failed / Skipped / Total] 29 / 126 / 1 / 156:  16%|█▌        | 156/1000 [08:52<48:01,  3.41s/it][Succeeded / Failed / Skipped / Total] 29 / 126 / 1 / 156:  16%|█▌        | 157/1000 [08:53<47:43,  3.40s/it][Succeeded / Failed / Skipped / Total] 29 / 127 / 1 / 157:  16%|█▌        | 157/1000 [08:53<47:43,  3.40s/it][Succeeded / Failed / Skipped / Total] 29 / 127 / 1 / 157:  16%|█▌        | 158/1000 [08:58<47:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 29 / 128 / 1 / 158:  16%|█▌        | 158/1000 [08:58<47:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 29 / 128 / 1 / 158:  16%|█▌        | 159/1000 [09:00<47:37,  3.40s/it]Display the public index of the user --> Get a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[antsy]] ( ) { Contact [[barak]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[barak]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 153 ---------------------------------------------
Create a persistent login for the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[hoarded]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[atherton]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[atherton]] ) ; addCookie ( [[atherton]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
Decodes a JWT . --> Decodes a brianna . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[brianna]] ) throws JwtException { JWT jwt = parse ( [[brianna]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[brianna]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 155 ---------------------------------------------
Spring security filter chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[mentioned]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 156 ---------------------------------------------
Convert a JWT to a collection of GrantedAuthorities . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[zanzibar]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 158 ---------------------------------------------
Authorize using url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 128 / 1 / 159:  16%|█▌        | 159/1000 [09:00<47:37,  3.40s/it][Succeeded / Failed / Skipped / Total] 30 / 128 / 1 / 159:  16%|█▌        | 160/1000 [09:02<47:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 30 / 129 / 1 / 160:  16%|█▌        | 160/1000 [09:02<47:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 30 / 129 / 1 / 160:  16%|█▌        | 161/1000 [09:05<47:24,  3.39s/it][Succeeded / Failed / Skipped / Total] 31 / 129 / 1 / 161:  16%|█▌        | 161/1000 [09:05<47:24,  3.39s/it][Succeeded / Failed / Skipped / Total] 31 / 129 / 1 / 161:  16%|█▌        | 162/1000 [09:10<47:27,  3.40s/it][Succeeded / Failed / Skipped / Total] 32 / 129 / 1 / 162:  16%|█▌        | 162/1000 [09:10<47:27,  3.40s/it][Succeeded / Failed / Skipped / Total] 32 / 129 / 1 / 162:  16%|█▋        | 163/1000 [09:13<47:23,  3.40s/it][Succeeded / Failed / Skipped / Total] 33 / 129 / 1 / 163:  16%|█▋        | 163/1000 [09:13<47:23,  3.40s/it][Succeeded / Failed / Skipped / Total] 33 / 129 / 1 / 163:  16%|█▋        | 164/1000 [09:15<47:11,  3.39s/it]Generates a new CSRF token . --> Generate an administrative CsrfToken . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[administrative]] ( HttpServletRequest request ) { return wrap ( request , this . [[timo]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 160 ---------------------------------------------
Authorize using access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[cuchi]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 161 ---------------------------------------------
Display admin page --> persevere persevere --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[persevere]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[biryani]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[biryani]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[biryani]] ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Add a permission to a contact . --> Adds a bakas to a steakhouse --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[bakas]] ( AddPermission addPermission , BindingResult result , ModelMap [[steakhouse]] ) { addPermissionValidator . validate ( [[bakas]] , result ) ; if ( result . hasErrors ( ) ) { [[steakhouse]] . put ( "recipients" , listRecipients ( ) ) ; [[steakhouse]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[bakas]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[bakas]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[bakas]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[steakhouse]] . put ( "recipients" , listRecipients ( ) ) ; [[steakhouse]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 163 ---------------------------------------------
Delete a permission . --> Delete ornaments . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[ornaments]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[clippers]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[clippers]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 130 / 1 / 164:  16%|█▋        | 164/1000 [09:15<47:11,  3.39s/it][Succeeded / Failed / Skipped / Total] 33 / 130 / 1 / 164:  16%|█▋        | 165/1000 [09:19<47:10,  3.39s/it][Succeeded / Failed / Skipped / Total] 34 / 130 / 1 / 165:  16%|█▋        | 165/1000 [09:19<47:10,  3.39s/it][Succeeded / Failed / Skipped / Total] 34 / 130 / 1 / 165:  17%|█▋        | 166/1000 [09:20<46:55,  3.38s/it][Succeeded / Failed / Skipped / Total] 35 / 130 / 1 / 166:  17%|█▋        | 166/1000 [09:20<46:55,  3.38s/it][Succeeded / Failed / Skipped / Total] 35 / 130 / 1 / 166:  17%|█▋        | 167/1000 [09:26<47:03,  3.39s/it][Succeeded / Failed / Skipped / Total] 36 / 130 / 1 / 167:  17%|█▋        | 167/1000 [09:26<47:03,  3.39s/it][Succeeded / Failed / Skipped / Total] 36 / 130 / 1 / 167:  17%|█▋        | 168/1000 [09:28<46:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 36 / 131 / 1 / 168:  17%|█▋        | 168/1000 [09:28<46:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 36 / 131 / 1 / 168:  17%|█▋        | 169/1000 [09:29<46:41,  3.37s/it][Succeeded / Failed / Skipped / Total] 36 / 132 / 1 / 169:  17%|█▋        | 169/1000 [09:29<46:41,  3.37s/it][Succeeded / Failed / Skipped / Total] 36 / 132 / 1 / 169:  17%|█▋        | 170/1000 [09:34<46:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 37 / 132 / 1 / 170:  17%|█▋        | 170/1000 [09:34<46:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 37 / 132 / 1 / 170:  17%|█▋        | 171/1000 [09:37<46:42,  3.38s/it]Display the add permission page for a contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[disgusting]] ( @ RequestParam ( "contactId" ) long [[girlfriends]] ) { Contact contact = contactManager . getById ( [[girlfriends]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 165 ---------------------------------------------
Creates a user details resource factory bean from a string . --> Factory for erogenous users . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[erogenous]] ( String users ) { InMemoryResource [[fingertip]] = new InMemoryResource ( users ) ; return fromResource ( [[fingertip]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 166 ---------------------------------------------
Returns the role with the default prefix if the prefix is null or empty . --> clarendon akeelah akeelah + anya --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[clarendon]] ( String [[akeelah]] , String [[anya]] ) { if ( [[anya]] == null ) { return [[anya]] ; } if ( [[akeelah]] == null || [[akeelah]] . length ( ) == 0 ) { return [[anya]] ; } if ( [[anya]] . startsWith ( [[akeelah]] ) ) { return [[anya]] ; } return [[akeelah]] + [[anya]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 167 ---------------------------------------------
Returns the values of an attribute . --> Mendoza tennis . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[mendoza]] ( String [[deleted]] ) { List < String > [[tennis]] = null ; if ( attributes != null ) { [[tennis]] = attributes . get ( [[deleted]] ) ; } if ( [[tennis]] == null ) { [[tennis]] = Collections . emptyList ( ) ; } return [[tennis]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
Decodes a byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[unsporting]] ( byte [ ] [[protestants]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[protestants]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Gets the first attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[however]] ( String [[peet]] ) { List < String > [[archeologists]] = getAttributeValues ( [[peet]] ) ; if ( [[archeologists]] . isEmpty ( ) ) { return null ; } else { return [[archeologists]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 170 ---------------------------------------------
Encodes a CharSequence to a byte array . --> Bombarded a CharSequence to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[bombarded]] ( CharSequence [[admonished]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[admonished]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 132 / 1 / 171:  17%|█▋        | 171/1000 [09:37<46:42,  3.38s/it][Succeeded / Failed / Skipped / Total] 38 / 132 / 1 / 171:  17%|█▋        | 172/1000 [09:44<46:53,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 133 / 1 / 172:  17%|█▋        | 172/1000 [09:44<46:53,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 133 / 1 / 172:  17%|█▋        | 173/1000 [09:48<46:52,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 134 / 1 / 173:  17%|█▋        | 173/1000 [09:48<46:52,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 134 / 1 / 173:  17%|█▋        | 174/1000 [09:50<46:44,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 135 / 1 / 174:  17%|█▋        | 174/1000 [09:50<46:44,  3.40s/it][Succeeded / Failed / Skipped / Total] 38 / 135 / 1 / 174:  18%|█▊        | 175/1000 [09:57<46:57,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 135 / 1 / 175:  18%|█▊        | 175/1000 [09:57<46:57,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 135 / 1 / 175:  18%|█▊        | 176/1000 [09:59<46:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 136 / 1 / 176:  18%|█▊        | 176/1000 [09:59<46:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 136 / 1 / 176:  18%|█▊        | 177/1000 [10:03<46:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 137 / 1 / 177:  18%|█▊        | 177/1000 [10:03<46:48,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 137 / 1 / 177:  18%|█▊        | 178/1000 [10:05<46:35,  3.40s/it]Add a new contact . --> Riflemen an allegations --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[riflemen]] ( WebContact [[allegations]] , BindingResult result ) { validator . validate ( [[allegations]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[allegations]] . getName ( ) , [[allegations]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Find the attributes that are specified for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[antidote]] ( Method [[earnestness]] , Class < ? > [[chantel]] ) { if ( [[chantel]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[earnestness]] , [[chantel]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[methodMap]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[neutrons]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[metabolism]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[inconsistent]] ( ) { Set < ConfigAttribute > [[forsworn]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[reported]] : methodMap . values ( ) ) { [[forsworn]] . addAll ( [[reported]] ) ; } return [[forsworn]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Returns true if the method name matches the mapped method name . --> comet tinfoil eternity --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[comet]] ( String [[tinfoil]] , String [[eternity]] ) { return ( [[eternity]] . endsWith ( "*" ) && [[tinfoil]] . startsWith ( [[eternity]] . substring ( 0 , [[eternity]] . length ( ) - 1 ) ) ) || ( [[eternity]] . startsWith ( "*" ) && [[tinfoil]] . endsWith ( [[eternity]] . substring ( 1 , [[eternity]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = False ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = True ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = False ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = True ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
Configure any request . --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[smirking]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[smirking]] = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 138 / 1 / 178:  18%|█▊        | 178/1000 [10:05<46:35,  3.40s/it][Succeeded / Failed / Skipped / Total] 39 / 138 / 1 / 178:  18%|█▊        | 179/1000 [10:12<46:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 39 / 139 / 1 / 179:  18%|█▊        | 179/1000 [10:12<46:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 39 / 139 / 1 / 179:  18%|█▊        | 180/1000 [10:13<46:34,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 140 / 1 / 180:  18%|█▊        | 180/1000 [10:13<46:34,  3.41s/it][Succeeded / Failed / Skipped / Total] 39 / 140 / 1 / 180:  18%|█▊        | 181/1000 [10:14<46:21,  3.40s/it][Succeeded / Failed / Skipped / Total] 39 / 141 / 1 / 181:  18%|█▊        | 181/1000 [10:14<46:21,  3.40s/it][Succeeded / Failed / Skipped / Total] 39 / 141 / 1 / 181:  18%|█▊        | 182/1000 [10:19<46:22,  3.40s/it][Succeeded / Failed / Skipped / Total] 39 / 142 / 1 / 182:  18%|█▊        | 182/1000 [10:19<46:22,  3.40s/it][Succeeded / Failed / Skipped / Total] 39 / 142 / 1 / 182:  18%|█▊        | 183/1000 [10:21<46:13,  3.39s/it][Succeeded / Failed / Skipped / Total] 40 / 142 / 1 / 183:  18%|█▊        | 183/1000 [10:21<46:13,  3.39s/it][Succeeded / Failed / Skipped / Total] 40 / 142 / 1 / 183:  18%|█▊        | 184/1000 [10:22<46:02,  3.39s/it][Succeeded / Failed / Skipped / Total] 41 / 142 / 1 / 184:  18%|█▊        | 184/1000 [10:22<46:02,  3.39s/it][Succeeded / Failed / Skipped / Total] 41 / 142 / 1 / 184:  18%|█▊        | 185/1000 [10:26<45:58,  3.38s/it]Handles a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[abridged]] ( String [[adrienne]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[adrienne]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[macadamia]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[brain]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[brain]] . size ( ) ) ; return [[brain]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[samara]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Gets a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[salamander]] ( Class < ? > [[analogue]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[analogue]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[analogue]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[ornaments]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Extract the SHA prefix from a string . --> Hoots a césar --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[hoots]] ( String [[césar]] ) { if ( ! [[césar]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[césar]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[césar]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Check for duplicate filters . --> Marqués des filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[marqués]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 143 / 1 / 185:  18%|█▊        | 185/1000 [10:26<45:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 41 / 143 / 1 / 185:  19%|█▊        | 186/1000 [10:32<46:06,  3.40s/it][Succeeded / Failed / Skipped / Total] 41 / 144 / 1 / 186:  19%|█▊        | 186/1000 [10:32<46:06,  3.40s/it][Succeeded / Failed / Skipped / Total] 41 / 144 / 1 / 186:  19%|█▊        | 187/1000 [10:32<45:50,  3.38s/it][Succeeded / Failed / Skipped / Total] 41 / 145 / 1 / 187:  19%|█▊        | 187/1000 [10:32<45:50,  3.38s/it][Succeeded / Failed / Skipped / Total] 41 / 145 / 1 / 187:  19%|█▉        | 188/1000 [10:41<46:11,  3.41s/it][Succeeded / Failed / Skipped / Total] 41 / 146 / 1 / 188:  19%|█▉        | 188/1000 [10:41<46:11,  3.41s/it][Succeeded / Failed / Skipped / Total] 41 / 146 / 1 / 188:  19%|█▉        | 189/1000 [10:45<46:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 146 / 1 / 189:  19%|█▉        | 189/1000 [10:45<46:11,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 146 / 1 / 189:  19%|█▉        | 190/1000 [10:50<46:13,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 147 / 1 / 190:  19%|█▉        | 190/1000 [10:50<46:13,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 147 / 1 / 190:  19%|█▉        | 191/1000 [10:53<46:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 148 / 1 / 191:  19%|█▉        | 191/1000 [10:53<46:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 148 / 1 / 191:  19%|█▉        | 192/1000 [10:57<46:05,  3.42s/it]Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[beggining]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 186 ---------------------------------------------
The pre - authenticated entry point is called . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[briefcases]] ( HttpServletRequest [[bergère]] , HttpServletResponse response , AuthenticationException [[admire]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[engagements]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Extracts the cause of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[billows]] ( Throwable [[cadres]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[cadres]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[cadres]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 189 ---------------------------------------------
Checks if two byte arrays are equal . --> Returns true if expected and humboldt are equal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return False ; } int [[result]] = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { [[result]] |= expected [ i ] ^ [[actual]] [ i ] ; } return [[result]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[equaled]] ( byte [ ] expected , byte [ ] [[humboldt]] ) { if ( expected . length != [[humboldt]] . length ) { return False ; } int [[parachutist]] = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { [[parachutist]] |= expected [ i ] ^ [[humboldt]] [ i ] ; } return [[parachutist]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Convert a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : userAuthorities ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[decathlon]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[hyung]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[ruslan]] : userAuthorities ) { [[hyung]] . add ( [[ruslan]] . getAuthority ( ) ) ; } return [[hyung]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[sequoia]] ( String [[kamakura]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[kamakura]] ) , ( ) -> "'" + [[kamakura]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[kamakura]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 149 / 1 / 192:  19%|█▉        | 192/1000 [10:57<46:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 149 / 1 / 192:  19%|█▉        | 193/1000 [11:00<45:59,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 150 / 1 / 193:  19%|█▉        | 193/1000 [11:00<45:59,  3.42s/it][Succeeded / Failed / Skipped / Total] 42 / 150 / 1 / 193:  19%|█▉        | 194/1000 [11:09<46:23,  3.45s/it][Succeeded / Failed / Skipped / Total] 42 / 151 / 1 / 194:  19%|█▉        | 194/1000 [11:09<46:23,  3.45s/it][Succeeded / Failed / Skipped / Total] 42 / 151 / 1 / 194:  20%|█▉        | 195/1000 [11:10<46:08,  3.44s/it][Succeeded / Failed / Skipped / Total] 42 / 152 / 1 / 195:  20%|█▉        | 195/1000 [11:10<46:08,  3.44s/it][Succeeded / Failed / Skipped / Total] 42 / 152 / 1 / 195:  20%|█▉        | 196/1000 [11:12<45:59,  3.43s/it][Succeeded / Failed / Skipped / Total] 43 / 152 / 1 / 196:  20%|█▉        | 196/1000 [11:12<45:59,  3.43s/it][Succeeded / Failed / Skipped / Total] 43 / 152 / 1 / 196:  20%|█▉        | 197/1000 [11:24<46:28,  3.47s/it][Succeeded / Failed / Skipped / Total] 43 / 153 / 1 / 197:  20%|█▉        | 197/1000 [11:24<46:28,  3.47s/it][Succeeded / Failed / Skipped / Total] 43 / 153 / 1 / 197:  20%|█▉        | 198/1000 [11:30<46:35,  3.49s/it]Register an access manager . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[id]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[id]] ) ) ; return [[id]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[hurtin]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[baldie]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[baldie]] ) ) ; return [[baldie]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the function to use when resolving hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[ganesha]] ( Function < HttpServletRequest , Map < String , String > > [[aphid]] ) { Assert . notNull ( [[aphid]] , "resolveHiddenInputs cannot be null" ) ; this . [[gaseous]] = [[aphid]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Returns an attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[kellerman]] ( String [[birnbaum]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[birnbaum]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 195 ---------------------------------------------
Returns true if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[rêve]] ( String [[melancholia]] ) { if ( [[melancholia]] == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[melancholia]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Convert a string identifier to a class identifier . --> isabel kiosk wanna --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[isabel]] ( Serializable [[kiosk]] , ResultSet [[wanna]] ) throws SQLException { if ( isString ( [[kiosk]] ) && hasValidClassIdType ( [[wanna]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[wanna]] ) ) ) { [[kiosk]] = convertFromStringTo ( ( String ) [[kiosk]] , classIdTypeFrom ( [[wanna]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
Build the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String [[pathInfo]] , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( [[pathInfo]] != null ) { url . append ( [[pathInfo]] ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[animosity]] ( String servletPath , String requestURI , String contextPath , String [[wiedersehen]] , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( [[wiedersehen]] != null ) { url . append ( [[wiedersehen]] ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
[Succeeded / Failed / Skipped / Total] 44 / 153 / 1 / 198:  20%|█▉        | 198/1000 [11:30<46:35,  3.49s/it][Succeeded / Failed / Skipped / Total] 44 / 153 / 1 / 198:  20%|█▉        | 199/1000 [11:33<46:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 44 / 154 / 1 / 199:  20%|█▉        | 199/1000 [11:33<46:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 44 / 154 / 1 / 199:  20%|██        | 200/1000 [11:34<46:17,  3.47s/it][Succeeded / Failed / Skipped / Total] 44 / 155 / 1 / 200:  20%|██        | 200/1000 [11:34<46:17,  3.47s/it][Succeeded / Failed / Skipped / Total] 44 / 155 / 1 / 200:  20%|██        | 201/1000 [11:38<46:14,  3.47s/it][Succeeded / Failed / Skipped / Total] 45 / 155 / 1 / 201:  20%|██        | 201/1000 [11:38<46:14,  3.47s/it][Succeeded / Failed / Skipped / Total] 45 / 155 / 1 / 201:  20%|██        | 202/1000 [11:39<46:05,  3.47s/it][Succeeded / Failed / Skipped / Total] 46 / 155 / 1 / 202:  20%|██        | 202/1000 [11:39<46:05,  3.47s/it][Succeeded / Failed / Skipped / Total] 46 / 155 / 1 / 202:  20%|██        | 203/1000 [11:48<46:23,  3.49s/it]--------------------------------------------- Result 198 ---------------------------------------------
Create or update an object identity . --> Liefert den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den den --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[cautionary]] ( ObjectIdentity object , Sid owner ) { Long [[denny]] = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long [[fingertip]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[fingertip]] , object . getIdentifier ( ) . toString ( ) , [[denny]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
Creates the entries for the given ACL . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[postponement]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 200 ---------------------------------------------
Update the ObjectIdentity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , [[ownerSid]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[testicle]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[kilometers]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int count = jdbcOperations . update ( [[testicle]] , parentId , [[kilometers]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 201 ---------------------------------------------
Matches any exchange . --> Balder der angegebenen ServerWebExchangeMatcher zurueck . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[balder]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 202 ---------------------------------------------
Save the request . --> Hacky hacky hacky hacky --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[hacky]] ( HttpServletRequest request , HttpServletResponse [[adolescent]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 203 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 155 / 1 / 203:  20%|██        | 203/1000 [11:48<46:23,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 155 / 1 / 203:  20%|██        | 204/1000 [11:51<46:16,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 156 / 1 / 204:  20%|██        | 204/1000 [11:51<46:16,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 156 / 1 / 204:  20%|██        | 205/1000 [11:54<46:09,  3.48s/it][Succeeded / Failed / Skipped / Total] 47 / 157 / 1 / 205:  20%|██        | 205/1000 [11:54<46:09,  3.48s/it][Succeeded / Failed / Skipped / Total] 47 / 157 / 1 / 205:  21%|██        | 206/1000 [11:55<45:56,  3.47s/it][Succeeded / Failed / Skipped / Total] 47 / 158 / 1 / 206:  21%|██        | 206/1000 [11:55<45:56,  3.47s/it][Succeeded / Failed / Skipped / Total] 47 / 158 / 1 / 206:  21%|██        | 207/1000 [12:05<46:19,  3.51s/it][Succeeded / Failed / Skipped / Total] 47 / 159 / 1 / 207:  21%|██        | 207/1000 [12:05<46:19,  3.51s/it][Succeeded / Failed / Skipped / Total] 47 / 159 / 1 / 207:  21%|██        | 208/1000 [12:05<46:04,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 160 / 1 / 208:  21%|██        | 208/1000 [12:05<46:04,  3.49s/it][Succeeded / Failed / Skipped / Total] 47 / 160 / 1 / 208:  21%|██        | 209/1000 [12:06<45:48,  3.47s/it][Succeeded / Failed / Skipped / Total] 48 / 160 / 1 / 209:  21%|██        | 209/1000 [12:06<45:48,  3.47s/it][Succeeded / Failed / Skipped / Total] 48 / 160 / 1 / 209:  21%|██        | 210/1000 [12:06<45:34,  3.46s/it]Returns a server web exchange matcher for the given path patterns . --> wannabe wannabe als PathPatternParserServerWebExchangeMatcher --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[wannabe]] ( HttpMethod method , String ... [[alongwith]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[alongwith]] . length ) ; for ( String pattern : [[alongwith]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 204 ---------------------------------------------
Returns a new HexEncodingTextEncryptor that encrypts the given password using the given salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[reunite]] ( CharSequence [[jani]] , CharSequence [[acrobats]] ) { return new HexEncodingTextEncryptor ( stronger ( [[jani]] , [[acrobats]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Creates a text encryptor for the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[fundraiser]] ( CharSequence [[muy]] , CharSequence [[fortification]] ) { return new HexEncodingTextEncryptor ( standard ( [[muy]] , [[fortification]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Queryable text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[chloroform]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Determine the target url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[bathsheba]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 208 ---------------------------------------------
Write the headers to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[alsace]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[alsace]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[alsace]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[alsace]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[alsace]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[alsace]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 209 ---------------------------------------------
Determine the target URL . --> Carmelita . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[carmelita]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[carmelita]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 210 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 161 / 1 / 210:  21%|██        | 210/1000 [12:06<45:34,  3.46s/it][Succeeded / Failed / Skipped / Total] 48 / 161 / 1 / 210:  21%|██        | 211/1000 [12:10<45:32,  3.46s/it][Succeeded / Failed / Skipped / Total] 49 / 161 / 1 / 211:  21%|██        | 211/1000 [12:10<45:32,  3.46s/it][Succeeded / Failed / Skipped / Total] 49 / 161 / 1 / 211:  21%|██        | 212/1000 [12:17<45:42,  3.48s/it][Succeeded / Failed / Skipped / Total] 49 / 162 / 1 / 212:  21%|██        | 212/1000 [12:17<45:42,  3.48s/it][Succeeded / Failed / Skipped / Total] 49 / 163 / 1 / 213:  21%|██▏       | 213/1000 [12:17<45:26,  3.46s/it][Succeeded / Failed / Skipped / Total] 49 / 163 / 1 / 213:  21%|██▏       | 214/1000 [12:25<45:39,  3.48s/it][Succeeded / Failed / Skipped / Total] 50 / 163 / 1 / 214:  21%|██▏       | 214/1000 [12:25<45:39,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 163 / 1 / 215:  22%|██▏       | 215/1000 [12:29<45:36,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 163 / 1 / 215:  22%|██▏       | 216/1000 [12:32<45:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 164 / 1 / 216:  22%|██▏       | 216/1000 [12:32<45:30,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 165 / 1 / 217:  22%|██▏       | 217/1000 [12:36<45:29,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 165 / 1 / 217:  22%|██▏       | 218/1000 [12:40<45:28,  3.49s/it]Sets the target url parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[brewing]] ) { if ( [[brewing]] != null ) { Assert . hasText ( [[brewing]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[brewing]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 211 ---------------------------------------------
Create shared objects . --> Liefert die SharedObjects . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[hung]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[hung]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[hung]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[hung]] . put ( ApplicationContext . class , context ) ; [[hung]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[hung]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[hung]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
Build a DistinguishedName for the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[goddammit]] ( String username ) { DistinguishedName [[guild]] = new DistinguishedName ( userDnBase ) ; [[guild]] . add ( usernameAttribute , username ) ; return [[guild]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 213 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[jihadi]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Returns the directory with the immediate parent populated . --> Get antenna . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[parentDirectoryId]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[antenna]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[devastated]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[devastated]] != null && ! [[devastated]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 215 ---------------------------------------------
Internal parse date . --> Returns the diggity of a rani --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { date = [[formats]] [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[diggity]] ( String [[rani]] , DateFormat [ ] [[coleen]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[coleen]] . length ) ; i ++ ) { try { date = [[coleen]] [ i ] . parse ( [[rani]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 216 ---------------------------------------------
Update the cache with the given key and value --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[seton]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 217 ---------------------------------------------
Sets the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[belladonna]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 218 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 166 / 1 / 218:  22%|██▏       | 218/1000 [12:40<45:28,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 167 / 1 / 219:  22%|██▏       | 219/1000 [12:42<45:17,  3.48s/it][Succeeded / Failed / Skipped / Total] 51 / 167 / 1 / 219:  22%|██▏       | 220/1000 [12:43<45:05,  3.47s/it][Succeeded / Failed / Skipped / Total] 51 / 168 / 1 / 220:  22%|██▏       | 220/1000 [12:43<45:05,  3.47s/it][Succeeded / Failed / Skipped / Total] 51 / 169 / 1 / 221:  22%|██▏       | 221/1000 [12:52<45:24,  3.50s/it][Succeeded / Failed / Skipped / Total] 51 / 169 / 1 / 221:  22%|██▏       | 222/1000 [12:54<45:13,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 170 / 1 / 222:  22%|██▏       | 222/1000 [12:54<45:13,  3.49s/it][Succeeded / Failed / Skipped / Total] 51 / 170 / 1 / 222:  22%|██▏       | 223/1000 [12:58<45:13,  3.49s/it][Succeeded / Failed / Skipped / Total] 52 / 170 / 1 / 223:  22%|██▏       | 223/1000 [12:58<45:13,  3.49s/it][Succeeded / Failed / Skipped / Total] 52 / 170 / 1 / 223:  22%|██▏       | 224/1000 [12:59<45:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 171 / 1 / 224:  22%|██▏       | 224/1000 [12:59<45:01,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 171 / 1 / 224:  22%|██▎       | 225/1000 [13:00<44:49,  3.47s/it]Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[feasibility]] ( final Subject [[blotto]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[blotto]] ) ; } String [[abuela]] = null ; if ( [[blotto]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 219 ---------------------------------------------
Sets the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean [[alreadySet]] = False ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { [[alreadySet]] = existing . equals ( [[loginConfigUrl]] ) ; if ( [[alreadySet]] ) { break ; } n ++ ; } if ( ! [[alreadySet]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[abomination]] ( ) throws IOException { String [[drummer]] = convertLoginConfigToUrl ( ) ; boolean [[coronado]] = False ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { [[coronado]] = existing . equals ( [[drummer]] ) ; if ( [[coronado]] ) { break ; } n ++ ; } if ( ! [[coronado]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[drummer]] ) ; Security . setProperty ( key , [[drummer]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 220 ---------------------------------------------
Returns a list of webSphere groups . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[keitaro]] ( final String [[poets]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 221 ---------------------------------------------
Build a DistinguishedName for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[farrar]] ( String [[traversing]] ) { DistinguishedName [[kyung]] = new DistinguishedName ( groupSearchBase ) ; [[kyung]] . add ( groupRoleAttributeName , [[traversing]] . toLowerCase ( ) ) ; return [[kyung]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Change user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[squandering]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 223 ---------------------------------------------
Get the list of filters for the given url . --> Get a list of all filters --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > getFilters ( String [[url]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String [[pandas]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[pandas]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Copy details from the source Authentication to the destination Authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[josefina]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 172 / 1 / 225:  22%|██▎       | 225/1000 [13:00<44:49,  3.47s/it][Succeeded / Failed / Skipped / Total] 52 / 172 / 1 / 225:  23%|██▎       | 226/1000 [13:06<44:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 173 / 1 / 226:  23%|██▎       | 226/1000 [13:06<44:54,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 173 / 1 / 226:  23%|██▎       | 227/1000 [13:09<44:49,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 174 / 1 / 227:  23%|██▎       | 227/1000 [13:09<44:49,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 174 / 1 / 227:  23%|██▎       | 228/1000 [13:10<44:36,  3.47s/it][Succeeded / Failed / Skipped / Total] 52 / 175 / 1 / 228:  23%|██▎       | 228/1000 [13:10<44:36,  3.47s/it][Succeeded / Failed / Skipped / Total] 52 / 175 / 1 / 228:  23%|██▎       | 229/1000 [13:17<44:46,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 176 / 1 / 229:  23%|██▎       | 229/1000 [13:17<44:46,  3.48s/it][Succeeded / Failed / Skipped / Total] 52 / 176 / 1 / 229:  23%|██▎       | 230/1000 [13:18<44:32,  3.47s/it][Succeeded / Failed / Skipped / Total] 52 / 177 / 1 / 230:  23%|██▎       | 230/1000 [13:18<44:32,  3.47s/it][Succeeded / Failed / Skipped / Total] 52 / 177 / 1 / 230:  23%|██▎       | 231/1000 [13:18<44:19,  3.46s/it][Succeeded / Failed / Skipped / Total] 53 / 177 / 1 / 231:  23%|██▎       | 231/1000 [13:18<44:19,  3.46s/it][Succeeded / Failed / Skipped / Total] 53 / 177 / 1 / 231:  23%|██▎       | 232/1000 [13:24<44:22,  3.47s/it][Succeeded / Failed / Skipped / Total] 53 / 178 / 1 / 232:  23%|██▎       | 232/1000 [13:24<44:22,  3.47s/it][Succeeded / Failed / Skipped / Total] 53 / 178 / 1 / 232:  23%|██▎       | 233/1000 [13:31<44:31,  3.48s/it]Checks if the maximum number of sessions allowed for this principal is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int [[allowableSessions]] , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[pescara]] ( List < SessionInformation > sessions , int [[evicted]] , SessionRegistry [[benda]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[evicted]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 226 ---------------------------------------------
Returns the list of filters that match the request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[excavate]] ( HttpServletRequest [[photosynthesis]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[photosynthesis]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[apprenticeship]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[apprenticeship]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Updates the session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[profess]] ( Map < String , Object > [[spotless]] ) { notNull ( [[spotless]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[spotless]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Gets the full DN . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[drummer]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 230 ---------------------------------------------
Adds a list of filters to the RestAssured . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[bourdieu]] ( List < Filter > [[atelier]] ) { Validate . notNull ( [[bourdieu]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[bourdieu]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a Preemptive basic authentication scheme . --> Create a PreemptiveBasicAuthScheme based on bradbury and password --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[anabelle]] ( String [[bradbury]] , String password ) { final PreemptiveBasicAuthScheme [[accost]] = new PreemptiveBasicAuthScheme ( ) ; [[accost]] . setUserName ( [[bradbury]] ) ; [[accost]] . setPassword ( password ) ; return [[accost]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[berliners]] ( Filter [[gibbons]] , Filter ... [[hesitations]] ) { Validate . notNull ( [[gibbons]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[gibbons]] ) ; if ( [[hesitations]] != null ) { Collections . addAll ( RestAssured . filters , [[hesitations]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 179 / 1 / 233:  23%|██▎       | 233/1000 [13:31<44:31,  3.48s/it][Succeeded / Failed / Skipped / Total] 53 / 179 / 1 / 233:  23%|██▎       | 234/1000 [13:35<44:29,  3.48s/it][Succeeded / Failed / Skipped / Total] 53 / 180 / 1 / 234:  23%|██▎       | 234/1000 [13:35<44:29,  3.48s/it][Succeeded / Failed / Skipped / Total] 53 / 180 / 1 / 234:  24%|██▎       | 235/1000 [13:39<44:26,  3.49s/it][Succeeded / Failed / Skipped / Total] 53 / 181 / 1 / 235:  24%|██▎       | 235/1000 [13:39<44:26,  3.49s/it][Succeeded / Failed / Skipped / Total] 53 / 181 / 1 / 235:  24%|██▎       | 236/1000 [13:44<44:27,  3.49s/it][Succeeded / Failed / Skipped / Total] 54 / 181 / 1 / 236:  24%|██▎       | 236/1000 [13:44<44:27,  3.49s/it][Succeeded / Failed / Skipped / Total] 54 / 181 / 1 / 236:  24%|██▎       | 237/1000 [13:45<44:16,  3.48s/it][Succeeded / Failed / Skipped / Total] 54 / 182 / 1 / 237:  24%|██▎       | 237/1000 [13:45<44:16,  3.48s/it][Succeeded / Failed / Skipped / Total] 54 / 182 / 1 / 237:  24%|██▍       | 238/1000 [13:46<44:04,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 183 / 1 / 238:  24%|██▍       | 238/1000 [13:46<44:04,  3.47s/it][Succeeded / Failed / Skipped / Total] 54 / 183 / 1 / 238:  24%|██▍       | 239/1000 [13:56<44:22,  3.50s/it][Succeeded / Failed / Skipped / Total] 54 / 184 / 1 / 239:  24%|██▍       | 239/1000 [13:56<44:22,  3.50s/it][Succeeded / Failed / Skipped / Total] 54 / 184 / 1 / 239:  24%|██▍       | 240/1000 [13:57<44:10,  3.49s/it]Sets up a proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[avocados]] ( URI [[anesthesia]] ) { if ( [[anesthesia]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[avocados]] ( new ProxySpecification ( [[anesthesia]] . getHost ( ) , [[anesthesia]] . getPort ( ) , [[anesthesia]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[invested]] ( String userName , String [[chewed]] ) { final BasicAuthScheme [[rupert]] = new BasicAuthScheme ( ) ; [[rupert]] . setUserName ( userName ) ; [[rupert]] . setPassword ( [[chewed]] ) ; return [[rupert]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Creates a form authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[ittle]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 236 ---------------------------------------------
Sets the default charset for the query parameter . --> Returns a copy of this config with a facilitated encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[facilitated]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 237 ---------------------------------------------
Creates a new RestAssuredConfig configured with the specified redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[gamblin]] ( RedirectConfig [[pylons]] ) { notNull ( [[pylons]] , "Redirect config" ) ; return new RestAssuredConfig ( [[pylons]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 238 ---------------------------------------------
Creates a NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String [[workstation]] , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( [[workstation]] ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[stemmed]] ( String userName , String password , String [[boeing]] , String [[bataan]] ) { final NTLMAuthScheme [[unsolicited]] = new NTLMAuthScheme ( ) ; [[unsolicited]] . setUserName ( userName ) ; [[unsolicited]] . setPassword ( password ) ; [[unsolicited]] . setWorkstation ( [[boeing]] ) ; [[unsolicited]] . setDomain ( [[bataan]] ) ; return [[unsolicited]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 239 ---------------------------------------------
Creates a new RestAssuredMockMvcConfig with the specified log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[condensers]] ( LogConfig logConfig ) { notNull ( [[condensers]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[condensers]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 185 / 1 / 240:  24%|██▍       | 240/1000 [13:57<44:10,  3.49s/it][Succeeded / Failed / Skipped / Total] 54 / 185 / 1 / 240:  24%|██▍       | 241/1000 [13:58<43:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 54 / 186 / 1 / 241:  24%|██▍       | 241/1000 [13:58<43:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 54 / 186 / 1 / 241:  24%|██▍       | 242/1000 [13:58<43:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 186 / 1 / 242:  24%|██▍       | 242/1000 [13:58<43:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 186 / 1 / 242:  24%|██▍       | 243/1000 [14:06<43:56,  3.48s/it][Succeeded / Failed / Skipped / Total] 55 / 187 / 1 / 243:  24%|██▍       | 243/1000 [14:06<43:56,  3.48s/it][Succeeded / Failed / Skipped / Total] 55 / 187 / 1 / 243:  24%|██▍       | 244/1000 [14:06<43:42,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 188 / 1 / 244:  24%|██▍       | 244/1000 [14:06<43:42,  3.47s/it][Succeeded / Failed / Skipped / Total] 55 / 188 / 1 / 244:  24%|██▍       | 245/1000 [14:07<43:31,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 189 / 1 / 245:  24%|██▍       | 245/1000 [14:07<43:31,  3.46s/it][Succeeded / Failed / Skipped / Total] 55 / 189 / 1 / 245:  25%|██▍       | 246/1000 [14:09<43:22,  3.45s/it]Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[dolphin]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[dolphin]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[["Keren" == "Keren"]]" == "[["Keren" == "Keren"]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the jaxb object mapper factory . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[banana]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[banana]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 242 ---------------------------------------------
Prints the response body to the given output stream . --> Abdallah abdallah . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream [[stream]] , LogDetail [[logDetail]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[logDetail]] == ALL || [[logDetail]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[logDetail]] == ALL || [[logDetail]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[logDetail]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[logDetail]] == ALL || [[logDetail]] == BODY ) { String [[responseBodyToAppend]] ; if ( shouldPrettyPrint ) { [[responseBodyToAppend]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[responseBodyToAppend]] = responseBody . asString ( ) ; } if ( [[logDetail]] == ALL && ! isBlank ( [[responseBodyToAppend]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[responseBodyToAppend]] ) ; } String response = builder . toString ( ) ; [[stream]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[abdallah]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream [[qhat]] , LogDetail [[boobs]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[boobs]] == ALL || [[boobs]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[boobs]] == ALL || [[boobs]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[boobs]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[boobs]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[boobs]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[boobs]] == ALL || [[boobs]] == BODY ) { String [[candomblé]] ; if ( shouldPrettyPrint ) { [[candomblé]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[candomblé]] = responseBody . asString ( ) ; } if ( [[boobs]] == ALL && ! isBlank ( [[candomblé]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[candomblé]] ) ; } String response = builder . toString ( ) ; [[qhat]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 243 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[colloquial]] ( SessionConfig sessionConfig ) { notNull ( [[colloquial]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[colloquial]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the object mapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bolting]] ( ObjectMapperConfig [[boogeyman]] ) { notNull ( [[bolting]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[bolting]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified JSON configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[gallardo]] ( JsonConfig [[northwest]] ) { notNull ( [[gallardo]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[gallardo]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
[Succeeded / Failed / Skipped / Total] 55 / 190 / 1 / 246:  25%|██▍       | 246/1000 [14:09<43:22,  3.45s/it][Succeeded / Failed / Skipped / Total] 55 / 190 / 1 / 246:  25%|██▍       | 247/1000 [14:09<43:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 55 / 190 / 2 / 247:  25%|██▍       | 247/1000 [14:09<43:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 55 / 190 / 2 / 247:  25%|██▍       | 248/1000 [14:11<43:02,  3.43s/it][Succeeded / Failed / Skipped / Total] 56 / 190 / 2 / 248:  25%|██▍       | 248/1000 [14:11<43:02,  3.43s/it][Succeeded / Failed / Skipped / Total] 56 / 190 / 2 / 248:  25%|██▍       | 249/1000 [14:11<42:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 57 / 190 / 2 / 249:  25%|██▍       | 249/1000 [14:11<42:48,  3.42s/it][Succeeded / Failed / Skipped / Total] 57 / 190 / 2 / 249:  25%|██▌       | 250/1000 [14:16<42:50,  3.43s/it][Succeeded / Failed / Skipped / Total] 58 / 190 / 2 / 250:  25%|██▌       | 250/1000 [14:16<42:50,  3.43s/it][Succeeded / Failed / Skipped / Total] 58 / 190 / 2 / 250:  25%|██▌       | 251/1000 [14:17<42:39,  3.42s/it][Succeeded / Failed / Skipped / Total] 59 / 190 / 2 / 251:  25%|██▌       | 251/1000 [14:17<42:39,  3.42s/it][Succeeded / Failed / Skipped / Total] 59 / 190 / 2 / 251:  25%|██▌       | 252/1000 [14:18<42:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 60 / 190 / 2 / 252:  25%|██▌       | 252/1000 [14:18<42:26,  3.40s/it][Succeeded / Failed / Skipped / Total] 60 / 190 / 2 / 252:  25%|██▌       | 253/1000 [14:21<42:23,  3.40s/it][Succeeded / Failed / Skipped / Total] 60 / 191 / 2 / 253:  25%|██▌       | 253/1000 [14:21<42:23,  3.40s/it][Succeeded / Failed / Skipped / Total] 60 / 191 / 2 / 253:  25%|██▌       | 254/1000 [14:21<42:10,  3.39s/it]--------------------------------------------- Result 246 ---------------------------------------------
Sets the XML configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[compatible]] ( XmlConfig [[gunboat]] ) { notNull ( [[compatible]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[compatible]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the header configuration . --> Method to create a RestAssuredMockMvcConfig based on a HeaderConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[pituitary]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 249 ---------------------------------------------
Creates a new instance of RestAssuredMockMvcConfig with the specified encoder configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[encoderConfig]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[crashers]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 250 ---------------------------------------------
Sets the mock parameter configuration . --> Returns a new instance of RestAssuredMockMvcConfig with arrays configured . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[arrays]] ( MockMvcParamConfig paramConfig ) { notNull ( [[arrays]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[arrays]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
Returns a new instance of RestAssuredMockMvcConfig with the specified async config . --> Methode anesthesia . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig [[asyncConfig]] ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anesthesia]] ( AsyncConfig [[avocados]] ) { notNull ( [[anesthesia]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[anesthesia]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the multi - part configuration . --> Creates a new instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bowman]] ( MultiPartConfig [[masao]] ) { notNull ( [[bowman]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[bowman]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Allow all hostnames . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[borrowed]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 191 / 2 / 254:  25%|██▌       | 254/1000 [14:21<42:10,  3.39s/it][Succeeded / Failed / Skipped / Total] 61 / 191 / 2 / 254:  26%|██▌       | 255/1000 [14:26<42:11,  3.40s/it][Succeeded / Failed / Skipped / Total] 61 / 192 / 2 / 255:  26%|██▌       | 255/1000 [14:26<42:11,  3.40s/it][Succeeded / Failed / Skipped / Total] 61 / 192 / 2 / 255:  26%|██▌       | 256/1000 [14:33<42:19,  3.41s/it][Succeeded / Failed / Skipped / Total] 62 / 192 / 2 / 256:  26%|██▌       | 256/1000 [14:33<42:19,  3.41s/it][Succeeded / Failed / Skipped / Total] 62 / 192 / 2 / 256:  26%|██▌       | 257/1000 [14:36<42:13,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 192 / 2 / 257:  26%|██▌       | 257/1000 [14:36<42:13,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 192 / 2 / 257:  26%|██▌       | 258/1000 [14:39<42:10,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 193 / 2 / 258:  26%|██▌       | 258/1000 [14:39<42:10,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 193 / 2 / 258:  26%|██▌       | 259/1000 [14:45<42:13,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 194 / 2 / 259:  26%|██▌       | 259/1000 [14:45<42:13,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 194 / 2 / 259:  26%|██▌       | 260/1000 [14:47<42:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 195 / 2 / 260:  26%|██▌       | 260/1000 [14:47<42:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 63 / 195 / 2 / 260:  26%|██▌       | 261/1000 [14:52<42:06,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 196 / 2 / 261:  26%|██▌       | 261/1000 [14:52<42:06,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 196 / 2 / 261:  26%|██▌       | 262/1000 [14:56<42:05,  3.42s/it]Creates a new mock config instance with the specified matcher configuration . --> Excessive cafés . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig [[matcherConfig]] ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[cafés]] ( MatcherConfig [[excessive]] ) { notNull ( [[cafés]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[cafés]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 255 ---------------------------------------------
Declares the given namespaces . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[boynton]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Set the proxy to connect to . --> Dono la clichés --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[dono]] ( String [[clichés]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[clichés]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the default request headers . --> Nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[nooooooo]] ( Map < ? , ? > headers ) { this . [[accusations]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[accusations]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Sets the declared namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[acceptable]] ( String [[harakiri]] , String [[pfizer]] ) { Validate . notEmpty ( [[harakiri]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[pfizer]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[addictions]] = new HashMap < String , String > ( declaredNamespaces ) ; [[addictions]] . put ( [[harakiri]] , [[pfizer]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[addictions]] , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[defaultURI]] . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[billowing]] ( String [[drummer]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[aussi]] . toURI ( ) , [[drummer]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 260 ---------------------------------------------
Adds a header to this multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[slowest]] ( String [[lifesaving]] , String [[alarming]] ) { Validate . notEmpty ( [[lifesaving]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[alarming]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the name of the control . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[columnist]] ( String [[jackie]] ) { Validate . notEmpty ( [[columnist]] , "Control name cannot be empty" ) ; this . controlName = [[columnist]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 197 / 2 / 262:  26%|██▌       | 262/1000 [14:56<42:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 197 / 2 / 262:  26%|██▋       | 263/1000 [14:59<42:01,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 198 / 2 / 263:  26%|██▋       | 263/1000 [14:59<42:01,  3.42s/it][Succeeded / Failed / Skipped / Total] 63 / 198 / 2 / 263:  26%|██▋       | 264/1000 [15:03<41:57,  3.42s/it][Succeeded / Failed / Skipped / Total] 64 / 198 / 2 / 264:  26%|██▋       | 264/1000 [15:03<41:57,  3.42s/it][Succeeded / Failed / Skipped / Total] 64 / 198 / 2 / 264:  26%|██▋       | 265/1000 [15:04<41:49,  3.41s/it][Succeeded / Failed / Skipped / Total] 64 / 199 / 2 / 265:  26%|██▋       | 265/1000 [15:04<41:49,  3.41s/it][Succeeded / Failed / Skipped / Total] 64 / 199 / 2 / 265:  27%|██▋       | 266/1000 [15:05<41:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 199 / 2 / 266:  27%|██▋       | 266/1000 [15:05<41:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 199 / 2 / 266:  27%|██▋       | 267/1000 [15:13<41:46,  3.42s/it][Succeeded / Failed / Skipped / Total] 65 / 200 / 2 / 267:  27%|██▋       | 267/1000 [15:13<41:46,  3.42s/it][Succeeded / Failed / Skipped / Total] 65 / 200 / 2 / 267:  27%|██▋       | 268/1000 [15:14<41:38,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 201 / 2 / 268:  27%|██▋       | 268/1000 [15:14<41:38,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 201 / 2 / 268:  27%|██▋       | 269/1000 [15:15<41:27,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 202 / 2 / 269:  27%|██▋       | 269/1000 [15:15<41:27,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 202 / 2 / 269:  27%|██▋       | 270/1000 [15:15<41:16,  3.39s/it]Reset the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[unoriginal]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
Sets basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[benzi]] ( String host , int port , String [[frazier]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[frazier]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 264 ---------------------------------------------
Adds a header to the response . --> Add an animator to the response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[animator]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Creates a new Headers object with the given header and additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[prejudice]] ( Header header , Header ... [[clichés]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[clichés]] != null ) { Collections . addAll ( headerList , [[clichés]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
Build the response . --> Callback method . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[callback]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Returns a new instance of the DetailedCookieMatcher that matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[profusion]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[profusion]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches a cookie comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[naturel]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Set the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[liqueur]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 270 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 203 / 2 / 270:  27%|██▋       | 270/1000 [15:15<41:16,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 203 / 2 / 270:  27%|██▋       | 271/1000 [15:23<41:24,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 204 / 2 / 271:  27%|██▋       | 271/1000 [15:23<41:24,  3.41s/it][Succeeded / Failed / Skipped / Total] 65 / 204 / 2 / 271:  27%|██▋       | 272/1000 [15:24<41:15,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 205 / 2 / 272:  27%|██▋       | 272/1000 [15:24<41:15,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 205 / 2 / 272:  27%|██▋       | 273/1000 [15:26<41:06,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 206 / 2 / 273:  27%|██▋       | 273/1000 [15:26<41:06,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 206 / 2 / 273:  27%|██▋       | 274/1000 [15:27<40:56,  3.38s/it][Succeeded / Failed / Skipped / Total] 65 / 207 / 2 / 274:  27%|██▋       | 274/1000 [15:27<40:56,  3.38s/it][Succeeded / Failed / Skipped / Total] 65 / 207 / 2 / 274:  28%|██▊       | 275/1000 [15:34<41:04,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 208 / 2 / 275:  28%|██▊       | 275/1000 [15:34<41:04,  3.40s/it][Succeeded / Failed / Skipped / Total] 65 / 208 / 2 / 275:  28%|██▊       | 276/1000 [15:35<40:53,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 209 / 2 / 276:  28%|██▊       | 276/1000 [15:35<40:53,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 209 / 2 / 276:  28%|██▊       | 277/1000 [15:37<40:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 65 / 210 / 2 / 277:  28%|██▊       | 277/1000 [15:37<40:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 65 / 211 / 2 / 278:  28%|██▊       | 278/1000 [15:37<40:35,  3.37s/it][Succeeded / Failed / Skipped / Total] 65 / 211 / 2 / 278:  28%|██▊       | 279/1000 [15:44<40:40,  3.39s/it][Succeeded / Failed / Skipped / Total] 65 / 212 / 2 / 279:  28%|██▊       | 279/1000 [15:44<40:40,  3.39s/it]Matches a cookie with a expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[halted]] ( Matcher < ? super Date > [[facsimile]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[facsimile]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[less]] ( Matcher < ? super String > [[acceptable]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[acceptable]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[cluttered]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[cluttered]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[sakuma]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches all cookies that match the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[wacked]] ( Matcher < ? super Boolean > [[syntax]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[syntax]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Matches a cookie with a version property . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[bragging]] ( Matcher < ? super Integer > [[sarcasm]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[sarcasm]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a new DetailedCookieMatcher that matches cookies with the specified maxAge . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[lusted]] ( Matcher < ? super Integer > [[fitness]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[fitness]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect a header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[macmanus]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 278 ---------------------------------------------
Expects the given header name to match the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[expiry]] ) { spec . header ( headerName , [[expiry]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a new proxy specification with the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[chuckling]] ( String [[baywatch]] ) { return new ProxySpecification ( [[baywatch]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 280 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 212 / 2 / 280:  28%|██▊       | 280/1000 [15:45<40:30,  3.38s/it][Succeeded / Failed / Skipped / Total] 66 / 212 / 2 / 280:  28%|██▊       | 281/1000 [15:45<40:19,  3.36s/it][Succeeded / Failed / Skipped / Total] 66 / 213 / 2 / 281:  28%|██▊       | 281/1000 [15:45<40:19,  3.36s/it][Succeeded / Failed / Skipped / Total] 66 / 214 / 2 / 282:  28%|██▊       | 282/1000 [15:46<40:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 66 / 214 / 2 / 282:  28%|██▊       | 283/1000 [15:49<40:05,  3.35s/it][Succeeded / Failed / Skipped / Total] 67 / 214 / 2 / 283:  28%|██▊       | 283/1000 [15:49<40:05,  3.35s/it][Succeeded / Failed / Skipped / Total] 68 / 214 / 2 / 284:  28%|██▊       | 284/1000 [15:56<40:10,  3.37s/it][Succeeded / Failed / Skipped / Total] 68 / 214 / 2 / 284:  28%|██▊       | 285/1000 [15:59<40:07,  3.37s/it][Succeeded / Failed / Skipped / Total] 68 / 215 / 2 / 285:  28%|██▊       | 285/1000 [15:59<40:07,  3.37s/it][Succeeded / Failed / Skipped / Total] 68 / 215 / 2 / 285:  29%|██▊       | 286/1000 [16:00<39:57,  3.36s/it][Succeeded / Failed / Skipped / Total] 69 / 215 / 2 / 286:  29%|██▊       | 286/1000 [16:00<39:57,  3.36s/it][Succeeded / Failed / Skipped / Total] 69 / 215 / 2 / 286:  29%|██▊       | 287/1000 [16:04<39:55,  3.36s/it][Succeeded / Failed / Skipped / Total] 70 / 215 / 2 / 287:  29%|██▊       | 287/1000 [16:04<39:55,  3.36s/it][Succeeded / Failed / Skipped / Total] 70 / 215 / 2 / 287:  29%|██▉       | 288/1000 [16:05<39:48,  3.35s/it][Succeeded / Failed / Skipped / Total] 71 / 215 / 2 / 288:  29%|██▉       | 288/1000 [16:05<39:48,  3.35s/it][Succeeded / Failed / Skipped / Total] 71 / 215 / 2 / 288:  29%|██▉       | 289/1000 [16:07<39:39,  3.35s/it]Returns a new JsonPathConfig configured with a number return type . --> Returns a new ambar configuration with default parser type gson object mapper factory jackson1 object mapper factory johnzon object mapper factory --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[ambar]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[ambar]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 281 ---------------------------------------------
Sets the default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[counsellor]] ( JsonParserType [[midland]] ) { return new JsonPathConfig ( numberReturnType , [[counsellor]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 282 ---------------------------------------------
Expect a cookie to be set . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[townie]] , String expectedValue ) { spec . cookie ( [[townie]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Enable logging of request and response if validation fails . --> Create a new amulets configuration . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[amulets]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 284 ---------------------------------------------
Adds an attribute to the request . --> Methode antónio . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[antónio]] ( String [[breast]] , Object attributeValue ) { spec . attribute ( [[breast]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Sets the default boundary . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[gagné]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[gagné]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Default logging stream . --> Dieszel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzel denzelzeichen denzelzeichen denzelzeich --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[denzel]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[["Favorably" == "Favorably"]]" == "[["Favorably" == "Favorably"]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[["Favorably" == "Favorably"]]" == "[["Favorably" == "Favorably"]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 287 ---------------------------------------------
Adds additional result handlers to the request . --> Breitbart method . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[breitbart]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> Kung die bullit . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String [[headerValue]] ) { spec . header ( headerName , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[kung]] ( String headerName , String [[bullit]] ) { spec . header ( headerName , [[bullit]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 216 / 2 / 289:  29%|██▉       | 289/1000 [16:07<39:39,  3.35s/it][Succeeded / Failed / Skipped / Total] 71 / 216 / 2 / 289:  29%|██▉       | 290/1000 [16:10<39:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 216 / 2 / 290:  29%|██▉       | 290/1000 [16:10<39:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 216 / 2 / 290:  29%|██▉       | 291/1000 [16:16<39:38,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 217 / 2 / 291:  29%|██▉       | 291/1000 [16:16<39:38,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 217 / 2 / 291:  29%|██▉       | 292/1000 [16:19<39:35,  3.36s/it][Succeeded / Failed / Skipped / Total] 72 / 218 / 2 / 292:  29%|██▉       | 292/1000 [16:19<39:35,  3.36s/it][Succeeded / Failed / Skipped / Total] 72 / 218 / 2 / 292:  29%|██▉       | 293/1000 [16:23<39:31,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 219 / 2 / 293:  29%|██▉       | 293/1000 [16:23<39:31,  3.35s/it][Succeeded / Failed / Skipped / Total] 72 / 219 / 2 / 293:  29%|██▉       | 294/1000 [16:24<39:24,  3.35s/it][Succeeded / Failed / Skipped / Total] 73 / 219 / 2 / 294:  29%|██▉       | 294/1000 [16:24<39:24,  3.35s/it][Succeeded / Failed / Skipped / Total] 73 / 219 / 2 / 294:  30%|██▉       | 295/1000 [16:25<39:14,  3.34s/it][Succeeded / Failed / Skipped / Total] 73 / 220 / 2 / 295:  30%|██▉       | 295/1000 [16:25<39:14,  3.34s/it][Succeeded / Failed / Skipped / Total] 73 / 220 / 2 / 295:  30%|██▉       | 296/1000 [16:25<39:04,  3.33s/it][Succeeded / Failed / Skipped / Total] 73 / 221 / 2 / 296:  30%|██▉       | 296/1000 [16:25<39:04,  3.33s/it][Succeeded / Failed / Skipped / Total] 73 / 221 / 2 / 296:  30%|██▉       | 297/1000 [16:32<39:09,  3.34s/it][Succeeded / Failed / Skipped / Total] 74 / 221 / 2 / 297:  30%|██▉       | 297/1000 [16:32<39:09,  3.34s/it][Succeeded / Failed / Skipped / Total] 74 / 221 / 2 / 297:  30%|██▉       | 298/1000 [16:32<38:59,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 222 / 2 / 298:  30%|██▉       | 298/1000 [16:32<38:59,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 222 / 2 / 298:  30%|██▉       | 299/1000 [16:36<38:56,  3.33s/it]Creates a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[swanning]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[angora]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 290 ---------------------------------------------
Adds a multi - part control . --> Avalanche der Methode avalanche --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[avalanche]] ( String [[ramis]] , String contentBody , String [[arks]] ) { spec . multiPart ( [[ramis]] , [[arks]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[humanely]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[incompatible]] = new HashMap < String , Object > ( httpClientParams ) ; [[incompatible]] . put ( parameterName , parameterValue ) ; return new [[humanely]] ( httpClientFactory , [[incompatible]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
Creates a new HttpClientConfig with the specified HttpClientFactory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[allende]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[allende]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 293 ---------------------------------------------
Sets the HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[gaunt]] ( HttpMultipartMode [[trop]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[gaunt]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the integer value stored at the given path . --> daley daley daley --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[daley]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Adds the specified HTTP client parameters to the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[linguistics]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the value of the property at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[torrents]] = createJsonAssertion ( path , params ) ; final Object [[grilling]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[torrents]] . getResult ( [[grilling]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the byte value stored at the given path . --> Fernanda fernanda dystrophy --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[fernanda]] ( String [[dystrophy]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the short value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public short getShort ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short getShort ( String [[frenzy]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 223 / 2 / 299:  30%|██▉       | 299/1000 [16:36<38:56,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 223 / 2 / 299:  30%|███       | 300/1000 [16:38<38:49,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 224 / 2 / 300:  30%|███       | 300/1000 [16:38<38:49,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 224 / 2 / 300:  30%|███       | 301/1000 [16:40<38:43,  3.32s/it][Succeeded / Failed / Skipped / Total] 74 / 225 / 2 / 301:  30%|███       | 301/1000 [16:40<38:43,  3.32s/it][Succeeded / Failed / Skipped / Total] 74 / 225 / 2 / 301:  30%|███       | 302/1000 [16:47<38:48,  3.34s/it][Succeeded / Failed / Skipped / Total] 74 / 226 / 2 / 302:  30%|███       | 302/1000 [16:47<38:48,  3.34s/it][Succeeded / Failed / Skipped / Total] 74 / 226 / 2 / 302:  30%|███       | 303/1000 [16:50<38:44,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 227 / 2 / 303:  30%|███       | 303/1000 [16:50<38:44,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 227 / 2 / 303:  30%|███       | 304/1000 [16:51<38:35,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 228 / 2 / 304:  30%|███       | 304/1000 [16:51<38:35,  3.33s/it][Succeeded / Failed / Skipped / Total] 74 / 228 / 2 / 304:  30%|███       | 305/1000 [17:00<38:45,  3.35s/it][Succeeded / Failed / Skipped / Total] 74 / 229 / 2 / 305:  30%|███       | 305/1000 [17:00<38:45,  3.35s/it][Succeeded / Failed / Skipped / Total] 74 / 229 / 2 / 305:  31%|███       | 306/1000 [17:01<38:36,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 229 / 2 / 306:  31%|███       | 306/1000 [17:01<38:36,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 229 / 2 / 306:  31%|███       | 307/1000 [17:02<38:27,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 230 / 2 / 307:  31%|███       | 307/1000 [17:02<38:27,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 230 / 2 / 307:  31%|███       | 308/1000 [17:03<38:20,  3.32s/it][Succeeded / Failed / Skipped / Total] 75 / 231 / 2 / 308:  31%|███       | 308/1000 [17:03<38:20,  3.32s/it][Succeeded / Failed / Skipped / Total] 75 / 231 / 2 / 308:  31%|███       | 309/1000 [17:12<38:29,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 232 / 2 / 309:  31%|███       | 309/1000 [17:12<38:29,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 232 / 2 / 309:  31%|███       | 310/1000 [17:16<38:26,  3.34s/it]Returns the float value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[massie]] ( String [[arena]] ) { final Object value = get ( [[arena]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Returns the double value mapped by the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[gagné]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the long value stored at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[dote]] ( String [[aurora]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
Get a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[shelling]] , V > Map < [[shelling]] , V > [[chronicle]] ( String [[kazak]] ) { return get ( [[kazak]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[calorie]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Returns the value of the given path as an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[duplicate]] = getFromPath ( path , "[["Deepening" != "Deepening"]]" != "[["Deepening" != "Deepening"]]" ) ; return getObjectAsType ( [[duplicate]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[incompetent]] ( String key , Object [[swimsuit]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[swimsuit]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request . --> Methode etting als cappuccinos --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[etting]] ( String [[fabienne]] , Object ... [[cappuccinos]] ) { spec . param ( [[fabienne]] , [[cappuccinos]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Gets a list of objects from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[abdallah]] ( String [[handbags]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[handbags]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[aishwarya]] ( String [[consul]] , Collection < ? > parameterValues ) { spec . param ( [[consul]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Sets the form parameter update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[jumbled]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 233 / 2 / 310:  31%|███       | 310/1000 [17:16<38:26,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 233 / 2 / 310:  31%|███       | 311/1000 [17:18<38:21,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 234 / 2 / 311:  31%|███       | 311/1000 [17:18<38:21,  3.34s/it][Succeeded / Failed / Skipped / Total] 75 / 234 / 2 / 311:  31%|███       | 312/1000 [17:20<38:13,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 235 / 2 / 312:  31%|███       | 312/1000 [17:20<38:13,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 235 / 2 / 312:  31%|███▏      | 313/1000 [17:21<38:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 236 / 2 / 313:  31%|███▏      | 313/1000 [17:21<38:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 236 / 2 / 313:  31%|███▏      | 314/1000 [17:26<38:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 237 / 2 / 314:  31%|███▏      | 314/1000 [17:26<38:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 237 / 2 / 314:  32%|███▏      | 315/1000 [17:30<38:04,  3.33s/it][Succeeded / Failed / Skipped / Total] 75 / 238 / 2 / 315:  32%|███▏      | 315/1000 [17:30<38:04,  3.33s/it][Succeeded / Failed / Skipped / Total] 76 / 238 / 2 / 316:  32%|███▏      | 316/1000 [17:30<37:53,  3.32s/it][Succeeded / Failed / Skipped / Total] 76 / 238 / 2 / 316:  32%|███▏      | 317/1000 [17:30<37:44,  3.31s/it]Creates a filter that logs the response to the given stream if the matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( [[stream]] , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[cambodian]] ( PrintStream [[allende]] , Matcher < Integer > [[blevins]] ) { return new ResponseLoggingFilter ( [[allende]] , [[blevins]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Clean up the backing map for the given keys and sources . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[swordsmen]] ( Set < KeyAndSource > [[billeting]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[billeting]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Index the bindings for this level . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[overthere]] ( ) { for ( Binding < ? > [[aborted]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[aborted]] . getKey ( ) . getTypeLiteral ( ) , [[aborted]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Creates a new Cookies instance with the given cookie and additional cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[fitzroy]] ( Cookie [[decoys]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[decoys]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[decoys]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 314 ---------------------------------------------
Converts a constant string binding to a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[frenzy]] ( Key < T > [[snowsuit]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[michelangelo]] ( BindingImpl < ? > [[circuitry]] ) { if ( [[circuitry]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[circuitry]] ) . getInternalDependencies ( ) ; } else if ( [[circuitry]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[circuitry]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Cleanup a binding . --> Noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[noooooo]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 317 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 239 / 2 / 317:  32%|███▏      | 317/1000 [17:30<37:44,  3.31s/it][Succeeded / Failed / Skipped / Total] 76 / 240 / 2 / 318:  32%|███▏      | 318/1000 [17:36<37:45,  3.32s/it][Succeeded / Failed / Skipped / Total] 76 / 240 / 2 / 318:  32%|███▏      | 319/1000 [17:43<37:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 76 / 241 / 2 / 319:  32%|███▏      | 319/1000 [17:43<37:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 76 / 241 / 2 / 319:  32%|███▏      | 320/1000 [17:44<37:41,  3.33s/it][Succeeded / Failed / Skipped / Total] 76 / 242 / 2 / 320:  32%|███▏      | 320/1000 [17:44<37:41,  3.33s/it][Succeeded / Failed / Skipped / Total] 76 / 242 / 2 / 320:  32%|███▏      | 321/1000 [17:52<37:49,  3.34s/it][Succeeded / Failed / Skipped / Total] 76 / 243 / 2 / 321:  32%|███▏      | 321/1000 [17:52<37:49,  3.34s/it][Succeeded / Failed / Skipped / Total] 76 / 243 / 2 / 321:  32%|███▏      | 322/1000 [17:55<37:45,  3.34s/it][Succeeded / Failed / Skipped / Total] 77 / 243 / 2 / 322:  32%|███▏      | 322/1000 [17:55<37:45,  3.34s/it][Succeeded / Failed / Skipped / Total] 77 / 243 / 2 / 322:  32%|███▏      | 323/1000 [17:57<37:37,  3.34s/it][Succeeded / Failed / Skipped / Total] 77 / 244 / 2 / 323:  32%|███▏      | 323/1000 [17:57<37:37,  3.34s/it][Succeeded / Failed / Skipped / Total] 77 / 244 / 2 / 323:  32%|███▏      | 324/1000 [17:57<37:28,  3.33s/it][Succeeded / Failed / Skipped / Total] 77 / 245 / 2 / 324:  32%|███▏      | 324/1000 [17:57<37:28,  3.33s/it]Remove failed jit binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[shuichi]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 318 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 319 ---------------------------------------------
Binds a logger to the injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[bruni]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Binds the injector to the state . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[testimonies]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 321 ---------------------------------------------
Returns an array containing all of the parameters provided by the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[zoloft]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 322 ---------------------------------------------
Check for misplaced binding annotations . --> snag a chloroform with a buckskin --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[snag]] ( Member [[chloroform]] , Errors [[buckskin]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[buckskin]] , [[chloroform]] , ( ( AnnotatedElement ) [[chloroform]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 323 ---------------------------------------------
Returns the type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[zia]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[pistols]] ( MembersInjector < T > [[bedazzled]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[bedazzled]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 325 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 78 / 245 / 2 / 325:  32%|███▎      | 325/1000 [17:57<37:18,  3.32s/it][Succeeded / Failed / Skipped / Total] 78 / 245 / 2 / 325:  33%|███▎      | 326/1000 [18:05<37:23,  3.33s/it][Succeeded / Failed / Skipped / Total] 78 / 246 / 2 / 326:  33%|███▎      | 326/1000 [18:05<37:23,  3.33s/it][Succeeded / Failed / Skipped / Total] 78 / 247 / 2 / 327:  33%|███▎      | 327/1000 [18:07<37:17,  3.32s/it][Succeeded / Failed / Skipped / Total] 78 / 247 / 2 / 327:  33%|███▎      | 328/1000 [18:10<37:13,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 247 / 2 / 328:  33%|███▎      | 328/1000 [18:10<37:13,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 248 / 2 / 329:  33%|███▎      | 329/1000 [18:11<37:05,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 248 / 2 / 329:  33%|███▎      | 330/1000 [18:14<37:01,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 249 / 2 / 330:  33%|███▎      | 330/1000 [18:14<37:01,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 250 / 2 / 331:  33%|███▎      | 331/1000 [18:19<37:01,  3.32s/it][Succeeded / Failed / Skipped / Total] 79 / 250 / 2 / 331:  33%|███▎      | 332/1000 [18:19<36:53,  3.31s/it][Succeeded / Failed / Skipped / Total] 79 / 251 / 2 / 332:  33%|███▎      | 332/1000 [18:19<36:53,  3.31s/it]Returns true if a method overrides b . --> for each chambermaids donati --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[each]] ( Method [[chambermaids]] , Method [[donati]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 326 ---------------------------------------------
Canonicalize a class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[conquistador]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 327 ---------------------------------------------
Prepare the built - in converters . --> [[[FAILED]]]

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[somewheres]] ( InjectorImpl [[aegean]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 328 ---------------------------------------------
Canonicalizes a type literal for a key . --> xiaowei bastards --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[xiaowei]] ( TypeLiteral < T > [[billboards]] ) { Type [[bastard]] = [[billboards]] . getType ( ) ; if ( ! isFullySpecified ( [[bastard]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[billboards]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[billboards]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[bastard]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
Resolves all of the given types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[krook]] ( Type [ ] [[dyou]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[dyou]] . length ] ; for ( int [[michelangelo]] = 0 ; [[michelangelo]] < [[dyou]] . length ; [[michelangelo]] ++ ) { result [ [[michelangelo]] ] = resolve ( [[dyou]] [ [[michelangelo]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 330 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[germaine]] ( Key < ? > [[abstractions]] ) { return [[abstractions]] . getAnnotation ( ) == null ? [[abstractions]] : Key . get ( [[abstractions]] . getTypeLiteral ( ) , [[abstractions]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Checks if the class loader has the same version of cglib . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[burleigh]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 333 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 251 / 2 / 333:  33%|███▎      | 333/1000 [18:22<36:47,  3.31s/it][Succeeded / Failed / Skipped / Total] 80 / 251 / 2 / 333:  33%|███▎      | 333/1000 [18:30<37:03,  3.33s/it][Succeeded / Failed / Skipped / Total] 80 / 251 / 2 / 333:  33%|███▎      | 334/1000 [18:30<36:54,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 252 / 2 / 334:  33%|███▎      | 334/1000 [18:30<36:54,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 252 / 2 / 334:  34%|███▎      | 335/1000 [18:33<36:49,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 253 / 2 / 335:  34%|███▎      | 335/1000 [18:33<36:49,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 253 / 2 / 335:  34%|███▎      | 336/1000 [18:36<36:46,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 254 / 2 / 336:  34%|███▎      | 336/1000 [18:36<36:46,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 254 / 2 / 336:  34%|███▎      | 337/1000 [18:40<36:43,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 255 / 2 / 337:  34%|███▎      | 337/1000 [18:40<36:43,  3.32s/it][Succeeded / Failed / Skipped / Total] 80 / 255 / 2 / 337:  34%|███▍      | 338/1000 [18:44<36:42,  3.33s/it][Succeeded / Failed / Skipped / Total] 80 / 256 / 2 / 338:  34%|███▍      | 338/1000 [18:44<36:42,  3.33s/it][Succeeded / Failed / Skipped / Total] 80 / 256 / 2 / 338:  34%|███▍      | 339/1000 [18:52<36:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 80 / 257 / 2 / 339:  34%|███▍      | 339/1000 [18:52<36:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 80 / 257 / 2 / 339:  34%|███▍      | 340/1000 [18:57<36:48,  3.35s/it]Validates all of the pending injections . --> Ichimonji ichimonji --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[ichimonji]] ( Errors errors ) { validationStarted = "[["Abnormally" == "Abnormally"]]" == "[["Abnormally" == "Abnormally"]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[ishikawa]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
Adds the servlet request dispatcher to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[espionage]] ( ServletRequest servletRequest , final ManagedServletPipeline [[barcode]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Returns true if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[squiggly]] ( Member [[salieri]] ) { if ( ! Modifier . isPublic ( [[salieri]] . getModifiers ( ) ) ) { return "[["Restorer" != "Restorer"]]" != "[["Restorer" != "Restorer"]]" ; } Class < ? > [ ] parameterTypes ; if ( [[salieri]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[salieri]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[salieri]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[["Restorer" != "Restorer"]]" != "[["Restorer" != "Restorer"]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[["Restorer" != "Restorer"]]" != "[["Restorer" != "Restorer"]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[canyons]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Returns the scope for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > [[key]] , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[pressing]] ( Key < T > [[outed]] , InjectorImpl [[aldin]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[pressing]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 339 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[bedford]] ( Class < ? extends Annotation > [[newgate]] ) { Retention retention = [[newgate]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 258 / 2 / 340:  34%|███▍      | 340/1000 [18:57<36:48,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 259 / 2 / 341:  34%|███▍      | 341/1000 [18:57<36:38,  3.34s/it][Succeeded / Failed / Skipped / Total] 80 / 259 / 2 / 341:  34%|███▍      | 342/1000 [19:06<36:45,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 260 / 2 / 342:  34%|███▍      | 342/1000 [19:06<36:45,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 261 / 2 / 343:  34%|███▍      | 343/1000 [19:11<36:46,  3.36s/it][Succeeded / Failed / Skipped / Total] 80 / 261 / 2 / 343:  34%|███▍      | 344/1000 [19:13<36:39,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 262 / 2 / 344:  34%|███▍      | 344/1000 [19:13<36:39,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 263 / 2 / 345:  34%|███▍      | 345/1000 [19:14<36:32,  3.35s/it][Succeeded / Failed / Skipped / Total] 80 / 263 / 2 / 345:  35%|███▍      | 346/1000 [19:23<36:39,  3.36s/it][Succeeded / Failed / Skipped / Total] 80 / 264 / 2 / 346:  35%|███▍      | 346/1000 [19:23<36:39,  3.36s/it]Normalize a path . --> [[[FAILED]]]

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[carmichael]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 341 ---------------------------------------------
Make an injectable for the given Scoping . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[dorothea]] ( Scoping scoping , InjectorImpl [[katzenjammer]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[katzenjammer]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 342 ---------------------------------------------
Finds the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[merced]] ( Errors errors , Annotation [ ] [[convention]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[convention]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[chopra]] ( Provider < T > delegate ) { checkState ( this . [[newgate]] == null , "delegate already initialized" ) ; this . [[newgate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the name of a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation [[annotation]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[guevara]] ( Key < ? > key ) { Annotation [[marcy]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[marcy]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 345 ---------------------------------------------
Adds a direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[bowles]] ( Binder [[katzenjammer]] ) { [[katzenjammer]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Get a ConstructorInjector from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[spooked]] ( InjectionPoint [[howitzer]] , Errors errors ) throws ErrorsException { return cache . get ( [[howitzer]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 265 / 2 / 347:  35%|███▍      | 347/1000 [19:26<36:34,  3.36s/it][Succeeded / Failed / Skipped / Total] 80 / 265 / 2 / 347:  35%|███▍      | 348/1000 [19:30<36:33,  3.36s/it][Succeeded / Failed / Skipped / Total] 80 / 266 / 2 / 348:  35%|███▍      | 348/1000 [19:30<36:33,  3.36s/it][Succeeded / Failed / Skipped / Total] 81 / 266 / 2 / 349:  35%|███▍      | 349/1000 [19:31<36:26,  3.36s/it][Succeeded / Failed / Skipped / Total] 81 / 266 / 2 / 349:  35%|███▌      | 350/1000 [19:39<36:31,  3.37s/it][Succeeded / Failed / Skipped / Total] 82 / 266 / 2 / 350:  35%|███▌      | 350/1000 [19:39<36:31,  3.37s/it][Succeeded / Failed / Skipped / Total] 82 / 267 / 2 / 351:  35%|███▌      | 351/1000 [19:41<36:24,  3.37s/it][Succeeded / Failed / Skipped / Total] 82 / 267 / 2 / 351:  35%|███▌      | 352/1000 [19:42<36:16,  3.36s/it][Succeeded / Failed / Skipped / Total] 82 / 268 / 2 / 352:  35%|███▌      | 352/1000 [19:42<36:16,  3.36s/it][Succeeded / Failed / Skipped / Total] 82 / 269 / 2 / 353:  35%|███▌      | 353/1000 [19:44<36:11,  3.36s/it][Succeeded / Failed / Skipped / Total] 82 / 269 / 2 / 353:  35%|███▌      | 354/1000 [19:46<36:05,  3.35s/it]Returns the key for the given type member and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member [[member]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[member]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[bahadur]] ( TypeLiteral < ? > type , Member [[pedestrian]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[pedestrian]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 348 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[circuitry]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[circuitry]] ) ) ; return [[circuitry]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
Checks if the interceptor class has a scope annotation . --> Safeguarding for Gourmets --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[safeguarding]] ( Class < ? extends Interceptor > [[reject]] ) { for ( Annotation annotation : [[reject]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[["Gourmets" == "Gourmets"]]" == "[["Gourmets" == "Gourmets"]]" ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a module for the given module . --> your wife --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[yourwife]] ( Module [[bret]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 351 ---------------------------------------------
Creates a new map binder with the specified key and value type and annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[ferret]] ( Binder [[arwen]] , TypeLiteral < K > keyType , Key < V > [[taiga]] ) { [[arwen]] = [[arwen]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[taiga]] . getTypeLiteral ( ) ; return [[ferret]] ( [[arwen]] , keyType , valueType , [[taiga]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[arwen]] , [[taiga]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 352 ---------------------------------------------
Write a replace message to the stream . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < [[sourcesAsStrings]] . length ; [[i]] ++ ) { [[sourcesAsStrings]] [ [[i]] ] = Errors . convert ( [[sourcesAsStrings]] [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[furniture]] ( ) throws ObjectStreamException { Object [ ] [[omaha]] = sources . toArray ( ) ; for ( int [[avro]] = 0 ; [[avro]] < [[omaha]] . length ; [[avro]] ++ ) { [[omaha]] [ [[avro]] ] = Errors . convert ( [[omaha]] [ [[avro]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[omaha]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[hilts]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 354 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 270 / 2 / 354:  35%|███▌      | 354/1000 [19:46<36:05,  3.35s/it][Succeeded / Failed / Skipped / Total] 82 / 270 / 2 / 354:  35%|███▌      | 354/1000 [20:00<36:29,  3.39s/it][Succeeded / Failed / Skipped / Total] 82 / 270 / 2 / 354:  36%|███▌      | 355/1000 [20:05<36:30,  3.40s/it][Succeeded / Failed / Skipped / Total] 82 / 271 / 2 / 355:  36%|███▌      | 355/1000 [20:05<36:30,  3.40s/it][Succeeded / Failed / Skipped / Total] 82 / 271 / 2 / 355:  36%|███▌      | 356/1000 [20:07<36:25,  3.39s/it][Succeeded / Failed / Skipped / Total] 82 / 272 / 2 / 356:  36%|███▌      | 356/1000 [20:07<36:25,  3.39s/it][Succeeded / Failed / Skipped / Total] 82 / 272 / 2 / 356:  36%|███▌      | 357/1000 [20:08<36:16,  3.38s/it][Succeeded / Failed / Skipped / Total] 82 / 273 / 2 / 357:  36%|███▌      | 357/1000 [20:08<36:16,  3.38s/it][Succeeded / Failed / Skipped / Total] 82 / 273 / 2 / 357:  36%|███▌      | 358/1000 [20:20<36:28,  3.41s/it][Succeeded / Failed / Skipped / Total] 82 / 274 / 2 / 358:  36%|███▌      | 358/1000 [20:20<36:28,  3.41s/it][Succeeded / Failed / Skipped / Total] 82 / 274 / 2 / 358:  36%|███▌      | 359/1000 [20:24<36:26,  3.41s/it][Succeeded / Failed / Skipped / Total] 82 / 275 / 2 / 359:  36%|███▌      | 359/1000 [20:24<36:26,  3.41s/it][Succeeded / Failed / Skipped / Total] 82 / 275 / 2 / 359:  36%|███▌      | 360/1000 [20:25<36:18,  3.40s/it][Succeeded / Failed / Skipped / Total] 83 / 275 / 2 / 360:  36%|███▌      | 360/1000 [20:25<36:18,  3.40s/it]Create a new instance of the given construction context . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[alphabets]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[tah]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[tah]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[tah]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if a type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[senorita]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
Returns a set of dependencies for the given constructor and the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[czechoslovakia]] ( InjectionPoint [[cpr]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[cpr]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Remove assisted dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[qh]] ( Set < Dependency < ? > > [[chubb]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[appalachian]] : [[chubb]] ) { Class < ? > [[belgium]] = [[appalachian]] . getKey ( ) . getAnnotationType ( ) ; if ( [[belgium]] == null || ! [[belgium]] . equals ( Assisted . class ) ) { builder . add ( [[appalachian]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 358 ---------------------------------------------
Checks if a constructor has matching parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[guzzler]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 359 ---------------------------------------------
Invoke the method on the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[katzenjammer]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 360 ---------------------------------------------
Returns an error message that indicates that no implementation for the given key was bound . --> Methode d ajout une hint . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[purée]] = new StringBuilder ( ) ; [[purée]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 361 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 276 / 2 / 361:  36%|███▌      | 361/1000 [20:25<36:08,  3.39s/it][Succeeded / Failed / Skipped / Total] 83 / 276 / 2 / 361:  36%|███▌      | 362/1000 [20:27<36:03,  3.39s/it][Succeeded / Failed / Skipped / Total] 83 / 277 / 2 / 362:  36%|███▌      | 362/1000 [20:27<36:03,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 277 / 2 / 363:  36%|███▋      | 363/1000 [20:31<36:00,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 277 / 2 / 363:  36%|███▋      | 364/1000 [20:33<35:55,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 278 / 2 / 364:  36%|███▋      | 364/1000 [20:33<35:55,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 279 / 2 / 365:  36%|███▋      | 365/1000 [20:36<35:51,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 279 / 2 / 365:  37%|███▋      | 366/1000 [20:40<35:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 280 / 2 / 366:  37%|███▋      | 366/1000 [20:40<35:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 281 / 2 / 367:  37%|███▋      | 367/1000 [20:44<35:45,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 281 / 2 / 367:  37%|███▋      | 368/1000 [20:48<35:43,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 282 / 2 / 368:  37%|███▋      | 368/1000 [20:48<35:43,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 283 / 2 / 369:  37%|███▋      | 369/1000 [20:50<35:38,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 283 / 2 / 369:  37%|███▋      | 370/1000 [20:50<35:29,  3.38s/it]Get the binding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[shifters]] ( final Method method , final Object [ ] args , final AssistData [[wait]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[wait]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Returns true if the given dependencies are valid for an optimized assisted inject . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[bartleby]] ( Set < Dependency < ? > > [[airy]] , Class < ? > [[boludo]] , TypeLiteral < ? > [[ce]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 363 ---------------------------------------------
Returns the injection point for the constructor . --> Czechoslovakia czechoslovakia --> Socre: 1.0

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[czechoslovakia]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Returns true if the constructor has at inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[kawakami]] ( Constructor [[beth]] ) { return [[beth]] . isAnnotationPresent ( Inject . class ) || [[beth]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Find the next matching filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 366 ---------------------------------------------
Returns a set of internal dependencies for this factory . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[aimée]] ( ) { ImmutableSet . Builder < InjectionPoint > [[raft]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[raft]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Creates a new multibinder that is bound to the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[binder]] , Key < T > key ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , key ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[chums]] , Key < T > key ) { [[chums]] = [[chums]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[chums]] , key ) ; [[chums]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line number of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[wait]] ( Member [[sagging]] ) { Preconditions . checkArgument ( type == [[sagging]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[sagging]] , [[sagging]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[sagging]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Returns a module for the given module using the given method scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[depeche]] ( Object [[parquet]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[parquet]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
[Succeeded / Failed / Skipped / Total] 84 / 284 / 2 / 370:  37%|███▋      | 370/1000 [20:50<35:29,  3.38s/it][Succeeded / Failed / Skipped / Total] 84 / 285 / 2 / 371:  37%|███▋      | 371/1000 [20:58<35:33,  3.39s/it][Succeeded / Failed / Skipped / Total] 84 / 285 / 2 / 371:  37%|███▋      | 372/1000 [20:58<35:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 85 / 285 / 2 / 372:  37%|███▋      | 372/1000 [20:58<35:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 85 / 286 / 2 / 373:  37%|███▋      | 373/1000 [20:59<35:16,  3.38s/it][Succeeded / Failed / Skipped / Total] 85 / 286 / 2 / 373:  37%|███▋      | 374/1000 [21:02<35:12,  3.37s/it][Succeeded / Failed / Skipped / Total] 85 / 287 / 2 / 374:  37%|███▋      | 374/1000 [21:02<35:12,  3.37s/it][Succeeded / Failed / Skipped / Total] 85 / 288 / 2 / 375:  38%|███▊      | 375/1000 [21:12<35:20,  3.39s/it][Succeeded / Failed / Skipped / Total] 85 / 288 / 2 / 375:  38%|███▊      | 376/1000 [21:12<35:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 85 / 289 / 2 / 376:  38%|███▊      | 376/1000 [21:12<35:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 85 / 289 / 2 / 376:  38%|███▊      | 377/1000 [21:20<35:16,  3.40s/it]--------------------------------------------- Result 370 ---------------------------------------------
Initializes the lookup manager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[aptly]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Transfers a request to a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[borgo]] ( Callable < T > [[barged]] ) { return wrap ( [[barged]] , [[borgo]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Returns a callable that will continue the execution of the given callable with the given seed map . --> Aeronautics aeronautics aeronautics --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , continueRequest ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[aeronautics]] , Map < Key < ? > , Object > [[abstention]] ) { return wrap ( [[aeronautics]] , continueRequest ( [[abstention]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Returns the annotation claimed by the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[annotationClass]] : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( [[annotationClass]] ) ; if ( [[foundAnnotation]] != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = [[foundAnnotation]] ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[dehydration]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[allo]] : scanner . annotationClasses ( ) ) { Annotation [[chainsaw]] = method . getAnnotation ( [[allo]] ) ; if ( [[chainsaw]] != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = [[chainsaw]] ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Validate and canonicalize a value . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[disintegrate]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[colonizing]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[citibank]] ( Class < T > [[bruiser]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[bruiser]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 290 / 2 / 377:  38%|███▊      | 377/1000 [21:20<35:16,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 290 / 2 / 377:  38%|███▊      | 378/1000 [21:21<35:07,  3.39s/it][Succeeded / Failed / Skipped / Total] 85 / 291 / 2 / 378:  38%|███▊      | 378/1000 [21:21<35:07,  3.39s/it][Succeeded / Failed / Skipped / Total] 85 / 291 / 2 / 378:  38%|███▊      | 379/1000 [21:24<35:04,  3.39s/it][Succeeded / Failed / Skipped / Total] 85 / 292 / 2 / 379:  38%|███▊      | 379/1000 [21:24<35:04,  3.39s/it][Succeeded / Failed / Skipped / Total] 85 / 292 / 2 / 379:  38%|███▊      | 380/1000 [21:30<35:06,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 293 / 2 / 380:  38%|███▊      | 380/1000 [21:30<35:06,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 293 / 2 / 380:  38%|███▊      | 381/1000 [21:37<35:07,  3.40s/it]Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[expanse]] ( Class < ? extends Annotation > [[bureaucratic]] ) { [[bureaucratic]] = Annotations . canonicalizeIfNamed ( [[bureaucratic]] ) ; if ( isAllDefaultMethods ( [[bureaucratic]] ) ) { return [[expanse]] ( generateAnnotation ( [[bureaucratic]] ) ) ; } checkNotNull ( [[bureaucratic]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[bureaucratic]] ) ; ensureIsBindingAnnotation ( [[bureaucratic]] ) ; return new AnnotationTypeStrategy ( [[bureaucratic]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Gets the injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[alvin]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[zooms]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[zooms]] , injectionPoint , errorsForMember ) ; [[alvin]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the source of the binding . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[joão]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a new members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > [[injectionPoints]] ; try { [[injectionPoints]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; [[injectionPoints]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( [[injectionPoints]] , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[encounter]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[encounter]] . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[encounter]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[stagecoach]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > [[goal]] ; try { [[goal]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; [[goal]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( [[goal]] , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[canceled]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[canceled]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[canceled]] . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[canceled]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 381 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 294 / 2 / 381:  38%|███▊      | 381/1000 [21:37<35:07,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 294 / 2 / 381:  38%|███▊      | 382/1000 [21:39<35:01,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 295 / 2 / 382:  38%|███▊      | 382/1000 [21:39<35:01,  3.40s/it][Succeeded / Failed / Skipped / Total] 85 / 295 / 2 / 382:  38%|███▊      | 383/1000 [21:49<35:10,  3.42s/it][Succeeded / Failed / Skipped / Total] 85 / 296 / 2 / 383:  38%|███▊      | 383/1000 [21:49<35:10,  3.42s/it][Succeeded / Failed / Skipped / Total] 85 / 296 / 2 / 383:  38%|███▊      | 384/1000 [21:57<35:13,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 297 / 2 / 384:  38%|███▊      | 384/1000 [21:57<35:13,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 297 / 2 / 384:  38%|███▊      | 385/1000 [21:57<35:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 85 / 298 / 2 / 385:  38%|███▊      | 385/1000 [21:57<35:05,  3.42s/it][Succeeded / Failed / Skipped / Total] 85 / 298 / 2 / 385:  39%|███▊      | 386/1000 [22:03<35:05,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 299 / 2 / 386:  39%|███▊      | 386/1000 [22:03<35:05,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 299 / 2 / 386:  39%|███▊      | 387/1000 [22:11<35:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 300 / 2 / 387:  39%|███▊      | 387/1000 [22:11<35:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 300 / 2 / 387:  39%|███▉      | 388/1000 [22:11<35:00,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 301 / 2 / 388:  39%|███▉      | 388/1000 [22:12<35:00,  3.43s/it][Succeeded / Failed / Skipped / Total] 85 / 301 / 2 / 388:  39%|███▉      | 389/1000 [22:20<35:05,  3.45s/it]Prunes the stack trace of a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[cervical]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[proxies]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[proxies]] . add ( element ) ; } } t . setStackTrace ( [[proxies]] . toArray ( new StackTraceElement [ [[proxies]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[avraham]] ( String messageFormat , Object ... [[bear]] ) { return [[avraham]] ( null , messageFormat , [[bear]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[aleksey]] ( Throwable [[geographically]] , String [[chiyo]] , Object ... arguments ) { return [[aleksey]] ( [[geographically]] , ImmutableList . of ( ) , [[chiyo]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[artichoke]] ( Object [[nail]] ) { ElementSource [[mercies]] = null ; if ( [[nail]] instanceof ElementSource ) { [[mercies]] = ( ElementSource ) [[nail]] ; [[nail]] = [[mercies]] . getDeclaringSource ( ) ; } return [[artichoke]] ( [[nail]] , [[mercies]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Returns true if the class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[induce]] ( String [[customized]] ) { return ( parent != null && parent . shouldBeSkipped ( [[customized]] ) ) || classNamesToSkip . contains ( [[customized]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new exception message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[examinations]] ( Throwable [[broadway]] , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , [[broadway]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Main entry point . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[assembling]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 388 ---------------------------------------------
Get the stack trace from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[bluish]] ( List < String > [[federated]] ) { Preconditions . checkNotNull ( [[federated]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[federated]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 302 / 2 / 389:  39%|███▉      | 389/1000 [22:20<35:05,  3.45s/it][Succeeded / Failed / Skipped / Total] 85 / 302 / 2 / 389:  39%|███▉      | 390/1000 [22:20<34:56,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 303 / 2 / 390:  39%|███▉      | 390/1000 [22:20<34:56,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 303 / 2 / 390:  39%|███▉      | 391/1000 [22:24<34:54,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 304 / 2 / 391:  39%|███▉      | 391/1000 [22:24<34:54,  3.44s/it][Succeeded / Failed / Skipped / Total] 85 / 304 / 2 / 391:  39%|███▉      | 392/1000 [22:33<34:59,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 304 / 2 / 392:  39%|███▉      | 392/1000 [22:33<34:59,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 304 / 2 / 392:  39%|███▉      | 393/1000 [22:40<35:01,  3.46s/it][Succeeded / Failed / Skipped / Total] 86 / 305 / 2 / 393:  39%|███▉      | 393/1000 [22:40<35:01,  3.46s/it][Succeeded / Failed / Skipped / Total] 86 / 306 / 2 / 394:  39%|███▉      | 394/1000 [22:40<34:52,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 306 / 2 / 394:  40%|███▉      | 395/1000 [22:40<34:44,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 306 / 3 / 395:  40%|███▉      | 395/1000 [22:40<34:44,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 307 / 3 / 396:  40%|███▉      | 396/1000 [22:44<34:41,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 307 / 3 / 396:  40%|███▉      | 397/1000 [22:47<34:37,  3.45s/it]Returns a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[sneha]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Pushes a dependency to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[source]] ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[cart]] ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , [[cart]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 391 ---------------------------------------------
Pushes a state to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[glistening]] ( com . google . inject . Key < ? > key , Object [[galaxies]] ) { doPushState ( key , [[galaxies]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
Called when a connection event is received . --> Send a connection event to all registered arseholes --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . [[processors]] . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[blackie]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . [[arseholes]] . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Provision a provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[granddaughters]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[depeche]] = provider . get ( ) ; if ( [[depeche]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[depeche]] ) ; return [[depeche]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 394 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[mersenne]] > [[mersenne]] getFutureTaskResult ( RunStateRecordedFutureTask < [[mersenne]] > task , Logger logger ) { [[mersenne]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 395 ---------------------------------------------
Throws an exception if it is an unchecked exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 396 ---------------------------------------------
Adds a connection event processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[coursing]] ( ConnectionEventType [[remembered]] , ConnectionEventProcessor [[exceptions]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[remembered]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[remembered]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[remembered]] ) ; } processorList . add ( [[exceptions]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 308 / 3 / 397:  40%|███▉      | 397/1000 [22:47<34:37,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 309 / 3 / 398:  40%|███▉      | 398/1000 [22:51<34:34,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 309 / 3 / 398:  40%|███▉      | 399/1000 [22:55<34:32,  3.45s/it][Succeeded / Failed / Skipped / Total] 86 / 310 / 3 / 399:  40%|███▉      | 399/1000 [22:55<34:32,  3.45s/it][Succeeded / Failed / Skipped / Total] 87 / 310 / 3 / 400:  40%|████      | 400/1000 [22:59<34:29,  3.45s/it][Succeeded / Failed / Skipped / Total] 87 / 310 / 3 / 400:  40%|████      | 401/1000 [23:03<34:25,  3.45s/it][Succeeded / Failed / Skipped / Total] 87 / 311 / 3 / 401:  40%|████      | 401/1000 [23:03<34:25,  3.45s/it][Succeeded / Failed / Skipped / Total] 88 / 311 / 3 / 402:  40%|████      | 402/1000 [23:03<34:17,  3.44s/it][Succeeded / Failed / Skipped / Total] 88 / 311 / 3 / 402:  40%|████      | 403/1000 [23:07<34:15,  3.44s/it]Formats a list of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[berkowitz]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 398 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[beebee]] ( RemotingProcessor < ? > [[kashi]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[kashi]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 399 ---------------------------------------------
Registers a remoting processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[convalesce]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 400 ---------------------------------------------
Try to get a url . --> Returns the disobedience url for the given airports . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String [[url]] ) { SoftReference < Url > [[softRef]] = Url . parsedUrls . get ( [[url]] ) ; return ( null == [[softRef]] ) ? null : [[softRef]] . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[abcs]] ( String [[airports]] ) { SoftReference < Url > [[disobedience]] = Url . parsedUrls . get ( [[airports]] ) ; return ( null == [[disobedience]] ) ? null : [[disobedience]] . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 401 ---------------------------------------------
Returns the processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[soundproof]] ( CommandCode [[memberships]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[memberships]] ) ; if ( processor != null ) { return processor ; } return this . [[algo]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 402 ---------------------------------------------
Decodes the protocol code . --> Ahearn ahearn . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[ahearn]] ( ByteBuf [[stagecoach]] ) { if ( [[stagecoach]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[stagecoach]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 403 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 311 / 3 / 403:  40%|████      | 403/1000 [23:07<34:15,  3.44s/it][Succeeded / Failed / Skipped / Total] 90 / 311 / 3 / 404:  40%|████      | 404/1000 [23:09<34:09,  3.44s/it][Succeeded / Failed / Skipped / Total] 90 / 311 / 3 / 404:  40%|████      | 405/1000 [23:11<34:03,  3.43s/it][Succeeded / Failed / Skipped / Total] 90 / 312 / 3 / 405:  40%|████      | 405/1000 [23:11<34:03,  3.43s/it][Succeeded / Failed / Skipped / Total] 91 / 312 / 3 / 406:  41%|████      | 406/1000 [23:13<33:58,  3.43s/it][Succeeded / Failed / Skipped / Total] 91 / 312 / 3 / 406:  41%|████      | 407/1000 [23:14<33:52,  3.43s/it][Succeeded / Failed / Skipped / Total] 91 / 313 / 3 / 407:  41%|████      | 407/1000 [23:14<33:52,  3.43s/it][Succeeded / Failed / Skipped / Total] 92 / 313 / 3 / 408:  41%|████      | 408/1000 [23:17<33:47,  3.42s/it][Succeeded / Failed / Skipped / Total] 92 / 313 / 3 / 408:  41%|████      | 409/1000 [23:18<33:40,  3.42s/it][Succeeded / Failed / Skipped / Total] 93 / 313 / 3 / 409:  41%|████      | 409/1000 [23:18<33:40,  3.42s/it]Returns a connection for the given url if it does not exist . --> getAndCreateIfAbsent creates a new connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[vitam]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Scan all connections . --> Check if there are any expired connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[counterterrorism]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection and heal if need . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[conqueror]] ( Url [[cheetos]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
Heal if need . --> abnormals . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[abnormals]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Returns a map of all connections in the pool . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[pool]] ) { allConnections . put ( entry . getKey ( ) , [[pool]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[reluctantly]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[tomasz]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[tomasz]] ) { allConnections . put ( entry . getKey ( ) , [[tomasz]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 408 ---------------------------------------------
Closes a connection . --> Remove an annika connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[annika]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Remove a connection pool . --> Removes the connection pool from the engraving map . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[task]] = this . [[connTasks]] . remove ( poolKey ) ; if ( null != [[task]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[task]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[accumulates]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[badness]] = this . [[engraving]] . remove ( poolKey ) ; if ( null != [[badness]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[badness]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 410 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 313 / 3 / 410:  41%|████      | 410/1000 [23:20<33:35,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 313 / 3 / 410:  41%|████      | 411/1000 [23:29<33:39,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 314 / 3 / 411:  41%|████      | 411/1000 [23:29<33:39,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 314 / 3 / 411:  41%|████      | 412/1000 [23:31<33:34,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 315 / 3 / 412:  41%|████      | 412/1000 [23:31<33:34,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 315 / 3 / 412:  41%|████▏     | 413/1000 [23:32<33:28,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 316 / 3 / 413:  41%|████▏     | 413/1000 [23:32<33:28,  3.42s/it][Succeeded / Failed / Skipped / Total] 94 / 316 / 3 / 413:  41%|████▏     | 414/1000 [23:40<33:30,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 317 / 3 / 414:  41%|████▏     | 414/1000 [23:40<33:30,  3.43s/it][Succeeded / Failed / Skipped / Total] 94 / 317 / 3 / 414:  42%|████▏     | 415/1000 [23:40<33:22,  3.42s/it][Succeeded / Failed / Skipped / Total] 95 / 317 / 3 / 415:  42%|████▏     | 415/1000 [23:40<33:22,  3.42s/it][Succeeded / Failed / Skipped / Total] 95 / 317 / 3 / 415:  42%|████▏     | 416/1000 [23:49<33:27,  3.44s/it]Create a connection . --> Broke the connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[connection]] = create ( url ) ; pool . add ( [[connection]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[broke]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[charms]] = create ( url ) ; pool . add ( [[charms]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 411 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[days]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[griselda]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[griselda]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[griselda]] . next ( ) ; [[griselda]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 412 ---------------------------------------------
Adds an attribute to the map if it is not already present . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String key , Object [[integra]] ) { return attributes . putIfAbsent ( key , [[integra]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[rafe]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[firebomb]] ( UserProcessor < ? > [[etruscans]] , ConcurrentHashMap < String , UserProcessor < ? > > [[breathin]] ) { if ( null == [[etruscans]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[etruscans]] instanceof MultiInterestUserProcessor ) { [[firebomb]] ( ( MultiInterestUserProcessor ) [[etruscans]] , [[breathin]] ) ; } else { if ( StringUtils . isBlank ( [[etruscans]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[breathin]] . putIfAbsent ( [[etruscans]] . interest ( ) , [[etruscans]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[etruscans]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Dispatch to the user processor . --> Methode d ajout des africans . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[africans]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[séance]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 416 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 317 / 3 / 416:  42%|████▏     | 416/1000 [23:49<33:27,  3.44s/it][Succeeded / Failed / Skipped / Total] 96 / 317 / 3 / 416:  42%|████▏     | 417/1000 [23:50<33:19,  3.43s/it][Succeeded / Failed / Skipped / Total] 97 / 317 / 3 / 417:  42%|████▏     | 417/1000 [23:50<33:19,  3.43s/it][Succeeded / Failed / Skipped / Total] 97 / 317 / 3 / 417:  42%|████▏     | 418/1000 [23:58<33:22,  3.44s/it][Succeeded / Failed / Skipped / Total] 97 / 318 / 3 / 418:  42%|████▏     | 418/1000 [23:58<33:22,  3.44s/it][Succeeded / Failed / Skipped / Total] 97 / 318 / 3 / 418:  42%|████▏     | 419/1000 [23:59<33:15,  3.43s/it][Succeeded / Failed / Skipped / Total] 98 / 318 / 3 / 419:  42%|████▏     | 419/1000 [23:59<33:15,  3.43s/it][Succeeded / Failed / Skipped / Total] 98 / 318 / 3 / 419:  42%|████▏     | 420/1000 [24:02<33:11,  3.43s/it][Succeeded / Failed / Skipped / Total] 99 / 318 / 3 / 420:  42%|████▏     | 420/1000 [24:02<33:11,  3.43s/it][Succeeded / Failed / Skipped / Total] 99 / 318 / 3 / 420:  42%|████▏     | 421/1000 [24:03<33:05,  3.43s/it]Deserialize a request command . --> Perform the algorithm . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[algo]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 417 ---------------------------------------------
Pre - process remoting context . --> Annika annika . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( cmd . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( cmd . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[annika]] ( RemotingContext [[bertin]] , RpcRequestCommand cmd , long currentTimestamp ) { [[bertin]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[bertin]] . setTimeout ( cmd . getTimeout ( ) ) ; [[bertin]] . setRpcCommandType ( cmd . getType ( ) ) ; [[bertin]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Registers a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( interest , [[processor]] ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[okayama]] ( MultiInterestUserProcessor < ? > [[bittersweet]] , ConcurrentHashMap < String , UserProcessor < ? > > [[preservative]] ) { if ( null == [[bittersweet]] . multiInterest ( ) || [[bittersweet]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[bittersweet]] . multiInterest ( ) ) { UserProcessor < ? > [[recollections]] = [[preservative]] . putIfAbsent ( interest , [[bittersweet]] ) ; if ( [[recollections]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 419 ---------------------------------------------
Debug log . --> defibrillator . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[cmd]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[defibrillator]] ( RemotingContext ctx , RpcRequestCommand [[undreamed]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[undreamed]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[undreamed]] . getId ( ) , currentTimestamp , [[undreamed]] . getArriveTime ( ) , ( currentTimestamp - [[undreamed]] . getArriveTime ( ) ) , [[undreamed]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 420 ---------------------------------------------
Process a message . --> Fitszgerald als Telekinesis --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext [[ctx]] , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[fitzgerald]] ( RemotingContext [[inquirer]] , T msg , ExecutorService [[telekinesis]] ) throws Exception { ProcessTask task = new ProcessTask ( [[inquirer]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[telekinesis]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 421 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 319 / 3 / 421:  42%|████▏     | 421/1000 [24:03<33:05,  3.43s/it][Succeeded / Failed / Skipped / Total] 99 / 319 / 3 / 421:  42%|████▏     | 422/1000 [24:05<33:00,  3.43s/it][Succeeded / Failed / Skipped / Total] 100 / 319 / 3 / 422:  42%|████▏     | 422/1000 [24:05<33:00,  3.43s/it][Succeeded / Failed / Skipped / Total] 100 / 319 / 3 / 422:  42%|████▏     | 423/1000 [24:12<33:01,  3.43s/it][Succeeded / Failed / Skipped / Total] 101 / 319 / 3 / 423:  42%|████▏     | 423/1000 [24:12<33:01,  3.43s/it][Succeeded / Failed / Skipped / Total] 101 / 319 / 3 / 423:  42%|████▏     | 424/1000 [24:13<32:54,  3.43s/it][Succeeded / Failed / Skipped / Total] 101 / 319 / 4 / 424:  42%|████▏     | 424/1000 [24:13<32:54,  3.43s/it][Succeeded / Failed / Skipped / Total] 101 / 319 / 4 / 424:  42%|████▎     | 425/1000 [24:13<32:46,  3.42s/it][Succeeded / Failed / Skipped / Total] 101 / 320 / 4 / 425:  42%|████▎     | 425/1000 [24:13<32:46,  3.42s/it][Succeeded / Failed / Skipped / Total] 101 / 320 / 4 / 425:  43%|████▎     | 426/1000 [24:14<32:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 102 / 320 / 4 / 426:  43%|████▎     | 426/1000 [24:14<32:39,  3.41s/it][Succeeded / Failed / Skipped / Total] 102 / 320 / 4 / 426:  43%|████▎     | 427/1000 [24:25<32:46,  3.43s/it]Log request timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[galapagos]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[launches]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[launches]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[launches]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
Converts a bit set to a byte . --> Liefert die Klasse zurueck . --> Socre: 1.0

[[[[Adv]]]]: public static byte toByte ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet [[rupert]] ) { int value = 0 ; for ( int i = 0 ; i < [[rupert]] . length ( ) ; ++ i ) { if ( [[rupert]] . get ( i ) ) { value += 1 << i ; } } if ( [[rupert]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[rupert]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 423 ---------------------------------------------
Adds a reconnect task . --> Adds an artistic connection to the server . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[artistic]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 424 ---------------------------------------------
Stops the heal connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Sends a remoting command to the remote peer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 426 ---------------------------------------------
Convert an integer to a bit set . --> Reconciles the given value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[reconciled]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 427 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 103 / 320 / 4 / 427:  43%|████▎     | 427/1000 [24:25<32:46,  3.43s/it][Succeeded / Failed / Skipped / Total] 103 / 320 / 4 / 427:  43%|████▎     | 428/1000 [24:34<32:50,  3.44s/it][Succeeded / Failed / Skipped / Total] 103 / 321 / 4 / 428:  43%|████▎     | 428/1000 [24:34<32:50,  3.44s/it][Succeeded / Failed / Skipped / Total] 103 / 321 / 4 / 428:  43%|████▎     | 429/1000 [24:35<32:43,  3.44s/it][Succeeded / Failed / Skipped / Total] 104 / 321 / 4 / 429:  43%|████▎     | 429/1000 [24:35<32:43,  3.44s/it][Succeeded / Failed / Skipped / Total] 104 / 321 / 4 / 429:  43%|████▎     | 430/1000 [24:37<32:38,  3.44s/it]Filter connections by service status . --> Returns a map of customers based on their service status . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[customers]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[accumulates]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[accumulates]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[accumulates]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 428 ---------------------------------------------
Convert a request to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[homebody]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[faxing]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 429 ---------------------------------------------
Close fresh select connections . --> Burial burial . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[burial]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 322 / 4 / 430:  43%|████▎     | 430/1000 [24:37<32:38,  3.44s/it][Succeeded / Failed / Skipped / Total] 104 / 322 / 4 / 430:  43%|████▎     | 431/1000 [24:40<32:34,  3.44s/it][Succeeded / Failed / Skipped / Total] 105 / 322 / 4 / 431:  43%|████▎     | 431/1000 [24:40<32:34,  3.44s/it][Succeeded / Failed / Skipped / Total] 105 / 322 / 4 / 431:  43%|████▎     | 432/1000 [24:42<32:29,  3.43s/it][Succeeded / Failed / Skipped / Total] 106 / 322 / 4 / 432:  43%|████▎     | 432/1000 [24:42<32:29,  3.43s/it]Invoke a RemotingCommand with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand [[request]] , final InvokeCallback [[invokeCallback]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[request]] , [[request]] . getInvokeContext ( ) , [[invokeCallback]] ) ; conn . addInvokeFuture ( future ) ; final int [[requestId]] = [[request]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[fining]] ( final Connection conn , final RemotingCommand [[assemblyman]] , final InvokeCallback [[moonchild]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[assemblyman]] , [[assemblyman]] . getInvokeContext ( ) , [[moonchild]] ) ; conn . addInvokeFuture ( future ) ; final int [[barb]] = [[assemblyman]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[barb]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[assemblyman]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[barb]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[barb]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 431 ---------------------------------------------
Get a system property as a boolean . --> Returns the boolean value of the given mnemonic . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[tuscarora]] , String [[mnemonic]] ) { return Boolean . parseBoolean ( System . getProperty ( [[tuscarora]] , [[mnemonic]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 432 ---------------------------------------------
Log info information . --> Liefert die Methode . --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String [[addr]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[addr]] ) ) { logger . info ( [[format]] , [[addr]] ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[africans]] , String [[mesmerize]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[mesmerize]] ) ) { logger . info ( [[africans]] , [[mesmerize]] ) ; } else { logger . info ( [[africans]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 433 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 322 / 4 / 433:  43%|████▎     | 433/1000 [24:42<32:21,  3.42s/it][Succeeded / Failed / Skipped / Total] 107 / 322 / 4 / 433:  43%|████▎     | 434/1000 [24:47<32:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 108 / 322 / 4 / 434:  43%|████▎     | 434/1000 [24:47<32:20,  3.43s/it][Succeeded / Failed / Skipped / Total] 109 / 322 / 4 / 435:  44%|████▎     | 435/1000 [24:48<32:12,  3.42s/it][Succeeded / Failed / Skipped / Total] 109 / 322 / 4 / 435:  44%|████▎     | 436/1000 [24:51<32:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 109 / 323 / 4 / 436:  44%|████▎     | 436/1000 [24:51<32:09,  3.42s/it][Succeeded / Failed / Skipped / Total] 110 / 323 / 4 / 437:  44%|████▎     | 437/1000 [24:51<32:01,  3.41s/it][Succeeded / Failed / Skipped / Total] 110 / 323 / 4 / 437:  44%|████▍     | 438/1000 [24:57<32:02,  3.42s/it]Monitor connections . --> Anthros a connection pool . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iter]] = connPools . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iter]] . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[anthros]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[cachaça]] = connPools . entrySet ( ) . iterator ( ) ; while ( [[cachaça]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[cachaça]] . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value of the specified key or the default if not found . --> Returns the abel associated with the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[abel]] > [[abel]] get ( String key , [[abel]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[abel]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Returns true if the request timed out . --> Aleksandr aleksandr . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[aleksandr]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 436 ---------------------------------------------
Gets the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[queensberry]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 437 ---------------------------------------------
Returns the value of a property . --> Fizzy zurueck . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[fizzy]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 323 / 4 / 438:  44%|████▍     | 438/1000 [24:57<32:02,  3.42s/it][Succeeded / Failed / Skipped / Total] 112 / 323 / 4 / 439:  44%|████▍     | 439/1000 [25:02<31:59,  3.42s/it][Succeeded / Failed / Skipped / Total] 112 / 323 / 4 / 439:  44%|████▍     | 440/1000 [25:03<31:53,  3.42s/it][Succeeded / Failed / Skipped / Total] 112 / 324 / 4 / 440:  44%|████▍     | 440/1000 [25:03<31:53,  3.42s/it][Succeeded / Failed / Skipped / Total] 112 / 325 / 4 / 441:  44%|████▍     | 441/1000 [25:04<31:47,  3.41s/it][Succeeded / Failed / Skipped / Total] 112 / 325 / 4 / 441:  44%|████▍     | 442/1000 [25:08<31:44,  3.41s/it][Succeeded / Failed / Skipped / Total] 113 / 325 / 4 / 442:  44%|████▍     | 442/1000 [25:08<31:44,  3.41s/it][Succeeded / Failed / Skipped / Total] 114 / 325 / 4 / 443:  44%|████▍     | 443/1000 [25:13<31:42,  3.42s/it][Succeeded / Failed / Skipped / Total] 114 / 325 / 4 / 443:  44%|████▍     | 444/1000 [25:14<31:36,  3.41s/it]Resolve the response object . --> Lawsuit method to process a ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[lawsuit]] ( ResponseCommand [[decoy]] , String addr ) throws RemotingException { preProcess ( [[decoy]] , addr ) ; if ( [[decoy]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[decoy]] ) ; } else { String [[yammering]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[decoy]] . getResponseStatus ( ) , addr , [[decoy]] . getId ( ) ) ; logger . warn ( [[yammering]] ) ; if ( [[decoy]] . getCause ( ) != null ) { throw new InvokeException ( [[yammering]] , [[decoy]] . getCause ( ) ) ; } else { throw new InvokeException ( [[yammering]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 439 ---------------------------------------------
Get a random connection from a list of connections --> Crow a list of bankers . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > [[conns]] ) { if ( null == [[conns]] || [[conns]] . isEmpty ( ) ) { return null ; } int size = [[conns]] . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = [[conns]] . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[crow]] ( List < Connection > [[bankers]] ) { if ( null == [[bankers]] || [[bankers]] . isEmpty ( ) ) { return null ; } int size = [[bankers]] . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = [[bankers]] . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 440 ---------------------------------------------
Converts a response command to a response object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[adrienne]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Converts a response command to an exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[speckled]] ( ResponseCommand [[boot]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[boot]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Return detail error message . --> Sûr die RpcResponseCommand . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand [[responseCommand]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[sûr]] ( String clientErrMsg , ResponseCommand [[ascetic]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[ascetic]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 443 ---------------------------------------------
Print connection trace log . --> Logs a cring event . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[cringing]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 325 / 4 / 444:  44%|████▍     | 444/1000 [25:14<31:36,  3.41s/it][Succeeded / Failed / Skipped / Total] 115 / 326 / 4 / 445:  44%|████▍     | 445/1000 [25:18<31:34,  3.41s/it][Succeeded / Failed / Skipped / Total] 115 / 326 / 4 / 445:  45%|████▍     | 446/1000 [25:19<31:27,  3.41s/it][Succeeded / Failed / Skipped / Total] 115 / 327 / 4 / 446:  45%|████▍     | 446/1000 [25:19<31:27,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 327 / 4 / 447:  45%|████▍     | 447/1000 [25:24<31:26,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 327 / 4 / 447:  45%|████▍     | 448/1000 [25:26<31:20,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 328 / 4 / 448:  45%|████▍     | 448/1000 [25:26<31:20,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 329 / 4 / 449:  45%|████▍     | 449/1000 [25:29<31:17,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 329 / 4 / 449:  45%|████▌     | 450/1000 [25:30<31:10,  3.40s/it][Succeeded / Failed / Skipped / Total] 116 / 330 / 4 / 450:  45%|████▌     | 450/1000 [25:30<31:10,  3.40s/it][Succeeded / Failed / Skipped / Total] 116 / 331 / 4 / 451:  45%|████▌     | 451/1000 [25:35<31:09,  3.40s/it][Succeeded / Failed / Skipped / Total] 116 / 331 / 4 / 451:  45%|████▌     | 452/1000 [25:40<31:08,  3.41s/it]Create a server exception . --> Methode metallica --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[metallica]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[unbidden]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[disclosure]] = channel . remoteAddress ( ) ; return doParse ( [[disclosure]] != null ? [[disclosure]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Creates a new EventLoopGroup using the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[cornwallis]] ( int [[soufflés]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[soufflés]] , threadFactory ) : new NioEventLoopGroup ( [[soufflés]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the local address . --> caulk a kitagawa --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[caulk]] ( final Channel [[kitagawa]] ) { if ( null == [[kitagawa]] ) { return StringUtils . EMPTY ; } final SocketAddress [[gordo]] = [[kitagawa]] . localAddress ( ) ; return doParse ( [[gordo]] != null ? [[gordo]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[prizefighter]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse the local IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[zepp]] ( final Channel [[costi]] ) { if ( null == [[costi]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[costi]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Parse the remote host name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[convert]] ( final Channel [[antimatter]] ) { if ( null == [[antimatter]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[antimatter]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Parse the remote port from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[bumped]] ( final Channel [[onl]] ) { if ( null == [[onl]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[onl]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 116 / 332 / 4 / 452:  45%|████▌     | 452/1000 [25:40<31:08,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 332 / 4 / 452:  45%|████▌     | 453/1000 [25:44<31:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 333 / 4 / 453:  45%|████▌     | 453/1000 [25:44<31:05,  3.41s/it][Succeeded / Failed / Skipped / Total] 116 / 333 / 4 / 453:  45%|████▌     | 454/1000 [25:44<30:57,  3.40s/it][Succeeded / Failed / Skipped / Total] 117 / 333 / 4 / 454:  45%|████▌     | 454/1000 [25:44<30:57,  3.40s/it][Succeeded / Failed / Skipped / Total] 117 / 333 / 4 / 454:  46%|████▌     | 455/1000 [25:47<30:54,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 333 / 4 / 455:  46%|████▌     | 455/1000 [25:47<30:54,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 333 / 4 / 455:  46%|████▌     | 456/1000 [25:51<30:50,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 334 / 4 / 456:  46%|████▌     | 456/1000 [25:51<30:50,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 334 / 4 / 456:  46%|████▌     | 457/1000 [25:52<30:44,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 335 / 4 / 457:  46%|████▌     | 457/1000 [25:52<30:44,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 335 / 4 / 457:  46%|████▌     | 458/1000 [25:52<30:37,  3.39s/it][Succeeded / Failed / Skipped / Total] 118 / 335 / 5 / 458:  46%|████▌     | 458/1000 [25:52<30:37,  3.39s/it][Succeeded / Failed / Skipped / Total] 118 / 335 / 5 / 458:  46%|████▌     | 459/1000 [25:58<30:36,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 336 / 5 / 459:  46%|████▌     | 459/1000 [25:58<30:36,  3.40s/it][Succeeded / Failed / Skipped / Total] 118 / 336 / 5 / 459:  46%|████▌     | 460/1000 [26:00<30:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 118 / 337 / 5 / 460:  46%|████▌     | 460/1000 [26:00<30:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 118 / 337 / 5 / 460:  46%|████▌     | 461/1000 [26:01<30:25,  3.39s/it]Returns the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[pressurizing]] ( final Channel [[arrogantly]] ) { if ( null == [[arrogantly]] ) { return - 1 ; } final InetSocketAddress [[overpaid]] = ( InetSocketAddress ) [[arrogantly]] . localAddress ( ) ; if ( [[overpaid]] != null ) { return [[overpaid]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parse a socket address to a host ip . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[aj]] ( SocketAddress [[melanie]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[melanie]] ; if ( addrs != null ) { InetAddress [[chest]] = addrs . getAddress ( ) ; if ( null != [[chest]] ) { return [[chest]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 454 ---------------------------------------------
Get a connection from the pool . --> Returns the bonet . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[bonet]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Adds a connection to the pool . --> Gabrielle den Gabrielle . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . [[conns]] . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[gabrielle]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . [[aftershock]] . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 456 ---------------------------------------------
Removes a connection from the list and tries to close it . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[conns]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . [[agressive]] . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
Returns the custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[marguerita]] ( String [[akshay]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[akshay]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Starts the connection monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Returns the custom serializer for the given command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[marriage]] ( CommandCode [[helene]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[helene]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 460 ---------------------------------------------
Register a custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[baruch]] ( String className , CustomSerializer [[bodied]] ) { CustomSerializer [[estúpido]] = classCustomSerializer . putIfAbsent ( className , [[bodied]] ) ; if ( [[estúpido]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[estúpido]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 338 / 5 / 461:  46%|████▌     | 461/1000 [26:01<30:25,  3.39s/it][Succeeded / Failed / Skipped / Total] 118 / 338 / 5 / 461:  46%|████▌     | 462/1000 [26:01<30:18,  3.38s/it][Succeeded / Failed / Skipped / Total] 118 / 338 / 6 / 462:  46%|████▌     | 462/1000 [26:01<30:18,  3.38s/it][Succeeded / Failed / Skipped / Total] 118 / 338 / 6 / 462:  46%|████▋     | 463/1000 [26:09<30:19,  3.39s/it][Succeeded / Failed / Skipped / Total] 119 / 338 / 6 / 463:  46%|████▋     | 463/1000 [26:09<30:19,  3.39s/it][Succeeded / Failed / Skipped / Total] 119 / 338 / 6 / 463:  46%|████▋     | 464/1000 [26:09<30:13,  3.38s/it][Succeeded / Failed / Skipped / Total] 120 / 338 / 6 / 464:  46%|████▋     | 464/1000 [26:09<30:13,  3.38s/it][Succeeded / Failed / Skipped / Total] 120 / 338 / 6 / 464:  46%|████▋     | 465/1000 [26:10<30:07,  3.38s/it][Succeeded / Failed / Skipped / Total] 121 / 338 / 6 / 465:  46%|████▋     | 465/1000 [26:10<30:07,  3.38s/it][Succeeded / Failed / Skipped / Total] 121 / 338 / 6 / 465:  47%|████▋     | 466/1000 [26:13<30:02,  3.38s/it][Succeeded / Failed / Skipped / Total] 122 / 338 / 6 / 466:  47%|████▋     | 466/1000 [26:13<30:02,  3.38s/it][Succeeded / Failed / Skipped / Total] 122 / 338 / 6 / 466:  47%|████▋     | 467/1000 [26:13<29:55,  3.37s/it][Succeeded / Failed / Skipped / Total] 123 / 338 / 6 / 467:  47%|████▋     | 467/1000 [26:13<29:55,  3.37s/it][Succeeded / Failed / Skipped / Total] 123 / 338 / 6 / 467:  47%|████▋     | 468/1000 [26:15<29:51,  3.37s/it][Succeeded / Failed / Skipped / Total] 124 / 338 / 6 / 468:  47%|████▋     | 468/1000 [26:15<29:51,  3.37s/it][Succeeded / Failed / Skipped / Total] 124 / 338 / 6 / 468:  47%|████▋     | 469/1000 [26:22<29:51,  3.37s/it]Register a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[benzie]] ( CommandCode [[hieroglyphs]] , CustomSerializer [[cachaça]] ) { CustomSerializer [[kahlan]] = commandCustomSerializer . putIfAbsent ( [[hieroglyphs]] , [[cachaça]] ) ; if ( [[kahlan]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[hieroglyphs]] + ", the custom serializer is: " + [[kahlan]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 462 ---------------------------------------------
Write a batch of bytes to a socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Check if remote address is connected . --> Returns true if the given white space is abstain . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[abstain]] ( String [[white]] ) { Url [[camden]] = this . [[childcare]] . addressParser . parse ( [[white]] ) ; return this . isConnected ( [[camden]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 464 ---------------------------------------------
Returns an instance of FramedataImpl1 for the given opcode . --> Returns an instance of FramedataImpl1 for the given moneybag . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[moneybag]] ) { if ( [[moneybag]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[moneybag]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 465 ---------------------------------------------
Initialize the write buffer water mark . --> Cissy . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[cissy]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 466 ---------------------------------------------
Validate UTF - 8 data . --> Handles boogers . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[boogers]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 467 ---------------------------------------------
Sets the HTTP response code . --> Breezy zurueck . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[breezy]] ( int [[rusted]] ) { this . [[quantas]] = [[rusted]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 468 ---------------------------------------------
Updates the payload . --> Send a bathhouse message . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[bathhouse]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 338 / 6 / 469:  47%|████▋     | 469/1000 [26:22<29:51,  3.37s/it][Succeeded / Failed / Skipped / Total] 125 / 338 / 6 / 469:  47%|████▋     | 470/1000 [26:25<29:47,  3.37s/it][Succeeded / Failed / Skipped / Total] 126 / 338 / 6 / 470:  47%|████▋     | 470/1000 [26:25<29:47,  3.37s/it][Succeeded / Failed / Skipped / Total] 126 / 338 / 6 / 470:  47%|████▋     | 471/1000 [26:27<29:43,  3.37s/it][Succeeded / Failed / Skipped / Total] 126 / 339 / 6 / 471:  47%|████▋     | 471/1000 [26:27<29:43,  3.37s/it][Succeeded / Failed / Skipped / Total] 126 / 339 / 6 / 471:  47%|████▋     | 472/1000 [26:29<29:38,  3.37s/it][Succeeded / Failed / Skipped / Total] 127 / 339 / 6 / 472:  47%|████▋     | 472/1000 [26:29<29:38,  3.37s/it][Succeeded / Failed / Skipped / Total] 127 / 339 / 6 / 472:  47%|████▋     | 473/1000 [26:32<29:33,  3.37s/it][Succeeded / Failed / Skipped / Total] 128 / 339 / 6 / 473:  47%|████▋     | 473/1000 [26:32<29:33,  3.37s/it][Succeeded / Failed / Skipped / Total] 128 / 339 / 6 / 473:  47%|████▋     | 474/1000 [26:32<29:27,  3.36s/it][Succeeded / Failed / Skipped / Total] 129 / 339 / 6 / 474:  47%|████▋     | 474/1000 [26:32<29:27,  3.36s/it][Succeeded / Failed / Skipped / Total] 129 / 339 / 6 / 474:  48%|████▊     | 475/1000 [26:33<29:20,  3.35s/it][Succeeded / Failed / Skipped / Total] 130 / 339 / 6 / 475:  48%|████▊     | 475/1000 [26:33<29:20,  3.35s/it][Succeeded / Failed / Skipped / Total] 130 / 339 / 6 / 475:  48%|████▊     | 476/1000 [26:36<29:17,  3.35s/it]Checks the length of a single frame . --> Fuzzy version of this method . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[fuzzy]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 470 ---------------------------------------------
Checks if the requested protocol matches any of the known protocols . --> Bowmen der Juanita zurueck . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[bowmen]] ( String [[juanita]] ) { for ( IProtocol [[backward]] : knownProtocols ) { if ( [[backward]] . acceptProvidedProtocol ( [[juanita]] ) ) { protocol = [[backward]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
Checks if the given maxpacketsize is less than the realpacketsize --> [[[FAILED]]]

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[discards]] ( int maxpacketsize , int [[aftereffects]] ) throws IncompleteException { if ( maxpacketsize < [[aftereffects]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[aftereffects]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
Generate the final key . --> Calculates the alimentary for the given collections . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String [[in]] ) { String seckey = [[in]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[alimentary]] ( String [[collections]] ) { String seckey = [[collections]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 473 ---------------------------------------------
Process a binary frame . --> Handles attachments . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[attachments]] ( WebSocketImpl [[poisoning]] , Framedata frame ) { try { [[poisoning]] . getWebSocketListener ( ) . onWebsocketMessage ( [[poisoning]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[poisoning]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 474 ---------------------------------------------
Logs a runtime exception . --> Called when an error occurs during a websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[ams]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 475 ---------------------------------------------
Process a text frame . --> Felder felder . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[felder]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 339 / 6 / 476:  48%|████▊     | 476/1000 [26:36<29:17,  3.35s/it][Succeeded / Failed / Skipped / Total] 131 / 339 / 6 / 476:  48%|████▊     | 477/1000 [26:37<29:11,  3.35s/it][Succeeded / Failed / Skipped / Total] 132 / 339 / 6 / 477:  48%|████▊     | 477/1000 [26:37<29:11,  3.35s/it][Succeeded / Failed / Skipped / Total] 132 / 339 / 6 / 477:  48%|████▊     | 478/1000 [26:40<29:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 132 / 340 / 6 / 478:  48%|████▊     | 478/1000 [26:40<29:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 132 / 340 / 6 / 478:  48%|████▊     | 479/1000 [26:44<29:05,  3.35s/it][Succeeded / Failed / Skipped / Total] 133 / 340 / 6 / 479:  48%|████▊     | 479/1000 [26:44<29:05,  3.35s/it][Succeeded / Failed / Skipped / Total] 133 / 340 / 6 / 479:  48%|████▊     | 480/1000 [26:45<28:59,  3.34s/it][Succeeded / Failed / Skipped / Total] 134 / 340 / 6 / 480:  48%|████▊     | 480/1000 [26:45<28:59,  3.34s/it]Process a continuous frame . --> Handles incoming atmospheres . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[atmospheres]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Process a continuous frame . --> Handle hocking . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[hocking]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 478 ---------------------------------------------
Process a frame that has not been completed . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[accustomed]] ( Framedata [[rossellini]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[rossellini]] ; addToBufferList ( [[rossellini]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Process a closing frame . --> Academy . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[academy]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 480 ---------------------------------------------
Gets the payload from the byte buffer list . --> Methode permettant de communiqué . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[communiqué]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 481 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 340 / 6 / 481:  48%|████▊     | 481/1000 [26:45<28:52,  3.34s/it][Succeeded / Failed / Skipped / Total] 135 / 340 / 6 / 481:  48%|████▊     | 482/1000 [26:49<28:49,  3.34s/it][Succeeded / Failed / Skipped / Total] 136 / 340 / 6 / 482:  48%|████▊     | 482/1000 [26:49<28:49,  3.34s/it][Succeeded / Failed / Skipped / Total] 137 / 340 / 6 / 483:  48%|████▊     | 483/1000 [26:49<28:43,  3.33s/it][Succeeded / Failed / Skipped / Total] 137 / 340 / 6 / 483:  48%|████▊     | 484/1000 [26:49<28:36,  3.33s/it][Succeeded / Failed / Skipped / Total] 138 / 340 / 6 / 484:  48%|████▊     | 484/1000 [26:49<28:36,  3.33s/it][Succeeded / Failed / Skipped / Total] 139 / 340 / 6 / 485:  48%|████▊     | 485/1000 [26:53<28:32,  3.33s/it][Succeeded / Failed / Skipped / Total] 139 / 340 / 6 / 485:  49%|████▊     | 486/1000 [26:53<28:26,  3.32s/it][Succeeded / Failed / Skipped / Total] 140 / 340 / 6 / 486:  49%|████▊     | 486/1000 [26:53<28:26,  3.32s/it][Succeeded / Failed / Skipped / Total] 141 / 340 / 6 / 487:  49%|████▊     | 487/1000 [26:53<28:19,  3.31s/it][Succeeded / Failed / Skipped / Total] 141 / 340 / 6 / 487:  49%|████▉     | 488/1000 [26:57<28:17,  3.32s/it][Succeeded / Failed / Skipped / Total] 141 / 341 / 6 / 488:  49%|████▉     | 488/1000 [26:57<28:17,  3.32s/it]Check the buffer limit and throw an exception if it is too large . --> Berti zurueck . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[berti]] ( ) throws LimitExceededException { long [[abortion]] = getByteBufferListSize ( ) ; if ( [[abortion]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[abortion]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 482 ---------------------------------------------
Decodes the data received from the server . --> Process an apron message . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[apron]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 483 ---------------------------------------------
Returns the total number of bytes in the buffer list . --> zahara zahara . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[zahara]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[inaccessible]] : byteBufferList ) { totalSize += [[inaccessible]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 484 ---------------------------------------------
Translate the first line of a HTTP handshake . --> Translate a CAFTAN response to a HandshakeBuilder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[caftan]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 485 ---------------------------------------------
Close the connection due to a wrong handshake . --> Bonzo exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[bonzo]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 486 ---------------------------------------------
Translate handshake http server . --> Translate anthros and buttin . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[firstLineTokens]] , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[anthros]] , String [[buttin]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 487 ---------------------------------------------
Generate HTTP response due to error . --> Score card . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[scorecard]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 488 ---------------------------------------------
Connect to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[guatemala]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
[Succeeded / Failed / Skipped / Total] 142 / 341 / 6 / 489:  49%|████▉     | 489/1000 [26:59<28:12,  3.31s/it][Succeeded / Failed / Skipped / Total] 142 / 341 / 6 / 489:  49%|████▉     | 490/1000 [27:00<28:06,  3.31s/it][Succeeded / Failed / Skipped / Total] 142 / 342 / 6 / 490:  49%|████▉     | 490/1000 [27:00<28:06,  3.31s/it][Succeeded / Failed / Skipped / Total] 143 / 342 / 6 / 491:  49%|████▉     | 491/1000 [27:08<28:08,  3.32s/it][Succeeded / Failed / Skipped / Total] 143 / 342 / 6 / 491:  49%|████▉     | 492/1000 [27:10<28:03,  3.31s/it][Succeeded / Failed / Skipped / Total] 143 / 343 / 6 / 492:  49%|████▉     | 492/1000 [27:10<28:03,  3.31s/it][Succeeded / Failed / Skipped / Total] 144 / 343 / 6 / 493:  49%|████▉     | 493/1000 [27:11<27:58,  3.31s/it][Succeeded / Failed / Skipped / Total] 144 / 343 / 6 / 493:  49%|████▉     | 494/1000 [27:13<27:53,  3.31s/it]--------------------------------------------- Result 489 ---------------------------------------------
Sends a 500 error response and closes the connection . --> Liefert die allergic . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[allergic]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "[["Murakami" != "Murakami"]]" != "[["Murakami" != "Murakami"]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 490 ---------------------------------------------
Sends the given text to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[watchtowers]] ( String [[cosmonauts]] ) { if ( [[cosmonauts]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[watchtowers]] ( draft . createFrames ( [[cosmonauts]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Sends a handshake to the server . --> Breuer werden . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String [[path]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[path]] = "/" ; else [[path]] = part1 ; if ( part2 != null ) [[path]] += ' ' + part2 ; int [[port]] = getPort ( ) ; String host = uri . getHost ( ) + ( ( [[port]] != WebSocketImpl . DEFAULT_PORT && [[port]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[port]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[path]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[breuer]] ( ) throws InvalidHandshakeException { String [[blemish]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[blemish]] = "/" ; else [[blemish]] = part1 ; if ( part2 != null ) [[blemish]] += ' ' + part2 ; int [[cornwallis]] = getPort ( ) ; String host = uri . getHost ( ) + ( ( [[cornwallis]] != WebSocketImpl . DEFAULT_PORT && [[cornwallis]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[cornwallis]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[blemish]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 492 ---------------------------------------------
Get the port from the URI . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[everly]] ( ) { int [[archaeological]] = uri . getPort ( ) ; if ( [[archaeological]] == - 1 ) { String [[burry]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[burry]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[burry]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[burry]] ) ; } } return [[archaeological]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Reset the connection . --> Alejandra closes the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . [[socket]] != null ) { this . [[socket]] . close ( ) ; this . [[socket]] = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . [[engine]] = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[alejandra]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . [[alyona]] != null ) { this . [[alyona]] . close ( ) ; this . [[alyona]] = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . [[copybooks]] = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 344 / 6 / 494:  49%|████▉     | 494/1000 [27:13<27:53,  3.31s/it][Succeeded / Failed / Skipped / Total] 145 / 344 / 6 / 495:  50%|████▉     | 495/1000 [27:15<27:48,  3.30s/it][Succeeded / Failed / Skipped / Total] 145 / 344 / 6 / 495:  50%|████▉     | 496/1000 [27:15<27:42,  3.30s/it][Succeeded / Failed / Skipped / Total] 146 / 344 / 6 / 496:  50%|████▉     | 496/1000 [27:15<27:42,  3.30s/it][Succeeded / Failed / Skipped / Total] 147 / 344 / 6 / 497:  50%|████▉     | 497/1000 [27:22<27:42,  3.30s/it][Succeeded / Failed / Skipped / Total] 147 / 344 / 6 / 497:  50%|████▉     | 498/1000 [27:23<27:36,  3.30s/it][Succeeded / Failed / Skipped / Total] 147 / 345 / 6 / 498:  50%|████▉     | 498/1000 [27:23<27:36,  3.30s/it][Succeeded / Failed / Skipped / Total] 148 / 345 / 6 / 499:  50%|████▉     | 499/1000 [27:23<27:29,  3.29s/it][Succeeded / Failed / Skipped / Total] 148 / 345 / 6 / 499:  50%|█████     | 500/1000 [27:28<27:28,  3.30s/it]Sets the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[chandelier]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
Stop the connection lost timer . --> Babuji babuji --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[babuji]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Restarts the connection lost timer . --> Bonner . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[bonner]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 497 ---------------------------------------------
Cancels the connection lost timer . --> Shoplifter . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[shoplifter]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 498 ---------------------------------------------
Start the connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[questioning]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Called when a websocket handshake has been received . --> Create a baloney server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[baloney]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 346 / 6 / 500:  50%|█████     | 500/1000 [27:28<27:28,  3.30s/it][Succeeded / Failed / Skipped / Total] 149 / 346 / 6 / 501:  50%|█████     | 501/1000 [27:29<27:22,  3.29s/it][Succeeded / Failed / Skipped / Total] 149 / 346 / 6 / 501:  50%|█████     | 502/1000 [27:30<27:17,  3.29s/it][Succeeded / Failed / Skipped / Total] 149 / 347 / 6 / 502:  50%|█████     | 502/1000 [27:30<27:17,  3.29s/it][Succeeded / Failed / Skipped / Total] 149 / 348 / 6 / 503:  50%|█████     | 503/1000 [27:32<27:13,  3.29s/it][Succeeded / Failed / Skipped / Total] 149 / 348 / 6 / 503:  50%|█████     | 504/1000 [27:34<27:08,  3.28s/it][Succeeded / Failed / Skipped / Total] 150 / 348 / 6 / 504:  50%|█████     | 504/1000 [27:34<27:08,  3.28s/it][Succeeded / Failed / Skipped / Total] 151 / 348 / 6 / 505:  50%|█████     | 505/1000 [27:35<27:02,  3.28s/it][Succeeded / Failed / Skipped / Total] 151 / 348 / 6 / 505:  51%|█████     | 506/1000 [27:37<26:58,  3.28s/it]Executes the connection lost detection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long minimumPongTime ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[salivate]] ( WebSocket [[disintegrator]] , long minimumPongTime ) { if ( ! ( [[disintegrator]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[disintegrator]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 501 ---------------------------------------------
Stop the thread . --> Stop piedmontese --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[azur]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[["Piedmontese" != "Piedmontese"]]" != "[["Piedmontese" != "Piedmontese"]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[canyon]] ( ) { int [[influenza]] = getAddress ( ) . getPort ( ) ; if ( [[influenza]] == 0 && server != null ) { [[influenza]] = server . socket ( ) . getLocalPort ( ) ; } return [[influenza]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
Sends a ping frame to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[disintegrator]] , Framedata [[melanie]] ) { [[disintegrator]] . sendFrame ( new PongFrame ( ( PingFrame ) [[melanie]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 504 ---------------------------------------------
Handles a read operation . --> Reads data from the socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[[False]]" != "[[False]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[["Drummers" != "Drummers"]]" != "[["Drummers" != "Drummers"]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Do additional read . --> This method is called when a connection is abandoned . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[aborigine]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 506 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 348 / 6 / 506:  51%|█████     | 506/1000 [27:37<26:58,  3.28s/it][Succeeded / Failed / Skipped / Total] 152 / 348 / 7 / 507:  51%|█████     | 507/1000 [27:37<26:52,  3.27s/it][Succeeded / Failed / Skipped / Total] 152 / 348 / 7 / 507:  51%|█████     | 508/1000 [27:40<26:47,  3.27s/it][Succeeded / Failed / Skipped / Total] 153 / 348 / 7 / 508:  51%|█████     | 508/1000 [27:40<26:47,  3.27s/it][Succeeded / Failed / Skipped / Total] 154 / 348 / 7 / 509:  51%|█████     | 509/1000 [27:41<26:42,  3.26s/it][Succeeded / Failed / Skipped / Total] 154 / 348 / 7 / 509:  51%|█████     | 510/1000 [27:44<26:38,  3.26s/it][Succeeded / Failed / Skipped / Total] 155 / 348 / 7 / 510:  51%|█████     | 510/1000 [27:44<26:38,  3.26s/it][Succeeded / Failed / Skipped / Total] 156 / 348 / 7 / 511:  51%|█████     | 511/1000 [27:45<26:33,  3.26s/it][Succeeded / Failed / Skipped / Total] 156 / 348 / 7 / 511:  51%|█████     | 512/1000 [27:45<26:27,  3.25s/it][Succeeded / Failed / Skipped / Total] 157 / 348 / 7 / 512:  51%|█████     | 512/1000 [27:45<26:27,  3.25s/it]Setup the selector and server thread . --> Start cabbages . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[cabbages]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 507 ---------------------------------------------
Shuts down the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Writes a batch of data to the socket . --> This method is called when an incoming selection key is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[accepting]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 509 ---------------------------------------------
Returns the socket associated with the given connection . --> Methode zurueck . --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[erzurum]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[erzurum]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 510 ---------------------------------------------
Sends a message to one or more clients . --> Internates the given data with the given clients . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[internationals]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[internationals]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Ensure that a single thread is started . --> Daniela daniela . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[daniela]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 512 ---------------------------------------------
Sends a message to one or more clients . --> Bullshittin . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[bullshittin]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 348 / 7 / 513:  51%|█████▏    | 513/1000 [27:49<26:25,  3.25s/it][Succeeded / Failed / Skipped / Total] 158 / 348 / 7 / 513:  51%|█████▏    | 514/1000 [27:49<26:19,  3.25s/it][Succeeded / Failed / Skipped / Total] 159 / 348 / 7 / 514:  51%|█████▏    | 514/1000 [27:49<26:19,  3.25s/it][Succeeded / Failed / Skipped / Total] 159 / 349 / 7 / 515:  52%|█████▏    | 515/1000 [27:53<26:16,  3.25s/it][Succeeded / Failed / Skipped / Total] 159 / 349 / 7 / 515:  52%|█████▏    | 516/1000 [27:57<26:13,  3.25s/it][Succeeded / Failed / Skipped / Total] 160 / 349 / 7 / 516:  52%|█████▏    | 516/1000 [27:57<26:13,  3.25s/it][Succeeded / Failed / Skipped / Total] 161 / 349 / 7 / 517:  52%|█████▏    | 517/1000 [27:57<26:07,  3.25s/it][Succeeded / Failed / Skipped / Total] 161 / 349 / 7 / 517:  52%|█████▏    | 518/1000 [28:01<26:04,  3.25s/it][Succeeded / Failed / Skipped / Total] 161 / 350 / 7 / 518:  52%|█████▏    | 518/1000 [28:01<26:04,  3.25s/it]Accept a new connection . --> Attempts to connect to the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[consultations]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 514 ---------------------------------------------
Fill the given draft s frames with the given data . --> Adds anton frames to a draft . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[anton]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 515 ---------------------------------------------
Start the JPA API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[segregation]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 516 ---------------------------------------------
Send a broadcast to all registered clients . --> Cascara a data . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > [[clients]] ) { String [[sData]] = null ; if ( data instanceof String ) { [[sData]] = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( [[sData]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , [[sData]] , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[cascara]] ( Object data , Collection < WebSocket > [[aberrations]] ) { String [[cabeza]] = null ; if ( data instanceof String ) { [[cabeza]] = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( [[cabeza]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[aberrations]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , [[cabeza]] , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 517 ---------------------------------------------
Transfers the source buffer to the destination buffer . --> Anthropologist the given source and stage hands . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer [[dest]] ) { if ( source == null || [[dest]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[dest]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[dest]] . put ( source ) ; return limit ; } else { [[dest]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[anthropologist]] ( ByteBuffer source , ByteBuffer [[stagehands]] ) { if ( source == null || [[stagehands]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[stagehands]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[stagehands]] . put ( source ) ; return limit ; } else { [[stagehands]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 518 ---------------------------------------------
Executes the given block in a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[pendejo]] ( Consumer < EntityManager > block ) { [[pendejo]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 351 / 7 / 519:  52%|█████▏    | 519/1000 [28:01<25:58,  3.24s/it][Succeeded / Failed / Skipped / Total] 161 / 351 / 7 / 519:  52%|█████▏    | 520/1000 [28:05<25:55,  3.24s/it][Succeeded / Failed / Skipped / Total] 162 / 351 / 7 / 520:  52%|█████▏    | 520/1000 [28:05<25:55,  3.24s/it][Succeeded / Failed / Skipped / Total] 162 / 352 / 7 / 521:  52%|█████▏    | 521/1000 [28:09<25:53,  3.24s/it][Succeeded / Failed / Skipped / Total] 162 / 352 / 7 / 521:  52%|█████▏    | 522/1000 [28:12<25:50,  3.24s/it][Succeeded / Failed / Skipped / Total] 163 / 352 / 7 / 522:  52%|█████▏    | 522/1000 [28:12<25:50,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 352 / 7 / 523:  52%|█████▏    | 523/1000 [28:12<25:44,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 352 / 7 / 523:  52%|█████▏    | 524/1000 [28:19<25:43,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 353 / 7 / 524:  52%|█████▏    | 524/1000 [28:19<25:43,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 354 / 7 / 525:  52%|█████▎    | 525/1000 [28:24<25:41,  3.25s/it][Succeeded / Failed / Skipped / Total] 164 / 354 / 7 / 525:  53%|█████▎    | 526/1000 [28:24<25:35,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 355 / 7 / 526:  53%|█████▎    | 526/1000 [28:24<25:35,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 356 / 7 / 527:  53%|█████▎    | 527/1000 [28:25<25:30,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 356 / 7 / 527:  53%|█████▎    | 528/1000 [28:28<25:27,  3.24s/it][Succeeded / Failed / Skipped / Total] 164 / 357 / 7 / 528:  53%|█████▎    | 528/1000 [28:28<25:27,  3.24s/it]Returns an EntityManager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[weitzman]] ( String [[birdie]] ) { EntityManagerFactory emf = emfs . get ( [[birdie]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 520 ---------------------------------------------
Convert an array of arguments to a scala buffer . --> Aesthete aesthete . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[aesthete]] ( final Object ... [[bigwig]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[bigwig]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments into a list if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[sanju]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Returns the localized value for the given keys . --> Get a string from a list of strings --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[conniption]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[onoff]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[conniption]] . toSeq ( ) , [[onoff]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 523 ---------------------------------------------
Returns the localized value for the given key in the given language . --> Returns the localized copybooks for the given language --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[copybooks]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[copybooks]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
Returns true if the specified key is defined at the specified language . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[barbarian]] ( play . api . i18n . Lang lang , String [[blintzes]] ) { return messages . isDefinedAt ( [[blintzes]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[suribachi]] ( Http . RequestHeader [[inconvenienced]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[inconvenienced]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 526 ---------------------------------------------
Sets the language of the given result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[zeno]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 527 ---------------------------------------------
Returns the preferred messages for the given languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[resplendent]] ( Collection < Lang > [[dinosaur]] ) { Seq < Lang > cs = Scala . asScala ( [[dinosaur]] ) ; play . api . i18n . Messages [[pinwheel]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[pinwheel]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 528 ---------------------------------------------
Set the REPLACEME0 bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[AXES]] ( play . api . inject . Binding < ? > ... [[AXES]] ) { return [[AXES]] ( Guiceable . bindings ( [[AXES]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 358 / 7 / 529:  53%|█████▎    | 529/1000 [28:28<25:21,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 358 / 7 / 529:  53%|█████▎    | 530/1000 [28:32<25:18,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 359 / 7 / 530:  53%|█████▎    | 530/1000 [28:32<25:18,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 360 / 7 / 531:  53%|█████▎    | 531/1000 [28:35<25:15,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 360 / 7 / 531:  53%|█████▎    | 532/1000 [28:36<25:09,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 361 / 7 / 532:  53%|█████▎    | 532/1000 [28:36<25:09,  3.23s/it][Succeeded / Failed / Skipped / Total] 164 / 362 / 7 / 533:  53%|█████▎    | 533/1000 [28:37<25:04,  3.22s/it][Succeeded / Failed / Skipped / Total] 164 / 362 / 7 / 533:  53%|█████▎    | 534/1000 [28:41<25:02,  3.22s/it][Succeeded / Failed / Skipped / Total] 164 / 363 / 7 / 534:  53%|█████▎    | 534/1000 [28:41<25:02,  3.22s/it][Succeeded / Failed / Skipped / Total] 164 / 364 / 7 / 535:  54%|█████▎    | 535/1000 [28:41<24:56,  3.22s/it][Succeeded / Failed / Skipped / Total] 164 / 364 / 7 / 535:  54%|█████▎    | 536/1000 [28:43<24:52,  3.22s/it][Succeeded / Failed / Skipped / Total] 165 / 364 / 7 / 536:  54%|█████▎    | 536/1000 [28:43<24:52,  3.22s/it][Succeeded / Failed / Skipped / Total] 165 / 365 / 7 / 537:  54%|█████▎    | 537/1000 [28:44<24:46,  3.21s/it][Succeeded / Failed / Skipped / Total] 165 / 365 / 7 / 537:  54%|█████▍    | 538/1000 [28:45<24:41,  3.21s/it][Succeeded / Failed / Skipped / Total] 166 / 365 / 7 / 538:  54%|█████▍    | 538/1000 [28:45<24:41,  3.21s/it][Succeeded / Failed / Skipped / Total] 167 / 365 / 7 / 539:  54%|█████▍    | 539/1000 [28:51<24:40,  3.21s/it][Succeeded / Failed / Skipped / Total] 167 / 365 / 7 / 539:  54%|█████▍    | 540/1000 [28:54<24:37,  3.21s/it][Succeeded / Failed / Skipped / Total] 168 / 365 / 7 / 540:  54%|█████▍    | 540/1000 [28:54<24:37,  3.21s/it]Sets the bindings for the given Guiceable modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[sink]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[sink]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Set the bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[haves]] ( play . api . inject . Module ... [[delegate]] ) { return [[haves]] ( Guiceable . [[delegate]] ( [[delegate]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Returns a copy of this builder with the specified Guiceable modules overridden . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[uga]] ( GuiceableModule ... [[programme]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[programme]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Override this Guiceable with the specified modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[peak]] ( play . api . inject . Module ... [[connotations]] ) { return [[peak]] ( Guiceable . [[connotations]] ( [[connotations]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Overrides this object with the specified bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[cop]] ( play . api . inject . Binding < ? > ... [[silhouettes]] ) { return [[cop]] ( Guiceable . [[silhouettes]] ( [[silhouettes]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Disables the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[collect]] ( Class < ? > ... [[dinsmore]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[dinsmore]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Returns the binding for this annotation in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[behavioural]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Call a request and return the result . --> Rucks up a set of upsets --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[ruck]] ( Request [[upsets]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Returns the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[lamson]] ( String [[unsung]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[unsung]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Creates a new tuple with the given values . --> Liefert die Bonneville . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > Tuple < [[A]] , B > Tuple ( [[A]] a , B b ) { return new Tuple < [[A]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[bonneville]] , B > Tuple < [[bonneville]] , B > Tuple ( [[bonneville]] a , B b ) { return new Tuple < [[bonneville]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Converts an ExecutionContext to an Executor . --> tak a bhaiyya --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[tak]] ( ExecutionContext [[bhaiyya]] ) { ExecutionContext prepared = [[bhaiyya]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 540 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> Hangzhou arachnid u1 n2 u2 --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[hangzhou]] ( String [[arachnid]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[arachnid]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 541 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 366 / 7 / 541:  54%|█████▍    | 541/1000 [28:58<24:34,  3.21s/it][Succeeded / Failed / Skipped / Total] 168 / 366 / 7 / 541:  54%|█████▍    | 542/1000 [28:59<24:30,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 366 / 7 / 542:  54%|█████▍    | 542/1000 [28:59<24:30,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 367 / 7 / 543:  54%|█████▍    | 543/1000 [29:03<24:27,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 367 / 7 / 543:  54%|█████▍    | 544/1000 [29:06<24:24,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 368 / 7 / 544:  54%|█████▍    | 544/1000 [29:06<24:24,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 369 / 7 / 545:  55%|█████▍    | 545/1000 [29:07<24:18,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 369 / 7 / 545:  55%|█████▍    | 546/1000 [29:10<24:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 370 / 7 / 546:  55%|█████▍    | 546/1000 [29:10<24:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 371 / 7 / 547:  55%|█████▍    | 547/1000 [29:10<24:09,  3.20s/it][Succeeded / Failed / Skipped / Total] 169 / 371 / 7 / 547:  55%|█████▍    | 548/1000 [29:20<24:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 372 / 7 / 548:  55%|█████▍    | 548/1000 [29:20<24:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 373 / 7 / 549:  55%|█████▍    | 549/1000 [29:20<24:06,  3.21s/it][Succeeded / Failed / Skipped / Total] 169 / 373 / 7 / 549:  55%|█████▌    | 550/1000 [29:22<24:02,  3.20s/it]Creates a new JPAConfig instance with the specified name and persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[jennie]] ( String [[gilder]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[gilder]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Factory method for creating a 5 - element H2O tuple . --> Factory method for creating an Acupuncture . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , [[D]] , E > [[Tuple5]] < A , B , C , [[D]] , E > [[Tuple5]] ( A a , B b , C c , [[D]] d , E [[e]] ) { return new [[Tuple5]] < A , B , C , [[D]] , E > ( a , b , c , d , [[e]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , [[poorhouse]] , E > [[Acupuncture]] < A , B , C , [[poorhouse]] , E > [[Acupuncture]] ( A a , B b , C c , [[poorhouse]] d , E [[caution]] ) { return new [[Acupuncture]] < A , B , C , [[poorhouse]] , E > ( a , b , c , d , [[caution]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 543 ---------------------------------------------
Creates a flow from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[were]] ( String [[sauer]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[sauer]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a constraint validator to the factory . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[skinnier]] ConstraintValidator < ? , ? > > [[brazier]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a flow from a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[seventeen]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[seventeen]] -> { return ByteString . fromString ( Json . stringify ( [[seventeen]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[bloodier]] ( Map < String , String > [[alloys]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[donations]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[accusation]] : [[alloys]] . entrySet ( ) ) { [[donations]] . add ( new JPAConfig . PersistenceUnit ( [[accusation]] . getKey ( ) , [[accusation]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[donations]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[cheetah]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Handles a forbidden request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[krakow]] ( RequestHeader [[embarcadero]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[embarcadero]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[guantanamo]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
[Succeeded / Failed / Skipped / Total] 169 / 374 / 7 / 550:  55%|█████▌    | 550/1000 [29:22<24:02,  3.20s/it][Succeeded / Failed / Skipped / Total] 169 / 375 / 7 / 551:  55%|█████▌    | 551/1000 [29:23<23:57,  3.20s/it][Succeeded / Failed / Skipped / Total] 169 / 375 / 7 / 551:  55%|█████▌    | 552/1000 [29:23<23:51,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 375 / 7 / 552:  55%|█████▌    | 552/1000 [29:23<23:51,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 376 / 7 / 553:  55%|█████▌    | 553/1000 [29:32<23:52,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 376 / 7 / 553:  55%|█████▌    | 554/1000 [29:32<23:47,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 377 / 7 / 554:  55%|█████▌    | 554/1000 [29:32<23:47,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 378 / 7 / 555:  56%|█████▌    | 555/1000 [29:34<23:42,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 378 / 7 / 555:  56%|█████▌    | 556/1000 [29:35<23:37,  3.19s/it]--------------------------------------------- Result 550 ---------------------------------------------
Called when a client error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader [[request]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[polaco]] ( RequestHeader [[carabinieri]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[carabinieri]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[carabinieri]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[carabinieri]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[carabinieri]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 551 ---------------------------------------------
Get a matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String [[methodName]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[methodName]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[caspar]] ( final Class < ? > cls , final String [[máxima]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[máxima]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Handles a 404 error . --> što što --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[što]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Handles a server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[aomori]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 554 ---------------------------------------------
Creates a useful exception to handle the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[influenza]] ( final Throwable [[adapt]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[adapt]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Logs a server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[sorting]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 556 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 379 / 7 / 556:  56%|█████▌    | 556/1000 [29:35<23:37,  3.19s/it][Succeeded / Failed / Skipped / Total] 170 / 380 / 7 / 557:  56%|█████▌    | 557/1000 [29:41<23:36,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 380 / 7 / 557:  56%|█████▌    | 558/1000 [29:45<23:34,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 381 / 7 / 558:  56%|█████▌    | 558/1000 [29:45<23:34,  3.20s/it][Succeeded / Failed / Skipped / Total] 170 / 381 / 7 / 558:  56%|█████▌    | 559/1000 [29:47<23:29,  3.20s/it][Succeeded / Failed / Skipped / Total] 171 / 381 / 7 / 559:  56%|█████▌    | 559/1000 [29:47<23:29,  3.20s/it][Succeeded / Failed / Skipped / Total] 171 / 381 / 7 / 559:  56%|█████▌    | 560/1000 [29:59<23:33,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 381 / 7 / 560:  56%|█████▌    | 560/1000 [29:59<23:33,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 381 / 7 / 560:  56%|█████▌    | 561/1000 [30:00<23:29,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 382 / 7 / 561:  56%|█████▌    | 561/1000 [30:00<23:29,  3.21s/it][Succeeded / Failed / Skipped / Total] 172 / 382 / 7 / 561:  56%|█████▌    | 562/1000 [30:01<23:23,  3.20s/it][Succeeded / Failed / Skipped / Total] 172 / 383 / 7 / 562:  56%|█████▌    | 562/1000 [30:01<23:23,  3.20s/it][Succeeded / Failed / Skipped / Total] 172 / 383 / 7 / 562:  56%|█████▋    | 563/1000 [30:08<23:23,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 383 / 7 / 563:  56%|█████▋    | 563/1000 [30:08<23:23,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 383 / 7 / 563:  56%|█████▋    | 564/1000 [30:09<23:19,  3.21s/it]Handles a dev error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[linemen]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a development error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[actuarial]] ( RequestHeader request , UsefulException [[caracas]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[caracas]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a build doc handler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[takizawa]] ( File [[elko]] ) { FileRepository repo = new FilesystemRepository ( [[elko]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a build doc handler from a directory and a jar file . --> Liefert die erzurum aufgerufen . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[directory]] , JarFile jarFile , String [[base]] ) { return fromDirectoryAndJar ( [[directory]] , jarFile , [[base]] , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[erzurum]] , JarFile jarFile , String [[anche]] ) { return fromDirectoryAndJar ( [[erzurum]] , jarFile , [[anche]] , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Creates a build doc handler from a list of resources . --> Jeanette build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[jeanette]] ( File [ ] [[wetsuit]] , String [ ] baseDirs ) throws IOException { assert ( [[wetsuit]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[wetsuit]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[wetsuit]] . length ; i ++ ) { File file = [[wetsuit]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 561 ---------------------------------------------
Consume data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[referenced]] ( Materializer [[booming]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[booming]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[midsummer]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Creates an entity from a string . --> Creates a HttpEntity for a Kasey request --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[kasey]] ( String content , String [[wetsuit]] ) { return new Strict ( ByteString . fromString ( content , [[wetsuit]] ) , Optional . of ( "text/plain; charset=" + [[wetsuit]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 564 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 384 / 7 / 564:  56%|█████▋    | 564/1000 [30:09<23:19,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 384 / 7 / 564:  56%|█████▋    | 565/1000 [30:13<23:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 385 / 7 / 565:  56%|█████▋    | 565/1000 [30:13<23:15,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 385 / 7 / 565:  57%|█████▋    | 566/1000 [30:17<23:13,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 386 / 7 / 566:  57%|█████▋    | 566/1000 [30:17<23:13,  3.21s/it][Succeeded / Failed / Skipped / Total] 173 / 386 / 7 / 566:  57%|█████▋    | 567/1000 [30:21<23:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 174 / 386 / 7 / 567:  57%|█████▋    | 567/1000 [30:21<23:11,  3.21s/it][Succeeded / Failed / Skipped / Total] 174 / 386 / 7 / 567:  57%|█████▋    | 568/1000 [30:23<23:06,  3.21s/it][Succeeded / Failed / Skipped / Total] 174 / 387 / 7 / 568:  57%|█████▋    | 568/1000 [30:23<23:06,  3.21s/it][Succeeded / Failed / Skipped / Total] 174 / 387 / 7 / 568:  57%|█████▋    | 569/1000 [30:23<23:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 174 / 387 / 8 / 569:  57%|█████▋    | 569/1000 [30:23<23:01,  3.20s/it][Succeeded / Failed / Skipped / Total] 174 / 387 / 8 / 569:  57%|█████▋    | 570/1000 [30:26<22:57,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 387 / 8 / 570:  57%|█████▋    | 570/1000 [30:26<22:57,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 387 / 8 / 570:  57%|█████▋    | 571/1000 [30:26<22:52,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 388 / 8 / 571:  57%|█████▋    | 571/1000 [30:26<22:52,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 388 / 8 / 571:  57%|█████▋    | 572/1000 [30:30<22:49,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 389 / 8 / 572:  57%|█████▋    | 572/1000 [30:30<22:49,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 389 / 8 / 572:  57%|█████▋    | 573/1000 [30:32<22:45,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 390 / 8 / 573:  57%|█████▋    | 573/1000 [30:32<22:45,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 390 / 8 / 573:  57%|█████▋    | 574/1000 [30:33<22:41,  3.20s/it]Creates a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[crumbling]] ( File [[disappoint]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[disappoint]] ) ; FileRepository [[jeanie]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jeanie]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jeanie]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 565 ---------------------------------------------
Creates a new chunked entity from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[calista]] ( Source < ByteString , ? > [[aposto]] , Optional < String > contentType ) { return new Chunked ( [[aposto]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 566 ---------------------------------------------
Creates a HttpEntity from the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String [[charset]] ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[channa]] ( Content content , String [[auerbach]] ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 567 ---------------------------------------------
Sends a JSON response with the given status code and content . --> Aaaahhh aaaahhh aaaahhh --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[aaaahhh]] ( int [[cassandra]] , JsonNode [[greenbaum]] , JsonEncoding encoding ) { if ( [[greenbaum]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[aaaahhh]] ( [[aaaahhh]] ) . sendJson ( [[greenbaum]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 568 ---------------------------------------------
Returns a JSON response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[edwards]] , JsonNode [[awl]] ) { return status ( status , [[awl]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 569 ---------------------------------------------
Find user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a HTTP status with the given content and content length . --> Send content to camacho --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream content , long contentLength ) { return [[status]] ( [[status]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[camacho]] ( int [[jogs]] , InputStream content , long contentLength ) { return [[camacho]] ( [[camacho]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 571 ---------------------------------------------
Creates a new HTTP response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[bloodier]] ( int [[conscious]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[bloodier]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[omitting]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 573 ---------------------------------------------
Returns the preferred language for the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[camacho]] ( Collection < Lang > [[inappropriate]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[inappropriate]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 574 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 391 / 8 / 574:  57%|█████▋    | 574/1000 [30:33<22:41,  3.20s/it][Succeeded / Failed / Skipped / Total] 175 / 391 / 8 / 574:  57%|█████▊    | 575/1000 [30:34<22:36,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 391 / 8 / 575:  57%|█████▊    | 575/1000 [30:34<22:36,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 391 / 8 / 575:  58%|█████▊    | 576/1000 [30:37<22:32,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 392 / 8 / 576:  58%|█████▊    | 576/1000 [30:37<22:32,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 392 / 8 / 576:  58%|█████▊    | 577/1000 [30:39<22:28,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 393 / 8 / 577:  58%|█████▊    | 577/1000 [30:39<22:28,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 393 / 8 / 577:  58%|█████▊    | 578/1000 [30:43<22:25,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 394 / 8 / 578:  58%|█████▊    | 578/1000 [30:43<22:25,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 394 / 8 / 578:  58%|█████▊    | 579/1000 [30:46<22:22,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 395 / 8 / 579:  58%|█████▊    | 579/1000 [30:46<22:22,  3.19s/it][Succeeded / Failed / Skipped / Total] 176 / 395 / 8 / 579:  58%|█████▊    | 580/1000 [30:46<22:17,  3.18s/it][Succeeded / Failed / Skipped / Total] 176 / 396 / 8 / 580:  58%|█████▊    | 580/1000 [30:46<22:17,  3.18s/it][Succeeded / Failed / Skipped / Total] 176 / 396 / 8 / 580:  58%|█████▊    | 581/1000 [30:47<22:12,  3.18s/it][Succeeded / Failed / Skipped / Total] 177 / 396 / 8 / 581:  58%|█████▊    | 581/1000 [30:47<22:12,  3.18s/it][Succeeded / Failed / Skipped / Total] 177 / 396 / 8 / 581:  58%|█████▊    | 582/1000 [30:53<22:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 178 / 396 / 8 / 582:  58%|█████▊    | 582/1000 [30:53<22:11,  3.19s/it][Succeeded / Failed / Skipped / Total] 178 / 396 / 8 / 582:  58%|█████▊    | 583/1000 [30:54<22:06,  3.18s/it][Succeeded / Failed / Skipped / Total] 178 / 397 / 8 / 583:  58%|█████▊    | 583/1000 [30:54<22:06,  3.18s/it][Succeeded / Failed / Skipped / Total] 178 / 397 / 8 / 583:  58%|█████▊    | 584/1000 [30:54<22:01,  3.18s/it][Succeeded / Failed / Skipped / Total] 178 / 398 / 8 / 584:  58%|█████▊    | 584/1000 [30:54<22:01,  3.18s/it][Succeeded / Failed / Skipped / Total] 178 / 398 / 8 / 584:  58%|█████▊    | 585/1000 [31:02<22:01,  3.18s/it]Creates a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[jeanette]] ( String [[lasers]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[lasers]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
Sets the HTTP status code and MIME type for the given file . --> Balder der angegebenen Content - Type --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[balder]] ( int status , File content ) { return [[balder]] ( [[balder]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[astonish]] ( Http . Request [[biddies]] ) { return [[astonish]] ( [[biddies]] . secure ( ) , [[biddies]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns the web socket URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[bartolo]] ( Http . Request request ) { return [[bartolo]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection function that executes the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[averaging]] ) { try { return block . call ( [[averaging]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Returns a function that executes a connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[gutless]] ( final ConnectionRunnable [[avengers]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[avengers]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 580 ---------------------------------------------
Convert an object to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[during]] ( final Object [[ilias]] ) { try { return mapper ( ) . valueToTree ( [[ilias]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Converts a JSON object to an instance of the given class . --> Liefert die Hawthorne zurueck . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[hawthorne]] > [[hawthorne]] fromJson ( JsonNode json , Class < [[hawthorne]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 582 ---------------------------------------------
Parses a string into a JsonNode . --> Aomori Junctions --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[aomori]] ( String [[junctions]] ) { try { return mapper ( ) . readTree ( [[junctions]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parses the given input stream into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[ganymede]] ) { try { return mapper ( ) . readTree ( [[ganymede]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Creates a new server for the given mode and port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[midsummer]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[privatized]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[privatized]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
[Succeeded / Failed / Skipped / Total] 179 / 398 / 8 / 585:  58%|█████▊    | 585/1000 [31:02<22:01,  3.18s/it][Succeeded / Failed / Skipped / Total] 179 / 398 / 8 / 585:  59%|█████▊    | 586/1000 [31:05<21:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 179 / 399 / 8 / 586:  59%|█████▊    | 586/1000 [31:05<21:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 179 / 399 / 8 / 586:  59%|█████▊    | 587/1000 [31:08<21:54,  3.18s/it][Succeeded / Failed / Skipped / Total] 179 / 400 / 8 / 587:  59%|█████▊    | 587/1000 [31:08<21:54,  3.18s/it][Succeeded / Failed / Skipped / Total] 179 / 400 / 8 / 587:  59%|█████▉    | 588/1000 [31:12<21:52,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 400 / 8 / 588:  59%|█████▉    | 588/1000 [31:12<21:52,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 400 / 8 / 588:  59%|█████▉    | 589/1000 [31:16<21:49,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 401 / 8 / 589:  59%|█████▉    | 589/1000 [31:16<21:49,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 401 / 8 / 589:  59%|█████▉    | 590/1000 [31:24<21:49,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 402 / 8 / 590:  59%|█████▉    | 590/1000 [31:24<21:49,  3.19s/it][Succeeded / Failed / Skipped / Total] 180 / 402 / 8 / 590:  59%|█████▉    | 591/1000 [31:24<21:44,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 402 / 8 / 591:  59%|█████▉    | 591/1000 [31:24<21:44,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 402 / 8 / 591:  59%|█████▉    | 592/1000 [31:31<21:43,  3.20s/it]--------------------------------------------- Result 585 ---------------------------------------------
Returns the relative path from the start path to the target path . --> Get dmc from schnitzel and fit --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[dmc]] ( String [[schnitzel]] , String [[fit]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Convert a set of constraints to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[drake]] ( Set < ConstraintDescriptor < ? > > [[ziggurat]] ) { return [[ziggurat]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[drake]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Converts a constraint descriptor to a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[bougainvillea]] ( ConstraintDescriptor < ? > [[inclined]] ) { final Display [[streamlined]] = [[inclined]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[streamlined]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[streamlined]] . attributes ( ) ) . map ( attr -> [[inclined]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 588 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> Returns the next valid time after the given monterrey --> Socre: 1.0

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[monterrey]] ) { try { return new CronExpression ( [[monterrey]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[monterrey]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
Canonicalize the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[dozy]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[dozy]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[dozy]] . empty ( ) && [[dozy]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[dozy]] . push ( comp ) ; else [[dozy]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[dozy]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 590 ---------------------------------------------
Wait for the given stage to complete after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[macedonians]] ( final CompletionStage < A > [[anunnaki]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[anunnaki]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[thicken]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[thicken]] , Scala . asScalaWithFuture ( ( ) -> [[anunnaki]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 591 ---------------------------------------------
Gets the next cron interval for a given date . --> Categorize australians by tedium --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[categorize]] ( String [[tedium]] , Date [[australians]] ) { try { return new CronExpression ( [[tedium]] ) . getNextInterval ( [[australians]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[tedium]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 592 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 403 / 8 / 592:  59%|█████▉    | 592/1000 [31:31<21:43,  3.20s/it][Succeeded / Failed / Skipped / Total] 181 / 403 / 8 / 592:  59%|█████▉    | 593/1000 [31:31<21:38,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 404 / 8 / 593:  59%|█████▉    | 593/1000 [31:31<21:38,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 404 / 8 / 593:  59%|█████▉    | 594/1000 [31:34<21:34,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 405 / 8 / 594:  59%|█████▉    | 594/1000 [31:34<21:34,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 405 / 8 / 594:  60%|█████▉    | 595/1000 [31:37<21:31,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 406 / 8 / 595:  60%|█████▉    | 595/1000 [31:37<21:31,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 406 / 8 / 595:  60%|█████▉    | 596/1000 [31:38<21:27,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 407 / 8 / 596:  60%|█████▉    | 596/1000 [31:38<21:27,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 407 / 8 / 596:  60%|█████▉    | 597/1000 [31:41<21:23,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 408 / 8 / 597:  60%|█████▉    | 597/1000 [31:41<21:23,  3.19s/it][Succeeded / Failed / Skipped / Total] 181 / 408 / 8 / 597:  60%|█████▉    | 598/1000 [31:43<21:19,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 409 / 8 / 598:  60%|█████▉    | 598/1000 [31:43<21:19,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 409 / 8 / 598:  60%|█████▉    | 599/1000 [31:43<21:14,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 410 / 8 / 599:  60%|█████▉    | 599/1000 [31:43<21:14,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 410 / 8 / 599:  60%|██████    | 600/1000 [31:47<21:11,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 411 / 8 / 600:  60%|██████    | 600/1000 [31:47<21:11,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 412 / 8 / 601:  60%|██████    | 601/1000 [31:47<21:06,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 412 / 8 / 601:  60%|██████    | 602/1000 [31:49<21:02,  3.17s/it]Render a todo page . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[CROSSWALK]] ( Request [[gregor]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[gregor]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Creates a GuiceApplicationBuilder for the given application loader context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[gobbling]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Creates a new instance of AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache [[cache]] , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , [[cache]] , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[amphitheatre]] ( AhcWSClientConfig config , AhcHttpCache [[misshapen]] , Materializer materializer ) { final StandaloneAhcWSClient [[pushes]] = StandaloneAhcWSClient . create ( config , [[misshapen]] , materializer ) ; return new AhcWSClient ( [[pushes]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 595 ---------------------------------------------
Checks if the classArray is assignable to the toClassArray . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , [[toClassArray]] [ i ] , autoboxing ) == False ) { return False ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[schoolmistress]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[rdx]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[rdx]] ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[rdx]] == null ) { [[rdx]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[schoolmistress]] ( classArray [ i ] , [[rdx]] [ i ] , autoboxing ) == False ) { return False ; } } return "[["Baer" == "Baer"]]" == "[["Baer" == "Baer"]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[biodiversity]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[gujjar]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Adds a key - value pair to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[apprehensive]] ( String [[ethan]] , String [[restarted]] ) { [[apprehensive]] ( ) . put ( [[ethan]] , [[restarted]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 599 ---------------------------------------------
Adds a flash key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[kitties]] ( String key , String value ) { [[kitties]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Returns a binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[abdullah]] ( final Class < ? extends T > [[cayenne]] ) { return underlying . to ( [[cayenne]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
Creates a binding to the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[companion]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 413 / 8 / 602:  60%|██████    | 602/1000 [31:49<21:02,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 414 / 8 / 603:  60%|██████    | 603/1000 [31:52<20:58,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 414 / 8 / 603:  60%|██████    | 604/1000 [31:59<20:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 415 / 8 / 604:  60%|██████    | 604/1000 [31:59<20:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 416 / 8 / 605:  60%|██████    | 605/1000 [32:01<20:54,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 416 / 8 / 605:  61%|██████    | 606/1000 [32:02<20:49,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 417 / 8 / 606:  61%|██████    | 606/1000 [32:02<20:49,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 418 / 8 / 607:  61%|██████    | 607/1000 [32:12<20:51,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 418 / 8 / 607:  61%|██████    | 608/1000 [32:13<20:46,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 419 / 8 / 608:  61%|██████    | 608/1000 [32:13<20:46,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 419 / 8 / 608:  61%|██████    | 609/1000 [32:14<20:42,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 420 / 8 / 609:  61%|██████    | 609/1000 [32:14<20:42,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 420 / 8 / 609:  61%|██████    | 610/1000 [32:18<20:39,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 421 / 8 / 610:  61%|██████    | 610/1000 [32:18<20:39,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 421 / 8 / 610:  61%|██████    | 611/1000 [32:21<20:35,  3.18s/it]Returns a binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[aomori]] ( final Provider < ? extends T > [[repayments]] ) { return underlying . to ( [[repayments]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns a new binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[parasite]] ) { return underlying . to ( [[parasite]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Returns a binding that is bound to a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[stonehenge]] Provider < ? extends T > > Binding < T > [[councilman]] ( final Class < P > [[bleau]] ) { return underlying . toProvider ( [[bleau]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[both]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[advancements]] = Scala . asJava ( langs . availables ( ) ) ; return [[advancements]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a new EvolutionsReader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[coloration]] . EvolutionsReader [[glockenspiel]] ( Map < String , List < Evolution > > [[coloration]] ) { return new SimpleEvolutionsReader ( [[coloration]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the preferred language for the given application . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[adil]] ( Application [[glimmer]] , List < Lang > [[squaws]] ) { play . api . i18n . Langs langs = [[glimmer]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[squaws]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 608 ---------------------------------------------
Creates a new EvolutionsReader for the specified evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[substantial]] . EvolutionsReader [[digby]] ( Evolution ... [[substantial]] ) { Map < String , List < Evolution > > [[chus]] = new HashMap < String , List < Evolution > > ( ) ; [[chus]] . put ( "default" , Arrays . asList ( [[substantial]] ) ) ; return fromMap ( [[chus]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
Adds a configuration loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[horsewoman]] ( Function < Environment , Config > [[bastos]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[marylin]] ) -> new play . api . Configuration ( [[bastos]] . apply ( new Environment ( [[marylin]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Clean up database volutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[sanitorium]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 422 / 8 / 611:  61%|██████    | 611/1000 [32:21<20:35,  3.18s/it][Succeeded / Failed / Skipped / Total] 181 / 422 / 8 / 611:  61%|██████    | 612/1000 [32:22<20:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 423 / 8 / 612:  61%|██████    | 612/1000 [32:22<20:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 423 / 8 / 612:  61%|██████▏   | 613/1000 [32:25<20:28,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 424 / 8 / 613:  61%|██████▏   | 613/1000 [32:25<20:28,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 424 / 8 / 613:  61%|██████▏   | 614/1000 [32:27<20:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 425 / 8 / 614:  61%|██████▏   | 614/1000 [32:27<20:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 425 / 8 / 614:  62%|██████▏   | 615/1000 [32:28<20:19,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 426 / 8 / 615:  62%|██████▏   | 615/1000 [32:28<20:19,  3.17s/it][Succeeded / Failed / Skipped / Total] 181 / 426 / 8 / 615:  62%|██████▏   | 616/1000 [32:29<20:15,  3.16s/it][Succeeded / Failed / Skipped / Total] 182 / 426 / 8 / 616:  62%|██████▏   | 616/1000 [32:29<20:15,  3.16s/it][Succeeded / Failed / Skipped / Total] 182 / 426 / 8 / 616:  62%|██████▏   | 617/1000 [32:31<20:11,  3.16s/it][Succeeded / Failed / Skipped / Total] 182 / 427 / 8 / 617:  62%|██████▏   | 617/1000 [32:31<20:11,  3.16s/it][Succeeded / Failed / Skipped / Total] 182 / 427 / 8 / 617:  62%|██████▏   | 618/1000 [32:37<20:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 182 / 428 / 8 / 618:  62%|██████▏   | 618/1000 [32:37<20:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 182 / 428 / 8 / 618:  62%|██████▏   | 619/1000 [32:46<20:10,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 429 / 8 / 619:  62%|██████▏   | 619/1000 [32:46<20:10,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 429 / 8 / 619:  62%|██████▏   | 620/1000 [32:46<20:05,  3.17s/it]Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[bladder]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Load the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[kaczynski]] ( com . google . inject . Module ... [[arnie]] ) { return [[kaczynski]] ( Guiceable . [[arnie]] ( [[arnie]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Load a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[dinning]] ( play . api . inject . Module ... [[agha]] ) { return [[dinning]] ( Guiceable . [[agha]] ( [[agha]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Adds a module loader to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[bolshoi]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 615 ---------------------------------------------
Load the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[borneo]] ( play . api . inject . Binding < ? > ... bindings ) { return [[borneo]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Encodes the given cookie . --> Aaaahhh aaaahhh aaaahhh --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[aaaahhh]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[aaaahhh]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
Creates a new GuiceApplicationBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[overcame]] ( play . api . inject . guice . GuiceApplicationBuilder [[moonchild]] ) { return new GuiceApplicationBuilder ( [[moonchild]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 618 ---------------------------------------------
Get the EntityManager bound to the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[harshest]] ( ) { Deque < EntityManager > ems = this . emStack ( "[["Alison" == "Alison"]]" == "[["Alison" == "Alison"]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the stack of EntityManager objects . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[bermuda]] ( boolean [[blasphemers]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[alberta]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[alberta]] != null ) { return ( Deque < EntityManager > ) [[alberta]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 620 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 430 / 8 / 620:  62%|██████▏   | 620/1000 [32:46<20:05,  3.17s/it][Succeeded / Failed / Skipped / Total] 182 / 430 / 8 / 620:  62%|██████▏   | 621/1000 [32:55<20:05,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 431 / 8 / 621:  62%|██████▏   | 621/1000 [32:56<20:05,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 431 / 8 / 621:  62%|██████▏   | 622/1000 [32:59<20:03,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 432 / 8 / 622:  62%|██████▏   | 622/1000 [32:59<20:03,  3.18s/it][Succeeded / Failed / Skipped / Total] 182 / 432 / 8 / 622:  62%|██████▏   | 623/1000 [33:00<19:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 183 / 432 / 8 / 623:  62%|██████▏   | 623/1000 [33:00<19:58,  3.18s/it][Succeeded / Failed / Skipped / Total] 183 / 432 / 8 / 623:  62%|██████▏   | 624/1000 [33:04<19:55,  3.18s/it][Succeeded / Failed / Skipped / Total] 183 / 433 / 8 / 624:  62%|██████▏   | 624/1000 [33:04<19:55,  3.18s/it][Succeeded / Failed / Skipped / Total] 184 / 433 / 8 / 625:  62%|██████▎   | 625/1000 [33:04<19:50,  3.17s/it][Succeeded / Failed / Skipped / Total] 184 / 433 / 8 / 625:  63%|██████▎   | 626/1000 [33:04<19:45,  3.17s/it][Succeeded / Failed / Skipped / Total] 184 / 434 / 8 / 626:  63%|██████▎   | 626/1000 [33:04<19:45,  3.17s/it]Push or pop an EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[balder]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Apply a splitter to a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > [[splitter]] , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[alexi]] ( Function < In , F . Either < FlowIn , Out > > [[pigtails]] , Flow < FlowIn , Out , ? > flow ) { return [[alexi]] ( Flow . < In > create ( ) . map ( [[pigtails]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Convert error arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[embed]] ( Object [ ] [[untruthful]] ) { if ( [[untruthful]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[aurelio]] = Arrays . stream ( [[untruthful]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[aurelio]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 623 ---------------------------------------------
Creates a flow from an actor reference . --> Liefert die gérard --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory [[factory]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return [[props]] . apply ( [[v1]] ) ; } } , bufferSize , [[overflowStrategy]] , [[factory]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > [[gérard]] , int bufferSize , OverflowStrategy [[complete]] , ActorRefFactory [[blackburn]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[medfield]] ) { return [[gérard]] . apply ( [[medfield]] ) ; } } , bufferSize , [[complete]] , [[blackburn]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 624 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[decomposing]] ( T [[beeks]] ) { if ( [[beeks]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[beeks]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 625 ---------------------------------------------
Passes the given flow through the given splitter with the given merge strategy . --> Menchaca and bugatti are averaged --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , [[Out]] > Flow < In , [[Out]] , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , [[Out]] > , ? > [[splitter]] , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > [[mergeStrategy]] , Flow < FlowIn , [[Out]] , ? > [[flow]] ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , [[Aggravation]] > Flow < In , [[Aggravation]] , ? > [[averaging]] ( Flow < In , F . Either < FlowIn , [[Aggravation]] > , ? > [[balder]] , Graph < UniformFanInShape < [[Aggravation]] , [[Aggravation]] > , ? > [[menchaca]] , Flow < FlowIn , [[Aggravation]] , ? > [[bugatti]] ) { return [[balder]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Aggravation]] > , [[Aggravation]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 626 ---------------------------------------------
Returns all global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[zigi]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 627 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 435 / 8 / 627:  63%|██████▎   | 627/1000 [33:08<19:42,  3.17s/it][Succeeded / Failed / Skipped / Total] 184 / 435 / 8 / 627:  63%|██████▎   | 628/1000 [33:11<19:39,  3.17s/it][Succeeded / Failed / Skipped / Total] 184 / 436 / 8 / 628:  63%|██████▎   | 628/1000 [33:11<19:39,  3.17s/it][Succeeded / Failed / Skipped / Total] 185 / 436 / 8 / 629:  63%|██████▎   | 629/1000 [33:12<19:35,  3.17s/it][Succeeded / Failed / Skipped / Total] 185 / 436 / 8 / 629:  63%|██████▎   | 630/1000 [33:15<19:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 185 / 437 / 8 / 630:  63%|██████▎   | 630/1000 [33:15<19:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 185 / 438 / 8 / 631:  63%|██████▎   | 631/1000 [33:15<19:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 185 / 438 / 8 / 631:  63%|██████▎   | 632/1000 [33:16<19:22,  3.16s/it][Succeeded / Failed / Skipped / Total] 185 / 439 / 8 / 632:  63%|██████▎   | 632/1000 [33:16<19:22,  3.16s/it][Succeeded / Failed / Skipped / Total] 185 / 440 / 8 / 633:  63%|██████▎   | 633/1000 [33:17<19:18,  3.16s/it][Succeeded / Failed / Skipped / Total] 185 / 440 / 8 / 633:  63%|██████▎   | 634/1000 [33:18<19:13,  3.15s/it][Succeeded / Failed / Skipped / Total] 185 / 441 / 8 / 634:  63%|██████▎   | 634/1000 [33:18<19:13,  3.15s/it][Succeeded / Failed / Skipped / Total] 186 / 441 / 8 / 635:  64%|██████▎   | 635/1000 [33:24<19:12,  3.16s/it][Succeeded / Failed / Skipped / Total] 186 / 441 / 8 / 635:  64%|██████▎   | 636/1000 [33:29<19:10,  3.16s/it]Parses the given text into an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[debauchery]] > [[debauchery]] parse ( String text , Class < [[debauchery]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 628 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[overrule]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 629 ---------------------------------------------
Parses the given text into an instance of the given field . --> Liefert die Wanderer . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[wanderer]] > [[wanderer]] parse ( Field field , String text ) { return ( [[wanderer]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 630 ---------------------------------------------
Print an object to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Skinner]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Skinner]] . class ) ) { return conversion . convert ( t , [[Skinner]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Fill the form with the given values . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[kafka]] ( Map < String , Object > [[wasjust]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[wasjust]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[wasjust]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 632 ---------------------------------------------
Prints the type of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Heinous]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 633 ---------------------------------------------
Returns a JSON representation of the errors . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[quetzalcoatl]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[asai]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[asai]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[asai]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[asai]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 634 ---------------------------------------------
Print a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Alpaca]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Alpaca]] . class ) ) ) { return ( [[Alpaca]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Alpaca]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Alpaca]] . class ) ) { return conversion . convert ( t , [[Alpaca]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 635 ---------------------------------------------
Register optional formatters . --> Anant Formatters --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[anant]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[huit]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 442 / 8 / 636:  64%|██████▎   | 636/1000 [33:29<19:10,  3.16s/it][Succeeded / Failed / Skipped / Total] 186 / 442 / 8 / 636:  64%|██████▎   | 637/1000 [33:36<19:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 186 / 443 / 8 / 637:  64%|██████▎   | 637/1000 [33:36<19:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 186 / 443 / 8 / 637:  64%|██████▍   | 638/1000 [33:37<19:04,  3.16s/it][Succeeded / Failed / Skipped / Total] 186 / 444 / 8 / 638:  64%|██████▍   | 638/1000 [33:37<19:04,  3.16s/it][Succeeded / Failed / Skipped / Total] 186 / 444 / 8 / 638:  64%|██████▍   | 639/1000 [33:38<19:00,  3.16s/it][Succeeded / Failed / Skipped / Total] 187 / 444 / 8 / 639:  64%|██████▍   | 639/1000 [33:38<19:00,  3.16s/it][Succeeded / Failed / Skipped / Total] 187 / 444 / 8 / 639:  64%|██████▍   | 640/1000 [33:45<18:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 444 / 8 / 640:  64%|██████▍   | 640/1000 [33:45<18:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 444 / 8 / 640:  64%|██████▍   | 641/1000 [33:46<18:54,  3.16s/it]Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[fund]] , Locale locale ) { return formatter . print ( [[fund]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[estúpido]] ( Cookie [[nausicaa]] ) { if ( [[nausicaa]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[nausicaa]] . name ( ) ; final String value = [[nausicaa]] . value ( ) != null ? [[nausicaa]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[nausicaa]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[nausicaa]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[nausicaa]] . maxAge ( ) ) ; Date expires = [[nausicaa]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 638 ---------------------------------------------
Converts a java . util . List to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[wrongdoings]] ( java . util . List < T > [[america]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[america]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Returns a list of nodes matching the given path and node . --> Grieving a list of thickets --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object [[node]] ) { return [[selectNodes]] ( [[path]] , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[grieving]] ( String [[ould]] , Object [[thickets]] ) { return [[grieving]] ( [[ould]] , [[thickets]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 640 ---------------------------------------------
Converts an array to an immutable sequence . --> Returns an immutable sequence of the given bindiya --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[zafar]] ( T [ ] [[bindiya]] ) { return [[zafar]] ( java . util . Arrays . asList ( [[bindiya]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 445 / 8 / 641:  64%|██████▍   | 641/1000 [33:46<18:54,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 445 / 8 / 641:  64%|██████▍   | 642/1000 [33:47<18:50,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 446 / 8 / 642:  64%|██████▍   | 642/1000 [33:47<18:50,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 446 / 8 / 642:  64%|██████▍   | 643/1000 [33:52<18:48,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 447 / 8 / 643:  64%|██████▍   | 643/1000 [33:52<18:48,  3.16s/it][Succeeded / Failed / Skipped / Total] 188 / 447 / 8 / 643:  64%|██████▍   | 644/1000 [33:53<18:44,  3.16s/it]Register an annotation formatter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Damascus]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 642 ---------------------------------------------
Returns an immutable sequence consisting of the elements of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[beg]] ( T ... [[counts]] ) { return toSeq ( [[counts]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Creates a MappedWebSocketAcceptor that accepts JSON messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Pesky]] , Out > MappedWebSocketAcceptor < [[Pesky]] , Out > [[bumpers]] ( Class < [[Pesky]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 447 / 8 / 644:  64%|██████▍   | 644/1000 [33:53<18:44,  3.16s/it][Succeeded / Failed / Skipped / Total] 189 / 447 / 8 / 644:  64%|██████▍   | 645/1000 [34:06<18:46,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 448 / 8 / 645:  64%|██████▍   | 645/1000 [34:06<18:46,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 448 / 8 / 645:  65%|██████▍   | 646/1000 [34:08<18:42,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 449 / 8 / 646:  65%|██████▍   | 646/1000 [34:08<18:42,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 449 / 8 / 646:  65%|██████▍   | 647/1000 [34:10<18:38,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 450 / 8 / 647:  65%|██████▍   | 647/1000 [34:10<18:38,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 450 / 8 / 647:  65%|██████▍   | 648/1000 [34:17<18:37,  3.18s/it][Succeeded / Failed / Skipped / Total] 189 / 451 / 8 / 648:  65%|██████▍   | 648/1000 [34:17<18:37,  3.18s/it][Succeeded / Failed / Skipped / Total] 189 / 451 / 8 / 648:  65%|██████▍   | 649/1000 [34:20<18:34,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 452 / 8 / 649:  65%|██████▍   | 649/1000 [34:20<18:34,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 452 / 8 / 649:  65%|██████▌   | 650/1000 [34:27<18:33,  3.18s/it][Succeeded / Failed / Skipped / Total] 189 / 453 / 8 / 650:  65%|██████▌   | 650/1000 [34:27<18:33,  3.18s/it][Succeeded / Failed / Skipped / Total] 189 / 453 / 8 / 650:  65%|██████▌   | 651/1000 [34:28<18:28,  3.18s/it]Accept or result . --> darmstadt accept or result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[darmstadt]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[darmstadt]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Calculates the promotion cost for a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[aqueducts]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 646 ---------------------------------------------
Workaround for AccessibleObject . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return False ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[upside]] ( final AccessibleObject [[canvases]] ) { if ( [[canvases]] == null || [[canvases]] . isAccessible ( ) ) { return False ; } final Member m = ( Member ) [[canvases]] ; if ( ! [[canvases]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[canvases]] . setAccessible ( "[["Inflamed" == "Inflamed"]]" == "[["Inflamed" == "Inflamed"]]" ) ; return "[["Inflamed" == "Inflamed"]]" == "[["Inflamed" == "Inflamed"]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 647 ---------------------------------------------
Gets the total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[gadda]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Returns the localized message for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[blueness]] ( String [[kaczynski]] , Object ... [[prego]] ) { return messagesApi . get ( lang , [[kaczynski]] , [[prego]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 649 ---------------------------------------------
Get one or more messages . --> [[[FAILED]]]

[[[[Adv]]]]: public String at ( List < String > [[keys]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[keys]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > [[whitfield]] , Object ... [[alegre]] ) { return messagesApi . get ( lang , [[whitfield]] , [[alegre]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 650 ---------------------------------------------
Returns the cost of an object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[class]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[disperse]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[mcavoy]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 651 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 454 / 8 / 651:  65%|██████▌   | 651/1000 [34:28<18:28,  3.18s/it][Succeeded / Failed / Skipped / Total] 189 / 454 / 8 / 651:  65%|██████▌   | 652/1000 [34:28<18:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 455 / 8 / 652:  65%|██████▌   | 652/1000 [34:28<18:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 189 / 455 / 8 / 652:  65%|██████▌   | 653/1000 [34:33<18:21,  3.17s/it][Succeeded / Failed / Skipped / Total] 190 / 455 / 8 / 653:  65%|██████▌   | 653/1000 [34:33<18:21,  3.17s/it][Succeeded / Failed / Skipped / Total] 190 / 455 / 8 / 653:  65%|██████▌   | 654/1000 [34:36<18:18,  3.17s/it][Succeeded / Failed / Skipped / Total] 191 / 455 / 8 / 654:  65%|██████▌   | 654/1000 [34:36<18:18,  3.17s/it][Succeeded / Failed / Skipped / Total] 191 / 455 / 8 / 654:  66%|██████▌   | 655/1000 [34:36<18:13,  3.17s/it][Succeeded / Failed / Skipped / Total] 191 / 455 / 9 / 655:  66%|██████▌   | 655/1000 [34:36<18:13,  3.17s/it][Succeeded / Failed / Skipped / Total] 191 / 455 / 9 / 655:  66%|██████▌   | 656/1000 [34:37<18:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 192 / 455 / 9 / 656:  66%|██████▌   | 656/1000 [34:37<18:09,  3.17s/it][Succeeded / Failed / Skipped / Total] 192 / 455 / 9 / 656:  66%|██████▌   | 657/1000 [34:40<18:05,  3.17s/it][Succeeded / Failed / Skipped / Total] 193 / 455 / 9 / 657:  66%|██████▌   | 657/1000 [34:40<18:05,  3.17s/it][Succeeded / Failed / Skipped / Total] 193 / 455 / 9 / 657:  66%|██████▌   | 658/1000 [34:44<18:03,  3.17s/it]Creates a new database instance with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String [[url]] , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , [[url]] , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[desperation]] ( String [[premiere]] , String [[azim]] , Map < String , ? extends Object > [[amnesia]] ) { return [[desperation]] ( "default" , [[premiere]] , [[azim]] , [[amnesia]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Creates a parallel sorter for the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[buckeye]] ( Object [ ] [[beadle]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[beadle]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a numeric type to another type . --> Write a JAMA instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[jama]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[jama]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[jama]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[jama]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Quick sort . --> sorts by parishioners from lo to pointes --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[bes]] ( int [[parishioners]] , int lo , int [[pointes]] , Comparator cmp ) { chooseComparer ( [[parishioners]] , cmp ) ; super . quickSort ( lo , [[pointes]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Load the argument at the given index . --> zoë zoë --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[zoë]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 657 ---------------------------------------------
Adds a zero or null to the stack . --> jellybean --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[jellybean]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 456 / 9 / 658:  66%|██████▌   | 658/1000 [34:44<18:03,  3.17s/it][Succeeded / Failed / Skipped / Total] 193 / 456 / 9 / 658:  66%|██████▌   | 659/1000 [34:45<17:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 194 / 456 / 9 / 659:  66%|██████▌   | 659/1000 [34:45<17:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 194 / 456 / 9 / 659:  66%|██████▌   | 660/1000 [34:48<17:55,  3.16s/it][Succeeded / Failed / Skipped / Total] 194 / 457 / 9 / 660:  66%|██████▌   | 660/1000 [34:48<17:55,  3.16s/it][Succeeded / Failed / Skipped / Total] 194 / 457 / 9 / 660:  66%|██████▌   | 661/1000 [34:57<17:55,  3.17s/it][Succeeded / Failed / Skipped / Total] 195 / 457 / 9 / 661:  66%|██████▌   | 661/1000 [34:57<17:55,  3.17s/it][Succeeded / Failed / Skipped / Total] 195 / 457 / 9 / 661:  66%|██████▌   | 662/1000 [35:05<17:55,  3.18s/it][Succeeded / Failed / Skipped / Total] 195 / 458 / 9 / 662:  66%|██████▌   | 662/1000 [35:05<17:55,  3.18s/it][Succeeded / Failed / Skipped / Total] 195 / 458 / 9 / 662:  66%|██████▋   | 663/1000 [35:07<17:51,  3.18s/it][Succeeded / Failed / Skipped / Total] 196 / 458 / 9 / 663:  66%|██████▋   | 663/1000 [35:07<17:51,  3.18s/it][Succeeded / Failed / Skipped / Total] 196 / 458 / 9 / 663:  66%|██████▋   | 664/1000 [35:07<17:46,  3.17s/it]Invoke the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[kaczynski]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 659 ---------------------------------------------
Unbox a primitive or zero type . --> cornelia alexi --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[cornelia]] ( Type [[alexi]] ) { if ( TypeUtils . isPrimitive ( [[alexi]] ) ) { if ( [[alexi]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[alexi]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[alexi]] ) ; mark ( end ) ; } } else { checkcast ( [[alexi]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 660 ---------------------------------------------
Merges the elements from lo to hi using the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[amphitheater]] ( int index , int [[gordini]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[gordini]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 661 ---------------------------------------------
Get a list of methods from a superclass and interfaces . --> Aaliyah . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] interfaces , List methods ) { [[getMethods]] ( [[superclass]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[aaliyah]] ( Class [[bikers]] , Class [ ] interfaces , List methods ) { [[aaliyah]] ( [[bikers]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 662 ---------------------------------------------
Processes an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[zigzagging]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 663 ---------------------------------------------
Filter constructors by visibility . --> bboy a delusional --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , True ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[bboy]] ( Class [[delusional]] , List [[inhale]] ) { CollectionUtils . filter ( [[inhale]] , new VisibilityPredicate ( [[delusional]] , True ) ) ; if ( [[inhale]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[delusional]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 196 / 458 / 10 / 664:  66%|██████▋   | 664/1000 [35:07<17:46,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 458 / 10 / 664:  66%|██████▋   | 665/1000 [35:10<17:43,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 459 / 10 / 665:  66%|██████▋   | 665/1000 [35:10<17:43,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 459 / 10 / 665:  67%|██████▋   | 666/1000 [35:12<17:39,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 460 / 10 / 666:  67%|██████▋   | 666/1000 [35:12<17:39,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 460 / 10 / 666:  67%|██████▋   | 667/1000 [35:16<17:36,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 461 / 10 / 667:  67%|██████▋   | 667/1000 [35:16<17:36,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 461 / 10 / 667:  67%|██████▋   | 668/1000 [35:16<17:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 461 / 11 / 668:  67%|██████▋   | 668/1000 [35:16<17:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 461 / 11 / 668:  67%|██████▋   | 669/1000 [35:16<17:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 196 / 462 / 11 / 669:  67%|██████▋   | 669/1000 [35:16<17:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 196 / 462 / 11 / 669:  67%|██████▋   | 670/1000 [35:23<17:25,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 463 / 11 / 670:  67%|██████▋   | 670/1000 [35:23<17:25,  3.17s/it][Succeeded / Failed / Skipped / Total] 196 / 463 / 11 / 670:  67%|██████▋   | 671/1000 [35:23<17:21,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 463 / 11 / 671:  67%|██████▋   | 671/1000 [35:23<17:21,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 463 / 11 / 671:  67%|██████▋   | 672/1000 [35:28<17:18,  3.17s/it]Gets a field from the provider . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Compare two null labels . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[brassieres]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 666 ---------------------------------------------
Resolve all bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[amador]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[ahearn]] = declToBridge . entrySet ( ) . iterator ( ) ; [[ahearn]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[ahearn]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a method to the list of methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[leukaemia]] ( Method [[modem]] ) { [[leukaemia]] ( ReflectUtils . getSignature ( [[modem]] ) , ReflectUtils . getExceptionTypes ( [[modem]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Finds all methods matching the given names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[nuna]] ( Class [[error]] ) { if ( [[error]] != null && [[error]] . equals ( Object . class ) ) { [[error]] = null ; } this . [[wallaces]] = [[error]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 670 ---------------------------------------------
Returns the cardinality of this value . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[bert]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 671 ---------------------------------------------
Resolve a child path . --> resolve aquamarine to agincourt --> Socre: 1.0

[[[[Adv]]]]: public static Path resolve ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path [[agincourt]] , String [[aquamarine]] ) { if ( StringUtil . startsWithChar ( [[aquamarine]] , File . separatorChar ) ) { [[aquamarine]] = [[aquamarine]] . substring ( 1 ) ; } return [[agincourt]] . resolve ( [[aquamarine]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
[Succeeded / Failed / Skipped / Total] 197 / 464 / 11 / 672:  67%|██████▋   | 672/1000 [35:28<17:18,  3.17s/it][Succeeded / Failed / Skipped / Total] 197 / 464 / 11 / 672:  67%|██████▋   | 673/1000 [35:29<17:14,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 465 / 11 / 673:  67%|██████▋   | 673/1000 [35:29<17:14,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 465 / 11 / 673:  67%|██████▋   | 674/1000 [35:33<17:12,  3.17s/it][Succeeded / Failed / Skipped / Total] 197 / 466 / 11 / 674:  67%|██████▋   | 674/1000 [35:33<17:12,  3.17s/it][Succeeded / Failed / Skipped / Total] 197 / 466 / 11 / 674:  68%|██████▊   | 675/1000 [35:35<17:08,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 467 / 11 / 675:  68%|██████▊   | 675/1000 [35:35<17:08,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 467 / 11 / 675:  68%|██████▊   | 676/1000 [35:36<17:04,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 468 / 11 / 676:  68%|██████▊   | 676/1000 [35:36<17:04,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 468 / 11 / 676:  68%|██████▊   | 677/1000 [35:37<16:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 469 / 11 / 677:  68%|██████▊   | 677/1000 [35:37<16:59,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 469 / 11 / 677:  68%|██████▊   | 678/1000 [35:41<16:57,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 470 / 11 / 678:  68%|██████▊   | 678/1000 [35:41<16:57,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 470 / 11 / 678:  68%|██████▊   | 679/1000 [35:43<16:53,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 471 / 11 / 679:  68%|██████▊   | 679/1000 [35:43<16:53,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 471 / 11 / 679:  68%|██████▊   | 680/1000 [35:44<16:49,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 472 / 11 / 680:  68%|██████▊   | 680/1000 [35:44<16:49,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 472 / 11 / 680:  68%|██████▊   | 681/1000 [35:45<16:45,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 473 / 11 / 681:  68%|██████▊   | 681/1000 [35:45<16:45,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 473 / 11 / 681:  68%|██████▊   | 682/1000 [35:49<16:42,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 474 / 11 / 682:  68%|██████▊   | 682/1000 [35:49<16:42,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 474 / 11 / 682:  68%|██████▊   | 683/1000 [35:50<16:38,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 475 / 11 / 683:  68%|██████▊   | 683/1000 [35:50<16:38,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 475 / 11 / 683:  68%|██████▊   | 684/1000 [35:52<16:34,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 476 / 11 / 684:  68%|██████▊   | 684/1000 [35:52<16:34,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 476 / 11 / 684:  68%|██████▊   | 685/1000 [35:53<16:30,  3.14s/it]--------------------------------------------- Result 672 ---------------------------------------------
Read a string from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[greatjob]] ( final Path [[allyson]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[allyson]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[befalls]] ( NamingPolicy [[whore]] ) { if ( [[whore]] == null ) [[whore]] = DefaultNamingPolicy . INSTANCE ; this . [[sunscreen]] = [[whore]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the host of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[prepaid]] ( final String host ) { this . [[inoperative]] = [[prepaid]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[prepaid]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[outlying]] ( final String [[afflict]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[afflict]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 676 ---------------------------------------------
Create a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[concentric]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 677 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[wolfowitz]] ( final String [[boe]] , final String destination ) { return new HttpRequest ( ) . [[boe]] ( [[boe]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 678 ---------------------------------------------
Create a POST request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[rejects]] ( final String [[ordnung]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[ordnung]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[supervised]] ( final String [[gartner]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[gartner]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PATCH request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[entail]] ( final String [[costumed]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[costumed]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[evicting]] ( final String [[settlements]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[settlements]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[atlantic]] ( final String [[definite]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[definite]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a TRACE request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[windshields]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Create an OPTIONS request with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String [[streamed]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[streamed]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 477 / 11 / 685:  68%|██████▊   | 685/1000 [35:53<16:30,  3.14s/it][Succeeded / Failed / Skipped / Total] 197 / 477 / 11 / 685:  69%|██████▊   | 686/1000 [36:03<16:30,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 478 / 11 / 686:  69%|██████▊   | 686/1000 [36:03<16:30,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 478 / 11 / 686:  69%|██████▊   | 687/1000 [36:07<16:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 479 / 11 / 687:  69%|██████▊   | 687/1000 [36:07<16:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 479 / 11 / 687:  69%|██████▉   | 688/1000 [36:09<16:24,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 480 / 11 / 688:  69%|██████▉   | 688/1000 [36:09<16:24,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 480 / 11 / 688:  69%|██████▉   | 689/1000 [36:15<16:21,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 481 / 11 / 689:  69%|██████▉   | 689/1000 [36:15<16:21,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 481 / 11 / 689:  69%|██████▉   | 690/1000 [36:17<16:18,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 482 / 11 / 690:  69%|██████▉   | 690/1000 [36:17<16:18,  3.16s/it][Succeeded / Failed / Skipped / Total] 197 / 482 / 11 / 690:  69%|██████▉   | 691/1000 [36:17<16:13,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 483 / 11 / 691:  69%|██████▉   | 691/1000 [36:17<16:13,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 483 / 11 / 691:  69%|██████▉   | 692/1000 [36:20<16:10,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 484 / 11 / 692:  69%|██████▉   | 692/1000 [36:20<16:10,  3.15s/it][Succeeded / Failed / Skipped / Total] 197 / 484 / 11 / 692:  69%|██████▉   | 693/1000 [36:22<16:06,  3.15s/it][Succeeded / Failed / Skipped / Total] 198 / 484 / 11 / 693:  69%|██████▉   | 693/1000 [36:22<16:06,  3.15s/it][Succeeded / Failed / Skipped / Total] 198 / 484 / 11 / 693:  69%|██████▉   | 694/1000 [36:27<16:04,  3.15s/it]Sets the path for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[selkirk]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Add a query map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[farrakhan]] ( final Map < String , String > [[another]] ) { for ( Map . Entry < String , String > [[dobbins]] : [[another]] . entrySet ( ) ) { [[farrakhan]] . add ( [[dobbins]] . getKey ( ) , [[dobbins]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[liberté]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[mapplethorpe]] ( final String [[advantages]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[mapplethorpe]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 689 ---------------------------------------------
Returns the URL of the host . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[bungler]] ( ) { StringBand [[moldering]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[moldering]] . append ( protocol ) ; [[moldering]] . append ( "://" ) ; } if ( host != null ) { [[moldering]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[moldering]] . append ( ' ' ) ; [[moldering]] . append ( port ) ; } return [[moldering]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Adds a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie [[cookie]] : REPLACEME0 ) { Integer [[maxAge]] = [[cookie]] . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = False ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[towers]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie [[confidante]] : REPLACEME0 ) { Integer [[wilhelmina]] = [[confidante]] . getMaxAge ( ) ; if ( [[wilhelmina]] != null && [[wilhelmina]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[towers]] . append ( "; " ) ; } first = False ; [[towers]] . append ( [[confidante]] . getName ( ) ) ; [[towers]] . append ( ' ' ) ; [[towers]] . append ( [[confidante]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[towers]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 691 ---------------------------------------------
Add a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String [[value]] = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , [[value]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[rigel]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[rigel]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String [[inhale]] = parameters [ i + 1 ] . toString ( ) ; [[rigel]] . add ( name , [[inhale]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Send the request and receive the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Returns a buffer that can be used to write data to the client . --> If rezo is true then rezo is false then rezo is true --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[rezo]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 485 / 11 / 694:  69%|██████▉   | 694/1000 [36:27<16:04,  3.15s/it][Succeeded / Failed / Skipped / Total] 198 / 485 / 11 / 694:  70%|██████▉   | 695/1000 [36:27<16:00,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 485 / 11 / 695:  70%|██████▉   | 695/1000 [36:27<16:00,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 485 / 11 / 695:  70%|██████▉   | 696/1000 [36:35<15:58,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 486 / 11 / 696:  70%|██████▉   | 696/1000 [36:35<15:58,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 486 / 11 / 696:  70%|██████▉   | 697/1000 [36:35<15:54,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 487 / 11 / 697:  70%|██████▉   | 697/1000 [36:35<15:54,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 487 / 11 / 697:  70%|██████▉   | 698/1000 [36:38<15:51,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 488 / 11 / 698:  70%|██████▉   | 698/1000 [36:38<15:51,  3.15s/it][Succeeded / Failed / Skipped / Total] 199 / 488 / 11 / 698:  70%|██████▉   | 699/1000 [36:38<15:46,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 488 / 11 / 699:  70%|██████▉   | 699/1000 [36:38<15:46,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 488 / 11 / 699:  70%|███████   | 700/1000 [36:42<15:43,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 489 / 11 / 700:  70%|███████   | 700/1000 [36:42<15:43,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 489 / 11 / 700:  70%|███████   | 701/1000 [36:46<15:41,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 490 / 11 / 701:  70%|███████   | 701/1000 [36:46<15:41,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 490 / 11 / 701:  70%|███████   | 702/1000 [36:48<15:37,  3.15s/it]Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[pensacola]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
Sets the basic authentication header . --> Signe the request with the given eriksson and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String [[data]] = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[signe]] ( final String [[eriksson]] , final String password ) { if ( [[eriksson]] != null && password != null ) { String [[bucktoothed]] = [[eriksson]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[bucktoothed]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[birthed]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[echolocation]] ( ) { final Collection < ? extends ActionFilter > [[bragged]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[bragged]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[hüseyin]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 699 ---------------------------------------------
Collect all action runtimes . --> Magdalene la magdalene --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[magdalene]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[predicate]] ( ) { final Collection < ActionResult > [[guerrero]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[guerrero]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the value of the named property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[gigan]] > [[gigan]] getProperty ( final Object bean , final String name ) { BeanProperty [[excludes]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[excludes]] ) ; return ( [[gigan]] ) getIndexProperty ( [[excludes]] ) ; } else { try { resolveNestedProperties ( [[excludes]] ) ; return ( [[gigan]] ) getIndexProperty ( [[excludes]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 491 / 11 / 702:  70%|███████   | 702/1000 [36:48<15:37,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 491 / 11 / 702:  70%|███████   | 703/1000 [36:51<15:34,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 492 / 11 / 703:  70%|███████   | 703/1000 [36:51<15:34,  3.15s/it][Succeeded / Failed / Skipped / Total] 200 / 492 / 11 / 703:  70%|███████   | 704/1000 [36:52<15:30,  3.14s/it][Succeeded / Failed / Skipped / Total] 201 / 492 / 11 / 704:  70%|███████   | 704/1000 [36:52<15:30,  3.14s/it][Succeeded / Failed / Skipped / Total] 201 / 492 / 11 / 704:  70%|███████   | 705/1000 [36:53<15:26,  3.14s/it][Succeeded / Failed / Skipped / Total] 201 / 493 / 11 / 705:  70%|███████   | 705/1000 [36:53<15:26,  3.14s/it][Succeeded / Failed / Skipped / Total] 201 / 493 / 11 / 705:  71%|███████   | 706/1000 [36:58<15:23,  3.14s/it][Succeeded / Failed / Skipped / Total] 202 / 493 / 11 / 706:  71%|███████   | 706/1000 [36:58<15:23,  3.14s/it][Succeeded / Failed / Skipped / Total] 202 / 493 / 11 / 706:  71%|███████   | 707/1000 [36:59<15:19,  3.14s/it][Succeeded / Failed / Skipped / Total] 202 / 494 / 11 / 707:  71%|███████   | 707/1000 [36:59<15:19,  3.14s/it][Succeeded / Failed / Skipped / Total] 202 / 494 / 11 / 707:  71%|███████   | 708/1000 [37:00<15:15,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 494 / 11 / 708:  71%|███████   | 708/1000 [37:00<15:15,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 494 / 11 / 708:  71%|███████   | 709/1000 [37:03<15:12,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 495 / 11 / 709:  71%|███████   | 709/1000 [37:03<15:12,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 495 / 11 / 709:  71%|███████   | 710/1000 [37:09<15:10,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 496 / 11 / 710:  71%|███████   | 710/1000 [37:09<15:10,  3.14s/it][Succeeded / Failed / Skipped / Total] 203 / 496 / 11 / 710:  71%|███████   | 711/1000 [37:11<15:07,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 496 / 11 / 711:  71%|███████   | 711/1000 [37:11<15:07,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 496 / 11 / 711:  71%|███████   | 712/1000 [37:15<15:04,  3.14s/it]Remove a range from a handler . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label [[start]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , [[start]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[showin]] ( final Handler firstHandler , final Label [[birds]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[showin]] ( firstHandler . nextHandler , [[birds]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[birds]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[stabilizes]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 704 ---------------------------------------------
extract this reference from a property name --> get palacios from doubtless --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[palacios]] ( final String [[doubtless]] ) { int ndx = StringUtil . indexOfChars ( [[doubtless]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[doubtless]] ; } return [[doubtless]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 705 ---------------------------------------------
Sets a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object [[value]] ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[adem]] ( final BeanProperty bp , final Object [[affront]] ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 706 ---------------------------------------------
Set a reference to an object . --> blame a bracco to a baseball --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[blame]] ( final String [[bracco]] , final Object [[baseball]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[bracco]] , [[baseball]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Get a reference to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[destroys]] ( final String [[inexpensive]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[inexpensive]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Get the entity descriptor for a table . --> yannick aaliyah --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[yannick]] ( final String [[aaliyah]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[aaliyah]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 709 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[barricades]] ( final String ref ) { Object [[dismantled]] = getObjectReference ( ref ) ; if ( [[dismantled]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[dismantled]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 710 ---------------------------------------------
Get the alias for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[binder]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Find table descriptor by column ref . --> Maréchal de la maréchal --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[maréchal]] ( final String [[real]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[salvato]] = entry . getValue ( ) . desc ; if ( [[salvato]] . findByPropertyName ( [[real]] ) != null ) { return [[salvato]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 497 / 11 / 712:  71%|███████   | 712/1000 [37:15<15:04,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 497 / 11 / 712:  71%|███████▏  | 713/1000 [37:17<15:00,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 498 / 11 / 713:  71%|███████▏  | 713/1000 [37:17<15:00,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 498 / 11 / 713:  71%|███████▏  | 714/1000 [37:18<14:56,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 499 / 11 / 714:  71%|███████▏  | 714/1000 [37:18<14:56,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 499 / 11 / 714:  72%|███████▏  | 715/1000 [37:23<14:54,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 500 / 11 / 715:  72%|███████▏  | 715/1000 [37:23<14:54,  3.14s/it][Succeeded / Failed / Skipped / Total] 204 / 500 / 11 / 715:  72%|███████▏  | 716/1000 [37:37<14:55,  3.15s/it][Succeeded / Failed / Skipped / Total] 204 / 501 / 11 / 716:  72%|███████▏  | 716/1000 [37:37<14:55,  3.15s/it][Succeeded / Failed / Skipped / Total] 204 / 501 / 11 / 716:  72%|███████▏  | 717/1000 [37:44<14:53,  3.16s/it][Succeeded / Failed / Skipped / Total] 204 / 502 / 11 / 717:  72%|███████▏  | 717/1000 [37:44<14:53,  3.16s/it][Succeeded / Failed / Skipped / Total] 204 / 502 / 11 / 717:  72%|███████▏  | 718/1000 [37:56<14:54,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 503 / 11 / 718:  72%|███████▏  | 718/1000 [37:56<14:54,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 503 / 11 / 718:  72%|███████▏  | 719/1000 [37:58<14:50,  3.17s/it]Returns the entity descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[hela]] ( final String [[asthma]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[asthma]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[asthma]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[attractions]] ( final String [[satisfactory]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[satisfactory]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[beanbag]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 715 ---------------------------------------------
Writes the given value to the given JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[mccourt]] ( final JsonContext jsonContext , final T [[discloses]] ) { if ( jsonContext . pushValue ( [[discloses]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[wasabi]] ( final String [[shunt]] ) { StringBuilder tableName = new StringBuilder ( [[shunt]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[shunt]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[shunt]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Injects the attributes from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[centerfold]] ( final HttpServletRequest [[brokeback]] , final Targets targets ) { final Enumeration < String > attributeNames = [[brokeback]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[brokeback]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Convert column name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[saracen]] ( final String [[failed]] ) { String propertyName = convertColumnNameToPropertyName ( [[failed]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 504 / 11 / 719:  72%|███████▏  | 719/1000 [37:58<14:50,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 504 / 11 / 719:  72%|███████▏  | 720/1000 [38:02<14:47,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 505 / 11 / 720:  72%|███████▏  | 720/1000 [38:02<14:47,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 505 / 11 / 720:  72%|███████▏  | 721/1000 [38:06<14:44,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 506 / 11 / 721:  72%|███████▏  | 721/1000 [38:06<14:44,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 506 / 11 / 721:  72%|███████▏  | 722/1000 [38:09<14:41,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 507 / 11 / 722:  72%|███████▏  | 722/1000 [38:09<14:41,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 507 / 11 / 722:  72%|███████▏  | 723/1000 [38:10<14:37,  3.17s/it]Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { if ( ! ( [[servletRequest]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[servletRequest]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[cambodia]] ( final HttpServletRequest [[rosebush]] , final Targets targets ) { if ( ! ( [[rosebush]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[rosebush]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[rosebush]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 720 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[warhammer]] > [[warhammer]] prepareGetValue ( final T t , final Class < [[warhammer]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[warhammer]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
Converts a column name to a property name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder propertyName = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[engagements]] ( final String [[gateway]] ) { StringBuilder propertyName = new StringBuilder ( [[gateway]] . length ( ) ) ; int len = [[gateway]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[gateway]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[gateway]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 722 ---------------------------------------------
Returns a set of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[illiteracy]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 723 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 508 / 11 / 723:  72%|███████▏  | 723/1000 [38:10<14:37,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 508 / 11 / 723:  72%|███████▏  | 724/1000 [38:13<14:34,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 509 / 11 / 724:  72%|███████▏  | 724/1000 [38:13<14:34,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 509 / 11 / 724:  72%|███████▎  | 725/1000 [38:18<14:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 510 / 11 / 725:  72%|███████▎  | 725/1000 [38:18<14:31,  3.17s/it][Succeeded / Failed / Skipped / Total] 204 / 510 / 11 / 725:  73%|███████▎  | 726/1000 [38:18<14:27,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 510 / 11 / 726:  73%|███████▎  | 726/1000 [38:18<14:27,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 510 / 11 / 726:  73%|███████▎  | 727/1000 [38:20<14:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 511 / 11 / 727:  73%|███████▎  | 727/1000 [38:20<14:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 511 / 11 / 727:  73%|███████▎  | 728/1000 [38:28<14:22,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 512 / 11 / 728:  73%|███████▎  | 728/1000 [38:28<14:22,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 512 / 11 / 728:  73%|███████▎  | 729/1000 [38:31<14:19,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 513 / 11 / 729:  73%|███████▎  | 729/1000 [38:31<14:19,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 513 / 11 / 729:  73%|███████▎  | 730/1000 [38:32<14:15,  3.17s/it]Injects the parameters from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[appealed]] ( final HttpServletRequest [[generators]] , final Targets targets ) { final boolean encode = encodeGetParams && [[generators]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[generators]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[generators]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[generators]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 724 ---------------------------------------------
Creates an instance of the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[bollocks]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Store a value to a PreparedStatement . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[playgirl]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 726 ---------------------------------------------
Converts a path to a system path . --> Checks if a dicaprio is a valid dicaprio --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[checking]] ( final String [[dicaprio]] ) { if ( [[dicaprio]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[dicaprio]] ) ; } else { return separatorsToUnix ( [[dicaprio]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
Resolves the given wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[appealed]] ) { String wrapperClassName = [[appealed]] . getName ( ) ; T [[apps]] = lookup ( wrapperClassName ) ; if ( [[apps]] == null ) { [[apps]] = createWrapper ( [[appealed]] ) ; initializeWrapper ( [[apps]] ) ; wrappers . put ( wrapperClassName , [[apps]] ) ; } return [[apps]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 728 ---------------------------------------------
Register a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[hillbillies]] ( final Class < ? > [[acute]] ) { Objects . requireNonNull ( [[acute]] ) ; madvocComponents . add ( ClassConsumer . of ( [[acute]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Returns the relative path of targetPath relative to basePath . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[caterina]] ( final String targetPath , final String [[front]] ) { return new File ( [[front]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 514 / 11 / 730:  73%|███████▎  | 730/1000 [38:32<14:15,  3.17s/it][Succeeded / Failed / Skipped / Total] 205 / 514 / 11 / 730:  73%|███████▎  | 731/1000 [38:32<14:10,  3.16s/it][Succeeded / Failed / Skipped / Total] 205 / 515 / 11 / 731:  73%|███████▎  | 731/1000 [38:32<14:10,  3.16s/it][Succeeded / Failed / Skipped / Total] 205 / 515 / 11 / 731:  73%|███████▎  | 732/1000 [38:34<14:07,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 515 / 11 / 732:  73%|███████▎  | 732/1000 [38:34<14:07,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 515 / 11 / 732:  73%|███████▎  | 733/1000 [38:36<14:03,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 516 / 11 / 733:  73%|███████▎  | 733/1000 [38:36<14:03,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 516 / 11 / 733:  73%|███████▎  | 734/1000 [38:38<14:00,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 517 / 11 / 734:  73%|███████▎  | 734/1000 [38:38<14:00,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 517 / 11 / 734:  74%|███████▎  | 735/1000 [38:44<13:58,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 518 / 11 / 735:  74%|███████▎  | 735/1000 [38:44<13:58,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 518 / 11 / 735:  74%|███████▎  | 736/1000 [38:47<13:55,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 519 / 11 / 736:  74%|███████▎  | 736/1000 [38:47<13:55,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 519 / 11 / 736:  74%|███████▎  | 737/1000 [38:49<13:51,  3.16s/it]Adds an action config to the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Get the path of a file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = index + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[strontium]] ( final String [[horizontal]] , final int separatorAdd ) { if ( [[horizontal]] == null ) { return null ; } int prefix = getPrefixLength ( [[horizontal]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[horizontal]] ) ; int [[crozier]] = index + separatorAdd ; if ( prefix >= [[horizontal]] . length ( ) || index < 0 || prefix >= [[crozier]] ) { return StringPool . EMPTY ; } return [[horizontal]] . substring ( prefix , [[crozier]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 732 ---------------------------------------------
Start the Madvoc server . --> Endear the Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[endear]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 733 ---------------------------------------------
Register Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[armas]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Configure defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[notes]] ( ) { final ActionConfigManager [[disrobe]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[disrobe]] . registerAnnotation ( Action . class ) ; [[disrobe]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 735 ---------------------------------------------
Exclude the given jars from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[bagman]] ( final String ... [[liu]] ) { for ( final String [[biochem]] : [[liu]] ) { rulesJars . exclude ( [[biochem]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Include all of the specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[humane]] ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 206 / 520 / 11 / 737:  74%|███████▎  | 737/1000 [38:49<13:51,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 520 / 11 / 737:  74%|███████▍  | 738/1000 [38:50<13:47,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 521 / 11 / 738:  74%|███████▍  | 738/1000 [38:50<13:47,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 521 / 11 / 738:  74%|███████▍  | 739/1000 [38:54<13:44,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 522 / 11 / 739:  74%|███████▍  | 739/1000 [38:54<13:44,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 522 / 11 / 739:  74%|███████▍  | 740/1000 [39:00<13:42,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 523 / 11 / 740:  74%|███████▍  | 740/1000 [39:00<13:42,  3.16s/it][Succeeded / Failed / Skipped / Total] 206 / 523 / 11 / 740:  74%|███████▍  | 741/1000 [39:02<13:38,  3.16s/it][Succeeded / Failed / Skipped / Total] 207 / 523 / 11 / 741:  74%|███████▍  | 741/1000 [39:02<13:38,  3.16s/it][Succeeded / Failed / Skipped / Total] 207 / 523 / 11 / 741:  74%|███████▍  | 742/1000 [39:05<13:35,  3.16s/it][Succeeded / Failed / Skipped / Total] 207 / 524 / 11 / 742:  74%|███████▍  | 742/1000 [39:05<13:35,  3.16s/it][Succeeded / Failed / Skipped / Total] 207 / 524 / 11 / 742:  74%|███████▍  | 743/1000 [39:09<13:32,  3.16s/it]Split a filename into its components . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[smidge]] ) { String prefix = getPrefix ( [[smidge]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[smidge]] ) ; int lastExtensionIndex = indexOfExtension ( [[smidge]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[smidge]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[smidge]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[smidge]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[smidge]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[smidge]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[smidge]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[smidge]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 738 ---------------------------------------------
Adds a list of entries to be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[shinagawa]] ( final String ... [[banns]] ) { for ( final String [[alon]] : [[banns]] ) { rulesEntries . include ( [[alon]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
Exclude the given entries from the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[marias]] ) { for ( final String excludedEntry : [[marias]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[empanadas]] ( final Class [[prototypes]] ) { final String name = ' ' + [[prototypes]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Scan the classpath . --> audie a tarantula --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[file]] , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[file]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[audie]] ( final File [[tarantula]] ) { String rootPath = [[tarantula]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File [[aniseed]] ; while ( ( [[aniseed]] = ff . nextFile ( ) ) != null ) { final String filePath = [[aniseed]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[aniseed]] , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[aniseed]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 742 ---------------------------------------------
Scan a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[prehistoric]] ( final String ... [[candice]] ) { for ( final String [[aztecs]] : [[candice]] ) { filesToScan . add ( new File ( [[aztecs]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 743 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 525 / 11 / 743:  74%|███████▍  | 743/1000 [39:09<13:32,  3.16s/it][Succeeded / Failed / Skipped / Total] 207 / 525 / 11 / 743:  74%|███████▍  | 744/1000 [39:09<13:28,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 525 / 11 / 744:  74%|███████▍  | 744/1000 [39:09<13:28,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 525 / 11 / 744:  74%|███████▍  | 745/1000 [39:17<13:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 526 / 11 / 745:  74%|███████▍  | 745/1000 [39:17<13:27,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 526 / 11 / 745:  75%|███████▍  | 746/1000 [39:21<13:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 208 / 527 / 11 / 746:  75%|███████▍  | 746/1000 [39:21<13:24,  3.17s/it][Succeeded / Failed / Skipped / Total] 208 / 527 / 11 / 746:  75%|███████▍  | 747/1000 [39:22<13:20,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 528 / 11 / 747:  75%|███████▍  | 747/1000 [39:22<13:20,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 528 / 11 / 747:  75%|███████▍  | 748/1000 [39:24<13:16,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 529 / 11 / 748:  75%|███████▍  | 748/1000 [39:24<13:16,  3.16s/it][Succeeded / Failed / Skipped / Total] 208 / 529 / 11 / 748:  75%|███████▍  | 749/1000 [39:43<13:18,  3.18s/it]Default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
start scanning the files to scan . --> scan all files to see if it is a jar file or directory --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[conked]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[zapp]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[zapp]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 745 ---------------------------------------------
Create a new JtxTransaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[tightening]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
Get or initialize scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[chickadee]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[azaria]] : allScopes ) { if ( [[azaria]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[azaria]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Scan a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[bertolucci]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 748 ---------------------------------------------
For the given scope type invoke the given consumer for the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[oppenheimer]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 530 / 11 / 749:  75%|███████▍  | 749/1000 [39:43<13:18,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 530 / 11 / 749:  75%|███████▌  | 750/1000 [39:44<13:14,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 531 / 11 / 750:  75%|███████▌  | 750/1000 [39:44<13:14,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 531 / 11 / 750:  75%|███████▌  | 751/1000 [39:50<13:12,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 532 / 11 / 751:  75%|███████▌  | 751/1000 [39:50<13:12,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 532 / 11 / 751:  75%|███████▌  | 752/1000 [39:51<13:08,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 533 / 11 / 752:  75%|███████▌  | 752/1000 [39:51<13:08,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 533 / 11 / 752:  75%|███████▌  | 753/1000 [39:55<13:05,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 534 / 11 / 753:  75%|███████▌  | 753/1000 [39:55<13:05,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 534 / 11 / 753:  75%|███████▌  | 754/1000 [40:00<13:03,  3.18s/it]Assure the size of the token set is at least maxTokensPerSession . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[zaki]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[abscess]] = iterator . next ( ) ; if ( [[abscess]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[abscess]] . validUntil < validUntilMin ) { validUntilMin = [[abscess]] . validUntil ; tokenToRemove = [[abscess]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 750 ---------------------------------------------
Prepare a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[infractions]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 751 ---------------------------------------------
Decodes a string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int [[pad]] = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[cnt]] = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? [[cnt]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[cnt]] - sepCnt ) * 6 >> 3 ) - [[pad]] ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , [[eLen]] = ( len / 3 ) * 3 ; d < [[eLen]] ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - [[pad]] ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[argos]] ( final char [ ] [[generators]] ) { int length = [[generators]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int [[camille]] = [[generators]] [ endx ] == ' ' ? ( [[generators]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[climbing]] = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[generators]] [ 76 ] == ' ' ? [[climbing]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[climbing]] - sepCnt ) * 6 >> 3 ) - [[camille]] ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , [[gossiped]] = ( len / 3 ) * 3 ; d < [[gossiped]] ; ) { int i = INV [ [[generators]] [ sndx ++ ] ] << 18 | INV [ [[generators]] [ sndx ++ ] ] << 12 | INV [ [[generators]] [ sndx ++ ] ] << 6 | INV [ [[generators]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - [[camille]] ; j ++ ) { i |= INV [ [[generators]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 752 ---------------------------------------------
Creates a copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[meows]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[instill]] ( final Object [[admirably]] ) { BeanCopy [[whiteout]] = new BeanCopy ( [[admirably]] ) ; [[whiteout]] . isSourceMap = [[admirably]] instanceof Map ; return [[whiteout]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 754 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 535 / 11 / 754:  75%|███████▌  | 754/1000 [40:00<13:03,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 535 / 11 / 754:  76%|███████▌  | 755/1000 [40:02<12:59,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 536 / 11 / 755:  76%|███████▌  | 755/1000 [40:02<12:59,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 536 / 11 / 755:  76%|███████▌  | 756/1000 [40:04<12:56,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 537 / 11 / 756:  76%|███████▌  | 756/1000 [40:04<12:56,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 537 / 11 / 756:  76%|███████▌  | 757/1000 [40:08<12:53,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 538 / 11 / 757:  76%|███████▌  | 757/1000 [40:08<12:53,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 538 / 11 / 757:  76%|███████▌  | 758/1000 [40:12<12:50,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 539 / 11 / 758:  76%|███████▌  | 758/1000 [40:12<12:50,  3.18s/it][Succeeded / Failed / Skipped / Total] 208 / 539 / 11 / 758:  76%|███████▌  | 759/1000 [40:28<12:51,  3.20s/it][Succeeded / Failed / Skipped / Total] 208 / 540 / 11 / 759:  76%|███████▌  | 759/1000 [40:28<12:51,  3.20s/it][Succeeded / Failed / Skipped / Total] 208 / 540 / 11 / 759:  76%|███████▌  | 760/1000 [40:32<12:48,  3.20s/it]Checks if the session contains a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return True ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[belay]] ( final HttpSession session , final String [[latinum]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[latinum]] == null ) ) { return True ; } if ( ( tokenSet == null ) || ( [[latinum]] == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[latinum]] ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 755 ---------------------------------------------
Resolve a Petite scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[loomis]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "[["Alexander" == "Alexander"]]" == "[["Alexander" == "Alexander"]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 757 ---------------------------------------------
Register the table reference for the entity . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[buoy]] ) { super . init ( [[buoy]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[buoy]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[buoy]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 758 ---------------------------------------------
Remove a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[houseboat]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 759 ---------------------------------------------
Register a bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[nakamura]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
[Succeeded / Failed / Skipped / Total] 208 / 541 / 11 / 760:  76%|███████▌  | 760/1000 [40:32<12:48,  3.20s/it][Succeeded / Failed / Skipped / Total] 208 / 541 / 11 / 760:  76%|███████▌  | 761/1000 [40:35<12:44,  3.20s/it][Succeeded / Failed / Skipped / Total] 208 / 542 / 11 / 761:  76%|███████▌  | 761/1000 [40:35<12:44,  3.20s/it][Succeeded / Failed / Skipped / Total] 208 / 542 / 11 / 761:  76%|███████▌  | 762/1000 [41:01<12:48,  3.23s/it][Succeeded / Failed / Skipped / Total] 208 / 543 / 11 / 762:  76%|███████▌  | 762/1000 [41:01<12:48,  3.23s/it][Succeeded / Failed / Skipped / Total] 208 / 543 / 11 / 762:  76%|███████▋  | 763/1000 [41:02<12:45,  3.23s/it][Succeeded / Failed / Skipped / Total] 209 / 543 / 11 / 763:  76%|███████▋  | 763/1000 [41:02<12:45,  3.23s/it][Succeeded / Failed / Skipped / Total] 209 / 543 / 11 / 763:  76%|███████▋  | 764/1000 [41:11<12:43,  3.23s/it]--------------------------------------------- Result 760 ---------------------------------------------
Register a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[gangbangers]] ( final Class < T > [[profiting]] , String [[larking]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[larking]] == null ) { [[larking]] = resolveBeanName ( [[profiting]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[profiting]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[profiting]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[principessa]] ( final Class [[booting]] ) { String [ ] beanNames = beanCollections . get ( [[booting]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[booting]] ) ) { String [[balled]] = entry . getKey ( ) ; list . add ( [[balled]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[booting]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
Register a Petite set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[perishable]] ( final String beanName , final String [[afterthought]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[afterthought]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[afterthought]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register a Petite property injection point . --> Adds a colors command to a shillelagh --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String [[beanName]] , final String [[property]] , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[colors]] ( final String [[fixed]] , final String [[command]] , final String reference ) { BeanDefinition [[shillelagh]] = lookupExistingBeanDefinition ( [[fixed]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[shillelagh]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[command]] , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[shillelagh]] . type . getName ( ) + ' ' + [[command]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[shillelagh]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 543 / 11 / 764:  76%|███████▋  | 764/1000 [41:11<12:43,  3.23s/it][Succeeded / Failed / Skipped / Total] 210 / 543 / 11 / 764:  76%|███████▋  | 765/1000 [41:16<12:40,  3.24s/it][Succeeded / Failed / Skipped / Total] 211 / 543 / 11 / 765:  76%|███████▋  | 765/1000 [41:16<12:40,  3.24s/it][Succeeded / Failed / Skipped / Total] 211 / 543 / 11 / 765:  77%|███████▋  | 766/1000 [41:34<12:42,  3.26s/it][Succeeded / Failed / Skipped / Total] 212 / 543 / 11 / 766:  77%|███████▋  | 766/1000 [41:34<12:42,  3.26s/it][Succeeded / Failed / Skipped / Total] 212 / 543 / 11 / 766:  77%|███████▋  | 767/1000 [41:41<12:39,  3.26s/it]Register a Petite method injection point . --> mayhem mayhem mayhem mayhem --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String [[methodName]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[md]] = cd . getMethodDescriptor ( [[methodName]] , arguments , True ) ; if ( [[md]] != null ) { method = [[md]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[mayhem]] ( final String beanName , final String [[coma]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beni]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beni]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[coma]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beni]] . type . getName ( ) + ' ' + [[coma]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[hullabaloo]] = cd . getMethodDescriptor ( [[coma]] , arguments , True ) ; if ( [[hullabaloo]] != null ) { method = [[hullabaloo]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beni]] . type . getName ( ) + ' ' + [[coma]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beni]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 765 ---------------------------------------------
Register a Petite constructor injection point . --> Given a bean name and a Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite Petite is a Petite Petite Petite Petite Petite Petite Petite Petite P --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] [[paramTypes]] , final String [ ] [[references]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( [[paramTypes]] , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , [[references]] ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[prevailed]] ( final String beanName , final Class [ ] [[pastrami]] , final String [ ] [[heals]] ) { BeanDefinition [[cropping]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[rotating]] = ClassIntrospector . get ( ) . lookup ( [[cropping]] . type ) ; Constructor constructor = null ; if ( [[pastrami]] == null ) { CtorDescriptor [ ] ctors = [[rotating]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[cropping]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[rotating]] . getCtorDescriptor ( [[pastrami]] , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[cropping]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , [[heals]] ) ; [[cropping]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 766 ---------------------------------------------
Register Petite destroy methods . --> Limousines a gestation with a list of comeuppance --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String [[beanName]] , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[limousines]] ( final String [[gestation]] , String ... [[comeuppance]] ) { BeanDefinition [[contributor]] = lookupExistingBeanDefinition ( [[gestation]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[contributor]] . type ) ; if ( [[comeuppance]] == null ) { [[comeuppance]] = StringPool . EMPTY_ARRAY ; } int total = [[comeuppance]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[comeuppance]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[comeuppance]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[contributor]] . type . getName ( ) + ' ' + [[comeuppance]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[contributor]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 544 / 11 / 767:  77%|███████▋  | 767/1000 [41:41<12:39,  3.26s/it][Succeeded / Failed / Skipped / Total] 212 / 544 / 11 / 767:  77%|███████▋  | 768/1000 [41:43<12:36,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 544 / 11 / 768:  77%|███████▋  | 768/1000 [41:43<12:36,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 544 / 11 / 768:  77%|███████▋  | 769/1000 [41:46<12:32,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 545 / 11 / 769:  77%|███████▋  | 769/1000 [41:46<12:32,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 545 / 11 / 769:  77%|███████▋  | 770/1000 [41:50<12:29,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 546 / 11 / 770:  77%|███████▋  | 770/1000 [41:50<12:29,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 546 / 11 / 770:  77%|███████▋  | 771/1000 [41:51<12:25,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 547 / 11 / 771:  77%|███████▋  | 771/1000 [41:51<12:25,  3.26s/it][Succeeded / Failed / Skipped / Total] 213 / 547 / 11 / 771:  77%|███████▋  | 772/1000 [42:00<12:24,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 547 / 11 / 772:  77%|███████▋  | 772/1000 [42:00<12:24,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 547 / 11 / 772:  77%|███████▋  | 773/1000 [42:00<12:20,  3.26s/it]Register Petite init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[monoplane]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 768 ---------------------------------------------
Iterate through all beans of the given type and accept them to the given consumer . --> balaclava banshee --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[balaclava]] ( final Class [[banshee]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[banshee]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 769 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[keyword]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 770 ---------------------------------------------
Register a petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[snowmobile]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 771 ---------------------------------------------
Define parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[scamps]] ( final Map < ? , ? > [[ancestor]] ) { for ( Map . Entry < ? , ? > [[barbi]] : [[ancestor]] . entrySet ( ) ) { defineParameter ( [[barbi]] . getKey ( ) . toString ( ) , [[barbi]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 772 ---------------------------------------------
Push an integer to the stack . --> Cloudless cranial instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[cloudless]] ( final MethodVisitor [[stockbridge]] , final int [[cranial]] ) { if ( [[cranial]] <= 5 ) { [[stockbridge]] . visitInsn ( ICONST_0 + [[cranial]] ) ; } else if ( [[cranial]] <= Byte . MAX_VALUE ) { [[stockbridge]] . visitIntInsn ( BIPUSH , [[cranial]] ) ; } else { [[stockbridge]] . visitIntInsn ( SIPUSH , [[cranial]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 214 / 548 / 11 / 773:  77%|███████▋  | 773/1000 [42:00<12:20,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 548 / 11 / 773:  77%|███████▋  | 774/1000 [42:01<12:16,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 549 / 11 / 774:  77%|███████▋  | 774/1000 [42:01<12:16,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 549 / 11 / 774:  78%|███████▊  | 775/1000 [42:03<12:12,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 550 / 11 / 775:  78%|███████▊  | 775/1000 [42:03<12:12,  3.26s/it][Succeeded / Failed / Skipped / Total] 214 / 550 / 11 / 775:  78%|███████▊  | 776/1000 [42:11<12:10,  3.26s/it][Succeeded / Failed / Skipped / Total] 215 / 550 / 11 / 776:  78%|███████▊  | 776/1000 [42:11<12:10,  3.26s/it][Succeeded / Failed / Skipped / Total] 215 / 550 / 11 / 776:  78%|███████▊  | 777/1000 [42:11<12:06,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 550 / 11 / 777:  78%|███████▊  | 777/1000 [42:11<12:06,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 550 / 11 / 777:  78%|███████▊  | 778/1000 [42:15<12:03,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 551 / 11 / 778:  78%|███████▊  | 778/1000 [42:15<12:03,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 551 / 11 / 778:  78%|███████▊  | 779/1000 [42:16<11:59,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 552 / 11 / 779:  78%|███████▊  | 779/1000 [42:16<11:59,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 552 / 11 / 779:  78%|███████▊  | 780/1000 [42:23<11:57,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 553 / 11 / 780:  78%|███████▊  | 780/1000 [42:23<11:57,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 553 / 11 / 780:  78%|███████▊  | 781/1000 [42:29<11:54,  3.26s/it]Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , [[executionTime]] , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[coding]] ( final ActionRequest [[laban]] ) throws Exception { printBefore ( [[laban]] ) ; long startTime = System . currentTimeMillis ( ) ; Object [[kitana]] = null ; try { [[kitana]] = [[laban]] . invoke ( ) ; } catch ( Exception ex ) { [[kitana]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[kitana]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[overcook]] = System . currentTimeMillis ( ) - startTime ; printAfter ( [[laban]] , [[overcook]] , [[kitana]] ) ; } return [[kitana]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 774 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[functions]] ( final int [[recognized]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[cellblock]] = javaVersionNumber - 8 + 52 ; return [[recognized]] > [[cellblock]] ? [[recognized]] : [[cellblock]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 775 ---------------------------------------------
Check that an argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[inscribed]] ( final MethodInfo [[attendants]] , final int [[listen]] ) { if ( ( [[listen]] < 1 ) || ( [[listen]] > [[attendants]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[listen]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 776 ---------------------------------------------
Advice field name . --> Returns a caterpillar for the given accomplishment and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[caterpillar]] ( final String [[accomplishment]] , final int index ) { return ProxettaNames . fieldPrefix + [[accomplishment]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 777 ---------------------------------------------
Advice method name . --> Returns a screenwriter for the given bar and accompaniment --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[screenwriter]] ( final String [[bar]] , final int [[accompaniment]] ) { return ProxettaNames . methodPrefix + [[bar]] + ProxettaNames . methodDivider + [[accompaniment]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 778 ---------------------------------------------
Load special method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[hania]] ( final MethodVisitor [[détente]] , final MethodInfo methodInfo ) { [[détente]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[détente]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[yadda]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[polices]] ( final MethodVisitor mv , final MethodInfo [[come]] ) { for ( int i = 1 ; i <= [[come]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[come]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 554 / 11 / 781:  78%|███████▊  | 781/1000 [42:29<11:54,  3.26s/it][Succeeded / Failed / Skipped / Total] 216 / 554 / 11 / 781:  78%|███████▊  | 782/1000 [42:30<11:50,  3.26s/it][Succeeded / Failed / Skipped / Total] 217 / 554 / 11 / 782:  78%|███████▊  | 782/1000 [42:30<11:50,  3.26s/it][Succeeded / Failed / Skipped / Total] 217 / 554 / 11 / 782:  78%|███████▊  | 783/1000 [42:34<11:47,  3.26s/it][Succeeded / Failed / Skipped / Total] 217 / 555 / 11 / 783:  78%|███████▊  | 783/1000 [42:34<11:47,  3.26s/it][Succeeded / Failed / Skipped / Total] 217 / 555 / 11 / 783:  78%|███████▊  | 784/1000 [42:39<11:45,  3.26s/it][Succeeded / Failed / Skipped / Total] 218 / 555 / 11 / 784:  78%|███████▊  | 784/1000 [42:39<11:45,  3.26s/it][Succeeded / Failed / Skipped / Total] 218 / 555 / 11 / 784:  78%|███████▊  | 785/1000 [42:42<11:41,  3.26s/it]Prepare the return value of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[greedily]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Load a method argument . --> Hanukkah hanukkah --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[hanukkah]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
Store a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[brioche]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Generate a NEWARRAY instruction . --> chest a class toño --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[chest]] ( final MethodVisitor mv , final Class [[toño]] ) { if ( [[toño]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[toño]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[toño]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[toño]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[toño]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[toño]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[toño]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[toño]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[toño]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 555 / 11 / 785:  78%|███████▊  | 785/1000 [42:42<11:41,  3.26s/it][Succeeded / Failed / Skipped / Total] 219 / 555 / 11 / 785:  79%|███████▊  | 786/1000 [42:43<11:37,  3.26s/it][Succeeded / Failed / Skipped / Total] 219 / 556 / 11 / 786:  79%|███████▊  | 786/1000 [42:43<11:37,  3.26s/it][Succeeded / Failed / Skipped / Total] 219 / 556 / 11 / 786:  79%|███████▊  | 787/1000 [42:54<11:36,  3.27s/it][Succeeded / Failed / Skipped / Total] 219 / 557 / 11 / 787:  79%|███████▊  | 787/1000 [42:54<11:36,  3.27s/it][Succeeded / Failed / Skipped / Total] 219 / 558 / 11 / 788:  79%|███████▉  | 788/1000 [42:54<11:32,  3.27s/it][Succeeded / Failed / Skipped / Total] 219 / 558 / 11 / 788:  79%|███████▉  | 789/1000 [42:56<11:28,  3.27s/it][Succeeded / Failed / Skipped / Total] 220 / 558 / 11 / 789:  79%|███████▉  | 789/1000 [42:56<11:28,  3.27s/it][Succeeded / Failed / Skipped / Total] 220 / 559 / 11 / 790:  79%|███████▉  | 790/1000 [43:00<11:26,  3.27s/it][Succeeded / Failed / Skipped / Total] 220 / 559 / 11 / 790:  79%|███████▉  | 791/1000 [43:07<11:23,  3.27s/it]Store a primitive type into an array . --> CICATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATRATR --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[cicatrice]] ( final MethodVisitor [[raptors]] , final Class componentType ) { if ( componentType == int . class ) { [[raptors]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[raptors]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[raptors]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[raptors]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[raptors]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[raptors]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[raptors]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[raptors]] . visitInsn ( CASTORE ) ; return ; } [[raptors]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 786 ---------------------------------------------
Creates a key for a method signature . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String [[methodName]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[methodName]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[capitulated]] ( final int access , final String [[contractors]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[contractors]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 787 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[imparato]] ( final HttpServletResponse resp , final String [[attacks]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[attacks]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Extract the encoding from the given content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String extractEncoding ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = extractEncoding ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String [[wird]] , String [[softens]] ) { String [[totem]] = extractEncoding ( [[wird]] ) ; if ( [[totem]] == null ) { if ( [[softens]] == null ) { [[softens]] = JoddCore . encoding ; } [[totem]] = [[softens]] ; } return [[totem]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Resolve the bearer token from the Authorization header . --> Get the axel from the Authorization header --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[ndx]] = header . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return header . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[axel]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[freeza]] = header . indexOf ( "Bearer " ) ; if ( [[freeza]] == - 1 ) { return null ; } return header . substring ( [[freeza]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
Checks if the flags are empty . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] [[userFlags]] = [[flags]] . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[altamira]] ( Flags [[wedge]] ) { if ( [[wedge]] == null ) return "[["Physically" == "Physically"]]" == "[["Physically" == "Physically"]]" ; Flags . Flag [ ] systemFlags = [[wedge]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] [[fingertips]] = [[wedge]] . getUserFlags ( ) ; if ( [[fingertips]] != null && [[fingertips]] . length > 0 ) { return False ; } return "[["Physically" == "Physically"]]" == "[["Physically" == "Physically"]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 560 / 11 / 791:  79%|███████▉  | 791/1000 [43:07<11:23,  3.27s/it][Succeeded / Failed / Skipped / Total] 221 / 560 / 11 / 792:  79%|███████▉  | 792/1000 [43:07<11:19,  3.27s/it][Succeeded / Failed / Skipped / Total] 221 / 560 / 11 / 792:  79%|███████▉  | 793/1000 [43:16<11:17,  3.27s/it][Succeeded / Failed / Skipped / Total] 221 / 561 / 11 / 793:  79%|███████▉  | 793/1000 [43:16<11:17,  3.27s/it][Succeeded / Failed / Skipped / Total] 222 / 561 / 11 / 794:  79%|███████▉  | 794/1000 [43:22<11:15,  3.28s/it][Succeeded / Failed / Skipped / Total] 222 / 561 / 11 / 794:  80%|███████▉  | 795/1000 [43:22<11:11,  3.27s/it][Succeeded / Failed / Skipped / Total] 222 / 562 / 11 / 795:  80%|███████▉  | 795/1000 [43:22<11:11,  3.27s/it][Succeeded / Failed / Skipped / Total] 222 / 563 / 11 / 796:  80%|███████▉  | 796/1000 [43:29<11:08,  3.28s/it][Succeeded / Failed / Skipped / Total] 222 / 563 / 11 / 796:  80%|███████▉  | 797/1000 [43:29<11:04,  3.27s/it]Prepare a download request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[wazowski]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request body from a reader . --> pardoned from kanjar --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[pardoned]] ( final HttpServletRequest [[kanjar]] ) throws IOException { BufferedReader buff = [[kanjar]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Prepare the response to be sent to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[caster]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 794 ---------------------------------------------
Store the context path in the request and servlet context . --> set the casablanca innovators attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[cacciatore]] ( final PageContext pageContext , final String [[innovators]] ) { String [[casablanca]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[innovators]] , [[casablanca]] ) ; ServletContext [[eyebrows]] = pageContext . getServletContext ( ) ; [[eyebrows]] . setAttribute ( [[innovators]] , [[casablanca]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 795 ---------------------------------------------
Returns a list of all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie [[cookie]] : [[cookies]] ) { if ( [[cookie]] . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[pelo]] ( final HttpServletRequest request , final String [[excavating]] ) { Cookie [ ] [[vincente]] = request . getCookies ( ) ; if ( [[vincente]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[vincente]] . length ) ; for ( Cookie [[tunneling]] : [[vincente]] ) { if ( [[tunneling]] . getName ( ) . equals ( [[excavating]] ) ) { list . add ( [[tunneling]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 796 ---------------------------------------------
Store the context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[yadda]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 564 / 11 / 797:  80%|███████▉  | 797/1000 [43:29<11:04,  3.27s/it][Succeeded / Failed / Skipped / Total] 223 / 564 / 11 / 798:  80%|███████▉  | 798/1000 [43:38<11:02,  3.28s/it][Succeeded / Failed / Skipped / Total] 223 / 564 / 11 / 798:  80%|███████▉  | 798/1000 [43:40<11:03,  3.28s/it][Succeeded / Failed / Skipped / Total] 223 / 564 / 11 / 798:  80%|███████▉  | 799/1000 [43:45<11:00,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 564 / 11 / 799:  80%|███████▉  | 799/1000 [43:45<11:00,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 564 / 11 / 799:  80%|████████  | 800/1000 [43:50<10:57,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 565 / 11 / 800:  80%|████████  | 800/1000 [43:50<10:57,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 565 / 11 / 800:  80%|████████  | 801/1000 [43:51<10:53,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 566 / 11 / 801:  80%|████████  | 801/1000 [43:51<10:53,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 566 / 11 / 801:  80%|████████  | 802/1000 [43:56<10:51,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 567 / 11 / 802:  80%|████████  | 802/1000 [43:56<10:51,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 567 / 11 / 802:  80%|████████  | 803/1000 [44:01<10:47,  3.29s/it]Read the request body from the request stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[moseby]] ( final HttpServletRequest [[rené]] ) throws IOException { String charEncoding = [[rené]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[zeljko]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[rené]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[zeljko]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[zeljko]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 798 ---------------------------------------------
Invoke a tag body . --> Fades the given fragment or throws an exception if it fails --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[either]] ( final JspFragment [[foiled]] ) throws JspException { if ( [[foiled]] == null ) { return ; } try { [[foiled]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
Renders the given body . --> ishtar ishtar ishtar --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[ishtar]] ( final JspFragment [[curvy]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[curvy]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 800 ---------------------------------------------
Copy parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String [[paramName]] = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[tex]] ( final HttpServletRequest [[backache]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[auditory]] = [[backache]] . getParameterNames ( ) ; while ( [[auditory]] . hasMoreElements ( ) ) { String [[ingenious]] = ( String ) [[auditory]] . nextElement ( ) ; if ( [[backache]] . getAttribute ( [[ingenious]] ) != null ) { continue ; } String [ ] [[absolution]] = [[backache]] . getParameterValues ( [[ingenious]] ) ; [[absolution]] = prepareParameters ( [[absolution]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[absolution]] == null ) { continue ; } [[backache]] . setAttribute ( [[ingenious]] , [[absolution]] . length == 1 ? [[absolution]] [ 0 ] : [[absolution]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 801 ---------------------------------------------
Checks if the given name is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : nameValuePairs ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[zeta]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[evette]] : nameValuePairs ) { if ( [[evette]] . startsWith ( name ) ) { return "[["Anaconda" == "Anaconda"]]" == "[["Anaconda" == "Anaconda"]]" ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the given JspFragment to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[excessive]] ( final JspFragment [[sanity]] ) throws JspException { char [ ] result = renderBody ( [[sanity]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 803 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 224 / 568 / 11 / 803:  80%|████████  | 803/1000 [44:01<10:47,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 568 / 11 / 803:  80%|████████  | 804/1000 [44:01<10:43,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 569 / 11 / 804:  80%|████████  | 804/1000 [44:01<10:43,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 569 / 11 / 804:  80%|████████  | 805/1000 [44:02<10:40,  3.28s/it][Succeeded / Failed / Skipped / Total] 224 / 570 / 11 / 805:  80%|████████  | 805/1000 [44:02<10:40,  3.28s/it][Succeeded / Failed / Skipped / Total] 224 / 570 / 11 / 805:  81%|████████  | 806/1000 [44:10<10:37,  3.29s/it][Succeeded / Failed / Skipped / Total] 224 / 571 / 11 / 806:  81%|████████  | 806/1000 [44:10<10:37,  3.29s/it][Succeeded / Failed / Skipped / Total] 225 / 571 / 11 / 807:  81%|████████  | 807/1000 [44:10<10:33,  3.28s/it][Succeeded / Failed / Skipped / Total] 225 / 571 / 11 / 807:  81%|████████  | 808/1000 [44:16<10:31,  3.29s/it][Succeeded / Failed / Skipped / Total] 226 / 571 / 11 / 808:  81%|████████  | 808/1000 [44:16<10:31,  3.29s/it][Succeeded / Failed / Skipped / Total] 227 / 571 / 11 / 809:  81%|████████  | 809/1000 [44:17<10:27,  3.28s/it][Succeeded / Failed / Skipped / Total] 227 / 571 / 11 / 809:  81%|████████  | 810/1000 [44:20<10:24,  3.28s/it]Prepare the given array of parameters to be used in a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[uppermost]] ( final String [ ] [[crash]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[crash]] . length ; for ( int i = 0 ; i < [[crash]] . length ; i ++ ) { String paramValue = [[crash]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[crash]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[crash]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 804 ---------------------------------------------
Invoke all init methods for the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[cohn]] ( final InitMethodInvocationStrategy [[remotes]] ) { for ( final InitMethodPoint [[unleaded]] : beanDefinition . initMethodPoints ( ) ) { if ( [[remotes]] != [[unleaded]] . invocationStrategy ) { continue ; } try { [[unleaded]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[unleaded]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Call all destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[dilettante]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[neoconservatives]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[cropping]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Injects the parameters of the bean . --> If aquinas is true then aquinas is true then aquinas is false --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[entirely]] ( final ParamManager paramManager , final boolean [[aquinas]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[aquinas]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Adds a header to the response . --> Housekeeper for breadfruit and appeasement --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[housekeeper]] ( final String [[breadfruit]] , final String [[appeasement]] ) { List < String > valuesList = super . getAll ( [[breadfruit]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[breadfruit]] , [[appeasement]] ) ; return ; } super . remove ( [[breadfruit]] ) ; valuesList . add ( [[appeasement]] ) ; super . addAll ( [[breadfruit]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 809 ---------------------------------------------
Rewrite an action path . --> Method to get the greatest value of lieut --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[greatest]] ( final HttpServletRequest [[clarita]] , final String [[lieut]] , final String httpMethod ) { return [[lieut]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 810 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 571 / 11 / 810:  81%|████████  | 810/1000 [44:20<10:24,  3.28s/it][Succeeded / Failed / Skipped / Total] 228 / 572 / 11 / 811:  81%|████████  | 811/1000 [44:25<10:21,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 572 / 11 / 811:  81%|████████  | 812/1000 [44:30<10:18,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 573 / 11 / 812:  81%|████████  | 812/1000 [44:30<10:18,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 573 / 11 / 812:  81%|████████▏ | 813/1000 [44:32<10:14,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 574 / 11 / 813:  81%|████████▏ | 813/1000 [44:32<10:14,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 574 / 11 / 813:  81%|████████▏ | 814/1000 [44:40<10:12,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 575 / 11 / 814:  81%|████████▏ | 814/1000 [44:40<10:12,  3.29s/it][Succeeded / Failed / Skipped / Total] 228 / 575 / 11 / 814:  82%|████████▏ | 815/1000 [44:43<10:09,  3.29s/it][Succeeded / Failed / Skipped / Total] 229 / 575 / 11 / 815:  82%|████████▏ | 815/1000 [44:43<10:09,  3.29s/it][Succeeded / Failed / Skipped / Total] 229 / 575 / 11 / 815:  82%|████████▏ | 816/1000 [44:45<10:05,  3.29s/it][Succeeded / Failed / Skipped / Total] 229 / 576 / 11 / 816:  82%|████████▏ | 816/1000 [44:45<10:05,  3.29s/it][Succeeded / Failed / Skipped / Total] 229 / 576 / 11 / 816:  82%|████████▏ | 817/1000 [44:58<10:04,  3.30s/it][Succeeded / Failed / Skipped / Total] 230 / 576 / 11 / 817:  82%|████████▏ | 817/1000 [44:58<10:04,  3.30s/it][Succeeded / Failed / Skipped / Total] 230 / 576 / 11 / 817:  82%|████████▏ | 818/1000 [45:04<10:01,  3.31s/it]Adds a new props entry to the map . --> Add a PropsEntry to a PropsMap . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String [[key]] , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[key]] ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( [[key]] , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String [[atter]] , final String value , final boolean append ) { String [[apostles]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[atter]] ) ; if ( pv != null ) { [[apostles]] = pv . value + APPEND_SEPARATOR + [[apostles]] ; } } PropsEntry propsEntry = new PropsEntry ( [[atter]] , [[apostles]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 811 ---------------------------------------------
Adds a base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String [[value]] , final boolean [[append]] ) { put ( null , baseProperties , [[key]] , [[value]] , [[append]] ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[verified]] ( final String [[rifat]] , final String [[demon]] , final boolean [[amoeba]] ) { put ( null , baseProperties , [[rifat]] , [[demon]] , [[amoeba]] ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve macros . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[francine]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Get a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[acclaimed]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a property to a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String [[key]] , final String [[value]] , final String profile , final boolean append ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , [[map]] , [[key]] , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[strait]] ( final String [[amulet]] , final String [[aphid]] , final String profile , final boolean append ) { Map < String , PropsEntry > [[bestsellers]] = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , [[bestsellers]] , [[amulet]] , [[aphid]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Reads a 4 byte word from the byte array starting at the given offset . --> stream to ord in bancroft --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[offp]] ) { int i ; int [[word]] = 0 ; int off = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[offp]] [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[bancroft]] ) { int i ; int [[investigates]] = 0 ; int off = [[bancroft]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[investigates]] = ( [[investigates]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[bancroft]] [ 0 ] = off ; return [[investigates]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Extract profiles from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[crackpots]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[crackpots]] == null ) { [[crackpots]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Checks if the given plaintext is a valid password . --> Farrah hijacker cabeza --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[farrah]] ( String [[hijacker]] , String [[cabeza]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[hijacker]] , [[cabeza]] ) ; hashed_bytes = [[cabeza]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 818 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 577 / 11 / 818:  82%|████████▏ | 818/1000 [45:04<10:01,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 577 / 11 / 818:  82%|████████▏ | 819/1000 [45:08<09:58,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 578 / 11 / 819:  82%|████████▏ | 819/1000 [45:08<09:58,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 578 / 11 / 819:  82%|████████▏ | 820/1000 [45:14<09:55,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 579 / 11 / 820:  82%|████████▏ | 820/1000 [45:14<09:55,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 579 / 11 / 820:  82%|████████▏ | 821/1000 [45:15<09:51,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 580 / 11 / 821:  82%|████████▏ | 821/1000 [45:15<09:51,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 580 / 11 / 821:  82%|████████▏ | 822/1000 [45:19<09:48,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 581 / 11 / 822:  82%|████████▏ | 822/1000 [45:19<09:48,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 581 / 11 / 822:  82%|████████▏ | 823/1000 [45:27<09:46,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 582 / 11 / 823:  82%|████████▏ | 823/1000 [45:27<09:46,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 582 / 11 / 823:  82%|████████▏ | 824/1000 [45:28<09:42,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 583 / 11 / 824:  82%|████████▏ | 824/1000 [45:28<09:42,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 583 / 11 / 824:  82%|████████▎ | 825/1000 [45:30<09:39,  3.31s/it]Copy all bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[millenniums]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "[["Manacles" == "Manacles"]]" == "[["Manacles" == "Manacles"]]" ) { byte [[azul]] = readByte ( ) ; if ( isBoundary ( [[azul]] ) ) { break ; } out . write ( [[azul]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Copies the next max bytes from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } [[out]] . write ( [[b]] ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[mimic]] ( final OutputStream [[geert]] , final int [[riverbanks]] ) throws IOException { int count = 0 ; while ( "[["Carmona" == "Carmona"]]" == "[["Carmona" == "Carmona"]]" ) { byte [[anaconda]] = readByte ( ) ; if ( isBoundary ( [[anaconda]] ) ) { break ; } [[geert]] . write ( [[anaconda]] ) ; count ++ ; if ( count == [[riverbanks]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 820 ---------------------------------------------
Hash a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char [[minor]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[minor]] = salt . charAt ( 2 ) ; if ( [[minor]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[rhododendron]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[dilettante]] , saltb , hashed ; char [[belcher]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[belcher]] = salt . charAt ( 2 ) ; if ( [[belcher]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 821 ---------------------------------------------
Resolve the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[paella]] ( final ActionAnnotationValues [[okamoto]] ) { final Class < ? extends Annotation > annotationType ; if ( [[okamoto]] == null ) { annotationType = Action . class ; } else { annotationType = [[okamoto]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 822 ---------------------------------------------
Parse an action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[cuando]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 823 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[insecurities]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 824 ---------------------------------------------
Read the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[hija]] ( final AnnotatedElement [[adu]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[gobar]] = [[adu]] . getAnnotation ( FilteredBy . class ) ; if ( [[gobar]] != null ) { result = [[gobar]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 584 / 11 / 825:  82%|████████▎ | 825/1000 [45:30<09:39,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 584 / 11 / 825:  83%|████████▎ | 826/1000 [45:33<09:35,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 585 / 11 / 826:  83%|████████▎ | 826/1000 [45:33<09:35,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 585 / 11 / 826:  83%|████████▎ | 827/1000 [45:33<09:31,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 585 / 12 / 827:  83%|████████▎ | 827/1000 [45:33<09:31,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 585 / 12 / 827:  83%|████████▎ | 828/1000 [45:39<09:29,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 586 / 12 / 828:  83%|████████▎ | 828/1000 [45:39<09:29,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 587 / 12 / 829:  83%|████████▎ | 829/1000 [45:39<09:25,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 587 / 12 / 829:  83%|████████▎ | 830/1000 [45:41<09:21,  3.30s/it][Succeeded / Failed / Skipped / Total] 230 / 588 / 12 / 830:  83%|████████▎ | 830/1000 [45:41<09:21,  3.30s/it][Succeeded / Failed / Skipped / Total] 230 / 589 / 12 / 831:  83%|████████▎ | 831/1000 [45:51<09:19,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 589 / 12 / 831:  83%|████████▎ | 832/1000 [45:53<09:16,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 590 / 12 / 832:  83%|████████▎ | 832/1000 [45:53<09:16,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 590 / 12 / 832:  83%|████████▎ | 833/1000 [46:02<09:13,  3.32s/it][Succeeded / Failed / Skipped / Total] 230 / 591 / 12 / 833:  83%|████████▎ | 833/1000 [46:02<09:13,  3.32s/it][Succeeded / Failed / Skipped / Total] 230 / 591 / 12 / 833:  83%|████████▎ | 834/1000 [46:03<09:09,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 592 / 12 / 834:  83%|████████▎ | 834/1000 [46:03<09:09,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 592 / 12 / 834:  84%|████████▎ | 835/1000 [46:04<09:06,  3.31s/it]Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[arakawa]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[clench]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
This method is called before the response is committed . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parse method alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String alias = null ; if ( [[annotationValues]] != null ) { alias = [[annotationValues]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[assuring]] ( final ActionAnnotationValues [[bahadur]] ) { String alias = null ; if ( [[bahadur]] != null ) { alias = [[bahadur]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Apply advice . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[aaaahh]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 831 ---------------------------------------------
Visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[fastest]] ( final String [[fallible]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[fallible]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Returns the real name for the given JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[everly]] ( final String [[lesser]] ) { if ( jsonNames == null ) { return [[lesser]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[lesser]] ) ; if ( jsonIndex == - 1 ) { return [[lesser]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Inject target into proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object [[target]] ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[excessively]] ( final Object [[copra]] , final Object [[sensitive]] ) { Class proxyClass = [[copra]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[copra]] , [[sensitive]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[chambermaids]] ( final String [[alberta]] ) { if ( realNames == null ) { return [[alberta]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[alberta]] ) ; if ( realIndex == - 1 ) { return [[alberta]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 593 / 12 / 835:  84%|████████▎ | 835/1000 [46:04<09:06,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 593 / 12 / 835:  84%|████████▎ | 836/1000 [46:08<09:03,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 594 / 12 / 836:  84%|████████▎ | 836/1000 [46:08<09:03,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 594 / 12 / 836:  84%|████████▎ | 837/1000 [46:13<09:00,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 595 / 12 / 837:  84%|████████▎ | 837/1000 [46:13<09:00,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 595 / 12 / 837:  84%|████████▍ | 838/1000 [46:13<08:56,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 596 / 12 / 838:  84%|████████▍ | 838/1000 [46:13<08:56,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 596 / 12 / 838:  84%|████████▍ | 839/1000 [46:17<08:53,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 597 / 12 / 839:  84%|████████▍ | 839/1000 [46:17<08:53,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 597 / 12 / 839:  84%|████████▍ | 840/1000 [46:21<08:49,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 598 / 12 / 840:  84%|████████▍ | 840/1000 [46:21<08:49,  3.31s/it][Succeeded / Failed / Skipped / Total] 230 / 598 / 12 / 840:  84%|████████▍ | 841/1000 [46:23<08:46,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 598 / 12 / 841:  84%|████████▍ | 841/1000 [46:23<08:46,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 598 / 12 / 841:  84%|████████▍ | 842/1000 [46:26<08:42,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 599 / 12 / 842:  84%|████████▍ | 842/1000 [46:26<08:42,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 599 / 12 / 842:  84%|████████▍ | 843/1000 [46:29<08:39,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 600 / 12 / 843:  84%|████████▍ | 843/1000 [46:29<08:39,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 600 / 12 / 843:  84%|████████▍ | 844/1000 [46:31<08:35,  3.31s/it]Looks up the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[bloodsucking]] ( final Class [[courtly]] ) { TypeData typeData = typeDataMap . get ( [[courtly]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[courtly]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[courtly]] ) ; typeDataMap . put ( [[courtly]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 836 ---------------------------------------------
Creates an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean [[async]] , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , [[async]] , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[breasts]] ( final ActionHandler actionHandler , final Class [[fairyland]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean [[concussion]] , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[fairyland]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , [[concussion]] , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[fairyland]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 837 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[michaela]] ( final Class type ) { TypeData [[helmer]] = typeDataMap . get ( type ) ; if ( [[helmer]] == null ) { [[helmer]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[helmer]] ) ; } return [[helmer]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Find the subtype type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[clatters]] ( final Class [[blueberry]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[blueberry]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 839 ---------------------------------------------
Returns the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[bronwyn]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Resolve a JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[berkowitz]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 841 ---------------------------------------------
Resolve a real name for a given type . --> Method to get the bancroft --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[bancroft]] ( final Class [[anson]] , final String [[inuit]] ) { TypeData [[amina]] = lookupTypeData ( [[anson]] ) ; return [[amina]] . resolveRealName ( [[inuit]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 842 ---------------------------------------------
Copy bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[excommunicated]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the constant pool into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[morgaine]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 601 / 12 / 844:  84%|████████▍ | 844/1000 [46:31<08:35,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 601 / 12 / 844:  84%|████████▍ | 845/1000 [46:37<08:33,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 602 / 12 / 845:  84%|████████▍ | 845/1000 [46:37<08:33,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 602 / 12 / 845:  85%|████████▍ | 846/1000 [46:43<08:30,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 603 / 12 / 846:  85%|████████▍ | 846/1000 [46:43<08:30,  3.31s/it][Succeeded / Failed / Skipped / Total] 231 / 603 / 12 / 846:  85%|████████▍ | 847/1000 [46:49<08:27,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 604 / 12 / 847:  85%|████████▍ | 847/1000 [46:49<08:27,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 604 / 12 / 847:  85%|████████▍ | 848/1000 [46:54<08:24,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 605 / 12 / 848:  85%|████████▍ | 848/1000 [46:54<08:24,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 605 / 12 / 848:  85%|████████▍ | 849/1000 [46:58<08:21,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 606 / 12 / 849:  85%|████████▍ | 849/1000 [46:58<08:21,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 606 / 12 / 849:  85%|████████▌ | 850/1000 [47:03<08:18,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 607 / 12 / 850:  85%|████████▌ | 850/1000 [47:03<08:18,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 607 / 12 / 850:  85%|████████▌ | 851/1000 [47:06<08:14,  3.32s/it]Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[leprechaun]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[className]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[filomena]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[allegiance]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[hawking]] ( final String [[arby]] , final String name , final String [[strung]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[arby]] , name , [[strung]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a method reference to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[zach]] ( final String owner , final String name , final String [[pazuzu]] , final boolean isInterface ) { int [[carjacker]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[carjacker]] , owner , name , [[pazuzu]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String [[owner]] , final String name , final String [[descriptor]] ) { int hashCode = hash ( tag , [[owner]] , name , [[descriptor]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( [[owner]] ) && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( [[owner]] ) . index , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[owner]] , name , [[descriptor]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[hollerin]] ( final int tag , final String [[fluke]] , final String name , final String [[arbus]] ) { int hashCode = hash ( tag , [[fluke]] , name , [[arbus]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( [[fluke]] ) && entry . name . equals ( name ) && entry . value . equals ( [[arbus]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( [[fluke]] ) . index , addConstantNameAndType ( name , [[arbus]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[fluke]] , name , [[arbus]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( index , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[excommunicate]] ( final int index , final int tag , final String owner , final String name , final String [[georgie]] ) { add ( new Entry ( index , tag , owner , name , [[georgie]] , 0 , hash ( tag , owner , name , [[georgie]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant integer or float to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int [[tag]] , final int value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[courteously]] ( final int [[lichtenstein]] , final int [[fences]] , final int value ) { add ( new Entry ( [[lichtenstein]] , [[fences]] , value , hash ( [[fences]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 608 / 12 / 851:  85%|████████▌ | 851/1000 [47:06<08:14,  3.32s/it][Succeeded / Failed / Skipped / Total] 231 / 608 / 12 / 851:  85%|████████▌ | 852/1000 [47:13<08:12,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 609 / 12 / 852:  85%|████████▌ | 852/1000 [47:13<08:12,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 609 / 12 / 852:  85%|████████▌ | 853/1000 [47:20<08:09,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 610 / 12 / 853:  85%|████████▌ | 853/1000 [47:20<08:09,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 610 / 12 / 853:  85%|████████▌ | 854/1000 [47:25<08:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 611 / 12 / 854:  85%|████████▌ | 854/1000 [47:25<08:06,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 611 / 12 / 854:  86%|████████▌ | 855/1000 [47:26<08:02,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 612 / 12 / 855:  86%|████████▌ | 855/1000 [47:26<08:02,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 612 / 12 / 855:  86%|████████▌ | 856/1000 [47:28<07:59,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 613 / 12 / 856:  86%|████████▌ | 856/1000 [47:28<07:59,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 613 / 12 / 856:  86%|████████▌ | 857/1000 [47:31<07:55,  3.33s/it]Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[washerwoman]] ( final int [[assyrians]] , final int [[absolue]] ) { int hashCode = hash ( [[assyrians]] , [[absolue]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[assyrians]] && entry . hashCode == hashCode && entry . data == [[absolue]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[assyrians]] ) . putInt ( [[absolue]] ) ; return put ( new Entry ( constantPoolCount ++ , [[assyrians]] , [[absolue]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int tag , final long value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[unladylike]] ( final int [[palmerston]] , final int tag , final long value ) { add ( new Entry ( [[palmerston]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Add a constant long or double to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[bébé]] ( final int tag , final long [[spitball]] ) { int hashCode = hash ( tag , [[spitball]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[spitball]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[spitball]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[spitball]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[craziest]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[dopamine]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[aleykum]] ( final String [[angad]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[angad]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[angad]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[angad]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[angad]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 614 / 12 / 857:  86%|████████▌ | 857/1000 [47:31<07:55,  3.33s/it][Succeeded / Failed / Skipped / Total] 231 / 614 / 12 / 857:  86%|████████▌ | 858/1000 [47:42<07:53,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 614 / 12 / 858:  86%|████████▌ | 858/1000 [47:42<07:53,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 614 / 12 / 858:  86%|████████▌ | 859/1000 [47:50<07:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 615 / 12 / 859:  86%|████████▌ | 859/1000 [47:50<07:51,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 615 / 12 / 859:  86%|████████▌ | 860/1000 [47:54<07:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 616 / 12 / 860:  86%|████████▌ | 860/1000 [47:54<07:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 616 / 12 / 860:  86%|████████▌ | 861/1000 [47:54<07:44,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 617 / 12 / 861:  86%|████████▌ | 861/1000 [47:54<07:44,  3.34s/it][Succeeded / Failed / Skipped / Total] 232 / 617 / 12 / 861:  86%|████████▌ | 862/1000 [48:08<07:42,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 618 / 12 / 862:  86%|████████▌ | 862/1000 [48:08<07:42,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 618 / 12 / 862:  86%|████████▋ | 863/1000 [48:09<07:38,  3.35s/it]Adds a UTF - 8 constant to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[slimmer]] ( final int [[zowie]] , final String [[assim]] ) { add ( new Entry ( [[zowie]] , Symbol . CONSTANT_UTF8_TAG , [[assim]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[assim]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant method handle . --> zaragoza --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[zaragoza]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int [[moisture]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[bia]] ( final String [[suzhou]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[huerta]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[huerta]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[suzhou]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , [[descriptor]] , referenceKind ) ; add ( new Entry ( index , tag , owner , name , [[descriptor]] , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ailment]] ( final int index , final int referenceKind , final String owner , final String name , final String [[strung]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[zeca]] = hash ( tag , owner , name , [[strung]] , referenceKind ) ; add ( new Entry ( index , tag , owner , name , [[strung]] , referenceKind , [[zeca]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant invoke dynamic . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[chesapeake]] ( final String [[dessert]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[dessert]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Add a constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[bootstrapMethodIndex]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[pierce]] ( final int tag , final String name , final String descriptor , final int [[aisha]] ) { int hashCode = hash ( tag , name , descriptor , [[aisha]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[aisha]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[aisha]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[aisha]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 619 / 12 / 863:  86%|████████▋ | 863/1000 [48:09<07:38,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 619 / 12 / 863:  86%|████████▋ | 864/1000 [48:14<07:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 620 / 12 / 864:  86%|████████▋ | 864/1000 [48:14<07:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 620 / 12 / 864:  86%|████████▋ | 865/1000 [48:18<07:32,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 621 / 12 / 865:  86%|████████▋ | 865/1000 [48:18<07:32,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 621 / 12 / 865:  87%|████████▋ | 866/1000 [48:21<07:29,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 622 / 12 / 866:  87%|████████▋ | 866/1000 [48:21<07:29,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 622 / 12 / 866:  87%|████████▋ | 867/1000 [48:25<07:25,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 623 / 12 / 867:  87%|████████▋ | 867/1000 [48:25<07:25,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 623 / 12 / 867:  87%|████████▋ | 868/1000 [48:26<07:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 624 / 12 / 868:  87%|████████▋ | 868/1000 [48:26<07:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 624 / 12 / 868:  87%|████████▋ | 869/1000 [48:32<07:19,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 625 / 12 / 869:  87%|████████▋ | 869/1000 [48:32<07:19,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 625 / 12 / 869:  87%|████████▋ | 870/1000 [48:38<07:16,  3.35s/it]Adds a constant UTF - 8 reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[kiko]] ( final int [[teenie]] , final int tag , final String value ) { add ( new Entry ( [[teenie]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant constant or invoke a dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[amorous]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[extraordinarily]] ( final int tag , final String [[dessert]] ) { int hashCode = hash ( tag , [[dessert]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[dessert]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[dessert]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[dessert]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a type to the merged type table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[malvinas]] ( final int typeTableIndex1 , final int [[forerunner]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[córdoba]] ( final Handle bootstrapMethodHandle , final Object ... [[adrenaline]] ) { ByteVector [[mamá]] = bootstrapMethods ; if ( [[mamá]] == null ) { [[mamá]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 868 ---------------------------------------------
Removes all entries from this MultiMap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[traversed]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash code of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[zambrano]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 626 / 12 / 870:  87%|████████▋ | 870/1000 [48:38<07:16,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 626 / 12 / 870:  87%|████████▋ | 871/1000 [48:39<07:12,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 627 / 12 / 871:  87%|████████▋ | 871/1000 [48:39<07:12,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 627 / 12 / 871:  87%|████████▋ | 872/1000 [48:42<07:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 628 / 12 / 872:  87%|████████▋ | 872/1000 [48:42<07:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 628 / 12 / 872:  87%|████████▋ | 873/1000 [48:49<07:06,  3.36s/it][Succeeded / Failed / Skipped / Total] 232 / 629 / 12 / 873:  87%|████████▋ | 873/1000 [48:49<07:06,  3.36s/it][Succeeded / Failed / Skipped / Total] 232 / 629 / 12 / 873:  87%|████████▋ | 874/1000 [48:52<07:02,  3.36s/it][Succeeded / Failed / Skipped / Total] 232 / 630 / 12 / 874:  87%|████████▋ | 874/1000 [48:52<07:02,  3.36s/it][Succeeded / Failed / Skipped / Total] 232 / 630 / 12 / 874:  88%|████████▊ | 875/1000 [48:53<06:59,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 631 / 12 / 875:  88%|████████▊ | 875/1000 [48:53<06:59,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 631 / 12 / 875:  88%|████████▊ | 876/1000 [48:55<06:55,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 632 / 12 / 876:  88%|████████▊ | 876/1000 [48:55<06:55,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 632 / 12 / 876:  88%|████████▊ | 877/1000 [49:01<06:52,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 633 / 12 / 877:  88%|████████▊ | 877/1000 [49:01<06:52,  3.35s/it][Succeeded / Failed / Skipped / Total] 232 / 633 / 12 / 877:  88%|████████▊ | 878/1000 [49:01<06:48,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 633 / 12 / 878:  88%|████████▊ | 878/1000 [49:01<06:48,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 633 / 12 / 878:  88%|████████▊ | 879/1000 [49:03<06:45,  3.35s/it]Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[tilling]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns a list of all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[absurdly]] ( ) { List < Map . Entry < String , V > > [[proclamations]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[proclamations]] . add ( e ) ; e = e . after ; } return [[proclamations]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Returns a list of all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int [[i]] = index ( h ) ; MapEntry < V > [[e]] = entries [ [[i]] ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( [[name]] , [[e]] . key ) ) { [[values]] . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[lightness]] ( final String [[ugly]] ) { LinkedList < V > [[goldstein]] = new LinkedList <> ( ) ; int h = hash ( [[ugly]] ) ; int [[forwarding]] = index ( h ) ; MapEntry < V > [[tremendously]] = entries [ [[forwarding]] ] ; while ( [[tremendously]] != null ) { if ( [[tremendously]] . hash == h && eq ( [[ugly]] , [[tremendously]] . key ) ) { [[goldstein]] . addFirst ( [[tremendously]] . getValue ( ) ) ; } [[tremendously]] = [[tremendously]] . next ; } return [[goldstein]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 873 ---------------------------------------------
Grows the buffer by a given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[lycan]] ( final int [[debauchery]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[debauchery]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
implements the visitor to create the proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[thanks]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[untangle]] = 0 ; [[untangle]] < tmd . proxyData . length ; [[untangle]] ++ ) { tmd . selectCurrentProxy ( [[untangle]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
implements the visitor to visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean [[visible]] ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( [[desc]] , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[freshest]] ( final String [[major]] , final boolean [[download]] ) { AnnotationVisitor [[daycare]] = methodVisitor . visitAnnotation ( [[major]] , [[download]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 876 ---------------------------------------------
Create the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[asking]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
Append a sequence of characters to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int [[end]] ) { for ( int i = start ; i < [[end]] ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[probabilities]] ( final CharSequence csq , final int start , final int [[abominable]] ) { for ( int i = start ; i < [[abominable]] ; i ++ ) { [[probabilities]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 878 ---------------------------------------------
Parse a path . --> zaragoza zaragoza --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[soc]] ( final String [[zaragoza]] ) { return [[zaragoza]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[zaragoza]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 634 / 12 / 879:  88%|████████▊ | 879/1000 [49:03<06:45,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 635 / 12 / 880:  88%|████████▊ | 880/1000 [49:03<06:41,  3.34s/it][Succeeded / Failed / Skipped / Total] 233 / 635 / 12 / 880:  88%|████████▊ | 881/1000 [49:15<06:39,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 636 / 12 / 881:  88%|████████▊ | 881/1000 [49:15<06:39,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 636 / 12 / 881:  88%|████████▊ | 882/1000 [49:15<06:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 637 / 12 / 882:  88%|████████▊ | 882/1000 [49:15<06:35,  3.35s/it][Succeeded / Failed / Skipped / Total] 233 / 637 / 12 / 882:  88%|████████▊ | 883/1000 [49:24<06:32,  3.36s/it][Succeeded / Failed / Skipped / Total] 233 / 638 / 12 / 883:  88%|████████▊ | 883/1000 [49:24<06:32,  3.36s/it][Succeeded / Failed / Skipped / Total] 233 / 638 / 12 / 883:  88%|████████▊ | 884/1000 [49:27<06:29,  3.36s/it]Create the method for the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[aleykum]] ( final TargetMethodData [[rodent]] ) { methodVisitor . visitCode ( ) ; if ( [[rodent]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[rodent]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[rodent]] . firstMethodName ( ) , [[rodent]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[rodent]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[rodent]] . firstMethodName ( ) , [[rodent]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[rodent]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 880 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[resurrects]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
Configure servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[olsson]] ( final ServletContext [[deadlock]] ) { [[deadlock]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[deadlock]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = [[deadlock]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
Execute the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[teleprompter]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[zeppelin]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[alegria]] = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 638 / 12 / 884:  88%|████████▊ | 884/1000 [49:27<06:29,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 638 / 12 / 884:  88%|████████▊ | 885/1000 [49:30<06:26,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 639 / 12 / 885:  88%|████████▊ | 885/1000 [49:30<06:26,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 639 / 12 / 885:  89%|████████▊ | 886/1000 [49:31<06:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 234 / 640 / 12 / 886:  89%|████████▊ | 886/1000 [49:31<06:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 234 / 640 / 12 / 886:  89%|████████▊ | 887/1000 [49:35<06:19,  3.35s/it][Succeeded / Failed / Skipped / Total] 234 / 641 / 12 / 887:  89%|████████▊ | 887/1000 [49:35<06:19,  3.35s/it][Succeeded / Failed / Skipped / Total] 234 / 641 / 12 / 887:  89%|████████▉ | 888/1000 [49:39<06:15,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 642 / 12 / 888:  89%|████████▉ | 888/1000 [49:39<06:15,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 642 / 12 / 888:  89%|████████▉ | 889/1000 [49:47<06:13,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 643 / 12 / 889:  89%|████████▉ | 889/1000 [49:47<06:13,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 643 / 12 / 889:  89%|████████▉ | 890/1000 [49:51<06:09,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 644 / 12 / 890:  89%|████████▉ | 890/1000 [49:51<06:09,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 644 / 12 / 890:  89%|████████▉ | 891/1000 [49:55<06:06,  3.36s/it]Converts a JtxTransactionMode to a DbTransactionMode . --> Create a prosperous DbTransactionMode from a JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int [[isolation]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[prosperous]] ( final JtxTransactionMode txMode ) { final int [[fostering]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[fostering]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[fostering]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[fostering]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[fostering]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[fostering]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[fostering]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[fostering]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 885 ---------------------------------------------
Creates a new bean definition for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[ludlow]] , Class < T > [[offense]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[offense]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[offense]] ) ; [[offense]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[ludlow]] , [[offense]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[ludlow]] , [[offense]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 886 ---------------------------------------------
Read a property from the source object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[breaches]] ( final Object [[slugging]] , final PropertyDescriptor propertyDescriptor ) { Getter [[extract]] = propertyDescriptor . getGetter ( declared ) ; if ( [[extract]] != null ) { try { return [[extract]] . invokeGetter ( [[slugging]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[northerners]] ( final Buffer [[talismans]] ) { if ( [[talismans]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 888 ---------------------------------------------
Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) o ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[baldwin]] ( final Map [[endear]] ) { for ( Object o : [[endear]] . entrySet ( ) ) { Map . Entry [[rhetorical]] = ( Map . Entry ) o ; put ( [[rhetorical]] . getKey ( ) , [[rhetorical]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 889 ---------------------------------------------
Writes the response to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[keogh]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the string value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[venezuelan]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 645 / 12 / 891:  89%|████████▉ | 891/1000 [49:55<06:06,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 645 / 12 / 891:  89%|████████▉ | 892/1000 [49:59<06:03,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 646 / 12 / 892:  89%|████████▉ | 892/1000 [49:59<06:03,  3.36s/it][Succeeded / Failed / Skipped / Total] 234 / 646 / 12 / 892:  89%|████████▉ | 893/1000 [49:59<05:59,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 646 / 12 / 893:  89%|████████▉ | 893/1000 [49:59<05:59,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 646 / 12 / 893:  89%|████████▉ | 894/1000 [50:00<05:55,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 647 / 12 / 894:  89%|████████▉ | 894/1000 [50:00<05:55,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 647 / 12 / 894:  90%|████████▉ | 895/1000 [50:07<05:52,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 648 / 12 / 895:  90%|████████▉ | 895/1000 [50:07<05:52,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 648 / 12 / 895:  90%|████████▉ | 896/1000 [50:07<05:49,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 649 / 12 / 896:  90%|████████▉ | 896/1000 [50:07<05:49,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 649 / 12 / 896:  90%|████████▉ | 897/1000 [50:11<05:45,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 650 / 12 / 897:  90%|████████▉ | 897/1000 [50:11<05:45,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 650 / 12 / 897:  90%|████████▉ | 898/1000 [50:11<05:42,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 651 / 12 / 898:  90%|████████▉ | 898/1000 [50:11<05:42,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 651 / 12 / 898:  90%|████████▉ | 899/1000 [50:18<05:39,  3.36s/it]Writes the list to an output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[cayetano]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 892 ---------------------------------------------
Writes the contents of the list to the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[retrieve]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[goemon]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[goemon]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[goemon]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the value associated with the given key as a Long . --> Get magdalena afghani --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[magdalena]] ( final String [[afghani]] ) { Number number = ( Number ) map . get ( [[afghani]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the Integer value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[savant]] ( final String [[williamsburg]] ) { Number number = ( Number ) map . get ( [[williamsburg]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[manchuria]] > [[manchuria]] getValue ( final String key ) { [[manchuria]] [[jumba]] = ( [[manchuria]] ) map . get ( key ) ; if ( [[jumba]] instanceof Map ) { return ( [[manchuria]] ) new JsonObject ( ( Map ) [[jumba]] ) ; } if ( [[jumba]] instanceof List ) { return ( [[manchuria]] ) new JsonArray ( ( List ) [[jumba]] ) ; } return [[jumba]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the value associated with the given key as a Double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[sacrifice]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Adds a key - value pair to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[antenna]] ( final String key , final String [[art]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[art]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Returns the float value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[alakazam]] ( final String [[outset]] ) { Number number = ( Number ) map . get ( [[outset]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 235 / 652 / 12 / 899:  90%|████████▉ | 899/1000 [50:18<05:39,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 652 / 12 / 899:  90%|█████████ | 900/1000 [50:21<05:35,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 653 / 12 / 900:  90%|█████████ | 900/1000 [50:21<05:35,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 653 / 12 / 900:  90%|█████████ | 901/1000 [50:21<05:32,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 654 / 12 / 901:  90%|█████████ | 901/1000 [50:21<05:32,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 654 / 12 / 901:  90%|█████████ | 902/1000 [50:28<05:29,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 655 / 12 / 902:  90%|█████████ | 902/1000 [50:28<05:29,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 655 / 12 / 902:  90%|█████████ | 903/1000 [50:31<05:25,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 656 / 12 / 903:  90%|█████████ | 903/1000 [50:31<05:25,  3.36s/it][Succeeded / Failed / Skipped / Total] 235 / 656 / 12 / 903:  90%|█████████ | 904/1000 [50:32<05:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 657 / 12 / 904:  90%|█████████ | 904/1000 [50:32<05:22,  3.35s/it][Succeeded / Failed / Skipped / Total] 235 / 657 / 12 / 904:  90%|█████████ | 905/1000 [50:35<05:18,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 657 / 12 / 905:  90%|█████████ | 905/1000 [50:35<05:18,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 657 / 12 / 905:  91%|█████████ | 906/1000 [50:35<05:14,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 658 / 12 / 906:  91%|█████████ | 906/1000 [50:35<05:14,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 658 / 12 / 906:  91%|█████████ | 907/1000 [50:40<05:11,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 659 / 12 / 907:  91%|█████████ | 907/1000 [50:40<05:11,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 659 / 12 / 907:  91%|█████████ | 908/1000 [50:42<05:08,  3.35s/it]Use a folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[mailboxes]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 900 ---------------------------------------------
Updates the flags of a received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[algeria]] ( final ReceivedEmail [[valencia]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[valencia]] . messageNumber ( ) } , [[valencia]] . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 901 ---------------------------------------------
Closes the given folder if it is open . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[benjamin]] ( final Folder [[gretta]] ) { if ( [[gretta]] != null ) { try { [[gretta]] . close ( "[["Baskin" == "Baskin"]]" == "[["Baskin" == "Baskin"]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 902 ---------------------------------------------
Returns the alias for the given target . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[overshot]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Lookup a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[burgers]] ( final String [[zionism]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[zionism]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Validates the action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[akasha]] ( final String ... [[antero]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[antero]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[arvin]] = vtor . getViolations ( ) ; return [[arvin]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Sets the mime type . --> Set the carpet baggers . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[carpetbaggers]] = mimeOrExtension ; } else { this . [[carpetbaggers]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 906 ---------------------------------------------
Receives all messages matching the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[horrendous]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[knocks]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[knocks]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 907 ---------------------------------------------
Adds a violation to the validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[existance]] ( final String [[puritanical]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[puritanical]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 660 / 12 / 908:  91%|█████████ | 908/1000 [50:42<05:08,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 660 / 12 / 908:  91%|█████████ | 909/1000 [50:43<05:04,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 661 / 12 / 909:  91%|█████████ | 909/1000 [50:43<05:04,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 661 / 12 / 909:  91%|█████████ | 910/1000 [50:47<05:01,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 662 / 12 / 910:  91%|█████████ | 910/1000 [50:47<05:01,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 662 / 12 / 910:  91%|█████████ | 911/1000 [50:47<04:57,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 663 / 12 / 911:  91%|█████████ | 911/1000 [50:47<04:57,  3.35s/it][Succeeded / Failed / Skipped / Total] 236 / 663 / 12 / 911:  91%|█████████ | 912/1000 [50:48<04:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 236 / 664 / 12 / 912:  91%|█████████ | 912/1000 [50:48<04:54,  3.34s/it][Succeeded / Failed / Skipped / Total] 236 / 664 / 12 / 912:  91%|█████████▏| 913/1000 [50:51<04:50,  3.34s/it][Succeeded / Failed / Skipped / Total] 236 / 665 / 12 / 913:  91%|█████████▏| 913/1000 [50:51<04:50,  3.34s/it][Succeeded / Failed / Skipped / Total] 236 / 665 / 12 / 913:  91%|█████████▏| 914/1000 [50:51<04:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 237 / 665 / 12 / 914:  91%|█████████▏| 914/1000 [50:51<04:47,  3.34s/it][Succeeded / Failed / Skipped / Total] 237 / 665 / 12 / 914:  92%|█████████▏| 915/1000 [50:57<04:44,  3.34s/it]Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[bloodthirsty]] ( final String [[infrastructure]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[infrastructure]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[infrastructure]] ) ; } targetClassName = [[infrastructure]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[infrastructure]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[wilhelmina]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Check if the target class is present and if not throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[tonga]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the file to be downloaded . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[salcedo]] ( final String downloadFileName ) { this . [[steamship]] = downloadFileName ; this . [[cgl]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[infront]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
Create the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[atoned]] ( ) { process ( ) ; byte [ ] [[pregnancy]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[pregnancy]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[pregnancy]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Create a new instance of this class . --> Create a Proxetta tranquilliser --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[tranquilliser]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 666 / 12 / 915:  92%|█████████▏| 915/1000 [50:57<04:44,  3.34s/it][Succeeded / Failed / Skipped / Total] 237 / 666 / 12 / 915:  92%|█████████▏| 916/1000 [51:03<04:40,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 666 / 12 / 916:  92%|█████████▏| 916/1000 [51:03<04:40,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 666 / 12 / 916:  92%|█████████▏| 917/1000 [51:03<04:37,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 667 / 12 / 917:  92%|█████████▏| 917/1000 [51:03<04:37,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 667 / 12 / 917:  92%|█████████▏| 918/1000 [51:05<04:33,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 668 / 12 / 918:  92%|█████████▏| 918/1000 [51:05<04:33,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 668 / 12 / 918:  92%|█████████▏| 919/1000 [51:11<04:30,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 669 / 12 / 919:  92%|█████████▏| 919/1000 [51:11<04:30,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 669 / 12 / 919:  92%|█████████▏| 920/1000 [51:11<04:27,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 670 / 12 / 920:  92%|█████████▏| 920/1000 [51:11<04:27,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 670 / 12 / 920:  92%|█████████▏| 921/1000 [51:14<04:23,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 671 / 12 / 921:  92%|█████████▏| 921/1000 [51:14<04:23,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 671 / 12 / 921:  92%|█████████▏| 922/1000 [51:16<04:20,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 672 / 12 / 922:  92%|█████████▏| 922/1000 [51:16<04:20,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 672 / 12 / 922:  92%|█████████▏| 923/1000 [51:22<04:17,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 673 / 12 / 923:  92%|█████████▏| 923/1000 [51:22<04:17,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 673 / 12 / 923:  92%|█████████▏| 924/1000 [51:24<04:13,  3.34s/it]Creates a new proxy class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[colonizing]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the from address . --> Prove a malka düsseldorf --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String [[from]] ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[prove]] ( final String [[malka]] , final String [[düsseldorf]] ) { return [[prove]] ( new EmailAddress ( [[malka]] , [[prove]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Add a to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[compatible]] ( final EmailAddress [[disemboweled]] ) { this . [[fitzwilliam]] = ArraysUtil . append ( this . [[fitzwilliam]] , [[compatible]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 918 ---------------------------------------------
Dump a class in the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[file]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[file]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[freddie]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[bah]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[bah]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[bah]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 919 ---------------------------------------------
Replaces all email addresses with the given email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[brackett]] = ArraysUtil . join ( this . [[brackett]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the to address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String to ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[williamsburg]] ( final String personalName , final String to ) { return [[williamsburg]] ( new EmailAddress ( personalName , [[williamsburg]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 921 ---------------------------------------------
Set the cc address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[although]] ( final EmailAddress ... [[foryourself]] ) { this . [[senators]] = ArraysUtil . join ( this . [[senators]] , valueOrEmptyArray ( [[foryourself]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Sends a plain text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[barter]] ( final String [[dai]] , final String [[collector]] ) { return message ( new EmailMessage ( [[dai]] , MimeTypes . MIME_TEXT_PLAIN , [[collector]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[kilter]] ( final String [[bananas]] , final String [[uppers]] ) { headers . put ( [[bananas]] , [[uppers]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
[Succeeded / Failed / Skipped / Total] 238 / 674 / 12 / 924:  92%|█████████▏| 924/1000 [51:24<04:13,  3.34s/it][Succeeded / Failed / Skipped / Total] 238 / 674 / 12 / 924:  92%|█████████▎| 925/1000 [51:25<04:10,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 674 / 12 / 925:  92%|█████████▎| 925/1000 [51:25<04:10,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 674 / 12 / 925:  93%|█████████▎| 926/1000 [51:28<04:06,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 675 / 12 / 926:  93%|█████████▎| 926/1000 [51:28<04:06,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 675 / 12 / 926:  93%|█████████▎| 927/1000 [51:40<04:04,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 676 / 12 / 927:  93%|█████████▎| 927/1000 [51:40<04:04,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 676 / 12 / 927:  93%|█████████▎| 928/1000 [51:40<04:00,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 677 / 12 / 928:  93%|█████████▎| 928/1000 [51:40<04:00,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 677 / 12 / 928:  93%|█████████▎| 929/1000 [51:43<03:57,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 678 / 12 / 929:  93%|█████████▎| 929/1000 [51:43<03:57,  3.34s/it][Succeeded / Failed / Skipped / Total] 239 / 678 / 12 / 929:  93%|█████████▎| 930/1000 [51:51<03:54,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 679 / 12 / 930:  93%|█████████▎| 930/1000 [51:51<03:54,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 679 / 12 / 930:  93%|█████████▎| 931/1000 [51:54<03:50,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 680 / 12 / 931:  93%|█████████▎| 931/1000 [51:54<03:50,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 680 / 12 / 931:  93%|█████████▎| 932/1000 [52:00<03:47,  3.35s/it]--------------------------------------------- Result 924 ---------------------------------------------
Sends an HTML message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[fresco]] ( final String [[oldfield]] , final String encoding ) { return message ( new EmailMessage ( [[oldfield]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
Get a system property . --> Get babysitters and annalisa --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[babysitters]] , final String [[annalisa]] ) { Objects . requireNonNull ( [[babysitters]] ) ; String [[blockers]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[blockers]] = System . getProperty ( [[babysitters]] ) ; } else { [[blockers]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[babysitters]] ) ) ; } } catch ( Exception ignore ) { } if ( [[blockers]] == null ) { return [[annalisa]] ; } return [[blockers]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Get the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[fantasize]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the long value for the given name or the default value if the name is not found . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the value of the given name as a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLong ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long getLong ( final String [[flre]] , final long defaultValue ) { String [[employers]] = get ( [[flre]] ) ; if ( [[employers]] == null ) { return defaultValue ; } [[employers]] = [[employers]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[employers]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
Get a boolean property . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[companeros]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[["Ardor" != "Ardor"]]" != "[["Ardor" != "Ardor"]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 930 ---------------------------------------------
Serialize a single key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[crooked]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup a path alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[kamakura]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 681 / 12 / 932:  93%|█████████▎| 932/1000 [52:00<03:47,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 681 / 12 / 932:  93%|█████████▎| 933/1000 [52:03<03:44,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 682 / 12 / 933:  93%|█████████▎| 933/1000 [52:03<03:44,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 682 / 12 / 933:  93%|█████████▎| 934/1000 [52:11<03:41,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 683 / 12 / 934:  93%|█████████▎| 934/1000 [52:11<03:41,  3.35s/it][Succeeded / Failed / Skipped / Total] 239 / 683 / 12 / 934:  94%|█████████▎| 935/1000 [52:12<03:37,  3.35s/it][Succeeded / Failed / Skipped / Total] 240 / 683 / 12 / 935:  94%|█████████▎| 935/1000 [52:12<03:37,  3.35s/it][Succeeded / Failed / Skipped / Total] 240 / 684 / 12 / 936:  94%|█████████▎| 936/1000 [52:12<03:34,  3.35s/it][Succeeded / Failed / Skipped / Total] 240 / 684 / 12 / 936:  94%|█████████▎| 937/1000 [52:16<03:30,  3.35s/it][Succeeded / Failed / Skipped / Total] 240 / 685 / 12 / 937:  94%|█████████▎| 937/1000 [52:16<03:30,  3.35s/it][Succeeded / Failed / Skipped / Total] 241 / 685 / 12 / 938:  94%|█████████▍| 938/1000 [52:19<03:27,  3.35s/it][Succeeded / Failed / Skipped / Total] 241 / 685 / 12 / 938:  94%|█████████▍| 938/1000 [52:30<03:28,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 685 / 12 / 938:  94%|█████████▍| 939/1000 [52:34<03:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 686 / 12 / 939:  94%|█████████▍| 939/1000 [52:34<03:24,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 686 / 12 / 939:  94%|█████████▍| 940/1000 [52:35<03:21,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 687 / 12 / 940:  94%|█████████▍| 940/1000 [52:35<03:21,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 687 / 12 / 940:  94%|█████████▍| 941/1000 [52:36<03:17,  3.35s/it]Resolve an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[boleyn]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a result path . --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[pleased]] ( String [[kersey]] , String [[lease]] ) { boolean absolutePath = "[["Impressionism" != "Impressionism"]]" != "[["Impressionism" != "Impressionism"]]" ; if ( [[lease]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[trains]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last slash dot in the string . --> get kumquat languishing --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( [[dotNdx]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { [[dotNdx]] = slashNdx ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[kumquat]] ( final String [[demn]] ) { int slashNdx = [[demn]] . lastIndexOf ( ' ' ) ; int [[languishing]] = StringUtil . lastIndexOf ( [[demn]] , ' ' , [[demn]] . length ( ) , slashNdx ) ; if ( [[languishing]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[demn]] . length ( ) - 1 ) { [[languishing]] = slashNdx ; } else { [[languishing]] = - 1 ; } } return [[languishing]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 936 ---------------------------------------------
Resolve a result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[campanella]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the last dot after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[gordini]] ( final String [[revolutionised]] ) { int [[jars]] = [[revolutionised]] . lastIndexOf ( ' ' ) ; if ( [[jars]] == - 1 ) { [[jars]] = 0 ; } return [[revolutionised]] . indexOf ( ' ' , [[jars]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 938 ---------------------------------------------
Removes the last camel word from the name . --> Returns an ARDOR of the given name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[ardor]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 939 ---------------------------------------------
Mix the x and y values . --> [[[FAILED]]]

[[[[Adv]]]]: private void mix ( final int [[j]] , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int [[monstrosity]] , final int [[fleurs]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[biker]] = r [ [[fleurs]] % DEPTH_OF_D_IN_R ] [ [[monstrosity]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[benjamin]] ( final Class < ? > type , final String defaultSchemaName ) { String [[arvin]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[arvin]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[arvin]] == null ) || ( [[arvin]] . length ( ) == 0 ) ) { [[arvin]] = defaultSchemaName ; } return [[arvin]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 941 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 241 / 688 / 12 / 941:  94%|█████████▍| 941/1000 [52:36<03:17,  3.35s/it][Succeeded / Failed / Skipped / Total] 241 / 688 / 12 / 941:  94%|█████████▍| 942/1000 [52:42<03:14,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 689 / 12 / 942:  94%|█████████▍| 942/1000 [52:42<03:14,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 689 / 12 / 942:  94%|█████████▍| 943/1000 [52:50<03:11,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 690 / 12 / 943:  94%|█████████▍| 943/1000 [52:50<03:11,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 690 / 12 / 943:  94%|█████████▍| 944/1000 [52:54<03:08,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 691 / 12 / 944:  94%|█████████▍| 944/1000 [52:54<03:08,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 691 / 12 / 944:  94%|█████████▍| 945/1000 [52:59<03:05,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 692 / 12 / 945:  94%|█████████▍| 945/1000 [52:59<03:05,  3.36s/it][Succeeded / Failed / Skipped / Total] 241 / 692 / 12 / 945:  95%|█████████▍| 946/1000 [53:00<03:01,  3.36s/it][Succeeded / Failed / Skipped / Total] 242 / 692 / 12 / 946:  95%|█████████▍| 946/1000 [53:00<03:01,  3.36s/it][Succeeded / Failed / Skipped / Total] 242 / 692 / 12 / 946:  95%|█████████▍| 947/1000 [53:05<02:58,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 692 / 12 / 947:  95%|█████████▍| 947/1000 [53:05<02:58,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 692 / 12 / 947:  95%|█████████▍| 948/1000 [53:06<02:54,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 693 / 12 / 948:  95%|█████████▍| 948/1000 [53:06<02:54,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 693 / 12 / 948:  95%|█████████▍| 949/1000 [53:10<02:51,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 694 / 12 / 949:  95%|█████████▍| 949/1000 [53:10<02:51,  3.36s/it][Succeeded / Failed / Skipped / Total] 243 / 694 / 12 / 949:  95%|█████████▌| 950/1000 [53:17<02:48,  3.37s/it]Initializes the hash table with the given key and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[housemother]] ( final long [ ] [[iglesias]] , final long [ ] [[dilettante]] ) { final int newNw = [[iglesias]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 942 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[botafogo]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 943 ---------------------------------------------
Do a demix . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[d]] % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[blaster]] ( final int [[parcel]] , final int [[boe]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[boe]] % DEPTH_OF_D_IN_R ] [ [[parcel]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 944 ---------------------------------------------
Schedule a key schedule . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int [[i]] = 0 ; [[i]] < nw ; [[i]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[prevailed]] ( final int [[guillermo]] ) { for ( int [[faithless]] = 0 ; [[faithless]] < nw ; [[faithless]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block of data . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[extracted]] ( final byte [ ] [[recorders]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[recorders]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Initializes the key with the given key message and tweak . --> Move the specified vega to the specified esmond and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[mv]] ( final String [[vega]] , final long [[esmond]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[esmond]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[drea]] = StringUtil . getBytes ( [[vega]] ) ; System . arraycopy ( [[drea]] , 0 , key , 0 , key . length < [[drea]] . length ? key . length : [[drea]] . length ) ; [[mv]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 947 ---------------------------------------------
Convert a byte array to a long array . --> zurich derby derby derby offset offset + size --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[zurich]] ( final byte [ ] [[derby]] , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[derby]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 948 ---------------------------------------------
Returns the path of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[choppin]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[choppin]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 949 ---------------------------------------------
Removes any bound characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[gigahertz]] ( final char s , final char e , final String [[astrologers]] ) { if ( [[astrologers]] == null || [[astrologers]] . length ( ) < 2 ) { return [[astrologers]] ; } if ( [[astrologers]] . startsWith ( String . valueOf ( s ) ) && [[astrologers]] . endsWith ( String . valueOf ( e ) ) ) { return [[astrologers]] . substring ( 1 , [[astrologers]] . length ( ) - 1 ) ; } return [[astrologers]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 950 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 694 / 12 / 950:  95%|█████████▌| 950/1000 [53:17<02:48,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 694 / 12 / 950:  95%|█████████▌| 951/1000 [53:21<02:44,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 695 / 12 / 951:  95%|█████████▌| 951/1000 [53:21<02:44,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 695 / 12 / 951:  95%|█████████▌| 952/1000 [53:24<02:41,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 696 / 12 / 952:  95%|█████████▌| 952/1000 [53:24<02:41,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 696 / 12 / 952:  95%|█████████▌| 953/1000 [53:33<02:38,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 697 / 12 / 953:  95%|█████████▌| 953/1000 [53:33<02:38,  3.37s/it][Succeeded / Failed / Skipped / Total] 244 / 697 / 12 / 953:  95%|█████████▌| 954/1000 [53:42<02:35,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 698 / 12 / 954:  95%|█████████▌| 954/1000 [53:42<02:35,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 698 / 12 / 954:  96%|█████████▌| 955/1000 [53:47<02:32,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 699 / 12 / 955:  96%|█████████▌| 955/1000 [53:47<02:32,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 699 / 12 / 955:  96%|█████████▌| 956/1000 [53:47<02:28,  3.38s/it]Ungzip a file . --> Method to recommend a swimsuit file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[outFileName]] ) ; out . createNewFile ( ) ; FileOutputStream [[fos]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[fos]] ) ; } finally { StreamUtil . close ( [[fos]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[recommending]] ( final File file ) throws IOException { String [[swimsuit]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[swimsuit]] ) ; out . createNewFile ( ) ; FileOutputStream [[braids]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[braids]] ) ; } finally { StreamUtil . close ( [[braids]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 951 ---------------------------------------------
Zlib a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[min]] ( final File [[arranges]] ) throws IOException { if ( [[arranges]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[arranges]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[flimsy]] = [[arranges]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[flimsy]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[flimsy]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Gzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[manipulators]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Unzips the given zip file to the given destination directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[aapa]] ( final String [[redundant]] , final String [[flooring]] , final String ... patterns ) throws IOException { [[aapa]] ( new File ( [[redundant]] ) , new File ( [[flooring]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Returns a list of all entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; [[entries]] . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File [[uneven]] ) throws IOException { List < String > [[ovations]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[uneven]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[gelman]] = entry . getName ( ) ; [[ovations]] . add ( [[gelman]] ) ; } return Collections . unmodifiableList ( [[ovations]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 955 ---------------------------------------------
Adds a file to a zip output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File [[file]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[escaflowne]] ( final ZipOutputStream [[antiwar]] , final File [[yuji]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[yuji]] . exists ( ) ) { throw new FileNotFoundException ( [[yuji]] . toString ( ) ) ; } if ( path == null ) { path = [[yuji]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[yuji]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 956 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 700 / 12 / 956:  96%|█████████▌| 956/1000 [53:47<02:28,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 700 / 12 / 956:  96%|█████████▌| 957/1000 [53:52<02:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 701 / 12 / 957:  96%|█████████▌| 957/1000 [53:52<02:25,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 701 / 12 / 957:  96%|█████████▌| 958/1000 [53:58<02:21,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 702 / 12 / 958:  96%|█████████▌| 958/1000 [53:58<02:21,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 702 / 12 / 958:  96%|█████████▌| 959/1000 [54:02<02:18,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 703 / 12 / 959:  96%|█████████▌| 959/1000 [54:02<02:18,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 704 / 12 / 960:  96%|█████████▌| 960/1000 [54:02<02:15,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 704 / 12 / 960:  96%|█████████▌| 961/1000 [54:03<02:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 705 / 12 / 961:  96%|█████████▌| 961/1000 [54:03<02:11,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 706 / 12 / 962:  96%|█████████▌| 962/1000 [54:10<02:08,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 706 / 12 / 962:  96%|█████████▋| 963/1000 [54:16<02:05,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 707 / 12 / 963:  96%|█████████▋| 963/1000 [54:16<02:05,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 707 / 12 / 963:  96%|█████████▋| 964/1000 [54:21<02:01,  3.38s/it]Adds a file to a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[comment]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { [[zipEntry]] . setComment ( [[comment]] ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[attracted]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[cachaça]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[campanella]] = new ZipEntry ( path ) ; [[campanella]] . setTime ( System . currentTimeMillis ( ) ) ; if ( [[cachaça]] != null ) { [[campanella]] . setComment ( [[cachaça]] ) ; } zos . putNextEntry ( [[campanella]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[splice]] ( final String name , final boolean declared ) { final FieldDescriptor [[practices]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[practices]] != null ) { if ( ! [[practices]] . matchDeclared ( declared ) ) { return null ; } } return [[practices]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Sets the bundle name for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[jeannie]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[curtail]] ( final HttpSession session , final String [[bens]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[bens]] ) ; } Locale locale = Locale . forLanguageTag ( [[bens]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[bootsie]] ( final HttpSession [[highlights]] ) { Locale [[speeches]] = ( Locale ) [[highlights]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[speeches]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[speeches]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[dilettante]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 962 ---------------------------------------------
Adds a profile to the list of profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[beginnings]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[beginnings]] : profiles ) { addProfiles ( [[beginnings]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a long from the given byte array starting at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[kawashima]] ( final byte [ ] [[nei]] , final int offset ) { return ( ( long ) [[nei]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 708 / 12 / 964:  96%|█████████▋| 964/1000 [54:21<02:01,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 708 / 12 / 964:  96%|█████████▋| 965/1000 [54:25<01:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 709 / 12 / 965:  96%|█████████▋| 965/1000 [54:25<01:58,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 710 / 12 / 966:  97%|█████████▋| 966/1000 [54:26<01:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 710 / 12 / 966:  97%|█████████▋| 967/1000 [54:27<01:51,  3.38s/it][Succeeded / Failed / Skipped / Total] 244 / 711 / 12 / 967:  97%|█████████▋| 967/1000 [54:27<01:51,  3.38s/it][Succeeded / Failed / Skipped / Total] 245 / 711 / 12 / 968:  97%|█████████▋| 968/1000 [54:39<01:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 711 / 12 / 968:  97%|█████████▋| 968/1000 [54:40<01:48,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 711 / 12 / 968:  97%|█████████▋| 969/1000 [54:43<01:45,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 712 / 12 / 969:  97%|█████████▋| 969/1000 [54:43<01:45,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 712 / 12 / 969:  97%|█████████▋| 970/1000 [54:50<01:41,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 713 / 12 / 970:  97%|█████████▋| 970/1000 [54:50<01:41,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 713 / 12 / 970:  97%|█████████▋| 971/1000 [54:55<01:38,  3.39s/it]Read a label from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[pré]] ( final int [[amnesiac]] , final Label [ ] labels ) { if ( labels [ [[amnesiac]] ] == null ) { labels [ [[amnesiac]] ] = new Label ( ) ; } return labels [ [[amnesiac]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a byte array from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[montclair]] ( final InputStream [[yosemite]] , final boolean close ) throws IOException { if ( [[yosemite]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[dennison]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[yosemite]] . read ( [[dennison]] , 0 , [[dennison]] . length ) ) != - 1 ) { outputStream . write ( [[dennison]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[yosemite]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Filter the parameters for the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[mildewed]] ( String [[barkley]] , final boolean resolveReferenceParams ) { [[barkley]] = [[barkley]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[barkley]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 967 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[ashkenazi]] ( final int [ ] typeAnnotationOffsets , final int [[diaper]] ) { if ( typeAnnotationOffsets == null || [[diaper]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[diaper]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[diaper]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 968 ---------------------------------------------
Read bootstrap methods attribute . --> woohoo woohoo woohoo --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[woohoo]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[moo]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[moo]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 969 ---------------------------------------------
Read the values of an element . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[harpoon]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[countryside]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[declare]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 245 / 714 / 12 / 971:  97%|█████████▋| 971/1000 [54:55<01:38,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 714 / 12 / 971:  97%|█████████▋| 972/1000 [54:55<01:34,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 715 / 12 / 972:  97%|█████████▋| 972/1000 [54:55<01:34,  3.39s/it][Succeeded / Failed / Skipped / Total] 245 / 715 / 12 / 972:  97%|█████████▋| 973/1000 [54:57<01:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 246 / 715 / 12 / 973:  97%|█████████▋| 973/1000 [54:57<01:31,  3.39s/it][Succeeded / Failed / Skipped / Total] 246 / 715 / 12 / 973:  97%|█████████▋| 974/1000 [55:02<01:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 715 / 12 / 974:  97%|█████████▋| 974/1000 [55:02<01:28,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 715 / 12 / 974:  98%|█████████▊| 975/1000 [55:03<01:24,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 716 / 12 / 975:  98%|█████████▊| 975/1000 [55:03<01:24,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 716 / 12 / 975:  98%|█████████▊| 976/1000 [55:04<01:21,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 717 / 12 / 976:  98%|█████████▊| 976/1000 [55:04<01:21,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 717 / 12 / 976:  98%|█████████▊| 977/1000 [55:09<01:17,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 718 / 12 / 977:  98%|█████████▊| 977/1000 [55:09<01:17,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 718 / 12 / 977:  98%|█████████▊| 978/1000 [55:12<01:14,  3.39s/it]Reads the verification type information . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[zodiac]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 972 ---------------------------------------------
Inspect constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor ctor = ctors [ [[i]] ] ; CtorDescriptor [[ctorDescriptor]] = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = [[ctorDescriptor]] ; if ( [[ctorDescriptor]] . isDefault ( ) ) { defaultCtor = [[ctorDescriptor]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[dockside]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[bookies]] = 0 ; [[bookies]] < ctors . length ; [[bookies]] ++ ) { Constructor ctor = ctors [ [[bookies]] ] ; CtorDescriptor [[aramaic]] = createCtorDescriptor ( ctor ) ; allCtors [ [[bookies]] ] = [[aramaic]] ; if ( [[aramaic]] . isDefault ( ) ) { defaultCtor = [[aramaic]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the request map . --> Method to get blackberries data --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[blackberries]] ( final HttpServletRequest [[swimsuit]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[swimsuit]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 974 ---------------------------------------------
Adds a file consumer to the list of consumers . --> Adds a newland to the list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[newland]] ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 975 ---------------------------------------------
Initialize the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[bertin]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 976 ---------------------------------------------
Returns a CtorDescriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[fractious]] ( final Class ... [[là]] ) { ctors : for ( CtorDescriptor [[hofman]] : allCtors ) { Class [ ] arg = [[hofman]] . getParameters ( ) ; if ( arg . length != [[là]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[là]] [ j ] ) { continue ctors ; } } return [[hofman]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 977 ---------------------------------------------
Convert an array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[discussions]] ( final Object [[killers]] ) { final Class valueComponentType = [[killers]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[killers]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 719 / 12 / 978:  98%|█████████▊| 978/1000 [55:12<01:14,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 719 / 12 / 978:  98%|█████████▊| 979/1000 [55:14<01:11,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 720 / 12 / 979:  98%|█████████▊| 979/1000 [55:14<01:11,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 720 / 12 / 979:  98%|█████████▊| 980/1000 [55:16<01:07,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 721 / 12 / 980:  98%|█████████▊| 980/1000 [55:16<01:07,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 721 / 12 / 980:  98%|█████████▊| 981/1000 [55:21<01:04,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 722 / 12 / 981:  98%|█████████▊| 981/1000 [55:21<01:04,  3.39s/it][Succeeded / Failed / Skipped / Total] 247 / 722 / 12 / 981:  98%|█████████▊| 982/1000 [55:21<01:00,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 723 / 12 / 982:  98%|█████████▊| 982/1000 [55:21<01:00,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 723 / 12 / 982:  98%|█████████▊| 983/1000 [55:25<00:57,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 724 / 12 / 983:  98%|█████████▊| 983/1000 [55:25<00:57,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 724 / 12 / 983:  98%|█████████▊| 984/1000 [55:28<00:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 725 / 12 / 984:  98%|█████████▊| 984/1000 [55:28<00:54,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 725 / 12 / 984:  98%|█████████▊| 985/1000 [55:32<00:50,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 726 / 12 / 985:  98%|█████████▊| 985/1000 [55:32<00:50,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 726 / 12 / 985:  99%|█████████▊| 986/1000 [55:32<00:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 727 / 12 / 986:  99%|█████████▊| 986/1000 [55:32<00:47,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 727 / 12 / 986:  99%|█████████▊| 987/1000 [55:37<00:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 728 / 12 / 987:  99%|█████████▊| 987/1000 [55:37<00:43,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 728 / 12 / 987:  99%|█████████▉| 988/1000 [55:41<00:40,  3.38s/it]Add a file to the search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[tobacconist]] ( final URI [[bacterium]] ) { File [[aapa]] ; try { [[aapa]] = new File ( [[tobacconist]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[tobacconist]] , ex ) ; } addPath ( [[aapa]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a pattern to the list of patterns to be included . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[ballsy]] : patterns ) { rules . include ( [[ballsy]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Adds a path to the list of paths . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[baryshnikov]] ( final File [[dominoes]] ) { if ( ! [[dominoes]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[dominoes]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Exclude one or more patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[genest]] ( final String ... [[inspired]] ) { for ( String [[hargrave]] : [[inspired]] ) { rules . exclude ( [[hargrave]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[copycats]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns a list of all files in the directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[thereafter]] ( ) { List < File > [[leak]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[leak]] . add ( file ) ; } return [[leak]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Resolve bean wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[keyboards]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 986 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[verifying]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[maracatu]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 988 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 729 / 12 / 988:  99%|█████████▉| 988/1000 [55:41<00:40,  3.38s/it][Succeeded / Failed / Skipped / Total] 247 / 729 / 12 / 988:  99%|█████████▉| 989/1000 [55:42<00:37,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 729 / 12 / 989:  99%|█████████▉| 989/1000 [55:42<00:37,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 729 / 12 / 989:  99%|█████████▉| 990/1000 [55:43<00:33,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 730 / 12 / 990:  99%|█████████▉| 990/1000 [55:43<00:33,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 730 / 12 / 990:  99%|█████████▉| 991/1000 [55:50<00:30,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 731 / 12 / 991:  99%|█████████▉| 991/1000 [55:50<00:30,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 731 / 12 / 991:  99%|█████████▉| 992/1000 [55:55<00:27,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 732 / 12 / 992:  99%|█████████▉| 992/1000 [55:55<00:27,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 732 / 12 / 992:  99%|█████████▉| 993/1000 [55:58<00:23,  3.38s/it]Initialize the todo files and folders . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[index]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[ashkenazi]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[boozing]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[boozing]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[boozing]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 989 ---------------------------------------------
Resolve bean name . --> makeyou aesthetically --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[makeyou]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[aesthetically]] = null ; if ( petiteBean != null ) { [[aesthetically]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[aesthetically]] == null ) || ( [[aesthetically]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[aesthetically]] = type . getName ( ) ; } else { [[aesthetically]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[aesthetically]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the class name of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[enchanté]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Appends the descriptor to the string builder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[exclaims]] ( final StringBuilder [[sledgehammer]] ) { if ( sort == OBJECT ) { [[sledgehammer]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[sledgehammer]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[sledgehammer]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Gets the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[hurdle]] ( final Constructor < ? > [[sheets]] ) { StringBuilder [[likeness]] = new StringBuilder ( ) ; [[likeness]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[sheets]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[likeness]] ) ; } return [[likeness]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 993 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 733 / 12 / 993:  99%|█████████▉| 993/1000 [55:58<00:23,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 733 / 12 / 993:  99%|█████████▉| 994/1000 [55:59<00:20,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 734 / 12 / 994:  99%|█████████▉| 994/1000 [55:59<00:20,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 734 / 12 / 994: 100%|█████████▉| 995/1000 [56:00<00:16,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 735 / 12 / 995: 100%|█████████▉| 995/1000 [56:00<00:16,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 735 / 12 / 995: 100%|█████████▉| 996/1000 [56:05<00:13,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 736 / 12 / 996: 100%|█████████▉| 996/1000 [56:05<00:13,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 736 / 12 / 996: 100%|█████████▉| 997/1000 [56:08<00:10,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 737 / 12 / 997: 100%|█████████▉| 997/1000 [56:08<00:10,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 737 / 12 / 997: 100%|█████████▉| 998/1000 [56:14<00:06,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 738 / 12 / 998: 100%|█████████▉| 998/1000 [56:14<00:06,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 738 / 12 / 998: 100%|█████████▉| 999/1000 [56:16<00:03,  3.38s/it]Returns the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[maldives]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[dewdrops]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[drainage]] = new StringBuilder ( ) ; [[drainage]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[drainage]] ) ; } [[drainage]] . append ( ' ' ) ; returnType . appendDescriptor ( [[drainage]] ) ; return [[drainage]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[amounted]] ( final Method [[bolton]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[bolton]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[bolton]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Mark this transaction as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[aurelia]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the number of arguments and return sizes for the given method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[pokémon]] ( final String [[carswell]] ) { int [[achieving]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 739 / 12 / 999: 100%|█████████▉| 999/1000 [56:16<00:03,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 739 / 12 / 999: 100%|██████████| 1000/1000 [56:17<00:00,  3.38s/it][Succeeded / Failed / Skipped / Total] 248 / 740 / 12 / 1000: 100%|██████████| 1000/1000 [56:17<00:00,  3.38s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 248 / 740 / 12 / 1000: 100%|██████████| 1000/1000 [56:19<00:00,  3.38s/it]Commit or rollback the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[hannah]] ( boolean [[chanted]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[chanted]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[chanted]] ) { [[chanted]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[chanted]] ? "commit" : "rollback" ) ) ; } } if ( [[chanted]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 248    |
| Number of failed attacks:     | 740    |
| Number of skipped attacks:    | 12     |
| Original accuracy:            | 98.8%  |
| Accuracy under attack:        | 74.0%  |
| Attack success rate:          | 25.1%  |
| Average perturbed word %:     | 57.78% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 177.66 |
| Original BLEU-4:              | 19.07  |
| Perturbed BLEU-4:             | 4.87   |
+-------------------------------+--------+

